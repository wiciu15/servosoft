
servo401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  0800c458  0800c458  0001c458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd14  0800cd14  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd14  0800cd14  0001cd14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd1c  0800cd1c  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd1c  0800cd1c  0001cd1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd20  0800cd20  0001cd20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800cd24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005204  200000b4  0800cdd8  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200052b8  0800cdd8  000252b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d5c8  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cae  00000000  00000000  0003d6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  00041360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001578  00000000  00000000  00042a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fde  00000000  00000000  00043fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a492  00000000  00000000  0005df86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a57a6  00000000  00000000  00078418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011dbbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006830  00000000  00000000  0011dc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b4 	.word	0x200000b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c440 	.word	0x0800c440

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b8 	.word	0x200000b8
 80001dc:	0800c440 	.word	0x0800c440

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b974 	b.w	8000e58 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	468e      	mov	lr, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14d      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4694      	mov	ip, r2
 8000b9a:	d969      	bls.n	8000c70 <__udivmoddi4+0xe8>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b152      	cbz	r2, 8000bb8 <__udivmoddi4+0x30>
 8000ba2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ba6:	f1c2 0120 	rsb	r1, r2, #32
 8000baa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bb6:	4094      	lsls	r4, r2
 8000bb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bbc:	0c21      	lsrs	r1, r4, #16
 8000bbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000bc2:	fa1f f78c 	uxth.w	r7, ip
 8000bc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bce:	fb06 f107 	mul.w	r1, r6, r7
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bde:	f080 811f 	bcs.w	8000e20 <__udivmoddi4+0x298>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 811c 	bls.w	8000e20 <__udivmoddi4+0x298>
 8000be8:	3e02      	subs	r6, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a5b      	subs	r3, r3, r1
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bfc:	fb00 f707 	mul.w	r7, r0, r7
 8000c00:	42a7      	cmp	r7, r4
 8000c02:	d90a      	bls.n	8000c1a <__udivmoddi4+0x92>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0c:	f080 810a 	bcs.w	8000e24 <__udivmoddi4+0x29c>
 8000c10:	42a7      	cmp	r7, r4
 8000c12:	f240 8107 	bls.w	8000e24 <__udivmoddi4+0x29c>
 8000c16:	4464      	add	r4, ip
 8000c18:	3802      	subs	r0, #2
 8000c1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1e:	1be4      	subs	r4, r4, r7
 8000c20:	2600      	movs	r6, #0
 8000c22:	b11d      	cbz	r5, 8000c2c <__udivmoddi4+0xa4>
 8000c24:	40d4      	lsrs	r4, r2
 8000c26:	2300      	movs	r3, #0
 8000c28:	e9c5 4300 	strd	r4, r3, [r5]
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0xc2>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80ef 	beq.w	8000e1a <__udivmoddi4+0x292>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x160>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xd4>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80f9 	bhi.w	8000e4e <__udivmoddi4+0x2c6>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	469e      	mov	lr, r3
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e0      	beq.n	8000c2c <__udivmoddi4+0xa4>
 8000c6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c6e:	e7dd      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000c70:	b902      	cbnz	r2, 8000c74 <__udivmoddi4+0xec>
 8000c72:	deff      	udf	#255	; 0xff
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f040 8092 	bne.w	8000da2 <__udivmoddi4+0x21a>
 8000c7e:	eba1 010c 	sub.w	r1, r1, ip
 8000c82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	2601      	movs	r6, #1
 8000c8c:	0c20      	lsrs	r0, r4, #16
 8000c8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c92:	fb07 1113 	mls	r1, r7, r3, r1
 8000c96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9a:	fb0e f003 	mul.w	r0, lr, r3
 8000c9e:	4288      	cmp	r0, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x12c>
 8000ca2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x12a>
 8000cac:	4288      	cmp	r0, r1
 8000cae:	f200 80cb 	bhi.w	8000e48 <__udivmoddi4+0x2c0>
 8000cb2:	4643      	mov	r3, r8
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x156>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x154>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f200 80bb 	bhi.w	8000e52 <__udivmoddi4+0x2ca>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ce6:	e79c      	b.n	8000c22 <__udivmoddi4+0x9a>
 8000ce8:	f1c6 0720 	rsb	r7, r6, #32
 8000cec:	40b3      	lsls	r3, r6
 8000cee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf6:	fa20 f407 	lsr.w	r4, r0, r7
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	431c      	orrs	r4, r3
 8000d00:	40f9      	lsrs	r1, r7
 8000d02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d06:	fa00 f306 	lsl.w	r3, r0, r6
 8000d0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d0e:	0c20      	lsrs	r0, r4, #16
 8000d10:	fa1f fe8c 	uxth.w	lr, ip
 8000d14:	fb09 1118 	mls	r1, r9, r8, r1
 8000d18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d20:	4288      	cmp	r0, r1
 8000d22:	fa02 f206 	lsl.w	r2, r2, r6
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x1b8>
 8000d28:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d30:	f080 8088 	bcs.w	8000e44 <__udivmoddi4+0x2bc>
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f240 8085 	bls.w	8000e44 <__udivmoddi4+0x2bc>
 8000d3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	1a09      	subs	r1, r1, r0
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d48:	fb09 1110 	mls	r1, r9, r0, r1
 8000d4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d54:	458e      	cmp	lr, r1
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1e2>
 8000d58:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d60:	d26c      	bcs.n	8000e3c <__udivmoddi4+0x2b4>
 8000d62:	458e      	cmp	lr, r1
 8000d64:	d96a      	bls.n	8000e3c <__udivmoddi4+0x2b4>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4461      	add	r1, ip
 8000d6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d72:	eba1 010e 	sub.w	r1, r1, lr
 8000d76:	42a1      	cmp	r1, r4
 8000d78:	46c8      	mov	r8, r9
 8000d7a:	46a6      	mov	lr, r4
 8000d7c:	d356      	bcc.n	8000e2c <__udivmoddi4+0x2a4>
 8000d7e:	d053      	beq.n	8000e28 <__udivmoddi4+0x2a0>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x212>
 8000d82:	ebb3 0208 	subs.w	r2, r3, r8
 8000d86:	eb61 010e 	sbc.w	r1, r1, lr
 8000d8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d92:	40f1      	lsrs	r1, r6
 8000d94:	431f      	orrs	r7, r3
 8000d96:	e9c5 7100 	strd	r7, r1, [r5]
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	f1c2 0320 	rsb	r3, r2, #32
 8000da6:	40d8      	lsrs	r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa21 f303 	lsr.w	r3, r1, r3
 8000db0:	4091      	lsls	r1, r2
 8000db2:	4301      	orrs	r1, r0
 8000db4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db8:	fa1f fe8c 	uxth.w	lr, ip
 8000dbc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dc0:	fb07 3610 	mls	r6, r7, r0, r3
 8000dc4:	0c0b      	lsrs	r3, r1, #16
 8000dc6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dca:	fb00 f60e 	mul.w	r6, r0, lr
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x260>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dde:	d22f      	bcs.n	8000e40 <__udivmoddi4+0x2b8>
 8000de0:	429e      	cmp	r6, r3
 8000de2:	d92d      	bls.n	8000e40 <__udivmoddi4+0x2b8>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	b289      	uxth	r1, r1
 8000dec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000df0:	fb07 3316 	mls	r3, r7, r6, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb06 f30e 	mul.w	r3, r6, lr
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x28a>
 8000e00:	eb1c 0101 	adds.w	r1, ip, r1
 8000e04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e08:	d216      	bcs.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d914      	bls.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0e:	3e02      	subs	r6, #2
 8000e10:	4461      	add	r1, ip
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e18:	e738      	b.n	8000c8c <__udivmoddi4+0x104>
 8000e1a:	462e      	mov	r6, r5
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	e705      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000e20:	4606      	mov	r6, r0
 8000e22:	e6e3      	b.n	8000bec <__udivmoddi4+0x64>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6f8      	b.n	8000c1a <__udivmoddi4+0x92>
 8000e28:	454b      	cmp	r3, r9
 8000e2a:	d2a9      	bcs.n	8000d80 <__udivmoddi4+0x1f8>
 8000e2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e34:	3801      	subs	r0, #1
 8000e36:	e7a3      	b.n	8000d80 <__udivmoddi4+0x1f8>
 8000e38:	4646      	mov	r6, r8
 8000e3a:	e7ea      	b.n	8000e12 <__udivmoddi4+0x28a>
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	e794      	b.n	8000d6a <__udivmoddi4+0x1e2>
 8000e40:	4640      	mov	r0, r8
 8000e42:	e7d1      	b.n	8000de8 <__udivmoddi4+0x260>
 8000e44:	46d0      	mov	r8, sl
 8000e46:	e77b      	b.n	8000d40 <__udivmoddi4+0x1b8>
 8000e48:	3b02      	subs	r3, #2
 8000e4a:	4461      	add	r1, ip
 8000e4c:	e732      	b.n	8000cb4 <__udivmoddi4+0x12c>
 8000e4e:	4630      	mov	r0, r6
 8000e50:	e709      	b.n	8000c66 <__udivmoddi4+0xde>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e742      	b.n	8000cde <__udivmoddi4+0x156>

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <modbus_protocol_read>:
uint16_t modbus_registers_buffer[30] = {0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}; //modbus holding registers

extern UART_HandleTypeDef huart1;
extern DMA_HandleTypeDef hdma_usart1_rx;

uint16_t modbus_protocol_read(uint32_t la){
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

	if(la>=40001 && la<=40030)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d90c      	bls.n	8000e88 <modbus_protocol_read+0x2c>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f649 425e 	movw	r2, #40030	; 0x9c5e
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d807      	bhi.n	8000e88 <modbus_protocol_read+0x2c>
	{return modbus_registers_buffer[la-40001];}else{
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8000e7e:	3b41      	subs	r3, #65	; 0x41
 8000e80:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <modbus_protocol_read+0x3c>)
 8000e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e86:	e001      	b.n	8000e8c <modbus_protocol_read+0x30>
		return 0xFFFF;
 8000e88:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	20000000 	.word	0x20000000

08000e9c <modbus_protocol_write>:

uint16_t modbus_protocol_write(uint32_t la, uint16_t value)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
	uint8_t local_address=la-40001;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	3b41      	subs	r3, #65	; 0x41
 8000eae:	73fb      	strb	r3, [r7, #15]
	switch (local_address){
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	3b02      	subs	r3, #2
 8000eb4:	2b05      	cmp	r3, #5
 8000eb6:	f200 80b4 	bhi.w	8001022 <modbus_protocol_write+0x186>
 8000eba:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <modbus_protocol_write+0x24>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000ed9 	.word	0x08000ed9
 8000ec4:	08000eef 	.word	0x08000eef
 8000ec8:	08001023 	.word	0x08001023
 8000ecc:	08000f25 	.word	0x08000f25
 8000ed0:	08000f41 	.word	0x08000f41
 8000ed4:	08000f89 	.word	0x08000f89
	case 2://error register
		if(value==0){inverter_error = no_error;modbus_registers_buffer[2]=value;}break; //acknowledge error
 8000ed8:	887b      	ldrh	r3, [r7, #2]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f040 80a3 	bne.w	8001026 <modbus_protocol_write+0x18a>
 8000ee0:	4b56      	ldr	r3, [pc, #344]	; (800103c <modbus_protocol_write+0x1a0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
 8000ee6:	4a56      	ldr	r2, [pc, #344]	; (8001040 <modbus_protocol_write+0x1a4>)
 8000ee8:	887b      	ldrh	r3, [r7, #2]
 8000eea:	8093      	strh	r3, [r2, #4]
 8000eec:	e09b      	b.n	8001026 <modbus_protocol_write+0x18a>
	case 3: //control register
		switch(value){
 8000eee:	887b      	ldrh	r3, [r7, #2]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d002      	beq.n	8000efa <modbus_protocol_write+0x5e>
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d006      	beq.n	8000f06 <modbus_protocol_write+0x6a>
 8000ef8:	e010      	b.n	8000f1c <modbus_protocol_write+0x80>
		case 0:
			modbus_registers_buffer[3] = value;inverter_disable();break;
 8000efa:	4a51      	ldr	r2, [pc, #324]	; (8001040 <modbus_protocol_write+0x1a4>)
 8000efc:	887b      	ldrh	r3, [r7, #2]
 8000efe:	80d3      	strh	r3, [r2, #6]
 8000f00:	f000 f9ec 	bl	80012dc <inverter_disable>
 8000f04:	e00d      	b.n	8000f22 <modbus_protocol_write+0x86>
		case 1:
			modbus_registers_buffer[3] = value;inv_control_mode = modbus_registers_buffer[5];inverter_enable();break;
 8000f06:	4a4e      	ldr	r2, [pc, #312]	; (8001040 <modbus_protocol_write+0x1a4>)
 8000f08:	887b      	ldrh	r3, [r7, #2]
 8000f0a:	80d3      	strh	r3, [r2, #6]
 8000f0c:	4b4c      	ldr	r3, [pc, #304]	; (8001040 <modbus_protocol_write+0x1a4>)
 8000f0e:	895b      	ldrh	r3, [r3, #10]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4b4c      	ldr	r3, [pc, #304]	; (8001044 <modbus_protocol_write+0x1a8>)
 8000f14:	701a      	strb	r2, [r3, #0]
 8000f16:	f000 f9a3 	bl	8001260 <inverter_enable>
 8000f1a:	e002      	b.n	8000f22 <modbus_protocol_write+0x86>
		default:
			inverter_disable();break;
 8000f1c:	f000 f9de 	bl	80012dc <inverter_disable>
 8000f20:	bf00      	nop
		}
		break;
 8000f22:	e085      	b.n	8001030 <modbus_protocol_write+0x194>
	case 5: //operation mode register
		if(value<=2){inv_control_mode=value;
 8000f24:	887b      	ldrh	r3, [r7, #2]
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d87f      	bhi.n	800102a <modbus_protocol_write+0x18e>
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b45      	ldr	r3, [pc, #276]	; (8001044 <modbus_protocol_write+0x1a8>)
 8000f30:	701a      	strb	r2, [r3, #0]
		modbus_registers_buffer[5]=inv_control_mode;}
 8000f32:	4b44      	ldr	r3, [pc, #272]	; (8001044 <modbus_protocol_write+0x1a8>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	4b41      	ldr	r3, [pc, #260]	; (8001040 <modbus_protocol_write+0x1a4>)
 8000f3c:	815a      	strh	r2, [r3, #10]
		break;
 8000f3e:	e074      	b.n	800102a <modbus_protocol_write+0x18e>
	case 6: //speed setpoint in rpm
		{int16_t received_speed=value;
 8000f40:	887b      	ldrh	r3, [r7, #2]
 8000f42:	817b      	strh	r3, [r7, #10]
		if((received_speed)<=1000 && (received_speed)>=(-1000) ){speed_setpoint_deg_s = (float)received_speed*6.0f;}
 8000f44:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f4c:	dc11      	bgt.n	8000f72 <modbus_protocol_write+0xd6>
 8000f4e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f52:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000f56:	db0c      	blt.n	8000f72 <modbus_protocol_write+0xd6>
 8000f58:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f5c:	ee07 3a90 	vmov	s15, r3
 8000f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f64:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000f68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f6c:	4b36      	ldr	r3, [pc, #216]	; (8001048 <modbus_protocol_write+0x1ac>)
 8000f6e:	edc3 7a00 	vstr	s15, [r3]
		modbus_registers_buffer[6]=(uint16_t)speed_setpoint_deg_s;
 8000f72:	4b35      	ldr	r3, [pc, #212]	; (8001048 <modbus_protocol_write+0x1ac>)
 8000f74:	edd3 7a00 	vldr	s15, [r3]
 8000f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f7c:	ee17 3a90 	vmov	r3, s15
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <modbus_protocol_write+0x1a4>)
 8000f84:	819a      	strh	r2, [r3, #12]
		break;}
 8000f86:	e053      	b.n	8001030 <modbus_protocol_write+0x194>
	case 7: //set output voltage in manual/torque in foc
		{if(inv_control_mode==manual){
 8000f88:	4b2e      	ldr	r3, [pc, #184]	; (8001044 <modbus_protocol_write+0x1a8>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d122      	bne.n	8000fd8 <modbus_protocol_write+0x13c>
			uint8_t received_duty_cycle_percent=value;
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	73bb      	strb	r3, [r7, #14]
			if(value<=100 && value>=0){duty_cycle = ((float)received_duty_cycle_percent/100.0f)*(float)duty_cycle_limit;}
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	2b64      	cmp	r3, #100	; 0x64
 8000f9a:	d813      	bhi.n	8000fc4 <modbus_protocol_write+0x128>
 8000f9c:	7bbb      	ldrb	r3, [r7, #14]
 8000f9e:	ee07 3a90 	vmov	s15, r3
 8000fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fa6:	eddf 6a29 	vldr	s13, [pc, #164]	; 800104c <modbus_protocol_write+0x1b0>
 8000faa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fae:	4b28      	ldr	r3, [pc, #160]	; (8001050 <modbus_protocol_write+0x1b4>)
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fbe:	4b25      	ldr	r3, [pc, #148]	; (8001054 <modbus_protocol_write+0x1b8>)
 8000fc0:	edc3 7a00 	vstr	s15, [r3]
			modbus_registers_buffer[7]=duty_cycle;
 8000fc4:	4b23      	ldr	r3, [pc, #140]	; (8001054 <modbus_protocol_write+0x1b8>)
 8000fc6:	edd3 7a00 	vldr	s15, [r3]
 8000fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fce:	ee17 3a90 	vmov	r3, s15
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <modbus_protocol_write+0x1a4>)
 8000fd6:	81da      	strh	r2, [r3, #14]
		}
		if(inv_control_mode==foc){
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <modbus_protocol_write+0x1a8>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d125      	bne.n	800102e <modbus_protocol_write+0x192>
			int8_t received_torque_setpoint = (int16_t)value;
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	737b      	strb	r3, [r7, #13]
			if(received_torque_setpoint>=-100 && received_torque_setpoint<=100){
 8000fe6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000fea:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000fee:	db1e      	blt.n	800102e <modbus_protocol_write+0x192>
 8000ff0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ff4:	2b64      	cmp	r3, #100	; 0x64
 8000ff6:	dc1a      	bgt.n	800102e <modbus_protocol_write+0x192>
			torque_setpoint=received_torque_setpoint;
 8000ff8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ffc:	ee07 3a90 	vmov	s15, r3
 8001000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <modbus_protocol_write+0x1bc>)
 8001006:	edc3 7a00 	vstr	s15, [r3]
			modbus_registers_buffer[7]=(int16_t)torque_setpoint;
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <modbus_protocol_write+0x1bc>)
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001014:	ee17 3a90 	vmov	r3, s15
 8001018:	b21b      	sxth	r3, r3
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <modbus_protocol_write+0x1a4>)
 800101e:	81da      	strh	r2, [r3, #14]
			}
		}

		break;}
 8001020:	e005      	b.n	800102e <modbus_protocol_write+0x192>
	default:
		//if not handled inside switch, then read-only parameter
		break;
 8001022:	bf00      	nop
 8001024:	e004      	b.n	8001030 <modbus_protocol_write+0x194>
		if(value==0){inverter_error = no_error;modbus_registers_buffer[2]=value;}break; //acknowledge error
 8001026:	bf00      	nop
 8001028:	e002      	b.n	8001030 <modbus_protocol_write+0x194>
		break;
 800102a:	bf00      	nop
 800102c:	e000      	b.n	8001030 <modbus_protocol_write+0x194>
		break;}
 800102e:	bf00      	nop
	}
	return value;
 8001030:	887b      	ldrh	r3, [r7, #2]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000488 	.word	0x20000488
 8001040:	20000000 	.word	0x20000000
 8001044:	20000760 	.word	0x20000760
 8001048:	20000764 	.word	0x20000764
 800104c:	42c80000 	.word	0x42c80000
 8001050:	0800c688 	.word	0x0800c688
 8001054:	2000076c 	.word	0x2000076c
 8001058:	20000780 	.word	0x20000780

0800105c <mbus_send>:

int mbus_send(const mbus_t context,const uint8_t* data, const uint16_t size){
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	4613      	mov	r3, r2
 800106a:	80bb      	strh	r3, [r7, #4]
	UNUSED(context);
	HAL_GPIO_WritePin(MODBUS_DE_GPIO_Port,MODBUS_DE_Pin, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001072:	480a      	ldr	r0, [pc, #40]	; (800109c <mbus_send+0x40>)
 8001074:	f004 fa92 	bl	800559c <HAL_GPIO_WritePin>
	if(HAL_UART_Transmit_DMA( &huart1, (uint8_t*) data,size)==HAL_OK){
 8001078:	88bb      	ldrh	r3, [r7, #4]
 800107a:	461a      	mov	r2, r3
 800107c:	6839      	ldr	r1, [r7, #0]
 800107e:	4808      	ldr	r0, [pc, #32]	; (80010a0 <mbus_send+0x44>)
 8001080:	f006 f960 	bl	8007344 <HAL_UART_Transmit_DMA>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <mbus_send+0x32>
		return MBUS_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	e001      	b.n	8001092 <mbus_send+0x36>
	}else{return MBUS_ERROR;}
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40020400 	.word	0x40020400
 80010a0:	2000060c 	.word	0x2000060c

080010a4 <Modbus_init>:

void Modbus_init(){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
	/* Device slave address */
	mb_config.devaddr = 0x01;
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <Modbus_init+0x68>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]

	/* Just ptr on any external object, you can get it by context */
	mb_config.device = (void*) 0;
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <Modbus_init+0x68>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]

	uint8_t * pmodbusSendBuffer;
	pmodbusSendBuffer=&modbusSendBufer;
 80010b6:	4b16      	ldr	r3, [pc, #88]	; (8001110 <Modbus_init+0x6c>)
 80010b8:	60fb      	str	r3, [r7, #12]
	mb_config.sendbuf = pmodbusSendBuffer;
 80010ba:	4a14      	ldr	r2, [pc, #80]	; (800110c <Modbus_init+0x68>)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6193      	str	r3, [r2, #24]
	mb_config.sendbuf_sz = sizeof(modbusSendBufer);
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <Modbus_init+0x68>)
 80010c2:	2264      	movs	r2, #100	; 0x64
 80010c4:	839a      	strh	r2, [r3, #28]

	uint8_t * pmodbusRecvBuffer;
	pmodbusRecvBuffer=&modbusReceiveBufer;
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <Modbus_init+0x70>)
 80010c8:	60bb      	str	r3, [r7, #8]
	mb_config.recvbuf = pmodbusRecvBuffer;
 80010ca:	4a10      	ldr	r2, [pc, #64]	; (800110c <Modbus_init+0x68>)
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	6213      	str	r3, [r2, #32]
	mb_config.recvbuf_sz = sizeof(modbusReceiveBufer);
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <Modbus_init+0x68>)
 80010d2:	2264      	movs	r2, #100	; 0x64
 80010d4:	849a      	strh	r2, [r3, #36]	; 0x24

	/* This that function for sending some data (use sendbuf for buf) */
	mb_config.send = &mbus_send;
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <Modbus_init+0x68>)
 80010d8:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <Modbus_init+0x74>)
 80010da:	60da      	str	r2, [r3, #12]

	Modbus_Conf_t * pconf;
	pconf=&mb_config;
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <Modbus_init+0x68>)
 80010de:	607b      	str	r3, [r7, #4]
	//User Read callback function ( read by logical address)
	pconf->read = modbus_protocol_read;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <Modbus_init+0x78>)
 80010e4:	611a      	str	r2, [r3, #16]

	//Write callback function
	pconf->write = modbus_protocol_write;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <Modbus_init+0x7c>)
 80010ea:	615a      	str	r2, [r3, #20]

	//Open modbus contex
	modbus = mbus_open(pconf);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f002 f885 	bl	80031fc <mbus_open>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <Modbus_init+0x80>)
 80010f8:	701a      	strb	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, UART_RX_buf, sizeof(UART_RX_buf));
 80010fa:	22c8      	movs	r2, #200	; 0xc8
 80010fc:	490a      	ldr	r1, [pc, #40]	; (8001128 <Modbus_init+0x84>)
 80010fe:	480b      	ldr	r0, [pc, #44]	; (800112c <Modbus_init+0x88>)
 8001100:	f006 f99e 	bl	8007440 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200000d4 	.word	0x200000d4
 8001110:	200003c0 	.word	0x200003c0
 8001114:	20000424 	.word	0x20000424
 8001118:	0800105d 	.word	0x0800105d
 800111c:	08000e5d 	.word	0x08000e5d
 8001120:	08000e9d 	.word	0x08000e9d
 8001124:	200000d0 	.word	0x200000d0
 8001128:	200000fc 	.word	0x200000fc
 800112c:	2000060c 	.word	0x2000060c

08001130 <modbus_process_new_data_to_fifo>:

void modbus_process_new_data_to_fifo(UART_HandleTypeDef *huart, uint16_t Size){
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a29      	ldr	r2, [pc, #164]	; (80011e8 <modbus_process_new_data_to_fifo+0xb8>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d14c      	bne.n	80011e0 <modbus_process_new_data_to_fifo+0xb0>
	{
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) UART_RX_buf, sizeof(UART_RX_buf));
 8001146:	22c8      	movs	r2, #200	; 0xc8
 8001148:	4928      	ldr	r1, [pc, #160]	; (80011ec <modbus_process_new_data_to_fifo+0xbc>)
 800114a:	4829      	ldr	r0, [pc, #164]	; (80011f0 <modbus_process_new_data_to_fifo+0xc0>)
 800114c:	f006 f978 	bl	8007440 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001150:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <modbus_process_new_data_to_fifo+0xc4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <modbus_process_new_data_to_fifo+0xc4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0208 	bic.w	r2, r2, #8
 800115e:	601a      	str	r2, [r3, #0]

		fifo_oldpos = fifo_newpos;  // Update the last position before copying new data
 8001160:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <modbus_process_new_data_to_fifo+0xc8>)
 8001162:	881a      	ldrh	r2, [r3, #0]
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <modbus_process_new_data_to_fifo+0xcc>)
 8001166:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (fifo_oldpos+Size > sizeof(UART_RX_FIFO)-1)  // If the current position + new data size is greater than the main buffer
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <modbus_process_new_data_to_fifo+0xcc>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	4413      	add	r3, r2
 8001172:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001176:	d322      	bcc.n	80011be <modbus_process_new_data_to_fifo+0x8e>
		{
			uint16_t datatocopy = sizeof(UART_RX_FIFO)-fifo_oldpos;  // find out how much space is left in the main buffer
 8001178:	4b20      	ldr	r3, [pc, #128]	; (80011fc <modbus_process_new_data_to_fifo+0xcc>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 8001180:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)UART_RX_FIFO+fifo_oldpos, UART_RX_buf, datatocopy);  // copy data in that remaining space
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <modbus_process_new_data_to_fifo+0xcc>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <modbus_process_new_data_to_fifo+0xd0>)
 800118a:	4413      	add	r3, r2
 800118c:	89fa      	ldrh	r2, [r7, #14]
 800118e:	4917      	ldr	r1, [pc, #92]	; (80011ec <modbus_process_new_data_to_fifo+0xbc>)
 8001190:	4618      	mov	r0, r3
 8001192:	f00a f867 	bl	800b264 <memcpy>

			fifo_oldpos = 0;  // point to the start of the buffer
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <modbus_process_new_data_to_fifo+0xcc>)
 8001198:	2200      	movs	r2, #0
 800119a:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)UART_RX_FIFO, (uint8_t *)UART_RX_buf+datatocopy, (Size-datatocopy));  // copy the remaining data
 800119c:	89fb      	ldrh	r3, [r7, #14]
 800119e:	4a13      	ldr	r2, [pc, #76]	; (80011ec <modbus_process_new_data_to_fifo+0xbc>)
 80011a0:	1899      	adds	r1, r3, r2
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	89fb      	ldrh	r3, [r7, #14]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	4815      	ldr	r0, [pc, #84]	; (8001200 <modbus_process_new_data_to_fifo+0xd0>)
 80011ac:	f00a f85a 	bl	800b264 <memcpy>
			fifo_newpos = (Size-datatocopy);  // update the position
 80011b0:	887a      	ldrh	r2, [r7, #2]
 80011b2:	89fb      	ldrh	r3, [r7, #14]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <modbus_process_new_data_to_fifo+0xc8>)
 80011ba:	801a      	strh	r2, [r3, #0]
		}



	}
}
 80011bc:	e010      	b.n	80011e0 <modbus_process_new_data_to_fifo+0xb0>
			memcpy ((uint8_t *)UART_RX_FIFO+fifo_oldpos, UART_RX_buf, Size);
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <modbus_process_new_data_to_fifo+0xcc>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <modbus_process_new_data_to_fifo+0xd0>)
 80011c6:	4413      	add	r3, r2
 80011c8:	887a      	ldrh	r2, [r7, #2]
 80011ca:	4908      	ldr	r1, [pc, #32]	; (80011ec <modbus_process_new_data_to_fifo+0xbc>)
 80011cc:	4618      	mov	r0, r3
 80011ce:	f00a f849 	bl	800b264 <memcpy>
			fifo_newpos = Size+fifo_oldpos;
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <modbus_process_new_data_to_fifo+0xcc>)
 80011d4:	881a      	ldrh	r2, [r3, #0]
 80011d6:	887b      	ldrh	r3, [r7, #2]
 80011d8:	4413      	add	r3, r2
 80011da:	b29a      	uxth	r2, r3
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <modbus_process_new_data_to_fifo+0xc8>)
 80011de:	801a      	strh	r2, [r3, #0]
}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40011000 	.word	0x40011000
 80011ec:	200000fc 	.word	0x200000fc
 80011f0:	2000060c 	.word	0x2000060c
 80011f4:	20000694 	.word	0x20000694
 80011f8:	200003ba 	.word	0x200003ba
 80011fc:	200003b8 	.word	0x200003b8
 8001200:	200001c4 	.word	0x200001c4

08001204 <process_modbus_command>:

void process_modbus_command(){
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	while(fifo_read_pos!=fifo_newpos){
 8001208:	e019      	b.n	800123e <process_modbus_command+0x3a>
		mbus_poll(modbus, UART_RX_FIFO[fifo_read_pos] );
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <process_modbus_command+0x4c>)
 800120c:	f993 3000 	ldrsb.w	r3, [r3]
 8001210:	4a10      	ldr	r2, [pc, #64]	; (8001254 <process_modbus_command+0x50>)
 8001212:	8812      	ldrh	r2, [r2, #0]
 8001214:	4611      	mov	r1, r2
 8001216:	4a10      	ldr	r2, [pc, #64]	; (8001258 <process_modbus_command+0x54>)
 8001218:	5c52      	ldrb	r2, [r2, r1]
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f002 fa45 	bl	80036ac <mbus_poll>
		fifo_read_pos++;
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <process_modbus_command+0x50>)
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	b29a      	uxth	r2, r3
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <process_modbus_command+0x50>)
 800122c:	801a      	strh	r2, [r3, #0]
		if(fifo_read_pos>=sizeof(UART_RX_FIFO)){
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <process_modbus_command+0x50>)
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001236:	d302      	bcc.n	800123e <process_modbus_command+0x3a>
			fifo_read_pos=0;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <process_modbus_command+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	801a      	strh	r2, [r3, #0]
	while(fifo_read_pos!=fifo_newpos){
 800123e:	4b05      	ldr	r3, [pc, #20]	; (8001254 <process_modbus_command+0x50>)
 8001240:	881a      	ldrh	r2, [r3, #0]
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <process_modbus_command+0x58>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	429a      	cmp	r2, r3
 8001248:	d1df      	bne.n	800120a <process_modbus_command+0x6>
		}
	}

}
 800124a:	bf00      	nop
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200000d0 	.word	0x200000d0
 8001254:	200003bc 	.word	0x200003bc
 8001258:	200001c4 	.word	0x200001c4
 800125c:	200003ba 	.word	0x200003ba

08001260 <inverter_enable>:

extern TIM_HandleTypeDef htim1;
extern UART_HandleTypeDef huart1;
volatile inverter_error_t inverter_error=no_error;

void inverter_enable(){
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	if(inverter_error==0){
 8001264:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <inverter_enable+0x64>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d128      	bne.n	80012c0 <inverter_enable+0x60>
		speed_setpoint_deg_s=0.0f;
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <inverter_enable+0x68>)
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
		duty_cycle=0.0f;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <inverter_enable+0x6c>)
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
		TIM1->CCR1=0;
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <inverter_enable+0x70>)
 8001280:	2200      	movs	r2, #0
 8001282:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=0;
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <inverter_enable+0x70>)
 8001286:	2200      	movs	r2, #0
 8001288:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=0;
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <inverter_enable+0x70>)
 800128c:	2200      	movs	r2, #0
 800128e:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(INV_ENABLE_GPIO_Port, INV_ENABLE_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001296:	480f      	ldr	r0, [pc, #60]	; (80012d4 <inverter_enable+0x74>)
 8001298:	f004 f980 	bl	800559c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INV_ENABLE_GPIO_Port, INV_ENABLE_Pin, GPIO_PIN_SET);
 800129c:	2201      	movs	r2, #1
 800129e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012a2:	480c      	ldr	r0, [pc, #48]	; (80012d4 <inverter_enable+0x74>)
 80012a4:	f004 f97a 	bl	800559c <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80012a8:	2100      	movs	r1, #0
 80012aa:	480b      	ldr	r0, [pc, #44]	; (80012d8 <inverter_enable+0x78>)
 80012ac:	f004 ff22 	bl	80060f4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80012b0:	2104      	movs	r1, #4
 80012b2:	4809      	ldr	r0, [pc, #36]	; (80012d8 <inverter_enable+0x78>)
 80012b4:	f004 ff1e 	bl	80060f4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 80012b8:	2108      	movs	r1, #8
 80012ba:	4807      	ldr	r0, [pc, #28]	; (80012d8 <inverter_enable+0x78>)
 80012bc:	f004 ff1a 	bl	80060f4 <HAL_TIM_PWM_Start>
	}
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000488 	.word	0x20000488
 80012c8:	20000764 	.word	0x20000764
 80012cc:	2000076c 	.word	0x2000076c
 80012d0:	40010000 	.word	0x40010000
 80012d4:	40020400 	.word	0x40020400
 80012d8:	20000534 	.word	0x20000534

080012dc <inverter_disable>:

void inverter_disable(){
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	speed_setpoint_deg_s=0.0f;
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <inverter_disable+0x54>)
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
	duty_cycle=0.0f;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <inverter_disable+0x58>)
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
	//TIM1->CCR1=0;TIM1->CCR2=0;TIM1->CCR3=0;
	HAL_GPIO_WritePin(INV_DISABLE_GPIO_Port, INV_DISABLE_Pin, GPIO_PIN_RESET);
 80012f0:	2200      	movs	r2, #0
 80012f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f6:	4810      	ldr	r0, [pc, #64]	; (8001338 <inverter_disable+0x5c>)
 80012f8:	f004 f950 	bl	800559c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INV_DISABLE_GPIO_Port, INV_DISABLE_Pin, GPIO_PIN_SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001302:	480d      	ldr	r0, [pc, #52]	; (8001338 <inverter_disable+0x5c>)
 8001304:	f004 f94a 	bl	800559c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8001308:	2100      	movs	r1, #0
 800130a:	480c      	ldr	r0, [pc, #48]	; (800133c <inverter_disable+0x60>)
 800130c:	f004 ffa2 	bl	8006254 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2);
 8001310:	2104      	movs	r1, #4
 8001312:	480a      	ldr	r0, [pc, #40]	; (800133c <inverter_disable+0x60>)
 8001314:	f004 ff9e 	bl	8006254 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_3);
 8001318:	2108      	movs	r1, #8
 800131a:	4808      	ldr	r0, [pc, #32]	; (800133c <inverter_disable+0x60>)
 800131c:	f004 ff9a 	bl	8006254 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 8001320:	4806      	ldr	r0, [pc, #24]	; (800133c <inverter_disable+0x60>)
 8001322:	f004 fe5f 	bl	8005fe4 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim1); //restart base timer to keep 16khz tim1_update ISR active for reading current and encoder data when inverter not working
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <inverter_disable+0x60>)
 8001328:	f004 fdfa 	bl	8005f20 <HAL_TIM_Base_Start_IT>
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000764 	.word	0x20000764
 8001334:	2000076c 	.word	0x2000076c
 8001338:	40020400 	.word	0x40020400
 800133c:	20000534 	.word	0x20000534

08001340 <inverter_error_trip>:

void inverter_error_trip(inverter_error_t error){
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
	inverter_disable();
 800134a:	f7ff ffc7 	bl	80012dc <inverter_disable>
	inverter_error=error;
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <inverter_error_trip+0x24>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	7013      	strb	r3, [r2, #0]
	modbus_registers_buffer[2]=error;
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	b29a      	uxth	r2, r3
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <inverter_error_trip+0x28>)
 800135a:	809a      	strh	r2, [r3, #4]
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000488 	.word	0x20000488
 8001368:	20000000 	.word	0x20000000

0800136c <park_transform>:

void park_transform(float I_U,float I_V,float motor_angle,float * I_d,float * I_q){
 800136c:	b580      	push	{r7, lr}
 800136e:	ed2d 8b02 	vpush	{d8}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	ed87 0a05 	vstr	s0, [r7, #20]
 800137a:	edc7 0a04 	vstr	s1, [r7, #16]
 800137e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001382:	60b8      	str	r0, [r7, #8]
 8001384:	6079      	str	r1, [r7, #4]
	float Ialfa=I_U;
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
	float Ibeta=(0.5773502f * I_U) + (1.1547005f * I_V);
 800138a:	edd7 7a05 	vldr	s15, [r7, #20]
 800138e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001434 <park_transform+0xc8>
 8001392:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001396:	edd7 7a04 	vldr	s15, [r7, #16]
 800139a:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001438 <park_transform+0xcc>
 800139e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a6:	edc7 7a08 	vstr	s15, [r7, #32]
	float motor_angle_rad = (motor_angle/180.0f)*3.141592f;
 80013aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80013ae:	eddf 6a23 	vldr	s13, [pc, #140]	; 800143c <park_transform+0xd0>
 80013b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013b6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001440 <park_transform+0xd4>
 80013ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013be:	edc7 7a07 	vstr	s15, [r7, #28]
	*I_d = (Ialfa * cosf(motor_angle_rad)) + (Ibeta * sinf(motor_angle_rad));
 80013c2:	ed97 0a07 	vldr	s0, [r7, #28]
 80013c6:	f00a f825 	bl	800b414 <cosf>
 80013ca:	eeb0 7a40 	vmov.f32	s14, s0
 80013ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013d2:	ee27 8a27 	vmul.f32	s16, s14, s15
 80013d6:	ed97 0a07 	vldr	s0, [r7, #28]
 80013da:	f00a f85f 	bl	800b49c <sinf>
 80013de:	eeb0 7a40 	vmov.f32	s14, s0
 80013e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80013e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ea:	ee78 7a27 	vadd.f32	s15, s16, s15
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	edc3 7a00 	vstr	s15, [r3]
	*I_q = (Ialfa * sinf(motor_angle_rad)*(-1)) + (Ibeta * cosf(motor_angle_rad));
 80013f4:	ed97 0a07 	vldr	s0, [r7, #28]
 80013f8:	f00a f80c 	bl	800b414 <cosf>
 80013fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001400:	edd7 7a08 	vldr	s15, [r7, #32]
 8001404:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001408:	ed97 0a07 	vldr	s0, [r7, #28]
 800140c:	f00a f846 	bl	800b49c <sinf>
 8001410:	eeb0 7a40 	vmov.f32	s14, s0
 8001414:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	edc3 7a00 	vstr	s15, [r3]
}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	; 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	ecbd 8b02 	vpop	{d8}
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	3f13cd39 	.word	0x3f13cd39
 8001438:	3f93cd3a 	.word	0x3f93cd3a
 800143c:	43340000 	.word	0x43340000
 8001440:	40490fd8 	.word	0x40490fd8

08001444 <inv_park_transform>:


void inv_park_transform(float U_d,float U_q, float motor_angle, float * U_alpha, float * U_beta){
 8001444:	b580      	push	{r7, lr}
 8001446:	ed2d 8b02 	vpush	{d8}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0
 800144e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001452:	edc7 0a04 	vstr	s1, [r7, #16]
 8001456:	ed87 1a03 	vstr	s2, [r7, #12]
 800145a:	60b8      	str	r0, [r7, #8]
 800145c:	6079      	str	r1, [r7, #4]
	float motor_angle_rad = (motor_angle/180.0f)*3.141592f;
 800145e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001462:	eddf 6a21 	vldr	s13, [pc, #132]	; 80014e8 <inv_park_transform+0xa4>
 8001466:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800146a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80014ec <inv_park_transform+0xa8>
 800146e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001472:	edc7 7a07 	vstr	s15, [r7, #28]
	*U_alpha= (U_d * cosf(motor_angle_rad)) - (U_q * sinf(motor_angle_rad));
 8001476:	ed97 0a07 	vldr	s0, [r7, #28]
 800147a:	f009 ffcb 	bl	800b414 <cosf>
 800147e:	eeb0 7a40 	vmov.f32	s14, s0
 8001482:	edd7 7a05 	vldr	s15, [r7, #20]
 8001486:	ee27 8a27 	vmul.f32	s16, s14, s15
 800148a:	ed97 0a07 	vldr	s0, [r7, #28]
 800148e:	f00a f805 	bl	800b49c <sinf>
 8001492:	eeb0 7a40 	vmov.f32	s14, s0
 8001496:	edd7 7a04 	vldr	s15, [r7, #16]
 800149a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149e:	ee78 7a67 	vsub.f32	s15, s16, s15
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	edc3 7a00 	vstr	s15, [r3]
	*U_beta = (U_d * sinf(motor_angle_rad)) + (U_q * cosf(motor_angle_rad));
 80014a8:	ed97 0a07 	vldr	s0, [r7, #28]
 80014ac:	f009 fff6 	bl	800b49c <sinf>
 80014b0:	eeb0 7a40 	vmov.f32	s14, s0
 80014b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80014b8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80014bc:	ed97 0a07 	vldr	s0, [r7, #28]
 80014c0:	f009 ffa8 	bl	800b414 <cosf>
 80014c4:	eeb0 7a40 	vmov.f32	s14, s0
 80014c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80014cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	edc3 7a00 	vstr	s15, [r3]
}
 80014da:	bf00      	nop
 80014dc:	3720      	adds	r7, #32
 80014de:	46bd      	mov	sp, r7
 80014e0:	ecbd 8b02 	vpop	{d8}
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	43340000 	.word	0x43340000
 80014ec:	40490fd8 	.word	0x40490fd8

080014f0 <LowPassFilter>:

//Tf - filter time constant in seconds
float LowPassFilter(float Tf,float actual_measurement, float * last_filtered_value){
 80014f0:	b480      	push	{r7}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80014fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80014fe:	6078      	str	r0, [r7, #4]
	float alpha = Tf/(Tf + 0.0000625f); //0.0000625 = 1/16kHz - pwm interrupt frequency and sampling
 8001500:	edd7 7a03 	vldr	s15, [r7, #12]
 8001504:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800155c <LowPassFilter+0x6c>
 8001508:	ee37 7a87 	vadd.f32	s14, s15, s14
 800150c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001514:	edc7 7a05 	vstr	s15, [r7, #20]
	float filtered_value = (alpha*(*last_filtered_value)) + ((1.0f - alpha)*actual_measurement);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	ed93 7a00 	vldr	s14, [r3]
 800151e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001522:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800152a:	edd7 7a05 	vldr	s15, [r7, #20]
 800152e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001532:	edd7 7a02 	vldr	s15, [r7, #8]
 8001536:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800153a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153e:	edc7 7a04 	vstr	s15, [r7, #16]
	*last_filtered_value = filtered_value;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	601a      	str	r2, [r3, #0]
	return filtered_value;
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	ee07 3a90 	vmov	s15, r3
}
 800154e:	eeb0 0a67 	vmov.f32	s0, s15
 8001552:	371c      	adds	r7, #28
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	3883126f 	.word	0x3883126f

08001560 <output_svpwm>:
		if(sin_v>0){TIM1->CCR2=sin_v*max_duty_cycle;}//else{TIM1->CCR2=max_duty_cycle-((-1.0f)*sin_v*max_duty_cycle);}
		if(sin_w>0){TIM1->CCR3=sin_w*max_duty_cycle;}//else{TIM1->CCR3=max_duty_cycle-((-1.0f)*sin_w*max_duty_cycle);}
	}
}

void output_svpwm(uint16_t angle,uint16_t max_duty_cycle){
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	460a      	mov	r2, r1
 800156a:	80fb      	strh	r3, [r7, #6]
 800156c:	4613      	mov	r3, r2
 800156e:	80bb      	strh	r3, [r7, #4]
	uint8_t sector=(angle/60)+1;
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	4acd      	ldr	r2, [pc, #820]	; (80018a8 <output_svpwm+0x348>)
 8001574:	fba2 2303 	umull	r2, r3, r2, r3
 8001578:	095b      	lsrs	r3, r3, #5
 800157a:	b29b      	uxth	r3, r3
 800157c:	b2db      	uxtb	r3, r3
 800157e:	3301      	adds	r3, #1
 8001580:	72fb      	strb	r3, [r7, #11]
	float t1=0.0f;
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
	float t2=0.0f;
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
	float t0=0.0f;
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
	if(sector%2==1){
 8001594:	7afb      	ldrb	r3, [r7, #11]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d042      	beq.n	8001626 <output_svpwm+0xc6>
		t1=t1calculated[angle%60]*(float)max_duty_cycle;
 80015a0:	88fa      	ldrh	r2, [r7, #6]
 80015a2:	4bc1      	ldr	r3, [pc, #772]	; (80018a8 <output_svpwm+0x348>)
 80015a4:	fba3 1302 	umull	r1, r3, r3, r2
 80015a8:	0959      	lsrs	r1, r3, #5
 80015aa:	460b      	mov	r3, r1
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	1a5b      	subs	r3, r3, r1
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	4abd      	ldr	r2, [pc, #756]	; (80018ac <output_svpwm+0x34c>)
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	ed93 7a00 	vldr	s14, [r3]
 80015c0:	88bb      	ldrh	r3, [r7, #4]
 80015c2:	ee07 3a90 	vmov	s15, r3
 80015c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ce:	edc7 7a05 	vstr	s15, [r7, #20]
		t2=t2calculated[angle%60]*(float)max_duty_cycle;
 80015d2:	88fa      	ldrh	r2, [r7, #6]
 80015d4:	4bb4      	ldr	r3, [pc, #720]	; (80018a8 <output_svpwm+0x348>)
 80015d6:	fba3 1302 	umull	r1, r3, r3, r2
 80015da:	0959      	lsrs	r1, r3, #5
 80015dc:	460b      	mov	r3, r1
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	1a5b      	subs	r3, r3, r1
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	4ab1      	ldr	r2, [pc, #708]	; (80018b0 <output_svpwm+0x350>)
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	ed93 7a00 	vldr	s14, [r3]
 80015f2:	88bb      	ldrh	r3, [r7, #4]
 80015f4:	ee07 3a90 	vmov	s15, r3
 80015f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001600:	edc7 7a04 	vstr	s15, [r7, #16]
		t0=((float)DUTY_CYCLE_LIMIT-t1-t2)/2.0f;
 8001604:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80018b4 <output_svpwm+0x354>
 8001608:	edd7 7a05 	vldr	s15, [r7, #20]
 800160c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001610:	edd7 7a04 	vldr	s15, [r7, #16]
 8001614:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001618:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800161c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001620:	edc7 7a03 	vstr	s15, [r7, #12]
 8001624:	e045      	b.n	80016b2 <output_svpwm+0x152>
	}else{
		t1=t1calculated[60-(angle%60)]*(float)max_duty_cycle;
 8001626:	88fa      	ldrh	r2, [r7, #6]
 8001628:	4b9f      	ldr	r3, [pc, #636]	; (80018a8 <output_svpwm+0x348>)
 800162a:	fba3 1302 	umull	r1, r3, r3, r2
 800162e:	0959      	lsrs	r1, r3, #5
 8001630:	460b      	mov	r3, r1
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	1a5b      	subs	r3, r3, r1
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	b29b      	uxth	r3, r3
 800163c:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8001640:	4a9a      	ldr	r2, [pc, #616]	; (80018ac <output_svpwm+0x34c>)
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	ed93 7a00 	vldr	s14, [r3]
 800164a:	88bb      	ldrh	r3, [r7, #4]
 800164c:	ee07 3a90 	vmov	s15, r3
 8001650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001658:	edc7 7a05 	vstr	s15, [r7, #20]
		t2=t2calculated[60-(angle%60)]*(float)max_duty_cycle;
 800165c:	88fa      	ldrh	r2, [r7, #6]
 800165e:	4b92      	ldr	r3, [pc, #584]	; (80018a8 <output_svpwm+0x348>)
 8001660:	fba3 1302 	umull	r1, r3, r3, r2
 8001664:	0959      	lsrs	r1, r3, #5
 8001666:	460b      	mov	r3, r1
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	1a5b      	subs	r3, r3, r1
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	b29b      	uxth	r3, r3
 8001672:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8001676:	4a8e      	ldr	r2, [pc, #568]	; (80018b0 <output_svpwm+0x350>)
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	ed93 7a00 	vldr	s14, [r3]
 8001680:	88bb      	ldrh	r3, [r7, #4]
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800168a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800168e:	edc7 7a04 	vstr	s15, [r7, #16]
		t0=((float)DUTY_CYCLE_LIMIT-t1-t2)/2.0f;
 8001692:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80018b4 <output_svpwm+0x354>
 8001696:	edd7 7a05 	vldr	s15, [r7, #20]
 800169a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800169e:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016a6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80016aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ae:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	switch(sector){
 80016b2:	7afb      	ldrb	r3, [r7, #11]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	2b05      	cmp	r3, #5
 80016b8:	f200 812e 	bhi.w	8001918 <output_svpwm+0x3b8>
 80016bc:	a201      	add	r2, pc, #4	; (adr r2, 80016c4 <output_svpwm+0x164>)
 80016be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c2:	bf00      	nop
 80016c4:	080016dd 	.word	0x080016dd
 80016c8:	08001739 	.word	0x08001739
 80016cc:	08001795 	.word	0x08001795
 80016d0:	080017f1 	.word	0x080017f1
 80016d4:	0800184d 	.word	0x0800184d
 80016d8:	080018bd 	.word	0x080018bd
	case 1:
		TIM1->CCR1=(uint32_t)t0+(uint32_t)t1+(uint32_t)t2;
 80016dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e4:	ee17 2a90 	vmov	r2, s15
 80016e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016f0:	ee17 3a90 	vmov	r3, s15
 80016f4:	4413      	add	r3, r2
 80016f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80016fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016fe:	ee17 1a90 	vmov	r1, s15
 8001702:	4a6d      	ldr	r2, [pc, #436]	; (80018b8 <output_svpwm+0x358>)
 8001704:	440b      	add	r3, r1
 8001706:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2=(uint32_t)t0+(uint32_t)t2;
 8001708:	edd7 7a03 	vldr	s15, [r7, #12]
 800170c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001710:	ee17 1a90 	vmov	r1, s15
 8001714:	edd7 7a04 	vldr	s15, [r7, #16]
 8001718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800171c:	ee17 3a90 	vmov	r3, s15
 8001720:	4a65      	ldr	r2, [pc, #404]	; (80018b8 <output_svpwm+0x358>)
 8001722:	440b      	add	r3, r1
 8001724:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3=(uint32_t)t0;
 8001726:	4b64      	ldr	r3, [pc, #400]	; (80018b8 <output_svpwm+0x358>)
 8001728:	edd7 7a03 	vldr	s15, [r7, #12]
 800172c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001730:	ee17 2a90 	vmov	r2, s15
 8001734:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8001736:	e0ef      	b.n	8001918 <output_svpwm+0x3b8>
	case 2:
		TIM1->CCR1=(uint32_t)t0+(uint32_t)t2;
 8001738:	edd7 7a03 	vldr	s15, [r7, #12]
 800173c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001740:	ee17 1a90 	vmov	r1, s15
 8001744:	edd7 7a04 	vldr	s15, [r7, #16]
 8001748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800174c:	ee17 3a90 	vmov	r3, s15
 8001750:	4a59      	ldr	r2, [pc, #356]	; (80018b8 <output_svpwm+0x358>)
 8001752:	440b      	add	r3, r1
 8001754:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2=(uint32_t)t0+(uint32_t)t1+(uint32_t)t2;
 8001756:	edd7 7a03 	vldr	s15, [r7, #12]
 800175a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800175e:	ee17 2a90 	vmov	r2, s15
 8001762:	edd7 7a05 	vldr	s15, [r7, #20]
 8001766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800176a:	ee17 3a90 	vmov	r3, s15
 800176e:	4413      	add	r3, r2
 8001770:	edd7 7a04 	vldr	s15, [r7, #16]
 8001774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001778:	ee17 1a90 	vmov	r1, s15
 800177c:	4a4e      	ldr	r2, [pc, #312]	; (80018b8 <output_svpwm+0x358>)
 800177e:	440b      	add	r3, r1
 8001780:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3=(uint32_t)t0;
 8001782:	4b4d      	ldr	r3, [pc, #308]	; (80018b8 <output_svpwm+0x358>)
 8001784:	edd7 7a03 	vldr	s15, [r7, #12]
 8001788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800178c:	ee17 2a90 	vmov	r2, s15
 8001790:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8001792:	e0c1      	b.n	8001918 <output_svpwm+0x3b8>
	case 3:
		TIM1->CCR1=(uint32_t)t0;
 8001794:	4b48      	ldr	r3, [pc, #288]	; (80018b8 <output_svpwm+0x358>)
 8001796:	edd7 7a03 	vldr	s15, [r7, #12]
 800179a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800179e:	ee17 2a90 	vmov	r2, s15
 80017a2:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=(uint32_t)t0+(uint32_t)t1+(uint32_t)t2;
 80017a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80017a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ac:	ee17 2a90 	vmov	r2, s15
 80017b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80017b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017b8:	ee17 3a90 	vmov	r3, s15
 80017bc:	4413      	add	r3, r2
 80017be:	edd7 7a04 	vldr	s15, [r7, #16]
 80017c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017c6:	ee17 1a90 	vmov	r1, s15
 80017ca:	4a3b      	ldr	r2, [pc, #236]	; (80018b8 <output_svpwm+0x358>)
 80017cc:	440b      	add	r3, r1
 80017ce:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3=(uint32_t)t0+(uint32_t)t2;
 80017d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80017d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d8:	ee17 1a90 	vmov	r1, s15
 80017dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80017e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017e4:	ee17 3a90 	vmov	r3, s15
 80017e8:	4a33      	ldr	r2, [pc, #204]	; (80018b8 <output_svpwm+0x358>)
 80017ea:	440b      	add	r3, r1
 80017ec:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 80017ee:	e093      	b.n	8001918 <output_svpwm+0x3b8>
	case 4:
		TIM1->CCR1=(uint32_t)t0;
 80017f0:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <output_svpwm+0x358>)
 80017f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80017f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017fa:	ee17 2a90 	vmov	r2, s15
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=(uint32_t)t0+(uint32_t)t2;
 8001800:	edd7 7a03 	vldr	s15, [r7, #12]
 8001804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001808:	ee17 1a90 	vmov	r1, s15
 800180c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001814:	ee17 3a90 	vmov	r3, s15
 8001818:	4a27      	ldr	r2, [pc, #156]	; (80018b8 <output_svpwm+0x358>)
 800181a:	440b      	add	r3, r1
 800181c:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3=(uint32_t)t0+(uint32_t)t1+(uint32_t)t2;
 800181e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001826:	ee17 2a90 	vmov	r2, s15
 800182a:	edd7 7a05 	vldr	s15, [r7, #20]
 800182e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001832:	ee17 3a90 	vmov	r3, s15
 8001836:	4413      	add	r3, r2
 8001838:	edd7 7a04 	vldr	s15, [r7, #16]
 800183c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001840:	ee17 1a90 	vmov	r1, s15
 8001844:	4a1c      	ldr	r2, [pc, #112]	; (80018b8 <output_svpwm+0x358>)
 8001846:	440b      	add	r3, r1
 8001848:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 800184a:	e065      	b.n	8001918 <output_svpwm+0x3b8>
	case 5:
		TIM1->CCR1=(uint32_t)t0+(uint32_t)t2;
 800184c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001854:	ee17 1a90 	vmov	r1, s15
 8001858:	edd7 7a04 	vldr	s15, [r7, #16]
 800185c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001860:	ee17 3a90 	vmov	r3, s15
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <output_svpwm+0x358>)
 8001866:	440b      	add	r3, r1
 8001868:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2=(uint32_t)t0;
 800186a:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <output_svpwm+0x358>)
 800186c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001874:	ee17 2a90 	vmov	r2, s15
 8001878:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=(uint32_t)t0+(uint32_t)t1+(uint32_t)t2;
 800187a:	edd7 7a03 	vldr	s15, [r7, #12]
 800187e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001882:	ee17 2a90 	vmov	r2, s15
 8001886:	edd7 7a05 	vldr	s15, [r7, #20]
 800188a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800188e:	ee17 3a90 	vmov	r3, s15
 8001892:	4413      	add	r3, r2
 8001894:	edd7 7a04 	vldr	s15, [r7, #16]
 8001898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800189c:	ee17 1a90 	vmov	r1, s15
 80018a0:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <output_svpwm+0x358>)
 80018a2:	440b      	add	r3, r1
 80018a4:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 80018a6:	e037      	b.n	8001918 <output_svpwm+0x3b8>
 80018a8:	88888889 	.word	0x88888889
 80018ac:	0800c47c 	.word	0x0800c47c
 80018b0:	0800c570 	.word	0x0800c570
 80018b4:	459c3800 	.word	0x459c3800
 80018b8:	40010000 	.word	0x40010000
	case 6:
		TIM1->CCR1=(uint32_t)t0+(uint32_t)t1+(uint32_t)t2;
 80018bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018c4:	ee17 2a90 	vmov	r2, s15
 80018c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80018cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018d0:	ee17 3a90 	vmov	r3, s15
 80018d4:	4413      	add	r3, r2
 80018d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80018da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018de:	ee17 1a90 	vmov	r1, s15
 80018e2:	4a10      	ldr	r2, [pc, #64]	; (8001924 <output_svpwm+0x3c4>)
 80018e4:	440b      	add	r3, r1
 80018e6:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2=(uint32_t)t0;
 80018e8:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <output_svpwm+0x3c4>)
 80018ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80018ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018f2:	ee17 2a90 	vmov	r2, s15
 80018f6:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=(uint32_t)t0+(uint32_t)t2;
 80018f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80018fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001900:	ee17 1a90 	vmov	r1, s15
 8001904:	edd7 7a04 	vldr	s15, [r7, #16]
 8001908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800190c:	ee17 3a90 	vmov	r3, s15
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <output_svpwm+0x3c4>)
 8001912:	440b      	add	r3, r1
 8001914:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8001916:	bf00      	nop
	}
	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
}
 8001918:	bf00      	nop
 800191a:	371c      	adds	r7, #28
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	40010000 	.word	0x40010000

08001928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800192c:	f002 f9c6 	bl	8003cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001930:	f000 f824 	bl	800197c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001934:	f000 faf4 	bl	8001f20 <MX_GPIO_Init>

  MX_TIM1_Init();
 8001938:	f000 f906 	bl	8001b48 <MX_TIM1_Init>
  MX_TIM2_Init();
 800193c:	f000 f9bc 	bl	8001cb8 <MX_TIM2_Init>
  MX_DMA_Init();MX_ADC1_Init();
 8001940:	f000 fabe 	bl	8001ec0 <MX_DMA_Init>
 8001944:	f000 f884 	bl	8001a50 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001948:	f000 fa90 	bl	8001e6c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800194c:	f000 fa56 	bl	8001dfc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001950:	f000 fa06 	bl	8001d60 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001954:	f006 fee2 	bl	800871c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001958:	4a05      	ldr	r2, [pc, #20]	; (8001970 <main+0x48>)
 800195a:	2100      	movs	r1, #0
 800195c:	4805      	ldr	r0, [pc, #20]	; (8001974 <main+0x4c>)
 800195e:	f006 ff27 	bl	80087b0 <osThreadNew>
 8001962:	4603      	mov	r3, r0
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <main+0x50>)
 8001966:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001968:	f006 fefc 	bl	8008764 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800196c:	e7fe      	b.n	800196c <main+0x44>
 800196e:	bf00      	nop
 8001970:	0800c664 	.word	0x0800c664
 8001974:	0800210d 	.word	0x0800210d
 8001978:	20000754 	.word	0x20000754

0800197c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b094      	sub	sp, #80	; 0x50
 8001980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001982:	f107 0320 	add.w	r3, r7, #32
 8001986:	2230      	movs	r2, #48	; 0x30
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f009 fc78 	bl	800b280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <SystemClock_Config+0xcc>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	4a27      	ldr	r2, [pc, #156]	; (8001a48 <SystemClock_Config+0xcc>)
 80019aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ae:	6413      	str	r3, [r2, #64]	; 0x40
 80019b0:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <SystemClock_Config+0xcc>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80019bc:	2300      	movs	r3, #0
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <SystemClock_Config+0xd0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019c8:	4a20      	ldr	r2, [pc, #128]	; (8001a4c <SystemClock_Config+0xd0>)
 80019ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <SystemClock_Config+0xd0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019dc:	2301      	movs	r3, #1
 80019de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e6:	2302      	movs	r3, #2
 80019e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80019f0:	230f      	movs	r3, #15
 80019f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80019f4:	2360      	movs	r3, #96	; 0x60
 80019f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019f8:	2302      	movs	r3, #2
 80019fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019fc:	2304      	movs	r3, #4
 80019fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a00:	f107 0320 	add.w	r3, r7, #32
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 fde3 	bl	80055d0 <HAL_RCC_OscConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a10:	f000 fba2 	bl	8002158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a14:	230f      	movs	r3, #15
 8001a16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	2102      	movs	r1, #2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f004 f845 	bl	8005ac0 <HAL_RCC_ClockConfig>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a3c:	f000 fb8c 	bl	8002158 <Error_Handler>
  }
}
 8001a40:	bf00      	nop
 8001a42:	3750      	adds	r7, #80	; 0x50
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40007000 	.word	0x40007000

08001a50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a56:	463b      	mov	r3, r7
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a62:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <MX_ADC1_Init+0xec>)
 8001a64:	4a36      	ldr	r2, [pc, #216]	; (8001b40 <MX_ADC1_Init+0xf0>)
 8001a66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a68:	4b34      	ldr	r3, [pc, #208]	; (8001b3c <MX_ADC1_Init+0xec>)
 8001a6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a70:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <MX_ADC1_Init+0xec>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a76:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <MX_ADC1_Init+0xec>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a7c:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <MX_ADC1_Init+0xec>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a82:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <MX_ADC1_Init+0xec>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a8a:	4b2c      	ldr	r3, [pc, #176]	; (8001b3c <MX_ADC1_Init+0xec>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a90:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <MX_ADC1_Init+0xec>)
 8001a92:	4a2c      	ldr	r2, [pc, #176]	; (8001b44 <MX_ADC1_Init+0xf4>)
 8001a94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a96:	4b29      	ldr	r3, [pc, #164]	; (8001b3c <MX_ADC1_Init+0xec>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001a9c:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <MX_ADC1_Init+0xec>)
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <MX_ADC1_Init+0xec>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001aaa:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <MX_ADC1_Init+0xec>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ab0:	4822      	ldr	r0, [pc, #136]	; (8001b3c <MX_ADC1_Init+0xec>)
 8001ab2:	f002 f975 	bl	8003da0 <HAL_ADC_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001abc:	f000 fb4c 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001acc:	463b      	mov	r3, r7
 8001ace:	4619      	mov	r1, r3
 8001ad0:	481a      	ldr	r0, [pc, #104]	; (8001b3c <MX_ADC1_Init+0xec>)
 8001ad2:	f002 fab7 	bl	8004044 <HAL_ADC_ConfigChannel>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001adc:	f000 fb3c 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001ae0:	2305      	movs	r3, #5
 8001ae2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae8:	463b      	mov	r3, r7
 8001aea:	4619      	mov	r1, r3
 8001aec:	4813      	ldr	r0, [pc, #76]	; (8001b3c <MX_ADC1_Init+0xec>)
 8001aee:	f002 faa9 	bl	8004044 <HAL_ADC_ConfigChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001af8:	f000 fb2e 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001afc:	2306      	movs	r3, #6
 8001afe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001b00:	2303      	movs	r3, #3
 8001b02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b04:	463b      	mov	r3, r7
 8001b06:	4619      	mov	r1, r3
 8001b08:	480c      	ldr	r0, [pc, #48]	; (8001b3c <MX_ADC1_Init+0xec>)
 8001b0a:	f002 fa9b 	bl	8004044 <HAL_ADC_ConfigChannel>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001b14:	f000 fb20 	bl	8002158 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001b18:	2307      	movs	r3, #7
 8001b1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b20:	463b      	mov	r3, r7
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_ADC1_Init+0xec>)
 8001b26:	f002 fa8d 	bl	8004044 <HAL_ADC_ConfigChannel>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001b30:	f000 fb12 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	2000048c 	.word	0x2000048c
 8001b40:	40012000 	.word	0x40012000
 8001b44:	0f000001 	.word	0x0f000001

08001b48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b096      	sub	sp, #88	; 0x58
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
 8001b74:	611a      	str	r2, [r3, #16]
 8001b76:	615a      	str	r2, [r3, #20]
 8001b78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f009 fb7d 	bl	800b280 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b86:	4b4a      	ldr	r3, [pc, #296]	; (8001cb0 <MX_TIM1_Init+0x168>)
 8001b88:	4a4a      	ldr	r2, [pc, #296]	; (8001cb4 <MX_TIM1_Init+0x16c>)
 8001b8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b8c:	4b48      	ldr	r3, [pc, #288]	; (8001cb0 <MX_TIM1_Init+0x168>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001b92:	4b47      	ldr	r3, [pc, #284]	; (8001cb0 <MX_TIM1_Init+0x168>)
 8001b94:	2220      	movs	r2, #32
 8001b96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8001b98:	4b45      	ldr	r3, [pc, #276]	; (8001cb0 <MX_TIM1_Init+0x168>)
 8001b9a:	f241 3287 	movw	r2, #4999	; 0x1387
 8001b9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba0:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <MX_TIM1_Init+0x168>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ba6:	4b42      	ldr	r3, [pc, #264]	; (8001cb0 <MX_TIM1_Init+0x168>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bac:	4b40      	ldr	r3, [pc, #256]	; (8001cb0 <MX_TIM1_Init+0x168>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bb2:	483f      	ldr	r0, [pc, #252]	; (8001cb0 <MX_TIM1_Init+0x168>)
 8001bb4:	f004 f964 	bl	8005e80 <HAL_TIM_Base_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001bbe:	f000 facb 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bc8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4838      	ldr	r0, [pc, #224]	; (8001cb0 <MX_TIM1_Init+0x168>)
 8001bd0:	f004 fea2 	bl	8006918 <HAL_TIM_ConfigClockSource>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001bda:	f000 fabd 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bde:	4834      	ldr	r0, [pc, #208]	; (8001cb0 <MX_TIM1_Init+0x168>)
 8001be0:	f004 fa2f 	bl	8006042 <HAL_TIM_PWM_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001bea:	f000 fab5 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bf6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	482c      	ldr	r0, [pc, #176]	; (8001cb0 <MX_TIM1_Init+0x168>)
 8001bfe:	f005 fa51 	bl	80070a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c08:	f000 faa6 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c0c:	2360      	movs	r3, #96	; 0x60
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c14:	2300      	movs	r3, #0
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c20:	2300      	movs	r3, #0
 8001c22:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c24:	2300      	movs	r3, #0
 8001c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	4619      	mov	r1, r3
 8001c30:	481f      	ldr	r0, [pc, #124]	; (8001cb0 <MX_TIM1_Init+0x168>)
 8001c32:	f004 fdaf 	bl	8006794 <HAL_TIM_PWM_ConfigChannel>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001c3c:	f000 fa8c 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c44:	2204      	movs	r2, #4
 8001c46:	4619      	mov	r1, r3
 8001c48:	4819      	ldr	r0, [pc, #100]	; (8001cb0 <MX_TIM1_Init+0x168>)
 8001c4a:	f004 fda3 	bl	8006794 <HAL_TIM_PWM_ConfigChannel>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001c54:	f000 fa80 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4813      	ldr	r0, [pc, #76]	; (8001cb0 <MX_TIM1_Init+0x168>)
 8001c62:	f004 fd97 	bl	8006794 <HAL_TIM_PWM_ConfigChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001c6c:	f000 fa74 	bl	8002158 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	4619      	mov	r1, r3
 8001c92:	4807      	ldr	r0, [pc, #28]	; (8001cb0 <MX_TIM1_Init+0x168>)
 8001c94:	f005 fa74 	bl	8007180 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001c9e:	f000 fa5b 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ca2:	4803      	ldr	r0, [pc, #12]	; (8001cb0 <MX_TIM1_Init+0x168>)
 8001ca4:	f000 fb8c 	bl	80023c0 <HAL_TIM_MspPostInit>

}
 8001ca8:	bf00      	nop
 8001caa:	3758      	adds	r7, #88	; 0x58
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000534 	.word	0x20000534
 8001cb4:	40010000 	.word	0x40010000

08001cb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08c      	sub	sp, #48	; 0x30
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	2224      	movs	r2, #36	; 0x24
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f009 fada 	bl	800b280 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cd4:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <MX_TIM2_Init+0xa4>)
 8001cd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <MX_TIM2_Init+0xa4>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <MX_TIM2_Init+0xa4>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8001ce8:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <MX_TIM2_Init+0xa4>)
 8001cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <MX_TIM2_Init+0xa4>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf6:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <MX_TIM2_Init+0xa4>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d04:	2301      	movs	r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001d0c:	230a      	movs	r3, #10
 8001d0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d14:	2301      	movs	r3, #1
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001d1c:	230a      	movs	r3, #10
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	4619      	mov	r1, r3
 8001d26:	480d      	ldr	r0, [pc, #52]	; (8001d5c <MX_TIM2_Init+0xa4>)
 8001d28:	f004 faf8 	bl	800631c <HAL_TIM_Encoder_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001d32:	f000 fa11 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	4619      	mov	r1, r3
 8001d42:	4806      	ldr	r0, [pc, #24]	; (8001d5c <MX_TIM2_Init+0xa4>)
 8001d44:	f005 f9ae 	bl	80070a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001d4e:	f000 fa03 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d52:	bf00      	nop
 8001d54:	3730      	adds	r7, #48	; 0x30
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2000057c 	.word	0x2000057c

08001d60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d66:	f107 0308 	add.w	r3, r7, #8
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d74:	463b      	mov	r3, r7
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <MX_TIM3_Init+0x94>)
 8001d7e:	4a1e      	ldr	r2, [pc, #120]	; (8001df8 <MX_TIM3_Init+0x98>)
 8001d80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d82:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <MX_TIM3_Init+0x94>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <MX_TIM3_Init+0x94>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7999;
 8001d8e:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <MX_TIM3_Init+0x94>)
 8001d90:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001d94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <MX_TIM3_Init+0x94>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d9c:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <MX_TIM3_Init+0x94>)
 8001d9e:	2280      	movs	r2, #128	; 0x80
 8001da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001da2:	4814      	ldr	r0, [pc, #80]	; (8001df4 <MX_TIM3_Init+0x94>)
 8001da4:	f004 f86c 	bl	8005e80 <HAL_TIM_Base_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001dae:	f000 f9d3 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001db8:	f107 0308 	add.w	r3, r7, #8
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480d      	ldr	r0, [pc, #52]	; (8001df4 <MX_TIM3_Init+0x94>)
 8001dc0:	f004 fdaa 	bl	8006918 <HAL_TIM_ConfigClockSource>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001dca:	f000 f9c5 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dd6:	463b      	mov	r3, r7
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4806      	ldr	r0, [pc, #24]	; (8001df4 <MX_TIM3_Init+0x94>)
 8001ddc:	f005 f962 	bl	80070a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001de6:	f000 f9b7 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200005c4 	.word	0x200005c4
 8001df8:	40000400 	.word	0x40000400

08001dfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e00:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <MX_USART1_UART_Init+0x64>)
 8001e02:	4a18      	ldr	r2, [pc, #96]	; (8001e64 <MX_USART1_UART_Init+0x68>)
 8001e04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e06:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <MX_USART1_UART_Init+0x64>)
 8001e08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <MX_USART1_UART_Init+0x64>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <MX_USART1_UART_Init+0x64>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <MX_USART1_UART_Init+0x64>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <MX_USART1_UART_Init+0x64>)
 8001e22:	220c      	movs	r2, #12
 8001e24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <MX_USART1_UART_Init+0x64>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <MX_USART1_UART_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e32:	480b      	ldr	r0, [pc, #44]	; (8001e60 <MX_USART1_UART_Init+0x64>)
 8001e34:	f005 fa0a 	bl	800724c <HAL_UART_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e3e:	f000 f98b 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <MX_USART1_UART_Init+0x64>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <MX_USART1_UART_Init+0x64>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0210 	orr.w	r2, r2, #16
 8001e50:	60da      	str	r2, [r3, #12]
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) UART_RX_buf, sizeof(UART_RX_buf));
 8001e52:	22c8      	movs	r2, #200	; 0xc8
 8001e54:	4904      	ldr	r1, [pc, #16]	; (8001e68 <MX_USART1_UART_Init+0x6c>)
 8001e56:	4802      	ldr	r0, [pc, #8]	; (8001e60 <MX_USART1_UART_Init+0x64>)
 8001e58:	f005 faf2 	bl	8007440 <HAL_UARTEx_ReceiveToIdle_DMA>
  /* USER CODE END USART1_Init 2 */

}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	2000060c 	.word	0x2000060c
 8001e64:	40011000 	.word	0x40011000
 8001e68:	200000fc 	.word	0x200000fc

08001e6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <MX_USART2_UART_Init+0x4c>)
 8001e72:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <MX_USART2_UART_Init+0x50>)
 8001e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <MX_USART2_UART_Init+0x4c>)
 8001e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <MX_USART2_UART_Init+0x4c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <MX_USART2_UART_Init+0x4c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <MX_USART2_UART_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e90:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <MX_USART2_UART_Init+0x4c>)
 8001e92:	220c      	movs	r2, #12
 8001e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <MX_USART2_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <MX_USART2_UART_Init+0x4c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <MX_USART2_UART_Init+0x4c>)
 8001ea4:	f005 f9d2 	bl	800724c <HAL_UART_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001eae:	f000 f953 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000650 	.word	0x20000650
 8001ebc:	40004400 	.word	0x40004400

08001ec0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <MX_DMA_Init+0x5c>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a13      	ldr	r2, [pc, #76]	; (8001f1c <MX_DMA_Init+0x5c>)
 8001ed0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <MX_DMA_Init+0x5c>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2105      	movs	r1, #5
 8001ee6:	2038      	movs	r0, #56	; 0x38
 8001ee8:	f002 fc4b 	bl	8004782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001eec:	2038      	movs	r0, #56	; 0x38
 8001eee:	f002 fc64 	bl	80047ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2105      	movs	r1, #5
 8001ef6:	203a      	movs	r0, #58	; 0x3a
 8001ef8:	f002 fc43 	bl	8004782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001efc:	203a      	movs	r0, #58	; 0x3a
 8001efe:	f002 fc5c 	bl	80047ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2105      	movs	r1, #5
 8001f06:	2046      	movs	r0, #70	; 0x46
 8001f08:	f002 fc3b 	bl	8004782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001f0c:	2046      	movs	r0, #70	; 0x46
 8001f0e:	f002 fc54 	bl	80047ba <HAL_NVIC_EnableIRQ>

}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800

08001f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
 8001f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	4b51      	ldr	r3, [pc, #324]	; (8002080 <MX_GPIO_Init+0x160>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a50      	ldr	r2, [pc, #320]	; (8002080 <MX_GPIO_Init+0x160>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b4e      	ldr	r3, [pc, #312]	; (8002080 <MX_GPIO_Init+0x160>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b4a      	ldr	r3, [pc, #296]	; (8002080 <MX_GPIO_Init+0x160>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a49      	ldr	r2, [pc, #292]	; (8002080 <MX_GPIO_Init+0x160>)
 8001f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b47      	ldr	r3, [pc, #284]	; (8002080 <MX_GPIO_Init+0x160>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	4b43      	ldr	r3, [pc, #268]	; (8002080 <MX_GPIO_Init+0x160>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a42      	ldr	r2, [pc, #264]	; (8002080 <MX_GPIO_Init+0x160>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b40      	ldr	r3, [pc, #256]	; (8002080 <MX_GPIO_Init+0x160>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	607b      	str	r3, [r7, #4]
 8001f8e:	4b3c      	ldr	r3, [pc, #240]	; (8002080 <MX_GPIO_Init+0x160>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a3b      	ldr	r2, [pc, #236]	; (8002080 <MX_GPIO_Init+0x160>)
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b39      	ldr	r3, [pc, #228]	; (8002080 <MX_GPIO_Init+0x160>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SOFTSTART_GPIO_Port, SOFTSTART_Pin, GPIO_PIN_RESET);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fac:	4835      	ldr	r0, [pc, #212]	; (8002084 <MX_GPIO_Init+0x164>)
 8001fae:	f003 faf5 	bl	800559c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INPUTS_LOAD_Pin|INPUTS_CS_Pin|DISP_LATCH_Pin|DISP_EN_Pin
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f240 3117 	movw	r1, #791	; 0x317
 8001fb8:	4833      	ldr	r0, [pc, #204]	; (8002088 <MX_GPIO_Init+0x168>)
 8001fba:	f003 faef 	bl	800559c <HAL_GPIO_WritePin>
                          |MODBUS_DE_Pin|ADC_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INV_ENABLE_Pin|INV_DISABLE_Pin, GPIO_PIN_SET);
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001fc4:	4830      	ldr	r0, [pc, #192]	; (8002088 <MX_GPIO_Init+0x168>)
 8001fc6:	f003 fae9 	bl	800559c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001fca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4829      	ldr	r0, [pc, #164]	; (8002084 <MX_GPIO_Init+0x164>)
 8001fe0:	f003 f874 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SOFTSTART_Pin */
  GPIO_InitStruct.Pin = SOFTSTART_Pin;
 8001fe4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fea:	2301      	movs	r3, #1
 8001fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SOFTSTART_GPIO_Port, &GPIO_InitStruct);
 8001ff6:	f107 0314 	add.w	r3, r7, #20
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4821      	ldr	r0, [pc, #132]	; (8002084 <MX_GPIO_Init+0x164>)
 8001ffe:	f003 f865 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUTS_LOAD_Pin INPUTS_CS_Pin DISP_LATCH_Pin INV_ENABLE_Pin
                           INV_DISABLE_Pin DISP_EN_Pin MODBUS_DE_Pin ADC_CS_Pin */
  GPIO_InitStruct.Pin = INPUTS_LOAD_Pin|INPUTS_CS_Pin|DISP_LATCH_Pin|INV_ENABLE_Pin
 8002002:	f243 3317 	movw	r3, #13079	; 0x3317
 8002006:	617b      	str	r3, [r7, #20]
                          |INV_DISABLE_Pin|DISP_EN_Pin|MODBUS_DE_Pin|ADC_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002008:	2301      	movs	r3, #1
 800200a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4619      	mov	r1, r3
 800201a:	481b      	ldr	r0, [pc, #108]	; (8002088 <MX_GPIO_Init+0x168>)
 800201c:	f003 f856 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CLK_Pin PB14 PB15 */
  GPIO_InitStruct.Pin = SPI_CLK_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8002020:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002032:	2305      	movs	r3, #5
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4619      	mov	r1, r3
 800203c:	4812      	ldr	r0, [pc, #72]	; (8002088 <MX_GPIO_Init+0x168>)
 800203e:	f003 f845 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_Pin DIR_Pin ENC_Z_Pin */
  GPIO_InitStruct.Pin = STEP_Pin|DIR_Pin|ENC_Z_Pin;
 8002042:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8002046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002048:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800204c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4619      	mov	r1, r3
 8002058:	480c      	ldr	r0, [pc, #48]	; (800208c <MX_GPIO_Init+0x16c>)
 800205a:	f003 f837 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OC_ALARM_Pin */
  GPIO_InitStruct.Pin = OC_ALARM_Pin;
 800205e:	2320      	movs	r3, #32
 8002060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002062:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OC_ALARM_GPIO_Port, &GPIO_InitStruct);
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	4619      	mov	r1, r3
 8002072:	4805      	ldr	r0, [pc, #20]	; (8002088 <MX_GPIO_Init+0x168>)
 8002074:	f003 f82a 	bl	80050cc <HAL_GPIO_Init>

}
 8002078:	bf00      	nop
 800207a:	3728      	adds	r7, #40	; 0x28
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40023800 	.word	0x40023800
 8002084:	40020800 	.word	0x40020800
 8002088:	40020400 	.word	0x40020400
 800208c:	40020000 	.word	0x40020000

08002090 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
	modbus_process_new_data_to_fifo(huart,Size);
 800209c:	887b      	ldrh	r3, [r7, #2]
 800209e:	4619      	mov	r1, r3
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff f845 	bl	8001130 <modbus_process_new_data_to_fifo>
	process_modbus_command();
 80020a6:	f7ff f8ad 	bl	8001204 <process_modbus_command>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
     if(huart == &huart1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a06      	ldr	r2, [pc, #24]	; (80020d8 <HAL_UART_ErrorCallback+0x24>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d104      	bne.n	80020ce <HAL_UART_ErrorCallback+0x1a>
     {
         HAL_UART_DeInit(&huart1);
 80020c4:	4804      	ldr	r0, [pc, #16]	; (80020d8 <HAL_UART_ErrorCallback+0x24>)
 80020c6:	f005 f90e 	bl	80072e6 <HAL_UART_DeInit>
         MX_USART1_UART_Init();
 80020ca:	f7ff fe97 	bl	8001dfc <MX_USART1_UART_Init>
     }
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	2000060c 	.word	0x2000060c

080020dc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a06      	ldr	r2, [pc, #24]	; (8002104 <HAL_UART_TxCpltCallback+0x28>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d105      	bne.n	80020fa <HAL_UART_TxCpltCallback+0x1e>
	HAL_GPIO_WritePin(MODBUS_DE_GPIO_Port,MODBUS_DE_Pin, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020f4:	4804      	ldr	r0, [pc, #16]	; (8002108 <HAL_UART_TxCpltCallback+0x2c>)
 80020f6:	f003 fa51 	bl	800559c <HAL_GPIO_WritePin>
	}
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40011000 	.word	0x40011000
 8002108:	40020400 	.word	0x40020400

0800210c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//HAL_ADC_Start_DMA(&hadc1, ADC_rawdata, 4);
	Modbus_init();
 8002114:	f7fe ffc6 	bl	80010a4 <Modbus_init>
	osDelay(300);
 8002118:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800211c:	f006 fbda 	bl	80088d4 <osDelay>
	HAL_GPIO_WritePin(SOFTSTART_GPIO_Port, SOFTSTART_Pin,1);
 8002120:	2201      	movs	r2, #1
 8002122:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002126:	4808      	ldr	r0, [pc, #32]	; (8002148 <StartDefaultTask+0x3c>)
 8002128:	f003 fa38 	bl	800559c <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim3);
 800212c:	4807      	ldr	r0, [pc, #28]	; (800214c <StartDefaultTask+0x40>)
 800212e:	f003 fef7 	bl	8005f20 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1); //16 khz ISR synchronized with PWM
 8002132:	4807      	ldr	r0, [pc, #28]	; (8002150 <StartDefaultTask+0x44>)
 8002134:	f003 fef4 	bl	8005f20 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002138:	213c      	movs	r1, #60	; 0x3c
 800213a:	4806      	ldr	r0, [pc, #24]	; (8002154 <StartDefaultTask+0x48>)
 800213c:	f004 f994 	bl	8006468 <HAL_TIM_Encoder_Start>
	/* Infinite loop */
	for(;;)
	{
    osDelay(1);
 8002140:	2001      	movs	r0, #1
 8002142:	f006 fbc7 	bl	80088d4 <osDelay>
 8002146:	e7fb      	b.n	8002140 <StartDefaultTask+0x34>
 8002148:	40020800 	.word	0x40020800
 800214c:	200005c4 	.word	0x200005c4
 8002150:	20000534 	.word	0x20000534
 8002154:	2000057c 	.word	0x2000057c

08002158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800215c:	b672      	cpsid	i
}
 800215e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002160:	e7fe      	b.n	8002160 <Error_Handler+0x8>
	...

08002164 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_MspInit+0x54>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	4a11      	ldr	r2, [pc, #68]	; (80021b8 <HAL_MspInit+0x54>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002178:	6453      	str	r3, [r2, #68]	; 0x44
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <HAL_MspInit+0x54>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_MspInit+0x54>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <HAL_MspInit+0x54>)
 8002190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_MspInit+0x54>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	210f      	movs	r1, #15
 80021a6:	f06f 0001 	mvn.w	r0, #1
 80021aa:	f002 faea 	bl	8004782 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800

080021bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08a      	sub	sp, #40	; 0x28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a2e      	ldr	r2, [pc, #184]	; (8002294 <HAL_ADC_MspInit+0xd8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d156      	bne.n	800228c <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <HAL_ADC_MspInit+0xdc>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	4a2c      	ldr	r2, [pc, #176]	; (8002298 <HAL_ADC_MspInit+0xdc>)
 80021e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ec:	6453      	str	r3, [r2, #68]	; 0x44
 80021ee:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <HAL_ADC_MspInit+0xdc>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <HAL_ADC_MspInit+0xdc>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a25      	ldr	r2, [pc, #148]	; (8002298 <HAL_ADC_MspInit+0xdc>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b23      	ldr	r3, [pc, #140]	; (8002298 <HAL_ADC_MspInit+0xdc>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = I_U_Pin|I_V_Pin|DC_VOLTAGE_Pin|HEATSINK_TEMP_Pin;
 8002216:	23f0      	movs	r3, #240	; 0xf0
 8002218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800221a:	2303      	movs	r3, #3
 800221c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002222:	f107 0314 	add.w	r3, r7, #20
 8002226:	4619      	mov	r1, r3
 8002228:	481c      	ldr	r0, [pc, #112]	; (800229c <HAL_ADC_MspInit+0xe0>)
 800222a:	f002 ff4f 	bl	80050cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800222e:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <HAL_ADC_MspInit+0xe4>)
 8002230:	4a1c      	ldr	r2, [pc, #112]	; (80022a4 <HAL_ADC_MspInit+0xe8>)
 8002232:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002234:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <HAL_ADC_MspInit+0xe4>)
 8002236:	2200      	movs	r2, #0
 8002238:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800223a:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_ADC_MspInit+0xe4>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <HAL_ADC_MspInit+0xe4>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002246:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <HAL_ADC_MspInit+0xe4>)
 8002248:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800224c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <HAL_ADC_MspInit+0xe4>)
 8002250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002254:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_ADC_MspInit+0xe4>)
 8002258:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800225c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_ADC_MspInit+0xe4>)
 8002260:	2200      	movs	r2, #0
 8002262:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002264:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <HAL_ADC_MspInit+0xe4>)
 8002266:	2200      	movs	r2, #0
 8002268:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <HAL_ADC_MspInit+0xe4>)
 800226c:	2200      	movs	r2, #0
 800226e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002270:	480b      	ldr	r0, [pc, #44]	; (80022a0 <HAL_ADC_MspInit+0xe4>)
 8002272:	f002 facb 	bl	800480c <HAL_DMA_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800227c:	f7ff ff6c 	bl	8002158 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <HAL_ADC_MspInit+0xe4>)
 8002284:	639a      	str	r2, [r3, #56]	; 0x38
 8002286:	4a06      	ldr	r2, [pc, #24]	; (80022a0 <HAL_ADC_MspInit+0xe4>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800228c:	bf00      	nop
 800228e:	3728      	adds	r7, #40	; 0x28
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40012000 	.word	0x40012000
 8002298:	40023800 	.word	0x40023800
 800229c:	40020000 	.word	0x40020000
 80022a0:	200004d4 	.word	0x200004d4
 80022a4:	40026410 	.word	0x40026410

080022a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <HAL_TIM_Base_MspInit+0x80>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d116      	bne.n	80022e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b1b      	ldr	r3, [pc, #108]	; (800232c <HAL_TIM_Base_MspInit+0x84>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	4a1a      	ldr	r2, [pc, #104]	; (800232c <HAL_TIM_Base_MspInit+0x84>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_TIM_Base_MspInit+0x84>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2105      	movs	r1, #5
 80022da:	2019      	movs	r0, #25
 80022dc:	f002 fa51 	bl	8004782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022e0:	2019      	movs	r0, #25
 80022e2:	f002 fa6a 	bl	80047ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022e6:	e01a      	b.n	800231e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a10      	ldr	r2, [pc, #64]	; (8002330 <HAL_TIM_Base_MspInit+0x88>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d115      	bne.n	800231e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <HAL_TIM_Base_MspInit+0x84>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	4a0c      	ldr	r2, [pc, #48]	; (800232c <HAL_TIM_Base_MspInit+0x84>)
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	6413      	str	r3, [r2, #64]	; 0x40
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_TIM_Base_MspInit+0x84>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	2105      	movs	r1, #5
 8002312:	201d      	movs	r0, #29
 8002314:	f002 fa35 	bl	8004782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002318:	201d      	movs	r0, #29
 800231a:	f002 fa4e 	bl	80047ba <HAL_NVIC_EnableIRQ>
}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40010000 	.word	0x40010000
 800232c:	40023800 	.word	0x40023800
 8002330:	40000400 	.word	0x40000400

08002334 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002354:	d12b      	bne.n	80023ae <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <HAL_TIM_Encoder_MspInit+0x84>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a16      	ldr	r2, [pc, #88]	; (80023b8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a0f      	ldr	r2, [pc, #60]	; (80023b8 <HAL_TIM_Encoder_MspInit+0x84>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 800238e:	2303      	movs	r3, #3
 8002390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800239e:	2301      	movs	r3, #1
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	4619      	mov	r1, r3
 80023a8:	4804      	ldr	r0, [pc, #16]	; (80023bc <HAL_TIM_Encoder_MspInit+0x88>)
 80023aa:	f002 fe8f 	bl	80050cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80023ae:	bf00      	nop
 80023b0:	3728      	adds	r7, #40	; 0x28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40020000 	.word	0x40020000

080023c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 030c 	add.w	r3, r7, #12
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a12      	ldr	r2, [pc, #72]	; (8002428 <HAL_TIM_MspPostInit+0x68>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d11e      	bne.n	8002420 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_TIM_MspPostInit+0x6c>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a10      	ldr	r2, [pc, #64]	; (800242c <HAL_TIM_MspPostInit+0x6c>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <HAL_TIM_MspPostInit+0x6c>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_Pin|V_PWM_Pin|W_PWM_Pin;
 80023fe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002402:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002404:	2302      	movs	r3, #2
 8002406:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240c:	2300      	movs	r3, #0
 800240e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002410:	2301      	movs	r3, #1
 8002412:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002414:	f107 030c 	add.w	r3, r7, #12
 8002418:	4619      	mov	r1, r3
 800241a:	4805      	ldr	r0, [pc, #20]	; (8002430 <HAL_TIM_MspPostInit+0x70>)
 800241c:	f002 fe56 	bl	80050cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002420:	bf00      	nop
 8002422:	3720      	adds	r7, #32
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40010000 	.word	0x40010000
 800242c:	40023800 	.word	0x40023800
 8002430:	40020000 	.word	0x40020000

08002434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08c      	sub	sp, #48	; 0x30
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 031c 	add.w	r3, r7, #28
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a64      	ldr	r2, [pc, #400]	; (80025e4 <HAL_UART_MspInit+0x1b0>)
 8002452:	4293      	cmp	r3, r2
 8002454:	f040 8091 	bne.w	800257a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	4b62      	ldr	r3, [pc, #392]	; (80025e8 <HAL_UART_MspInit+0x1b4>)
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	4a61      	ldr	r2, [pc, #388]	; (80025e8 <HAL_UART_MspInit+0x1b4>)
 8002462:	f043 0310 	orr.w	r3, r3, #16
 8002466:	6453      	str	r3, [r2, #68]	; 0x44
 8002468:	4b5f      	ldr	r3, [pc, #380]	; (80025e8 <HAL_UART_MspInit+0x1b4>)
 800246a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	4b5b      	ldr	r3, [pc, #364]	; (80025e8 <HAL_UART_MspInit+0x1b4>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	4a5a      	ldr	r2, [pc, #360]	; (80025e8 <HAL_UART_MspInit+0x1b4>)
 800247e:	f043 0302 	orr.w	r3, r3, #2
 8002482:	6313      	str	r3, [r2, #48]	; 0x30
 8002484:	4b58      	ldr	r3, [pc, #352]	; (80025e8 <HAL_UART_MspInit+0x1b4>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MODBUS_TX_Pin|MODBUS_RX_Pin;
 8002490:	23c0      	movs	r3, #192	; 0xc0
 8002492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	2302      	movs	r3, #2
 8002496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249c:	2303      	movs	r3, #3
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024a0:	2307      	movs	r3, #7
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	4619      	mov	r1, r3
 80024aa:	4850      	ldr	r0, [pc, #320]	; (80025ec <HAL_UART_MspInit+0x1b8>)
 80024ac:	f002 fe0e 	bl	80050cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80024b0:	4b4f      	ldr	r3, [pc, #316]	; (80025f0 <HAL_UART_MspInit+0x1bc>)
 80024b2:	4a50      	ldr	r2, [pc, #320]	; (80025f4 <HAL_UART_MspInit+0x1c0>)
 80024b4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80024b6:	4b4e      	ldr	r3, [pc, #312]	; (80025f0 <HAL_UART_MspInit+0x1bc>)
 80024b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024bc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024be:	4b4c      	ldr	r3, [pc, #304]	; (80025f0 <HAL_UART_MspInit+0x1bc>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c4:	4b4a      	ldr	r3, [pc, #296]	; (80025f0 <HAL_UART_MspInit+0x1bc>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024ca:	4b49      	ldr	r3, [pc, #292]	; (80025f0 <HAL_UART_MspInit+0x1bc>)
 80024cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024d0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024d2:	4b47      	ldr	r3, [pc, #284]	; (80025f0 <HAL_UART_MspInit+0x1bc>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024d8:	4b45      	ldr	r3, [pc, #276]	; (80025f0 <HAL_UART_MspInit+0x1bc>)
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80024de:	4b44      	ldr	r3, [pc, #272]	; (80025f0 <HAL_UART_MspInit+0x1bc>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024e4:	4b42      	ldr	r3, [pc, #264]	; (80025f0 <HAL_UART_MspInit+0x1bc>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024ea:	4b41      	ldr	r3, [pc, #260]	; (80025f0 <HAL_UART_MspInit+0x1bc>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80024f0:	483f      	ldr	r0, [pc, #252]	; (80025f0 <HAL_UART_MspInit+0x1bc>)
 80024f2:	f002 f98b 	bl	800480c <HAL_DMA_Init>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80024fc:	f7ff fe2c 	bl	8002158 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a3b      	ldr	r2, [pc, #236]	; (80025f0 <HAL_UART_MspInit+0x1bc>)
 8002504:	639a      	str	r2, [r3, #56]	; 0x38
 8002506:	4a3a      	ldr	r2, [pc, #232]	; (80025f0 <HAL_UART_MspInit+0x1bc>)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800250c:	4b3a      	ldr	r3, [pc, #232]	; (80025f8 <HAL_UART_MspInit+0x1c4>)
 800250e:	4a3b      	ldr	r2, [pc, #236]	; (80025fc <HAL_UART_MspInit+0x1c8>)
 8002510:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002512:	4b39      	ldr	r3, [pc, #228]	; (80025f8 <HAL_UART_MspInit+0x1c4>)
 8002514:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002518:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800251a:	4b37      	ldr	r3, [pc, #220]	; (80025f8 <HAL_UART_MspInit+0x1c4>)
 800251c:	2240      	movs	r2, #64	; 0x40
 800251e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002520:	4b35      	ldr	r3, [pc, #212]	; (80025f8 <HAL_UART_MspInit+0x1c4>)
 8002522:	2200      	movs	r2, #0
 8002524:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002526:	4b34      	ldr	r3, [pc, #208]	; (80025f8 <HAL_UART_MspInit+0x1c4>)
 8002528:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800252c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800252e:	4b32      	ldr	r3, [pc, #200]	; (80025f8 <HAL_UART_MspInit+0x1c4>)
 8002530:	2200      	movs	r2, #0
 8002532:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002534:	4b30      	ldr	r3, [pc, #192]	; (80025f8 <HAL_UART_MspInit+0x1c4>)
 8002536:	2200      	movs	r2, #0
 8002538:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800253a:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <HAL_UART_MspInit+0x1c4>)
 800253c:	2200      	movs	r2, #0
 800253e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002540:	4b2d      	ldr	r3, [pc, #180]	; (80025f8 <HAL_UART_MspInit+0x1c4>)
 8002542:	2200      	movs	r2, #0
 8002544:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002546:	4b2c      	ldr	r3, [pc, #176]	; (80025f8 <HAL_UART_MspInit+0x1c4>)
 8002548:	2200      	movs	r2, #0
 800254a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800254c:	482a      	ldr	r0, [pc, #168]	; (80025f8 <HAL_UART_MspInit+0x1c4>)
 800254e:	f002 f95d 	bl	800480c <HAL_DMA_Init>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002558:	f7ff fdfe 	bl	8002158 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a26      	ldr	r2, [pc, #152]	; (80025f8 <HAL_UART_MspInit+0x1c4>)
 8002560:	635a      	str	r2, [r3, #52]	; 0x34
 8002562:	4a25      	ldr	r2, [pc, #148]	; (80025f8 <HAL_UART_MspInit+0x1c4>)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002568:	2200      	movs	r2, #0
 800256a:	2105      	movs	r1, #5
 800256c:	2025      	movs	r0, #37	; 0x25
 800256e:	f002 f908 	bl	8004782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002572:	2025      	movs	r0, #37	; 0x25
 8002574:	f002 f921 	bl	80047ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002578:	e030      	b.n	80025dc <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a20      	ldr	r2, [pc, #128]	; (8002600 <HAL_UART_MspInit+0x1cc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d12b      	bne.n	80025dc <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002584:	2300      	movs	r3, #0
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <HAL_UART_MspInit+0x1b4>)
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	4a16      	ldr	r2, [pc, #88]	; (80025e8 <HAL_UART_MspInit+0x1b4>)
 800258e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002592:	6413      	str	r3, [r2, #64]	; 0x40
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <HAL_UART_MspInit+0x1b4>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_UART_MspInit+0x1b4>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	4a0f      	ldr	r2, [pc, #60]	; (80025e8 <HAL_UART_MspInit+0x1b4>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6313      	str	r3, [r2, #48]	; 0x30
 80025b0:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <HAL_UART_MspInit+0x1b4>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SSI_TX_Pin|SSI_RX_Pin;
 80025bc:	230c      	movs	r3, #12
 80025be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c8:	2303      	movs	r3, #3
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025cc:	2307      	movs	r3, #7
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d0:	f107 031c 	add.w	r3, r7, #28
 80025d4:	4619      	mov	r1, r3
 80025d6:	480b      	ldr	r0, [pc, #44]	; (8002604 <HAL_UART_MspInit+0x1d0>)
 80025d8:	f002 fd78 	bl	80050cc <HAL_GPIO_Init>
}
 80025dc:	bf00      	nop
 80025de:	3730      	adds	r7, #48	; 0x30
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40011000 	.word	0x40011000
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40020400 	.word	0x40020400
 80025f0:	20000694 	.word	0x20000694
 80025f4:	40026440 	.word	0x40026440
 80025f8:	200006f4 	.word	0x200006f4
 80025fc:	400264b8 	.word	0x400264b8
 8002600:	40004400 	.word	0x40004400
 8002604:	40020000 	.word	0x40020000

08002608 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a16      	ldr	r2, [pc, #88]	; (8002670 <HAL_UART_MspDeInit+0x68>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d117      	bne.n	800264a <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800261a:	4b16      	ldr	r3, [pc, #88]	; (8002674 <HAL_UART_MspDeInit+0x6c>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	4a15      	ldr	r2, [pc, #84]	; (8002674 <HAL_UART_MspDeInit+0x6c>)
 8002620:	f023 0310 	bic.w	r3, r3, #16
 8002624:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, MODBUS_TX_Pin|MODBUS_RX_Pin);
 8002626:	21c0      	movs	r1, #192	; 0xc0
 8002628:	4813      	ldr	r0, [pc, #76]	; (8002678 <HAL_UART_MspDeInit+0x70>)
 800262a:	f002 fed3 	bl	80053d4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	4618      	mov	r0, r3
 8002634:	f002 f998 	bl	8004968 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263c:	4618      	mov	r0, r3
 800263e:	f002 f993 	bl	8004968 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002642:	2025      	movs	r0, #37	; 0x25
 8002644:	f002 f8c7 	bl	80047d6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002648:	e00e      	b.n	8002668 <HAL_UART_MspDeInit+0x60>
  else if(huart->Instance==USART2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a0b      	ldr	r2, [pc, #44]	; (800267c <HAL_UART_MspDeInit+0x74>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d109      	bne.n	8002668 <HAL_UART_MspDeInit+0x60>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002654:	4b07      	ldr	r3, [pc, #28]	; (8002674 <HAL_UART_MspDeInit+0x6c>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	4a06      	ldr	r2, [pc, #24]	; (8002674 <HAL_UART_MspDeInit+0x6c>)
 800265a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800265e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, SSI_TX_Pin|SSI_RX_Pin);
 8002660:	210c      	movs	r1, #12
 8002662:	4807      	ldr	r0, [pc, #28]	; (8002680 <HAL_UART_MspDeInit+0x78>)
 8002664:	f002 feb6 	bl	80053d4 <HAL_GPIO_DeInit>
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40011000 	.word	0x40011000
 8002674:	40023800 	.word	0x40023800
 8002678:	40020400 	.word	0x40020400
 800267c:	40004400 	.word	0x40004400
 8002680:	40020000 	.word	0x40020000

08002684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002688:	e7fe      	b.n	8002688 <NMI_Handler+0x4>

0800268a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800268e:	e7fe      	b.n	800268e <HardFault_Handler+0x4>

08002690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002694:	e7fe      	b.n	8002694 <MemManage_Handler+0x4>

08002696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800269a:	e7fe      	b.n	800269a <BusFault_Handler+0x4>

0800269c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026a0:	e7fe      	b.n	80026a0 <UsageFault_Handler+0x4>

080026a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026a2:	b480      	push	{r7}
 80026a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026b4:	f001 fb54 	bl	8003d60 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80026b8:	f007 fd44 	bl	800a144 <xTaskGetSchedulerState>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d001      	beq.n	80026c6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80026c2:	f008 fb29 	bl	800ad18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026d0:	4802      	ldr	r0, [pc, #8]	; (80026dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80026d2:	f003 ff57 	bl	8006584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000534 	.word	0x20000534

080026e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_ADC_Start_DMA(&hadc1, ADC_rawdata, 4);
 80026e4:	2204      	movs	r2, #4
 80026e6:	4907      	ldr	r1, [pc, #28]	; (8002704 <TIM3_IRQHandler+0x24>)
 80026e8:	4807      	ldr	r0, [pc, #28]	; (8002708 <TIM3_IRQHandler+0x28>)
 80026ea:	f001 fb9d 	bl	8003e28 <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(DISP_LATCH_GPIO_Port, DISP_LATCH_Pin, 1);
 80026ee:	2201      	movs	r2, #1
 80026f0:	2104      	movs	r1, #4
 80026f2:	4806      	ldr	r0, [pc, #24]	; (800270c <TIM3_IRQHandler+0x2c>)
 80026f4:	f002 ff52 	bl	800559c <HAL_GPIO_WritePin>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026f8:	4805      	ldr	r0, [pc, #20]	; (8002710 <TIM3_IRQHandler+0x30>)
 80026fa:	f003 ff43 	bl	8006584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000758 	.word	0x20000758
 8002708:	2000048c 	.word	0x2000048c
 800270c:	40020400 	.word	0x40020400
 8002710:	200005c4 	.word	0x200005c4

08002714 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002718:	4802      	ldr	r0, [pc, #8]	; (8002724 <USART1_IRQHandler+0x10>)
 800271a:	f004 fef7 	bl	800750c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	2000060c 	.word	0x2000060c

08002728 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	HAL_GPIO_WritePin(DISP_LATCH_GPIO_Port, DISP_LATCH_Pin, 0);
 800272e:	2200      	movs	r2, #0
 8002730:	2104      	movs	r1, #4
 8002732:	481b      	ldr	r0, [pc, #108]	; (80027a0 <DMA2_Stream0_IRQHandler+0x78>)
 8002734:	f002 ff32 	bl	800559c <HAL_GPIO_WritePin>
	if(zerocurrent_reading_loop_i<15){
 8002738:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <DMA2_Stream0_IRQHandler+0x7c>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b0e      	cmp	r3, #14
 800273e:	d83b      	bhi.n	80027b8 <DMA2_Stream0_IRQHandler+0x90>
				I_U_zerocurrentreading+=ADC_rawdata[0];
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <DMA2_Stream0_IRQHandler+0x80>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b29a      	uxth	r2, r3
 8002746:	4b19      	ldr	r3, [pc, #100]	; (80027ac <DMA2_Stream0_IRQHandler+0x84>)
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	4413      	add	r3, r2
 800274c:	b29a      	uxth	r2, r3
 800274e:	4b17      	ldr	r3, [pc, #92]	; (80027ac <DMA2_Stream0_IRQHandler+0x84>)
 8002750:	801a      	strh	r2, [r3, #0]
				I_V_zerocurrentreading+=ADC_rawdata[1];
 8002752:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <DMA2_Stream0_IRQHandler+0x80>)
 8002754:	885b      	ldrh	r3, [r3, #2]
 8002756:	b29a      	uxth	r2, r3
 8002758:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <DMA2_Stream0_IRQHandler+0x88>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	4413      	add	r3, r2
 800275e:	b29a      	uxth	r2, r3
 8002760:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <DMA2_Stream0_IRQHandler+0x88>)
 8002762:	801a      	strh	r2, [r3, #0]
				if(zerocurrent_reading_loop_i==14){I_U_zerocurrentreading/=15;I_V_zerocurrentreading/=15;}
 8002764:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <DMA2_Stream0_IRQHandler+0x7c>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b0e      	cmp	r3, #14
 800276a:	d111      	bne.n	8002790 <DMA2_Stream0_IRQHandler+0x68>
 800276c:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <DMA2_Stream0_IRQHandler+0x84>)
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	4a10      	ldr	r2, [pc, #64]	; (80027b4 <DMA2_Stream0_IRQHandler+0x8c>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	08db      	lsrs	r3, r3, #3
 8002778:	b29a      	uxth	r2, r3
 800277a:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <DMA2_Stream0_IRQHandler+0x84>)
 800277c:	801a      	strh	r2, [r3, #0]
 800277e:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <DMA2_Stream0_IRQHandler+0x88>)
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	4a0c      	ldr	r2, [pc, #48]	; (80027b4 <DMA2_Stream0_IRQHandler+0x8c>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	08db      	lsrs	r3, r3, #3
 800278a:	b29a      	uxth	r2, r3
 800278c:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <DMA2_Stream0_IRQHandler+0x88>)
 800278e:	801a      	strh	r2, [r3, #0]
				zerocurrent_reading_loop_i++;
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <DMA2_Stream0_IRQHandler+0x7c>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	3301      	adds	r3, #1
 8002796:	b2da      	uxtb	r2, r3
 8002798:	4b02      	ldr	r3, [pc, #8]	; (80027a4 <DMA2_Stream0_IRQHandler+0x7c>)
 800279a:	701a      	strb	r2, [r3, #0]
 800279c:	f000 bcc2 	b.w	8003124 <DMA2_Stream0_IRQHandler+0x9fc>
 80027a0:	40020400 	.word	0x40020400
 80027a4:	20000784 	.word	0x20000784
 80027a8:	20000758 	.word	0x20000758
 80027ac:	20000786 	.word	0x20000786
 80027b0:	20000788 	.word	0x20000788
 80027b4:	88888889 	.word	0x88888889
				/*if(ADC_rawdata[0]<40 || ADC_rawdata[1]<40 ||ADC_rawdata[0]>4000 || ADC_rawdata[1]>4000){
					if(measurement_error_counter==1)inverter_error_trip(shortcircuit);
					measurement_error_counter++;
				}else{measurement_error_counter=0;}*/
				//DC link voltage
				U_DClink = (float)ADC_rawdata[2]*0.0250945f;
 80027b8:	4bbf      	ldr	r3, [pc, #764]	; (8002ab8 <DMA2_Stream0_IRQHandler+0x390>)
 80027ba:	889b      	ldrh	r3, [r3, #4]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	ee07 3a90 	vmov	s15, r3
 80027c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c6:	ed9f 7abd 	vldr	s14, [pc, #756]	; 8002abc <DMA2_Stream0_IRQHandler+0x394>
 80027ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ce:	4bbc      	ldr	r3, [pc, #752]	; (8002ac0 <DMA2_Stream0_IRQHandler+0x398>)
 80027d0:	edc3 7a00 	vstr	s15, [r3]
				U_DClink_filtered = LowPassFilter(0.01f, U_DClink, &U_DClink_last);
 80027d4:	4bba      	ldr	r3, [pc, #744]	; (8002ac0 <DMA2_Stream0_IRQHandler+0x398>)
 80027d6:	edd3 7a00 	vldr	s15, [r3]
 80027da:	48ba      	ldr	r0, [pc, #744]	; (8002ac4 <DMA2_Stream0_IRQHandler+0x39c>)
 80027dc:	eef0 0a67 	vmov.f32	s1, s15
 80027e0:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8002ac8 <DMA2_Stream0_IRQHandler+0x3a0>
 80027e4:	f7fe fe84 	bl	80014f0 <LowPassFilter>
 80027e8:	eef0 7a40 	vmov.f32	s15, s0
 80027ec:	4bb7      	ldr	r3, [pc, #732]	; (8002acc <DMA2_Stream0_IRQHandler+0x3a4>)
 80027ee:	edc3 7a00 	vstr	s15, [r3]

				//if(U_DClink_filtered>INVERTER_OVERVOLTAGE_LEVEL && OV_measurement_error_counter<2){if(OV_measurement_error_counter==1){inverter_error_trip(overvoltage);}OV_measurement_error_counter++;}else{OV_measurement_error_counter=0;}
				//if(U_DClink_filtered<INVERTER_UNDERVOLTAGE_LEVEL && UV_measurement_error_counter<2){if(UV_measurement_error_counter==1){inverter_error_trip(undervoltage);}UV_measurement_error_counter++;}else{UV_measurement_error_counter=0;} //2 measurements under a treshold must happen in a row
				modbus_registers_buffer[14] = (uint16_t)(U_DClink_filtered*10.0f);
 80027f2:	4bb6      	ldr	r3, [pc, #728]	; (8002acc <DMA2_Stream0_IRQHandler+0x3a4>)
 80027f4:	edd3 7a00 	vldr	s15, [r3]
 80027f8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80027fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002804:	ee17 3a90 	vmov	r3, s15
 8002808:	b29a      	uxth	r2, r3
 800280a:	4bb1      	ldr	r3, [pc, #708]	; (8002ad0 <DMA2_Stream0_IRQHandler+0x3a8>)
 800280c:	839a      	strh	r2, [r3, #28]
				//current calculation
				I_U_raw=ADC_rawdata[0]-I_U_zerocurrentreading;
 800280e:	4baa      	ldr	r3, [pc, #680]	; (8002ab8 <DMA2_Stream0_IRQHandler+0x390>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	b29a      	uxth	r2, r3
 8002814:	4baf      	ldr	r3, [pc, #700]	; (8002ad4 <DMA2_Stream0_IRQHandler+0x3ac>)
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	b29b      	uxth	r3, r3
 800281c:	b21a      	sxth	r2, r3
 800281e:	4bae      	ldr	r3, [pc, #696]	; (8002ad8 <DMA2_Stream0_IRQHandler+0x3b0>)
 8002820:	801a      	strh	r2, [r3, #0]
				I_V_raw=ADC_rawdata[1]-I_V_zerocurrentreading;
 8002822:	4ba5      	ldr	r3, [pc, #660]	; (8002ab8 <DMA2_Stream0_IRQHandler+0x390>)
 8002824:	885b      	ldrh	r3, [r3, #2]
 8002826:	b29a      	uxth	r2, r3
 8002828:	4bac      	ldr	r3, [pc, #688]	; (8002adc <DMA2_Stream0_IRQHandler+0x3b4>)
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	b29b      	uxth	r3, r3
 8002830:	b21a      	sxth	r2, r3
 8002832:	4bab      	ldr	r3, [pc, #684]	; (8002ae0 <DMA2_Stream0_IRQHandler+0x3b8>)
 8002834:	801a      	strh	r2, [r3, #0]
				I_U=(float)I_U_raw*CURRENT_SENSE_RATIO;
 8002836:	4ba8      	ldr	r3, [pc, #672]	; (8002ad8 <DMA2_Stream0_IRQHandler+0x3b0>)
 8002838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800283c:	ee07 3a90 	vmov	s15, r3
 8002840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002844:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8002ae4 <DMA2_Stream0_IRQHandler+0x3bc>
 8002848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800284c:	4ba6      	ldr	r3, [pc, #664]	; (8002ae8 <DMA2_Stream0_IRQHandler+0x3c0>)
 800284e:	edc3 7a00 	vstr	s15, [r3]
				I_V=(float)I_V_raw*CURRENT_SENSE_RATIO;
 8002852:	4ba3      	ldr	r3, [pc, #652]	; (8002ae0 <DMA2_Stream0_IRQHandler+0x3b8>)
 8002854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002858:	ee07 3a90 	vmov	s15, r3
 800285c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002860:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8002ae4 <DMA2_Stream0_IRQHandler+0x3bc>
 8002864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002868:	4ba0      	ldr	r3, [pc, #640]	; (8002aec <DMA2_Stream0_IRQHandler+0x3c4>)
 800286a:	edc3 7a00 	vstr	s15, [r3]
				I_W=-I_U-I_V;
 800286e:	4b9e      	ldr	r3, [pc, #632]	; (8002ae8 <DMA2_Stream0_IRQHandler+0x3c0>)
 8002870:	edd3 7a00 	vldr	s15, [r3]
 8002874:	eeb1 7a67 	vneg.f32	s14, s15
 8002878:	4b9c      	ldr	r3, [pc, #624]	; (8002aec <DMA2_Stream0_IRQHandler+0x3c4>)
 800287a:	edd3 7a00 	vldr	s15, [r3]
 800287e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002882:	4b9b      	ldr	r3, [pc, #620]	; (8002af0 <DMA2_Stream0_IRQHandler+0x3c8>)
 8002884:	edc3 7a00 	vstr	s15, [r3]
				//RMS current calculation loop

				rms_count++;
 8002888:	4b9a      	ldr	r3, [pc, #616]	; (8002af4 <DMA2_Stream0_IRQHandler+0x3cc>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	b29b      	uxth	r3, r3
 800288e:	3301      	adds	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	4b98      	ldr	r3, [pc, #608]	; (8002af4 <DMA2_Stream0_IRQHandler+0x3cc>)
 8002894:	801a      	strh	r2, [r3, #0]
				I_U_square_sum+=(I_U*I_U);
 8002896:	4b94      	ldr	r3, [pc, #592]	; (8002ae8 <DMA2_Stream0_IRQHandler+0x3c0>)
 8002898:	ed93 7a00 	vldr	s14, [r3]
 800289c:	4b92      	ldr	r3, [pc, #584]	; (8002ae8 <DMA2_Stream0_IRQHandler+0x3c0>)
 800289e:	edd3 7a00 	vldr	s15, [r3]
 80028a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a6:	4b94      	ldr	r3, [pc, #592]	; (8002af8 <DMA2_Stream0_IRQHandler+0x3d0>)
 80028a8:	edd3 7a00 	vldr	s15, [r3]
 80028ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b0:	4b91      	ldr	r3, [pc, #580]	; (8002af8 <DMA2_Stream0_IRQHandler+0x3d0>)
 80028b2:	edc3 7a00 	vstr	s15, [r3]
				I_V_square_sum+=(I_V*I_V);
 80028b6:	4b8d      	ldr	r3, [pc, #564]	; (8002aec <DMA2_Stream0_IRQHandler+0x3c4>)
 80028b8:	ed93 7a00 	vldr	s14, [r3]
 80028bc:	4b8b      	ldr	r3, [pc, #556]	; (8002aec <DMA2_Stream0_IRQHandler+0x3c4>)
 80028be:	edd3 7a00 	vldr	s15, [r3]
 80028c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028c6:	4b8d      	ldr	r3, [pc, #564]	; (8002afc <DMA2_Stream0_IRQHandler+0x3d4>)
 80028c8:	edd3 7a00 	vldr	s15, [r3]
 80028cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d0:	4b8a      	ldr	r3, [pc, #552]	; (8002afc <DMA2_Stream0_IRQHandler+0x3d4>)
 80028d2:	edc3 7a00 	vstr	s15, [r3]
				I_W_square_sum+=(I_W*I_W);
 80028d6:	4b86      	ldr	r3, [pc, #536]	; (8002af0 <DMA2_Stream0_IRQHandler+0x3c8>)
 80028d8:	ed93 7a00 	vldr	s14, [r3]
 80028dc:	4b84      	ldr	r3, [pc, #528]	; (8002af0 <DMA2_Stream0_IRQHandler+0x3c8>)
 80028de:	edd3 7a00 	vldr	s15, [r3]
 80028e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028e6:	4b86      	ldr	r3, [pc, #536]	; (8002b00 <DMA2_Stream0_IRQHandler+0x3d8>)
 80028e8:	edd3 7a00 	vldr	s15, [r3]
 80028ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f0:	4b83      	ldr	r3, [pc, #524]	; (8002b00 <DMA2_Stream0_IRQHandler+0x3d8>)
 80028f2:	edc3 7a00 	vstr	s15, [r3]

				if(rms_count>CURRENT_RMS_SAMPLING_COUNT){
 80028f6:	4b7f      	ldr	r3, [pc, #508]	; (8002af4 <DMA2_Stream0_IRQHandler+0x3cc>)
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002900:	f240 808e 	bls.w	8002a20 <DMA2_Stream0_IRQHandler+0x2f8>
					I_U_RMS=sqrt(I_U_square_sum/(float)rms_count);
 8002904:	4b7c      	ldr	r3, [pc, #496]	; (8002af8 <DMA2_Stream0_IRQHandler+0x3d0>)
 8002906:	ed93 7a00 	vldr	s14, [r3]
 800290a:	4b7a      	ldr	r3, [pc, #488]	; (8002af4 <DMA2_Stream0_IRQHandler+0x3cc>)
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	ee07 3a90 	vmov	s15, r3
 8002914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002918:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800291c:	ee16 0a90 	vmov	r0, s13
 8002920:	f7fd fdc2 	bl	80004a8 <__aeabi_f2d>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	ec43 2b10 	vmov	d0, r2, r3
 800292c:	f008 fdfc 	bl	800b528 <sqrt>
 8002930:	ec53 2b10 	vmov	r2, r3, d0
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	f7fe f8be 	bl	8000ab8 <__aeabi_d2f>
 800293c:	4603      	mov	r3, r0
 800293e:	4a71      	ldr	r2, [pc, #452]	; (8002b04 <DMA2_Stream0_IRQHandler+0x3dc>)
 8002940:	6013      	str	r3, [r2, #0]
					I_V_RMS=sqrt(I_V_square_sum/(float)rms_count);
 8002942:	4b6e      	ldr	r3, [pc, #440]	; (8002afc <DMA2_Stream0_IRQHandler+0x3d4>)
 8002944:	ed93 7a00 	vldr	s14, [r3]
 8002948:	4b6a      	ldr	r3, [pc, #424]	; (8002af4 <DMA2_Stream0_IRQHandler+0x3cc>)
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	ee07 3a90 	vmov	s15, r3
 8002952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002956:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800295a:	ee16 0a90 	vmov	r0, s13
 800295e:	f7fd fda3 	bl	80004a8 <__aeabi_f2d>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	ec43 2b10 	vmov	d0, r2, r3
 800296a:	f008 fddd 	bl	800b528 <sqrt>
 800296e:	ec53 2b10 	vmov	r2, r3, d0
 8002972:	4610      	mov	r0, r2
 8002974:	4619      	mov	r1, r3
 8002976:	f7fe f89f 	bl	8000ab8 <__aeabi_d2f>
 800297a:	4603      	mov	r3, r0
 800297c:	4a62      	ldr	r2, [pc, #392]	; (8002b08 <DMA2_Stream0_IRQHandler+0x3e0>)
 800297e:	6013      	str	r3, [r2, #0]
					I_W_RMS=sqrt(I_W_square_sum/(float)rms_count);
 8002980:	4b5f      	ldr	r3, [pc, #380]	; (8002b00 <DMA2_Stream0_IRQHandler+0x3d8>)
 8002982:	ed93 7a00 	vldr	s14, [r3]
 8002986:	4b5b      	ldr	r3, [pc, #364]	; (8002af4 <DMA2_Stream0_IRQHandler+0x3cc>)
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	ee07 3a90 	vmov	s15, r3
 8002990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002994:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002998:	ee16 0a90 	vmov	r0, s13
 800299c:	f7fd fd84 	bl	80004a8 <__aeabi_f2d>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	ec43 2b10 	vmov	d0, r2, r3
 80029a8:	f008 fdbe 	bl	800b528 <sqrt>
 80029ac:	ec53 2b10 	vmov	r2, r3, d0
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	f7fe f880 	bl	8000ab8 <__aeabi_d2f>
 80029b8:	4603      	mov	r3, r0
 80029ba:	4a54      	ldr	r2, [pc, #336]	; (8002b0c <DMA2_Stream0_IRQHandler+0x3e4>)
 80029bc:	6013      	str	r3, [r2, #0]
					I_out=(I_U_RMS+I_V_RMS+I_W_RMS)/3.0f;
 80029be:	4b51      	ldr	r3, [pc, #324]	; (8002b04 <DMA2_Stream0_IRQHandler+0x3dc>)
 80029c0:	ed93 7a00 	vldr	s14, [r3]
 80029c4:	4b50      	ldr	r3, [pc, #320]	; (8002b08 <DMA2_Stream0_IRQHandler+0x3e0>)
 80029c6:	edd3 7a00 	vldr	s15, [r3]
 80029ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029ce:	4b4f      	ldr	r3, [pc, #316]	; (8002b0c <DMA2_Stream0_IRQHandler+0x3e4>)
 80029d0:	edd3 7a00 	vldr	s15, [r3]
 80029d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029d8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80029dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029e0:	4b4b      	ldr	r3, [pc, #300]	; (8002b10 <DMA2_Stream0_IRQHandler+0x3e8>)
 80029e2:	edc3 7a00 	vstr	s15, [r3]
					modbus_registers_buffer[10]=(uint16_t)(I_out*100.0f);
 80029e6:	4b4a      	ldr	r3, [pc, #296]	; (8002b10 <DMA2_Stream0_IRQHandler+0x3e8>)
 80029e8:	edd3 7a00 	vldr	s15, [r3]
 80029ec:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002b14 <DMA2_Stream0_IRQHandler+0x3ec>
 80029f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029f8:	ee17 3a90 	vmov	r3, s15
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	4b34      	ldr	r3, [pc, #208]	; (8002ad0 <DMA2_Stream0_IRQHandler+0x3a8>)
 8002a00:	829a      	strh	r2, [r3, #20]
					rms_count=0;I_U_square_sum=0.0f;I_V_square_sum=0.0f;I_W_square_sum=0.0f;}
 8002a02:	4b3c      	ldr	r3, [pc, #240]	; (8002af4 <DMA2_Stream0_IRQHandler+0x3cc>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	801a      	strh	r2, [r3, #0]
 8002a08:	4b3b      	ldr	r3, [pc, #236]	; (8002af8 <DMA2_Stream0_IRQHandler+0x3d0>)
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	4b3a      	ldr	r3, [pc, #232]	; (8002afc <DMA2_Stream0_IRQHandler+0x3d4>)
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	4b39      	ldr	r3, [pc, #228]	; (8002b00 <DMA2_Stream0_IRQHandler+0x3d8>)
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]

				if((I_U>INVERTER_OVERCURRENT_TRIP_LEVEL || I_U < (-INVERTER_OVERCURRENT_TRIP_LEVEL) || I_V>INVERTER_OVERCURRENT_TRIP_LEVEL || I_V < (-INVERTER_OVERCURRENT_TRIP_LEVEL) || I_W > INVERTER_OVERCURRENT_TRIP_LEVEL || I_W <(-INVERTER_OVERCURRENT_TRIP_LEVEL)) && OC_measurement_error_counter<3){
 8002a20:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <DMA2_Stream0_IRQHandler+0x3c0>)
 8002a22:	edd3 7a00 	vldr	s15, [r3]
 8002a26:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002a2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a32:	dc31      	bgt.n	8002a98 <DMA2_Stream0_IRQHandler+0x370>
 8002a34:	4b2c      	ldr	r3, [pc, #176]	; (8002ae8 <DMA2_Stream0_IRQHandler+0x3c0>)
 8002a36:	edd3 7a00 	vldr	s15, [r3]
 8002a3a:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8002a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a46:	d427      	bmi.n	8002a98 <DMA2_Stream0_IRQHandler+0x370>
 8002a48:	4b28      	ldr	r3, [pc, #160]	; (8002aec <DMA2_Stream0_IRQHandler+0x3c4>)
 8002a4a:	edd3 7a00 	vldr	s15, [r3]
 8002a4e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002a52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5a:	dc1d      	bgt.n	8002a98 <DMA2_Stream0_IRQHandler+0x370>
 8002a5c:	4b23      	ldr	r3, [pc, #140]	; (8002aec <DMA2_Stream0_IRQHandler+0x3c4>)
 8002a5e:	edd3 7a00 	vldr	s15, [r3]
 8002a62:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8002a66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6e:	d413      	bmi.n	8002a98 <DMA2_Stream0_IRQHandler+0x370>
 8002a70:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <DMA2_Stream0_IRQHandler+0x3c8>)
 8002a72:	edd3 7a00 	vldr	s15, [r3]
 8002a76:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002a7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a82:	dc09      	bgt.n	8002a98 <DMA2_Stream0_IRQHandler+0x370>
 8002a84:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <DMA2_Stream0_IRQHandler+0x3c8>)
 8002a86:	edd3 7a00 	vldr	s15, [r3]
 8002a8a:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8002a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a96:	d545      	bpl.n	8002b24 <DMA2_Stream0_IRQHandler+0x3fc>
 8002a98:	4b1f      	ldr	r3, [pc, #124]	; (8002b18 <DMA2_Stream0_IRQHandler+0x3f0>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d841      	bhi.n	8002b24 <DMA2_Stream0_IRQHandler+0x3fc>
					OC_measurement_error_counter++;
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <DMA2_Stream0_IRQHandler+0x3f0>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <DMA2_Stream0_IRQHandler+0x3f0>)
 8002aaa:	701a      	strb	r2, [r3, #0]
					if(OC_measurement_error_counter==2){inverter_error_trip(overcurrent);}
 8002aac:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <DMA2_Stream0_IRQHandler+0x3f0>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d13a      	bne.n	8002b2a <DMA2_Stream0_IRQHandler+0x402>
 8002ab4:	e032      	b.n	8002b1c <DMA2_Stream0_IRQHandler+0x3f4>
 8002ab6:	bf00      	nop
 8002ab8:	20000758 	.word	0x20000758
 8002abc:	3ccd92fb 	.word	0x3ccd92fb
 8002ac0:	20000770 	.word	0x20000770
 8002ac4:	20000774 	.word	0x20000774
 8002ac8:	3c23d70a 	.word	0x3c23d70a
 8002acc:	20000778 	.word	0x20000778
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	20000786 	.word	0x20000786
 8002ad8:	2000078a 	.word	0x2000078a
 8002adc:	20000788 	.word	0x20000788
 8002ae0:	2000078c 	.word	0x2000078c
 8002ae4:	3c88018c 	.word	0x3c88018c
 8002ae8:	20000790 	.word	0x20000790
 8002aec:	20000794 	.word	0x20000794
 8002af0:	20000798 	.word	0x20000798
 8002af4:	2000079c 	.word	0x2000079c
 8002af8:	200007a0 	.word	0x200007a0
 8002afc:	200007a4 	.word	0x200007a4
 8002b00:	200007a8 	.word	0x200007a8
 8002b04:	200007ac 	.word	0x200007ac
 8002b08:	200007b0 	.word	0x200007b0
 8002b0c:	200007b4 	.word	0x200007b4
 8002b10:	200007b8 	.word	0x200007b8
 8002b14:	42c80000 	.word	0x42c80000
 8002b18:	2000077c 	.word	0x2000077c
 8002b1c:	2004      	movs	r0, #4
 8002b1e:	f7fe fc0f 	bl	8001340 <inverter_error_trip>
 8002b22:	e002      	b.n	8002b2a <DMA2_Stream0_IRQHandler+0x402>
				}else{OC_measurement_error_counter=0;}
 8002b24:	4b4a      	ldr	r3, [pc, #296]	; (8002c50 <DMA2_Stream0_IRQHandler+0x528>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]


				if(encoder_positioned){
 8002b2a:	4b4a      	ldr	r3, [pc, #296]	; (8002c54 <DMA2_Stream0_IRQHandler+0x52c>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 812b 	beq.w	8002d8a <DMA2_Stream0_IRQHandler+0x662>
					if(TIM2->CNT <5000){encoder_actual_position=5000-TIM2->CNT;}
 8002b34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	f241 3287 	movw	r2, #4999	; 0x1387
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d80b      	bhi.n	8002b5a <DMA2_Stream0_IRQHandler+0x432>
 8002b42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8002b4e:	3308      	adds	r3, #8
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	b21a      	sxth	r2, r3
 8002b54:	4b40      	ldr	r3, [pc, #256]	; (8002c58 <DMA2_Stream0_IRQHandler+0x530>)
 8002b56:	801a      	strh	r2, [r3, #0]
 8002b58:	e00a      	b.n	8002b70 <DMA2_Stream0_IRQHandler+0x448>
					else{encoder_actual_position=10000-TIM2->CNT;}
 8002b5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8002b66:	3310      	adds	r3, #16
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	b21a      	sxth	r2, r3
 8002b6c:	4b3a      	ldr	r3, [pc, #232]	; (8002c58 <DMA2_Stream0_IRQHandler+0x530>)
 8002b6e:	801a      	strh	r2, [r3, #0]
					modbus_registers_buffer[11]=encoder_actual_position;
 8002b70:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <DMA2_Stream0_IRQHandler+0x530>)
 8002b72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	4b38      	ldr	r3, [pc, #224]	; (8002c5c <DMA2_Stream0_IRQHandler+0x534>)
 8002b7a:	82da      	strh	r2, [r3, #22]
					int16_t corrected_encoder_position=((encoder_actual_position % 1000) - encoder_correction);
 8002b7c:	4b36      	ldr	r3, [pc, #216]	; (8002c58 <DMA2_Stream0_IRQHandler+0x530>)
 8002b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b82:	4a37      	ldr	r2, [pc, #220]	; (8002c60 <DMA2_Stream0_IRQHandler+0x538>)
 8002b84:	fb82 1203 	smull	r1, r2, r2, r3
 8002b88:	1191      	asrs	r1, r2, #6
 8002b8a:	17da      	asrs	r2, r3, #31
 8002b8c:	1a8a      	subs	r2, r1, r2
 8002b8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b92:	fb01 f202 	mul.w	r2, r1, r2
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	b21b      	sxth	r3, r3
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	4b31      	ldr	r3, [pc, #196]	; (8002c64 <DMA2_Stream0_IRQHandler+0x53c>)
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	80fb      	strh	r3, [r7, #6]
					if(corrected_encoder_position<0){corrected_encoder_position+=1000;}
 8002ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	da04      	bge.n	8002bb8 <DMA2_Stream0_IRQHandler+0x490>
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	80fb      	strh	r3, [r7, #6]
					actual_electric_angle=(float)(corrected_encoder_position)*0.36f;
 8002bb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bbc:	ee07 3a90 	vmov	s15, r3
 8002bc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bc4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002c68 <DMA2_Stream0_IRQHandler+0x540>
 8002bc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bcc:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <DMA2_Stream0_IRQHandler+0x544>)
 8002bce:	edc3 7a00 	vstr	s15, [r3]
					if(actual_electric_angle-electric_angle>180.0f){actual_torque_angle=(actual_electric_angle-electric_angle) - 360.0f;}
 8002bd2:	4b26      	ldr	r3, [pc, #152]	; (8002c6c <DMA2_Stream0_IRQHandler+0x544>)
 8002bd4:	ed93 7a00 	vldr	s14, [r3]
 8002bd8:	4b25      	ldr	r3, [pc, #148]	; (8002c70 <DMA2_Stream0_IRQHandler+0x548>)
 8002bda:	edd3 7a00 	vldr	s15, [r3]
 8002bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002c74 <DMA2_Stream0_IRQHandler+0x54c>
 8002be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bee:	dd0f      	ble.n	8002c10 <DMA2_Stream0_IRQHandler+0x4e8>
 8002bf0:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <DMA2_Stream0_IRQHandler+0x544>)
 8002bf2:	ed93 7a00 	vldr	s14, [r3]
 8002bf6:	4b1e      	ldr	r3, [pc, #120]	; (8002c70 <DMA2_Stream0_IRQHandler+0x548>)
 8002bf8:	edd3 7a00 	vldr	s15, [r3]
 8002bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c00:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002c78 <DMA2_Stream0_IRQHandler+0x550>
 8002c04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c08:	4b1c      	ldr	r3, [pc, #112]	; (8002c7c <DMA2_Stream0_IRQHandler+0x554>)
 8002c0a:	edc3 7a00 	vstr	s15, [r3]
 8002c0e:	e044      	b.n	8002c9a <DMA2_Stream0_IRQHandler+0x572>
					else if(actual_electric_angle-electric_angle<(-180.0f)){actual_torque_angle=actual_electric_angle-electric_angle + 360.0f;}
 8002c10:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <DMA2_Stream0_IRQHandler+0x544>)
 8002c12:	ed93 7a00 	vldr	s14, [r3]
 8002c16:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <DMA2_Stream0_IRQHandler+0x548>)
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c20:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002c80 <DMA2_Stream0_IRQHandler+0x558>
 8002c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2c:	d52a      	bpl.n	8002c84 <DMA2_Stream0_IRQHandler+0x55c>
 8002c2e:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <DMA2_Stream0_IRQHandler+0x544>)
 8002c30:	ed93 7a00 	vldr	s14, [r3]
 8002c34:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <DMA2_Stream0_IRQHandler+0x548>)
 8002c36:	edd3 7a00 	vldr	s15, [r3]
 8002c3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c3e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002c78 <DMA2_Stream0_IRQHandler+0x550>
 8002c42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c46:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <DMA2_Stream0_IRQHandler+0x554>)
 8002c48:	edc3 7a00 	vstr	s15, [r3]
 8002c4c:	e025      	b.n	8002c9a <DMA2_Stream0_IRQHandler+0x572>
 8002c4e:	bf00      	nop
 8002c50:	2000077c 	.word	0x2000077c
 8002c54:	200007e4 	.word	0x200007e4
 8002c58:	200007e6 	.word	0x200007e6
 8002c5c:	20000000 	.word	0x20000000
 8002c60:	10624dd3 	.word	0x10624dd3
 8002c64:	2000003c 	.word	0x2000003c
 8002c68:	3eb851ec 	.word	0x3eb851ec
 8002c6c:	200007e8 	.word	0x200007e8
 8002c70:	20000768 	.word	0x20000768
 8002c74:	43340000 	.word	0x43340000
 8002c78:	43b40000 	.word	0x43b40000
 8002c7c:	200007f0 	.word	0x200007f0
 8002c80:	c3340000 	.word	0xc3340000
					else{actual_torque_angle=actual_electric_angle-electric_angle;}
 8002c84:	4bc4      	ldr	r3, [pc, #784]	; (8002f98 <DMA2_Stream0_IRQHandler+0x870>)
 8002c86:	ed93 7a00 	vldr	s14, [r3]
 8002c8a:	4bc4      	ldr	r3, [pc, #784]	; (8002f9c <DMA2_Stream0_IRQHandler+0x874>)
 8002c8c:	edd3 7a00 	vldr	s15, [r3]
 8002c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c94:	4bc2      	ldr	r3, [pc, #776]	; (8002fa0 <DMA2_Stream0_IRQHandler+0x878>)
 8002c96:	edc3 7a00 	vstr	s15, [r3]
					modbus_registers_buffer[12]=(int16_t)actual_torque_angle;//write calculated value to modbus array
 8002c9a:	4bc1      	ldr	r3, [pc, #772]	; (8002fa0 <DMA2_Stream0_IRQHandler+0x878>)
 8002c9c:	edd3 7a00 	vldr	s15, [r3]
 8002ca0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ca4:	ee17 3a90 	vmov	r3, s15
 8002ca8:	b21b      	sxth	r3, r3
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	4bbd      	ldr	r3, [pc, #756]	; (8002fa4 <DMA2_Stream0_IRQHandler+0x87c>)
 8002cae:	831a      	strh	r2, [r3, #24]
					speed_measurement_loop_i++;
 8002cb0:	4bbd      	ldr	r3, [pc, #756]	; (8002fa8 <DMA2_Stream0_IRQHandler+0x880>)
 8002cb2:	edd3 7a00 	vldr	s15, [r3]
 8002cb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cbe:	4bba      	ldr	r3, [pc, #744]	; (8002fa8 <DMA2_Stream0_IRQHandler+0x880>)
 8002cc0:	edc3 7a00 	vstr	s15, [r3]
					if(speed_measurement_loop_i>=30){
 8002cc4:	4bb8      	ldr	r3, [pc, #736]	; (8002fa8 <DMA2_Stream0_IRQHandler+0x880>)
 8002cc6:	edd3 7a00 	vldr	s15, [r3]
 8002cca:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002cce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd6:	db58      	blt.n	8002d8a <DMA2_Stream0_IRQHandler+0x662>
						speed=(actual_electric_angle-last_actual_electric_angle)*17.77777f; //speed(rpm) = ((x(deg)/polepairs)/360deg)/(0,001875(s)/60s)
 8002cd8:	4baf      	ldr	r3, [pc, #700]	; (8002f98 <DMA2_Stream0_IRQHandler+0x870>)
 8002cda:	ed93 7a00 	vldr	s14, [r3]
 8002cde:	4bb3      	ldr	r3, [pc, #716]	; (8002fac <DMA2_Stream0_IRQHandler+0x884>)
 8002ce0:	edd3 7a00 	vldr	s15, [r3]
 8002ce4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ce8:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8002fb0 <DMA2_Stream0_IRQHandler+0x888>
 8002cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cf0:	4bb0      	ldr	r3, [pc, #704]	; (8002fb4 <DMA2_Stream0_IRQHandler+0x88c>)
 8002cf2:	edc3 7a00 	vstr	s15, [r3]
						if(speed>3200){speed-=6400;}if(speed<(-3200)){speed+=6400;}
 8002cf6:	4baf      	ldr	r3, [pc, #700]	; (8002fb4 <DMA2_Stream0_IRQHandler+0x88c>)
 8002cf8:	edd3 7a00 	vldr	s15, [r3]
 8002cfc:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8002fb8 <DMA2_Stream0_IRQHandler+0x890>
 8002d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d08:	dd09      	ble.n	8002d1e <DMA2_Stream0_IRQHandler+0x5f6>
 8002d0a:	4baa      	ldr	r3, [pc, #680]	; (8002fb4 <DMA2_Stream0_IRQHandler+0x88c>)
 8002d0c:	edd3 7a00 	vldr	s15, [r3]
 8002d10:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8002fbc <DMA2_Stream0_IRQHandler+0x894>
 8002d14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d18:	4ba6      	ldr	r3, [pc, #664]	; (8002fb4 <DMA2_Stream0_IRQHandler+0x88c>)
 8002d1a:	edc3 7a00 	vstr	s15, [r3]
 8002d1e:	4ba5      	ldr	r3, [pc, #660]	; (8002fb4 <DMA2_Stream0_IRQHandler+0x88c>)
 8002d20:	edd3 7a00 	vldr	s15, [r3]
 8002d24:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002fc0 <DMA2_Stream0_IRQHandler+0x898>
 8002d28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d30:	d509      	bpl.n	8002d46 <DMA2_Stream0_IRQHandler+0x61e>
 8002d32:	4ba0      	ldr	r3, [pc, #640]	; (8002fb4 <DMA2_Stream0_IRQHandler+0x88c>)
 8002d34:	edd3 7a00 	vldr	s15, [r3]
 8002d38:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8002fbc <DMA2_Stream0_IRQHandler+0x894>
 8002d3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d40:	4b9c      	ldr	r3, [pc, #624]	; (8002fb4 <DMA2_Stream0_IRQHandler+0x88c>)
 8002d42:	edc3 7a00 	vstr	s15, [r3]
						filtered_speed=LowPassFilter(0.0005,speed, &last_filtered_actual_speed);
 8002d46:	4b9b      	ldr	r3, [pc, #620]	; (8002fb4 <DMA2_Stream0_IRQHandler+0x88c>)
 8002d48:	edd3 7a00 	vldr	s15, [r3]
 8002d4c:	489d      	ldr	r0, [pc, #628]	; (8002fc4 <DMA2_Stream0_IRQHandler+0x89c>)
 8002d4e:	eef0 0a67 	vmov.f32	s1, s15
 8002d52:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8002fc8 <DMA2_Stream0_IRQHandler+0x8a0>
 8002d56:	f7fe fbcb 	bl	80014f0 <LowPassFilter>
 8002d5a:	eef0 7a40 	vmov.f32	s15, s0
 8002d5e:	4b9b      	ldr	r3, [pc, #620]	; (8002fcc <DMA2_Stream0_IRQHandler+0x8a4>)
 8002d60:	edc3 7a00 	vstr	s15, [r3]
						modbus_registers_buffer[13]=(int16_t)(filtered_speed);
 8002d64:	4b99      	ldr	r3, [pc, #612]	; (8002fcc <DMA2_Stream0_IRQHandler+0x8a4>)
 8002d66:	edd3 7a00 	vldr	s15, [r3]
 8002d6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d6e:	ee17 3a90 	vmov	r3, s15
 8002d72:	b21b      	sxth	r3, r3
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	4b8b      	ldr	r3, [pc, #556]	; (8002fa4 <DMA2_Stream0_IRQHandler+0x87c>)
 8002d78:	835a      	strh	r2, [r3, #26]
						last_actual_electric_angle = actual_electric_angle;
 8002d7a:	4b87      	ldr	r3, [pc, #540]	; (8002f98 <DMA2_Stream0_IRQHandler+0x870>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a8b      	ldr	r2, [pc, #556]	; (8002fac <DMA2_Stream0_IRQHandler+0x884>)
 8002d80:	6013      	str	r3, [r2, #0]
						speed_measurement_loop_i=0;
 8002d82:	4b89      	ldr	r3, [pc, #548]	; (8002fa8 <DMA2_Stream0_IRQHandler+0x880>)
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
					}
				}

				park_transform(I_U, I_V, actual_electric_angle, &I_d, &I_q);
 8002d8a:	4b91      	ldr	r3, [pc, #580]	; (8002fd0 <DMA2_Stream0_IRQHandler+0x8a8>)
 8002d8c:	edd3 7a00 	vldr	s15, [r3]
 8002d90:	4b90      	ldr	r3, [pc, #576]	; (8002fd4 <DMA2_Stream0_IRQHandler+0x8ac>)
 8002d92:	ed93 7a00 	vldr	s14, [r3]
 8002d96:	4b80      	ldr	r3, [pc, #512]	; (8002f98 <DMA2_Stream0_IRQHandler+0x870>)
 8002d98:	edd3 6a00 	vldr	s13, [r3]
 8002d9c:	498e      	ldr	r1, [pc, #568]	; (8002fd8 <DMA2_Stream0_IRQHandler+0x8b0>)
 8002d9e:	488f      	ldr	r0, [pc, #572]	; (8002fdc <DMA2_Stream0_IRQHandler+0x8b4>)
 8002da0:	eeb0 1a66 	vmov.f32	s2, s13
 8002da4:	eef0 0a47 	vmov.f32	s1, s14
 8002da8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dac:	f7fe fade 	bl	800136c <park_transform>
				I_d_filtered = LowPassFilter(0.007, I_d, &I_d_last);
 8002db0:	4b8a      	ldr	r3, [pc, #552]	; (8002fdc <DMA2_Stream0_IRQHandler+0x8b4>)
 8002db2:	edd3 7a00 	vldr	s15, [r3]
 8002db6:	488a      	ldr	r0, [pc, #552]	; (8002fe0 <DMA2_Stream0_IRQHandler+0x8b8>)
 8002db8:	eef0 0a67 	vmov.f32	s1, s15
 8002dbc:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8002fe4 <DMA2_Stream0_IRQHandler+0x8bc>
 8002dc0:	f7fe fb96 	bl	80014f0 <LowPassFilter>
 8002dc4:	eef0 7a40 	vmov.f32	s15, s0
 8002dc8:	4b87      	ldr	r3, [pc, #540]	; (8002fe8 <DMA2_Stream0_IRQHandler+0x8c0>)
 8002dca:	edc3 7a00 	vstr	s15, [r3]
				I_q_filtered = LowPassFilter(0.007, I_q, &I_q_last);
 8002dce:	4b82      	ldr	r3, [pc, #520]	; (8002fd8 <DMA2_Stream0_IRQHandler+0x8b0>)
 8002dd0:	edd3 7a00 	vldr	s15, [r3]
 8002dd4:	4885      	ldr	r0, [pc, #532]	; (8002fec <DMA2_Stream0_IRQHandler+0x8c4>)
 8002dd6:	eef0 0a67 	vmov.f32	s1, s15
 8002dda:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8002fe4 <DMA2_Stream0_IRQHandler+0x8bc>
 8002dde:	f7fe fb87 	bl	80014f0 <LowPassFilter>
 8002de2:	eef0 7a40 	vmov.f32	s15, s0
 8002de6:	4b82      	ldr	r3, [pc, #520]	; (8002ff0 <DMA2_Stream0_IRQHandler+0x8c8>)
 8002de8:	edc3 7a00 	vstr	s15, [r3]
				modbus_registers_buffer[15]=(int16_t)(I_d_filtered*100);
 8002dec:	4b7e      	ldr	r3, [pc, #504]	; (8002fe8 <DMA2_Stream0_IRQHandler+0x8c0>)
 8002dee:	edd3 7a00 	vldr	s15, [r3]
 8002df2:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002ff4 <DMA2_Stream0_IRQHandler+0x8cc>
 8002df6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dfe:	ee17 3a90 	vmov	r3, s15
 8002e02:	b21b      	sxth	r3, r3
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	4b67      	ldr	r3, [pc, #412]	; (8002fa4 <DMA2_Stream0_IRQHandler+0x87c>)
 8002e08:	83da      	strh	r2, [r3, #30]
				modbus_registers_buffer[16]=(int16_t)(I_q_filtered*100);
 8002e0a:	4b79      	ldr	r3, [pc, #484]	; (8002ff0 <DMA2_Stream0_IRQHandler+0x8c8>)
 8002e0c:	edd3 7a00 	vldr	s15, [r3]
 8002e10:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8002ff4 <DMA2_Stream0_IRQHandler+0x8cc>
 8002e14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e1c:	ee17 3a90 	vmov	r3, s15
 8002e20:	b21b      	sxth	r3, r3
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	4b5f      	ldr	r3, [pc, #380]	; (8002fa4 <DMA2_Stream0_IRQHandler+0x87c>)
 8002e26:	841a      	strh	r2, [r3, #32]

				if(inv_control_mode==manual){
 8002e28:	4b73      	ldr	r3, [pc, #460]	; (8002ff8 <DMA2_Stream0_IRQHandler+0x8d0>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d12b      	bne.n	8002e8a <DMA2_Stream0_IRQHandler+0x762>
					electric_angle+=(speed_setpoint_deg_s*POLE_PAIRS)/10000.0f;
 8002e32:	4b72      	ldr	r3, [pc, #456]	; (8002ffc <DMA2_Stream0_IRQHandler+0x8d4>)
 8002e34:	edd3 7a00 	vldr	s15, [r3]
 8002e38:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e40:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003000 <DMA2_Stream0_IRQHandler+0x8d8>
 8002e44:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e48:	4b54      	ldr	r3, [pc, #336]	; (8002f9c <DMA2_Stream0_IRQHandler+0x874>)
 8002e4a:	edd3 7a00 	vldr	s15, [r3]
 8002e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e52:	4b52      	ldr	r3, [pc, #328]	; (8002f9c <DMA2_Stream0_IRQHandler+0x874>)
 8002e54:	edc3 7a00 	vstr	s15, [r3]
					if(electric_angle>=360.0f){	electric_angle=0.0f;}
 8002e58:	4b50      	ldr	r3, [pc, #320]	; (8002f9c <DMA2_Stream0_IRQHandler+0x874>)
 8002e5a:	edd3 7a00 	vldr	s15, [r3]
 8002e5e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8003004 <DMA2_Stream0_IRQHandler+0x8dc>
 8002e62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6a:	db03      	blt.n	8002e74 <DMA2_Stream0_IRQHandler+0x74c>
 8002e6c:	4b4b      	ldr	r3, [pc, #300]	; (8002f9c <DMA2_Stream0_IRQHandler+0x874>)
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
					if(electric_angle<0.0f){electric_angle=359.0f;}
 8002e74:	4b49      	ldr	r3, [pc, #292]	; (8002f9c <DMA2_Stream0_IRQHandler+0x874>)
 8002e76:	edd3 7a00 	vldr	s15, [r3]
 8002e7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e82:	d502      	bpl.n	8002e8a <DMA2_Stream0_IRQHandler+0x762>
 8002e84:	4b45      	ldr	r3, [pc, #276]	; (8002f9c <DMA2_Stream0_IRQHandler+0x874>)
 8002e86:	4a60      	ldr	r2, [pc, #384]	; (8003008 <DMA2_Stream0_IRQHandler+0x8e0>)
 8002e88:	601a      	str	r2, [r3, #0]
				}
				if(inv_control_mode==foc && modbus_registers_buffer[3] ==1){
 8002e8a:	4b5b      	ldr	r3, [pc, #364]	; (8002ff8 <DMA2_Stream0_IRQHandler+0x8d0>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	f040 8124 	bne.w	80030de <DMA2_Stream0_IRQHandler+0x9b6>
 8002e96:	4b43      	ldr	r3, [pc, #268]	; (8002fa4 <DMA2_Stream0_IRQHandler+0x87c>)
 8002e98:	88db      	ldrh	r3, [r3, #6]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	f040 811f 	bne.w	80030de <DMA2_Stream0_IRQHandler+0x9b6>
					//U_d = PI_control(&id_current_controller_data, -I_d_filtered);
					//U_q = PI_control(&iq_current_controller_data,(torque_setpoint/10.0f)-I_q_filtered);
					inv_park_transform(U_d, U_q, actual_electric_angle, &U_alpha, &U_beta);
 8002ea0:	4b5a      	ldr	r3, [pc, #360]	; (800300c <DMA2_Stream0_IRQHandler+0x8e4>)
 8002ea2:	edd3 7a00 	vldr	s15, [r3]
 8002ea6:	4b5a      	ldr	r3, [pc, #360]	; (8003010 <DMA2_Stream0_IRQHandler+0x8e8>)
 8002ea8:	ed93 7a00 	vldr	s14, [r3]
 8002eac:	4b3a      	ldr	r3, [pc, #232]	; (8002f98 <DMA2_Stream0_IRQHandler+0x870>)
 8002eae:	edd3 6a00 	vldr	s13, [r3]
 8002eb2:	4958      	ldr	r1, [pc, #352]	; (8003014 <DMA2_Stream0_IRQHandler+0x8ec>)
 8002eb4:	4858      	ldr	r0, [pc, #352]	; (8003018 <DMA2_Stream0_IRQHandler+0x8f0>)
 8002eb6:	eeb0 1a66 	vmov.f32	s2, s13
 8002eba:	eef0 0a47 	vmov.f32	s1, s14
 8002ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec2:	f7fe fabf 	bl	8001444 <inv_park_transform>
					duty_cycle=sqrtf(U_alpha*U_alpha+U_beta*U_beta);
 8002ec6:	4b54      	ldr	r3, [pc, #336]	; (8003018 <DMA2_Stream0_IRQHandler+0x8f0>)
 8002ec8:	ed93 7a00 	vldr	s14, [r3]
 8002ecc:	4b52      	ldr	r3, [pc, #328]	; (8003018 <DMA2_Stream0_IRQHandler+0x8f0>)
 8002ece:	edd3 7a00 	vldr	s15, [r3]
 8002ed2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ed6:	4b4f      	ldr	r3, [pc, #316]	; (8003014 <DMA2_Stream0_IRQHandler+0x8ec>)
 8002ed8:	edd3 6a00 	vldr	s13, [r3]
 8002edc:	4b4d      	ldr	r3, [pc, #308]	; (8003014 <DMA2_Stream0_IRQHandler+0x8ec>)
 8002ede:	edd3 7a00 	vldr	s15, [r3]
 8002ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eea:	eeb0 0a67 	vmov.f32	s0, s15
 8002eee:	f008 fb49 	bl	800b584 <sqrtf>
 8002ef2:	eef0 7a40 	vmov.f32	s15, s0
 8002ef6:	4b49      	ldr	r3, [pc, #292]	; (800301c <DMA2_Stream0_IRQHandler+0x8f4>)
 8002ef8:	edc3 7a00 	vstr	s15, [r3]

					float electric_angle_rad=0.0f;
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	603b      	str	r3, [r7, #0]
					if(U_alpha>=0 && U_beta >=0){electric_angle_rad=atan2f(fabs(U_beta),fabs(U_alpha));}
 8002f02:	4b45      	ldr	r3, [pc, #276]	; (8003018 <DMA2_Stream0_IRQHandler+0x8f0>)
 8002f04:	edd3 7a00 	vldr	s15, [r3]
 8002f08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f10:	db19      	blt.n	8002f46 <DMA2_Stream0_IRQHandler+0x81e>
 8002f12:	4b40      	ldr	r3, [pc, #256]	; (8003014 <DMA2_Stream0_IRQHandler+0x8ec>)
 8002f14:	edd3 7a00 	vldr	s15, [r3]
 8002f18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f20:	db11      	blt.n	8002f46 <DMA2_Stream0_IRQHandler+0x81e>
 8002f22:	4b3c      	ldr	r3, [pc, #240]	; (8003014 <DMA2_Stream0_IRQHandler+0x8ec>)
 8002f24:	edd3 7a00 	vldr	s15, [r3]
 8002f28:	eeb0 7ae7 	vabs.f32	s14, s15
 8002f2c:	4b3a      	ldr	r3, [pc, #232]	; (8003018 <DMA2_Stream0_IRQHandler+0x8f0>)
 8002f2e:	edd3 7a00 	vldr	s15, [r3]
 8002f32:	eef0 7ae7 	vabs.f32	s15, s15
 8002f36:	eef0 0a67 	vmov.f32	s1, s15
 8002f3a:	eeb0 0a47 	vmov.f32	s0, s14
 8002f3e:	f008 fb1f 	bl	800b580 <atan2f>
 8002f42:	ed87 0a00 	vstr	s0, [r7]
					if(U_alpha<0 && U_beta >=0){electric_angle_rad=atan2f(fabs(U_alpha),fabs(U_beta)) + (3.141592f/2.0f);}
 8002f46:	4b34      	ldr	r3, [pc, #208]	; (8003018 <DMA2_Stream0_IRQHandler+0x8f0>)
 8002f48:	edd3 7a00 	vldr	s15, [r3]
 8002f4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f54:	d566      	bpl.n	8003024 <DMA2_Stream0_IRQHandler+0x8fc>
 8002f56:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <DMA2_Stream0_IRQHandler+0x8ec>)
 8002f58:	edd3 7a00 	vldr	s15, [r3]
 8002f5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f64:	db5e      	blt.n	8003024 <DMA2_Stream0_IRQHandler+0x8fc>
 8002f66:	4b2c      	ldr	r3, [pc, #176]	; (8003018 <DMA2_Stream0_IRQHandler+0x8f0>)
 8002f68:	edd3 7a00 	vldr	s15, [r3]
 8002f6c:	eeb0 7ae7 	vabs.f32	s14, s15
 8002f70:	4b28      	ldr	r3, [pc, #160]	; (8003014 <DMA2_Stream0_IRQHandler+0x8ec>)
 8002f72:	edd3 7a00 	vldr	s15, [r3]
 8002f76:	eef0 7ae7 	vabs.f32	s15, s15
 8002f7a:	eef0 0a67 	vmov.f32	s1, s15
 8002f7e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f82:	f008 fafd 	bl	800b580 <atan2f>
 8002f86:	eef0 7a40 	vmov.f32	s15, s0
 8002f8a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003020 <DMA2_Stream0_IRQHandler+0x8f8>
 8002f8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f92:	edc7 7a00 	vstr	s15, [r7]
 8002f96:	e045      	b.n	8003024 <DMA2_Stream0_IRQHandler+0x8fc>
 8002f98:	200007e8 	.word	0x200007e8
 8002f9c:	20000768 	.word	0x20000768
 8002fa0:	200007f0 	.word	0x200007f0
 8002fa4:	20000000 	.word	0x20000000
 8002fa8:	200007f4 	.word	0x200007f4
 8002fac:	200007ec 	.word	0x200007ec
 8002fb0:	418e38df 	.word	0x418e38df
 8002fb4:	200007f8 	.word	0x200007f8
 8002fb8:	45480000 	.word	0x45480000
 8002fbc:	45c80000 	.word	0x45c80000
 8002fc0:	c5480000 	.word	0xc5480000
 8002fc4:	20000800 	.word	0x20000800
 8002fc8:	3a03126f 	.word	0x3a03126f
 8002fcc:	200007fc 	.word	0x200007fc
 8002fd0:	20000790 	.word	0x20000790
 8002fd4:	20000794 	.word	0x20000794
 8002fd8:	200007c8 	.word	0x200007c8
 8002fdc:	200007bc 	.word	0x200007bc
 8002fe0:	200007c0 	.word	0x200007c0
 8002fe4:	3be56042 	.word	0x3be56042
 8002fe8:	200007c4 	.word	0x200007c4
 8002fec:	200007cc 	.word	0x200007cc
 8002ff0:	200007d0 	.word	0x200007d0
 8002ff4:	42c80000 	.word	0x42c80000
 8002ff8:	20000760 	.word	0x20000760
 8002ffc:	20000764 	.word	0x20000764
 8003000:	461c4000 	.word	0x461c4000
 8003004:	43b40000 	.word	0x43b40000
 8003008:	43b38000 	.word	0x43b38000
 800300c:	200007d4 	.word	0x200007d4
 8003010:	200007d8 	.word	0x200007d8
 8003014:	200007e0 	.word	0x200007e0
 8003018:	200007dc 	.word	0x200007dc
 800301c:	2000076c 	.word	0x2000076c
 8003020:	3fc90fd8 	.word	0x3fc90fd8
					if(U_alpha<0 && U_beta <0){electric_angle_rad=atan2f(fabs(U_beta),fabs(U_alpha)) + 3.141592f;}
 8003024:	4b43      	ldr	r3, [pc, #268]	; (8003134 <DMA2_Stream0_IRQHandler+0xa0c>)
 8003026:	edd3 7a00 	vldr	s15, [r3]
 800302a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800302e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003032:	d51f      	bpl.n	8003074 <DMA2_Stream0_IRQHandler+0x94c>
 8003034:	4b40      	ldr	r3, [pc, #256]	; (8003138 <DMA2_Stream0_IRQHandler+0xa10>)
 8003036:	edd3 7a00 	vldr	s15, [r3]
 800303a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800303e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003042:	d517      	bpl.n	8003074 <DMA2_Stream0_IRQHandler+0x94c>
 8003044:	4b3c      	ldr	r3, [pc, #240]	; (8003138 <DMA2_Stream0_IRQHandler+0xa10>)
 8003046:	edd3 7a00 	vldr	s15, [r3]
 800304a:	eeb0 7ae7 	vabs.f32	s14, s15
 800304e:	4b39      	ldr	r3, [pc, #228]	; (8003134 <DMA2_Stream0_IRQHandler+0xa0c>)
 8003050:	edd3 7a00 	vldr	s15, [r3]
 8003054:	eef0 7ae7 	vabs.f32	s15, s15
 8003058:	eef0 0a67 	vmov.f32	s1, s15
 800305c:	eeb0 0a47 	vmov.f32	s0, s14
 8003060:	f008 fa8e 	bl	800b580 <atan2f>
 8003064:	eef0 7a40 	vmov.f32	s15, s0
 8003068:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800313c <DMA2_Stream0_IRQHandler+0xa14>
 800306c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003070:	edc7 7a00 	vstr	s15, [r7]
					if(U_alpha>=0 && U_beta <0){electric_angle_rad=atan2f(fabs(U_alpha),fabs(U_beta)) + (3.141592f*1.5f);}
 8003074:	4b2f      	ldr	r3, [pc, #188]	; (8003134 <DMA2_Stream0_IRQHandler+0xa0c>)
 8003076:	edd3 7a00 	vldr	s15, [r3]
 800307a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800307e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003082:	db1f      	blt.n	80030c4 <DMA2_Stream0_IRQHandler+0x99c>
 8003084:	4b2c      	ldr	r3, [pc, #176]	; (8003138 <DMA2_Stream0_IRQHandler+0xa10>)
 8003086:	edd3 7a00 	vldr	s15, [r3]
 800308a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800308e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003092:	d517      	bpl.n	80030c4 <DMA2_Stream0_IRQHandler+0x99c>
 8003094:	4b27      	ldr	r3, [pc, #156]	; (8003134 <DMA2_Stream0_IRQHandler+0xa0c>)
 8003096:	edd3 7a00 	vldr	s15, [r3]
 800309a:	eeb0 7ae7 	vabs.f32	s14, s15
 800309e:	4b26      	ldr	r3, [pc, #152]	; (8003138 <DMA2_Stream0_IRQHandler+0xa10>)
 80030a0:	edd3 7a00 	vldr	s15, [r3]
 80030a4:	eef0 7ae7 	vabs.f32	s15, s15
 80030a8:	eef0 0a67 	vmov.f32	s1, s15
 80030ac:	eeb0 0a47 	vmov.f32	s0, s14
 80030b0:	f008 fa66 	bl	800b580 <atan2f>
 80030b4:	eef0 7a40 	vmov.f32	s15, s0
 80030b8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003140 <DMA2_Stream0_IRQHandler+0xa18>
 80030bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030c0:	edc7 7a00 	vstr	s15, [r7]

					electric_angle=(electric_angle_rad/3.141592f)*180.0f;
 80030c4:	ed97 7a00 	vldr	s14, [r7]
 80030c8:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800313c <DMA2_Stream0_IRQHandler+0xa14>
 80030cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030d0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003144 <DMA2_Stream0_IRQHandler+0xa1c>
 80030d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030d8:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <DMA2_Stream0_IRQHandler+0xa20>)
 80030da:	edc3 7a00 	vstr	s15, [r3]
					//electric_angle+=(speed_setpoint_deg_s*POLE_PAIRS)/16000.0f;
					//if(electric_angle>=360.0f){	electric_angle=0.0f;}
					//if(electric_angle<0.0f){electric_angle=359.0f;}
				}

				if(inv_control_mode!=stop){
 80030de:	4b1b      	ldr	r3, [pc, #108]	; (800314c <DMA2_Stream0_IRQHandler+0xa24>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d014      	beq.n	8003112 <DMA2_Stream0_IRQHandler+0x9ea>
					output_svpwm((uint16_t)electric_angle, (uint16_t)duty_cycle);
 80030e8:	4b17      	ldr	r3, [pc, #92]	; (8003148 <DMA2_Stream0_IRQHandler+0xa20>)
 80030ea:	edd3 7a00 	vldr	s15, [r3]
 80030ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030f2:	ee17 3a90 	vmov	r3, s15
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	4a15      	ldr	r2, [pc, #84]	; (8003150 <DMA2_Stream0_IRQHandler+0xa28>)
 80030fa:	edd2 7a00 	vldr	s15, [r2]
 80030fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003102:	ee17 2a90 	vmov	r2, s15
 8003106:	b292      	uxth	r2, r2
 8003108:	4611      	mov	r1, r2
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe fa28 	bl	8001560 <output_svpwm>
 8003110:	e008      	b.n	8003124 <DMA2_Stream0_IRQHandler+0x9fc>
					//output_sine_pwm((uint16_t)electric_angle, (uint16_t)duty_cycle);
				}
				else{TIM1->CCR1=0;TIM1->CCR2=0;TIM1->CCR3=0;}//if inverter in stop mode stop producing PWM signal while timer1 is still active to keep this interrupt alive for measurements on switched off inverter
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <DMA2_Stream0_IRQHandler+0xa2c>)
 8003114:	2200      	movs	r2, #0
 8003116:	635a      	str	r2, [r3, #52]	; 0x34
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <DMA2_Stream0_IRQHandler+0xa2c>)
 800311a:	2200      	movs	r2, #0
 800311c:	639a      	str	r2, [r3, #56]	; 0x38
 800311e:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <DMA2_Stream0_IRQHandler+0xa2c>)
 8003120:	2200      	movs	r2, #0
 8003122:	63da      	str	r2, [r3, #60]	; 0x3c

			}
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003124:	480c      	ldr	r0, [pc, #48]	; (8003158 <DMA2_Stream0_IRQHandler+0xa30>)
 8003126:	f001 fd67 	bl	8004bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	200007dc 	.word	0x200007dc
 8003138:	200007e0 	.word	0x200007e0
 800313c:	40490fd8 	.word	0x40490fd8
 8003140:	4096cbe2 	.word	0x4096cbe2
 8003144:	43340000 	.word	0x43340000
 8003148:	20000768 	.word	0x20000768
 800314c:	20000760 	.word	0x20000760
 8003150:	2000076c 	.word	0x2000076c
 8003154:	40010000 	.word	0x40010000
 8003158:	200004d4 	.word	0x200004d4

0800315c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003160:	4802      	ldr	r0, [pc, #8]	; (800316c <DMA2_Stream2_IRQHandler+0x10>)
 8003162:	f001 fd49 	bl	8004bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000694 	.word	0x20000694

08003170 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003174:	4802      	ldr	r0, [pc, #8]	; (8003180 <DMA2_Stream7_IRQHandler+0x10>)
 8003176:	f001 fd3f 	bl	8004bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	200006f4 	.word	0x200006f4

08003184 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <SystemInit+0x20>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318e:	4a05      	ldr	r2, [pc, #20]	; (80031a4 <SystemInit+0x20>)
 8003190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003198:	bf00      	nop
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80031a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031ac:	480d      	ldr	r0, [pc, #52]	; (80031e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031ae:	490e      	ldr	r1, [pc, #56]	; (80031e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031b0:	4a0e      	ldr	r2, [pc, #56]	; (80031ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b4:	e002      	b.n	80031bc <LoopCopyDataInit>

080031b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ba:	3304      	adds	r3, #4

080031bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031c0:	d3f9      	bcc.n	80031b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031c2:	4a0b      	ldr	r2, [pc, #44]	; (80031f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031c4:	4c0b      	ldr	r4, [pc, #44]	; (80031f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031c8:	e001      	b.n	80031ce <LoopFillZerobss>

080031ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031cc:	3204      	adds	r2, #4

080031ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031d0:	d3fb      	bcc.n	80031ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031d2:	f7ff ffd7 	bl	8003184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031d6:	f008 f81f 	bl	800b218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031da:	f7fe fba5 	bl	8001928 <main>
  bx  lr    
 80031de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80031e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031e8:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80031ec:	0800cd24 	.word	0x0800cd24
  ldr r2, =_sbss
 80031f0:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80031f4:	200052b8 	.word	0x200052b8

080031f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031f8:	e7fe      	b.n	80031f8 <ADC_IRQHandler>
	...

080031fc <mbus_open>:
/*
 * function mbus_open()
 * open new modbus context for new port
 * return: MODBUS_ERROR - if can't open context
 */
mbus_t mbus_open(Modbus_Conf_t *pconf) {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  mbus_t context;
  for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++) {
 8003204:	2300      	movs	r3, #0
 8003206:	73fb      	strb	r3, [r7, #15]
 8003208:	e010      	b.n	800322c <mbus_open+0x30>
    if (g_mbusContext[context].open == 0) {
 800320a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800320e:	4a22      	ldr	r2, [pc, #136]	; (8003298 <mbus_open+0x9c>)
 8003210:	2194      	movs	r1, #148	; 0x94
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	3328      	adds	r3, #40	; 0x28
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <mbus_open+0x3a>
  for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++) {
 8003220:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	3301      	adds	r3, #1
 8003228:	b2db      	uxtb	r3, r3
 800322a:	73fb      	strb	r3, [r7, #15]
 800322c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003230:	2b00      	cmp	r3, #0
 8003232:	ddea      	ble.n	800320a <mbus_open+0xe>
 8003234:	e000      	b.n	8003238 <mbus_open+0x3c>
      break;
 8003236:	bf00      	nop
    }
  }
  if (context == STMODBUS_COUNT_CONTEXT)
 8003238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d102      	bne.n	8003246 <mbus_open+0x4a>
    return (mbus_t)MBUS_ERROR;
 8003240:	f04f 33ff 	mov.w	r3, #4294967295
 8003244:	e023      	b.n	800328e <mbus_open+0x92>
  // Clear context
  memset(&g_mbusContext[context], 0, sizeof(_stmodbus_context_t));
 8003246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324a:	2294      	movs	r2, #148	; 0x94
 800324c:	fb02 f303 	mul.w	r3, r2, r3
 8003250:	4a11      	ldr	r2, [pc, #68]	; (8003298 <mbus_open+0x9c>)
 8003252:	4413      	add	r3, r2
 8003254:	2294      	movs	r2, #148	; 0x94
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f008 f811 	bl	800b280 <memset>
  // Copy config to context
  memcpy((void *)&g_mbusContext[context].conf, (void *)pconf,
 800325e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003262:	2294      	movs	r2, #148	; 0x94
 8003264:	fb02 f303 	mul.w	r3, r2, r3
 8003268:	4a0b      	ldr	r2, [pc, #44]	; (8003298 <mbus_open+0x9c>)
 800326a:	4413      	add	r3, r2
 800326c:	2228      	movs	r2, #40	; 0x28
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4618      	mov	r0, r3
 8003272:	f007 fff7 	bl	800b264 <memcpy>
         sizeof(Modbus_Conf_t));

  g_mbusContext[context].open = 1;
 8003276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327a:	4a07      	ldr	r2, [pc, #28]	; (8003298 <mbus_open+0x9c>)
 800327c:	2194      	movs	r1, #148	; 0x94
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	4413      	add	r3, r2
 8003284:	3328      	adds	r3, #40	; 0x28
 8003286:	2201      	movs	r2, #1
 8003288:	701a      	strb	r2, [r3, #0]
  return context;
 800328a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20000804 	.word	0x20000804

0800329c <mbus_flush>:

mbus_status_t mbus_flush(const mbus_t context) {
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]
  g_mbusContext[context].crc16 = 0xFFFF;
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	4a0d      	ldr	r2, [pc, #52]	; (80032e0 <mbus_flush+0x44>)
 80032ac:	2194      	movs	r1, #148	; 0x94
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	332a      	adds	r3, #42	; 0x2a
 80032b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032ba:	801a      	strh	r2, [r3, #0]
  g_mbusContext[context].state = MBUS_STATE_IDLE;
 80032bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c0:	4a07      	ldr	r2, [pc, #28]	; (80032e0 <mbus_flush+0x44>)
 80032c2:	2194      	movs	r1, #148	; 0x94
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	3329      	adds	r3, #41	; 0x29
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
  return MBUS_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000804 	.word	0x20000804

080032e4 <mbus_response>:

mbus_status_t mbus_response(mbus_t mb_context, Modbus_ResponseType response) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	460a      	mov	r2, r1
 80032ee:	71fb      	strb	r3, [r7, #7]
 80032f0:	4613      	mov	r3, r2
 80032f2:	71bb      	strb	r3, [r7, #6]

  if (response != MBUS_RESPONSE_OK) {
 80032f4:	79bb      	ldrb	r3, [r7, #6]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <mbus_response+0x28>
    return mbus_send_error(mb_context, response);
 80032fa:	79ba      	ldrb	r2, [r7, #6]
 80032fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003300:	4611      	mov	r1, r2
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fbba 	bl	8003a7c <mbus_send_error>
 8003308:	4603      	mov	r3, r0
 800330a:	e001      	b.n	8003310 <mbus_response+0x2c>
  } else {
  }
  return MBUS_ERROR;
 800330c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <mbus_poll_response>:
uint16_t mbus_error(Modbus_ResponseType error) {
    g_userError = error;
    return 0;
}

inline mbus_status_t mbus_poll_response(mbus_t mb_context) {
 8003318:	b580      	push	{r7, lr}
 800331a:	b08c      	sub	sp, #48	; 0x30
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	71fb      	strb	r3, [r7, #7]
  stmbCallBackFunc func = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
  _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	2294      	movs	r2, #148	; 0x94
 800332c:	fb02 f303 	mul.w	r3, r2, r3
 8003330:	4a93      	ldr	r2, [pc, #588]	; (8003580 <mbus_poll_response+0x268>)
 8003332:	4413      	add	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
  int read = 1, la;
 8003336:	2301      	movs	r3, #1
 8003338:	60fb      	str	r3, [r7, #12]
  uint16_t d;

  if (ctx->header.func == 0x04) {
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003340:	2b04      	cmp	r3, #4
 8003342:	d101      	bne.n	8003348 <mbus_poll_response+0x30>
    la = 10;
 8003344:	230a      	movs	r3, #10
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
  }

#if STMODBUS_COUNT_FUNC > 0
  for (int i = 0; i < STMODBUS_COUNT_FUNC; i++) {
 8003348:	2300      	movs	r3, #0
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
 800334c:	e014      	b.n	8003378 <mbus_poll_response+0x60>
    if ((ctx->func[i].code == ctx->response.func)) {
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003352:	3206      	adds	r2, #6
 8003354:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800335e:	429a      	cmp	r2, r3
 8003360:	d107      	bne.n	8003372 <mbus_poll_response+0x5a>
      func = ctx->func[i].func;
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	3306      	adds	r3, #6
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4413      	add	r3, r2
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8003370:	e005      	b.n	800337e <mbus_poll_response+0x66>
  for (int i = 0; i < STMODBUS_COUNT_FUNC; i++) {
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	3301      	adds	r3, #1
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	2b09      	cmp	r3, #9
 800337c:	dde7      	ble.n	800334e <mbus_poll_response+0x36>
    }
  }
#endif
  switch (ctx->header.func) {
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003384:	2b0f      	cmp	r3, #15
 8003386:	d006      	beq.n	8003396 <mbus_poll_response+0x7e>
 8003388:	2b0f      	cmp	r3, #15
 800338a:	dc52      	bgt.n	8003432 <mbus_poll_response+0x11a>
 800338c:	2b01      	cmp	r3, #1
 800338e:	d002      	beq.n	8003396 <mbus_poll_response+0x7e>
 8003390:	2b02      	cmp	r3, #2
 8003392:	d027      	beq.n	80033e4 <mbus_poll_response+0xcc>
    if ((ctx->header.addr + ctx->header.num) > ctx->conf.discrete) {
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
    }
    break;
  default:
    break;
 8003394:	e04d      	b.n	8003432 <mbus_poll_response+0x11a>
    if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0)) {
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <mbus_poll_response+0x94>
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80033a6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80033aa:	d907      	bls.n	80033bc <mbus_poll_response+0xa4>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 80033ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b0:	2103      	movs	r1, #3
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ff96 	bl	80032e4 <mbus_response>
 80033b8:	4603      	mov	r3, r0
 80033ba:	e173      	b.n	80036a4 <mbus_poll_response+0x38c>
    if ((ctx->header.addr + ctx->header.num) >= ctx->conf.coils) {
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80033c2:	461a      	mov	r2, r3
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80033ca:	4413      	add	r3, r2
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	8852      	ldrh	r2, [r2, #2]
 80033d0:	4293      	cmp	r3, r2
 80033d2:	db30      	blt.n	8003436 <mbus_poll_response+0x11e>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 80033d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d8:	2102      	movs	r1, #2
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff ff82 	bl	80032e4 <mbus_response>
 80033e0:	4603      	mov	r3, r0
 80033e2:	e15f      	b.n	80036a4 <mbus_poll_response+0x38c>
    if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0)) {
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <mbus_poll_response+0xe2>
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80033f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80033f8:	d907      	bls.n	800340a <mbus_poll_response+0xf2>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	2103      	movs	r1, #3
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ff6f 	bl	80032e4 <mbus_response>
 8003406:	4603      	mov	r3, r0
 8003408:	e14c      	b.n	80036a4 <mbus_poll_response+0x38c>
    if ((ctx->header.addr + ctx->header.num) > ctx->conf.discrete) {
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003410:	461a      	mov	r2, r3
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003418:	4413      	add	r3, r2
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	8892      	ldrh	r2, [r2, #4]
 800341e:	4293      	cmp	r3, r2
 8003420:	dd0b      	ble.n	800343a <mbus_poll_response+0x122>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	2102      	movs	r1, #2
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff5b 	bl	80032e4 <mbus_response>
 800342e:	4603      	mov	r3, r0
 8003430:	e138      	b.n	80036a4 <mbus_poll_response+0x38c>
    break;
 8003432:	bf00      	nop
 8003434:	e002      	b.n	800343c <mbus_poll_response+0x124>
    break;
 8003436:	bf00      	nop
 8003438:	e000      	b.n	800343c <mbus_poll_response+0x124>
    break;
 800343a:	bf00      	nop
  }

  if (func != 0) {
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d006      	beq.n	8003450 <mbus_poll_response+0x138>
    return func(mb_context);
 8003442:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	4610      	mov	r0, r2
 800344a:	4798      	blx	r3
 800344c:	4603      	mov	r3, r0
 800344e:	e129      	b.n	80036a4 <mbus_poll_response+0x38c>
  }

  la = mbus_proto_address((Modbus_ConnectFuncType)ctx->header.func, (int*)&read);
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003456:	f107 020c 	add.w	r2, r7, #12
 800345a:	4611      	mov	r1, r2
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fb9b 	bl	8003b98 <mbus_proto_address>
 8003462:	62b8      	str	r0, [r7, #40]	; 0x28
  if (la > 0) {
 8003464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003466:	2b00      	cmp	r3, #0
 8003468:	dd06      	ble.n	8003478 <mbus_poll_response+0x160>
    la += ctx->header.addr;
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003470:	461a      	mov	r2, r3
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003474:	4413      	add	r3, r2
 8003476:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  if (la < 50001) {
 8003478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800347e:	4293      	cmp	r3, r2
 8003480:	f300 8109 	bgt.w	8003696 <mbus_poll_response+0x37e>
    ctx->conf.sendbuf[0] = ctx->header.devaddr;
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800348e:	701a      	strb	r2, [r3, #0]
    ctx->conf.sendbuf[1] = ctx->header.func;
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	3301      	adds	r3, #1
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 800349c:	701a      	strb	r2, [r3, #0]
    ctx->conf.sendbuf[2] = ctx->header.num * 2;
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	3302      	adds	r3, #2
 80034ac:	0052      	lsls	r2, r2, #1
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	701a      	strb	r2, [r3, #0]
    if (read && ctx->conf.read) {
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d04d      	beq.n	8003554 <mbus_poll_response+0x23c>
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d049      	beq.n	8003554 <mbus_poll_response+0x23c>
      g_userError = MBUS_RESPONSE_OK;
 80034c0:	4b30      	ldr	r3, [pc, #192]	; (8003584 <mbus_poll_response+0x26c>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ctx->header.num; i++) {
 80034c6:	2300      	movs	r3, #0
 80034c8:	623b      	str	r3, [r7, #32]
 80034ca:	e01f      	b.n	800350c <mbus_poll_response+0x1f4>
        
        d = ctx->conf.read(la + i);
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034d2:	6a3a      	ldr	r2, [r7, #32]
 80034d4:	440a      	add	r2, r1
 80034d6:	4610      	mov	r0, r2
 80034d8:	4798      	blx	r3
 80034da:	4603      	mov	r3, r0
 80034dc:	82fb      	strh	r3, [r7, #22]
        ctx->conf.sendbuf[3 + (i << 1)] = d >> 8;
 80034de:	8afb      	ldrh	r3, [r7, #22]
 80034e0:	0a1b      	lsrs	r3, r3, #8
 80034e2:	b299      	uxth	r1, r3
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	6a3a      	ldr	r2, [r7, #32]
 80034ea:	0052      	lsls	r2, r2, #1
 80034ec:	3203      	adds	r2, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	b2ca      	uxtb	r2, r1
 80034f2:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[3 + (i << 1) + 1] = d & 0xFF;
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	699a      	ldr	r2, [r3, #24]
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	3304      	adds	r3, #4
 80034fe:	4413      	add	r3, r2
 8003500:	8afa      	ldrh	r2, [r7, #22]
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ctx->header.num; i++) {
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	3301      	adds	r3, #1
 800350a:	623b      	str	r3, [r7, #32]
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003512:	461a      	mov	r2, r3
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	4293      	cmp	r3, r2
 8003518:	dbd8      	blt.n	80034cc <mbus_poll_response+0x1b4>
      }
      if (g_userError == MBUS_RESPONSE_OK) {
 800351a:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <mbus_poll_response+0x26c>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10e      	bne.n	8003540 <mbus_poll_response+0x228>
          return mbus_send_data(mb_context, 3 + ctx->conf.sendbuf[2]);
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	3302      	adds	r3, #2
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	b29b      	uxth	r3, r3
 800352c:	3303      	adds	r3, #3
 800352e:	b29a      	uxth	r2, r3
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	4611      	mov	r1, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f000 faca 	bl	8003ad0 <mbus_send_data>
 800353c:	4603      	mov	r3, r0
 800353e:	e0b1      	b.n	80036a4 <mbus_poll_response+0x38c>
      }else {
          return mbus_response(mb_context, g_userError);
 8003540:	4b10      	ldr	r3, [pc, #64]	; (8003584 <mbus_poll_response+0x26c>)
 8003542:	781a      	ldrb	r2, [r3, #0]
 8003544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003548:	4611      	mov	r1, r2
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff feca 	bl	80032e4 <mbus_response>
 8003550:	4603      	mov	r3, r0
 8003552:	e0a7      	b.n	80036a4 <mbus_poll_response+0x38c>
      }
    } else if (ctx->conf.write) {
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 809c 	beq.w	8003696 <mbus_poll_response+0x37e>
      uint16_t *value;
      ctx->conf.sendbuf[2] = 0;
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	3302      	adds	r3, #2
 8003564:	2200      	movs	r2, #0
 8003566:	701a      	strb	r2, [r3, #0]
      switch (ctx->header.func) {
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800356e:	2b06      	cmp	r3, #6
 8003570:	dc02      	bgt.n	8003578 <mbus_poll_response+0x260>
 8003572:	2b05      	cmp	r3, #5
 8003574:	da08      	bge.n	8003588 <mbus_poll_response+0x270>
 8003576:	e08e      	b.n	8003696 <mbus_poll_response+0x37e>
 8003578:	2b10      	cmp	r3, #16
 800357a:	d037      	beq.n	80035ec <mbus_poll_response+0x2d4>
 800357c:	e08b      	b.n	8003696 <mbus_poll_response+0x37e>
 800357e:	bf00      	nop
 8003580:	20000804 	.word	0x20000804
 8003584:	20000898 	.word	0x20000898
      case MBUS_FUNC_WRITE_REG:
      case MBUS_FUNC_WRITE_COIL:
        // in both these cases, we should return the same packet that we
        // received. in both cases, the packes have 6 bytes of data + 2 CRC
        // bytes = 8 bytes
        value = (uint16_t *)ctx->conf.recvbuf;
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	613b      	str	r3, [r7, #16]
        ctx->conf.write(la, *value);
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	8812      	ldrh	r2, [r2, #0]
 8003598:	4611      	mov	r1, r2
 800359a:	4798      	blx	r3
        ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80035a2:	0a1b      	lsrs	r3, r3, #8
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	3302      	adds	r3, #2
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	3303      	adds	r3, #3
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[4] = ctx->conf.recvbuf[1];
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	6a1a      	ldr	r2, [r3, #32]
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	3304      	adds	r3, #4
 80035ca:	7852      	ldrb	r2, [r2, #1]
 80035cc:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[5] = ctx->conf.recvbuf[0];
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	6a1a      	ldr	r2, [r3, #32]
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	3305      	adds	r3, #5
 80035d8:	7812      	ldrb	r2, [r2, #0]
 80035da:	701a      	strb	r2, [r3, #0]
        return mbus_send_data(mb_context, 6);
 80035dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e0:	2106      	movs	r1, #6
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fa74 	bl	8003ad0 <mbus_send_data>
 80035e8:	4603      	mov	r3, r0
 80035ea:	e05b      	b.n	80036a4 <mbus_poll_response+0x38c>

      case MBUS_FUNC_WRITE_REGS:
    	  for (int i = 0; i < ctx->header.num; i++) {
 80035ec:	2300      	movs	r3, #0
 80035ee:	61fb      	str	r3, [r7, #28]
 80035f0:	e01e      	b.n	8003630 <mbus_poll_response+0x318>
    		  uint16_t regvalue = ((uint16_t)ctx->conf.recvbuf[i*2]<<8)|((uint16_t)ctx->conf.recvbuf[i*2+1]);
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	0052      	lsls	r2, r2, #1
 80035fa:	4413      	add	r3, r2
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	b21a      	sxth	r2, r3
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	6a19      	ldr	r1, [r3, #32]
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	3301      	adds	r3, #1
 800360c:	440b      	add	r3, r1
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	b21b      	sxth	r3, r3
 8003612:	4313      	orrs	r3, r2
 8003614:	b21b      	sxth	r3, r3
 8003616:	82bb      	strh	r3, [r7, #20]
    		  ctx->conf.write(la + i, regvalue);
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800361e:	69fa      	ldr	r2, [r7, #28]
 8003620:	440a      	add	r2, r1
 8003622:	4610      	mov	r0, r2
 8003624:	8aba      	ldrh	r2, [r7, #20]
 8003626:	4611      	mov	r1, r2
 8003628:	4798      	blx	r3
    	  for (int i = 0; i < ctx->header.num; i++) {
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	3301      	adds	r3, #1
 800362e:	61fb      	str	r3, [r7, #28]
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003636:	461a      	mov	r2, r3
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	4293      	cmp	r3, r2
 800363c:	dbd9      	blt.n	80035f2 <mbus_poll_response+0x2da>
    	  }
    	  ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003644:	0a1b      	lsrs	r3, r3, #8
 8003646:	b29a      	uxth	r2, r3
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	3302      	adds	r3, #2
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]
    	  ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	3303      	adds	r3, #3
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]
    	  ctx->conf.sendbuf[4] = ctx->header.num >> 8;
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003668:	0a1b      	lsrs	r3, r3, #8
 800366a:	b29a      	uxth	r2, r3
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	3304      	adds	r3, #4
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]
    	  ctx->conf.sendbuf[5] = ctx->header.num & 0xFF;
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	3305      	adds	r3, #5
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]
    	  return mbus_send_data(mb_context, 6);
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	2106      	movs	r1, #6
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fa1f 	bl	8003ad0 <mbus_send_data>
 8003692:	4603      	mov	r3, r0
 8003694:	e006      	b.n	80036a4 <mbus_poll_response+0x38c>
      } // end of switch
    }
  }
  return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_FUNCTION);
 8003696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369a:	2101      	movs	r1, #1
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff fe21 	bl	80032e4 <mbus_response>
 80036a2:	4603      	mov	r3, r0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3730      	adds	r7, #48	; 0x30
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <mbus_poll>:
/*
 * function mbus_close()
 * close modbus context
 * return: none
 */
mbus_status_t mbus_poll(mbus_t mb_context, uint8_t byte) {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	460a      	mov	r2, r1
 80036b6:	71fb      	strb	r3, [r7, #7]
 80036b8:	4613      	mov	r3, r2
 80036ba:	71bb      	strb	r3, [r7, #6]
  // State machine
  _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 80036bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c0:	2294      	movs	r2, #148	; 0x94
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	4abf      	ldr	r2, [pc, #764]	; (80039c4 <mbus_poll+0x318>)
 80036c8:	4413      	add	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]

  if (mbus_tickcount() - ctx->timer > 4) {
 80036cc:	f000 faee 	bl	8003cac <mbus_tickcount>
 80036d0:	4602      	mov	r2, r0
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d904      	bls.n	80036e6 <mbus_poll+0x3a>
    mbus_flush(mb_context);
 80036dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff fddb 	bl	800329c <mbus_flush>
  }
  ctx->timer = mbus_tickcount();
 80036e6:	f000 fae1 	bl	8003cac <mbus_tickcount>
 80036ea:	4602      	mov	r2, r0
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	62da      	str	r2, [r3, #44]	; 0x2c

  switch (ctx->state) {
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80036f6:	2b0e      	cmp	r3, #14
 80036f8:	f200 816e 	bhi.w	80039d8 <mbus_poll+0x32c>
 80036fc:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <mbus_poll+0x58>)
 80036fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003702:	bf00      	nop
 8003704:	08003741 	.word	0x08003741
 8003708:	080039d9 	.word	0x080039d9
 800370c:	0800375d 	.word	0x0800375d
 8003710:	08003843 	.word	0x08003843
 8003714:	0800382b 	.word	0x0800382b
 8003718:	08003961 	.word	0x08003961
 800371c:	08003949 	.word	0x08003949
 8003720:	080038a7 	.word	0x080038a7
 8003724:	0800387f 	.word	0x0800387f
 8003728:	080038f1 	.word	0x080038f1
 800372c:	0800390b 	.word	0x0800390b
 8003730:	080039b9 	.word	0x080039b9
 8003734:	080039c9 	.word	0x080039c9
 8003738:	080039d9 	.word	0x080039d9
 800373c:	080039d3 	.word	0x080039d3
  case MBUS_STATE_IDLE:
    mbus_flush(mb_context);
 8003740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff fda9 	bl	800329c <mbus_flush>
    ctx->state = MBUS_STATE_FUNCTION;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2202      	movs	r2, #2
 800374e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.devaddr = byte;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	79ba      	ldrb	r2, [r7, #6]
 8003756:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    break;
 800375a:	e146      	b.n	80039ea <mbus_poll+0x33e>
  case MBUS_STATE_FUNCTION:
    ctx->header.func = byte;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	79ba      	ldrb	r2, [r7, #6]
 8003760:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    switch (byte) {
 8003764:	79bb      	ldrb	r3, [r7, #6]
 8003766:	3b01      	subs	r3, #1
 8003768:	2b0f      	cmp	r3, #15
 800376a:	d857      	bhi.n	800381c <mbus_poll+0x170>
 800376c:	a201      	add	r2, pc, #4	; (adr r2, 8003774 <mbus_poll+0xc8>)
 800376e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003772:	bf00      	nop
 8003774:	080037e9 	.word	0x080037e9
 8003778:	0800381d 	.word	0x0800381d
 800377c:	080037e9 	.word	0x080037e9
 8003780:	080037e9 	.word	0x080037e9
 8003784:	08003803 	.word	0x08003803
 8003788:	080037b5 	.word	0x080037b5
 800378c:	0800381d 	.word	0x0800381d
 8003790:	0800381d 	.word	0x0800381d
 8003794:	0800381d 	.word	0x0800381d
 8003798:	0800381d 	.word	0x0800381d
 800379c:	0800381d 	.word	0x0800381d
 80037a0:	0800381d 	.word	0x0800381d
 80037a4:	0800381d 	.word	0x0800381d
 80037a8:	0800381d 	.word	0x0800381d
 80037ac:	080037cf 	.word	0x080037cf
 80037b0:	080037cf 	.word	0x080037cf
    case MBUS_FUNC_WRITE_REG:
      ctx->header.rnum = 1;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->header.num = 1;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2201      	movs	r2, #1
 80037c0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      ctx->state = MBUS_STATE_REGADDR_HI;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2204      	movs	r2, #4
 80037c8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      break;
 80037cc:	e02c      	b.n	8003828 <mbus_poll+0x17c>
    case MBUS_FUNC_WRITE_REGS:
    case MBUS_FUNC_WRITE_COILS:
      ctx->header.rnum = 1;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->header.num = 0;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      ctx->state = MBUS_STATE_REGADDR_HI;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2204      	movs	r2, #4
 80037e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      break;
 80037e6:	e01f      	b.n	8003828 <mbus_poll+0x17c>
    case MBUS_FUNC_READ_INPUT_REGS:
    case MBUS_FUNC_READ_COILS:
    case MBUS_FUNC_READ_REGS:
      ctx->state = MBUS_STATE_REGADDR_HI;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2204      	movs	r2, #4
 80037ec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      ctx->header.rnum = 0;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->header.num = 0;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      break;
 8003800:	e012      	b.n	8003828 <mbus_poll+0x17c>
    case MBUS_FUNC_WRITE_COIL:
      ctx->header.rnum = 1;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->header.num = 1;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      ctx->state = MBUS_STATE_REGADDR_HI;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2204      	movs	r2, #4
 8003816:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      break;
 800381a:	e005      	b.n	8003828 <mbus_poll+0x17c>
    default:
      // ctx->state = MBUS_STATE_IDLE;
      mbus_flush(mb_context);
 800381c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff fd3b 	bl	800329c <mbus_flush>
      break;
 8003826:	bf00      	nop
    }
    break;
 8003828:	e0df      	b.n	80039ea <mbus_poll+0x33e>
  case MBUS_STATE_REGADDR_HI:
    ctx->state = MBUS_STATE_REGADDR_LO;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2203      	movs	r2, #3
 800382e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.addr = byte << 8;
 8003832:	79bb      	ldrb	r3, [r7, #6]
 8003834:	b29b      	uxth	r3, r3
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    break;
 8003840:	e0d3      	b.n	80039ea <mbus_poll+0x33e>
  case MBUS_STATE_REGADDR_LO:
    ctx->header.addr |= byte;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8003848:	79bb      	ldrb	r3, [r7, #6]
 800384a:	b29b      	uxth	r3, r3
 800384c:	4313      	orrs	r3, r2
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    if (ctx->header.num == 1 && ctx->header.rnum == 1) {
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800385c:	2b01      	cmp	r3, #1
 800385e:	d109      	bne.n	8003874 <mbus_poll+0x1c8>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003866:	2b01      	cmp	r3, #1
 8003868:	d104      	bne.n	8003874 <mbus_poll+0x1c8>
      ctx->state = MBUS_STATE_DATA_HI;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2208      	movs	r2, #8
 800386e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    } else {
      ctx->state = MBUS_STATE_REGNUM_HI;
    }
    break;
 8003872:	e0ba      	b.n	80039ea <mbus_poll+0x33e>
      ctx->state = MBUS_STATE_REGNUM_HI;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2206      	movs	r2, #6
 8003878:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 800387c:	e0b5      	b.n	80039ea <mbus_poll+0x33e>
  case MBUS_STATE_DATA_HI:
    ctx->state = MBUS_STATE_DATA_LO;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2207      	movs	r2, #7
 8003882:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum) + 1] = byte;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a1a      	ldr	r2, [r3, #32]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003890:	4619      	mov	r1, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003898:	1acb      	subs	r3, r1, r3
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	3301      	adds	r3, #1
 800389e:	4413      	add	r3, r2
 80038a0:	79ba      	ldrb	r2, [r7, #6]
 80038a2:	701a      	strb	r2, [r3, #0]
    break;
 80038a4:	e0a1      	b.n	80039ea <mbus_poll+0x33e>
  case MBUS_STATE_DATA_LO:
    ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum)] = byte;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80038b0:	4611      	mov	r1, r2
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	f8b2 2086 	ldrh.w	r2, [r2, #134]	; 0x86
 80038b8:	1a8a      	subs	r2, r1, r2
 80038ba:	0052      	lsls	r2, r2, #1
 80038bc:	4413      	add	r3, r2
 80038be:	79ba      	ldrb	r2, [r7, #6]
 80038c0:	701a      	strb	r2, [r3, #0]
    ctx->header.rnum--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    if (ctx->header.rnum == 0) {
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d104      	bne.n	80038e6 <mbus_poll+0x23a>
      ctx->state = MBUS_STATE_CRC_LO;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	220b      	movs	r2, #11
 80038e0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    } else {
      ctx->state = MBUS_STATE_DATA_HI;
    }
    break;
 80038e4:	e081      	b.n	80039ea <mbus_poll+0x33e>
      ctx->state = MBUS_STATE_DATA_HI;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2208      	movs	r2, #8
 80038ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 80038ee:	e07c      	b.n	80039ea <mbus_poll+0x33e>
  case MBUS_STATE_DATA_SIZE:
    ctx->state = MBUS_STATE_DATA;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	220a      	movs	r2, #10
 80038f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.size = byte;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	79ba      	ldrb	r2, [r7, #6]
 80038fc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    ctx->header.rsize = byte;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	79ba      	ldrb	r2, [r7, #6]
 8003904:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    break;
 8003908:	e06f      	b.n	80039ea <mbus_poll+0x33e>
  case MBUS_STATE_DATA:
    ctx->conf.recvbuf[ctx->header.size - ctx->header.rsize] = byte;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	f892 2088 	ldrb.w	r2, [r2, #136]	; 0x88
 8003914:	4611      	mov	r1, r2
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	f892 2089 	ldrb.w	r2, [r2, #137]	; 0x89
 800391c:	1a8a      	subs	r2, r1, r2
 800391e:	4413      	add	r3, r2
 8003920:	79ba      	ldrb	r2, [r7, #6]
 8003922:	701a      	strb	r2, [r3, #0]
    ctx->header.rsize--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800392a:	3b01      	subs	r3, #1
 800392c:	b2da      	uxtb	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    if (ctx->header.rsize == 0) {
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800393a:	2b00      	cmp	r3, #0
 800393c:	d152      	bne.n	80039e4 <mbus_poll+0x338>
      ctx->state = MBUS_STATE_CRC_LO;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	220b      	movs	r2, #11
 8003942:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }
    break;
 8003946:	e04d      	b.n	80039e4 <mbus_poll+0x338>
  case MBUS_STATE_REGNUM_HI:
    ctx->state = MBUS_STATE_REGNUM_LO;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2205      	movs	r2, #5
 800394c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.num = byte << 8;
 8003950:	79bb      	ldrb	r3, [r7, #6]
 8003952:	b29b      	uxth	r3, r3
 8003954:	021b      	lsls	r3, r3, #8
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    break;
 800395e:	e044      	b.n	80039ea <mbus_poll+0x33e>
  case MBUS_STATE_REGNUM_LO:
    ctx->state = MBUS_STATE_CRC_LO;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	220b      	movs	r2, #11
 8003964:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.num |= byte;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 800396e:	79bb      	ldrb	r3, [r7, #6]
 8003970:	b29b      	uxth	r3, r3
 8003972:	4313      	orrs	r3, r2
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    if (ctx->header.rnum == 0) {
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003982:	2b00      	cmp	r3, #0
 8003984:	d104      	bne.n	8003990 <mbus_poll+0x2e4>
      ctx->state = MBUS_STATE_CRC_LO;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	220b      	movs	r2, #11
 800398a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      if (ctx->header.func == MBUS_FUNC_WRITE_REGS) {
        ctx->state = MBUS_STATE_DATA_SIZE;
      }
    }

    break;
 800398e:	e02b      	b.n	80039e8 <mbus_poll+0x33c>
      ctx->header.rnum = ctx->header.num;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->state = MBUS_STATE_DATA_HI;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2208      	movs	r2, #8
 80039a0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      if (ctx->header.func == MBUS_FUNC_WRITE_REGS) {
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80039aa:	2b10      	cmp	r3, #16
 80039ac:	d11c      	bne.n	80039e8 <mbus_poll+0x33c>
        ctx->state = MBUS_STATE_DATA_SIZE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2209      	movs	r2, #9
 80039b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 80039b6:	e017      	b.n	80039e8 <mbus_poll+0x33c>
  case MBUS_STATE_CRC_LO:
    ctx->state = MBUS_STATE_CRC_HI;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	220c      	movs	r2, #12
 80039bc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 80039c0:	e013      	b.n	80039ea <mbus_poll+0x33e>
 80039c2:	bf00      	nop
 80039c4:	20000804 	.word	0x20000804
  case MBUS_STATE_CRC_HI:
    ctx->state = MBUS_STATE_FINISH;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	220d      	movs	r2, #13
 80039cc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 80039d0:	e00b      	b.n	80039ea <mbus_poll+0x33e>
  // We can't processing any more before callback not returned
  case MBUS_STATE_RESPONSE:
    return MBUS_ERROR;
 80039d2:	f04f 33ff 	mov.w	r3, #4294967295
 80039d6:	e04c      	b.n	8003a72 <mbus_poll+0x3c6>
  default:
    mbus_flush(mb_context);
 80039d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff fc5d 	bl	800329c <mbus_flush>
    break;
 80039e2:	e002      	b.n	80039ea <mbus_poll+0x33e>
    break;
 80039e4:	bf00      	nop
 80039e6:	e000      	b.n	80039ea <mbus_poll+0x33e>
    break;
 80039e8:	bf00      	nop
  }

  ctx->crc16 = mbus_crc16(ctx->crc16, byte);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ee:	79ba      	ldrb	r2, [r7, #6]
 80039f0:	4611      	mov	r1, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f92e 	bl	8003c54 <mbus_crc16>
 80039f8:	4603      	mov	r3, r0
 80039fa:	461a      	mov	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (ctx->state == MBUS_STATE_FINISH) {
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a06:	2b0d      	cmp	r3, #13
 8003a08:	d132      	bne.n	8003a70 <mbus_poll+0x3c4>
    // CRC error
    if (ctx->crc16 != 0) {
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d007      	beq.n	8003a22 <mbus_poll+0x376>
      mbus_flush(mb_context);
 8003a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff fc40 	bl	800329c <mbus_flush>
      return MBUS_ERROR;
 8003a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a20:	e027      	b.n	8003a72 <mbus_poll+0x3c6>
    }

    // TODO: Add broadcast messages
    if (ctx->header.devaddr == ctx->conf.devaddr) {
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d11a      	bne.n	8003a66 <mbus_poll+0x3ba>
      ctx->state = MBUS_STATE_RESPONSE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	220e      	movs	r2, #14
 8003a34:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      if (mbus_poll_response(mb_context) == MBUS_OK) {
 8003a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff fc6b 	bl	8003318 <mbus_poll_response>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d106      	bne.n	8003a56 <mbus_poll+0x3aa>
        mbus_flush(mb_context);
 8003a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff fc25 	bl	800329c <mbus_flush>
        return MBUS_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	e00d      	b.n	8003a72 <mbus_poll+0x3c6>
      }
      mbus_flush(mb_context);
 8003a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff fc1e 	bl	800329c <mbus_flush>
      return MBUS_ERROR;
 8003a60:	f04f 33ff 	mov.w	r3, #4294967295
 8003a64:	e005      	b.n	8003a72 <mbus_poll+0x3c6>
    }
    mbus_flush(mb_context);
 8003a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fc16 	bl	800329c <mbus_flush>
  }
  return MBUS_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop

08003a7c <mbus_send_error>:
  if (g_mbusContext[mb_context].open)
    return (mbus_context_t)&g_mbusContext[mb_context];
  return 0;
}

mbus_status_t mbus_send_error(mbus_t mb_context, Modbus_ResponseType response) {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	460a      	mov	r2, r1
 8003a86:	71fb      	strb	r3, [r7, #7]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	71bb      	strb	r3, [r7, #6]
  uint16_t *pbuf = (uint16_t *)(g_mbusContext[mb_context].conf.sendbuf + 2);
 8003a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a90:	4a0d      	ldr	r2, [pc, #52]	; (8003ac8 <mbus_send_error+0x4c>)
 8003a92:	2194      	movs	r1, #148	; 0x94
 8003a94:	fb01 f303 	mul.w	r3, r1, r3
 8003a98:	4413      	add	r3, r2
 8003a9a:	3318      	adds	r3, #24
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3302      	adds	r3, #2
 8003aa0:	60fb      	str	r3, [r7, #12]
  *pbuf = 0x8300 | (uint8_t)response;
 8003aa2:	79bb      	ldrb	r3, [r7, #6]
 8003aa4:	b21a      	sxth	r2, r3
 8003aa6:	4b09      	ldr	r3, [pc, #36]	; (8003acc <mbus_send_error+0x50>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	b21b      	sxth	r3, r3
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	801a      	strh	r2, [r3, #0]
  return mbus_send_data(mb_context, 4);
 8003ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab6:	2104      	movs	r1, #4
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 f809 	bl	8003ad0 <mbus_send_data>
 8003abe:	4603      	mov	r3, r0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	20000804 	.word	0x20000804
 8003acc:	ffff8300 	.word	0xffff8300

08003ad0 <mbus_send_data>:

mbus_status_t mbus_send_data(mbus_t mb_context, uint16_t size) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	460a      	mov	r2, r1
 8003ada:	71fb      	strb	r3, [r7, #7]
 8003adc:	4613      	mov	r3, r2
 8003ade:	80bb      	strh	r3, [r7, #4]
  // if size > ( conf.send_sz-2) error
  uint16_t crc32 = 0xFFFF;
 8003ae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ae4:	82fb      	strh	r3, [r7, #22]
  const _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8003ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aea:	2294      	movs	r2, #148	; 0x94
 8003aec:	fb02 f303 	mul.w	r3, r2, r3
 8003af0:	4a28      	ldr	r2, [pc, #160]	; (8003b94 <mbus_send_data+0xc4>)
 8003af2:	4413      	add	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
  uint8_t *pbuf = ctx->conf.sendbuf;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	60bb      	str	r3, [r7, #8]
  if (ctx->conf.send == 0 || pbuf == 0 || ctx->conf.sendbuf_sz < (size + 2))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <mbus_send_data+0x46>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <mbus_send_data+0x46>
 8003b0a:	88bb      	ldrh	r3, [r7, #4]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	8b92      	ldrh	r2, [r2, #28]
 8003b12:	4293      	cmp	r3, r2
 8003b14:	db02      	blt.n	8003b1c <mbus_send_data+0x4c>
    return MBUS_ERROR;
 8003b16:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1a:	e037      	b.n	8003b8c <mbus_send_data+0xbc>
  for (int i = 0; i < size; i++) {
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	e00d      	b.n	8003b3e <mbus_send_data+0x6e>
    crc32 = mbus_crc16(crc32, pbuf[i]);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	4413      	add	r3, r2
 8003b28:	781a      	ldrb	r2, [r3, #0]
 8003b2a:	8afb      	ldrh	r3, [r7, #22]
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 f890 	bl	8003c54 <mbus_crc16>
 8003b34:	4603      	mov	r3, r0
 8003b36:	82fb      	strh	r3, [r7, #22]
  for (int i = 0; i < size; i++) {
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	88bb      	ldrh	r3, [r7, #4]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	dbed      	blt.n	8003b22 <mbus_send_data+0x52>
  }
  pbuf[size++] = crc32 & 0xFF;
 8003b46:	88bb      	ldrh	r3, [r7, #4]
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	80ba      	strh	r2, [r7, #4]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	4413      	add	r3, r2
 8003b52:	8afa      	ldrh	r2, [r7, #22]
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	701a      	strb	r2, [r3, #0]
  pbuf[size++] = (crc32 >> 8);
 8003b58:	8afb      	ldrh	r3, [r7, #22]
 8003b5a:	0a1b      	lsrs	r3, r3, #8
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	88bb      	ldrh	r3, [r7, #4]
 8003b60:	1c59      	adds	r1, r3, #1
 8003b62:	80b9      	strh	r1, [r7, #4]
 8003b64:	4619      	mov	r1, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	440b      	add	r3, r1
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	701a      	strb	r2, [r3, #0]

  if (ctx->conf.send(mb_context, pbuf, size) != size)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	88ba      	ldrh	r2, [r7, #4]
 8003b74:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	4798      	blx	r3
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	88bb      	ldrh	r3, [r7, #4]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d002      	beq.n	8003b8a <mbus_send_data+0xba>
    return MBUS_ERROR;
 8003b84:	f04f 33ff 	mov.w	r3, #4294967295
 8003b88:	e000      	b.n	8003b8c <mbus_send_data+0xbc>
  return MBUS_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	20000804 	.word	0x20000804

08003b98 <mbus_proto_address>:
  }
#endif
  return MBUS_ERROR;
}

int mbus_proto_address( Modbus_ConnectFuncType func, int *r) {
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	6039      	str	r1, [r7, #0]
 8003ba2:	71fb      	strb	r3, [r7, #7]
  int adr = 0;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60fb      	str	r3, [r7, #12]
  *r = 1;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2201      	movs	r2, #1
 8003bac:	601a      	str	r2, [r3, #0]
  switch (func) {
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	2b16      	cmp	r3, #22
 8003bb4:	d845      	bhi.n	8003c42 <mbus_proto_address+0xaa>
 8003bb6:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <mbus_proto_address+0x24>)
 8003bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbc:	08003c3d 	.word	0x08003c3d
 8003bc0:	08003c2f 	.word	0x08003c2f
 8003bc4:	08003c1f 	.word	0x08003c1f
 8003bc8:	08003c27 	.word	0x08003c27
 8003bcc:	08003c37 	.word	0x08003c37
 8003bd0:	08003c19 	.word	0x08003c19
 8003bd4:	08003c43 	.word	0x08003c43
 8003bd8:	08003c43 	.word	0x08003c43
 8003bdc:	08003c43 	.word	0x08003c43
 8003be0:	08003c43 	.word	0x08003c43
 8003be4:	08003c43 	.word	0x08003c43
 8003be8:	08003c43 	.word	0x08003c43
 8003bec:	08003c43 	.word	0x08003c43
 8003bf0:	08003c43 	.word	0x08003c43
 8003bf4:	08003c37 	.word	0x08003c37
 8003bf8:	08003c19 	.word	0x08003c19
 8003bfc:	08003c43 	.word	0x08003c43
 8003c00:	08003c43 	.word	0x08003c43
 8003c04:	08003c43 	.word	0x08003c43
 8003c08:	08003c43 	.word	0x08003c43
 8003c0c:	08003c43 	.word	0x08003c43
 8003c10:	08003c19 	.word	0x08003c19
 8003c14:	08003c19 	.word	0x08003c19
  case MBUS_FUNC_WRITE_REG:
  case MBUS_FUNC_WRITE_REGS:
  case MBUS_FUNC_READ_WRITE_MASK_REGS:
  case MBUS_FUNC_READ_WRITE_REGS:
    *r = 0;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
  case MBUS_FUNC_READ_REGS:
    adr = 40001;
 8003c1e:	f649 4341 	movw	r3, #40001	; 0x9c41
 8003c22:	60fb      	str	r3, [r7, #12]
    break;
 8003c24:	e00e      	b.n	8003c44 <mbus_proto_address+0xac>
  case MBUS_FUNC_READ_INPUT_REGS:
    adr = 30001;
 8003c26:	f247 5331 	movw	r3, #30001	; 0x7531
 8003c2a:	60fb      	str	r3, [r7, #12]
    break;
 8003c2c:	e00a      	b.n	8003c44 <mbus_proto_address+0xac>
  case MBUS_FUNC_READ_DISCRETE:
    adr = 10001;
 8003c2e:	f242 7311 	movw	r3, #10001	; 0x2711
 8003c32:	60fb      	str	r3, [r7, #12]
    break;
 8003c34:	e006      	b.n	8003c44 <mbus_proto_address+0xac>
  case MBUS_FUNC_WRITE_COILS:
  case MBUS_FUNC_WRITE_COIL:
    *r = 0;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
  case MBUS_FUNC_READ_COILS:
    adr = 0001;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	60fb      	str	r3, [r7, #12]
    break;
 8003c40:	e000      	b.n	8003c44 <mbus_proto_address+0xac>
  default:
    break;
 8003c42:	bf00      	nop
  }
  return adr;
 8003c44:	68fb      	ldr	r3, [r7, #12]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop

08003c54 <mbus_crc16>:
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}

*/

uint16_t mbus_crc16(uint16_t crc16, uint8_t byte) {
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	460a      	mov	r2, r1
 8003c5e:	80fb      	strh	r3, [r7, #6]
 8003c60:	4613      	mov	r3, r2
 8003c62:	717b      	strb	r3, [r7, #5]
  const int index = (crc16 & 0xFF) ^ byte;
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	797b      	ldrb	r3, [r7, #5]
 8003c6a:	4053      	eors	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
  return (aucCRCLo[index] << 8) | ((crc16 >> 8) ^ aucCRCHi[index]);
 8003c6e:	4a0d      	ldr	r2, [pc, #52]	; (8003ca4 <mbus_crc16+0x50>)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4413      	add	r3, r2
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	b21a      	sxth	r2, r3
 8003c7a:	88fb      	ldrh	r3, [r7, #6]
 8003c7c:	0a1b      	lsrs	r3, r3, #8
 8003c7e:	b299      	uxth	r1, r3
 8003c80:	4809      	ldr	r0, [pc, #36]	; (8003ca8 <mbus_crc16+0x54>)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4403      	add	r3, r0
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	404b      	eors	r3, r1
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	b21b      	sxth	r3, r3
 8003c90:	4313      	orrs	r3, r2
 8003c92:	b21b      	sxth	r3, r3
 8003c94:	b29b      	uxth	r3, r3
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	0800c7a4 	.word	0x0800c7a4
 8003ca8:	0800c6a4 	.word	0x0800c6a4

08003cac <mbus_tickcount>:

uint32_t mbus_tickcount() { return 0; }
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cc0:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <HAL_Init+0x40>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a0d      	ldr	r2, [pc, #52]	; (8003cfc <HAL_Init+0x40>)
 8003cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ccc:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <HAL_Init+0x40>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <HAL_Init+0x40>)
 8003cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cd8:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <HAL_Init+0x40>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a07      	ldr	r2, [pc, #28]	; (8003cfc <HAL_Init+0x40>)
 8003cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ce4:	2003      	movs	r0, #3
 8003ce6:	f000 fd41 	bl	800476c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cea:	200f      	movs	r0, #15
 8003cec:	f000 f808 	bl	8003d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cf0:	f7fe fa38 	bl	8002164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40023c00 	.word	0x40023c00

08003d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d08:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <HAL_InitTick+0x54>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	4b12      	ldr	r3, [pc, #72]	; (8003d58 <HAL_InitTick+0x58>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	4619      	mov	r1, r3
 8003d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fd67 	bl	80047f2 <HAL_SYSTICK_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e00e      	b.n	8003d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b0f      	cmp	r3, #15
 8003d32:	d80a      	bhi.n	8003d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d34:	2200      	movs	r2, #0
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3c:	f000 fd21 	bl	8004782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d40:	4a06      	ldr	r2, [pc, #24]	; (8003d5c <HAL_InitTick+0x5c>)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	e000      	b.n	8003d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	20000040 	.word	0x20000040
 8003d58:	20000048 	.word	0x20000048
 8003d5c:	20000044 	.word	0x20000044

08003d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d64:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <HAL_IncTick+0x20>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <HAL_IncTick+0x24>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4413      	add	r3, r2
 8003d70:	4a04      	ldr	r2, [pc, #16]	; (8003d84 <HAL_IncTick+0x24>)
 8003d72:	6013      	str	r3, [r2, #0]
}
 8003d74:	bf00      	nop
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000048 	.word	0x20000048
 8003d84:	2000089c 	.word	0x2000089c

08003d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d8c:	4b03      	ldr	r3, [pc, #12]	; (8003d9c <HAL_GetTick+0x14>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	2000089c 	.word	0x2000089c

08003da0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e033      	b.n	8003e1e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d109      	bne.n	8003dd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fe f9fc 	bl	80021bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d118      	bne.n	8003e10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003de6:	f023 0302 	bic.w	r3, r3, #2
 8003dea:	f043 0202 	orr.w	r2, r3, #2
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fa48 	bl	8004288 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f023 0303 	bic.w	r3, r3, #3
 8003e06:	f043 0201 	orr.w	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40
 8003e0e:	e001      	b.n	8003e14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_ADC_Start_DMA+0x1e>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e0ce      	b.n	8003fe4 <HAL_ADC_Start_DMA+0x1bc>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d018      	beq.n	8003e8e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e6c:	4b5f      	ldr	r3, [pc, #380]	; (8003fec <HAL_ADC_Start_DMA+0x1c4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a5f      	ldr	r2, [pc, #380]	; (8003ff0 <HAL_ADC_Start_DMA+0x1c8>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	0c9a      	lsrs	r2, r3, #18
 8003e78:	4613      	mov	r3, r2
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4413      	add	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e80:	e002      	b.n	8003e88 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f9      	bne.n	8003e82 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e9c:	d107      	bne.n	8003eae <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eac:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	f040 8086 	bne.w	8003fca <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003ec6:	f023 0301 	bic.w	r3, r3, #1
 8003eca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d007      	beq.n	8003ef0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ee8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efc:	d106      	bne.n	8003f0c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	f023 0206 	bic.w	r2, r3, #6
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	645a      	str	r2, [r3, #68]	; 0x44
 8003f0a:	e002      	b.n	8003f12 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f1a:	4b36      	ldr	r3, [pc, #216]	; (8003ff4 <HAL_ADC_Start_DMA+0x1cc>)
 8003f1c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	4a35      	ldr	r2, [pc, #212]	; (8003ff8 <HAL_ADC_Start_DMA+0x1d0>)
 8003f24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	4a34      	ldr	r2, [pc, #208]	; (8003ffc <HAL_ADC_Start_DMA+0x1d4>)
 8003f2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	4a33      	ldr	r2, [pc, #204]	; (8004000 <HAL_ADC_Start_DMA+0x1d8>)
 8003f34:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003f3e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003f4e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f5e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	334c      	adds	r3, #76	; 0x4c
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f000 fd58 	bl	8004a24 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10f      	bne.n	8003fa0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d129      	bne.n	8003fe2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f9c:	609a      	str	r2, [r3, #8]
 8003f9e:	e020      	b.n	8003fe2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a17      	ldr	r2, [pc, #92]	; (8004004 <HAL_ADC_Start_DMA+0x1dc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d11b      	bne.n	8003fe2 <HAL_ADC_Start_DMA+0x1ba>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d114      	bne.n	8003fe2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003fc6:	609a      	str	r2, [r3, #8]
 8003fc8:	e00b      	b.n	8003fe2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f043 0210 	orr.w	r2, r3, #16
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	f043 0201 	orr.w	r2, r3, #1
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20000040 	.word	0x20000040
 8003ff0:	431bde83 	.word	0x431bde83
 8003ff4:	40012300 	.word	0x40012300
 8003ff8:	08004481 	.word	0x08004481
 8003ffc:	0800453b 	.word	0x0800453b
 8004000:	08004557 	.word	0x08004557
 8004004:	40012000 	.word	0x40012000

08004008 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x1c>
 800405c:	2302      	movs	r3, #2
 800405e:	e105      	b.n	800426c <HAL_ADC_ConfigChannel+0x228>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b09      	cmp	r3, #9
 800406e:	d925      	bls.n	80040bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68d9      	ldr	r1, [r3, #12]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	b29b      	uxth	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	4613      	mov	r3, r2
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	4413      	add	r3, r2
 8004084:	3b1e      	subs	r3, #30
 8004086:	2207      	movs	r2, #7
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43da      	mvns	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	400a      	ands	r2, r1
 8004094:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68d9      	ldr	r1, [r3, #12]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	4618      	mov	r0, r3
 80040a8:	4603      	mov	r3, r0
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	4403      	add	r3, r0
 80040ae:	3b1e      	subs	r3, #30
 80040b0:	409a      	lsls	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	60da      	str	r2, [r3, #12]
 80040ba:	e022      	b.n	8004102 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6919      	ldr	r1, [r3, #16]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	4613      	mov	r3, r2
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	4413      	add	r3, r2
 80040d0:	2207      	movs	r2, #7
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	43da      	mvns	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	400a      	ands	r2, r1
 80040de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6919      	ldr	r1, [r3, #16]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	4618      	mov	r0, r3
 80040f2:	4603      	mov	r3, r0
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	4403      	add	r3, r0
 80040f8:	409a      	lsls	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b06      	cmp	r3, #6
 8004108:	d824      	bhi.n	8004154 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	3b05      	subs	r3, #5
 800411c:	221f      	movs	r2, #31
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43da      	mvns	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	400a      	ands	r2, r1
 800412a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	b29b      	uxth	r3, r3
 8004138:	4618      	mov	r0, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	3b05      	subs	r3, #5
 8004146:	fa00 f203 	lsl.w	r2, r0, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	635a      	str	r2, [r3, #52]	; 0x34
 8004152:	e04c      	b.n	80041ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b0c      	cmp	r3, #12
 800415a:	d824      	bhi.n	80041a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	4613      	mov	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	3b23      	subs	r3, #35	; 0x23
 800416e:	221f      	movs	r2, #31
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	43da      	mvns	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	400a      	ands	r2, r1
 800417c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	b29b      	uxth	r3, r3
 800418a:	4618      	mov	r0, r3
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	4613      	mov	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	3b23      	subs	r3, #35	; 0x23
 8004198:	fa00 f203 	lsl.w	r2, r0, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	631a      	str	r2, [r3, #48]	; 0x30
 80041a4:	e023      	b.n	80041ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	3b41      	subs	r3, #65	; 0x41
 80041b8:	221f      	movs	r2, #31
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43da      	mvns	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	400a      	ands	r2, r1
 80041c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	4618      	mov	r0, r3
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	3b41      	subs	r3, #65	; 0x41
 80041e2:	fa00 f203 	lsl.w	r2, r0, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041ee:	4b22      	ldr	r3, [pc, #136]	; (8004278 <HAL_ADC_ConfigChannel+0x234>)
 80041f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a21      	ldr	r2, [pc, #132]	; (800427c <HAL_ADC_ConfigChannel+0x238>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d109      	bne.n	8004210 <HAL_ADC_ConfigChannel+0x1cc>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b12      	cmp	r3, #18
 8004202:	d105      	bne.n	8004210 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a19      	ldr	r2, [pc, #100]	; (800427c <HAL_ADC_ConfigChannel+0x238>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d123      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x21e>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b10      	cmp	r3, #16
 8004220:	d003      	beq.n	800422a <HAL_ADC_ConfigChannel+0x1e6>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b11      	cmp	r3, #17
 8004228:	d11b      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b10      	cmp	r3, #16
 800423c:	d111      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800423e:	4b10      	ldr	r3, [pc, #64]	; (8004280 <HAL_ADC_ConfigChannel+0x23c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a10      	ldr	r2, [pc, #64]	; (8004284 <HAL_ADC_ConfigChannel+0x240>)
 8004244:	fba2 2303 	umull	r2, r3, r2, r3
 8004248:	0c9a      	lsrs	r2, r3, #18
 800424a:	4613      	mov	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004254:	e002      	b.n	800425c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	3b01      	subs	r3, #1
 800425a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f9      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	40012300 	.word	0x40012300
 800427c:	40012000 	.word	0x40012000
 8004280:	20000040 	.word	0x20000040
 8004284:	431bde83 	.word	0x431bde83

08004288 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004290:	4b79      	ldr	r3, [pc, #484]	; (8004478 <ADC_Init+0x1f0>)
 8004292:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	431a      	orrs	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6859      	ldr	r1, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	021a      	lsls	r2, r3, #8
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80042e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6859      	ldr	r1, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004302:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6899      	ldr	r1, [r3, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431a:	4a58      	ldr	r2, [pc, #352]	; (800447c <ADC_Init+0x1f4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d022      	beq.n	8004366 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800432e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6899      	ldr	r1, [r3, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004350:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6899      	ldr	r1, [r3, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	609a      	str	r2, [r3, #8]
 8004364:	e00f      	b.n	8004386 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004374:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004384:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0202 	bic.w	r2, r2, #2
 8004394:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6899      	ldr	r1, [r3, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	7e1b      	ldrb	r3, [r3, #24]
 80043a0:	005a      	lsls	r2, r3, #1
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01b      	beq.n	80043ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6859      	ldr	r1, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	3b01      	subs	r3, #1
 80043e0:	035a      	lsls	r2, r3, #13
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	605a      	str	r2, [r3, #4]
 80043ea:	e007      	b.n	80043fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800440a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	3b01      	subs	r3, #1
 8004418:	051a      	lsls	r2, r3, #20
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004430:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6899      	ldr	r1, [r3, #8]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800443e:	025a      	lsls	r2, r3, #9
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004456:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6899      	ldr	r1, [r3, #8]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	029a      	lsls	r2, r3, #10
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	609a      	str	r2, [r3, #8]
}
 800446c:	bf00      	nop
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	40012300 	.word	0x40012300
 800447c:	0f000001 	.word	0x0f000001

08004480 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004496:	2b00      	cmp	r3, #0
 8004498:	d13c      	bne.n	8004514 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d12b      	bne.n	800450c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d127      	bne.n	800450c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d006      	beq.n	80044d8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d119      	bne.n	800450c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0220 	bic.w	r2, r2, #32
 80044e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d105      	bne.n	800450c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	f043 0201 	orr.w	r2, r3, #1
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f7ff fd7b 	bl	8004008 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004512:	e00e      	b.n	8004532 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f7ff fd85 	bl	8004030 <HAL_ADC_ErrorCallback>
}
 8004526:	e004      	b.n	8004532 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	4798      	blx	r3
}
 8004532:	bf00      	nop
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f7ff fd67 	bl	800401c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2240      	movs	r2, #64	; 0x40
 8004568:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	f043 0204 	orr.w	r2, r3, #4
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f7ff fd5a 	bl	8004030 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004594:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045a0:	4013      	ands	r3, r2
 80045a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045b6:	4a04      	ldr	r2, [pc, #16]	; (80045c8 <__NVIC_SetPriorityGrouping+0x44>)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	60d3      	str	r3, [r2, #12]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	e000ed00 	.word	0xe000ed00

080045cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045d0:	4b04      	ldr	r3, [pc, #16]	; (80045e4 <__NVIC_GetPriorityGrouping+0x18>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	0a1b      	lsrs	r3, r3, #8
 80045d6:	f003 0307 	and.w	r3, r3, #7
}
 80045da:	4618      	mov	r0, r3
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	e000ed00 	.word	0xe000ed00

080045e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	db0b      	blt.n	8004612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	f003 021f 	and.w	r2, r3, #31
 8004600:	4907      	ldr	r1, [pc, #28]	; (8004620 <__NVIC_EnableIRQ+0x38>)
 8004602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	2001      	movs	r0, #1
 800460a:	fa00 f202 	lsl.w	r2, r0, r2
 800460e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	e000e100 	.word	0xe000e100

08004624 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800462e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004632:	2b00      	cmp	r3, #0
 8004634:	db12      	blt.n	800465c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004636:	79fb      	ldrb	r3, [r7, #7]
 8004638:	f003 021f 	and.w	r2, r3, #31
 800463c:	490a      	ldr	r1, [pc, #40]	; (8004668 <__NVIC_DisableIRQ+0x44>)
 800463e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004642:	095b      	lsrs	r3, r3, #5
 8004644:	2001      	movs	r0, #1
 8004646:	fa00 f202 	lsl.w	r2, r0, r2
 800464a:	3320      	adds	r3, #32
 800464c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004650:	f3bf 8f4f 	dsb	sy
}
 8004654:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004656:	f3bf 8f6f 	isb	sy
}
 800465a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	e000e100 	.word	0xe000e100

0800466c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	6039      	str	r1, [r7, #0]
 8004676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467c:	2b00      	cmp	r3, #0
 800467e:	db0a      	blt.n	8004696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	b2da      	uxtb	r2, r3
 8004684:	490c      	ldr	r1, [pc, #48]	; (80046b8 <__NVIC_SetPriority+0x4c>)
 8004686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468a:	0112      	lsls	r2, r2, #4
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	440b      	add	r3, r1
 8004690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004694:	e00a      	b.n	80046ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	4908      	ldr	r1, [pc, #32]	; (80046bc <__NVIC_SetPriority+0x50>)
 800469c:	79fb      	ldrb	r3, [r7, #7]
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	3b04      	subs	r3, #4
 80046a4:	0112      	lsls	r2, r2, #4
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	440b      	add	r3, r1
 80046aa:	761a      	strb	r2, [r3, #24]
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	e000e100 	.word	0xe000e100
 80046bc:	e000ed00 	.word	0xe000ed00

080046c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b089      	sub	sp, #36	; 0x24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f1c3 0307 	rsb	r3, r3, #7
 80046da:	2b04      	cmp	r3, #4
 80046dc:	bf28      	it	cs
 80046de:	2304      	movcs	r3, #4
 80046e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	3304      	adds	r3, #4
 80046e6:	2b06      	cmp	r3, #6
 80046e8:	d902      	bls.n	80046f0 <NVIC_EncodePriority+0x30>
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	3b03      	subs	r3, #3
 80046ee:	e000      	b.n	80046f2 <NVIC_EncodePriority+0x32>
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f4:	f04f 32ff 	mov.w	r2, #4294967295
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	43da      	mvns	r2, r3
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	401a      	ands	r2, r3
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004708:	f04f 31ff 	mov.w	r1, #4294967295
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	fa01 f303 	lsl.w	r3, r1, r3
 8004712:	43d9      	mvns	r1, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004718:	4313      	orrs	r3, r2
         );
}
 800471a:	4618      	mov	r0, r3
 800471c:	3724      	adds	r7, #36	; 0x24
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
	...

08004728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3b01      	subs	r3, #1
 8004734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004738:	d301      	bcc.n	800473e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800473a:	2301      	movs	r3, #1
 800473c:	e00f      	b.n	800475e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800473e:	4a0a      	ldr	r2, [pc, #40]	; (8004768 <SysTick_Config+0x40>)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3b01      	subs	r3, #1
 8004744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004746:	210f      	movs	r1, #15
 8004748:	f04f 30ff 	mov.w	r0, #4294967295
 800474c:	f7ff ff8e 	bl	800466c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004750:	4b05      	ldr	r3, [pc, #20]	; (8004768 <SysTick_Config+0x40>)
 8004752:	2200      	movs	r2, #0
 8004754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004756:	4b04      	ldr	r3, [pc, #16]	; (8004768 <SysTick_Config+0x40>)
 8004758:	2207      	movs	r2, #7
 800475a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	e000e010 	.word	0xe000e010

0800476c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff ff05 	bl	8004584 <__NVIC_SetPriorityGrouping>
}
 800477a:	bf00      	nop
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004782:	b580      	push	{r7, lr}
 8004784:	b086      	sub	sp, #24
 8004786:	af00      	add	r7, sp, #0
 8004788:	4603      	mov	r3, r0
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	607a      	str	r2, [r7, #4]
 800478e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004794:	f7ff ff1a 	bl	80045cc <__NVIC_GetPriorityGrouping>
 8004798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	68b9      	ldr	r1, [r7, #8]
 800479e:	6978      	ldr	r0, [r7, #20]
 80047a0:	f7ff ff8e 	bl	80046c0 <NVIC_EncodePriority>
 80047a4:	4602      	mov	r2, r0
 80047a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047aa:	4611      	mov	r1, r2
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff ff5d 	bl	800466c <__NVIC_SetPriority>
}
 80047b2:	bf00      	nop
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b082      	sub	sp, #8
 80047be:	af00      	add	r7, sp, #0
 80047c0:	4603      	mov	r3, r0
 80047c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff ff0d 	bl	80045e8 <__NVIC_EnableIRQ>
}
 80047ce:	bf00      	nop
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	4603      	mov	r3, r0
 80047de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80047e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff ff1d 	bl	8004624 <__NVIC_DisableIRQ>
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b082      	sub	sp, #8
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff ff94 	bl	8004728 <SysTick_Config>
 8004800:	4603      	mov	r3, r0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004818:	f7ff fab6 	bl	8003d88 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e099      	b.n	800495c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0201 	bic.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004848:	e00f      	b.n	800486a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800484a:	f7ff fa9d 	bl	8003d88 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b05      	cmp	r3, #5
 8004856:	d908      	bls.n	800486a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2203      	movs	r2, #3
 8004862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e078      	b.n	800495c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e8      	bne.n	800484a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	4b38      	ldr	r3, [pc, #224]	; (8004964 <HAL_DMA_Init+0x158>)
 8004884:	4013      	ands	r3, r2
 8004886:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004896:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d107      	bne.n	80048d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	4313      	orrs	r3, r2
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f023 0307 	bic.w	r3, r3, #7
 80048ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d117      	bne.n	800492e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00e      	beq.n	800492e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fb5f 	bl	8004fd4 <DMA_CheckFifoParam>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d008      	beq.n	800492e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2240      	movs	r2, #64	; 0x40
 8004920:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800492a:	2301      	movs	r3, #1
 800492c:	e016      	b.n	800495c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fb16 	bl	8004f68 <DMA_CalcBaseAndBitshift>
 800493c:	4603      	mov	r3, r0
 800493e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004944:	223f      	movs	r2, #63	; 0x3f
 8004946:	409a      	lsls	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	f010803f 	.word	0xf010803f

08004968 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e050      	b.n	8004a1c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d101      	bne.n	800498a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004986:	2302      	movs	r3, #2
 8004988:	e048      	b.n	8004a1c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0201 	bic.w	r2, r2, #1
 8004998:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2200      	movs	r2, #0
 80049a8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2200      	movs	r2, #0
 80049b0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2200      	movs	r2, #0
 80049b8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2200      	movs	r2, #0
 80049c0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2221      	movs	r2, #33	; 0x21
 80049c8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 facc 	bl	8004f68 <DMA_CalcBaseAndBitshift>
 80049d0:	4603      	mov	r3, r0
 80049d2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049fc:	223f      	movs	r2, #63	; 0x3f
 80049fe:	409a      	lsls	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_DMA_Start_IT+0x26>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e040      	b.n	8004acc <HAL_DMA_Start_IT+0xa8>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d12f      	bne.n	8004abe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2202      	movs	r2, #2
 8004a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	68b9      	ldr	r1, [r7, #8]
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 fa4a 	bl	8004f0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7c:	223f      	movs	r2, #63	; 0x3f
 8004a7e:	409a      	lsls	r2, r3
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0216 	orr.w	r2, r2, #22
 8004a92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d007      	beq.n	8004aac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0208 	orr.w	r2, r2, #8
 8004aaa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	e005      	b.n	8004aca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004ae2:	f7ff f951 	bl	8003d88 <HAL_GetTick>
 8004ae6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d008      	beq.n	8004b06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2280      	movs	r2, #128	; 0x80
 8004af8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e052      	b.n	8004bac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0216 	bic.w	r2, r2, #22
 8004b14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695a      	ldr	r2, [r3, #20]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d103      	bne.n	8004b36 <HAL_DMA_Abort+0x62>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d007      	beq.n	8004b46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0208 	bic.w	r2, r2, #8
 8004b44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0201 	bic.w	r2, r2, #1
 8004b54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b56:	e013      	b.n	8004b80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b58:	f7ff f916 	bl	8003d88 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b05      	cmp	r3, #5
 8004b64:	d90c      	bls.n	8004b80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2203      	movs	r2, #3
 8004b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e015      	b.n	8004bac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e4      	bne.n	8004b58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b92:	223f      	movs	r2, #63	; 0x3f
 8004b94:	409a      	lsls	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d004      	beq.n	8004bd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2280      	movs	r2, #128	; 0x80
 8004bcc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e00c      	b.n	8004bec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2205      	movs	r2, #5
 8004bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0201 	bic.w	r2, r2, #1
 8004be8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c04:	4b8e      	ldr	r3, [pc, #568]	; (8004e40 <HAL_DMA_IRQHandler+0x248>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a8e      	ldr	r2, [pc, #568]	; (8004e44 <HAL_DMA_IRQHandler+0x24c>)
 8004c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0e:	0a9b      	lsrs	r3, r3, #10
 8004c10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c22:	2208      	movs	r2, #8
 8004c24:	409a      	lsls	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d01a      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d013      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0204 	bic.w	r2, r2, #4
 8004c4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c50:	2208      	movs	r2, #8
 8004c52:	409a      	lsls	r2, r3
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5c:	f043 0201 	orr.w	r2, r3, #1
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c68:	2201      	movs	r2, #1
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d012      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00b      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c86:	2201      	movs	r2, #1
 8004c88:	409a      	lsls	r2, r3
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c92:	f043 0202 	orr.w	r2, r3, #2
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9e:	2204      	movs	r2, #4
 8004ca0:	409a      	lsls	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d012      	beq.n	8004cd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00b      	beq.n	8004cd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cbc:	2204      	movs	r2, #4
 8004cbe:	409a      	lsls	r2, r3
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc8:	f043 0204 	orr.w	r2, r3, #4
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd4:	2210      	movs	r2, #16
 8004cd6:	409a      	lsls	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d043      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d03c      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf2:	2210      	movs	r2, #16
 8004cf4:	409a      	lsls	r2, r3
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d018      	beq.n	8004d3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d108      	bne.n	8004d28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d024      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	4798      	blx	r3
 8004d26:	e01f      	b.n	8004d68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01b      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	4798      	blx	r3
 8004d38:	e016      	b.n	8004d68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d107      	bne.n	8004d58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0208 	bic.w	r2, r2, #8
 8004d56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	409a      	lsls	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 808f 	beq.w	8004e98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 8087 	beq.w	8004e98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8e:	2220      	movs	r2, #32
 8004d90:	409a      	lsls	r2, r3
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b05      	cmp	r3, #5
 8004da0:	d136      	bne.n	8004e10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0216 	bic.w	r2, r2, #22
 8004db0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695a      	ldr	r2, [r3, #20]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d103      	bne.n	8004dd2 <HAL_DMA_IRQHandler+0x1da>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d007      	beq.n	8004de2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0208 	bic.w	r2, r2, #8
 8004de0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de6:	223f      	movs	r2, #63	; 0x3f
 8004de8:	409a      	lsls	r2, r3
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d07e      	beq.n	8004f04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	4798      	blx	r3
        }
        return;
 8004e0e:	e079      	b.n	8004f04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d01d      	beq.n	8004e5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10d      	bne.n	8004e48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d031      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	4798      	blx	r3
 8004e3c:	e02c      	b.n	8004e98 <HAL_DMA_IRQHandler+0x2a0>
 8004e3e:	bf00      	nop
 8004e40:	20000040 	.word	0x20000040
 8004e44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d023      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	4798      	blx	r3
 8004e58:	e01e      	b.n	8004e98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10f      	bne.n	8004e88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0210 	bic.w	r2, r2, #16
 8004e76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d032      	beq.n	8004f06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d022      	beq.n	8004ef2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2205      	movs	r2, #5
 8004eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0201 	bic.w	r2, r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d307      	bcc.n	8004ee0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f2      	bne.n	8004ec4 <HAL_DMA_IRQHandler+0x2cc>
 8004ede:	e000      	b.n	8004ee2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ee0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d005      	beq.n	8004f06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	4798      	blx	r3
 8004f02:	e000      	b.n	8004f06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f04:	bf00      	nop
    }
  }
}
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	2b40      	cmp	r3, #64	; 0x40
 8004f38:	d108      	bne.n	8004f4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f4a:	e007      	b.n	8004f5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	60da      	str	r2, [r3, #12]
}
 8004f5c:	bf00      	nop
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	3b10      	subs	r3, #16
 8004f78:	4a14      	ldr	r2, [pc, #80]	; (8004fcc <DMA_CalcBaseAndBitshift+0x64>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	091b      	lsrs	r3, r3, #4
 8004f80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f82:	4a13      	ldr	r2, [pc, #76]	; (8004fd0 <DMA_CalcBaseAndBitshift+0x68>)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4413      	add	r3, r2
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d909      	bls.n	8004faa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f9e:	f023 0303 	bic.w	r3, r3, #3
 8004fa2:	1d1a      	adds	r2, r3, #4
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	659a      	str	r2, [r3, #88]	; 0x58
 8004fa8:	e007      	b.n	8004fba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004fb2:	f023 0303 	bic.w	r3, r3, #3
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	aaaaaaab 	.word	0xaaaaaaab
 8004fd0:	0800c8a4 	.word	0x0800c8a4

08004fd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d11f      	bne.n	800502e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b03      	cmp	r3, #3
 8004ff2:	d856      	bhi.n	80050a2 <DMA_CheckFifoParam+0xce>
 8004ff4:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <DMA_CheckFifoParam+0x28>)
 8004ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffa:	bf00      	nop
 8004ffc:	0800500d 	.word	0x0800500d
 8005000:	0800501f 	.word	0x0800501f
 8005004:	0800500d 	.word	0x0800500d
 8005008:	080050a3 	.word	0x080050a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d046      	beq.n	80050a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800501c:	e043      	b.n	80050a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005022:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005026:	d140      	bne.n	80050aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800502c:	e03d      	b.n	80050aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005036:	d121      	bne.n	800507c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b03      	cmp	r3, #3
 800503c:	d837      	bhi.n	80050ae <DMA_CheckFifoParam+0xda>
 800503e:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <DMA_CheckFifoParam+0x70>)
 8005040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005044:	08005055 	.word	0x08005055
 8005048:	0800505b 	.word	0x0800505b
 800504c:	08005055 	.word	0x08005055
 8005050:	0800506d 	.word	0x0800506d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	73fb      	strb	r3, [r7, #15]
      break;
 8005058:	e030      	b.n	80050bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d025      	beq.n	80050b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800506a:	e022      	b.n	80050b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005074:	d11f      	bne.n	80050b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800507a:	e01c      	b.n	80050b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2b02      	cmp	r3, #2
 8005080:	d903      	bls.n	800508a <DMA_CheckFifoParam+0xb6>
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b03      	cmp	r3, #3
 8005086:	d003      	beq.n	8005090 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005088:	e018      	b.n	80050bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	73fb      	strb	r3, [r7, #15]
      break;
 800508e:	e015      	b.n	80050bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00e      	beq.n	80050ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	73fb      	strb	r3, [r7, #15]
      break;
 80050a0:	e00b      	b.n	80050ba <DMA_CheckFifoParam+0xe6>
      break;
 80050a2:	bf00      	nop
 80050a4:	e00a      	b.n	80050bc <DMA_CheckFifoParam+0xe8>
      break;
 80050a6:	bf00      	nop
 80050a8:	e008      	b.n	80050bc <DMA_CheckFifoParam+0xe8>
      break;
 80050aa:	bf00      	nop
 80050ac:	e006      	b.n	80050bc <DMA_CheckFifoParam+0xe8>
      break;
 80050ae:	bf00      	nop
 80050b0:	e004      	b.n	80050bc <DMA_CheckFifoParam+0xe8>
      break;
 80050b2:	bf00      	nop
 80050b4:	e002      	b.n	80050bc <DMA_CheckFifoParam+0xe8>
      break;   
 80050b6:	bf00      	nop
 80050b8:	e000      	b.n	80050bc <DMA_CheckFifoParam+0xe8>
      break;
 80050ba:	bf00      	nop
    }
  } 
  
  return status; 
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop

080050cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b089      	sub	sp, #36	; 0x24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050da:	2300      	movs	r3, #0
 80050dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050de:	2300      	movs	r3, #0
 80050e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050e2:	2300      	movs	r3, #0
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	e159      	b.n	800539c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050e8:	2201      	movs	r2, #1
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4013      	ands	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	429a      	cmp	r2, r3
 8005102:	f040 8148 	bne.w	8005396 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	2b01      	cmp	r3, #1
 8005110:	d005      	beq.n	800511e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800511a:	2b02      	cmp	r3, #2
 800511c:	d130      	bne.n	8005180 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	2203      	movs	r2, #3
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	43db      	mvns	r3, r3
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	4013      	ands	r3, r2
 8005134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4313      	orrs	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005154:	2201      	movs	r2, #1
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	43db      	mvns	r3, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4013      	ands	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	091b      	lsrs	r3, r3, #4
 800516a:	f003 0201 	and.w	r2, r3, #1
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4313      	orrs	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f003 0303 	and.w	r3, r3, #3
 8005188:	2b03      	cmp	r3, #3
 800518a:	d017      	beq.n	80051bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	2203      	movs	r2, #3
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	43db      	mvns	r3, r3
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4013      	ands	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d123      	bne.n	8005210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	08da      	lsrs	r2, r3, #3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3208      	adds	r2, #8
 80051d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	220f      	movs	r2, #15
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	43db      	mvns	r3, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4013      	ands	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	4313      	orrs	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	08da      	lsrs	r2, r3, #3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3208      	adds	r2, #8
 800520a:	69b9      	ldr	r1, [r7, #24]
 800520c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	2203      	movs	r2, #3
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	43db      	mvns	r3, r3
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4013      	ands	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f003 0203 	and.w	r2, r3, #3
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	4313      	orrs	r3, r2
 800523c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 80a2 	beq.w	8005396 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005252:	2300      	movs	r3, #0
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	4b57      	ldr	r3, [pc, #348]	; (80053b4 <HAL_GPIO_Init+0x2e8>)
 8005258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525a:	4a56      	ldr	r2, [pc, #344]	; (80053b4 <HAL_GPIO_Init+0x2e8>)
 800525c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005260:	6453      	str	r3, [r2, #68]	; 0x44
 8005262:	4b54      	ldr	r3, [pc, #336]	; (80053b4 <HAL_GPIO_Init+0x2e8>)
 8005264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800526e:	4a52      	ldr	r2, [pc, #328]	; (80053b8 <HAL_GPIO_Init+0x2ec>)
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	089b      	lsrs	r3, r3, #2
 8005274:	3302      	adds	r3, #2
 8005276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800527a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	220f      	movs	r2, #15
 8005286:	fa02 f303 	lsl.w	r3, r2, r3
 800528a:	43db      	mvns	r3, r3
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	4013      	ands	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a49      	ldr	r2, [pc, #292]	; (80053bc <HAL_GPIO_Init+0x2f0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d019      	beq.n	80052ce <HAL_GPIO_Init+0x202>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a48      	ldr	r2, [pc, #288]	; (80053c0 <HAL_GPIO_Init+0x2f4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d013      	beq.n	80052ca <HAL_GPIO_Init+0x1fe>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a47      	ldr	r2, [pc, #284]	; (80053c4 <HAL_GPIO_Init+0x2f8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d00d      	beq.n	80052c6 <HAL_GPIO_Init+0x1fa>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a46      	ldr	r2, [pc, #280]	; (80053c8 <HAL_GPIO_Init+0x2fc>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d007      	beq.n	80052c2 <HAL_GPIO_Init+0x1f6>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a45      	ldr	r2, [pc, #276]	; (80053cc <HAL_GPIO_Init+0x300>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d101      	bne.n	80052be <HAL_GPIO_Init+0x1f2>
 80052ba:	2304      	movs	r3, #4
 80052bc:	e008      	b.n	80052d0 <HAL_GPIO_Init+0x204>
 80052be:	2307      	movs	r3, #7
 80052c0:	e006      	b.n	80052d0 <HAL_GPIO_Init+0x204>
 80052c2:	2303      	movs	r3, #3
 80052c4:	e004      	b.n	80052d0 <HAL_GPIO_Init+0x204>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e002      	b.n	80052d0 <HAL_GPIO_Init+0x204>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <HAL_GPIO_Init+0x204>
 80052ce:	2300      	movs	r3, #0
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	f002 0203 	and.w	r2, r2, #3
 80052d6:	0092      	lsls	r2, r2, #2
 80052d8:	4093      	lsls	r3, r2
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	4313      	orrs	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052e0:	4935      	ldr	r1, [pc, #212]	; (80053b8 <HAL_GPIO_Init+0x2ec>)
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	089b      	lsrs	r3, r3, #2
 80052e6:	3302      	adds	r3, #2
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052ee:	4b38      	ldr	r3, [pc, #224]	; (80053d0 <HAL_GPIO_Init+0x304>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	43db      	mvns	r3, r3
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	4013      	ands	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005312:	4a2f      	ldr	r2, [pc, #188]	; (80053d0 <HAL_GPIO_Init+0x304>)
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005318:	4b2d      	ldr	r3, [pc, #180]	; (80053d0 <HAL_GPIO_Init+0x304>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	43db      	mvns	r3, r3
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	4013      	ands	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	4313      	orrs	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800533c:	4a24      	ldr	r2, [pc, #144]	; (80053d0 <HAL_GPIO_Init+0x304>)
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005342:	4b23      	ldr	r3, [pc, #140]	; (80053d0 <HAL_GPIO_Init+0x304>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	43db      	mvns	r3, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4013      	ands	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005366:	4a1a      	ldr	r2, [pc, #104]	; (80053d0 <HAL_GPIO_Init+0x304>)
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800536c:	4b18      	ldr	r3, [pc, #96]	; (80053d0 <HAL_GPIO_Init+0x304>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	43db      	mvns	r3, r3
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	4013      	ands	r3, r2
 800537a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005390:	4a0f      	ldr	r2, [pc, #60]	; (80053d0 <HAL_GPIO_Init+0x304>)
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	3301      	adds	r3, #1
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	2b0f      	cmp	r3, #15
 80053a0:	f67f aea2 	bls.w	80050e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop
 80053a8:	3724      	adds	r7, #36	; 0x24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40023800 	.word	0x40023800
 80053b8:	40013800 	.word	0x40013800
 80053bc:	40020000 	.word	0x40020000
 80053c0:	40020400 	.word	0x40020400
 80053c4:	40020800 	.word	0x40020800
 80053c8:	40020c00 	.word	0x40020c00
 80053cc:	40021000 	.word	0x40021000
 80053d0:	40013c00 	.word	0x40013c00

080053d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053de:	2300      	movs	r3, #0
 80053e0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	e0bb      	b.n	8005568 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053f0:	2201      	movs	r2, #1
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	fa02 f303 	lsl.w	r3, r2, r3
 80053f8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	4013      	ands	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	429a      	cmp	r2, r3
 8005408:	f040 80ab 	bne.w	8005562 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800540c:	4a5c      	ldr	r2, [pc, #368]	; (8005580 <HAL_GPIO_DeInit+0x1ac>)
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	089b      	lsrs	r3, r3, #2
 8005412:	3302      	adds	r3, #2
 8005414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005418:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f003 0303 	and.w	r3, r3, #3
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	220f      	movs	r2, #15
 8005424:	fa02 f303 	lsl.w	r3, r2, r3
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	4013      	ands	r3, r2
 800542c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a54      	ldr	r2, [pc, #336]	; (8005584 <HAL_GPIO_DeInit+0x1b0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d019      	beq.n	800546a <HAL_GPIO_DeInit+0x96>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a53      	ldr	r2, [pc, #332]	; (8005588 <HAL_GPIO_DeInit+0x1b4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d013      	beq.n	8005466 <HAL_GPIO_DeInit+0x92>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a52      	ldr	r2, [pc, #328]	; (800558c <HAL_GPIO_DeInit+0x1b8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00d      	beq.n	8005462 <HAL_GPIO_DeInit+0x8e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a51      	ldr	r2, [pc, #324]	; (8005590 <HAL_GPIO_DeInit+0x1bc>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d007      	beq.n	800545e <HAL_GPIO_DeInit+0x8a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a50      	ldr	r2, [pc, #320]	; (8005594 <HAL_GPIO_DeInit+0x1c0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d101      	bne.n	800545a <HAL_GPIO_DeInit+0x86>
 8005456:	2304      	movs	r3, #4
 8005458:	e008      	b.n	800546c <HAL_GPIO_DeInit+0x98>
 800545a:	2307      	movs	r3, #7
 800545c:	e006      	b.n	800546c <HAL_GPIO_DeInit+0x98>
 800545e:	2303      	movs	r3, #3
 8005460:	e004      	b.n	800546c <HAL_GPIO_DeInit+0x98>
 8005462:	2302      	movs	r3, #2
 8005464:	e002      	b.n	800546c <HAL_GPIO_DeInit+0x98>
 8005466:	2301      	movs	r3, #1
 8005468:	e000      	b.n	800546c <HAL_GPIO_DeInit+0x98>
 800546a:	2300      	movs	r3, #0
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	f002 0203 	and.w	r2, r2, #3
 8005472:	0092      	lsls	r2, r2, #2
 8005474:	4093      	lsls	r3, r2
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	429a      	cmp	r2, r3
 800547a:	d132      	bne.n	80054e2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800547c:	4b46      	ldr	r3, [pc, #280]	; (8005598 <HAL_GPIO_DeInit+0x1c4>)
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	43db      	mvns	r3, r3
 8005484:	4944      	ldr	r1, [pc, #272]	; (8005598 <HAL_GPIO_DeInit+0x1c4>)
 8005486:	4013      	ands	r3, r2
 8005488:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800548a:	4b43      	ldr	r3, [pc, #268]	; (8005598 <HAL_GPIO_DeInit+0x1c4>)
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	43db      	mvns	r3, r3
 8005492:	4941      	ldr	r1, [pc, #260]	; (8005598 <HAL_GPIO_DeInit+0x1c4>)
 8005494:	4013      	ands	r3, r2
 8005496:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005498:	4b3f      	ldr	r3, [pc, #252]	; (8005598 <HAL_GPIO_DeInit+0x1c4>)
 800549a:	68da      	ldr	r2, [r3, #12]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	43db      	mvns	r3, r3
 80054a0:	493d      	ldr	r1, [pc, #244]	; (8005598 <HAL_GPIO_DeInit+0x1c4>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80054a6:	4b3c      	ldr	r3, [pc, #240]	; (8005598 <HAL_GPIO_DeInit+0x1c4>)
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	43db      	mvns	r3, r3
 80054ae:	493a      	ldr	r1, [pc, #232]	; (8005598 <HAL_GPIO_DeInit+0x1c4>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	220f      	movs	r2, #15
 80054be:	fa02 f303 	lsl.w	r3, r2, r3
 80054c2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80054c4:	4a2e      	ldr	r2, [pc, #184]	; (8005580 <HAL_GPIO_DeInit+0x1ac>)
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	089b      	lsrs	r3, r3, #2
 80054ca:	3302      	adds	r3, #2
 80054cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	43da      	mvns	r2, r3
 80054d4:	482a      	ldr	r0, [pc, #168]	; (8005580 <HAL_GPIO_DeInit+0x1ac>)
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	089b      	lsrs	r3, r3, #2
 80054da:	400a      	ands	r2, r1
 80054dc:	3302      	adds	r3, #2
 80054de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	2103      	movs	r1, #3
 80054ec:	fa01 f303 	lsl.w	r3, r1, r3
 80054f0:	43db      	mvns	r3, r3
 80054f2:	401a      	ands	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	08da      	lsrs	r2, r3, #3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3208      	adds	r2, #8
 8005500:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	220f      	movs	r2, #15
 800550e:	fa02 f303 	lsl.w	r3, r2, r3
 8005512:	43db      	mvns	r3, r3
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	08d2      	lsrs	r2, r2, #3
 8005518:	4019      	ands	r1, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3208      	adds	r2, #8
 800551e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	2103      	movs	r1, #3
 800552c:	fa01 f303 	lsl.w	r3, r1, r3
 8005530:	43db      	mvns	r3, r3
 8005532:	401a      	ands	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	2101      	movs	r1, #1
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	fa01 f303 	lsl.w	r3, r1, r3
 8005544:	43db      	mvns	r3, r3
 8005546:	401a      	ands	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	2103      	movs	r1, #3
 8005556:	fa01 f303 	lsl.w	r3, r1, r3
 800555a:	43db      	mvns	r3, r3
 800555c:	401a      	ands	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	3301      	adds	r3, #1
 8005566:	617b      	str	r3, [r7, #20]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2b0f      	cmp	r3, #15
 800556c:	f67f af40 	bls.w	80053f0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005570:	bf00      	nop
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40013800 	.word	0x40013800
 8005584:	40020000 	.word	0x40020000
 8005588:	40020400 	.word	0x40020400
 800558c:	40020800 	.word	0x40020800
 8005590:	40020c00 	.word	0x40020c00
 8005594:	40021000 	.word	0x40021000
 8005598:	40013c00 	.word	0x40013c00

0800559c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	807b      	strh	r3, [r7, #2]
 80055a8:	4613      	mov	r3, r2
 80055aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055ac:	787b      	ldrb	r3, [r7, #1]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055b2:	887a      	ldrh	r2, [r7, #2]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055b8:	e003      	b.n	80055c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055ba:	887b      	ldrh	r3, [r7, #2]
 80055bc:	041a      	lsls	r2, r3, #16
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	619a      	str	r2, [r3, #24]
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
	...

080055d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e267      	b.n	8005ab2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d075      	beq.n	80056da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055ee:	4b88      	ldr	r3, [pc, #544]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 030c 	and.w	r3, r3, #12
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d00c      	beq.n	8005614 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055fa:	4b85      	ldr	r3, [pc, #532]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005602:	2b08      	cmp	r3, #8
 8005604:	d112      	bne.n	800562c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005606:	4b82      	ldr	r3, [pc, #520]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800560e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005612:	d10b      	bne.n	800562c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005614:	4b7e      	ldr	r3, [pc, #504]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d05b      	beq.n	80056d8 <HAL_RCC_OscConfig+0x108>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d157      	bne.n	80056d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e242      	b.n	8005ab2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005634:	d106      	bne.n	8005644 <HAL_RCC_OscConfig+0x74>
 8005636:	4b76      	ldr	r3, [pc, #472]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a75      	ldr	r2, [pc, #468]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 800563c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	e01d      	b.n	8005680 <HAL_RCC_OscConfig+0xb0>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800564c:	d10c      	bne.n	8005668 <HAL_RCC_OscConfig+0x98>
 800564e:	4b70      	ldr	r3, [pc, #448]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a6f      	ldr	r2, [pc, #444]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	4b6d      	ldr	r3, [pc, #436]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a6c      	ldr	r2, [pc, #432]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	e00b      	b.n	8005680 <HAL_RCC_OscConfig+0xb0>
 8005668:	4b69      	ldr	r3, [pc, #420]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a68      	ldr	r2, [pc, #416]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 800566e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	4b66      	ldr	r3, [pc, #408]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a65      	ldr	r2, [pc, #404]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 800567a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800567e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d013      	beq.n	80056b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005688:	f7fe fb7e 	bl	8003d88 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005690:	f7fe fb7a 	bl	8003d88 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b64      	cmp	r3, #100	; 0x64
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e207      	b.n	8005ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056a2:	4b5b      	ldr	r3, [pc, #364]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0f0      	beq.n	8005690 <HAL_RCC_OscConfig+0xc0>
 80056ae:	e014      	b.n	80056da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b0:	f7fe fb6a 	bl	8003d88 <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056b8:	f7fe fb66 	bl	8003d88 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b64      	cmp	r3, #100	; 0x64
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e1f3      	b.n	8005ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ca:	4b51      	ldr	r3, [pc, #324]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f0      	bne.n	80056b8 <HAL_RCC_OscConfig+0xe8>
 80056d6:	e000      	b.n	80056da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d063      	beq.n	80057ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056e6:	4b4a      	ldr	r3, [pc, #296]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 030c 	and.w	r3, r3, #12
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00b      	beq.n	800570a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056f2:	4b47      	ldr	r3, [pc, #284]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d11c      	bne.n	8005738 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056fe:	4b44      	ldr	r3, [pc, #272]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d116      	bne.n	8005738 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800570a:	4b41      	ldr	r3, [pc, #260]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <HAL_RCC_OscConfig+0x152>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d001      	beq.n	8005722 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e1c7      	b.n	8005ab2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005722:	4b3b      	ldr	r3, [pc, #236]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	4937      	ldr	r1, [pc, #220]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005732:	4313      	orrs	r3, r2
 8005734:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005736:	e03a      	b.n	80057ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d020      	beq.n	8005782 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005740:	4b34      	ldr	r3, [pc, #208]	; (8005814 <HAL_RCC_OscConfig+0x244>)
 8005742:	2201      	movs	r2, #1
 8005744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005746:	f7fe fb1f 	bl	8003d88 <HAL_GetTick>
 800574a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800574c:	e008      	b.n	8005760 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800574e:	f7fe fb1b 	bl	8003d88 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d901      	bls.n	8005760 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e1a8      	b.n	8005ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005760:	4b2b      	ldr	r3, [pc, #172]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0f0      	beq.n	800574e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800576c:	4b28      	ldr	r3, [pc, #160]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	4925      	ldr	r1, [pc, #148]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 800577c:	4313      	orrs	r3, r2
 800577e:	600b      	str	r3, [r1, #0]
 8005780:	e015      	b.n	80057ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005782:	4b24      	ldr	r3, [pc, #144]	; (8005814 <HAL_RCC_OscConfig+0x244>)
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005788:	f7fe fafe 	bl	8003d88 <HAL_GetTick>
 800578c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005790:	f7fe fafa 	bl	8003d88 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e187      	b.n	8005ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057a2:	4b1b      	ldr	r3, [pc, #108]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1f0      	bne.n	8005790 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d036      	beq.n	8005828 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d016      	beq.n	80057f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057c2:	4b15      	ldr	r3, [pc, #84]	; (8005818 <HAL_RCC_OscConfig+0x248>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c8:	f7fe fade 	bl	8003d88 <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057d0:	f7fe fada 	bl	8003d88 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e167      	b.n	8005ab2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057e2:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <HAL_RCC_OscConfig+0x240>)
 80057e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0f0      	beq.n	80057d0 <HAL_RCC_OscConfig+0x200>
 80057ee:	e01b      	b.n	8005828 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057f0:	4b09      	ldr	r3, [pc, #36]	; (8005818 <HAL_RCC_OscConfig+0x248>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057f6:	f7fe fac7 	bl	8003d88 <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057fc:	e00e      	b.n	800581c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057fe:	f7fe fac3 	bl	8003d88 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d907      	bls.n	800581c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e150      	b.n	8005ab2 <HAL_RCC_OscConfig+0x4e2>
 8005810:	40023800 	.word	0x40023800
 8005814:	42470000 	.word	0x42470000
 8005818:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800581c:	4b88      	ldr	r3, [pc, #544]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 800581e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1ea      	bne.n	80057fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 8097 	beq.w	8005964 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005836:	2300      	movs	r3, #0
 8005838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800583a:	4b81      	ldr	r3, [pc, #516]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10f      	bne.n	8005866 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005846:	2300      	movs	r3, #0
 8005848:	60bb      	str	r3, [r7, #8]
 800584a:	4b7d      	ldr	r3, [pc, #500]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	4a7c      	ldr	r2, [pc, #496]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 8005850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005854:	6413      	str	r3, [r2, #64]	; 0x40
 8005856:	4b7a      	ldr	r3, [pc, #488]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585e:	60bb      	str	r3, [r7, #8]
 8005860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005862:	2301      	movs	r3, #1
 8005864:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005866:	4b77      	ldr	r3, [pc, #476]	; (8005a44 <HAL_RCC_OscConfig+0x474>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586e:	2b00      	cmp	r3, #0
 8005870:	d118      	bne.n	80058a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005872:	4b74      	ldr	r3, [pc, #464]	; (8005a44 <HAL_RCC_OscConfig+0x474>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a73      	ldr	r2, [pc, #460]	; (8005a44 <HAL_RCC_OscConfig+0x474>)
 8005878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800587c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800587e:	f7fe fa83 	bl	8003d88 <HAL_GetTick>
 8005882:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005884:	e008      	b.n	8005898 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005886:	f7fe fa7f 	bl	8003d88 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d901      	bls.n	8005898 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e10c      	b.n	8005ab2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005898:	4b6a      	ldr	r3, [pc, #424]	; (8005a44 <HAL_RCC_OscConfig+0x474>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0f0      	beq.n	8005886 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d106      	bne.n	80058ba <HAL_RCC_OscConfig+0x2ea>
 80058ac:	4b64      	ldr	r3, [pc, #400]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 80058ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b0:	4a63      	ldr	r2, [pc, #396]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 80058b2:	f043 0301 	orr.w	r3, r3, #1
 80058b6:	6713      	str	r3, [r2, #112]	; 0x70
 80058b8:	e01c      	b.n	80058f4 <HAL_RCC_OscConfig+0x324>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	2b05      	cmp	r3, #5
 80058c0:	d10c      	bne.n	80058dc <HAL_RCC_OscConfig+0x30c>
 80058c2:	4b5f      	ldr	r3, [pc, #380]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 80058c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c6:	4a5e      	ldr	r2, [pc, #376]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 80058c8:	f043 0304 	orr.w	r3, r3, #4
 80058cc:	6713      	str	r3, [r2, #112]	; 0x70
 80058ce:	4b5c      	ldr	r3, [pc, #368]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 80058d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d2:	4a5b      	ldr	r2, [pc, #364]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 80058d4:	f043 0301 	orr.w	r3, r3, #1
 80058d8:	6713      	str	r3, [r2, #112]	; 0x70
 80058da:	e00b      	b.n	80058f4 <HAL_RCC_OscConfig+0x324>
 80058dc:	4b58      	ldr	r3, [pc, #352]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 80058de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e0:	4a57      	ldr	r2, [pc, #348]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 80058e2:	f023 0301 	bic.w	r3, r3, #1
 80058e6:	6713      	str	r3, [r2, #112]	; 0x70
 80058e8:	4b55      	ldr	r3, [pc, #340]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 80058ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ec:	4a54      	ldr	r2, [pc, #336]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 80058ee:	f023 0304 	bic.w	r3, r3, #4
 80058f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d015      	beq.n	8005928 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fc:	f7fe fa44 	bl	8003d88 <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005902:	e00a      	b.n	800591a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005904:	f7fe fa40 	bl	8003d88 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005912:	4293      	cmp	r3, r2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e0cb      	b.n	8005ab2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800591a:	4b49      	ldr	r3, [pc, #292]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 800591c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0ee      	beq.n	8005904 <HAL_RCC_OscConfig+0x334>
 8005926:	e014      	b.n	8005952 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005928:	f7fe fa2e 	bl	8003d88 <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800592e:	e00a      	b.n	8005946 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005930:	f7fe fa2a 	bl	8003d88 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	f241 3288 	movw	r2, #5000	; 0x1388
 800593e:	4293      	cmp	r3, r2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e0b5      	b.n	8005ab2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005946:	4b3e      	ldr	r3, [pc, #248]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 8005948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1ee      	bne.n	8005930 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005952:	7dfb      	ldrb	r3, [r7, #23]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d105      	bne.n	8005964 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005958:	4b39      	ldr	r3, [pc, #228]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 800595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595c:	4a38      	ldr	r2, [pc, #224]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 800595e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005962:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 80a1 	beq.w	8005ab0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800596e:	4b34      	ldr	r3, [pc, #208]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 030c 	and.w	r3, r3, #12
 8005976:	2b08      	cmp	r3, #8
 8005978:	d05c      	beq.n	8005a34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d141      	bne.n	8005a06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005982:	4b31      	ldr	r3, [pc, #196]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005988:	f7fe f9fe 	bl	8003d88 <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005990:	f7fe f9fa 	bl	8003d88 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e087      	b.n	8005ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059a2:	4b27      	ldr	r3, [pc, #156]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1f0      	bne.n	8005990 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69da      	ldr	r2, [r3, #28]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	019b      	lsls	r3, r3, #6
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c4:	085b      	lsrs	r3, r3, #1
 80059c6:	3b01      	subs	r3, #1
 80059c8:	041b      	lsls	r3, r3, #16
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d0:	061b      	lsls	r3, r3, #24
 80059d2:	491b      	ldr	r1, [pc, #108]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059d8:	4b1b      	ldr	r3, [pc, #108]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 80059da:	2201      	movs	r2, #1
 80059dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059de:	f7fe f9d3 	bl	8003d88 <HAL_GetTick>
 80059e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e6:	f7fe f9cf 	bl	8003d88 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e05c      	b.n	8005ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059f8:	4b11      	ldr	r3, [pc, #68]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0f0      	beq.n	80059e6 <HAL_RCC_OscConfig+0x416>
 8005a04:	e054      	b.n	8005ab0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a06:	4b10      	ldr	r3, [pc, #64]	; (8005a48 <HAL_RCC_OscConfig+0x478>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0c:	f7fe f9bc 	bl	8003d88 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a14:	f7fe f9b8 	bl	8003d88 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e045      	b.n	8005ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a26:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <HAL_RCC_OscConfig+0x470>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f0      	bne.n	8005a14 <HAL_RCC_OscConfig+0x444>
 8005a32:	e03d      	b.n	8005ab0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d107      	bne.n	8005a4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e038      	b.n	8005ab2 <HAL_RCC_OscConfig+0x4e2>
 8005a40:	40023800 	.word	0x40023800
 8005a44:	40007000 	.word	0x40007000
 8005a48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a4c:	4b1b      	ldr	r3, [pc, #108]	; (8005abc <HAL_RCC_OscConfig+0x4ec>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d028      	beq.n	8005aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d121      	bne.n	8005aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d11a      	bne.n	8005aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d111      	bne.n	8005aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a92:	085b      	lsrs	r3, r3, #1
 8005a94:	3b01      	subs	r3, #1
 8005a96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d107      	bne.n	8005aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d001      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e000      	b.n	8005ab2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40023800 	.word	0x40023800

08005ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e0cc      	b.n	8005c6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ad4:	4b68      	ldr	r3, [pc, #416]	; (8005c78 <HAL_RCC_ClockConfig+0x1b8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d90c      	bls.n	8005afc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ae2:	4b65      	ldr	r3, [pc, #404]	; (8005c78 <HAL_RCC_ClockConfig+0x1b8>)
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	b2d2      	uxtb	r2, r2
 8005ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aea:	4b63      	ldr	r3, [pc, #396]	; (8005c78 <HAL_RCC_ClockConfig+0x1b8>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d001      	beq.n	8005afc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e0b8      	b.n	8005c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d020      	beq.n	8005b4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d005      	beq.n	8005b20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b14:	4b59      	ldr	r3, [pc, #356]	; (8005c7c <HAL_RCC_ClockConfig+0x1bc>)
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	4a58      	ldr	r2, [pc, #352]	; (8005c7c <HAL_RCC_ClockConfig+0x1bc>)
 8005b1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b2c:	4b53      	ldr	r3, [pc, #332]	; (8005c7c <HAL_RCC_ClockConfig+0x1bc>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	4a52      	ldr	r2, [pc, #328]	; (8005c7c <HAL_RCC_ClockConfig+0x1bc>)
 8005b32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b38:	4b50      	ldr	r3, [pc, #320]	; (8005c7c <HAL_RCC_ClockConfig+0x1bc>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	494d      	ldr	r1, [pc, #308]	; (8005c7c <HAL_RCC_ClockConfig+0x1bc>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d044      	beq.n	8005be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d107      	bne.n	8005b6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b5e:	4b47      	ldr	r3, [pc, #284]	; (8005c7c <HAL_RCC_ClockConfig+0x1bc>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d119      	bne.n	8005b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e07f      	b.n	8005c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d003      	beq.n	8005b7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d107      	bne.n	8005b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b7e:	4b3f      	ldr	r3, [pc, #252]	; (8005c7c <HAL_RCC_ClockConfig+0x1bc>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d109      	bne.n	8005b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e06f      	b.n	8005c6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b8e:	4b3b      	ldr	r3, [pc, #236]	; (8005c7c <HAL_RCC_ClockConfig+0x1bc>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e067      	b.n	8005c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b9e:	4b37      	ldr	r3, [pc, #220]	; (8005c7c <HAL_RCC_ClockConfig+0x1bc>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f023 0203 	bic.w	r2, r3, #3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	4934      	ldr	r1, [pc, #208]	; (8005c7c <HAL_RCC_ClockConfig+0x1bc>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bb0:	f7fe f8ea 	bl	8003d88 <HAL_GetTick>
 8005bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bb6:	e00a      	b.n	8005bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bb8:	f7fe f8e6 	bl	8003d88 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e04f      	b.n	8005c6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bce:	4b2b      	ldr	r3, [pc, #172]	; (8005c7c <HAL_RCC_ClockConfig+0x1bc>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 020c 	and.w	r2, r3, #12
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d1eb      	bne.n	8005bb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005be0:	4b25      	ldr	r3, [pc, #148]	; (8005c78 <HAL_RCC_ClockConfig+0x1b8>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d20c      	bcs.n	8005c08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bee:	4b22      	ldr	r3, [pc, #136]	; (8005c78 <HAL_RCC_ClockConfig+0x1b8>)
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf6:	4b20      	ldr	r3, [pc, #128]	; (8005c78 <HAL_RCC_ClockConfig+0x1b8>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d001      	beq.n	8005c08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e032      	b.n	8005c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d008      	beq.n	8005c26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c14:	4b19      	ldr	r3, [pc, #100]	; (8005c7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	4916      	ldr	r1, [pc, #88]	; (8005c7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d009      	beq.n	8005c46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c32:	4b12      	ldr	r3, [pc, #72]	; (8005c7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	490e      	ldr	r1, [pc, #56]	; (8005c7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c46:	f000 f821 	bl	8005c8c <HAL_RCC_GetSysClockFreq>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	091b      	lsrs	r3, r3, #4
 8005c52:	f003 030f 	and.w	r3, r3, #15
 8005c56:	490a      	ldr	r1, [pc, #40]	; (8005c80 <HAL_RCC_ClockConfig+0x1c0>)
 8005c58:	5ccb      	ldrb	r3, [r1, r3]
 8005c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c5e:	4a09      	ldr	r2, [pc, #36]	; (8005c84 <HAL_RCC_ClockConfig+0x1c4>)
 8005c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c62:	4b09      	ldr	r3, [pc, #36]	; (8005c88 <HAL_RCC_ClockConfig+0x1c8>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fe f84a 	bl	8003d00 <HAL_InitTick>

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	40023c00 	.word	0x40023c00
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	0800c68c 	.word	0x0800c68c
 8005c84:	20000040 	.word	0x20000040
 8005c88:	20000044 	.word	0x20000044

08005c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c90:	b090      	sub	sp, #64	; 0x40
 8005c92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c94:	2300      	movs	r3, #0
 8005c96:	637b      	str	r3, [r7, #52]	; 0x34
 8005c98:	2300      	movs	r3, #0
 8005c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ca4:	4b59      	ldr	r3, [pc, #356]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f003 030c 	and.w	r3, r3, #12
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d00d      	beq.n	8005ccc <HAL_RCC_GetSysClockFreq+0x40>
 8005cb0:	2b08      	cmp	r3, #8
 8005cb2:	f200 80a1 	bhi.w	8005df8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d002      	beq.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d003      	beq.n	8005cc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005cbe:	e09b      	b.n	8005df8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cc0:	4b53      	ldr	r3, [pc, #332]	; (8005e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8005cc2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005cc4:	e09b      	b.n	8005dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cc6:	4b53      	ldr	r3, [pc, #332]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8005cc8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005cca:	e098      	b.n	8005dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ccc:	4b4f      	ldr	r3, [pc, #316]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cd4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cd6:	4b4d      	ldr	r3, [pc, #308]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d028      	beq.n	8005d34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ce2:	4b4a      	ldr	r3, [pc, #296]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	099b      	lsrs	r3, r3, #6
 8005ce8:	2200      	movs	r2, #0
 8005cea:	623b      	str	r3, [r7, #32]
 8005cec:	627a      	str	r2, [r7, #36]	; 0x24
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	4b47      	ldr	r3, [pc, #284]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8005cf8:	fb03 f201 	mul.w	r2, r3, r1
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	fb00 f303 	mul.w	r3, r0, r3
 8005d02:	4413      	add	r3, r2
 8005d04:	4a43      	ldr	r2, [pc, #268]	; (8005e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8005d06:	fba0 1202 	umull	r1, r2, r0, r2
 8005d0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d0c:	460a      	mov	r2, r1
 8005d0e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d12:	4413      	add	r3, r2
 8005d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d18:	2200      	movs	r2, #0
 8005d1a:	61bb      	str	r3, [r7, #24]
 8005d1c:	61fa      	str	r2, [r7, #28]
 8005d1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005d26:	f7fa ff17 	bl	8000b58 <__aeabi_uldivmod>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4613      	mov	r3, r2
 8005d30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d32:	e053      	b.n	8005ddc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d34:	4b35      	ldr	r3, [pc, #212]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	099b      	lsrs	r3, r3, #6
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	613b      	str	r3, [r7, #16]
 8005d3e:	617a      	str	r2, [r7, #20]
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005d46:	f04f 0b00 	mov.w	fp, #0
 8005d4a:	4652      	mov	r2, sl
 8005d4c:	465b      	mov	r3, fp
 8005d4e:	f04f 0000 	mov.w	r0, #0
 8005d52:	f04f 0100 	mov.w	r1, #0
 8005d56:	0159      	lsls	r1, r3, #5
 8005d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d5c:	0150      	lsls	r0, r2, #5
 8005d5e:	4602      	mov	r2, r0
 8005d60:	460b      	mov	r3, r1
 8005d62:	ebb2 080a 	subs.w	r8, r2, sl
 8005d66:	eb63 090b 	sbc.w	r9, r3, fp
 8005d6a:	f04f 0200 	mov.w	r2, #0
 8005d6e:	f04f 0300 	mov.w	r3, #0
 8005d72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005d76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005d7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005d7e:	ebb2 0408 	subs.w	r4, r2, r8
 8005d82:	eb63 0509 	sbc.w	r5, r3, r9
 8005d86:	f04f 0200 	mov.w	r2, #0
 8005d8a:	f04f 0300 	mov.w	r3, #0
 8005d8e:	00eb      	lsls	r3, r5, #3
 8005d90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d94:	00e2      	lsls	r2, r4, #3
 8005d96:	4614      	mov	r4, r2
 8005d98:	461d      	mov	r5, r3
 8005d9a:	eb14 030a 	adds.w	r3, r4, sl
 8005d9e:	603b      	str	r3, [r7, #0]
 8005da0:	eb45 030b 	adc.w	r3, r5, fp
 8005da4:	607b      	str	r3, [r7, #4]
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	f04f 0300 	mov.w	r3, #0
 8005dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005db2:	4629      	mov	r1, r5
 8005db4:	028b      	lsls	r3, r1, #10
 8005db6:	4621      	mov	r1, r4
 8005db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	028a      	lsls	r2, r1, #10
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	60fa      	str	r2, [r7, #12]
 8005dcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dd0:	f7fa fec2 	bl	8000b58 <__aeabi_uldivmod>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4613      	mov	r3, r2
 8005dda:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ddc:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	0c1b      	lsrs	r3, r3, #16
 8005de2:	f003 0303 	and.w	r3, r3, #3
 8005de6:	3301      	adds	r3, #1
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005dec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005df6:	e002      	b.n	8005dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005df8:	4b05      	ldr	r3, [pc, #20]	; (8005e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8005dfa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3740      	adds	r7, #64	; 0x40
 8005e04:	46bd      	mov	sp, r7
 8005e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40023800 	.word	0x40023800
 8005e10:	00f42400 	.word	0x00f42400
 8005e14:	017d7840 	.word	0x017d7840

08005e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e1c:	4b03      	ldr	r3, [pc, #12]	; (8005e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	20000040 	.word	0x20000040

08005e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e34:	f7ff fff0 	bl	8005e18 <HAL_RCC_GetHCLKFreq>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	0a9b      	lsrs	r3, r3, #10
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	4903      	ldr	r1, [pc, #12]	; (8005e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e46:	5ccb      	ldrb	r3, [r1, r3]
 8005e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	40023800 	.word	0x40023800
 8005e54:	0800c69c 	.word	0x0800c69c

08005e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e5c:	f7ff ffdc 	bl	8005e18 <HAL_RCC_GetHCLKFreq>
 8005e60:	4602      	mov	r2, r0
 8005e62:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	0b5b      	lsrs	r3, r3, #13
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	4903      	ldr	r1, [pc, #12]	; (8005e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e6e:	5ccb      	ldrb	r3, [r1, r3]
 8005e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	40023800 	.word	0x40023800
 8005e7c:	0800c69c 	.word	0x0800c69c

08005e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e041      	b.n	8005f16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d106      	bne.n	8005eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fc f9fe 	bl	80022a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3304      	adds	r3, #4
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	f000 fe24 	bl	8006b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d001      	beq.n	8005f38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e044      	b.n	8005fc2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0201 	orr.w	r2, r2, #1
 8005f4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a1e      	ldr	r2, [pc, #120]	; (8005fd0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d018      	beq.n	8005f8c <HAL_TIM_Base_Start_IT+0x6c>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f62:	d013      	beq.n	8005f8c <HAL_TIM_Base_Start_IT+0x6c>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a1a      	ldr	r2, [pc, #104]	; (8005fd4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d00e      	beq.n	8005f8c <HAL_TIM_Base_Start_IT+0x6c>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a19      	ldr	r2, [pc, #100]	; (8005fd8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d009      	beq.n	8005f8c <HAL_TIM_Base_Start_IT+0x6c>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a17      	ldr	r2, [pc, #92]	; (8005fdc <HAL_TIM_Base_Start_IT+0xbc>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d004      	beq.n	8005f8c <HAL_TIM_Base_Start_IT+0x6c>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a16      	ldr	r2, [pc, #88]	; (8005fe0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d111      	bne.n	8005fb0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2b06      	cmp	r3, #6
 8005f9c:	d010      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f042 0201 	orr.w	r2, r2, #1
 8005fac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fae:	e007      	b.n	8005fc0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0201 	orr.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	40010000 	.word	0x40010000
 8005fd4:	40000400 	.word	0x40000400
 8005fd8:	40000800 	.word	0x40000800
 8005fdc:	40000c00 	.word	0x40000c00
 8005fe0:	40014000 	.word	0x40014000

08005fe4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0201 	bic.w	r2, r2, #1
 8005ffa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6a1a      	ldr	r2, [r3, #32]
 8006002:	f241 1311 	movw	r3, #4369	; 0x1111
 8006006:	4013      	ands	r3, r2
 8006008:	2b00      	cmp	r3, #0
 800600a:	d10f      	bne.n	800602c <HAL_TIM_Base_Stop_IT+0x48>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6a1a      	ldr	r2, [r3, #32]
 8006012:	f240 4344 	movw	r3, #1092	; 0x444
 8006016:	4013      	ands	r3, r2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d107      	bne.n	800602c <HAL_TIM_Base_Stop_IT+0x48>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 0201 	bic.w	r2, r2, #1
 800602a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e041      	b.n	80060d8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d106      	bne.n	800606e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f839 	bl	80060e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2202      	movs	r2, #2
 8006072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	3304      	adds	r3, #4
 800607e:	4619      	mov	r1, r3
 8006080:	4610      	mov	r0, r2
 8006082:	f000 fd43 	bl	8006b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d109      	bne.n	8006118 <HAL_TIM_PWM_Start+0x24>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b01      	cmp	r3, #1
 800610e:	bf14      	ite	ne
 8006110:	2301      	movne	r3, #1
 8006112:	2300      	moveq	r3, #0
 8006114:	b2db      	uxtb	r3, r3
 8006116:	e022      	b.n	800615e <HAL_TIM_PWM_Start+0x6a>
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2b04      	cmp	r3, #4
 800611c:	d109      	bne.n	8006132 <HAL_TIM_PWM_Start+0x3e>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b01      	cmp	r3, #1
 8006128:	bf14      	ite	ne
 800612a:	2301      	movne	r3, #1
 800612c:	2300      	moveq	r3, #0
 800612e:	b2db      	uxtb	r3, r3
 8006130:	e015      	b.n	800615e <HAL_TIM_PWM_Start+0x6a>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b08      	cmp	r3, #8
 8006136:	d109      	bne.n	800614c <HAL_TIM_PWM_Start+0x58>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b01      	cmp	r3, #1
 8006142:	bf14      	ite	ne
 8006144:	2301      	movne	r3, #1
 8006146:	2300      	moveq	r3, #0
 8006148:	b2db      	uxtb	r3, r3
 800614a:	e008      	b.n	800615e <HAL_TIM_PWM_Start+0x6a>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b01      	cmp	r3, #1
 8006156:	bf14      	ite	ne
 8006158:	2301      	movne	r3, #1
 800615a:	2300      	moveq	r3, #0
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e068      	b.n	8006238 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d104      	bne.n	8006176 <HAL_TIM_PWM_Start+0x82>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006174:	e013      	b.n	800619e <HAL_TIM_PWM_Start+0xaa>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b04      	cmp	r3, #4
 800617a:	d104      	bne.n	8006186 <HAL_TIM_PWM_Start+0x92>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006184:	e00b      	b.n	800619e <HAL_TIM_PWM_Start+0xaa>
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b08      	cmp	r3, #8
 800618a:	d104      	bne.n	8006196 <HAL_TIM_PWM_Start+0xa2>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006194:	e003      	b.n	800619e <HAL_TIM_PWM_Start+0xaa>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2202      	movs	r2, #2
 800619a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2201      	movs	r2, #1
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 ff56 	bl	8007058 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a23      	ldr	r2, [pc, #140]	; (8006240 <HAL_TIM_PWM_Start+0x14c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d107      	bne.n	80061c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a1d      	ldr	r2, [pc, #116]	; (8006240 <HAL_TIM_PWM_Start+0x14c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d018      	beq.n	8006202 <HAL_TIM_PWM_Start+0x10e>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d8:	d013      	beq.n	8006202 <HAL_TIM_PWM_Start+0x10e>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a19      	ldr	r2, [pc, #100]	; (8006244 <HAL_TIM_PWM_Start+0x150>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d00e      	beq.n	8006202 <HAL_TIM_PWM_Start+0x10e>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a17      	ldr	r2, [pc, #92]	; (8006248 <HAL_TIM_PWM_Start+0x154>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d009      	beq.n	8006202 <HAL_TIM_PWM_Start+0x10e>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a16      	ldr	r2, [pc, #88]	; (800624c <HAL_TIM_PWM_Start+0x158>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d004      	beq.n	8006202 <HAL_TIM_PWM_Start+0x10e>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a14      	ldr	r2, [pc, #80]	; (8006250 <HAL_TIM_PWM_Start+0x15c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d111      	bne.n	8006226 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2b06      	cmp	r3, #6
 8006212:	d010      	beq.n	8006236 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0201 	orr.w	r2, r2, #1
 8006222:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006224:	e007      	b.n	8006236 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0201 	orr.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	40010000 	.word	0x40010000
 8006244:	40000400 	.word	0x40000400
 8006248:	40000800 	.word	0x40000800
 800624c:	40000c00 	.word	0x40000c00
 8006250:	40014000 	.word	0x40014000

08006254 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2200      	movs	r2, #0
 8006264:	6839      	ldr	r1, [r7, #0]
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fef6 	bl	8007058 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a29      	ldr	r2, [pc, #164]	; (8006318 <HAL_TIM_PWM_Stop+0xc4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d117      	bne.n	80062a6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6a1a      	ldr	r2, [r3, #32]
 800627c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006280:	4013      	ands	r3, r2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10f      	bne.n	80062a6 <HAL_TIM_PWM_Stop+0x52>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6a1a      	ldr	r2, [r3, #32]
 800628c:	f240 4344 	movw	r3, #1092	; 0x444
 8006290:	4013      	ands	r3, r2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d107      	bne.n	80062a6 <HAL_TIM_PWM_Stop+0x52>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6a1a      	ldr	r2, [r3, #32]
 80062ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80062b0:	4013      	ands	r3, r2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10f      	bne.n	80062d6 <HAL_TIM_PWM_Stop+0x82>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6a1a      	ldr	r2, [r3, #32]
 80062bc:	f240 4344 	movw	r3, #1092	; 0x444
 80062c0:	4013      	ands	r3, r2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d107      	bne.n	80062d6 <HAL_TIM_PWM_Stop+0x82>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0201 	bic.w	r2, r2, #1
 80062d4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d104      	bne.n	80062e6 <HAL_TIM_PWM_Stop+0x92>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062e4:	e013      	b.n	800630e <HAL_TIM_PWM_Stop+0xba>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	d104      	bne.n	80062f6 <HAL_TIM_PWM_Stop+0xa2>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062f4:	e00b      	b.n	800630e <HAL_TIM_PWM_Stop+0xba>
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b08      	cmp	r3, #8
 80062fa:	d104      	bne.n	8006306 <HAL_TIM_PWM_Stop+0xb2>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006304:	e003      	b.n	800630e <HAL_TIM_PWM_Stop+0xba>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	40010000 	.word	0x40010000

0800631c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e097      	b.n	8006460 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	d106      	bne.n	800634a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7fb fff5 	bl	8002334 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2202      	movs	r2, #2
 800634e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6812      	ldr	r2, [r2, #0]
 800635c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006360:	f023 0307 	bic.w	r3, r3, #7
 8006364:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3304      	adds	r3, #4
 800636e:	4619      	mov	r1, r3
 8006370:	4610      	mov	r0, r2
 8006372:	f000 fbcb 	bl	8006b0c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800639e:	f023 0303 	bic.w	r3, r3, #3
 80063a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	021b      	lsls	r3, r3, #8
 80063ae:	4313      	orrs	r3, r2
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80063bc:	f023 030c 	bic.w	r3, r3, #12
 80063c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	021b      	lsls	r3, r3, #8
 80063d8:	4313      	orrs	r3, r2
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	011a      	lsls	r2, r3, #4
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	031b      	lsls	r3, r3, #12
 80063ec:	4313      	orrs	r3, r2
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80063fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006402:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	011b      	lsls	r3, r3, #4
 800640e:	4313      	orrs	r3, r2
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006478:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006480:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006488:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006490:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d110      	bne.n	80064ba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006498:	7bfb      	ldrb	r3, [r7, #15]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d102      	bne.n	80064a4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800649e:	7b7b      	ldrb	r3, [r7, #13]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d001      	beq.n	80064a8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e069      	b.n	800657c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064b8:	e031      	b.n	800651e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b04      	cmp	r3, #4
 80064be:	d110      	bne.n	80064e2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80064c0:	7bbb      	ldrb	r3, [r7, #14]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d102      	bne.n	80064cc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80064c6:	7b3b      	ldrb	r3, [r7, #12]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d001      	beq.n	80064d0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e055      	b.n	800657c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064e0:	e01d      	b.n	800651e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d108      	bne.n	80064fa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80064e8:	7bbb      	ldrb	r3, [r7, #14]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d105      	bne.n	80064fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064ee:	7b7b      	ldrb	r3, [r7, #13]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d102      	bne.n	80064fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80064f4:	7b3b      	ldrb	r3, [r7, #12]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d001      	beq.n	80064fe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e03e      	b.n	800657c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2202      	movs	r2, #2
 8006502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2202      	movs	r2, #2
 800650a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2202      	movs	r2, #2
 8006512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2202      	movs	r2, #2
 800651a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <HAL_TIM_Encoder_Start+0xc4>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b04      	cmp	r3, #4
 8006528:	d008      	beq.n	800653c <HAL_TIM_Encoder_Start+0xd4>
 800652a:	e00f      	b.n	800654c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2201      	movs	r2, #1
 8006532:	2100      	movs	r1, #0
 8006534:	4618      	mov	r0, r3
 8006536:	f000 fd8f 	bl	8007058 <TIM_CCxChannelCmd>
      break;
 800653a:	e016      	b.n	800656a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2201      	movs	r2, #1
 8006542:	2104      	movs	r1, #4
 8006544:	4618      	mov	r0, r3
 8006546:	f000 fd87 	bl	8007058 <TIM_CCxChannelCmd>
      break;
 800654a:	e00e      	b.n	800656a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2201      	movs	r2, #1
 8006552:	2100      	movs	r1, #0
 8006554:	4618      	mov	r0, r3
 8006556:	f000 fd7f 	bl	8007058 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2201      	movs	r2, #1
 8006560:	2104      	movs	r1, #4
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fd78 	bl	8007058 <TIM_CCxChannelCmd>
      break;
 8006568:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f042 0201 	orr.w	r2, r2, #1
 8006578:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b02      	cmp	r3, #2
 8006598:	d122      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d11b      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f06f 0202 	mvn.w	r2, #2
 80065b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	f003 0303 	and.w	r3, r3, #3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fa81 	bl	8006ace <HAL_TIM_IC_CaptureCallback>
 80065cc:	e005      	b.n	80065da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fa73 	bl	8006aba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fa84 	bl	8006ae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	f003 0304 	and.w	r3, r3, #4
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d122      	bne.n	8006634 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	d11b      	bne.n	8006634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f06f 0204 	mvn.w	r2, #4
 8006604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2202      	movs	r2, #2
 800660a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fa57 	bl	8006ace <HAL_TIM_IC_CaptureCallback>
 8006620:	e005      	b.n	800662e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fa49 	bl	8006aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fa5a 	bl	8006ae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	f003 0308 	and.w	r3, r3, #8
 800663e:	2b08      	cmp	r3, #8
 8006640:	d122      	bne.n	8006688 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f003 0308 	and.w	r3, r3, #8
 800664c:	2b08      	cmp	r3, #8
 800664e:	d11b      	bne.n	8006688 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f06f 0208 	mvn.w	r2, #8
 8006658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2204      	movs	r2, #4
 800665e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fa2d 	bl	8006ace <HAL_TIM_IC_CaptureCallback>
 8006674:	e005      	b.n	8006682 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fa1f 	bl	8006aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fa30 	bl	8006ae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f003 0310 	and.w	r3, r3, #16
 8006692:	2b10      	cmp	r3, #16
 8006694:	d122      	bne.n	80066dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f003 0310 	and.w	r3, r3, #16
 80066a0:	2b10      	cmp	r3, #16
 80066a2:	d11b      	bne.n	80066dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f06f 0210 	mvn.w	r2, #16
 80066ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2208      	movs	r2, #8
 80066b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d003      	beq.n	80066ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fa03 	bl	8006ace <HAL_TIM_IC_CaptureCallback>
 80066c8:	e005      	b.n	80066d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f9f5 	bl	8006aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fa06 	bl	8006ae2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d10e      	bne.n	8006708 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d107      	bne.n	8006708 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f06f 0201 	mvn.w	r2, #1
 8006700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f9cf 	bl	8006aa6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006712:	2b80      	cmp	r3, #128	; 0x80
 8006714:	d10e      	bne.n	8006734 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006720:	2b80      	cmp	r3, #128	; 0x80
 8006722:	d107      	bne.n	8006734 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800672c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fd82 	bl	8007238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673e:	2b40      	cmp	r3, #64	; 0x40
 8006740:	d10e      	bne.n	8006760 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674c:	2b40      	cmp	r3, #64	; 0x40
 800674e:	d107      	bne.n	8006760 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f9cb 	bl	8006af6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b20      	cmp	r3, #32
 800676c:	d10e      	bne.n	800678c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b20      	cmp	r3, #32
 800677a:	d107      	bne.n	800678c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f06f 0220 	mvn.w	r2, #32
 8006784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fd4c 	bl	8007224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800678c:	bf00      	nop
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d101      	bne.n	80067b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067ae:	2302      	movs	r3, #2
 80067b0:	e0ae      	b.n	8006910 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b0c      	cmp	r3, #12
 80067be:	f200 809f 	bhi.w	8006900 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80067c2:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080067fd 	.word	0x080067fd
 80067cc:	08006901 	.word	0x08006901
 80067d0:	08006901 	.word	0x08006901
 80067d4:	08006901 	.word	0x08006901
 80067d8:	0800683d 	.word	0x0800683d
 80067dc:	08006901 	.word	0x08006901
 80067e0:	08006901 	.word	0x08006901
 80067e4:	08006901 	.word	0x08006901
 80067e8:	0800687f 	.word	0x0800687f
 80067ec:	08006901 	.word	0x08006901
 80067f0:	08006901 	.word	0x08006901
 80067f4:	08006901 	.word	0x08006901
 80067f8:	080068bf 	.word	0x080068bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68b9      	ldr	r1, [r7, #8]
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fa02 	bl	8006c0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	699a      	ldr	r2, [r3, #24]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0208 	orr.w	r2, r2, #8
 8006816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699a      	ldr	r2, [r3, #24]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 0204 	bic.w	r2, r2, #4
 8006826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6999      	ldr	r1, [r3, #24]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	691a      	ldr	r2, [r3, #16]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	619a      	str	r2, [r3, #24]
      break;
 800683a:	e064      	b.n	8006906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68b9      	ldr	r1, [r7, #8]
 8006842:	4618      	mov	r0, r3
 8006844:	f000 fa48 	bl	8006cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699a      	ldr	r2, [r3, #24]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	699a      	ldr	r2, [r3, #24]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6999      	ldr	r1, [r3, #24]
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	021a      	lsls	r2, r3, #8
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	619a      	str	r2, [r3, #24]
      break;
 800687c:	e043      	b.n	8006906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68b9      	ldr	r1, [r7, #8]
 8006884:	4618      	mov	r0, r3
 8006886:	f000 fa93 	bl	8006db0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	69da      	ldr	r2, [r3, #28]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0208 	orr.w	r2, r2, #8
 8006898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	69da      	ldr	r2, [r3, #28]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0204 	bic.w	r2, r2, #4
 80068a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69d9      	ldr	r1, [r3, #28]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	691a      	ldr	r2, [r3, #16]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	61da      	str	r2, [r3, #28]
      break;
 80068bc:	e023      	b.n	8006906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68b9      	ldr	r1, [r7, #8]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 fadd 	bl	8006e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69da      	ldr	r2, [r3, #28]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69da      	ldr	r2, [r3, #28]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69d9      	ldr	r1, [r3, #28]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	021a      	lsls	r2, r3, #8
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	61da      	str	r2, [r3, #28]
      break;
 80068fe:	e002      	b.n	8006906 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	75fb      	strb	r3, [r7, #23]
      break;
 8006904:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800690e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3718      	adds	r7, #24
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <HAL_TIM_ConfigClockSource+0x1c>
 8006930:	2302      	movs	r3, #2
 8006932:	e0b4      	b.n	8006a9e <HAL_TIM_ConfigClockSource+0x186>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800695a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800696c:	d03e      	beq.n	80069ec <HAL_TIM_ConfigClockSource+0xd4>
 800696e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006972:	f200 8087 	bhi.w	8006a84 <HAL_TIM_ConfigClockSource+0x16c>
 8006976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697a:	f000 8086 	beq.w	8006a8a <HAL_TIM_ConfigClockSource+0x172>
 800697e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006982:	d87f      	bhi.n	8006a84 <HAL_TIM_ConfigClockSource+0x16c>
 8006984:	2b70      	cmp	r3, #112	; 0x70
 8006986:	d01a      	beq.n	80069be <HAL_TIM_ConfigClockSource+0xa6>
 8006988:	2b70      	cmp	r3, #112	; 0x70
 800698a:	d87b      	bhi.n	8006a84 <HAL_TIM_ConfigClockSource+0x16c>
 800698c:	2b60      	cmp	r3, #96	; 0x60
 800698e:	d050      	beq.n	8006a32 <HAL_TIM_ConfigClockSource+0x11a>
 8006990:	2b60      	cmp	r3, #96	; 0x60
 8006992:	d877      	bhi.n	8006a84 <HAL_TIM_ConfigClockSource+0x16c>
 8006994:	2b50      	cmp	r3, #80	; 0x50
 8006996:	d03c      	beq.n	8006a12 <HAL_TIM_ConfigClockSource+0xfa>
 8006998:	2b50      	cmp	r3, #80	; 0x50
 800699a:	d873      	bhi.n	8006a84 <HAL_TIM_ConfigClockSource+0x16c>
 800699c:	2b40      	cmp	r3, #64	; 0x40
 800699e:	d058      	beq.n	8006a52 <HAL_TIM_ConfigClockSource+0x13a>
 80069a0:	2b40      	cmp	r3, #64	; 0x40
 80069a2:	d86f      	bhi.n	8006a84 <HAL_TIM_ConfigClockSource+0x16c>
 80069a4:	2b30      	cmp	r3, #48	; 0x30
 80069a6:	d064      	beq.n	8006a72 <HAL_TIM_ConfigClockSource+0x15a>
 80069a8:	2b30      	cmp	r3, #48	; 0x30
 80069aa:	d86b      	bhi.n	8006a84 <HAL_TIM_ConfigClockSource+0x16c>
 80069ac:	2b20      	cmp	r3, #32
 80069ae:	d060      	beq.n	8006a72 <HAL_TIM_ConfigClockSource+0x15a>
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	d867      	bhi.n	8006a84 <HAL_TIM_ConfigClockSource+0x16c>
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d05c      	beq.n	8006a72 <HAL_TIM_ConfigClockSource+0x15a>
 80069b8:	2b10      	cmp	r3, #16
 80069ba:	d05a      	beq.n	8006a72 <HAL_TIM_ConfigClockSource+0x15a>
 80069bc:	e062      	b.n	8006a84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6818      	ldr	r0, [r3, #0]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	6899      	ldr	r1, [r3, #8]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f000 fb23 	bl	8007018 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	609a      	str	r2, [r3, #8]
      break;
 80069ea:	e04f      	b.n	8006a8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6818      	ldr	r0, [r3, #0]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	6899      	ldr	r1, [r3, #8]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f000 fb0c 	bl	8007018 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689a      	ldr	r2, [r3, #8]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a0e:	609a      	str	r2, [r3, #8]
      break;
 8006a10:	e03c      	b.n	8006a8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6818      	ldr	r0, [r3, #0]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	6859      	ldr	r1, [r3, #4]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f000 fa80 	bl	8006f24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2150      	movs	r1, #80	; 0x50
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fad9 	bl	8006fe2 <TIM_ITRx_SetConfig>
      break;
 8006a30:	e02c      	b.n	8006a8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6818      	ldr	r0, [r3, #0]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	6859      	ldr	r1, [r3, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f000 fa9f 	bl	8006f82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2160      	movs	r1, #96	; 0x60
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 fac9 	bl	8006fe2 <TIM_ITRx_SetConfig>
      break;
 8006a50:	e01c      	b.n	8006a8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6818      	ldr	r0, [r3, #0]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	6859      	ldr	r1, [r3, #4]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f000 fa60 	bl	8006f24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2140      	movs	r1, #64	; 0x40
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 fab9 	bl	8006fe2 <TIM_ITRx_SetConfig>
      break;
 8006a70:	e00c      	b.n	8006a8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	f000 fab0 	bl	8006fe2 <TIM_ITRx_SetConfig>
      break;
 8006a82:	e003      	b.n	8006a8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	73fb      	strb	r3, [r7, #15]
      break;
 8006a88:	e000      	b.n	8006a8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006aae:	bf00      	nop
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b083      	sub	sp, #12
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b083      	sub	sp, #12
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ad6:	bf00      	nop
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006aea:	bf00      	nop
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b083      	sub	sp, #12
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006afe:	bf00      	nop
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
	...

08006b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a34      	ldr	r2, [pc, #208]	; (8006bf0 <TIM_Base_SetConfig+0xe4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d00f      	beq.n	8006b44 <TIM_Base_SetConfig+0x38>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2a:	d00b      	beq.n	8006b44 <TIM_Base_SetConfig+0x38>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a31      	ldr	r2, [pc, #196]	; (8006bf4 <TIM_Base_SetConfig+0xe8>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d007      	beq.n	8006b44 <TIM_Base_SetConfig+0x38>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a30      	ldr	r2, [pc, #192]	; (8006bf8 <TIM_Base_SetConfig+0xec>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d003      	beq.n	8006b44 <TIM_Base_SetConfig+0x38>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a2f      	ldr	r2, [pc, #188]	; (8006bfc <TIM_Base_SetConfig+0xf0>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d108      	bne.n	8006b56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a25      	ldr	r2, [pc, #148]	; (8006bf0 <TIM_Base_SetConfig+0xe4>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d01b      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b64:	d017      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a22      	ldr	r2, [pc, #136]	; (8006bf4 <TIM_Base_SetConfig+0xe8>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d013      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a21      	ldr	r2, [pc, #132]	; (8006bf8 <TIM_Base_SetConfig+0xec>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00f      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a20      	ldr	r2, [pc, #128]	; (8006bfc <TIM_Base_SetConfig+0xf0>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00b      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a1f      	ldr	r2, [pc, #124]	; (8006c00 <TIM_Base_SetConfig+0xf4>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d007      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a1e      	ldr	r2, [pc, #120]	; (8006c04 <TIM_Base_SetConfig+0xf8>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d003      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a1d      	ldr	r2, [pc, #116]	; (8006c08 <TIM_Base_SetConfig+0xfc>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d108      	bne.n	8006ba8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a08      	ldr	r2, [pc, #32]	; (8006bf0 <TIM_Base_SetConfig+0xe4>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d103      	bne.n	8006bdc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	691a      	ldr	r2, [r3, #16]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	615a      	str	r2, [r3, #20]
}
 8006be2:	bf00      	nop
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	40010000 	.word	0x40010000
 8006bf4:	40000400 	.word	0x40000400
 8006bf8:	40000800 	.word	0x40000800
 8006bfc:	40000c00 	.word	0x40000c00
 8006c00:	40014000 	.word	0x40014000
 8006c04:	40014400 	.word	0x40014400
 8006c08:	40014800 	.word	0x40014800

08006c0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	f023 0201 	bic.w	r2, r3, #1
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f023 0303 	bic.w	r3, r3, #3
 8006c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f023 0302 	bic.w	r3, r3, #2
 8006c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a1c      	ldr	r2, [pc, #112]	; (8006cd4 <TIM_OC1_SetConfig+0xc8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d10c      	bne.n	8006c82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f023 0308 	bic.w	r3, r3, #8
 8006c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f023 0304 	bic.w	r3, r3, #4
 8006c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a13      	ldr	r2, [pc, #76]	; (8006cd4 <TIM_OC1_SetConfig+0xc8>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d111      	bne.n	8006cae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	621a      	str	r2, [r3, #32]
}
 8006cc8:	bf00      	nop
 8006cca:	371c      	adds	r7, #28
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	40010000 	.word	0x40010000

08006cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	f023 0210 	bic.w	r2, r3, #16
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	021b      	lsls	r3, r3, #8
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f023 0320 	bic.w	r3, r3, #32
 8006d22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	011b      	lsls	r3, r3, #4
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a1e      	ldr	r2, [pc, #120]	; (8006dac <TIM_OC2_SetConfig+0xd4>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d10d      	bne.n	8006d54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a15      	ldr	r2, [pc, #84]	; (8006dac <TIM_OC2_SetConfig+0xd4>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d113      	bne.n	8006d84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	621a      	str	r2, [r3, #32]
}
 8006d9e:	bf00      	nop
 8006da0:	371c      	adds	r7, #28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	40010000 	.word	0x40010000

08006db0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f023 0303 	bic.w	r3, r3, #3
 8006de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	021b      	lsls	r3, r3, #8
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a1d      	ldr	r2, [pc, #116]	; (8006e80 <TIM_OC3_SetConfig+0xd0>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d10d      	bne.n	8006e2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	021b      	lsls	r3, r3, #8
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a14      	ldr	r2, [pc, #80]	; (8006e80 <TIM_OC3_SetConfig+0xd0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d113      	bne.n	8006e5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	621a      	str	r2, [r3, #32]
}
 8006e74:	bf00      	nop
 8006e76:	371c      	adds	r7, #28
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	40010000 	.word	0x40010000

08006e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	021b      	lsls	r3, r3, #8
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	031b      	lsls	r3, r3, #12
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a10      	ldr	r2, [pc, #64]	; (8006f20 <TIM_OC4_SetConfig+0x9c>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d109      	bne.n	8006ef8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	019b      	lsls	r3, r3, #6
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	621a      	str	r2, [r3, #32]
}
 8006f12:	bf00      	nop
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	40010000 	.word	0x40010000

08006f24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	f023 0201 	bic.w	r2, r3, #1
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	011b      	lsls	r3, r3, #4
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f023 030a 	bic.w	r3, r3, #10
 8006f60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	621a      	str	r2, [r3, #32]
}
 8006f76:	bf00      	nop
 8006f78:	371c      	adds	r7, #28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b087      	sub	sp, #28
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	60f8      	str	r0, [r7, #12]
 8006f8a:	60b9      	str	r1, [r7, #8]
 8006f8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f023 0210 	bic.w	r2, r3, #16
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	031b      	lsls	r3, r3, #12
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	011b      	lsls	r3, r3, #4
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	621a      	str	r2, [r3, #32]
}
 8006fd6:	bf00      	nop
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b085      	sub	sp, #20
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	f043 0307 	orr.w	r3, r3, #7
 8007004:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	609a      	str	r2, [r3, #8]
}
 800700c:	bf00      	nop
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007032:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	021a      	lsls	r2, r3, #8
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	431a      	orrs	r2, r3
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	4313      	orrs	r3, r2
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	4313      	orrs	r3, r2
 8007044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	609a      	str	r2, [r3, #8]
}
 800704c:	bf00      	nop
 800704e:	371c      	adds	r7, #28
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007058:	b480      	push	{r7}
 800705a:	b087      	sub	sp, #28
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f003 031f 	and.w	r3, r3, #31
 800706a:	2201      	movs	r2, #1
 800706c:	fa02 f303 	lsl.w	r3, r2, r3
 8007070:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6a1a      	ldr	r2, [r3, #32]
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	43db      	mvns	r3, r3
 800707a:	401a      	ands	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a1a      	ldr	r2, [r3, #32]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	f003 031f 	and.w	r3, r3, #31
 800708a:	6879      	ldr	r1, [r7, #4]
 800708c:	fa01 f303 	lsl.w	r3, r1, r3
 8007090:	431a      	orrs	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	621a      	str	r2, [r3, #32]
}
 8007096:	bf00      	nop
 8007098:	371c      	adds	r7, #28
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
	...

080070a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d101      	bne.n	80070bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070b8:	2302      	movs	r3, #2
 80070ba:	e050      	b.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a1c      	ldr	r2, [pc, #112]	; (800716c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d018      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007108:	d013      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a18      	ldr	r2, [pc, #96]	; (8007170 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00e      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a16      	ldr	r2, [pc, #88]	; (8007174 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d009      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a15      	ldr	r2, [pc, #84]	; (8007178 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d004      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a13      	ldr	r2, [pc, #76]	; (800717c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d10c      	bne.n	800714c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007138:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	4313      	orrs	r3, r2
 8007142:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40010000 	.word	0x40010000
 8007170:	40000400 	.word	0x40000400
 8007174:	40000800 	.word	0x40000800
 8007178:	40000c00 	.word	0x40000c00
 800717c:	40014000 	.word	0x40014000

08007180 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800718a:	2300      	movs	r3, #0
 800718c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007194:	2b01      	cmp	r3, #1
 8007196:	d101      	bne.n	800719c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007198:	2302      	movs	r3, #2
 800719a:	e03d      	b.n	8007218 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	4313      	orrs	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4313      	orrs	r3, r2
 80071da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	4313      	orrs	r3, r2
 8007204:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e03f      	b.n	80072de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d106      	bne.n	8007278 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7fb f8de 	bl	8002434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2224      	movs	r2, #36	; 0x24
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68da      	ldr	r2, [r3, #12]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800728e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 ff9b 	bl	80081cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	691a      	ldr	r2, [r3, #16]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	695a      	ldr	r2, [r3, #20]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68da      	ldr	r2, [r3, #12]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b082      	sub	sp, #8
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e021      	b.n	800733c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2224      	movs	r2, #36	; 0x24
 80072fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68da      	ldr	r2, [r3, #12]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800730e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f7fb f979 	bl	8002608 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b08c      	sub	sp, #48	; 0x30
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	4613      	mov	r3, r2
 8007350:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b20      	cmp	r3, #32
 800735c:	d165      	bne.n	800742a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d002      	beq.n	800736a <HAL_UART_Transmit_DMA+0x26>
 8007364:	88fb      	ldrh	r3, [r7, #6]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e05e      	b.n	800742c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007374:	2b01      	cmp	r3, #1
 8007376:	d101      	bne.n	800737c <HAL_UART_Transmit_DMA+0x38>
 8007378:	2302      	movs	r3, #2
 800737a:	e057      	b.n	800742c <HAL_UART_Transmit_DMA+0xe8>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	88fa      	ldrh	r2, [r7, #6]
 800738e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	88fa      	ldrh	r2, [r7, #6]
 8007394:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2221      	movs	r2, #33	; 0x21
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a8:	4a22      	ldr	r2, [pc, #136]	; (8007434 <HAL_UART_Transmit_DMA+0xf0>)
 80073aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b0:	4a21      	ldr	r2, [pc, #132]	; (8007438 <HAL_UART_Transmit_DMA+0xf4>)
 80073b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b8:	4a20      	ldr	r2, [pc, #128]	; (800743c <HAL_UART_Transmit_DMA+0xf8>)
 80073ba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c0:	2200      	movs	r2, #0
 80073c2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80073c4:	f107 0308 	add.w	r3, r7, #8
 80073c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80073ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d0:	6819      	ldr	r1, [r3, #0]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3304      	adds	r3, #4
 80073d8:	461a      	mov	r2, r3
 80073da:	88fb      	ldrh	r3, [r7, #6]
 80073dc:	f7fd fb22 	bl	8004a24 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073e8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3314      	adds	r3, #20
 80073f8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	e853 3f00 	ldrex	r3, [r3]
 8007400:	617b      	str	r3, [r7, #20]
   return(result);
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007408:	62bb      	str	r3, [r7, #40]	; 0x28
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3314      	adds	r3, #20
 8007410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007412:	627a      	str	r2, [r7, #36]	; 0x24
 8007414:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007416:	6a39      	ldr	r1, [r7, #32]
 8007418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800741a:	e841 2300 	strex	r3, r2, [r1]
 800741e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1e5      	bne.n	80073f2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	e000      	b.n	800742c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800742a:	2302      	movs	r3, #2
  }
}
 800742c:	4618      	mov	r0, r3
 800742e:	3730      	adds	r7, #48	; 0x30
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	08007a65 	.word	0x08007a65
 8007438:	08007aff 	.word	0x08007aff
 800743c:	08007c77 	.word	0x08007c77

08007440 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b08c      	sub	sp, #48	; 0x30
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	4613      	mov	r3, r2
 800744c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b20      	cmp	r3, #32
 8007458:	d152      	bne.n	8007500 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007460:	88fb      	ldrh	r3, [r7, #6]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e04b      	b.n	8007502 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007470:	2b01      	cmp	r3, #1
 8007472:	d101      	bne.n	8007478 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8007474:	2302      	movs	r3, #2
 8007476:	e044      	b.n	8007502 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2201      	movs	r2, #1
 8007484:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007486:	88fb      	ldrh	r3, [r7, #6]
 8007488:	461a      	mov	r2, r3
 800748a:	68b9      	ldr	r1, [r7, #8]
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 fc3d 	bl	8007d0c <UART_Start_Receive_DMA>
 8007492:	4603      	mov	r3, r0
 8007494:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007498:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800749c:	2b00      	cmp	r3, #0
 800749e:	d12c      	bne.n	80074fa <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d125      	bne.n	80074f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074a8:	2300      	movs	r3, #0
 80074aa:	613b      	str	r3, [r7, #16]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	613b      	str	r3, [r7, #16]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	613b      	str	r3, [r7, #16]
 80074bc:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	330c      	adds	r3, #12
 80074c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	e853 3f00 	ldrex	r3, [r3]
 80074cc:	617b      	str	r3, [r7, #20]
   return(result);
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f043 0310 	orr.w	r3, r3, #16
 80074d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	330c      	adds	r3, #12
 80074dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074de:	627a      	str	r2, [r7, #36]	; 0x24
 80074e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e2:	6a39      	ldr	r1, [r7, #32]
 80074e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1e5      	bne.n	80074be <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80074f2:	e002      	b.n	80074fa <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80074fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074fe:	e000      	b.n	8007502 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8007500:	2302      	movs	r3, #2
  }
}
 8007502:	4618      	mov	r0, r3
 8007504:	3730      	adds	r7, #48	; 0x30
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b0ba      	sub	sp, #232	; 0xe8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007532:	2300      	movs	r3, #0
 8007534:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007538:	2300      	movs	r3, #0
 800753a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800753e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007542:	f003 030f 	and.w	r3, r3, #15
 8007546:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800754a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10f      	bne.n	8007572 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	2b00      	cmp	r3, #0
 800755c:	d009      	beq.n	8007572 <HAL_UART_IRQHandler+0x66>
 800755e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007562:	f003 0320 	and.w	r3, r3, #32
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fd73 	bl	8008056 <UART_Receive_IT>
      return;
 8007570:	e256      	b.n	8007a20 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007572:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 80de 	beq.w	8007738 <HAL_UART_IRQHandler+0x22c>
 800757c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	d106      	bne.n	8007596 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800758c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 80d1 	beq.w	8007738 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00b      	beq.n	80075ba <HAL_UART_IRQHandler+0xae>
 80075a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d005      	beq.n	80075ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	f043 0201 	orr.w	r2, r3, #1
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075be:	f003 0304 	and.w	r3, r3, #4
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00b      	beq.n	80075de <HAL_UART_IRQHandler+0xd2>
 80075c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d005      	beq.n	80075de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	f043 0202 	orr.w	r2, r3, #2
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00b      	beq.n	8007602 <HAL_UART_IRQHandler+0xf6>
 80075ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d005      	beq.n	8007602 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	f043 0204 	orr.w	r2, r3, #4
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007606:	f003 0308 	and.w	r3, r3, #8
 800760a:	2b00      	cmp	r3, #0
 800760c:	d011      	beq.n	8007632 <HAL_UART_IRQHandler+0x126>
 800760e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007612:	f003 0320 	and.w	r3, r3, #32
 8007616:	2b00      	cmp	r3, #0
 8007618:	d105      	bne.n	8007626 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800761a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d005      	beq.n	8007632 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	f043 0208 	orr.w	r2, r3, #8
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007636:	2b00      	cmp	r3, #0
 8007638:	f000 81ed 	beq.w	8007a16 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800763c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007640:	f003 0320 	and.w	r3, r3, #32
 8007644:	2b00      	cmp	r3, #0
 8007646:	d008      	beq.n	800765a <HAL_UART_IRQHandler+0x14e>
 8007648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800764c:	f003 0320 	and.w	r3, r3, #32
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fcfe 	bl	8008056 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007664:	2b40      	cmp	r3, #64	; 0x40
 8007666:	bf0c      	ite	eq
 8007668:	2301      	moveq	r3, #1
 800766a:	2300      	movne	r3, #0
 800766c:	b2db      	uxtb	r3, r3
 800766e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007676:	f003 0308 	and.w	r3, r3, #8
 800767a:	2b00      	cmp	r3, #0
 800767c:	d103      	bne.n	8007686 <HAL_UART_IRQHandler+0x17a>
 800767e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007682:	2b00      	cmp	r3, #0
 8007684:	d04f      	beq.n	8007726 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fc06 	bl	8007e98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007696:	2b40      	cmp	r3, #64	; 0x40
 8007698:	d141      	bne.n	800771e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	3314      	adds	r3, #20
 80076a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076a8:	e853 3f00 	ldrex	r3, [r3]
 80076ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3314      	adds	r3, #20
 80076c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80076de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1d9      	bne.n	800769a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d013      	beq.n	8007716 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f2:	4a7d      	ldr	r2, [pc, #500]	; (80078e8 <HAL_UART_IRQHandler+0x3dc>)
 80076f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fd fa5a 	bl	8004bb4 <HAL_DMA_Abort_IT>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d016      	beq.n	8007734 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007710:	4610      	mov	r0, r2
 8007712:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007714:	e00e      	b.n	8007734 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7fa fccc 	bl	80020b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800771c:	e00a      	b.n	8007734 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fa fcc8 	bl	80020b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007724:	e006      	b.n	8007734 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7fa fcc4 	bl	80020b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007732:	e170      	b.n	8007a16 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007734:	bf00      	nop
    return;
 8007736:	e16e      	b.n	8007a16 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773c:	2b01      	cmp	r3, #1
 800773e:	f040 814a 	bne.w	80079d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007746:	f003 0310 	and.w	r3, r3, #16
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 8143 	beq.w	80079d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007754:	f003 0310 	and.w	r3, r3, #16
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 813c 	beq.w	80079d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800775e:	2300      	movs	r3, #0
 8007760:	60bb      	str	r3, [r7, #8]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	60bb      	str	r3, [r7, #8]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	60bb      	str	r3, [r7, #8]
 8007772:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777e:	2b40      	cmp	r3, #64	; 0x40
 8007780:	f040 80b4 	bne.w	80078ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007790:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 8140 	beq.w	8007a1a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800779e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077a2:	429a      	cmp	r2, r3
 80077a4:	f080 8139 	bcs.w	8007a1a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ba:	f000 8088 	beq.w	80078ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	330c      	adds	r3, #12
 80077c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077cc:	e853 3f00 	ldrex	r3, [r3]
 80077d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	330c      	adds	r3, #12
 80077e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80077ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80077ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80077f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80077fa:	e841 2300 	strex	r3, r2, [r1]
 80077fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007802:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1d9      	bne.n	80077be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3314      	adds	r3, #20
 8007810:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800781a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800781c:	f023 0301 	bic.w	r3, r3, #1
 8007820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3314      	adds	r3, #20
 800782a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800782e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007832:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007834:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007836:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e1      	bne.n	800780a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3314      	adds	r3, #20
 800784c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800785c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3314      	adds	r3, #20
 8007866:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800786a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800786c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007870:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007872:	e841 2300 	strex	r3, r2, [r1]
 8007876:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e3      	bne.n	8007846 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2220      	movs	r2, #32
 8007882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	330c      	adds	r3, #12
 8007892:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007896:	e853 3f00 	ldrex	r3, [r3]
 800789a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800789c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800789e:	f023 0310 	bic.w	r3, r3, #16
 80078a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	330c      	adds	r3, #12
 80078ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80078b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80078b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078b8:	e841 2300 	strex	r3, r2, [r1]
 80078bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1e3      	bne.n	800788c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7fd f903 	bl	8004ad4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	b29b      	uxth	r3, r3
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fa fbd6 	bl	8002090 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078e4:	e099      	b.n	8007a1a <HAL_UART_IRQHandler+0x50e>
 80078e6:	bf00      	nop
 80078e8:	08007f5f 	.word	0x08007f5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007900:	b29b      	uxth	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 808b 	beq.w	8007a1e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007908:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 8086 	beq.w	8007a1e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	330c      	adds	r3, #12
 8007918:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007924:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007928:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	330c      	adds	r3, #12
 8007932:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007936:	647a      	str	r2, [r7, #68]	; 0x44
 8007938:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800793c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800793e:	e841 2300 	strex	r3, r2, [r1]
 8007942:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e3      	bne.n	8007912 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	3314      	adds	r3, #20
 8007950:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	e853 3f00 	ldrex	r3, [r3]
 8007958:	623b      	str	r3, [r7, #32]
   return(result);
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	f023 0301 	bic.w	r3, r3, #1
 8007960:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	3314      	adds	r3, #20
 800796a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800796e:	633a      	str	r2, [r7, #48]	; 0x30
 8007970:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007976:	e841 2300 	strex	r3, r2, [r1]
 800797a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800797c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1e3      	bne.n	800794a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2220      	movs	r2, #32
 8007986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	330c      	adds	r3, #12
 8007996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	e853 3f00 	ldrex	r3, [r3]
 800799e:	60fb      	str	r3, [r7, #12]
   return(result);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f023 0310 	bic.w	r3, r3, #16
 80079a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	330c      	adds	r3, #12
 80079b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80079b4:	61fa      	str	r2, [r7, #28]
 80079b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b8:	69b9      	ldr	r1, [r7, #24]
 80079ba:	69fa      	ldr	r2, [r7, #28]
 80079bc:	e841 2300 	strex	r3, r2, [r1]
 80079c0:	617b      	str	r3, [r7, #20]
   return(result);
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1e3      	bne.n	8007990 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7fa fb5e 	bl	8002090 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079d4:	e023      	b.n	8007a1e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80079d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d009      	beq.n	80079f6 <HAL_UART_IRQHandler+0x4ea>
 80079e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d003      	beq.n	80079f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fac9 	bl	8007f86 <UART_Transmit_IT>
    return;
 80079f4:	e014      	b.n	8007a20 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80079f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00e      	beq.n	8007a20 <HAL_UART_IRQHandler+0x514>
 8007a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d008      	beq.n	8007a20 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fb09 	bl	8008026 <UART_EndTransmit_IT>
    return;
 8007a14:	e004      	b.n	8007a20 <HAL_UART_IRQHandler+0x514>
    return;
 8007a16:	bf00      	nop
 8007a18:	e002      	b.n	8007a20 <HAL_UART_IRQHandler+0x514>
      return;
 8007a1a:	bf00      	nop
 8007a1c:	e000      	b.n	8007a20 <HAL_UART_IRQHandler+0x514>
      return;
 8007a1e:	bf00      	nop
  }
}
 8007a20:	37e8      	adds	r7, #232	; 0xe8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop

08007a28 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b090      	sub	sp, #64	; 0x40
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a70:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d137      	bne.n	8007af0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a82:	2200      	movs	r2, #0
 8007a84:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3314      	adds	r3, #20
 8007a8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	e853 3f00 	ldrex	r3, [r3]
 8007a94:	623b      	str	r3, [r7, #32]
   return(result);
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3314      	adds	r3, #20
 8007aa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007aa6:	633a      	str	r2, [r7, #48]	; 0x30
 8007aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aae:	e841 2300 	strex	r3, r2, [r1]
 8007ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1e5      	bne.n	8007a86 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	330c      	adds	r3, #12
 8007ac0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	e853 3f00 	ldrex	r3, [r3]
 8007ac8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	330c      	adds	r3, #12
 8007ad8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ada:	61fa      	str	r2, [r7, #28]
 8007adc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ade:	69b9      	ldr	r1, [r7, #24]
 8007ae0:	69fa      	ldr	r2, [r7, #28]
 8007ae2:	e841 2300 	strex	r3, r2, [r1]
 8007ae6:	617b      	str	r3, [r7, #20]
   return(result);
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1e5      	bne.n	8007aba <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007aee:	e002      	b.n	8007af6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007af0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007af2:	f7fa faf3 	bl	80020dc <HAL_UART_TxCpltCallback>
}
 8007af6:	bf00      	nop
 8007af8:	3740      	adds	r7, #64	; 0x40
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b084      	sub	sp, #16
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f7ff ff8b 	bl	8007a28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b12:	bf00      	nop
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b09c      	sub	sp, #112	; 0x70
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b26:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d172      	bne.n	8007c1c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b38:	2200      	movs	r2, #0
 8007b3a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	330c      	adds	r3, #12
 8007b42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b46:	e853 3f00 	ldrex	r3, [r3]
 8007b4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b52:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	330c      	adds	r3, #12
 8007b5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b64:	e841 2300 	strex	r3, r2, [r1]
 8007b68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1e5      	bne.n	8007b3c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3314      	adds	r3, #20
 8007b76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7a:	e853 3f00 	ldrex	r3, [r3]
 8007b7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b82:	f023 0301 	bic.w	r3, r3, #1
 8007b86:	667b      	str	r3, [r7, #100]	; 0x64
 8007b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3314      	adds	r3, #20
 8007b8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b90:	647a      	str	r2, [r7, #68]	; 0x44
 8007b92:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b98:	e841 2300 	strex	r3, r2, [r1]
 8007b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1e5      	bne.n	8007b70 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	3314      	adds	r3, #20
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	e853 3f00 	ldrex	r3, [r3]
 8007bb2:	623b      	str	r3, [r7, #32]
   return(result);
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bba:	663b      	str	r3, [r7, #96]	; 0x60
 8007bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3314      	adds	r3, #20
 8007bc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007bc4:	633a      	str	r2, [r7, #48]	; 0x30
 8007bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bcc:	e841 2300 	strex	r3, r2, [r1]
 8007bd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e5      	bne.n	8007ba4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bda:	2220      	movs	r2, #32
 8007bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d119      	bne.n	8007c1c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	330c      	adds	r3, #12
 8007bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	e853 3f00 	ldrex	r3, [r3]
 8007bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f023 0310 	bic.w	r3, r3, #16
 8007bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	330c      	adds	r3, #12
 8007c06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c08:	61fa      	str	r2, [r7, #28]
 8007c0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0c:	69b9      	ldr	r1, [r7, #24]
 8007c0e:	69fa      	ldr	r2, [r7, #28]
 8007c10:	e841 2300 	strex	r3, r2, [r1]
 8007c14:	617b      	str	r3, [r7, #20]
   return(result);
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1e5      	bne.n	8007be8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d106      	bne.n	8007c32 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c2c:	f7fa fa30 	bl	8002090 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c30:	e002      	b.n	8007c38 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007c32:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c34:	f7ff ff02 	bl	8007a3c <HAL_UART_RxCpltCallback>
}
 8007c38:	bf00      	nop
 8007c3a:	3770      	adds	r7, #112	; 0x70
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d108      	bne.n	8007c68 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c5a:	085b      	lsrs	r3, r3, #1
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	4619      	mov	r1, r3
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f7fa fa15 	bl	8002090 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c66:	e002      	b.n	8007c6e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f7ff fef1 	bl	8007a50 <HAL_UART_RxHalfCpltCallback>
}
 8007c6e:	bf00      	nop
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c86:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c92:	2b80      	cmp	r3, #128	; 0x80
 8007c94:	bf0c      	ite	eq
 8007c96:	2301      	moveq	r3, #1
 8007c98:	2300      	movne	r3, #0
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b21      	cmp	r3, #33	; 0x21
 8007ca8:	d108      	bne.n	8007cbc <UART_DMAError+0x46>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d005      	beq.n	8007cbc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007cb6:	68b8      	ldr	r0, [r7, #8]
 8007cb8:	f000 f8c6 	bl	8007e48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc6:	2b40      	cmp	r3, #64	; 0x40
 8007cc8:	bf0c      	ite	eq
 8007cca:	2301      	moveq	r3, #1
 8007ccc:	2300      	movne	r3, #0
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b22      	cmp	r3, #34	; 0x22
 8007cdc:	d108      	bne.n	8007cf0 <UART_DMAError+0x7a>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d005      	beq.n	8007cf0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007cea:	68b8      	ldr	r0, [r7, #8]
 8007cec:	f000 f8d4 	bl	8007e98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf4:	f043 0210 	orr.w	r2, r3, #16
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cfc:	68b8      	ldr	r0, [r7, #8]
 8007cfe:	f7fa f9d9 	bl	80020b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d02:	bf00      	nop
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
	...

08007d0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b098      	sub	sp, #96	; 0x60
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	4613      	mov	r3, r2
 8007d18:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	88fa      	ldrh	r2, [r7, #6]
 8007d24:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2222      	movs	r2, #34	; 0x22
 8007d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d38:	4a40      	ldr	r2, [pc, #256]	; (8007e3c <UART_Start_Receive_DMA+0x130>)
 8007d3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d40:	4a3f      	ldr	r2, [pc, #252]	; (8007e40 <UART_Start_Receive_DMA+0x134>)
 8007d42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d48:	4a3e      	ldr	r2, [pc, #248]	; (8007e44 <UART_Start_Receive_DMA+0x138>)
 8007d4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d50:	2200      	movs	r2, #0
 8007d52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007d54:	f107 0308 	add.w	r3, r7, #8
 8007d58:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3304      	adds	r3, #4
 8007d64:	4619      	mov	r1, r3
 8007d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	88fb      	ldrh	r3, [r7, #6]
 8007d6c:	f7fc fe5a 	bl	8004a24 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007d70:	2300      	movs	r3, #0
 8007d72:	613b      	str	r3, [r7, #16]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	613b      	str	r3, [r7, #16]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	613b      	str	r3, [r7, #16]
 8007d84:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d019      	beq.n	8007dca <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	330c      	adds	r3, #12
 8007d9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dac:	65bb      	str	r3, [r7, #88]	; 0x58
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	330c      	adds	r3, #12
 8007db4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007db6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007db8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007dbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dbe:	e841 2300 	strex	r3, r2, [r1]
 8007dc2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e5      	bne.n	8007d96 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3314      	adds	r3, #20
 8007dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ddc:	f043 0301 	orr.w	r3, r3, #1
 8007de0:	657b      	str	r3, [r7, #84]	; 0x54
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3314      	adds	r3, #20
 8007de8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007dea:	63ba      	str	r2, [r7, #56]	; 0x38
 8007dec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e5      	bne.n	8007dca <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3314      	adds	r3, #20
 8007e04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e14:	653b      	str	r3, [r7, #80]	; 0x50
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3314      	adds	r3, #20
 8007e1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e1e:	627a      	str	r2, [r7, #36]	; 0x24
 8007e20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	6a39      	ldr	r1, [r7, #32]
 8007e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1e5      	bne.n	8007dfe <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3760      	adds	r7, #96	; 0x60
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	08007b1b 	.word	0x08007b1b
 8007e40:	08007c41 	.word	0x08007c41
 8007e44:	08007c77 	.word	0x08007c77

08007e48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b089      	sub	sp, #36	; 0x24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	330c      	adds	r3, #12
 8007e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	e853 3f00 	ldrex	r3, [r3]
 8007e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007e66:	61fb      	str	r3, [r7, #28]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	330c      	adds	r3, #12
 8007e6e:	69fa      	ldr	r2, [r7, #28]
 8007e70:	61ba      	str	r2, [r7, #24]
 8007e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e74:	6979      	ldr	r1, [r7, #20]
 8007e76:	69ba      	ldr	r2, [r7, #24]
 8007e78:	e841 2300 	strex	r3, r2, [r1]
 8007e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1e5      	bne.n	8007e50 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2220      	movs	r2, #32
 8007e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007e8c:	bf00      	nop
 8007e8e:	3724      	adds	r7, #36	; 0x24
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b095      	sub	sp, #84	; 0x54
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	330c      	adds	r3, #12
 8007ea6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eaa:	e853 3f00 	ldrex	r3, [r3]
 8007eae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	330c      	adds	r3, #12
 8007ebe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ec0:	643a      	str	r2, [r7, #64]	; 0x40
 8007ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ec6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ec8:	e841 2300 	strex	r3, r2, [r1]
 8007ecc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1e5      	bne.n	8007ea0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	3314      	adds	r3, #20
 8007eda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007edc:	6a3b      	ldr	r3, [r7, #32]
 8007ede:	e853 3f00 	ldrex	r3, [r3]
 8007ee2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	f023 0301 	bic.w	r3, r3, #1
 8007eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3314      	adds	r3, #20
 8007ef2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ef4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007efc:	e841 2300 	strex	r3, r2, [r1]
 8007f00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e5      	bne.n	8007ed4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d119      	bne.n	8007f44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	330c      	adds	r3, #12
 8007f16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	e853 3f00 	ldrex	r3, [r3]
 8007f1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	f023 0310 	bic.w	r3, r3, #16
 8007f26:	647b      	str	r3, [r7, #68]	; 0x44
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	330c      	adds	r3, #12
 8007f2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f30:	61ba      	str	r2, [r7, #24]
 8007f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f34:	6979      	ldr	r1, [r7, #20]
 8007f36:	69ba      	ldr	r2, [r7, #24]
 8007f38:	e841 2300 	strex	r3, r2, [r1]
 8007f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1e5      	bne.n	8007f10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2220      	movs	r2, #32
 8007f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007f52:	bf00      	nop
 8007f54:	3754      	adds	r7, #84	; 0x54
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f7fa f89b 	bl	80020b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f7e:	bf00      	nop
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b085      	sub	sp, #20
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b21      	cmp	r3, #33	; 0x21
 8007f98:	d13e      	bne.n	8008018 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fa2:	d114      	bne.n	8007fce <UART_Transmit_IT+0x48>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d110      	bne.n	8007fce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a1b      	ldr	r3, [r3, #32]
 8007fb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fc0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	1c9a      	adds	r2, r3, #2
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	621a      	str	r2, [r3, #32]
 8007fcc:	e008      	b.n	8007fe0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	1c59      	adds	r1, r3, #1
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	6211      	str	r1, [r2, #32]
 8007fd8:	781a      	ldrb	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	4619      	mov	r1, r3
 8007fee:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10f      	bne.n	8008014 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68da      	ldr	r2, [r3, #12]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008002:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68da      	ldr	r2, [r3, #12]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008012:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	e000      	b.n	800801a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008018:	2302      	movs	r3, #2
  }
}
 800801a:	4618      	mov	r0, r3
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b082      	sub	sp, #8
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68da      	ldr	r2, [r3, #12]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800803c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2220      	movs	r2, #32
 8008042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7fa f848 	bl	80020dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b08c      	sub	sp, #48	; 0x30
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b22      	cmp	r3, #34	; 0x22
 8008068:	f040 80ab 	bne.w	80081c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008074:	d117      	bne.n	80080a6 <UART_Receive_IT+0x50>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d113      	bne.n	80080a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800807e:	2300      	movs	r3, #0
 8008080:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008086:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	b29b      	uxth	r3, r3
 8008090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008094:	b29a      	uxth	r2, r3
 8008096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008098:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809e:	1c9a      	adds	r2, r3, #2
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	629a      	str	r2, [r3, #40]	; 0x28
 80080a4:	e026      	b.n	80080f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80080ac:	2300      	movs	r3, #0
 80080ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080b8:	d007      	beq.n	80080ca <UART_Receive_IT+0x74>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10a      	bne.n	80080d8 <UART_Receive_IT+0x82>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d106      	bne.n	80080d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d4:	701a      	strb	r2, [r3, #0]
 80080d6:	e008      	b.n	80080ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e4:	b2da      	uxtb	r2, r3
 80080e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ee:	1c5a      	adds	r2, r3, #1
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	3b01      	subs	r3, #1
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	4619      	mov	r1, r3
 8008102:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008104:	2b00      	cmp	r3, #0
 8008106:	d15a      	bne.n	80081be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68da      	ldr	r2, [r3, #12]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f022 0220 	bic.w	r2, r2, #32
 8008116:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68da      	ldr	r2, [r3, #12]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008126:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	695a      	ldr	r2, [r3, #20]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 0201 	bic.w	r2, r2, #1
 8008136:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2220      	movs	r2, #32
 800813c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008144:	2b01      	cmp	r3, #1
 8008146:	d135      	bne.n	80081b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	330c      	adds	r3, #12
 8008154:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	e853 3f00 	ldrex	r3, [r3]
 800815c:	613b      	str	r3, [r7, #16]
   return(result);
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	f023 0310 	bic.w	r3, r3, #16
 8008164:	627b      	str	r3, [r7, #36]	; 0x24
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	330c      	adds	r3, #12
 800816c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800816e:	623a      	str	r2, [r7, #32]
 8008170:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008172:	69f9      	ldr	r1, [r7, #28]
 8008174:	6a3a      	ldr	r2, [r7, #32]
 8008176:	e841 2300 	strex	r3, r2, [r1]
 800817a:	61bb      	str	r3, [r7, #24]
   return(result);
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1e5      	bne.n	800814e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0310 	and.w	r3, r3, #16
 800818c:	2b10      	cmp	r3, #16
 800818e:	d10a      	bne.n	80081a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008190:	2300      	movs	r3, #0
 8008192:	60fb      	str	r3, [r7, #12]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	60fb      	str	r3, [r7, #12]
 80081a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7f9 ff6f 	bl	8002090 <HAL_UARTEx_RxEventCallback>
 80081b2:	e002      	b.n	80081ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7ff fc41 	bl	8007a3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	e002      	b.n	80081c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	e000      	b.n	80081c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80081c2:	2302      	movs	r3, #2
  }
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3730      	adds	r7, #48	; 0x30
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081d0:	b0c0      	sub	sp, #256	; 0x100
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80081e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e8:	68d9      	ldr	r1, [r3, #12]
 80081ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	ea40 0301 	orr.w	r3, r0, r1
 80081f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081fa:	689a      	ldr	r2, [r3, #8]
 80081fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	431a      	orrs	r2, r3
 8008204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	431a      	orrs	r2, r3
 800820c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	4313      	orrs	r3, r2
 8008214:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008224:	f021 010c 	bic.w	r1, r1, #12
 8008228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008232:	430b      	orrs	r3, r1
 8008234:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008246:	6999      	ldr	r1, [r3, #24]
 8008248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	ea40 0301 	orr.w	r3, r0, r1
 8008252:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	4b8f      	ldr	r3, [pc, #572]	; (8008498 <UART_SetConfig+0x2cc>)
 800825c:	429a      	cmp	r2, r3
 800825e:	d005      	beq.n	800826c <UART_SetConfig+0xa0>
 8008260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	4b8d      	ldr	r3, [pc, #564]	; (800849c <UART_SetConfig+0x2d0>)
 8008268:	429a      	cmp	r2, r3
 800826a:	d104      	bne.n	8008276 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800826c:	f7fd fdf4 	bl	8005e58 <HAL_RCC_GetPCLK2Freq>
 8008270:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008274:	e003      	b.n	800827e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008276:	f7fd fddb 	bl	8005e30 <HAL_RCC_GetPCLK1Freq>
 800827a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800827e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008282:	69db      	ldr	r3, [r3, #28]
 8008284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008288:	f040 810c 	bne.w	80084a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800828c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008290:	2200      	movs	r2, #0
 8008292:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008296:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800829a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800829e:	4622      	mov	r2, r4
 80082a0:	462b      	mov	r3, r5
 80082a2:	1891      	adds	r1, r2, r2
 80082a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80082a6:	415b      	adcs	r3, r3
 80082a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80082ae:	4621      	mov	r1, r4
 80082b0:	eb12 0801 	adds.w	r8, r2, r1
 80082b4:	4629      	mov	r1, r5
 80082b6:	eb43 0901 	adc.w	r9, r3, r1
 80082ba:	f04f 0200 	mov.w	r2, #0
 80082be:	f04f 0300 	mov.w	r3, #0
 80082c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082ce:	4690      	mov	r8, r2
 80082d0:	4699      	mov	r9, r3
 80082d2:	4623      	mov	r3, r4
 80082d4:	eb18 0303 	adds.w	r3, r8, r3
 80082d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082dc:	462b      	mov	r3, r5
 80082de:	eb49 0303 	adc.w	r3, r9, r3
 80082e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80082e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80082f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80082fa:	460b      	mov	r3, r1
 80082fc:	18db      	adds	r3, r3, r3
 80082fe:	653b      	str	r3, [r7, #80]	; 0x50
 8008300:	4613      	mov	r3, r2
 8008302:	eb42 0303 	adc.w	r3, r2, r3
 8008306:	657b      	str	r3, [r7, #84]	; 0x54
 8008308:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800830c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008310:	f7f8 fc22 	bl	8000b58 <__aeabi_uldivmod>
 8008314:	4602      	mov	r2, r0
 8008316:	460b      	mov	r3, r1
 8008318:	4b61      	ldr	r3, [pc, #388]	; (80084a0 <UART_SetConfig+0x2d4>)
 800831a:	fba3 2302 	umull	r2, r3, r3, r2
 800831e:	095b      	lsrs	r3, r3, #5
 8008320:	011c      	lsls	r4, r3, #4
 8008322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008326:	2200      	movs	r2, #0
 8008328:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800832c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008330:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008334:	4642      	mov	r2, r8
 8008336:	464b      	mov	r3, r9
 8008338:	1891      	adds	r1, r2, r2
 800833a:	64b9      	str	r1, [r7, #72]	; 0x48
 800833c:	415b      	adcs	r3, r3
 800833e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008340:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008344:	4641      	mov	r1, r8
 8008346:	eb12 0a01 	adds.w	sl, r2, r1
 800834a:	4649      	mov	r1, r9
 800834c:	eb43 0b01 	adc.w	fp, r3, r1
 8008350:	f04f 0200 	mov.w	r2, #0
 8008354:	f04f 0300 	mov.w	r3, #0
 8008358:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800835c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008360:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008364:	4692      	mov	sl, r2
 8008366:	469b      	mov	fp, r3
 8008368:	4643      	mov	r3, r8
 800836a:	eb1a 0303 	adds.w	r3, sl, r3
 800836e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008372:	464b      	mov	r3, r9
 8008374:	eb4b 0303 	adc.w	r3, fp, r3
 8008378:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800837c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008388:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800838c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008390:	460b      	mov	r3, r1
 8008392:	18db      	adds	r3, r3, r3
 8008394:	643b      	str	r3, [r7, #64]	; 0x40
 8008396:	4613      	mov	r3, r2
 8008398:	eb42 0303 	adc.w	r3, r2, r3
 800839c:	647b      	str	r3, [r7, #68]	; 0x44
 800839e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80083a6:	f7f8 fbd7 	bl	8000b58 <__aeabi_uldivmod>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	4611      	mov	r1, r2
 80083b0:	4b3b      	ldr	r3, [pc, #236]	; (80084a0 <UART_SetConfig+0x2d4>)
 80083b2:	fba3 2301 	umull	r2, r3, r3, r1
 80083b6:	095b      	lsrs	r3, r3, #5
 80083b8:	2264      	movs	r2, #100	; 0x64
 80083ba:	fb02 f303 	mul.w	r3, r2, r3
 80083be:	1acb      	subs	r3, r1, r3
 80083c0:	00db      	lsls	r3, r3, #3
 80083c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80083c6:	4b36      	ldr	r3, [pc, #216]	; (80084a0 <UART_SetConfig+0x2d4>)
 80083c8:	fba3 2302 	umull	r2, r3, r3, r2
 80083cc:	095b      	lsrs	r3, r3, #5
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083d4:	441c      	add	r4, r3
 80083d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083da:	2200      	movs	r2, #0
 80083dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80083e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80083e8:	4642      	mov	r2, r8
 80083ea:	464b      	mov	r3, r9
 80083ec:	1891      	adds	r1, r2, r2
 80083ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80083f0:	415b      	adcs	r3, r3
 80083f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80083f8:	4641      	mov	r1, r8
 80083fa:	1851      	adds	r1, r2, r1
 80083fc:	6339      	str	r1, [r7, #48]	; 0x30
 80083fe:	4649      	mov	r1, r9
 8008400:	414b      	adcs	r3, r1
 8008402:	637b      	str	r3, [r7, #52]	; 0x34
 8008404:	f04f 0200 	mov.w	r2, #0
 8008408:	f04f 0300 	mov.w	r3, #0
 800840c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008410:	4659      	mov	r1, fp
 8008412:	00cb      	lsls	r3, r1, #3
 8008414:	4651      	mov	r1, sl
 8008416:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800841a:	4651      	mov	r1, sl
 800841c:	00ca      	lsls	r2, r1, #3
 800841e:	4610      	mov	r0, r2
 8008420:	4619      	mov	r1, r3
 8008422:	4603      	mov	r3, r0
 8008424:	4642      	mov	r2, r8
 8008426:	189b      	adds	r3, r3, r2
 8008428:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800842c:	464b      	mov	r3, r9
 800842e:	460a      	mov	r2, r1
 8008430:	eb42 0303 	adc.w	r3, r2, r3
 8008434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008444:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008448:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800844c:	460b      	mov	r3, r1
 800844e:	18db      	adds	r3, r3, r3
 8008450:	62bb      	str	r3, [r7, #40]	; 0x28
 8008452:	4613      	mov	r3, r2
 8008454:	eb42 0303 	adc.w	r3, r2, r3
 8008458:	62fb      	str	r3, [r7, #44]	; 0x2c
 800845a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800845e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008462:	f7f8 fb79 	bl	8000b58 <__aeabi_uldivmod>
 8008466:	4602      	mov	r2, r0
 8008468:	460b      	mov	r3, r1
 800846a:	4b0d      	ldr	r3, [pc, #52]	; (80084a0 <UART_SetConfig+0x2d4>)
 800846c:	fba3 1302 	umull	r1, r3, r3, r2
 8008470:	095b      	lsrs	r3, r3, #5
 8008472:	2164      	movs	r1, #100	; 0x64
 8008474:	fb01 f303 	mul.w	r3, r1, r3
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	00db      	lsls	r3, r3, #3
 800847c:	3332      	adds	r3, #50	; 0x32
 800847e:	4a08      	ldr	r2, [pc, #32]	; (80084a0 <UART_SetConfig+0x2d4>)
 8008480:	fba2 2303 	umull	r2, r3, r2, r3
 8008484:	095b      	lsrs	r3, r3, #5
 8008486:	f003 0207 	and.w	r2, r3, #7
 800848a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4422      	add	r2, r4
 8008492:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008494:	e105      	b.n	80086a2 <UART_SetConfig+0x4d6>
 8008496:	bf00      	nop
 8008498:	40011000 	.word	0x40011000
 800849c:	40011400 	.word	0x40011400
 80084a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084a8:	2200      	movs	r2, #0
 80084aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80084ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80084b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80084b6:	4642      	mov	r2, r8
 80084b8:	464b      	mov	r3, r9
 80084ba:	1891      	adds	r1, r2, r2
 80084bc:	6239      	str	r1, [r7, #32]
 80084be:	415b      	adcs	r3, r3
 80084c0:	627b      	str	r3, [r7, #36]	; 0x24
 80084c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084c6:	4641      	mov	r1, r8
 80084c8:	1854      	adds	r4, r2, r1
 80084ca:	4649      	mov	r1, r9
 80084cc:	eb43 0501 	adc.w	r5, r3, r1
 80084d0:	f04f 0200 	mov.w	r2, #0
 80084d4:	f04f 0300 	mov.w	r3, #0
 80084d8:	00eb      	lsls	r3, r5, #3
 80084da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084de:	00e2      	lsls	r2, r4, #3
 80084e0:	4614      	mov	r4, r2
 80084e2:	461d      	mov	r5, r3
 80084e4:	4643      	mov	r3, r8
 80084e6:	18e3      	adds	r3, r4, r3
 80084e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084ec:	464b      	mov	r3, r9
 80084ee:	eb45 0303 	adc.w	r3, r5, r3
 80084f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80084f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008502:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008506:	f04f 0200 	mov.w	r2, #0
 800850a:	f04f 0300 	mov.w	r3, #0
 800850e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008512:	4629      	mov	r1, r5
 8008514:	008b      	lsls	r3, r1, #2
 8008516:	4621      	mov	r1, r4
 8008518:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800851c:	4621      	mov	r1, r4
 800851e:	008a      	lsls	r2, r1, #2
 8008520:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008524:	f7f8 fb18 	bl	8000b58 <__aeabi_uldivmod>
 8008528:	4602      	mov	r2, r0
 800852a:	460b      	mov	r3, r1
 800852c:	4b60      	ldr	r3, [pc, #384]	; (80086b0 <UART_SetConfig+0x4e4>)
 800852e:	fba3 2302 	umull	r2, r3, r3, r2
 8008532:	095b      	lsrs	r3, r3, #5
 8008534:	011c      	lsls	r4, r3, #4
 8008536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800853a:	2200      	movs	r2, #0
 800853c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008540:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008544:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008548:	4642      	mov	r2, r8
 800854a:	464b      	mov	r3, r9
 800854c:	1891      	adds	r1, r2, r2
 800854e:	61b9      	str	r1, [r7, #24]
 8008550:	415b      	adcs	r3, r3
 8008552:	61fb      	str	r3, [r7, #28]
 8008554:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008558:	4641      	mov	r1, r8
 800855a:	1851      	adds	r1, r2, r1
 800855c:	6139      	str	r1, [r7, #16]
 800855e:	4649      	mov	r1, r9
 8008560:	414b      	adcs	r3, r1
 8008562:	617b      	str	r3, [r7, #20]
 8008564:	f04f 0200 	mov.w	r2, #0
 8008568:	f04f 0300 	mov.w	r3, #0
 800856c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008570:	4659      	mov	r1, fp
 8008572:	00cb      	lsls	r3, r1, #3
 8008574:	4651      	mov	r1, sl
 8008576:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800857a:	4651      	mov	r1, sl
 800857c:	00ca      	lsls	r2, r1, #3
 800857e:	4610      	mov	r0, r2
 8008580:	4619      	mov	r1, r3
 8008582:	4603      	mov	r3, r0
 8008584:	4642      	mov	r2, r8
 8008586:	189b      	adds	r3, r3, r2
 8008588:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800858c:	464b      	mov	r3, r9
 800858e:	460a      	mov	r2, r1
 8008590:	eb42 0303 	adc.w	r3, r2, r3
 8008594:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80085a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80085a4:	f04f 0200 	mov.w	r2, #0
 80085a8:	f04f 0300 	mov.w	r3, #0
 80085ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80085b0:	4649      	mov	r1, r9
 80085b2:	008b      	lsls	r3, r1, #2
 80085b4:	4641      	mov	r1, r8
 80085b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085ba:	4641      	mov	r1, r8
 80085bc:	008a      	lsls	r2, r1, #2
 80085be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80085c2:	f7f8 fac9 	bl	8000b58 <__aeabi_uldivmod>
 80085c6:	4602      	mov	r2, r0
 80085c8:	460b      	mov	r3, r1
 80085ca:	4b39      	ldr	r3, [pc, #228]	; (80086b0 <UART_SetConfig+0x4e4>)
 80085cc:	fba3 1302 	umull	r1, r3, r3, r2
 80085d0:	095b      	lsrs	r3, r3, #5
 80085d2:	2164      	movs	r1, #100	; 0x64
 80085d4:	fb01 f303 	mul.w	r3, r1, r3
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	011b      	lsls	r3, r3, #4
 80085dc:	3332      	adds	r3, #50	; 0x32
 80085de:	4a34      	ldr	r2, [pc, #208]	; (80086b0 <UART_SetConfig+0x4e4>)
 80085e0:	fba2 2303 	umull	r2, r3, r2, r3
 80085e4:	095b      	lsrs	r3, r3, #5
 80085e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085ea:	441c      	add	r4, r3
 80085ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085f0:	2200      	movs	r2, #0
 80085f2:	673b      	str	r3, [r7, #112]	; 0x70
 80085f4:	677a      	str	r2, [r7, #116]	; 0x74
 80085f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80085fa:	4642      	mov	r2, r8
 80085fc:	464b      	mov	r3, r9
 80085fe:	1891      	adds	r1, r2, r2
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	415b      	adcs	r3, r3
 8008604:	60fb      	str	r3, [r7, #12]
 8008606:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800860a:	4641      	mov	r1, r8
 800860c:	1851      	adds	r1, r2, r1
 800860e:	6039      	str	r1, [r7, #0]
 8008610:	4649      	mov	r1, r9
 8008612:	414b      	adcs	r3, r1
 8008614:	607b      	str	r3, [r7, #4]
 8008616:	f04f 0200 	mov.w	r2, #0
 800861a:	f04f 0300 	mov.w	r3, #0
 800861e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008622:	4659      	mov	r1, fp
 8008624:	00cb      	lsls	r3, r1, #3
 8008626:	4651      	mov	r1, sl
 8008628:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800862c:	4651      	mov	r1, sl
 800862e:	00ca      	lsls	r2, r1, #3
 8008630:	4610      	mov	r0, r2
 8008632:	4619      	mov	r1, r3
 8008634:	4603      	mov	r3, r0
 8008636:	4642      	mov	r2, r8
 8008638:	189b      	adds	r3, r3, r2
 800863a:	66bb      	str	r3, [r7, #104]	; 0x68
 800863c:	464b      	mov	r3, r9
 800863e:	460a      	mov	r2, r1
 8008640:	eb42 0303 	adc.w	r3, r2, r3
 8008644:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	663b      	str	r3, [r7, #96]	; 0x60
 8008650:	667a      	str	r2, [r7, #100]	; 0x64
 8008652:	f04f 0200 	mov.w	r2, #0
 8008656:	f04f 0300 	mov.w	r3, #0
 800865a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800865e:	4649      	mov	r1, r9
 8008660:	008b      	lsls	r3, r1, #2
 8008662:	4641      	mov	r1, r8
 8008664:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008668:	4641      	mov	r1, r8
 800866a:	008a      	lsls	r2, r1, #2
 800866c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008670:	f7f8 fa72 	bl	8000b58 <__aeabi_uldivmod>
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	4b0d      	ldr	r3, [pc, #52]	; (80086b0 <UART_SetConfig+0x4e4>)
 800867a:	fba3 1302 	umull	r1, r3, r3, r2
 800867e:	095b      	lsrs	r3, r3, #5
 8008680:	2164      	movs	r1, #100	; 0x64
 8008682:	fb01 f303 	mul.w	r3, r1, r3
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	011b      	lsls	r3, r3, #4
 800868a:	3332      	adds	r3, #50	; 0x32
 800868c:	4a08      	ldr	r2, [pc, #32]	; (80086b0 <UART_SetConfig+0x4e4>)
 800868e:	fba2 2303 	umull	r2, r3, r2, r3
 8008692:	095b      	lsrs	r3, r3, #5
 8008694:	f003 020f 	and.w	r2, r3, #15
 8008698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4422      	add	r2, r4
 80086a0:	609a      	str	r2, [r3, #8]
}
 80086a2:	bf00      	nop
 80086a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80086a8:	46bd      	mov	sp, r7
 80086aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086ae:	bf00      	nop
 80086b0:	51eb851f 	.word	0x51eb851f

080086b4 <__NVIC_SetPriority>:
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	4603      	mov	r3, r0
 80086bc:	6039      	str	r1, [r7, #0]
 80086be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	db0a      	blt.n	80086de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	b2da      	uxtb	r2, r3
 80086cc:	490c      	ldr	r1, [pc, #48]	; (8008700 <__NVIC_SetPriority+0x4c>)
 80086ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086d2:	0112      	lsls	r2, r2, #4
 80086d4:	b2d2      	uxtb	r2, r2
 80086d6:	440b      	add	r3, r1
 80086d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80086dc:	e00a      	b.n	80086f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	4908      	ldr	r1, [pc, #32]	; (8008704 <__NVIC_SetPriority+0x50>)
 80086e4:	79fb      	ldrb	r3, [r7, #7]
 80086e6:	f003 030f 	and.w	r3, r3, #15
 80086ea:	3b04      	subs	r3, #4
 80086ec:	0112      	lsls	r2, r2, #4
 80086ee:	b2d2      	uxtb	r2, r2
 80086f0:	440b      	add	r3, r1
 80086f2:	761a      	strb	r2, [r3, #24]
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr
 8008700:	e000e100 	.word	0xe000e100
 8008704:	e000ed00 	.word	0xe000ed00

08008708 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800870c:	2100      	movs	r1, #0
 800870e:	f06f 0004 	mvn.w	r0, #4
 8008712:	f7ff ffcf 	bl	80086b4 <__NVIC_SetPriority>
#endif
}
 8008716:	bf00      	nop
 8008718:	bd80      	pop	{r7, pc}
	...

0800871c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008722:	f3ef 8305 	mrs	r3, IPSR
 8008726:	603b      	str	r3, [r7, #0]
  return(result);
 8008728:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800872e:	f06f 0305 	mvn.w	r3, #5
 8008732:	607b      	str	r3, [r7, #4]
 8008734:	e00c      	b.n	8008750 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008736:	4b0a      	ldr	r3, [pc, #40]	; (8008760 <osKernelInitialize+0x44>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d105      	bne.n	800874a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800873e:	4b08      	ldr	r3, [pc, #32]	; (8008760 <osKernelInitialize+0x44>)
 8008740:	2201      	movs	r2, #1
 8008742:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008744:	2300      	movs	r3, #0
 8008746:	607b      	str	r3, [r7, #4]
 8008748:	e002      	b.n	8008750 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800874a:	f04f 33ff 	mov.w	r3, #4294967295
 800874e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008750:	687b      	ldr	r3, [r7, #4]
}
 8008752:	4618      	mov	r0, r3
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	200008a0 	.word	0x200008a0

08008764 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800876a:	f3ef 8305 	mrs	r3, IPSR
 800876e:	603b      	str	r3, [r7, #0]
  return(result);
 8008770:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008772:	2b00      	cmp	r3, #0
 8008774:	d003      	beq.n	800877e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008776:	f06f 0305 	mvn.w	r3, #5
 800877a:	607b      	str	r3, [r7, #4]
 800877c:	e010      	b.n	80087a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800877e:	4b0b      	ldr	r3, [pc, #44]	; (80087ac <osKernelStart+0x48>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d109      	bne.n	800879a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008786:	f7ff ffbf 	bl	8008708 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800878a:	4b08      	ldr	r3, [pc, #32]	; (80087ac <osKernelStart+0x48>)
 800878c:	2202      	movs	r2, #2
 800878e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008790:	f001 f87c 	bl	800988c <vTaskStartScheduler>
      stat = osOK;
 8008794:	2300      	movs	r3, #0
 8008796:	607b      	str	r3, [r7, #4]
 8008798:	e002      	b.n	80087a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800879a:	f04f 33ff 	mov.w	r3, #4294967295
 800879e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80087a0:	687b      	ldr	r3, [r7, #4]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	200008a0 	.word	0x200008a0

080087b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b08e      	sub	sp, #56	; 0x38
 80087b4:	af04      	add	r7, sp, #16
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80087bc:	2300      	movs	r3, #0
 80087be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087c0:	f3ef 8305 	mrs	r3, IPSR
 80087c4:	617b      	str	r3, [r7, #20]
  return(result);
 80087c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d17e      	bne.n	80088ca <osThreadNew+0x11a>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d07b      	beq.n	80088ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80087d2:	2380      	movs	r3, #128	; 0x80
 80087d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80087d6:	2318      	movs	r3, #24
 80087d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80087da:	2300      	movs	r3, #0
 80087dc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80087de:	f04f 33ff 	mov.w	r3, #4294967295
 80087e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d045      	beq.n	8008876 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d002      	beq.n	80087f8 <osThreadNew+0x48>
        name = attr->name;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d008      	beq.n	800881e <osThreadNew+0x6e>
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	2b38      	cmp	r3, #56	; 0x38
 8008810:	d805      	bhi.n	800881e <osThreadNew+0x6e>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	2b00      	cmp	r3, #0
 800881c:	d001      	beq.n	8008822 <osThreadNew+0x72>
        return (NULL);
 800881e:	2300      	movs	r3, #0
 8008820:	e054      	b.n	80088cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	089b      	lsrs	r3, r3, #2
 8008830:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00e      	beq.n	8008858 <osThreadNew+0xa8>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	2bbb      	cmp	r3, #187	; 0xbb
 8008840:	d90a      	bls.n	8008858 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008846:	2b00      	cmp	r3, #0
 8008848:	d006      	beq.n	8008858 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d002      	beq.n	8008858 <osThreadNew+0xa8>
        mem = 1;
 8008852:	2301      	movs	r3, #1
 8008854:	61bb      	str	r3, [r7, #24]
 8008856:	e010      	b.n	800887a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10c      	bne.n	800887a <osThreadNew+0xca>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d108      	bne.n	800887a <osThreadNew+0xca>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d104      	bne.n	800887a <osThreadNew+0xca>
          mem = 0;
 8008870:	2300      	movs	r3, #0
 8008872:	61bb      	str	r3, [r7, #24]
 8008874:	e001      	b.n	800887a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008876:	2300      	movs	r3, #0
 8008878:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d110      	bne.n	80088a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008888:	9202      	str	r2, [sp, #8]
 800888a:	9301      	str	r3, [sp, #4]
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	6a3a      	ldr	r2, [r7, #32]
 8008894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f000 fe0c 	bl	80094b4 <xTaskCreateStatic>
 800889c:	4603      	mov	r3, r0
 800889e:	613b      	str	r3, [r7, #16]
 80088a0:	e013      	b.n	80088ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d110      	bne.n	80088ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80088a8:	6a3b      	ldr	r3, [r7, #32]
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	f107 0310 	add.w	r3, r7, #16
 80088b0:	9301      	str	r3, [sp, #4]
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f000 fe57 	bl	800956e <xTaskCreate>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d001      	beq.n	80088ca <osThreadNew+0x11a>
            hTask = NULL;
 80088c6:	2300      	movs	r3, #0
 80088c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80088ca:	693b      	ldr	r3, [r7, #16]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3728      	adds	r7, #40	; 0x28
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088dc:	f3ef 8305 	mrs	r3, IPSR
 80088e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80088e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d003      	beq.n	80088f0 <osDelay+0x1c>
    stat = osErrorISR;
 80088e8:	f06f 0305 	mvn.w	r3, #5
 80088ec:	60fb      	str	r3, [r7, #12]
 80088ee:	e007      	b.n	8008900 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <osDelay+0x2c>
      vTaskDelay(ticks);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 ff92 	bl	8009824 <vTaskDelay>
    }
  }

  return (stat);
 8008900:	68fb      	ldr	r3, [r7, #12]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
	...

0800890c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4a07      	ldr	r2, [pc, #28]	; (8008938 <vApplicationGetIdleTaskMemory+0x2c>)
 800891c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	4a06      	ldr	r2, [pc, #24]	; (800893c <vApplicationGetIdleTaskMemory+0x30>)
 8008922:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2280      	movs	r2, #128	; 0x80
 8008928:	601a      	str	r2, [r3, #0]
}
 800892a:	bf00      	nop
 800892c:	3714      	adds	r7, #20
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	200008a4 	.word	0x200008a4
 800893c:	20000960 	.word	0x20000960

08008940 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4a07      	ldr	r2, [pc, #28]	; (800896c <vApplicationGetTimerTaskMemory+0x2c>)
 8008950:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	4a06      	ldr	r2, [pc, #24]	; (8008970 <vApplicationGetTimerTaskMemory+0x30>)
 8008956:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800895e:	601a      	str	r2, [r3, #0]
}
 8008960:	bf00      	nop
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	20000b60 	.word	0x20000b60
 8008970:	20000c1c 	.word	0x20000c1c

08008974 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f103 0208 	add.w	r2, r3, #8
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f04f 32ff 	mov.w	r2, #4294967295
 800898c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f103 0208 	add.w	r2, r3, #8
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f103 0208 	add.w	r2, r3, #8
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80089c2:	bf00      	nop
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089ce:	b480      	push	{r7}
 80089d0:	b085      	sub	sp, #20
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
 80089d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	689a      	ldr	r2, [r3, #8]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	1c5a      	adds	r2, r3, #1
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	601a      	str	r2, [r3, #0]
}
 8008a0a:	bf00      	nop
 8008a0c:	3714      	adds	r7, #20
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a16:	b480      	push	{r7}
 8008a18:	b085      	sub	sp, #20
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2c:	d103      	bne.n	8008a36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	e00c      	b.n	8008a50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	3308      	adds	r3, #8
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	e002      	b.n	8008a44 <vListInsert+0x2e>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d2f6      	bcs.n	8008a3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	683a      	ldr	r2, [r7, #0]
 8008a6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	1c5a      	adds	r2, r3, #1
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	601a      	str	r2, [r3, #0]
}
 8008a7c:	bf00      	nop
 8008a7e:	3714      	adds	r7, #20
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	6892      	ldr	r2, [r2, #8]
 8008a9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	6852      	ldr	r2, [r2, #4]
 8008aa8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d103      	bne.n	8008abc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	689a      	ldr	r2, [r3, #8]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	1e5a      	subs	r2, r3, #1
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10a      	bne.n	8008b06 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008b02:	bf00      	nop
 8008b04:	e7fe      	b.n	8008b04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008b06:	f002 f875 	bl	800abf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b12:	68f9      	ldr	r1, [r7, #12]
 8008b14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b16:	fb01 f303 	mul.w	r3, r1, r3
 8008b1a:	441a      	add	r2, r3
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b36:	3b01      	subs	r3, #1
 8008b38:	68f9      	ldr	r1, [r7, #12]
 8008b3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b3c:	fb01 f303 	mul.w	r3, r1, r3
 8008b40:	441a      	add	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	22ff      	movs	r2, #255	; 0xff
 8008b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	22ff      	movs	r2, #255	; 0xff
 8008b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d114      	bne.n	8008b86 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d01a      	beq.n	8008b9a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	3310      	adds	r3, #16
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f001 f929 	bl	8009dc0 <xTaskRemoveFromEventList>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d012      	beq.n	8008b9a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008b74:	4b0c      	ldr	r3, [pc, #48]	; (8008ba8 <xQueueGenericReset+0xcc>)
 8008b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b7a:	601a      	str	r2, [r3, #0]
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	e009      	b.n	8008b9a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	3310      	adds	r3, #16
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7ff fef2 	bl	8008974 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	3324      	adds	r3, #36	; 0x24
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7ff feed 	bl	8008974 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008b9a:	f002 f85b 	bl	800ac54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008b9e:	2301      	movs	r3, #1
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	e000ed04 	.word	0xe000ed04

08008bac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08e      	sub	sp, #56	; 0x38
 8008bb0:	af02      	add	r7, sp, #8
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10a      	bne.n	8008bd6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008bd2:	bf00      	nop
 8008bd4:	e7fe      	b.n	8008bd4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10a      	bne.n	8008bf2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be0:	f383 8811 	msr	BASEPRI, r3
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008bee:	bf00      	nop
 8008bf0:	e7fe      	b.n	8008bf0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d002      	beq.n	8008bfe <xQueueGenericCreateStatic+0x52>
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d001      	beq.n	8008c02 <xQueueGenericCreateStatic+0x56>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e000      	b.n	8008c04 <xQueueGenericCreateStatic+0x58>
 8008c02:	2300      	movs	r3, #0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d10a      	bne.n	8008c1e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	623b      	str	r3, [r7, #32]
}
 8008c1a:	bf00      	nop
 8008c1c:	e7fe      	b.n	8008c1c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d102      	bne.n	8008c2a <xQueueGenericCreateStatic+0x7e>
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d101      	bne.n	8008c2e <xQueueGenericCreateStatic+0x82>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e000      	b.n	8008c30 <xQueueGenericCreateStatic+0x84>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10a      	bne.n	8008c4a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	61fb      	str	r3, [r7, #28]
}
 8008c46:	bf00      	nop
 8008c48:	e7fe      	b.n	8008c48 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008c4a:	2350      	movs	r3, #80	; 0x50
 8008c4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	2b50      	cmp	r3, #80	; 0x50
 8008c52:	d00a      	beq.n	8008c6a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c58:	f383 8811 	msr	BASEPRI, r3
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	61bb      	str	r3, [r7, #24]
}
 8008c66:	bf00      	nop
 8008c68:	e7fe      	b.n	8008c68 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008c6a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00d      	beq.n	8008c92 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c7e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	4613      	mov	r3, r2
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	68b9      	ldr	r1, [r7, #8]
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f000 f805 	bl	8008c9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3730      	adds	r7, #48	; 0x30
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
 8008ca8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d103      	bne.n	8008cb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	69ba      	ldr	r2, [r7, #24]
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	e002      	b.n	8008cbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	68ba      	ldr	r2, [r7, #8]
 8008cc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008cca:	2101      	movs	r1, #1
 8008ccc:	69b8      	ldr	r0, [r7, #24]
 8008cce:	f7ff ff05 	bl	8008adc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	78fa      	ldrb	r2, [r7, #3]
 8008cd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008cda:	bf00      	nop
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
	...

08008ce4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b08e      	sub	sp, #56	; 0x38
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
 8008cf0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10a      	bne.n	8008d16 <xQueueGenericSend+0x32>
	__asm volatile
 8008d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d12:	bf00      	nop
 8008d14:	e7fe      	b.n	8008d14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d103      	bne.n	8008d24 <xQueueGenericSend+0x40>
 8008d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <xQueueGenericSend+0x44>
 8008d24:	2301      	movs	r3, #1
 8008d26:	e000      	b.n	8008d2a <xQueueGenericSend+0x46>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10a      	bne.n	8008d44 <xQueueGenericSend+0x60>
	__asm volatile
 8008d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d40:	bf00      	nop
 8008d42:	e7fe      	b.n	8008d42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d103      	bne.n	8008d52 <xQueueGenericSend+0x6e>
 8008d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d101      	bne.n	8008d56 <xQueueGenericSend+0x72>
 8008d52:	2301      	movs	r3, #1
 8008d54:	e000      	b.n	8008d58 <xQueueGenericSend+0x74>
 8008d56:	2300      	movs	r3, #0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d10a      	bne.n	8008d72 <xQueueGenericSend+0x8e>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	623b      	str	r3, [r7, #32]
}
 8008d6e:	bf00      	nop
 8008d70:	e7fe      	b.n	8008d70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d72:	f001 f9e7 	bl	800a144 <xTaskGetSchedulerState>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d102      	bne.n	8008d82 <xQueueGenericSend+0x9e>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d101      	bne.n	8008d86 <xQueueGenericSend+0xa2>
 8008d82:	2301      	movs	r3, #1
 8008d84:	e000      	b.n	8008d88 <xQueueGenericSend+0xa4>
 8008d86:	2300      	movs	r3, #0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d10a      	bne.n	8008da2 <xQueueGenericSend+0xbe>
	__asm volatile
 8008d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	61fb      	str	r3, [r7, #28]
}
 8008d9e:	bf00      	nop
 8008da0:	e7fe      	b.n	8008da0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008da2:	f001 ff27 	bl	800abf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d302      	bcc.n	8008db8 <xQueueGenericSend+0xd4>
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d129      	bne.n	8008e0c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008db8:	683a      	ldr	r2, [r7, #0]
 8008dba:	68b9      	ldr	r1, [r7, #8]
 8008dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dbe:	f000 fa0b 	bl	80091d8 <prvCopyDataToQueue>
 8008dc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d010      	beq.n	8008dee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dce:	3324      	adds	r3, #36	; 0x24
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 fff5 	bl	8009dc0 <xTaskRemoveFromEventList>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d013      	beq.n	8008e04 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ddc:	4b3f      	ldr	r3, [pc, #252]	; (8008edc <xQueueGenericSend+0x1f8>)
 8008dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008de2:	601a      	str	r2, [r3, #0]
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	e00a      	b.n	8008e04 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d007      	beq.n	8008e04 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008df4:	4b39      	ldr	r3, [pc, #228]	; (8008edc <xQueueGenericSend+0x1f8>)
 8008df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dfa:	601a      	str	r2, [r3, #0]
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e04:	f001 ff26 	bl	800ac54 <vPortExitCritical>
				return pdPASS;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e063      	b.n	8008ed4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d103      	bne.n	8008e1a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e12:	f001 ff1f 	bl	800ac54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008e16:	2300      	movs	r3, #0
 8008e18:	e05c      	b.n	8008ed4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d106      	bne.n	8008e2e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e20:	f107 0314 	add.w	r3, r7, #20
 8008e24:	4618      	mov	r0, r3
 8008e26:	f001 f82f 	bl	8009e88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e2e:	f001 ff11 	bl	800ac54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e32:	f000 fd9b 	bl	800996c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e36:	f001 fedd 	bl	800abf4 <vPortEnterCritical>
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e40:	b25b      	sxtb	r3, r3
 8008e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e46:	d103      	bne.n	8008e50 <xQueueGenericSend+0x16c>
 8008e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e56:	b25b      	sxtb	r3, r3
 8008e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e5c:	d103      	bne.n	8008e66 <xQueueGenericSend+0x182>
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e66:	f001 fef5 	bl	800ac54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e6a:	1d3a      	adds	r2, r7, #4
 8008e6c:	f107 0314 	add.w	r3, r7, #20
 8008e70:	4611      	mov	r1, r2
 8008e72:	4618      	mov	r0, r3
 8008e74:	f001 f81e 	bl	8009eb4 <xTaskCheckForTimeOut>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d124      	bne.n	8008ec8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008e7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e80:	f000 faa2 	bl	80093c8 <prvIsQueueFull>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d018      	beq.n	8008ebc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8c:	3310      	adds	r3, #16
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	4611      	mov	r1, r2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 ff44 	bl	8009d20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e9a:	f000 fa2d 	bl	80092f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008e9e:	f000 fd73 	bl	8009988 <xTaskResumeAll>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f47f af7c 	bne.w	8008da2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008eaa:	4b0c      	ldr	r3, [pc, #48]	; (8008edc <xQueueGenericSend+0x1f8>)
 8008eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb0:	601a      	str	r2, [r3, #0]
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	f3bf 8f6f 	isb	sy
 8008eba:	e772      	b.n	8008da2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ebe:	f000 fa1b 	bl	80092f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ec2:	f000 fd61 	bl	8009988 <xTaskResumeAll>
 8008ec6:	e76c      	b.n	8008da2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008eca:	f000 fa15 	bl	80092f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ece:	f000 fd5b 	bl	8009988 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008ed2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3738      	adds	r7, #56	; 0x38
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	e000ed04 	.word	0xe000ed04

08008ee0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b090      	sub	sp, #64	; 0x40
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
 8008eec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10a      	bne.n	8008f0e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efc:	f383 8811 	msr	BASEPRI, r3
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f0a:	bf00      	nop
 8008f0c:	e7fe      	b.n	8008f0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d103      	bne.n	8008f1c <xQueueGenericSendFromISR+0x3c>
 8008f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d101      	bne.n	8008f20 <xQueueGenericSendFromISR+0x40>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e000      	b.n	8008f22 <xQueueGenericSendFromISR+0x42>
 8008f20:	2300      	movs	r3, #0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10a      	bne.n	8008f3c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f38:	bf00      	nop
 8008f3a:	e7fe      	b.n	8008f3a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d103      	bne.n	8008f4a <xQueueGenericSendFromISR+0x6a>
 8008f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d101      	bne.n	8008f4e <xQueueGenericSendFromISR+0x6e>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e000      	b.n	8008f50 <xQueueGenericSendFromISR+0x70>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10a      	bne.n	8008f6a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	623b      	str	r3, [r7, #32]
}
 8008f66:	bf00      	nop
 8008f68:	e7fe      	b.n	8008f68 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f6a:	f001 ff25 	bl	800adb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008f6e:	f3ef 8211 	mrs	r2, BASEPRI
 8008f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	61fa      	str	r2, [r7, #28]
 8008f84:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008f86:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f88:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d302      	bcc.n	8008f9c <xQueueGenericSendFromISR+0xbc>
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d12f      	bne.n	8008ffc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008faa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fac:	683a      	ldr	r2, [r7, #0]
 8008fae:	68b9      	ldr	r1, [r7, #8]
 8008fb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008fb2:	f000 f911 	bl	80091d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008fb6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fbe:	d112      	bne.n	8008fe6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d016      	beq.n	8008ff6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fca:	3324      	adds	r3, #36	; 0x24
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 fef7 	bl	8009dc0 <xTaskRemoveFromEventList>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00e      	beq.n	8008ff6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00b      	beq.n	8008ff6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	601a      	str	r2, [r3, #0]
 8008fe4:	e007      	b.n	8008ff6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008fe6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008fea:	3301      	adds	r3, #1
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	b25a      	sxtb	r2, r3
 8008ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008ffa:	e001      	b.n	8009000 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009002:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800900a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800900c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800900e:	4618      	mov	r0, r3
 8009010:	3740      	adds	r7, #64	; 0x40
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
	...

08009018 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b08c      	sub	sp, #48	; 0x30
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009024:	2300      	movs	r3, #0
 8009026:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800902c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10a      	bne.n	8009048 <xQueueReceive+0x30>
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	623b      	str	r3, [r7, #32]
}
 8009044:	bf00      	nop
 8009046:	e7fe      	b.n	8009046 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d103      	bne.n	8009056 <xQueueReceive+0x3e>
 800904e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <xQueueReceive+0x42>
 8009056:	2301      	movs	r3, #1
 8009058:	e000      	b.n	800905c <xQueueReceive+0x44>
 800905a:	2300      	movs	r3, #0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10a      	bne.n	8009076 <xQueueReceive+0x5e>
	__asm volatile
 8009060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	61fb      	str	r3, [r7, #28]
}
 8009072:	bf00      	nop
 8009074:	e7fe      	b.n	8009074 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009076:	f001 f865 	bl	800a144 <xTaskGetSchedulerState>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d102      	bne.n	8009086 <xQueueReceive+0x6e>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d101      	bne.n	800908a <xQueueReceive+0x72>
 8009086:	2301      	movs	r3, #1
 8009088:	e000      	b.n	800908c <xQueueReceive+0x74>
 800908a:	2300      	movs	r3, #0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10a      	bne.n	80090a6 <xQueueReceive+0x8e>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	61bb      	str	r3, [r7, #24]
}
 80090a2:	bf00      	nop
 80090a4:	e7fe      	b.n	80090a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090a6:	f001 fda5 	bl	800abf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d01f      	beq.n	80090f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80090b6:	68b9      	ldr	r1, [r7, #8]
 80090b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090ba:	f000 f8f7 	bl	80092ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80090be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c0:	1e5a      	subs	r2, r3, #1
 80090c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00f      	beq.n	80090ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d0:	3310      	adds	r3, #16
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 fe74 	bl	8009dc0 <xTaskRemoveFromEventList>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d007      	beq.n	80090ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80090de:	4b3d      	ldr	r3, [pc, #244]	; (80091d4 <xQueueReceive+0x1bc>)
 80090e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090e4:	601a      	str	r2, [r3, #0]
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80090ee:	f001 fdb1 	bl	800ac54 <vPortExitCritical>
				return pdPASS;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e069      	b.n	80091ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d103      	bne.n	8009104 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090fc:	f001 fdaa 	bl	800ac54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009100:	2300      	movs	r3, #0
 8009102:	e062      	b.n	80091ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009106:	2b00      	cmp	r3, #0
 8009108:	d106      	bne.n	8009118 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800910a:	f107 0310 	add.w	r3, r7, #16
 800910e:	4618      	mov	r0, r3
 8009110:	f000 feba 	bl	8009e88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009114:	2301      	movs	r3, #1
 8009116:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009118:	f001 fd9c 	bl	800ac54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800911c:	f000 fc26 	bl	800996c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009120:	f001 fd68 	bl	800abf4 <vPortEnterCritical>
 8009124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009126:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800912a:	b25b      	sxtb	r3, r3
 800912c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009130:	d103      	bne.n	800913a <xQueueReceive+0x122>
 8009132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009134:	2200      	movs	r2, #0
 8009136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800913a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009140:	b25b      	sxtb	r3, r3
 8009142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009146:	d103      	bne.n	8009150 <xQueueReceive+0x138>
 8009148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009150:	f001 fd80 	bl	800ac54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009154:	1d3a      	adds	r2, r7, #4
 8009156:	f107 0310 	add.w	r3, r7, #16
 800915a:	4611      	mov	r1, r2
 800915c:	4618      	mov	r0, r3
 800915e:	f000 fea9 	bl	8009eb4 <xTaskCheckForTimeOut>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d123      	bne.n	80091b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800916a:	f000 f917 	bl	800939c <prvIsQueueEmpty>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d017      	beq.n	80091a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009176:	3324      	adds	r3, #36	; 0x24
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	4611      	mov	r1, r2
 800917c:	4618      	mov	r0, r3
 800917e:	f000 fdcf 	bl	8009d20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009184:	f000 f8b8 	bl	80092f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009188:	f000 fbfe 	bl	8009988 <xTaskResumeAll>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d189      	bne.n	80090a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009192:	4b10      	ldr	r3, [pc, #64]	; (80091d4 <xQueueReceive+0x1bc>)
 8009194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009198:	601a      	str	r2, [r3, #0]
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	f3bf 8f6f 	isb	sy
 80091a2:	e780      	b.n	80090a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80091a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091a6:	f000 f8a7 	bl	80092f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091aa:	f000 fbed 	bl	8009988 <xTaskResumeAll>
 80091ae:	e77a      	b.n	80090a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80091b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091b2:	f000 f8a1 	bl	80092f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091b6:	f000 fbe7 	bl	8009988 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091bc:	f000 f8ee 	bl	800939c <prvIsQueueEmpty>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f43f af6f 	beq.w	80090a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80091c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3730      	adds	r7, #48	; 0x30
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	e000ed04 	.word	0xe000ed04

080091d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b086      	sub	sp, #24
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80091e4:	2300      	movs	r3, #0
 80091e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10d      	bne.n	8009212 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d14d      	bne.n	800929a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	4618      	mov	r0, r3
 8009204:	f000 ffbc 	bl	800a180 <xTaskPriorityDisinherit>
 8009208:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	609a      	str	r2, [r3, #8]
 8009210:	e043      	b.n	800929a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d119      	bne.n	800924c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6858      	ldr	r0, [r3, #4]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009220:	461a      	mov	r2, r3
 8009222:	68b9      	ldr	r1, [r7, #8]
 8009224:	f002 f81e 	bl	800b264 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	685a      	ldr	r2, [r3, #4]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009230:	441a      	add	r2, r3
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	429a      	cmp	r2, r3
 8009240:	d32b      	bcc.n	800929a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	605a      	str	r2, [r3, #4]
 800924a:	e026      	b.n	800929a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	68d8      	ldr	r0, [r3, #12]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009254:	461a      	mov	r2, r3
 8009256:	68b9      	ldr	r1, [r7, #8]
 8009258:	f002 f804 	bl	800b264 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	68da      	ldr	r2, [r3, #12]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009264:	425b      	negs	r3, r3
 8009266:	441a      	add	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	68da      	ldr	r2, [r3, #12]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	429a      	cmp	r2, r3
 8009276:	d207      	bcs.n	8009288 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	689a      	ldr	r2, [r3, #8]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009280:	425b      	negs	r3, r3
 8009282:	441a      	add	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b02      	cmp	r3, #2
 800928c:	d105      	bne.n	800929a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d002      	beq.n	800929a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	3b01      	subs	r3, #1
 8009298:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	1c5a      	adds	r2, r3, #1
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80092a2:	697b      	ldr	r3, [r7, #20]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3718      	adds	r7, #24
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d018      	beq.n	80092f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	68da      	ldr	r2, [r3, #12]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c6:	441a      	add	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	68da      	ldr	r2, [r3, #12]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d303      	bcc.n	80092e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	68d9      	ldr	r1, [r3, #12]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e8:	461a      	mov	r2, r3
 80092ea:	6838      	ldr	r0, [r7, #0]
 80092ec:	f001 ffba 	bl	800b264 <memcpy>
	}
}
 80092f0:	bf00      	nop
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009300:	f001 fc78 	bl	800abf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800930a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800930c:	e011      	b.n	8009332 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009312:	2b00      	cmp	r3, #0
 8009314:	d012      	beq.n	800933c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	3324      	adds	r3, #36	; 0x24
 800931a:	4618      	mov	r0, r3
 800931c:	f000 fd50 	bl	8009dc0 <xTaskRemoveFromEventList>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d001      	beq.n	800932a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009326:	f000 fe27 	bl	8009f78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800932a:	7bfb      	ldrb	r3, [r7, #15]
 800932c:	3b01      	subs	r3, #1
 800932e:	b2db      	uxtb	r3, r3
 8009330:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009336:	2b00      	cmp	r3, #0
 8009338:	dce9      	bgt.n	800930e <prvUnlockQueue+0x16>
 800933a:	e000      	b.n	800933e <prvUnlockQueue+0x46>
					break;
 800933c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	22ff      	movs	r2, #255	; 0xff
 8009342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009346:	f001 fc85 	bl	800ac54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800934a:	f001 fc53 	bl	800abf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009354:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009356:	e011      	b.n	800937c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d012      	beq.n	8009386 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	3310      	adds	r3, #16
 8009364:	4618      	mov	r0, r3
 8009366:	f000 fd2b 	bl	8009dc0 <xTaskRemoveFromEventList>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d001      	beq.n	8009374 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009370:	f000 fe02 	bl	8009f78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009374:	7bbb      	ldrb	r3, [r7, #14]
 8009376:	3b01      	subs	r3, #1
 8009378:	b2db      	uxtb	r3, r3
 800937a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800937c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009380:	2b00      	cmp	r3, #0
 8009382:	dce9      	bgt.n	8009358 <prvUnlockQueue+0x60>
 8009384:	e000      	b.n	8009388 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009386:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	22ff      	movs	r2, #255	; 0xff
 800938c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009390:	f001 fc60 	bl	800ac54 <vPortExitCritical>
}
 8009394:	bf00      	nop
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093a4:	f001 fc26 	bl	800abf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d102      	bne.n	80093b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80093b0:	2301      	movs	r3, #1
 80093b2:	60fb      	str	r3, [r7, #12]
 80093b4:	e001      	b.n	80093ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80093b6:	2300      	movs	r3, #0
 80093b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093ba:	f001 fc4b 	bl	800ac54 <vPortExitCritical>

	return xReturn;
 80093be:	68fb      	ldr	r3, [r7, #12]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093d0:	f001 fc10 	bl	800abf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093dc:	429a      	cmp	r2, r3
 80093de:	d102      	bne.n	80093e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80093e0:	2301      	movs	r3, #1
 80093e2:	60fb      	str	r3, [r7, #12]
 80093e4:	e001      	b.n	80093ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80093e6:	2300      	movs	r3, #0
 80093e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093ea:	f001 fc33 	bl	800ac54 <vPortExitCritical>

	return xReturn;
 80093ee:	68fb      	ldr	r3, [r7, #12]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009402:	2300      	movs	r3, #0
 8009404:	60fb      	str	r3, [r7, #12]
 8009406:	e014      	b.n	8009432 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009408:	4a0f      	ldr	r2, [pc, #60]	; (8009448 <vQueueAddToRegistry+0x50>)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10b      	bne.n	800942c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009414:	490c      	ldr	r1, [pc, #48]	; (8009448 <vQueueAddToRegistry+0x50>)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800941e:	4a0a      	ldr	r2, [pc, #40]	; (8009448 <vQueueAddToRegistry+0x50>)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	00db      	lsls	r3, r3, #3
 8009424:	4413      	add	r3, r2
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800942a:	e006      	b.n	800943a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	3301      	adds	r3, #1
 8009430:	60fb      	str	r3, [r7, #12]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2b07      	cmp	r3, #7
 8009436:	d9e7      	bls.n	8009408 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009438:	bf00      	nop
 800943a:	bf00      	nop
 800943c:	3714      	adds	r7, #20
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	2000101c 	.word	0x2000101c

0800944c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800945c:	f001 fbca 	bl	800abf4 <vPortEnterCritical>
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009466:	b25b      	sxtb	r3, r3
 8009468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946c:	d103      	bne.n	8009476 <vQueueWaitForMessageRestricted+0x2a>
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800947c:	b25b      	sxtb	r3, r3
 800947e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009482:	d103      	bne.n	800948c <vQueueWaitForMessageRestricted+0x40>
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	2200      	movs	r2, #0
 8009488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800948c:	f001 fbe2 	bl	800ac54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009494:	2b00      	cmp	r3, #0
 8009496:	d106      	bne.n	80094a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	3324      	adds	r3, #36	; 0x24
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	68b9      	ldr	r1, [r7, #8]
 80094a0:	4618      	mov	r0, r3
 80094a2:	f000 fc61 	bl	8009d68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80094a6:	6978      	ldr	r0, [r7, #20]
 80094a8:	f7ff ff26 	bl	80092f8 <prvUnlockQueue>
	}
 80094ac:	bf00      	nop
 80094ae:	3718      	adds	r7, #24
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b08e      	sub	sp, #56	; 0x38
 80094b8:	af04      	add	r7, sp, #16
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
 80094c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80094c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10a      	bne.n	80094de <xTaskCreateStatic+0x2a>
	__asm volatile
 80094c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	623b      	str	r3, [r7, #32]
}
 80094da:	bf00      	nop
 80094dc:	e7fe      	b.n	80094dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80094de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10a      	bne.n	80094fa <xTaskCreateStatic+0x46>
	__asm volatile
 80094e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	61fb      	str	r3, [r7, #28]
}
 80094f6:	bf00      	nop
 80094f8:	e7fe      	b.n	80094f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80094fa:	23bc      	movs	r3, #188	; 0xbc
 80094fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	2bbc      	cmp	r3, #188	; 0xbc
 8009502:	d00a      	beq.n	800951a <xTaskCreateStatic+0x66>
	__asm volatile
 8009504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	61bb      	str	r3, [r7, #24]
}
 8009516:	bf00      	nop
 8009518:	e7fe      	b.n	8009518 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800951a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	2b00      	cmp	r3, #0
 8009520:	d01e      	beq.n	8009560 <xTaskCreateStatic+0xac>
 8009522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009524:	2b00      	cmp	r3, #0
 8009526:	d01b      	beq.n	8009560 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009530:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009534:	2202      	movs	r2, #2
 8009536:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800953a:	2300      	movs	r3, #0
 800953c:	9303      	str	r3, [sp, #12]
 800953e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009540:	9302      	str	r3, [sp, #8]
 8009542:	f107 0314 	add.w	r3, r7, #20
 8009546:	9301      	str	r3, [sp, #4]
 8009548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954a:	9300      	str	r3, [sp, #0]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	68b9      	ldr	r1, [r7, #8]
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f000 f850 	bl	80095f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009558:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800955a:	f000 f8f3 	bl	8009744 <prvAddNewTaskToReadyList>
 800955e:	e001      	b.n	8009564 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009560:	2300      	movs	r3, #0
 8009562:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009564:	697b      	ldr	r3, [r7, #20]
	}
 8009566:	4618      	mov	r0, r3
 8009568:	3728      	adds	r7, #40	; 0x28
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800956e:	b580      	push	{r7, lr}
 8009570:	b08c      	sub	sp, #48	; 0x30
 8009572:	af04      	add	r7, sp, #16
 8009574:	60f8      	str	r0, [r7, #12]
 8009576:	60b9      	str	r1, [r7, #8]
 8009578:	603b      	str	r3, [r7, #0]
 800957a:	4613      	mov	r3, r2
 800957c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800957e:	88fb      	ldrh	r3, [r7, #6]
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	4618      	mov	r0, r3
 8009584:	f001 fc58 	bl	800ae38 <pvPortMalloc>
 8009588:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00e      	beq.n	80095ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009590:	20bc      	movs	r0, #188	; 0xbc
 8009592:	f001 fc51 	bl	800ae38 <pvPortMalloc>
 8009596:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d003      	beq.n	80095a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	697a      	ldr	r2, [r7, #20]
 80095a2:	631a      	str	r2, [r3, #48]	; 0x30
 80095a4:	e005      	b.n	80095b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80095a6:	6978      	ldr	r0, [r7, #20]
 80095a8:	f001 fd12 	bl	800afd0 <vPortFree>
 80095ac:	e001      	b.n	80095b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80095ae:	2300      	movs	r3, #0
 80095b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d017      	beq.n	80095e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80095c0:	88fa      	ldrh	r2, [r7, #6]
 80095c2:	2300      	movs	r3, #0
 80095c4:	9303      	str	r3, [sp, #12]
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	9302      	str	r3, [sp, #8]
 80095ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095cc:	9301      	str	r3, [sp, #4]
 80095ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	68b9      	ldr	r1, [r7, #8]
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f000 f80e 	bl	80095f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095dc:	69f8      	ldr	r0, [r7, #28]
 80095de:	f000 f8b1 	bl	8009744 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80095e2:	2301      	movs	r3, #1
 80095e4:	61bb      	str	r3, [r7, #24]
 80095e6:	e002      	b.n	80095ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80095e8:	f04f 33ff 	mov.w	r3, #4294967295
 80095ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80095ee:	69bb      	ldr	r3, [r7, #24]
	}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3720      	adds	r7, #32
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b088      	sub	sp, #32
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
 8009604:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009608:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	461a      	mov	r2, r3
 8009610:	21a5      	movs	r1, #165	; 0xa5
 8009612:	f001 fe35 	bl	800b280 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009620:	3b01      	subs	r3, #1
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	f023 0307 	bic.w	r3, r3, #7
 800962e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	f003 0307 	and.w	r3, r3, #7
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00a      	beq.n	8009650 <prvInitialiseNewTask+0x58>
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	617b      	str	r3, [r7, #20]
}
 800964c:	bf00      	nop
 800964e:	e7fe      	b.n	800964e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d01f      	beq.n	8009696 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009656:	2300      	movs	r3, #0
 8009658:	61fb      	str	r3, [r7, #28]
 800965a:	e012      	b.n	8009682 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	4413      	add	r3, r2
 8009662:	7819      	ldrb	r1, [r3, #0]
 8009664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	4413      	add	r3, r2
 800966a:	3334      	adds	r3, #52	; 0x34
 800966c:	460a      	mov	r2, r1
 800966e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	4413      	add	r3, r2
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d006      	beq.n	800968a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	3301      	adds	r3, #1
 8009680:	61fb      	str	r3, [r7, #28]
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	2b0f      	cmp	r3, #15
 8009686:	d9e9      	bls.n	800965c <prvInitialiseNewTask+0x64>
 8009688:	e000      	b.n	800968c <prvInitialiseNewTask+0x94>
			{
				break;
 800968a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800968c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968e:	2200      	movs	r2, #0
 8009690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009694:	e003      	b.n	800969e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009698:	2200      	movs	r2, #0
 800969a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800969e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a0:	2b37      	cmp	r3, #55	; 0x37
 80096a2:	d901      	bls.n	80096a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80096a4:	2337      	movs	r3, #55	; 0x37
 80096a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80096a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80096b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b6:	2200      	movs	r2, #0
 80096b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80096ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096bc:	3304      	adds	r3, #4
 80096be:	4618      	mov	r0, r3
 80096c0:	f7ff f978 	bl	80089b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80096c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c6:	3318      	adds	r3, #24
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7ff f973 	bl	80089b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80096ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80096de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80096e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e6:	2200      	movs	r2, #0
 80096e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80096ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80096f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f6:	3354      	adds	r3, #84	; 0x54
 80096f8:	2260      	movs	r2, #96	; 0x60
 80096fa:	2100      	movs	r1, #0
 80096fc:	4618      	mov	r0, r3
 80096fe:	f001 fdbf 	bl	800b280 <memset>
 8009702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009704:	4a0c      	ldr	r2, [pc, #48]	; (8009738 <prvInitialiseNewTask+0x140>)
 8009706:	659a      	str	r2, [r3, #88]	; 0x58
 8009708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970a:	4a0c      	ldr	r2, [pc, #48]	; (800973c <prvInitialiseNewTask+0x144>)
 800970c:	65da      	str	r2, [r3, #92]	; 0x5c
 800970e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009710:	4a0b      	ldr	r2, [pc, #44]	; (8009740 <prvInitialiseNewTask+0x148>)
 8009712:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009714:	683a      	ldr	r2, [r7, #0]
 8009716:	68f9      	ldr	r1, [r7, #12]
 8009718:	69b8      	ldr	r0, [r7, #24]
 800971a:	f001 f941 	bl	800a9a0 <pxPortInitialiseStack>
 800971e:	4602      	mov	r2, r0
 8009720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009722:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009726:	2b00      	cmp	r3, #0
 8009728:	d002      	beq.n	8009730 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800972a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800972e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009730:	bf00      	nop
 8009732:	3720      	adds	r7, #32
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	0800c8cc 	.word	0x0800c8cc
 800973c:	0800c8ec 	.word	0x0800c8ec
 8009740:	0800c8ac 	.word	0x0800c8ac

08009744 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800974c:	f001 fa52 	bl	800abf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009750:	4b2d      	ldr	r3, [pc, #180]	; (8009808 <prvAddNewTaskToReadyList+0xc4>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	3301      	adds	r3, #1
 8009756:	4a2c      	ldr	r2, [pc, #176]	; (8009808 <prvAddNewTaskToReadyList+0xc4>)
 8009758:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800975a:	4b2c      	ldr	r3, [pc, #176]	; (800980c <prvAddNewTaskToReadyList+0xc8>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d109      	bne.n	8009776 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009762:	4a2a      	ldr	r2, [pc, #168]	; (800980c <prvAddNewTaskToReadyList+0xc8>)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009768:	4b27      	ldr	r3, [pc, #156]	; (8009808 <prvAddNewTaskToReadyList+0xc4>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d110      	bne.n	8009792 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009770:	f000 fc26 	bl	8009fc0 <prvInitialiseTaskLists>
 8009774:	e00d      	b.n	8009792 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009776:	4b26      	ldr	r3, [pc, #152]	; (8009810 <prvAddNewTaskToReadyList+0xcc>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d109      	bne.n	8009792 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800977e:	4b23      	ldr	r3, [pc, #140]	; (800980c <prvAddNewTaskToReadyList+0xc8>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009788:	429a      	cmp	r2, r3
 800978a:	d802      	bhi.n	8009792 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800978c:	4a1f      	ldr	r2, [pc, #124]	; (800980c <prvAddNewTaskToReadyList+0xc8>)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009792:	4b20      	ldr	r3, [pc, #128]	; (8009814 <prvAddNewTaskToReadyList+0xd0>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	3301      	adds	r3, #1
 8009798:	4a1e      	ldr	r2, [pc, #120]	; (8009814 <prvAddNewTaskToReadyList+0xd0>)
 800979a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800979c:	4b1d      	ldr	r3, [pc, #116]	; (8009814 <prvAddNewTaskToReadyList+0xd0>)
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a8:	4b1b      	ldr	r3, [pc, #108]	; (8009818 <prvAddNewTaskToReadyList+0xd4>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d903      	bls.n	80097b8 <prvAddNewTaskToReadyList+0x74>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b4:	4a18      	ldr	r2, [pc, #96]	; (8009818 <prvAddNewTaskToReadyList+0xd4>)
 80097b6:	6013      	str	r3, [r2, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097bc:	4613      	mov	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4413      	add	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4a15      	ldr	r2, [pc, #84]	; (800981c <prvAddNewTaskToReadyList+0xd8>)
 80097c6:	441a      	add	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	3304      	adds	r3, #4
 80097cc:	4619      	mov	r1, r3
 80097ce:	4610      	mov	r0, r2
 80097d0:	f7ff f8fd 	bl	80089ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80097d4:	f001 fa3e 	bl	800ac54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80097d8:	4b0d      	ldr	r3, [pc, #52]	; (8009810 <prvAddNewTaskToReadyList+0xcc>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00e      	beq.n	80097fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80097e0:	4b0a      	ldr	r3, [pc, #40]	; (800980c <prvAddNewTaskToReadyList+0xc8>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d207      	bcs.n	80097fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80097ee:	4b0c      	ldr	r3, [pc, #48]	; (8009820 <prvAddNewTaskToReadyList+0xdc>)
 80097f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097f4:	601a      	str	r2, [r3, #0]
 80097f6:	f3bf 8f4f 	dsb	sy
 80097fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097fe:	bf00      	nop
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	20001530 	.word	0x20001530
 800980c:	2000105c 	.word	0x2000105c
 8009810:	2000153c 	.word	0x2000153c
 8009814:	2000154c 	.word	0x2000154c
 8009818:	20001538 	.word	0x20001538
 800981c:	20001060 	.word	0x20001060
 8009820:	e000ed04 	.word	0xe000ed04

08009824 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800982c:	2300      	movs	r3, #0
 800982e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d017      	beq.n	8009866 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009836:	4b13      	ldr	r3, [pc, #76]	; (8009884 <vTaskDelay+0x60>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00a      	beq.n	8009854 <vTaskDelay+0x30>
	__asm volatile
 800983e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	60bb      	str	r3, [r7, #8]
}
 8009850:	bf00      	nop
 8009852:	e7fe      	b.n	8009852 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009854:	f000 f88a 	bl	800996c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009858:	2100      	movs	r1, #0
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fcfe 	bl	800a25c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009860:	f000 f892 	bl	8009988 <xTaskResumeAll>
 8009864:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d107      	bne.n	800987c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800986c:	4b06      	ldr	r3, [pc, #24]	; (8009888 <vTaskDelay+0x64>)
 800986e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800987c:	bf00      	nop
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	20001558 	.word	0x20001558
 8009888:	e000ed04 	.word	0xe000ed04

0800988c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b08a      	sub	sp, #40	; 0x28
 8009890:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009892:	2300      	movs	r3, #0
 8009894:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009896:	2300      	movs	r3, #0
 8009898:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800989a:	463a      	mov	r2, r7
 800989c:	1d39      	adds	r1, r7, #4
 800989e:	f107 0308 	add.w	r3, r7, #8
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7ff f832 	bl	800890c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80098a8:	6839      	ldr	r1, [r7, #0]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	9202      	str	r2, [sp, #8]
 80098b0:	9301      	str	r3, [sp, #4]
 80098b2:	2300      	movs	r3, #0
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	2300      	movs	r3, #0
 80098b8:	460a      	mov	r2, r1
 80098ba:	4924      	ldr	r1, [pc, #144]	; (800994c <vTaskStartScheduler+0xc0>)
 80098bc:	4824      	ldr	r0, [pc, #144]	; (8009950 <vTaskStartScheduler+0xc4>)
 80098be:	f7ff fdf9 	bl	80094b4 <xTaskCreateStatic>
 80098c2:	4603      	mov	r3, r0
 80098c4:	4a23      	ldr	r2, [pc, #140]	; (8009954 <vTaskStartScheduler+0xc8>)
 80098c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80098c8:	4b22      	ldr	r3, [pc, #136]	; (8009954 <vTaskStartScheduler+0xc8>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d002      	beq.n	80098d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80098d0:	2301      	movs	r3, #1
 80098d2:	617b      	str	r3, [r7, #20]
 80098d4:	e001      	b.n	80098da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80098d6:	2300      	movs	r3, #0
 80098d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d102      	bne.n	80098e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80098e0:	f000 fd10 	bl	800a304 <xTimerCreateTimerTask>
 80098e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d11b      	bne.n	8009924 <vTaskStartScheduler+0x98>
	__asm volatile
 80098ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f0:	f383 8811 	msr	BASEPRI, r3
 80098f4:	f3bf 8f6f 	isb	sy
 80098f8:	f3bf 8f4f 	dsb	sy
 80098fc:	613b      	str	r3, [r7, #16]
}
 80098fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009900:	4b15      	ldr	r3, [pc, #84]	; (8009958 <vTaskStartScheduler+0xcc>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	3354      	adds	r3, #84	; 0x54
 8009906:	4a15      	ldr	r2, [pc, #84]	; (800995c <vTaskStartScheduler+0xd0>)
 8009908:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800990a:	4b15      	ldr	r3, [pc, #84]	; (8009960 <vTaskStartScheduler+0xd4>)
 800990c:	f04f 32ff 	mov.w	r2, #4294967295
 8009910:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009912:	4b14      	ldr	r3, [pc, #80]	; (8009964 <vTaskStartScheduler+0xd8>)
 8009914:	2201      	movs	r2, #1
 8009916:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009918:	4b13      	ldr	r3, [pc, #76]	; (8009968 <vTaskStartScheduler+0xdc>)
 800991a:	2200      	movs	r2, #0
 800991c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800991e:	f001 f8c7 	bl	800aab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009922:	e00e      	b.n	8009942 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992a:	d10a      	bne.n	8009942 <vTaskStartScheduler+0xb6>
	__asm volatile
 800992c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	60fb      	str	r3, [r7, #12]
}
 800993e:	bf00      	nop
 8009940:	e7fe      	b.n	8009940 <vTaskStartScheduler+0xb4>
}
 8009942:	bf00      	nop
 8009944:	3718      	adds	r7, #24
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	0800c464 	.word	0x0800c464
 8009950:	08009f91 	.word	0x08009f91
 8009954:	20001554 	.word	0x20001554
 8009958:	2000105c 	.word	0x2000105c
 800995c:	20000050 	.word	0x20000050
 8009960:	20001550 	.word	0x20001550
 8009964:	2000153c 	.word	0x2000153c
 8009968:	20001534 	.word	0x20001534

0800996c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800996c:	b480      	push	{r7}
 800996e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009970:	4b04      	ldr	r3, [pc, #16]	; (8009984 <vTaskSuspendAll+0x18>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	3301      	adds	r3, #1
 8009976:	4a03      	ldr	r2, [pc, #12]	; (8009984 <vTaskSuspendAll+0x18>)
 8009978:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800997a:	bf00      	nop
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr
 8009984:	20001558 	.word	0x20001558

08009988 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800998e:	2300      	movs	r3, #0
 8009990:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009992:	2300      	movs	r3, #0
 8009994:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009996:	4b42      	ldr	r3, [pc, #264]	; (8009aa0 <xTaskResumeAll+0x118>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d10a      	bne.n	80099b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800999e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a2:	f383 8811 	msr	BASEPRI, r3
 80099a6:	f3bf 8f6f 	isb	sy
 80099aa:	f3bf 8f4f 	dsb	sy
 80099ae:	603b      	str	r3, [r7, #0]
}
 80099b0:	bf00      	nop
 80099b2:	e7fe      	b.n	80099b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80099b4:	f001 f91e 	bl	800abf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80099b8:	4b39      	ldr	r3, [pc, #228]	; (8009aa0 <xTaskResumeAll+0x118>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	3b01      	subs	r3, #1
 80099be:	4a38      	ldr	r2, [pc, #224]	; (8009aa0 <xTaskResumeAll+0x118>)
 80099c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099c2:	4b37      	ldr	r3, [pc, #220]	; (8009aa0 <xTaskResumeAll+0x118>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d162      	bne.n	8009a90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80099ca:	4b36      	ldr	r3, [pc, #216]	; (8009aa4 <xTaskResumeAll+0x11c>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d05e      	beq.n	8009a90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099d2:	e02f      	b.n	8009a34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099d4:	4b34      	ldr	r3, [pc, #208]	; (8009aa8 <xTaskResumeAll+0x120>)
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	3318      	adds	r3, #24
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7ff f851 	bl	8008a88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	3304      	adds	r3, #4
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7ff f84c 	bl	8008a88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f4:	4b2d      	ldr	r3, [pc, #180]	; (8009aac <xTaskResumeAll+0x124>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d903      	bls.n	8009a04 <xTaskResumeAll+0x7c>
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a00:	4a2a      	ldr	r2, [pc, #168]	; (8009aac <xTaskResumeAll+0x124>)
 8009a02:	6013      	str	r3, [r2, #0]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a08:	4613      	mov	r3, r2
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	4413      	add	r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4a27      	ldr	r2, [pc, #156]	; (8009ab0 <xTaskResumeAll+0x128>)
 8009a12:	441a      	add	r2, r3
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	3304      	adds	r3, #4
 8009a18:	4619      	mov	r1, r3
 8009a1a:	4610      	mov	r0, r2
 8009a1c:	f7fe ffd7 	bl	80089ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a24:	4b23      	ldr	r3, [pc, #140]	; (8009ab4 <xTaskResumeAll+0x12c>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d302      	bcc.n	8009a34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009a2e:	4b22      	ldr	r3, [pc, #136]	; (8009ab8 <xTaskResumeAll+0x130>)
 8009a30:	2201      	movs	r2, #1
 8009a32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a34:	4b1c      	ldr	r3, [pc, #112]	; (8009aa8 <xTaskResumeAll+0x120>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d1cb      	bne.n	80099d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d001      	beq.n	8009a46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a42:	f000 fb5f 	bl	800a104 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009a46:	4b1d      	ldr	r3, [pc, #116]	; (8009abc <xTaskResumeAll+0x134>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d010      	beq.n	8009a74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a52:	f000 f847 	bl	8009ae4 <xTaskIncrementTick>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d002      	beq.n	8009a62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009a5c:	4b16      	ldr	r3, [pc, #88]	; (8009ab8 <xTaskResumeAll+0x130>)
 8009a5e:	2201      	movs	r2, #1
 8009a60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1f1      	bne.n	8009a52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009a6e:	4b13      	ldr	r3, [pc, #76]	; (8009abc <xTaskResumeAll+0x134>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a74:	4b10      	ldr	r3, [pc, #64]	; (8009ab8 <xTaskResumeAll+0x130>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d009      	beq.n	8009a90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a80:	4b0f      	ldr	r3, [pc, #60]	; (8009ac0 <xTaskResumeAll+0x138>)
 8009a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a86:	601a      	str	r2, [r3, #0]
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a90:	f001 f8e0 	bl	800ac54 <vPortExitCritical>

	return xAlreadyYielded;
 8009a94:	68bb      	ldr	r3, [r7, #8]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	20001558 	.word	0x20001558
 8009aa4:	20001530 	.word	0x20001530
 8009aa8:	200014f0 	.word	0x200014f0
 8009aac:	20001538 	.word	0x20001538
 8009ab0:	20001060 	.word	0x20001060
 8009ab4:	2000105c 	.word	0x2000105c
 8009ab8:	20001544 	.word	0x20001544
 8009abc:	20001540 	.word	0x20001540
 8009ac0:	e000ed04 	.word	0xe000ed04

08009ac4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009aca:	4b05      	ldr	r3, [pc, #20]	; (8009ae0 <xTaskGetTickCount+0x1c>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ad0:	687b      	ldr	r3, [r7, #4]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr
 8009ade:	bf00      	nop
 8009ae0:	20001534 	.word	0x20001534

08009ae4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b086      	sub	sp, #24
 8009ae8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009aea:	2300      	movs	r3, #0
 8009aec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009aee:	4b4f      	ldr	r3, [pc, #316]	; (8009c2c <xTaskIncrementTick+0x148>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f040 808f 	bne.w	8009c16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009af8:	4b4d      	ldr	r3, [pc, #308]	; (8009c30 <xTaskIncrementTick+0x14c>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	3301      	adds	r3, #1
 8009afe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b00:	4a4b      	ldr	r2, [pc, #300]	; (8009c30 <xTaskIncrementTick+0x14c>)
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d120      	bne.n	8009b4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b0c:	4b49      	ldr	r3, [pc, #292]	; (8009c34 <xTaskIncrementTick+0x150>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00a      	beq.n	8009b2c <xTaskIncrementTick+0x48>
	__asm volatile
 8009b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	603b      	str	r3, [r7, #0]
}
 8009b28:	bf00      	nop
 8009b2a:	e7fe      	b.n	8009b2a <xTaskIncrementTick+0x46>
 8009b2c:	4b41      	ldr	r3, [pc, #260]	; (8009c34 <xTaskIncrementTick+0x150>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	60fb      	str	r3, [r7, #12]
 8009b32:	4b41      	ldr	r3, [pc, #260]	; (8009c38 <xTaskIncrementTick+0x154>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a3f      	ldr	r2, [pc, #252]	; (8009c34 <xTaskIncrementTick+0x150>)
 8009b38:	6013      	str	r3, [r2, #0]
 8009b3a:	4a3f      	ldr	r2, [pc, #252]	; (8009c38 <xTaskIncrementTick+0x154>)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6013      	str	r3, [r2, #0]
 8009b40:	4b3e      	ldr	r3, [pc, #248]	; (8009c3c <xTaskIncrementTick+0x158>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	3301      	adds	r3, #1
 8009b46:	4a3d      	ldr	r2, [pc, #244]	; (8009c3c <xTaskIncrementTick+0x158>)
 8009b48:	6013      	str	r3, [r2, #0]
 8009b4a:	f000 fadb 	bl	800a104 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b4e:	4b3c      	ldr	r3, [pc, #240]	; (8009c40 <xTaskIncrementTick+0x15c>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d349      	bcc.n	8009bec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b58:	4b36      	ldr	r3, [pc, #216]	; (8009c34 <xTaskIncrementTick+0x150>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d104      	bne.n	8009b6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b62:	4b37      	ldr	r3, [pc, #220]	; (8009c40 <xTaskIncrementTick+0x15c>)
 8009b64:	f04f 32ff 	mov.w	r2, #4294967295
 8009b68:	601a      	str	r2, [r3, #0]
					break;
 8009b6a:	e03f      	b.n	8009bec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b6c:	4b31      	ldr	r3, [pc, #196]	; (8009c34 <xTaskIncrementTick+0x150>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b7c:	693a      	ldr	r2, [r7, #16]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d203      	bcs.n	8009b8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b84:	4a2e      	ldr	r2, [pc, #184]	; (8009c40 <xTaskIncrementTick+0x15c>)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b8a:	e02f      	b.n	8009bec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	3304      	adds	r3, #4
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fe ff79 	bl	8008a88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d004      	beq.n	8009ba8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	3318      	adds	r3, #24
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7fe ff70 	bl	8008a88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bac:	4b25      	ldr	r3, [pc, #148]	; (8009c44 <xTaskIncrementTick+0x160>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d903      	bls.n	8009bbc <xTaskIncrementTick+0xd8>
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb8:	4a22      	ldr	r2, [pc, #136]	; (8009c44 <xTaskIncrementTick+0x160>)
 8009bba:	6013      	str	r3, [r2, #0]
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	4a1f      	ldr	r2, [pc, #124]	; (8009c48 <xTaskIncrementTick+0x164>)
 8009bca:	441a      	add	r2, r3
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	3304      	adds	r3, #4
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	4610      	mov	r0, r2
 8009bd4:	f7fe fefb 	bl	80089ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bdc:	4b1b      	ldr	r3, [pc, #108]	; (8009c4c <xTaskIncrementTick+0x168>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d3b8      	bcc.n	8009b58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009be6:	2301      	movs	r3, #1
 8009be8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bea:	e7b5      	b.n	8009b58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009bec:	4b17      	ldr	r3, [pc, #92]	; (8009c4c <xTaskIncrementTick+0x168>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf2:	4915      	ldr	r1, [pc, #84]	; (8009c48 <xTaskIncrementTick+0x164>)
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4413      	add	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	440b      	add	r3, r1
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d901      	bls.n	8009c08 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009c04:	2301      	movs	r3, #1
 8009c06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009c08:	4b11      	ldr	r3, [pc, #68]	; (8009c50 <xTaskIncrementTick+0x16c>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d007      	beq.n	8009c20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009c10:	2301      	movs	r3, #1
 8009c12:	617b      	str	r3, [r7, #20]
 8009c14:	e004      	b.n	8009c20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009c16:	4b0f      	ldr	r3, [pc, #60]	; (8009c54 <xTaskIncrementTick+0x170>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	4a0d      	ldr	r2, [pc, #52]	; (8009c54 <xTaskIncrementTick+0x170>)
 8009c1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009c20:	697b      	ldr	r3, [r7, #20]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3718      	adds	r7, #24
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	20001558 	.word	0x20001558
 8009c30:	20001534 	.word	0x20001534
 8009c34:	200014e8 	.word	0x200014e8
 8009c38:	200014ec 	.word	0x200014ec
 8009c3c:	20001548 	.word	0x20001548
 8009c40:	20001550 	.word	0x20001550
 8009c44:	20001538 	.word	0x20001538
 8009c48:	20001060 	.word	0x20001060
 8009c4c:	2000105c 	.word	0x2000105c
 8009c50:	20001544 	.word	0x20001544
 8009c54:	20001540 	.word	0x20001540

08009c58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c5e:	4b2a      	ldr	r3, [pc, #168]	; (8009d08 <vTaskSwitchContext+0xb0>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d003      	beq.n	8009c6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c66:	4b29      	ldr	r3, [pc, #164]	; (8009d0c <vTaskSwitchContext+0xb4>)
 8009c68:	2201      	movs	r2, #1
 8009c6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c6c:	e046      	b.n	8009cfc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009c6e:	4b27      	ldr	r3, [pc, #156]	; (8009d0c <vTaskSwitchContext+0xb4>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c74:	4b26      	ldr	r3, [pc, #152]	; (8009d10 <vTaskSwitchContext+0xb8>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	60fb      	str	r3, [r7, #12]
 8009c7a:	e010      	b.n	8009c9e <vTaskSwitchContext+0x46>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10a      	bne.n	8009c98 <vTaskSwitchContext+0x40>
	__asm volatile
 8009c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	607b      	str	r3, [r7, #4]
}
 8009c94:	bf00      	nop
 8009c96:	e7fe      	b.n	8009c96 <vTaskSwitchContext+0x3e>
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	60fb      	str	r3, [r7, #12]
 8009c9e:	491d      	ldr	r1, [pc, #116]	; (8009d14 <vTaskSwitchContext+0xbc>)
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	4413      	add	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	440b      	add	r3, r1
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d0e4      	beq.n	8009c7c <vTaskSwitchContext+0x24>
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	4413      	add	r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4a15      	ldr	r2, [pc, #84]	; (8009d14 <vTaskSwitchContext+0xbc>)
 8009cbe:	4413      	add	r3, r2
 8009cc0:	60bb      	str	r3, [r7, #8]
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	685a      	ldr	r2, [r3, #4]
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	605a      	str	r2, [r3, #4]
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	685a      	ldr	r2, [r3, #4]
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d104      	bne.n	8009ce2 <vTaskSwitchContext+0x8a>
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	685a      	ldr	r2, [r3, #4]
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	605a      	str	r2, [r3, #4]
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	4a0b      	ldr	r2, [pc, #44]	; (8009d18 <vTaskSwitchContext+0xc0>)
 8009cea:	6013      	str	r3, [r2, #0]
 8009cec:	4a08      	ldr	r2, [pc, #32]	; (8009d10 <vTaskSwitchContext+0xb8>)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009cf2:	4b09      	ldr	r3, [pc, #36]	; (8009d18 <vTaskSwitchContext+0xc0>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	3354      	adds	r3, #84	; 0x54
 8009cf8:	4a08      	ldr	r2, [pc, #32]	; (8009d1c <vTaskSwitchContext+0xc4>)
 8009cfa:	6013      	str	r3, [r2, #0]
}
 8009cfc:	bf00      	nop
 8009cfe:	3714      	adds	r7, #20
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr
 8009d08:	20001558 	.word	0x20001558
 8009d0c:	20001544 	.word	0x20001544
 8009d10:	20001538 	.word	0x20001538
 8009d14:	20001060 	.word	0x20001060
 8009d18:	2000105c 	.word	0x2000105c
 8009d1c:	20000050 	.word	0x20000050

08009d20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d10a      	bne.n	8009d46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d34:	f383 8811 	msr	BASEPRI, r3
 8009d38:	f3bf 8f6f 	isb	sy
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	60fb      	str	r3, [r7, #12]
}
 8009d42:	bf00      	nop
 8009d44:	e7fe      	b.n	8009d44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d46:	4b07      	ldr	r3, [pc, #28]	; (8009d64 <vTaskPlaceOnEventList+0x44>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	3318      	adds	r3, #24
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7fe fe61 	bl	8008a16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d54:	2101      	movs	r1, #1
 8009d56:	6838      	ldr	r0, [r7, #0]
 8009d58:	f000 fa80 	bl	800a25c <prvAddCurrentTaskToDelayedList>
}
 8009d5c:	bf00      	nop
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	2000105c 	.word	0x2000105c

08009d68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d10a      	bne.n	8009d90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7e:	f383 8811 	msr	BASEPRI, r3
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	f3bf 8f4f 	dsb	sy
 8009d8a:	617b      	str	r3, [r7, #20]
}
 8009d8c:	bf00      	nop
 8009d8e:	e7fe      	b.n	8009d8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d90:	4b0a      	ldr	r3, [pc, #40]	; (8009dbc <vTaskPlaceOnEventListRestricted+0x54>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	3318      	adds	r3, #24
 8009d96:	4619      	mov	r1, r3
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f7fe fe18 	bl	80089ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009da4:	f04f 33ff 	mov.w	r3, #4294967295
 8009da8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009daa:	6879      	ldr	r1, [r7, #4]
 8009dac:	68b8      	ldr	r0, [r7, #8]
 8009dae:	f000 fa55 	bl	800a25c <prvAddCurrentTaskToDelayedList>
	}
 8009db2:	bf00      	nop
 8009db4:	3718      	adds	r7, #24
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	2000105c 	.word	0x2000105c

08009dc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d10a      	bne.n	8009dec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dda:	f383 8811 	msr	BASEPRI, r3
 8009dde:	f3bf 8f6f 	isb	sy
 8009de2:	f3bf 8f4f 	dsb	sy
 8009de6:	60fb      	str	r3, [r7, #12]
}
 8009de8:	bf00      	nop
 8009dea:	e7fe      	b.n	8009dea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	3318      	adds	r3, #24
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7fe fe49 	bl	8008a88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009df6:	4b1e      	ldr	r3, [pc, #120]	; (8009e70 <xTaskRemoveFromEventList+0xb0>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d11d      	bne.n	8009e3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	3304      	adds	r3, #4
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fe fe40 	bl	8008a88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e0c:	4b19      	ldr	r3, [pc, #100]	; (8009e74 <xTaskRemoveFromEventList+0xb4>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d903      	bls.n	8009e1c <xTaskRemoveFromEventList+0x5c>
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e18:	4a16      	ldr	r2, [pc, #88]	; (8009e74 <xTaskRemoveFromEventList+0xb4>)
 8009e1a:	6013      	str	r3, [r2, #0]
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e20:	4613      	mov	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4a13      	ldr	r2, [pc, #76]	; (8009e78 <xTaskRemoveFromEventList+0xb8>)
 8009e2a:	441a      	add	r2, r3
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	3304      	adds	r3, #4
 8009e30:	4619      	mov	r1, r3
 8009e32:	4610      	mov	r0, r2
 8009e34:	f7fe fdcb 	bl	80089ce <vListInsertEnd>
 8009e38:	e005      	b.n	8009e46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	3318      	adds	r3, #24
 8009e3e:	4619      	mov	r1, r3
 8009e40:	480e      	ldr	r0, [pc, #56]	; (8009e7c <xTaskRemoveFromEventList+0xbc>)
 8009e42:	f7fe fdc4 	bl	80089ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e4a:	4b0d      	ldr	r3, [pc, #52]	; (8009e80 <xTaskRemoveFromEventList+0xc0>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d905      	bls.n	8009e60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009e54:	2301      	movs	r3, #1
 8009e56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009e58:	4b0a      	ldr	r3, [pc, #40]	; (8009e84 <xTaskRemoveFromEventList+0xc4>)
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	e001      	b.n	8009e64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009e60:	2300      	movs	r3, #0
 8009e62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009e64:	697b      	ldr	r3, [r7, #20]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3718      	adds	r7, #24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	20001558 	.word	0x20001558
 8009e74:	20001538 	.word	0x20001538
 8009e78:	20001060 	.word	0x20001060
 8009e7c:	200014f0 	.word	0x200014f0
 8009e80:	2000105c 	.word	0x2000105c
 8009e84:	20001544 	.word	0x20001544

08009e88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e90:	4b06      	ldr	r3, [pc, #24]	; (8009eac <vTaskInternalSetTimeOutState+0x24>)
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009e98:	4b05      	ldr	r3, [pc, #20]	; (8009eb0 <vTaskInternalSetTimeOutState+0x28>)
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	605a      	str	r2, [r3, #4]
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	20001548 	.word	0x20001548
 8009eb0:	20001534 	.word	0x20001534

08009eb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b088      	sub	sp, #32
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10a      	bne.n	8009eda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	613b      	str	r3, [r7, #16]
}
 8009ed6:	bf00      	nop
 8009ed8:	e7fe      	b.n	8009ed8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10a      	bne.n	8009ef6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	60fb      	str	r3, [r7, #12]
}
 8009ef2:	bf00      	nop
 8009ef4:	e7fe      	b.n	8009ef4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009ef6:	f000 fe7d 	bl	800abf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009efa:	4b1d      	ldr	r3, [pc, #116]	; (8009f70 <xTaskCheckForTimeOut+0xbc>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	69ba      	ldr	r2, [r7, #24]
 8009f06:	1ad3      	subs	r3, r2, r3
 8009f08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f12:	d102      	bne.n	8009f1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009f14:	2300      	movs	r3, #0
 8009f16:	61fb      	str	r3, [r7, #28]
 8009f18:	e023      	b.n	8009f62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	4b15      	ldr	r3, [pc, #84]	; (8009f74 <xTaskCheckForTimeOut+0xc0>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d007      	beq.n	8009f36 <xTaskCheckForTimeOut+0x82>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	69ba      	ldr	r2, [r7, #24]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d302      	bcc.n	8009f36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f30:	2301      	movs	r3, #1
 8009f32:	61fb      	str	r3, [r7, #28]
 8009f34:	e015      	b.n	8009f62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	697a      	ldr	r2, [r7, #20]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d20b      	bcs.n	8009f58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	1ad2      	subs	r2, r2, r3
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7ff ff9b 	bl	8009e88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f52:	2300      	movs	r3, #0
 8009f54:	61fb      	str	r3, [r7, #28]
 8009f56:	e004      	b.n	8009f62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009f62:	f000 fe77 	bl	800ac54 <vPortExitCritical>

	return xReturn;
 8009f66:	69fb      	ldr	r3, [r7, #28]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3720      	adds	r7, #32
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	20001534 	.word	0x20001534
 8009f74:	20001548 	.word	0x20001548

08009f78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f78:	b480      	push	{r7}
 8009f7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f7c:	4b03      	ldr	r3, [pc, #12]	; (8009f8c <vTaskMissedYield+0x14>)
 8009f7e:	2201      	movs	r2, #1
 8009f80:	601a      	str	r2, [r3, #0]
}
 8009f82:	bf00      	nop
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	20001544 	.word	0x20001544

08009f90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f98:	f000 f852 	bl	800a040 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f9c:	4b06      	ldr	r3, [pc, #24]	; (8009fb8 <prvIdleTask+0x28>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d9f9      	bls.n	8009f98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009fa4:	4b05      	ldr	r3, [pc, #20]	; (8009fbc <prvIdleTask+0x2c>)
 8009fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009faa:	601a      	str	r2, [r3, #0]
 8009fac:	f3bf 8f4f 	dsb	sy
 8009fb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009fb4:	e7f0      	b.n	8009f98 <prvIdleTask+0x8>
 8009fb6:	bf00      	nop
 8009fb8:	20001060 	.word	0x20001060
 8009fbc:	e000ed04 	.word	0xe000ed04

08009fc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	607b      	str	r3, [r7, #4]
 8009fca:	e00c      	b.n	8009fe6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4413      	add	r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	4a12      	ldr	r2, [pc, #72]	; (800a020 <prvInitialiseTaskLists+0x60>)
 8009fd8:	4413      	add	r3, r2
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fe fcca 	bl	8008974 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	607b      	str	r3, [r7, #4]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b37      	cmp	r3, #55	; 0x37
 8009fea:	d9ef      	bls.n	8009fcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009fec:	480d      	ldr	r0, [pc, #52]	; (800a024 <prvInitialiseTaskLists+0x64>)
 8009fee:	f7fe fcc1 	bl	8008974 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ff2:	480d      	ldr	r0, [pc, #52]	; (800a028 <prvInitialiseTaskLists+0x68>)
 8009ff4:	f7fe fcbe 	bl	8008974 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ff8:	480c      	ldr	r0, [pc, #48]	; (800a02c <prvInitialiseTaskLists+0x6c>)
 8009ffa:	f7fe fcbb 	bl	8008974 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009ffe:	480c      	ldr	r0, [pc, #48]	; (800a030 <prvInitialiseTaskLists+0x70>)
 800a000:	f7fe fcb8 	bl	8008974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a004:	480b      	ldr	r0, [pc, #44]	; (800a034 <prvInitialiseTaskLists+0x74>)
 800a006:	f7fe fcb5 	bl	8008974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a00a:	4b0b      	ldr	r3, [pc, #44]	; (800a038 <prvInitialiseTaskLists+0x78>)
 800a00c:	4a05      	ldr	r2, [pc, #20]	; (800a024 <prvInitialiseTaskLists+0x64>)
 800a00e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a010:	4b0a      	ldr	r3, [pc, #40]	; (800a03c <prvInitialiseTaskLists+0x7c>)
 800a012:	4a05      	ldr	r2, [pc, #20]	; (800a028 <prvInitialiseTaskLists+0x68>)
 800a014:	601a      	str	r2, [r3, #0]
}
 800a016:	bf00      	nop
 800a018:	3708      	adds	r7, #8
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	20001060 	.word	0x20001060
 800a024:	200014c0 	.word	0x200014c0
 800a028:	200014d4 	.word	0x200014d4
 800a02c:	200014f0 	.word	0x200014f0
 800a030:	20001504 	.word	0x20001504
 800a034:	2000151c 	.word	0x2000151c
 800a038:	200014e8 	.word	0x200014e8
 800a03c:	200014ec 	.word	0x200014ec

0800a040 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a046:	e019      	b.n	800a07c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a048:	f000 fdd4 	bl	800abf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a04c:	4b10      	ldr	r3, [pc, #64]	; (800a090 <prvCheckTasksWaitingTermination+0x50>)
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	3304      	adds	r3, #4
 800a058:	4618      	mov	r0, r3
 800a05a:	f7fe fd15 	bl	8008a88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a05e:	4b0d      	ldr	r3, [pc, #52]	; (800a094 <prvCheckTasksWaitingTermination+0x54>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	3b01      	subs	r3, #1
 800a064:	4a0b      	ldr	r2, [pc, #44]	; (800a094 <prvCheckTasksWaitingTermination+0x54>)
 800a066:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a068:	4b0b      	ldr	r3, [pc, #44]	; (800a098 <prvCheckTasksWaitingTermination+0x58>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	3b01      	subs	r3, #1
 800a06e:	4a0a      	ldr	r2, [pc, #40]	; (800a098 <prvCheckTasksWaitingTermination+0x58>)
 800a070:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a072:	f000 fdef 	bl	800ac54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 f810 	bl	800a09c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a07c:	4b06      	ldr	r3, [pc, #24]	; (800a098 <prvCheckTasksWaitingTermination+0x58>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1e1      	bne.n	800a048 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a084:	bf00      	nop
 800a086:	bf00      	nop
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	20001504 	.word	0x20001504
 800a094:	20001530 	.word	0x20001530
 800a098:	20001518 	.word	0x20001518

0800a09c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	3354      	adds	r3, #84	; 0x54
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f001 f8ff 	bl	800b2ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d108      	bne.n	800a0ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 ff87 	bl	800afd0 <vPortFree>
				vPortFree( pxTCB );
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 ff84 	bl	800afd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a0c8:	e018      	b.n	800a0fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d103      	bne.n	800a0dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 ff7b 	bl	800afd0 <vPortFree>
	}
 800a0da:	e00f      	b.n	800a0fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d00a      	beq.n	800a0fc <prvDeleteTCB+0x60>
	__asm volatile
 800a0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ea:	f383 8811 	msr	BASEPRI, r3
 800a0ee:	f3bf 8f6f 	isb	sy
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	60fb      	str	r3, [r7, #12]
}
 800a0f8:	bf00      	nop
 800a0fa:	e7fe      	b.n	800a0fa <prvDeleteTCB+0x5e>
	}
 800a0fc:	bf00      	nop
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a10a:	4b0c      	ldr	r3, [pc, #48]	; (800a13c <prvResetNextTaskUnblockTime+0x38>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d104      	bne.n	800a11e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a114:	4b0a      	ldr	r3, [pc, #40]	; (800a140 <prvResetNextTaskUnblockTime+0x3c>)
 800a116:	f04f 32ff 	mov.w	r2, #4294967295
 800a11a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a11c:	e008      	b.n	800a130 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a11e:	4b07      	ldr	r3, [pc, #28]	; (800a13c <prvResetNextTaskUnblockTime+0x38>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	4a04      	ldr	r2, [pc, #16]	; (800a140 <prvResetNextTaskUnblockTime+0x3c>)
 800a12e:	6013      	str	r3, [r2, #0]
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	200014e8 	.word	0x200014e8
 800a140:	20001550 	.word	0x20001550

0800a144 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a14a:	4b0b      	ldr	r3, [pc, #44]	; (800a178 <xTaskGetSchedulerState+0x34>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d102      	bne.n	800a158 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a152:	2301      	movs	r3, #1
 800a154:	607b      	str	r3, [r7, #4]
 800a156:	e008      	b.n	800a16a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a158:	4b08      	ldr	r3, [pc, #32]	; (800a17c <xTaskGetSchedulerState+0x38>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d102      	bne.n	800a166 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a160:	2302      	movs	r3, #2
 800a162:	607b      	str	r3, [r7, #4]
 800a164:	e001      	b.n	800a16a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a166:	2300      	movs	r3, #0
 800a168:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a16a:	687b      	ldr	r3, [r7, #4]
	}
 800a16c:	4618      	mov	r0, r3
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	2000153c 	.word	0x2000153c
 800a17c:	20001558 	.word	0x20001558

0800a180 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a180:	b580      	push	{r7, lr}
 800a182:	b086      	sub	sp, #24
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a18c:	2300      	movs	r3, #0
 800a18e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d056      	beq.n	800a244 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a196:	4b2e      	ldr	r3, [pc, #184]	; (800a250 <xTaskPriorityDisinherit+0xd0>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	693a      	ldr	r2, [r7, #16]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d00a      	beq.n	800a1b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a4:	f383 8811 	msr	BASEPRI, r3
 800a1a8:	f3bf 8f6f 	isb	sy
 800a1ac:	f3bf 8f4f 	dsb	sy
 800a1b0:	60fb      	str	r3, [r7, #12]
}
 800a1b2:	bf00      	nop
 800a1b4:	e7fe      	b.n	800a1b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d10a      	bne.n	800a1d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c2:	f383 8811 	msr	BASEPRI, r3
 800a1c6:	f3bf 8f6f 	isb	sy
 800a1ca:	f3bf 8f4f 	dsb	sy
 800a1ce:	60bb      	str	r3, [r7, #8]
}
 800a1d0:	bf00      	nop
 800a1d2:	e7fe      	b.n	800a1d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1d8:	1e5a      	subs	r2, r3, #1
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d02c      	beq.n	800a244 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d128      	bne.n	800a244 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	3304      	adds	r3, #4
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fe fc46 	bl	8008a88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a208:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a214:	4b0f      	ldr	r3, [pc, #60]	; (800a254 <xTaskPriorityDisinherit+0xd4>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d903      	bls.n	800a224 <xTaskPriorityDisinherit+0xa4>
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a220:	4a0c      	ldr	r2, [pc, #48]	; (800a254 <xTaskPriorityDisinherit+0xd4>)
 800a222:	6013      	str	r3, [r2, #0]
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a228:	4613      	mov	r3, r2
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	4413      	add	r3, r2
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	4a09      	ldr	r2, [pc, #36]	; (800a258 <xTaskPriorityDisinherit+0xd8>)
 800a232:	441a      	add	r2, r3
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	3304      	adds	r3, #4
 800a238:	4619      	mov	r1, r3
 800a23a:	4610      	mov	r0, r2
 800a23c:	f7fe fbc7 	bl	80089ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a240:	2301      	movs	r3, #1
 800a242:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a244:	697b      	ldr	r3, [r7, #20]
	}
 800a246:	4618      	mov	r0, r3
 800a248:	3718      	adds	r7, #24
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	2000105c 	.word	0x2000105c
 800a254:	20001538 	.word	0x20001538
 800a258:	20001060 	.word	0x20001060

0800a25c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a266:	4b21      	ldr	r3, [pc, #132]	; (800a2ec <prvAddCurrentTaskToDelayedList+0x90>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a26c:	4b20      	ldr	r3, [pc, #128]	; (800a2f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	3304      	adds	r3, #4
 800a272:	4618      	mov	r0, r3
 800a274:	f7fe fc08 	bl	8008a88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a27e:	d10a      	bne.n	800a296 <prvAddCurrentTaskToDelayedList+0x3a>
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d007      	beq.n	800a296 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a286:	4b1a      	ldr	r3, [pc, #104]	; (800a2f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	3304      	adds	r3, #4
 800a28c:	4619      	mov	r1, r3
 800a28e:	4819      	ldr	r0, [pc, #100]	; (800a2f4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a290:	f7fe fb9d 	bl	80089ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a294:	e026      	b.n	800a2e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	4413      	add	r3, r2
 800a29c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a29e:	4b14      	ldr	r3, [pc, #80]	; (800a2f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a2a6:	68ba      	ldr	r2, [r7, #8]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d209      	bcs.n	800a2c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2ae:	4b12      	ldr	r3, [pc, #72]	; (800a2f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	4b0f      	ldr	r3, [pc, #60]	; (800a2f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	4610      	mov	r0, r2
 800a2bc:	f7fe fbab 	bl	8008a16 <vListInsert>
}
 800a2c0:	e010      	b.n	800a2e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2c2:	4b0e      	ldr	r3, [pc, #56]	; (800a2fc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	4b0a      	ldr	r3, [pc, #40]	; (800a2f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	3304      	adds	r3, #4
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	4610      	mov	r0, r2
 800a2d0:	f7fe fba1 	bl	8008a16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a2d4:	4b0a      	ldr	r3, [pc, #40]	; (800a300 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d202      	bcs.n	800a2e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a2de:	4a08      	ldr	r2, [pc, #32]	; (800a300 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	6013      	str	r3, [r2, #0]
}
 800a2e4:	bf00      	nop
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	20001534 	.word	0x20001534
 800a2f0:	2000105c 	.word	0x2000105c
 800a2f4:	2000151c 	.word	0x2000151c
 800a2f8:	200014ec 	.word	0x200014ec
 800a2fc:	200014e8 	.word	0x200014e8
 800a300:	20001550 	.word	0x20001550

0800a304 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b08a      	sub	sp, #40	; 0x28
 800a308:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a30a:	2300      	movs	r3, #0
 800a30c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a30e:	f000 fb07 	bl	800a920 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a312:	4b1c      	ldr	r3, [pc, #112]	; (800a384 <xTimerCreateTimerTask+0x80>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d021      	beq.n	800a35e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a31a:	2300      	movs	r3, #0
 800a31c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a31e:	2300      	movs	r3, #0
 800a320:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a322:	1d3a      	adds	r2, r7, #4
 800a324:	f107 0108 	add.w	r1, r7, #8
 800a328:	f107 030c 	add.w	r3, r7, #12
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7fe fb07 	bl	8008940 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a332:	6879      	ldr	r1, [r7, #4]
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	68fa      	ldr	r2, [r7, #12]
 800a338:	9202      	str	r2, [sp, #8]
 800a33a:	9301      	str	r3, [sp, #4]
 800a33c:	2302      	movs	r3, #2
 800a33e:	9300      	str	r3, [sp, #0]
 800a340:	2300      	movs	r3, #0
 800a342:	460a      	mov	r2, r1
 800a344:	4910      	ldr	r1, [pc, #64]	; (800a388 <xTimerCreateTimerTask+0x84>)
 800a346:	4811      	ldr	r0, [pc, #68]	; (800a38c <xTimerCreateTimerTask+0x88>)
 800a348:	f7ff f8b4 	bl	80094b4 <xTaskCreateStatic>
 800a34c:	4603      	mov	r3, r0
 800a34e:	4a10      	ldr	r2, [pc, #64]	; (800a390 <xTimerCreateTimerTask+0x8c>)
 800a350:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a352:	4b0f      	ldr	r3, [pc, #60]	; (800a390 <xTimerCreateTimerTask+0x8c>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a35a:	2301      	movs	r3, #1
 800a35c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d10a      	bne.n	800a37a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a368:	f383 8811 	msr	BASEPRI, r3
 800a36c:	f3bf 8f6f 	isb	sy
 800a370:	f3bf 8f4f 	dsb	sy
 800a374:	613b      	str	r3, [r7, #16]
}
 800a376:	bf00      	nop
 800a378:	e7fe      	b.n	800a378 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a37a:	697b      	ldr	r3, [r7, #20]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3718      	adds	r7, #24
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	2000158c 	.word	0x2000158c
 800a388:	0800c46c 	.word	0x0800c46c
 800a38c:	0800a4c9 	.word	0x0800a4c9
 800a390:	20001590 	.word	0x20001590

0800a394 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b08a      	sub	sp, #40	; 0x28
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
 800a3a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10a      	bne.n	800a3c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b0:	f383 8811 	msr	BASEPRI, r3
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	623b      	str	r3, [r7, #32]
}
 800a3be:	bf00      	nop
 800a3c0:	e7fe      	b.n	800a3c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a3c2:	4b1a      	ldr	r3, [pc, #104]	; (800a42c <xTimerGenericCommand+0x98>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d02a      	beq.n	800a420 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	2b05      	cmp	r3, #5
 800a3da:	dc18      	bgt.n	800a40e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a3dc:	f7ff feb2 	bl	800a144 <xTaskGetSchedulerState>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d109      	bne.n	800a3fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a3e6:	4b11      	ldr	r3, [pc, #68]	; (800a42c <xTimerGenericCommand+0x98>)
 800a3e8:	6818      	ldr	r0, [r3, #0]
 800a3ea:	f107 0110 	add.w	r1, r7, #16
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3f2:	f7fe fc77 	bl	8008ce4 <xQueueGenericSend>
 800a3f6:	6278      	str	r0, [r7, #36]	; 0x24
 800a3f8:	e012      	b.n	800a420 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a3fa:	4b0c      	ldr	r3, [pc, #48]	; (800a42c <xTimerGenericCommand+0x98>)
 800a3fc:	6818      	ldr	r0, [r3, #0]
 800a3fe:	f107 0110 	add.w	r1, r7, #16
 800a402:	2300      	movs	r3, #0
 800a404:	2200      	movs	r2, #0
 800a406:	f7fe fc6d 	bl	8008ce4 <xQueueGenericSend>
 800a40a:	6278      	str	r0, [r7, #36]	; 0x24
 800a40c:	e008      	b.n	800a420 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a40e:	4b07      	ldr	r3, [pc, #28]	; (800a42c <xTimerGenericCommand+0x98>)
 800a410:	6818      	ldr	r0, [r3, #0]
 800a412:	f107 0110 	add.w	r1, r7, #16
 800a416:	2300      	movs	r3, #0
 800a418:	683a      	ldr	r2, [r7, #0]
 800a41a:	f7fe fd61 	bl	8008ee0 <xQueueGenericSendFromISR>
 800a41e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a422:	4618      	mov	r0, r3
 800a424:	3728      	adds	r7, #40	; 0x28
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	2000158c 	.word	0x2000158c

0800a430 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b088      	sub	sp, #32
 800a434:	af02      	add	r7, sp, #8
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a43a:	4b22      	ldr	r3, [pc, #136]	; (800a4c4 <prvProcessExpiredTimer+0x94>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	3304      	adds	r3, #4
 800a448:	4618      	mov	r0, r3
 800a44a:	f7fe fb1d 	bl	8008a88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a454:	f003 0304 	and.w	r3, r3, #4
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d022      	beq.n	800a4a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	699a      	ldr	r2, [r3, #24]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	18d1      	adds	r1, r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	683a      	ldr	r2, [r7, #0]
 800a468:	6978      	ldr	r0, [r7, #20]
 800a46a:	f000 f8d1 	bl	800a610 <prvInsertTimerInActiveList>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d01f      	beq.n	800a4b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a474:	2300      	movs	r3, #0
 800a476:	9300      	str	r3, [sp, #0]
 800a478:	2300      	movs	r3, #0
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	2100      	movs	r1, #0
 800a47e:	6978      	ldr	r0, [r7, #20]
 800a480:	f7ff ff88 	bl	800a394 <xTimerGenericCommand>
 800a484:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d113      	bne.n	800a4b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	60fb      	str	r3, [r7, #12]
}
 800a49e:	bf00      	nop
 800a4a0:	e7fe      	b.n	800a4a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4a8:	f023 0301 	bic.w	r3, r3, #1
 800a4ac:	b2da      	uxtb	r2, r3
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	6a1b      	ldr	r3, [r3, #32]
 800a4b8:	6978      	ldr	r0, [r7, #20]
 800a4ba:	4798      	blx	r3
}
 800a4bc:	bf00      	nop
 800a4be:	3718      	adds	r7, #24
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	20001584 	.word	0x20001584

0800a4c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4d0:	f107 0308 	add.w	r3, r7, #8
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f000 f857 	bl	800a588 <prvGetNextExpireTime>
 800a4da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	4619      	mov	r1, r3
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f000 f803 	bl	800a4ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a4e6:	f000 f8d5 	bl	800a694 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4ea:	e7f1      	b.n	800a4d0 <prvTimerTask+0x8>

0800a4ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a4f6:	f7ff fa39 	bl	800996c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4fa:	f107 0308 	add.w	r3, r7, #8
 800a4fe:	4618      	mov	r0, r3
 800a500:	f000 f866 	bl	800a5d0 <prvSampleTimeNow>
 800a504:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d130      	bne.n	800a56e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10a      	bne.n	800a528 <prvProcessTimerOrBlockTask+0x3c>
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	429a      	cmp	r2, r3
 800a518:	d806      	bhi.n	800a528 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a51a:	f7ff fa35 	bl	8009988 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a51e:	68f9      	ldr	r1, [r7, #12]
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f7ff ff85 	bl	800a430 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a526:	e024      	b.n	800a572 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d008      	beq.n	800a540 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a52e:	4b13      	ldr	r3, [pc, #76]	; (800a57c <prvProcessTimerOrBlockTask+0x90>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d101      	bne.n	800a53c <prvProcessTimerOrBlockTask+0x50>
 800a538:	2301      	movs	r3, #1
 800a53a:	e000      	b.n	800a53e <prvProcessTimerOrBlockTask+0x52>
 800a53c:	2300      	movs	r3, #0
 800a53e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a540:	4b0f      	ldr	r3, [pc, #60]	; (800a580 <prvProcessTimerOrBlockTask+0x94>)
 800a542:	6818      	ldr	r0, [r3, #0]
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	1ad3      	subs	r3, r2, r3
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	4619      	mov	r1, r3
 800a54e:	f7fe ff7d 	bl	800944c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a552:	f7ff fa19 	bl	8009988 <xTaskResumeAll>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10a      	bne.n	800a572 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a55c:	4b09      	ldr	r3, [pc, #36]	; (800a584 <prvProcessTimerOrBlockTask+0x98>)
 800a55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a562:	601a      	str	r2, [r3, #0]
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	f3bf 8f6f 	isb	sy
}
 800a56c:	e001      	b.n	800a572 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a56e:	f7ff fa0b 	bl	8009988 <xTaskResumeAll>
}
 800a572:	bf00      	nop
 800a574:	3710      	adds	r7, #16
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	20001588 	.word	0x20001588
 800a580:	2000158c 	.word	0x2000158c
 800a584:	e000ed04 	.word	0xe000ed04

0800a588 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a590:	4b0e      	ldr	r3, [pc, #56]	; (800a5cc <prvGetNextExpireTime+0x44>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d101      	bne.n	800a59e <prvGetNextExpireTime+0x16>
 800a59a:	2201      	movs	r2, #1
 800a59c:	e000      	b.n	800a5a0 <prvGetNextExpireTime+0x18>
 800a59e:	2200      	movs	r2, #0
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d105      	bne.n	800a5b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5ac:	4b07      	ldr	r3, [pc, #28]	; (800a5cc <prvGetNextExpireTime+0x44>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	60fb      	str	r3, [r7, #12]
 800a5b6:	e001      	b.n	800a5bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3714      	adds	r7, #20
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	20001584 	.word	0x20001584

0800a5d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a5d8:	f7ff fa74 	bl	8009ac4 <xTaskGetTickCount>
 800a5dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a5de:	4b0b      	ldr	r3, [pc, #44]	; (800a60c <prvSampleTimeNow+0x3c>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	68fa      	ldr	r2, [r7, #12]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d205      	bcs.n	800a5f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a5e8:	f000 f936 	bl	800a858 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	601a      	str	r2, [r3, #0]
 800a5f2:	e002      	b.n	800a5fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a5fa:	4a04      	ldr	r2, [pc, #16]	; (800a60c <prvSampleTimeNow+0x3c>)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a600:	68fb      	ldr	r3, [r7, #12]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	20001594 	.word	0x20001594

0800a610 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	607a      	str	r2, [r7, #4]
 800a61c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a61e:	2300      	movs	r3, #0
 800a620:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	68ba      	ldr	r2, [r7, #8]
 800a626:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	429a      	cmp	r2, r3
 800a634:	d812      	bhi.n	800a65c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	1ad2      	subs	r2, r2, r3
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	699b      	ldr	r3, [r3, #24]
 800a640:	429a      	cmp	r2, r3
 800a642:	d302      	bcc.n	800a64a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a644:	2301      	movs	r3, #1
 800a646:	617b      	str	r3, [r7, #20]
 800a648:	e01b      	b.n	800a682 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a64a:	4b10      	ldr	r3, [pc, #64]	; (800a68c <prvInsertTimerInActiveList+0x7c>)
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	3304      	adds	r3, #4
 800a652:	4619      	mov	r1, r3
 800a654:	4610      	mov	r0, r2
 800a656:	f7fe f9de 	bl	8008a16 <vListInsert>
 800a65a:	e012      	b.n	800a682 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	429a      	cmp	r2, r3
 800a662:	d206      	bcs.n	800a672 <prvInsertTimerInActiveList+0x62>
 800a664:	68ba      	ldr	r2, [r7, #8]
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d302      	bcc.n	800a672 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a66c:	2301      	movs	r3, #1
 800a66e:	617b      	str	r3, [r7, #20]
 800a670:	e007      	b.n	800a682 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a672:	4b07      	ldr	r3, [pc, #28]	; (800a690 <prvInsertTimerInActiveList+0x80>)
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	3304      	adds	r3, #4
 800a67a:	4619      	mov	r1, r3
 800a67c:	4610      	mov	r0, r2
 800a67e:	f7fe f9ca 	bl	8008a16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a682:	697b      	ldr	r3, [r7, #20]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3718      	adds	r7, #24
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	20001588 	.word	0x20001588
 800a690:	20001584 	.word	0x20001584

0800a694 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b08e      	sub	sp, #56	; 0x38
 800a698:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a69a:	e0ca      	b.n	800a832 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	da18      	bge.n	800a6d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a6a2:	1d3b      	adds	r3, r7, #4
 800a6a4:	3304      	adds	r3, #4
 800a6a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d10a      	bne.n	800a6c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	61fb      	str	r3, [r7, #28]
}
 800a6c0:	bf00      	nop
 800a6c2:	e7fe      	b.n	800a6c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6ca:	6850      	ldr	r0, [r2, #4]
 800a6cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6ce:	6892      	ldr	r2, [r2, #8]
 800a6d0:	4611      	mov	r1, r2
 800a6d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f2c0 80aa 	blt.w	800a830 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e2:	695b      	ldr	r3, [r3, #20]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d004      	beq.n	800a6f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	3304      	adds	r3, #4
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7fe f9cb 	bl	8008a88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6f2:	463b      	mov	r3, r7
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7ff ff6b 	bl	800a5d0 <prvSampleTimeNow>
 800a6fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2b09      	cmp	r3, #9
 800a700:	f200 8097 	bhi.w	800a832 <prvProcessReceivedCommands+0x19e>
 800a704:	a201      	add	r2, pc, #4	; (adr r2, 800a70c <prvProcessReceivedCommands+0x78>)
 800a706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a70a:	bf00      	nop
 800a70c:	0800a735 	.word	0x0800a735
 800a710:	0800a735 	.word	0x0800a735
 800a714:	0800a735 	.word	0x0800a735
 800a718:	0800a7a9 	.word	0x0800a7a9
 800a71c:	0800a7bd 	.word	0x0800a7bd
 800a720:	0800a807 	.word	0x0800a807
 800a724:	0800a735 	.word	0x0800a735
 800a728:	0800a735 	.word	0x0800a735
 800a72c:	0800a7a9 	.word	0x0800a7a9
 800a730:	0800a7bd 	.word	0x0800a7bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a736:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a73a:	f043 0301 	orr.w	r3, r3, #1
 800a73e:	b2da      	uxtb	r2, r3
 800a740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a742:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a746:	68ba      	ldr	r2, [r7, #8]
 800a748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74a:	699b      	ldr	r3, [r3, #24]
 800a74c:	18d1      	adds	r1, r2, r3
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a754:	f7ff ff5c 	bl	800a610 <prvInsertTimerInActiveList>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d069      	beq.n	800a832 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a760:	6a1b      	ldr	r3, [r3, #32]
 800a762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a764:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a76c:	f003 0304 	and.w	r3, r3, #4
 800a770:	2b00      	cmp	r3, #0
 800a772:	d05e      	beq.n	800a832 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a774:	68ba      	ldr	r2, [r7, #8]
 800a776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	441a      	add	r2, r3
 800a77c:	2300      	movs	r3, #0
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	2300      	movs	r3, #0
 800a782:	2100      	movs	r1, #0
 800a784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a786:	f7ff fe05 	bl	800a394 <xTimerGenericCommand>
 800a78a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a78c:	6a3b      	ldr	r3, [r7, #32]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d14f      	bne.n	800a832 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	61bb      	str	r3, [r7, #24]
}
 800a7a4:	bf00      	nop
 800a7a6:	e7fe      	b.n	800a7a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7ae:	f023 0301 	bic.w	r3, r3, #1
 800a7b2:	b2da      	uxtb	r2, r3
 800a7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a7ba:	e03a      	b.n	800a832 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7c2:	f043 0301 	orr.w	r3, r3, #1
 800a7c6:	b2da      	uxtb	r2, r3
 800a7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d6:	699b      	ldr	r3, [r3, #24]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d10a      	bne.n	800a7f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e0:	f383 8811 	msr	BASEPRI, r3
 800a7e4:	f3bf 8f6f 	isb	sy
 800a7e8:	f3bf 8f4f 	dsb	sy
 800a7ec:	617b      	str	r3, [r7, #20]
}
 800a7ee:	bf00      	nop
 800a7f0:	e7fe      	b.n	800a7f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f4:	699a      	ldr	r2, [r3, #24]
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f8:	18d1      	adds	r1, r2, r3
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a800:	f7ff ff06 	bl	800a610 <prvInsertTimerInActiveList>
					break;
 800a804:	e015      	b.n	800a832 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a808:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a80c:	f003 0302 	and.w	r3, r3, #2
 800a810:	2b00      	cmp	r3, #0
 800a812:	d103      	bne.n	800a81c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a816:	f000 fbdb 	bl	800afd0 <vPortFree>
 800a81a:	e00a      	b.n	800a832 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a822:	f023 0301 	bic.w	r3, r3, #1
 800a826:	b2da      	uxtb	r2, r3
 800a828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a82e:	e000      	b.n	800a832 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a830:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a832:	4b08      	ldr	r3, [pc, #32]	; (800a854 <prvProcessReceivedCommands+0x1c0>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	1d39      	adds	r1, r7, #4
 800a838:	2200      	movs	r2, #0
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fe fbec 	bl	8009018 <xQueueReceive>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	f47f af2a 	bne.w	800a69c <prvProcessReceivedCommands+0x8>
	}
}
 800a848:	bf00      	nop
 800a84a:	bf00      	nop
 800a84c:	3730      	adds	r7, #48	; 0x30
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	2000158c 	.word	0x2000158c

0800a858 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b088      	sub	sp, #32
 800a85c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a85e:	e048      	b.n	800a8f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a860:	4b2d      	ldr	r3, [pc, #180]	; (800a918 <prvSwitchTimerLists+0xc0>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a86a:	4b2b      	ldr	r3, [pc, #172]	; (800a918 <prvSwitchTimerLists+0xc0>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	3304      	adds	r3, #4
 800a878:	4618      	mov	r0, r3
 800a87a:	f7fe f905 	bl	8008a88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a88c:	f003 0304 	and.w	r3, r3, #4
 800a890:	2b00      	cmp	r3, #0
 800a892:	d02e      	beq.n	800a8f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	699b      	ldr	r3, [r3, #24]
 800a898:	693a      	ldr	r2, [r7, #16]
 800a89a:	4413      	add	r3, r2
 800a89c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d90e      	bls.n	800a8c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	68ba      	ldr	r2, [r7, #8]
 800a8aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a8b2:	4b19      	ldr	r3, [pc, #100]	; (800a918 <prvSwitchTimerLists+0xc0>)
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	3304      	adds	r3, #4
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	4610      	mov	r0, r2
 800a8be:	f7fe f8aa 	bl	8008a16 <vListInsert>
 800a8c2:	e016      	b.n	800a8f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	693a      	ldr	r2, [r7, #16]
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	68f8      	ldr	r0, [r7, #12]
 800a8d0:	f7ff fd60 	bl	800a394 <xTimerGenericCommand>
 800a8d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10a      	bne.n	800a8f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e0:	f383 8811 	msr	BASEPRI, r3
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	603b      	str	r3, [r7, #0]
}
 800a8ee:	bf00      	nop
 800a8f0:	e7fe      	b.n	800a8f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8f2:	4b09      	ldr	r3, [pc, #36]	; (800a918 <prvSwitchTimerLists+0xc0>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d1b1      	bne.n	800a860 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a8fc:	4b06      	ldr	r3, [pc, #24]	; (800a918 <prvSwitchTimerLists+0xc0>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a902:	4b06      	ldr	r3, [pc, #24]	; (800a91c <prvSwitchTimerLists+0xc4>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a04      	ldr	r2, [pc, #16]	; (800a918 <prvSwitchTimerLists+0xc0>)
 800a908:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a90a:	4a04      	ldr	r2, [pc, #16]	; (800a91c <prvSwitchTimerLists+0xc4>)
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	6013      	str	r3, [r2, #0]
}
 800a910:	bf00      	nop
 800a912:	3718      	adds	r7, #24
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	20001584 	.word	0x20001584
 800a91c:	20001588 	.word	0x20001588

0800a920 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a926:	f000 f965 	bl	800abf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a92a:	4b15      	ldr	r3, [pc, #84]	; (800a980 <prvCheckForValidListAndQueue+0x60>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d120      	bne.n	800a974 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a932:	4814      	ldr	r0, [pc, #80]	; (800a984 <prvCheckForValidListAndQueue+0x64>)
 800a934:	f7fe f81e 	bl	8008974 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a938:	4813      	ldr	r0, [pc, #76]	; (800a988 <prvCheckForValidListAndQueue+0x68>)
 800a93a:	f7fe f81b 	bl	8008974 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a93e:	4b13      	ldr	r3, [pc, #76]	; (800a98c <prvCheckForValidListAndQueue+0x6c>)
 800a940:	4a10      	ldr	r2, [pc, #64]	; (800a984 <prvCheckForValidListAndQueue+0x64>)
 800a942:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a944:	4b12      	ldr	r3, [pc, #72]	; (800a990 <prvCheckForValidListAndQueue+0x70>)
 800a946:	4a10      	ldr	r2, [pc, #64]	; (800a988 <prvCheckForValidListAndQueue+0x68>)
 800a948:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a94a:	2300      	movs	r3, #0
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	4b11      	ldr	r3, [pc, #68]	; (800a994 <prvCheckForValidListAndQueue+0x74>)
 800a950:	4a11      	ldr	r2, [pc, #68]	; (800a998 <prvCheckForValidListAndQueue+0x78>)
 800a952:	2110      	movs	r1, #16
 800a954:	200a      	movs	r0, #10
 800a956:	f7fe f929 	bl	8008bac <xQueueGenericCreateStatic>
 800a95a:	4603      	mov	r3, r0
 800a95c:	4a08      	ldr	r2, [pc, #32]	; (800a980 <prvCheckForValidListAndQueue+0x60>)
 800a95e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a960:	4b07      	ldr	r3, [pc, #28]	; (800a980 <prvCheckForValidListAndQueue+0x60>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d005      	beq.n	800a974 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a968:	4b05      	ldr	r3, [pc, #20]	; (800a980 <prvCheckForValidListAndQueue+0x60>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	490b      	ldr	r1, [pc, #44]	; (800a99c <prvCheckForValidListAndQueue+0x7c>)
 800a96e:	4618      	mov	r0, r3
 800a970:	f7fe fd42 	bl	80093f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a974:	f000 f96e 	bl	800ac54 <vPortExitCritical>
}
 800a978:	bf00      	nop
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	2000158c 	.word	0x2000158c
 800a984:	2000155c 	.word	0x2000155c
 800a988:	20001570 	.word	0x20001570
 800a98c:	20001584 	.word	0x20001584
 800a990:	20001588 	.word	0x20001588
 800a994:	20001638 	.word	0x20001638
 800a998:	20001598 	.word	0x20001598
 800a99c:	0800c474 	.word	0x0800c474

0800a9a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b085      	sub	sp, #20
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	3b04      	subs	r3, #4
 800a9b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a9b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	3b04      	subs	r3, #4
 800a9be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	f023 0201 	bic.w	r2, r3, #1
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	3b04      	subs	r3, #4
 800a9ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a9d0:	4a0c      	ldr	r2, [pc, #48]	; (800aa04 <pxPortInitialiseStack+0x64>)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	3b14      	subs	r3, #20
 800a9da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	3b04      	subs	r3, #4
 800a9e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f06f 0202 	mvn.w	r2, #2
 800a9ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	3b20      	subs	r3, #32
 800a9f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3714      	adds	r7, #20
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr
 800aa04:	0800aa09 	.word	0x0800aa09

0800aa08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa12:	4b12      	ldr	r3, [pc, #72]	; (800aa5c <prvTaskExitError+0x54>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1a:	d00a      	beq.n	800aa32 <prvTaskExitError+0x2a>
	__asm volatile
 800aa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	60fb      	str	r3, [r7, #12]
}
 800aa2e:	bf00      	nop
 800aa30:	e7fe      	b.n	800aa30 <prvTaskExitError+0x28>
	__asm volatile
 800aa32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa36:	f383 8811 	msr	BASEPRI, r3
 800aa3a:	f3bf 8f6f 	isb	sy
 800aa3e:	f3bf 8f4f 	dsb	sy
 800aa42:	60bb      	str	r3, [r7, #8]
}
 800aa44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa46:	bf00      	nop
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d0fc      	beq.n	800aa48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa4e:	bf00      	nop
 800aa50:	bf00      	nop
 800aa52:	3714      	adds	r7, #20
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr
 800aa5c:	2000004c 	.word	0x2000004c

0800aa60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa60:	4b07      	ldr	r3, [pc, #28]	; (800aa80 <pxCurrentTCBConst2>)
 800aa62:	6819      	ldr	r1, [r3, #0]
 800aa64:	6808      	ldr	r0, [r1, #0]
 800aa66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa6a:	f380 8809 	msr	PSP, r0
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	f04f 0000 	mov.w	r0, #0
 800aa76:	f380 8811 	msr	BASEPRI, r0
 800aa7a:	4770      	bx	lr
 800aa7c:	f3af 8000 	nop.w

0800aa80 <pxCurrentTCBConst2>:
 800aa80:	2000105c 	.word	0x2000105c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa84:	bf00      	nop
 800aa86:	bf00      	nop

0800aa88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa88:	4808      	ldr	r0, [pc, #32]	; (800aaac <prvPortStartFirstTask+0x24>)
 800aa8a:	6800      	ldr	r0, [r0, #0]
 800aa8c:	6800      	ldr	r0, [r0, #0]
 800aa8e:	f380 8808 	msr	MSP, r0
 800aa92:	f04f 0000 	mov.w	r0, #0
 800aa96:	f380 8814 	msr	CONTROL, r0
 800aa9a:	b662      	cpsie	i
 800aa9c:	b661      	cpsie	f
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	df00      	svc	0
 800aaa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aaaa:	bf00      	nop
 800aaac:	e000ed08 	.word	0xe000ed08

0800aab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aab6:	4b46      	ldr	r3, [pc, #280]	; (800abd0 <xPortStartScheduler+0x120>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a46      	ldr	r2, [pc, #280]	; (800abd4 <xPortStartScheduler+0x124>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d10a      	bne.n	800aad6 <xPortStartScheduler+0x26>
	__asm volatile
 800aac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac4:	f383 8811 	msr	BASEPRI, r3
 800aac8:	f3bf 8f6f 	isb	sy
 800aacc:	f3bf 8f4f 	dsb	sy
 800aad0:	613b      	str	r3, [r7, #16]
}
 800aad2:	bf00      	nop
 800aad4:	e7fe      	b.n	800aad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aad6:	4b3e      	ldr	r3, [pc, #248]	; (800abd0 <xPortStartScheduler+0x120>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a3f      	ldr	r2, [pc, #252]	; (800abd8 <xPortStartScheduler+0x128>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d10a      	bne.n	800aaf6 <xPortStartScheduler+0x46>
	__asm volatile
 800aae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae4:	f383 8811 	msr	BASEPRI, r3
 800aae8:	f3bf 8f6f 	isb	sy
 800aaec:	f3bf 8f4f 	dsb	sy
 800aaf0:	60fb      	str	r3, [r7, #12]
}
 800aaf2:	bf00      	nop
 800aaf4:	e7fe      	b.n	800aaf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aaf6:	4b39      	ldr	r3, [pc, #228]	; (800abdc <xPortStartScheduler+0x12c>)
 800aaf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	22ff      	movs	r2, #255	; 0xff
 800ab06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab10:	78fb      	ldrb	r3, [r7, #3]
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ab18:	b2da      	uxtb	r2, r3
 800ab1a:	4b31      	ldr	r3, [pc, #196]	; (800abe0 <xPortStartScheduler+0x130>)
 800ab1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ab1e:	4b31      	ldr	r3, [pc, #196]	; (800abe4 <xPortStartScheduler+0x134>)
 800ab20:	2207      	movs	r2, #7
 800ab22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab24:	e009      	b.n	800ab3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ab26:	4b2f      	ldr	r3, [pc, #188]	; (800abe4 <xPortStartScheduler+0x134>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	4a2d      	ldr	r2, [pc, #180]	; (800abe4 <xPortStartScheduler+0x134>)
 800ab2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab30:	78fb      	ldrb	r3, [r7, #3]
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	005b      	lsls	r3, r3, #1
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab3a:	78fb      	ldrb	r3, [r7, #3]
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab42:	2b80      	cmp	r3, #128	; 0x80
 800ab44:	d0ef      	beq.n	800ab26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab46:	4b27      	ldr	r3, [pc, #156]	; (800abe4 <xPortStartScheduler+0x134>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f1c3 0307 	rsb	r3, r3, #7
 800ab4e:	2b04      	cmp	r3, #4
 800ab50:	d00a      	beq.n	800ab68 <xPortStartScheduler+0xb8>
	__asm volatile
 800ab52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab56:	f383 8811 	msr	BASEPRI, r3
 800ab5a:	f3bf 8f6f 	isb	sy
 800ab5e:	f3bf 8f4f 	dsb	sy
 800ab62:	60bb      	str	r3, [r7, #8]
}
 800ab64:	bf00      	nop
 800ab66:	e7fe      	b.n	800ab66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab68:	4b1e      	ldr	r3, [pc, #120]	; (800abe4 <xPortStartScheduler+0x134>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	021b      	lsls	r3, r3, #8
 800ab6e:	4a1d      	ldr	r2, [pc, #116]	; (800abe4 <xPortStartScheduler+0x134>)
 800ab70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab72:	4b1c      	ldr	r3, [pc, #112]	; (800abe4 <xPortStartScheduler+0x134>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab7a:	4a1a      	ldr	r2, [pc, #104]	; (800abe4 <xPortStartScheduler+0x134>)
 800ab7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	b2da      	uxtb	r2, r3
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab86:	4b18      	ldr	r3, [pc, #96]	; (800abe8 <xPortStartScheduler+0x138>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a17      	ldr	r2, [pc, #92]	; (800abe8 <xPortStartScheduler+0x138>)
 800ab8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab92:	4b15      	ldr	r3, [pc, #84]	; (800abe8 <xPortStartScheduler+0x138>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a14      	ldr	r2, [pc, #80]	; (800abe8 <xPortStartScheduler+0x138>)
 800ab98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab9e:	f000 f8dd 	bl	800ad5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aba2:	4b12      	ldr	r3, [pc, #72]	; (800abec <xPortStartScheduler+0x13c>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aba8:	f000 f8fc 	bl	800ada4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800abac:	4b10      	ldr	r3, [pc, #64]	; (800abf0 <xPortStartScheduler+0x140>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a0f      	ldr	r2, [pc, #60]	; (800abf0 <xPortStartScheduler+0x140>)
 800abb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800abb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800abb8:	f7ff ff66 	bl	800aa88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800abbc:	f7ff f84c 	bl	8009c58 <vTaskSwitchContext>
	prvTaskExitError();
 800abc0:	f7ff ff22 	bl	800aa08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3718      	adds	r7, #24
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	bf00      	nop
 800abd0:	e000ed00 	.word	0xe000ed00
 800abd4:	410fc271 	.word	0x410fc271
 800abd8:	410fc270 	.word	0x410fc270
 800abdc:	e000e400 	.word	0xe000e400
 800abe0:	20001688 	.word	0x20001688
 800abe4:	2000168c 	.word	0x2000168c
 800abe8:	e000ed20 	.word	0xe000ed20
 800abec:	2000004c 	.word	0x2000004c
 800abf0:	e000ef34 	.word	0xe000ef34

0800abf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
	__asm volatile
 800abfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfe:	f383 8811 	msr	BASEPRI, r3
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	f3bf 8f4f 	dsb	sy
 800ac0a:	607b      	str	r3, [r7, #4]
}
 800ac0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ac0e:	4b0f      	ldr	r3, [pc, #60]	; (800ac4c <vPortEnterCritical+0x58>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	3301      	adds	r3, #1
 800ac14:	4a0d      	ldr	r2, [pc, #52]	; (800ac4c <vPortEnterCritical+0x58>)
 800ac16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ac18:	4b0c      	ldr	r3, [pc, #48]	; (800ac4c <vPortEnterCritical+0x58>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d10f      	bne.n	800ac40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ac20:	4b0b      	ldr	r3, [pc, #44]	; (800ac50 <vPortEnterCritical+0x5c>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00a      	beq.n	800ac40 <vPortEnterCritical+0x4c>
	__asm volatile
 800ac2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2e:	f383 8811 	msr	BASEPRI, r3
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	f3bf 8f4f 	dsb	sy
 800ac3a:	603b      	str	r3, [r7, #0]
}
 800ac3c:	bf00      	nop
 800ac3e:	e7fe      	b.n	800ac3e <vPortEnterCritical+0x4a>
	}
}
 800ac40:	bf00      	nop
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr
 800ac4c:	2000004c 	.word	0x2000004c
 800ac50:	e000ed04 	.word	0xe000ed04

0800ac54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac5a:	4b12      	ldr	r3, [pc, #72]	; (800aca4 <vPortExitCritical+0x50>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d10a      	bne.n	800ac78 <vPortExitCritical+0x24>
	__asm volatile
 800ac62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac66:	f383 8811 	msr	BASEPRI, r3
 800ac6a:	f3bf 8f6f 	isb	sy
 800ac6e:	f3bf 8f4f 	dsb	sy
 800ac72:	607b      	str	r3, [r7, #4]
}
 800ac74:	bf00      	nop
 800ac76:	e7fe      	b.n	800ac76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ac78:	4b0a      	ldr	r3, [pc, #40]	; (800aca4 <vPortExitCritical+0x50>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	4a09      	ldr	r2, [pc, #36]	; (800aca4 <vPortExitCritical+0x50>)
 800ac80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac82:	4b08      	ldr	r3, [pc, #32]	; (800aca4 <vPortExitCritical+0x50>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d105      	bne.n	800ac96 <vPortExitCritical+0x42>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	f383 8811 	msr	BASEPRI, r3
}
 800ac94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac96:	bf00      	nop
 800ac98:	370c      	adds	r7, #12
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop
 800aca4:	2000004c 	.word	0x2000004c
	...

0800acb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800acb0:	f3ef 8009 	mrs	r0, PSP
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	4b15      	ldr	r3, [pc, #84]	; (800ad10 <pxCurrentTCBConst>)
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	f01e 0f10 	tst.w	lr, #16
 800acc0:	bf08      	it	eq
 800acc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800acc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acca:	6010      	str	r0, [r2, #0]
 800accc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800acd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800acd4:	f380 8811 	msr	BASEPRI, r0
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	f3bf 8f6f 	isb	sy
 800ace0:	f7fe ffba 	bl	8009c58 <vTaskSwitchContext>
 800ace4:	f04f 0000 	mov.w	r0, #0
 800ace8:	f380 8811 	msr	BASEPRI, r0
 800acec:	bc09      	pop	{r0, r3}
 800acee:	6819      	ldr	r1, [r3, #0]
 800acf0:	6808      	ldr	r0, [r1, #0]
 800acf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf6:	f01e 0f10 	tst.w	lr, #16
 800acfa:	bf08      	it	eq
 800acfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ad00:	f380 8809 	msr	PSP, r0
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	f3af 8000 	nop.w

0800ad10 <pxCurrentTCBConst>:
 800ad10:	2000105c 	.word	0x2000105c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ad14:	bf00      	nop
 800ad16:	bf00      	nop

0800ad18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad22:	f383 8811 	msr	BASEPRI, r3
 800ad26:	f3bf 8f6f 	isb	sy
 800ad2a:	f3bf 8f4f 	dsb	sy
 800ad2e:	607b      	str	r3, [r7, #4]
}
 800ad30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad32:	f7fe fed7 	bl	8009ae4 <xTaskIncrementTick>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d003      	beq.n	800ad44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad3c:	4b06      	ldr	r3, [pc, #24]	; (800ad58 <xPortSysTickHandler+0x40>)
 800ad3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad42:	601a      	str	r2, [r3, #0]
 800ad44:	2300      	movs	r3, #0
 800ad46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	f383 8811 	msr	BASEPRI, r3
}
 800ad4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad50:	bf00      	nop
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	e000ed04 	.word	0xe000ed04

0800ad5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad60:	4b0b      	ldr	r3, [pc, #44]	; (800ad90 <vPortSetupTimerInterrupt+0x34>)
 800ad62:	2200      	movs	r2, #0
 800ad64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad66:	4b0b      	ldr	r3, [pc, #44]	; (800ad94 <vPortSetupTimerInterrupt+0x38>)
 800ad68:	2200      	movs	r2, #0
 800ad6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad6c:	4b0a      	ldr	r3, [pc, #40]	; (800ad98 <vPortSetupTimerInterrupt+0x3c>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a0a      	ldr	r2, [pc, #40]	; (800ad9c <vPortSetupTimerInterrupt+0x40>)
 800ad72:	fba2 2303 	umull	r2, r3, r2, r3
 800ad76:	099b      	lsrs	r3, r3, #6
 800ad78:	4a09      	ldr	r2, [pc, #36]	; (800ada0 <vPortSetupTimerInterrupt+0x44>)
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad7e:	4b04      	ldr	r3, [pc, #16]	; (800ad90 <vPortSetupTimerInterrupt+0x34>)
 800ad80:	2207      	movs	r2, #7
 800ad82:	601a      	str	r2, [r3, #0]
}
 800ad84:	bf00      	nop
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	e000e010 	.word	0xe000e010
 800ad94:	e000e018 	.word	0xe000e018
 800ad98:	20000040 	.word	0x20000040
 800ad9c:	10624dd3 	.word	0x10624dd3
 800ada0:	e000e014 	.word	0xe000e014

0800ada4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ada4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800adb4 <vPortEnableVFP+0x10>
 800ada8:	6801      	ldr	r1, [r0, #0]
 800adaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800adae:	6001      	str	r1, [r0, #0]
 800adb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800adb2:	bf00      	nop
 800adb4:	e000ed88 	.word	0xe000ed88

0800adb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800adb8:	b480      	push	{r7}
 800adba:	b085      	sub	sp, #20
 800adbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800adbe:	f3ef 8305 	mrs	r3, IPSR
 800adc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2b0f      	cmp	r3, #15
 800adc8:	d914      	bls.n	800adf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800adca:	4a17      	ldr	r2, [pc, #92]	; (800ae28 <vPortValidateInterruptPriority+0x70>)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	4413      	add	r3, r2
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800add4:	4b15      	ldr	r3, [pc, #84]	; (800ae2c <vPortValidateInterruptPriority+0x74>)
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	7afa      	ldrb	r2, [r7, #11]
 800adda:	429a      	cmp	r2, r3
 800addc:	d20a      	bcs.n	800adf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800adde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade2:	f383 8811 	msr	BASEPRI, r3
 800ade6:	f3bf 8f6f 	isb	sy
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	607b      	str	r3, [r7, #4]
}
 800adf0:	bf00      	nop
 800adf2:	e7fe      	b.n	800adf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800adf4:	4b0e      	ldr	r3, [pc, #56]	; (800ae30 <vPortValidateInterruptPriority+0x78>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800adfc:	4b0d      	ldr	r3, [pc, #52]	; (800ae34 <vPortValidateInterruptPriority+0x7c>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d90a      	bls.n	800ae1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ae04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae08:	f383 8811 	msr	BASEPRI, r3
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	603b      	str	r3, [r7, #0]
}
 800ae16:	bf00      	nop
 800ae18:	e7fe      	b.n	800ae18 <vPortValidateInterruptPriority+0x60>
	}
 800ae1a:	bf00      	nop
 800ae1c:	3714      	adds	r7, #20
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr
 800ae26:	bf00      	nop
 800ae28:	e000e3f0 	.word	0xe000e3f0
 800ae2c:	20001688 	.word	0x20001688
 800ae30:	e000ed0c 	.word	0xe000ed0c
 800ae34:	2000168c 	.word	0x2000168c

0800ae38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b08a      	sub	sp, #40	; 0x28
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ae40:	2300      	movs	r3, #0
 800ae42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ae44:	f7fe fd92 	bl	800996c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ae48:	4b5b      	ldr	r3, [pc, #364]	; (800afb8 <pvPortMalloc+0x180>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d101      	bne.n	800ae54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ae50:	f000 f920 	bl	800b094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ae54:	4b59      	ldr	r3, [pc, #356]	; (800afbc <pvPortMalloc+0x184>)
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4013      	ands	r3, r2
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f040 8093 	bne.w	800af88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d01d      	beq.n	800aea4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ae68:	2208      	movs	r2, #8
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f003 0307 	and.w	r3, r3, #7
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d014      	beq.n	800aea4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f023 0307 	bic.w	r3, r3, #7
 800ae80:	3308      	adds	r3, #8
 800ae82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f003 0307 	and.w	r3, r3, #7
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00a      	beq.n	800aea4 <pvPortMalloc+0x6c>
	__asm volatile
 800ae8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae92:	f383 8811 	msr	BASEPRI, r3
 800ae96:	f3bf 8f6f 	isb	sy
 800ae9a:	f3bf 8f4f 	dsb	sy
 800ae9e:	617b      	str	r3, [r7, #20]
}
 800aea0:	bf00      	nop
 800aea2:	e7fe      	b.n	800aea2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d06e      	beq.n	800af88 <pvPortMalloc+0x150>
 800aeaa:	4b45      	ldr	r3, [pc, #276]	; (800afc0 <pvPortMalloc+0x188>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d869      	bhi.n	800af88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aeb4:	4b43      	ldr	r3, [pc, #268]	; (800afc4 <pvPortMalloc+0x18c>)
 800aeb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aeb8:	4b42      	ldr	r3, [pc, #264]	; (800afc4 <pvPortMalloc+0x18c>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aebe:	e004      	b.n	800aeca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aeca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d903      	bls.n	800aedc <pvPortMalloc+0xa4>
 800aed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d1f1      	bne.n	800aec0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aedc:	4b36      	ldr	r3, [pc, #216]	; (800afb8 <pvPortMalloc+0x180>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d050      	beq.n	800af88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aee6:	6a3b      	ldr	r3, [r7, #32]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2208      	movs	r2, #8
 800aeec:	4413      	add	r3, r2
 800aeee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	6a3b      	ldr	r3, [r7, #32]
 800aef6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefa:	685a      	ldr	r2, [r3, #4]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	1ad2      	subs	r2, r2, r3
 800af00:	2308      	movs	r3, #8
 800af02:	005b      	lsls	r3, r3, #1
 800af04:	429a      	cmp	r2, r3
 800af06:	d91f      	bls.n	800af48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800af08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4413      	add	r3, r2
 800af0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	f003 0307 	and.w	r3, r3, #7
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00a      	beq.n	800af30 <pvPortMalloc+0xf8>
	__asm volatile
 800af1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1e:	f383 8811 	msr	BASEPRI, r3
 800af22:	f3bf 8f6f 	isb	sy
 800af26:	f3bf 8f4f 	dsb	sy
 800af2a:	613b      	str	r3, [r7, #16]
}
 800af2c:	bf00      	nop
 800af2e:	e7fe      	b.n	800af2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af32:	685a      	ldr	r2, [r3, #4]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	1ad2      	subs	r2, r2, r3
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800af3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800af42:	69b8      	ldr	r0, [r7, #24]
 800af44:	f000 f908 	bl	800b158 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800af48:	4b1d      	ldr	r3, [pc, #116]	; (800afc0 <pvPortMalloc+0x188>)
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	1ad3      	subs	r3, r2, r3
 800af52:	4a1b      	ldr	r2, [pc, #108]	; (800afc0 <pvPortMalloc+0x188>)
 800af54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800af56:	4b1a      	ldr	r3, [pc, #104]	; (800afc0 <pvPortMalloc+0x188>)
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	4b1b      	ldr	r3, [pc, #108]	; (800afc8 <pvPortMalloc+0x190>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d203      	bcs.n	800af6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af62:	4b17      	ldr	r3, [pc, #92]	; (800afc0 <pvPortMalloc+0x188>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a18      	ldr	r2, [pc, #96]	; (800afc8 <pvPortMalloc+0x190>)
 800af68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800af6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6c:	685a      	ldr	r2, [r3, #4]
 800af6e:	4b13      	ldr	r3, [pc, #76]	; (800afbc <pvPortMalloc+0x184>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	431a      	orrs	r2, r3
 800af74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7a:	2200      	movs	r2, #0
 800af7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800af7e:	4b13      	ldr	r3, [pc, #76]	; (800afcc <pvPortMalloc+0x194>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	3301      	adds	r3, #1
 800af84:	4a11      	ldr	r2, [pc, #68]	; (800afcc <pvPortMalloc+0x194>)
 800af86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af88:	f7fe fcfe 	bl	8009988 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	f003 0307 	and.w	r3, r3, #7
 800af92:	2b00      	cmp	r3, #0
 800af94:	d00a      	beq.n	800afac <pvPortMalloc+0x174>
	__asm volatile
 800af96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	60fb      	str	r3, [r7, #12]
}
 800afa8:	bf00      	nop
 800afaa:	e7fe      	b.n	800afaa <pvPortMalloc+0x172>
	return pvReturn;
 800afac:	69fb      	ldr	r3, [r7, #28]
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3728      	adds	r7, #40	; 0x28
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	20005298 	.word	0x20005298
 800afbc:	200052ac 	.word	0x200052ac
 800afc0:	2000529c 	.word	0x2000529c
 800afc4:	20005290 	.word	0x20005290
 800afc8:	200052a0 	.word	0x200052a0
 800afcc:	200052a4 	.word	0x200052a4

0800afd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d04d      	beq.n	800b07e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800afe2:	2308      	movs	r3, #8
 800afe4:	425b      	negs	r3, r3
 800afe6:	697a      	ldr	r2, [r7, #20]
 800afe8:	4413      	add	r3, r2
 800afea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	685a      	ldr	r2, [r3, #4]
 800aff4:	4b24      	ldr	r3, [pc, #144]	; (800b088 <vPortFree+0xb8>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4013      	ands	r3, r2
 800affa:	2b00      	cmp	r3, #0
 800affc:	d10a      	bne.n	800b014 <vPortFree+0x44>
	__asm volatile
 800affe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b002:	f383 8811 	msr	BASEPRI, r3
 800b006:	f3bf 8f6f 	isb	sy
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	60fb      	str	r3, [r7, #12]
}
 800b010:	bf00      	nop
 800b012:	e7fe      	b.n	800b012 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00a      	beq.n	800b032 <vPortFree+0x62>
	__asm volatile
 800b01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b020:	f383 8811 	msr	BASEPRI, r3
 800b024:	f3bf 8f6f 	isb	sy
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	60bb      	str	r3, [r7, #8]
}
 800b02e:	bf00      	nop
 800b030:	e7fe      	b.n	800b030 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	685a      	ldr	r2, [r3, #4]
 800b036:	4b14      	ldr	r3, [pc, #80]	; (800b088 <vPortFree+0xb8>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4013      	ands	r3, r2
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d01e      	beq.n	800b07e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d11a      	bne.n	800b07e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	685a      	ldr	r2, [r3, #4]
 800b04c:	4b0e      	ldr	r3, [pc, #56]	; (800b088 <vPortFree+0xb8>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	43db      	mvns	r3, r3
 800b052:	401a      	ands	r2, r3
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b058:	f7fe fc88 	bl	800996c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	685a      	ldr	r2, [r3, #4]
 800b060:	4b0a      	ldr	r3, [pc, #40]	; (800b08c <vPortFree+0xbc>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4413      	add	r3, r2
 800b066:	4a09      	ldr	r2, [pc, #36]	; (800b08c <vPortFree+0xbc>)
 800b068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b06a:	6938      	ldr	r0, [r7, #16]
 800b06c:	f000 f874 	bl	800b158 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b070:	4b07      	ldr	r3, [pc, #28]	; (800b090 <vPortFree+0xc0>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	3301      	adds	r3, #1
 800b076:	4a06      	ldr	r2, [pc, #24]	; (800b090 <vPortFree+0xc0>)
 800b078:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b07a:	f7fe fc85 	bl	8009988 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b07e:	bf00      	nop
 800b080:	3718      	adds	r7, #24
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	200052ac 	.word	0x200052ac
 800b08c:	2000529c 	.word	0x2000529c
 800b090:	200052a8 	.word	0x200052a8

0800b094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b094:	b480      	push	{r7}
 800b096:	b085      	sub	sp, #20
 800b098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b09a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b09e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b0a0:	4b27      	ldr	r3, [pc, #156]	; (800b140 <prvHeapInit+0xac>)
 800b0a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f003 0307 	and.w	r3, r3, #7
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d00c      	beq.n	800b0c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	3307      	adds	r3, #7
 800b0b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f023 0307 	bic.w	r3, r3, #7
 800b0ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b0bc:	68ba      	ldr	r2, [r7, #8]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	1ad3      	subs	r3, r2, r3
 800b0c2:	4a1f      	ldr	r2, [pc, #124]	; (800b140 <prvHeapInit+0xac>)
 800b0c4:	4413      	add	r3, r2
 800b0c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b0cc:	4a1d      	ldr	r2, [pc, #116]	; (800b144 <prvHeapInit+0xb0>)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b0d2:	4b1c      	ldr	r3, [pc, #112]	; (800b144 <prvHeapInit+0xb0>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	68ba      	ldr	r2, [r7, #8]
 800b0dc:	4413      	add	r3, r2
 800b0de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b0e0:	2208      	movs	r2, #8
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	1a9b      	subs	r3, r3, r2
 800b0e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f023 0307 	bic.w	r3, r3, #7
 800b0ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	4a15      	ldr	r2, [pc, #84]	; (800b148 <prvHeapInit+0xb4>)
 800b0f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b0f6:	4b14      	ldr	r3, [pc, #80]	; (800b148 <prvHeapInit+0xb4>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b0fe:	4b12      	ldr	r3, [pc, #72]	; (800b148 <prvHeapInit+0xb4>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	2200      	movs	r2, #0
 800b104:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	1ad2      	subs	r2, r2, r3
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b114:	4b0c      	ldr	r3, [pc, #48]	; (800b148 <prvHeapInit+0xb4>)
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	4a0a      	ldr	r2, [pc, #40]	; (800b14c <prvHeapInit+0xb8>)
 800b122:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	4a09      	ldr	r2, [pc, #36]	; (800b150 <prvHeapInit+0xbc>)
 800b12a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b12c:	4b09      	ldr	r3, [pc, #36]	; (800b154 <prvHeapInit+0xc0>)
 800b12e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b132:	601a      	str	r2, [r3, #0]
}
 800b134:	bf00      	nop
 800b136:	3714      	adds	r7, #20
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr
 800b140:	20001690 	.word	0x20001690
 800b144:	20005290 	.word	0x20005290
 800b148:	20005298 	.word	0x20005298
 800b14c:	200052a0 	.word	0x200052a0
 800b150:	2000529c 	.word	0x2000529c
 800b154:	200052ac 	.word	0x200052ac

0800b158 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b158:	b480      	push	{r7}
 800b15a:	b085      	sub	sp, #20
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b160:	4b28      	ldr	r3, [pc, #160]	; (800b204 <prvInsertBlockIntoFreeList+0xac>)
 800b162:	60fb      	str	r3, [r7, #12]
 800b164:	e002      	b.n	800b16c <prvInsertBlockIntoFreeList+0x14>
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	60fb      	str	r3, [r7, #12]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	429a      	cmp	r2, r3
 800b174:	d8f7      	bhi.n	800b166 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	68ba      	ldr	r2, [r7, #8]
 800b180:	4413      	add	r3, r2
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	429a      	cmp	r2, r3
 800b186:	d108      	bne.n	800b19a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	685a      	ldr	r2, [r3, #4]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	441a      	add	r2, r3
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	441a      	add	r2, r3
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d118      	bne.n	800b1e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	4b15      	ldr	r3, [pc, #84]	; (800b208 <prvInsertBlockIntoFreeList+0xb0>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d00d      	beq.n	800b1d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	685a      	ldr	r2, [r3, #4]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	441a      	add	r2, r3
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	601a      	str	r2, [r3, #0]
 800b1d4:	e008      	b.n	800b1e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b1d6:	4b0c      	ldr	r3, [pc, #48]	; (800b208 <prvInsertBlockIntoFreeList+0xb0>)
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	601a      	str	r2, [r3, #0]
 800b1de:	e003      	b.n	800b1e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d002      	beq.n	800b1f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1f6:	bf00      	nop
 800b1f8:	3714      	adds	r7, #20
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	20005290 	.word	0x20005290
 800b208:	20005298 	.word	0x20005298

0800b20c <__errno>:
 800b20c:	4b01      	ldr	r3, [pc, #4]	; (800b214 <__errno+0x8>)
 800b20e:	6818      	ldr	r0, [r3, #0]
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop
 800b214:	20000050 	.word	0x20000050

0800b218 <__libc_init_array>:
 800b218:	b570      	push	{r4, r5, r6, lr}
 800b21a:	4d0d      	ldr	r5, [pc, #52]	; (800b250 <__libc_init_array+0x38>)
 800b21c:	4c0d      	ldr	r4, [pc, #52]	; (800b254 <__libc_init_array+0x3c>)
 800b21e:	1b64      	subs	r4, r4, r5
 800b220:	10a4      	asrs	r4, r4, #2
 800b222:	2600      	movs	r6, #0
 800b224:	42a6      	cmp	r6, r4
 800b226:	d109      	bne.n	800b23c <__libc_init_array+0x24>
 800b228:	4d0b      	ldr	r5, [pc, #44]	; (800b258 <__libc_init_array+0x40>)
 800b22a:	4c0c      	ldr	r4, [pc, #48]	; (800b25c <__libc_init_array+0x44>)
 800b22c:	f001 f908 	bl	800c440 <_init>
 800b230:	1b64      	subs	r4, r4, r5
 800b232:	10a4      	asrs	r4, r4, #2
 800b234:	2600      	movs	r6, #0
 800b236:	42a6      	cmp	r6, r4
 800b238:	d105      	bne.n	800b246 <__libc_init_array+0x2e>
 800b23a:	bd70      	pop	{r4, r5, r6, pc}
 800b23c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b240:	4798      	blx	r3
 800b242:	3601      	adds	r6, #1
 800b244:	e7ee      	b.n	800b224 <__libc_init_array+0xc>
 800b246:	f855 3b04 	ldr.w	r3, [r5], #4
 800b24a:	4798      	blx	r3
 800b24c:	3601      	adds	r6, #1
 800b24e:	e7f2      	b.n	800b236 <__libc_init_array+0x1e>
 800b250:	0800cd1c 	.word	0x0800cd1c
 800b254:	0800cd1c 	.word	0x0800cd1c
 800b258:	0800cd1c 	.word	0x0800cd1c
 800b25c:	0800cd20 	.word	0x0800cd20

0800b260 <__retarget_lock_acquire_recursive>:
 800b260:	4770      	bx	lr

0800b262 <__retarget_lock_release_recursive>:
 800b262:	4770      	bx	lr

0800b264 <memcpy>:
 800b264:	440a      	add	r2, r1
 800b266:	4291      	cmp	r1, r2
 800b268:	f100 33ff 	add.w	r3, r0, #4294967295
 800b26c:	d100      	bne.n	800b270 <memcpy+0xc>
 800b26e:	4770      	bx	lr
 800b270:	b510      	push	{r4, lr}
 800b272:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b276:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b27a:	4291      	cmp	r1, r2
 800b27c:	d1f9      	bne.n	800b272 <memcpy+0xe>
 800b27e:	bd10      	pop	{r4, pc}

0800b280 <memset>:
 800b280:	4402      	add	r2, r0
 800b282:	4603      	mov	r3, r0
 800b284:	4293      	cmp	r3, r2
 800b286:	d100      	bne.n	800b28a <memset+0xa>
 800b288:	4770      	bx	lr
 800b28a:	f803 1b01 	strb.w	r1, [r3], #1
 800b28e:	e7f9      	b.n	800b284 <memset+0x4>

0800b290 <cleanup_glue>:
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	460c      	mov	r4, r1
 800b294:	6809      	ldr	r1, [r1, #0]
 800b296:	4605      	mov	r5, r0
 800b298:	b109      	cbz	r1, 800b29e <cleanup_glue+0xe>
 800b29a:	f7ff fff9 	bl	800b290 <cleanup_glue>
 800b29e:	4621      	mov	r1, r4
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2a6:	f000 b869 	b.w	800b37c <_free_r>
	...

0800b2ac <_reclaim_reent>:
 800b2ac:	4b2c      	ldr	r3, [pc, #176]	; (800b360 <_reclaim_reent+0xb4>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4283      	cmp	r3, r0
 800b2b2:	b570      	push	{r4, r5, r6, lr}
 800b2b4:	4604      	mov	r4, r0
 800b2b6:	d051      	beq.n	800b35c <_reclaim_reent+0xb0>
 800b2b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b2ba:	b143      	cbz	r3, 800b2ce <_reclaim_reent+0x22>
 800b2bc:	68db      	ldr	r3, [r3, #12]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d14a      	bne.n	800b358 <_reclaim_reent+0xac>
 800b2c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2c4:	6819      	ldr	r1, [r3, #0]
 800b2c6:	b111      	cbz	r1, 800b2ce <_reclaim_reent+0x22>
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	f000 f857 	bl	800b37c <_free_r>
 800b2ce:	6961      	ldr	r1, [r4, #20]
 800b2d0:	b111      	cbz	r1, 800b2d8 <_reclaim_reent+0x2c>
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f000 f852 	bl	800b37c <_free_r>
 800b2d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b2da:	b111      	cbz	r1, 800b2e2 <_reclaim_reent+0x36>
 800b2dc:	4620      	mov	r0, r4
 800b2de:	f000 f84d 	bl	800b37c <_free_r>
 800b2e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b2e4:	b111      	cbz	r1, 800b2ec <_reclaim_reent+0x40>
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	f000 f848 	bl	800b37c <_free_r>
 800b2ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b2ee:	b111      	cbz	r1, 800b2f6 <_reclaim_reent+0x4a>
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f000 f843 	bl	800b37c <_free_r>
 800b2f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b2f8:	b111      	cbz	r1, 800b300 <_reclaim_reent+0x54>
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	f000 f83e 	bl	800b37c <_free_r>
 800b300:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b302:	b111      	cbz	r1, 800b30a <_reclaim_reent+0x5e>
 800b304:	4620      	mov	r0, r4
 800b306:	f000 f839 	bl	800b37c <_free_r>
 800b30a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b30c:	b111      	cbz	r1, 800b314 <_reclaim_reent+0x68>
 800b30e:	4620      	mov	r0, r4
 800b310:	f000 f834 	bl	800b37c <_free_r>
 800b314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b316:	b111      	cbz	r1, 800b31e <_reclaim_reent+0x72>
 800b318:	4620      	mov	r0, r4
 800b31a:	f000 f82f 	bl	800b37c <_free_r>
 800b31e:	69a3      	ldr	r3, [r4, #24]
 800b320:	b1e3      	cbz	r3, 800b35c <_reclaim_reent+0xb0>
 800b322:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b324:	4620      	mov	r0, r4
 800b326:	4798      	blx	r3
 800b328:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b32a:	b1b9      	cbz	r1, 800b35c <_reclaim_reent+0xb0>
 800b32c:	4620      	mov	r0, r4
 800b32e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b332:	f7ff bfad 	b.w	800b290 <cleanup_glue>
 800b336:	5949      	ldr	r1, [r1, r5]
 800b338:	b941      	cbnz	r1, 800b34c <_reclaim_reent+0xa0>
 800b33a:	3504      	adds	r5, #4
 800b33c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b33e:	2d80      	cmp	r5, #128	; 0x80
 800b340:	68d9      	ldr	r1, [r3, #12]
 800b342:	d1f8      	bne.n	800b336 <_reclaim_reent+0x8a>
 800b344:	4620      	mov	r0, r4
 800b346:	f000 f819 	bl	800b37c <_free_r>
 800b34a:	e7ba      	b.n	800b2c2 <_reclaim_reent+0x16>
 800b34c:	680e      	ldr	r6, [r1, #0]
 800b34e:	4620      	mov	r0, r4
 800b350:	f000 f814 	bl	800b37c <_free_r>
 800b354:	4631      	mov	r1, r6
 800b356:	e7ef      	b.n	800b338 <_reclaim_reent+0x8c>
 800b358:	2500      	movs	r5, #0
 800b35a:	e7ef      	b.n	800b33c <_reclaim_reent+0x90>
 800b35c:	bd70      	pop	{r4, r5, r6, pc}
 800b35e:	bf00      	nop
 800b360:	20000050 	.word	0x20000050

0800b364 <__malloc_lock>:
 800b364:	4801      	ldr	r0, [pc, #4]	; (800b36c <__malloc_lock+0x8>)
 800b366:	f7ff bf7b 	b.w	800b260 <__retarget_lock_acquire_recursive>
 800b36a:	bf00      	nop
 800b36c:	200052b0 	.word	0x200052b0

0800b370 <__malloc_unlock>:
 800b370:	4801      	ldr	r0, [pc, #4]	; (800b378 <__malloc_unlock+0x8>)
 800b372:	f7ff bf76 	b.w	800b262 <__retarget_lock_release_recursive>
 800b376:	bf00      	nop
 800b378:	200052b0 	.word	0x200052b0

0800b37c <_free_r>:
 800b37c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b37e:	2900      	cmp	r1, #0
 800b380:	d044      	beq.n	800b40c <_free_r+0x90>
 800b382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b386:	9001      	str	r0, [sp, #4]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	f1a1 0404 	sub.w	r4, r1, #4
 800b38e:	bfb8      	it	lt
 800b390:	18e4      	addlt	r4, r4, r3
 800b392:	f7ff ffe7 	bl	800b364 <__malloc_lock>
 800b396:	4a1e      	ldr	r2, [pc, #120]	; (800b410 <_free_r+0x94>)
 800b398:	9801      	ldr	r0, [sp, #4]
 800b39a:	6813      	ldr	r3, [r2, #0]
 800b39c:	b933      	cbnz	r3, 800b3ac <_free_r+0x30>
 800b39e:	6063      	str	r3, [r4, #4]
 800b3a0:	6014      	str	r4, [r2, #0]
 800b3a2:	b003      	add	sp, #12
 800b3a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3a8:	f7ff bfe2 	b.w	800b370 <__malloc_unlock>
 800b3ac:	42a3      	cmp	r3, r4
 800b3ae:	d908      	bls.n	800b3c2 <_free_r+0x46>
 800b3b0:	6825      	ldr	r5, [r4, #0]
 800b3b2:	1961      	adds	r1, r4, r5
 800b3b4:	428b      	cmp	r3, r1
 800b3b6:	bf01      	itttt	eq
 800b3b8:	6819      	ldreq	r1, [r3, #0]
 800b3ba:	685b      	ldreq	r3, [r3, #4]
 800b3bc:	1949      	addeq	r1, r1, r5
 800b3be:	6021      	streq	r1, [r4, #0]
 800b3c0:	e7ed      	b.n	800b39e <_free_r+0x22>
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	b10b      	cbz	r3, 800b3cc <_free_r+0x50>
 800b3c8:	42a3      	cmp	r3, r4
 800b3ca:	d9fa      	bls.n	800b3c2 <_free_r+0x46>
 800b3cc:	6811      	ldr	r1, [r2, #0]
 800b3ce:	1855      	adds	r5, r2, r1
 800b3d0:	42a5      	cmp	r5, r4
 800b3d2:	d10b      	bne.n	800b3ec <_free_r+0x70>
 800b3d4:	6824      	ldr	r4, [r4, #0]
 800b3d6:	4421      	add	r1, r4
 800b3d8:	1854      	adds	r4, r2, r1
 800b3da:	42a3      	cmp	r3, r4
 800b3dc:	6011      	str	r1, [r2, #0]
 800b3de:	d1e0      	bne.n	800b3a2 <_free_r+0x26>
 800b3e0:	681c      	ldr	r4, [r3, #0]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	6053      	str	r3, [r2, #4]
 800b3e6:	4421      	add	r1, r4
 800b3e8:	6011      	str	r1, [r2, #0]
 800b3ea:	e7da      	b.n	800b3a2 <_free_r+0x26>
 800b3ec:	d902      	bls.n	800b3f4 <_free_r+0x78>
 800b3ee:	230c      	movs	r3, #12
 800b3f0:	6003      	str	r3, [r0, #0]
 800b3f2:	e7d6      	b.n	800b3a2 <_free_r+0x26>
 800b3f4:	6825      	ldr	r5, [r4, #0]
 800b3f6:	1961      	adds	r1, r4, r5
 800b3f8:	428b      	cmp	r3, r1
 800b3fa:	bf04      	itt	eq
 800b3fc:	6819      	ldreq	r1, [r3, #0]
 800b3fe:	685b      	ldreq	r3, [r3, #4]
 800b400:	6063      	str	r3, [r4, #4]
 800b402:	bf04      	itt	eq
 800b404:	1949      	addeq	r1, r1, r5
 800b406:	6021      	streq	r1, [r4, #0]
 800b408:	6054      	str	r4, [r2, #4]
 800b40a:	e7ca      	b.n	800b3a2 <_free_r+0x26>
 800b40c:	b003      	add	sp, #12
 800b40e:	bd30      	pop	{r4, r5, pc}
 800b410:	200052b4 	.word	0x200052b4

0800b414 <cosf>:
 800b414:	ee10 3a10 	vmov	r3, s0
 800b418:	b507      	push	{r0, r1, r2, lr}
 800b41a:	4a1e      	ldr	r2, [pc, #120]	; (800b494 <cosf+0x80>)
 800b41c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b420:	4293      	cmp	r3, r2
 800b422:	dc06      	bgt.n	800b432 <cosf+0x1e>
 800b424:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800b498 <cosf+0x84>
 800b428:	b003      	add	sp, #12
 800b42a:	f85d eb04 	ldr.w	lr, [sp], #4
 800b42e:	f000 bb59 	b.w	800bae4 <__kernel_cosf>
 800b432:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b436:	db04      	blt.n	800b442 <cosf+0x2e>
 800b438:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b43c:	b003      	add	sp, #12
 800b43e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b442:	4668      	mov	r0, sp
 800b444:	f000 fa0e 	bl	800b864 <__ieee754_rem_pio2f>
 800b448:	f000 0003 	and.w	r0, r0, #3
 800b44c:	2801      	cmp	r0, #1
 800b44e:	d009      	beq.n	800b464 <cosf+0x50>
 800b450:	2802      	cmp	r0, #2
 800b452:	d010      	beq.n	800b476 <cosf+0x62>
 800b454:	b9b0      	cbnz	r0, 800b484 <cosf+0x70>
 800b456:	eddd 0a01 	vldr	s1, [sp, #4]
 800b45a:	ed9d 0a00 	vldr	s0, [sp]
 800b45e:	f000 fb41 	bl	800bae4 <__kernel_cosf>
 800b462:	e7eb      	b.n	800b43c <cosf+0x28>
 800b464:	eddd 0a01 	vldr	s1, [sp, #4]
 800b468:	ed9d 0a00 	vldr	s0, [sp]
 800b46c:	f000 fe10 	bl	800c090 <__kernel_sinf>
 800b470:	eeb1 0a40 	vneg.f32	s0, s0
 800b474:	e7e2      	b.n	800b43c <cosf+0x28>
 800b476:	eddd 0a01 	vldr	s1, [sp, #4]
 800b47a:	ed9d 0a00 	vldr	s0, [sp]
 800b47e:	f000 fb31 	bl	800bae4 <__kernel_cosf>
 800b482:	e7f5      	b.n	800b470 <cosf+0x5c>
 800b484:	eddd 0a01 	vldr	s1, [sp, #4]
 800b488:	ed9d 0a00 	vldr	s0, [sp]
 800b48c:	2001      	movs	r0, #1
 800b48e:	f000 fdff 	bl	800c090 <__kernel_sinf>
 800b492:	e7d3      	b.n	800b43c <cosf+0x28>
 800b494:	3f490fd8 	.word	0x3f490fd8
 800b498:	00000000 	.word	0x00000000

0800b49c <sinf>:
 800b49c:	ee10 3a10 	vmov	r3, s0
 800b4a0:	b507      	push	{r0, r1, r2, lr}
 800b4a2:	4a1f      	ldr	r2, [pc, #124]	; (800b520 <sinf+0x84>)
 800b4a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	dc07      	bgt.n	800b4bc <sinf+0x20>
 800b4ac:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800b524 <sinf+0x88>
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	b003      	add	sp, #12
 800b4b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4b8:	f000 bdea 	b.w	800c090 <__kernel_sinf>
 800b4bc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b4c0:	db04      	blt.n	800b4cc <sinf+0x30>
 800b4c2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b4c6:	b003      	add	sp, #12
 800b4c8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b4cc:	4668      	mov	r0, sp
 800b4ce:	f000 f9c9 	bl	800b864 <__ieee754_rem_pio2f>
 800b4d2:	f000 0003 	and.w	r0, r0, #3
 800b4d6:	2801      	cmp	r0, #1
 800b4d8:	d00a      	beq.n	800b4f0 <sinf+0x54>
 800b4da:	2802      	cmp	r0, #2
 800b4dc:	d00f      	beq.n	800b4fe <sinf+0x62>
 800b4de:	b9c0      	cbnz	r0, 800b512 <sinf+0x76>
 800b4e0:	eddd 0a01 	vldr	s1, [sp, #4]
 800b4e4:	ed9d 0a00 	vldr	s0, [sp]
 800b4e8:	2001      	movs	r0, #1
 800b4ea:	f000 fdd1 	bl	800c090 <__kernel_sinf>
 800b4ee:	e7ea      	b.n	800b4c6 <sinf+0x2a>
 800b4f0:	eddd 0a01 	vldr	s1, [sp, #4]
 800b4f4:	ed9d 0a00 	vldr	s0, [sp]
 800b4f8:	f000 faf4 	bl	800bae4 <__kernel_cosf>
 800b4fc:	e7e3      	b.n	800b4c6 <sinf+0x2a>
 800b4fe:	eddd 0a01 	vldr	s1, [sp, #4]
 800b502:	ed9d 0a00 	vldr	s0, [sp]
 800b506:	2001      	movs	r0, #1
 800b508:	f000 fdc2 	bl	800c090 <__kernel_sinf>
 800b50c:	eeb1 0a40 	vneg.f32	s0, s0
 800b510:	e7d9      	b.n	800b4c6 <sinf+0x2a>
 800b512:	eddd 0a01 	vldr	s1, [sp, #4]
 800b516:	ed9d 0a00 	vldr	s0, [sp]
 800b51a:	f000 fae3 	bl	800bae4 <__kernel_cosf>
 800b51e:	e7f5      	b.n	800b50c <sinf+0x70>
 800b520:	3f490fd8 	.word	0x3f490fd8
 800b524:	00000000 	.word	0x00000000

0800b528 <sqrt>:
 800b528:	b538      	push	{r3, r4, r5, lr}
 800b52a:	ed2d 8b02 	vpush	{d8}
 800b52e:	ec55 4b10 	vmov	r4, r5, d0
 800b532:	f000 f845 	bl	800b5c0 <__ieee754_sqrt>
 800b536:	4622      	mov	r2, r4
 800b538:	462b      	mov	r3, r5
 800b53a:	4620      	mov	r0, r4
 800b53c:	4629      	mov	r1, r5
 800b53e:	eeb0 8a40 	vmov.f32	s16, s0
 800b542:	eef0 8a60 	vmov.f32	s17, s1
 800b546:	f7f5 faa1 	bl	8000a8c <__aeabi_dcmpun>
 800b54a:	b990      	cbnz	r0, 800b572 <sqrt+0x4a>
 800b54c:	2200      	movs	r2, #0
 800b54e:	2300      	movs	r3, #0
 800b550:	4620      	mov	r0, r4
 800b552:	4629      	mov	r1, r5
 800b554:	f7f5 fa72 	bl	8000a3c <__aeabi_dcmplt>
 800b558:	b158      	cbz	r0, 800b572 <sqrt+0x4a>
 800b55a:	f7ff fe57 	bl	800b20c <__errno>
 800b55e:	2321      	movs	r3, #33	; 0x21
 800b560:	6003      	str	r3, [r0, #0]
 800b562:	2200      	movs	r2, #0
 800b564:	2300      	movs	r3, #0
 800b566:	4610      	mov	r0, r2
 800b568:	4619      	mov	r1, r3
 800b56a:	f7f5 f91f 	bl	80007ac <__aeabi_ddiv>
 800b56e:	ec41 0b18 	vmov	d8, r0, r1
 800b572:	eeb0 0a48 	vmov.f32	s0, s16
 800b576:	eef0 0a68 	vmov.f32	s1, s17
 800b57a:	ecbd 8b02 	vpop	{d8}
 800b57e:	bd38      	pop	{r3, r4, r5, pc}

0800b580 <atan2f>:
 800b580:	f000 b8d0 	b.w	800b724 <__ieee754_atan2f>

0800b584 <sqrtf>:
 800b584:	b508      	push	{r3, lr}
 800b586:	ed2d 8b02 	vpush	{d8}
 800b58a:	eeb0 8a40 	vmov.f32	s16, s0
 800b58e:	f000 faa5 	bl	800badc <__ieee754_sqrtf>
 800b592:	eeb4 8a48 	vcmp.f32	s16, s16
 800b596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b59a:	d60c      	bvs.n	800b5b6 <sqrtf+0x32>
 800b59c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800b5bc <sqrtf+0x38>
 800b5a0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5a8:	d505      	bpl.n	800b5b6 <sqrtf+0x32>
 800b5aa:	f7ff fe2f 	bl	800b20c <__errno>
 800b5ae:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b5b2:	2321      	movs	r3, #33	; 0x21
 800b5b4:	6003      	str	r3, [r0, #0]
 800b5b6:	ecbd 8b02 	vpop	{d8}
 800b5ba:	bd08      	pop	{r3, pc}
 800b5bc:	00000000 	.word	0x00000000

0800b5c0 <__ieee754_sqrt>:
 800b5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c4:	ec55 4b10 	vmov	r4, r5, d0
 800b5c8:	4e55      	ldr	r6, [pc, #340]	; (800b720 <__ieee754_sqrt+0x160>)
 800b5ca:	43ae      	bics	r6, r5
 800b5cc:	ee10 0a10 	vmov	r0, s0
 800b5d0:	ee10 3a10 	vmov	r3, s0
 800b5d4:	462a      	mov	r2, r5
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	d110      	bne.n	800b5fc <__ieee754_sqrt+0x3c>
 800b5da:	ee10 2a10 	vmov	r2, s0
 800b5de:	462b      	mov	r3, r5
 800b5e0:	f7f4 ffba 	bl	8000558 <__aeabi_dmul>
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	4629      	mov	r1, r5
 800b5ec:	f7f4 fdfe 	bl	80001ec <__adddf3>
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	460d      	mov	r5, r1
 800b5f4:	ec45 4b10 	vmov	d0, r4, r5
 800b5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5fc:	2d00      	cmp	r5, #0
 800b5fe:	dc10      	bgt.n	800b622 <__ieee754_sqrt+0x62>
 800b600:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b604:	4330      	orrs	r0, r6
 800b606:	d0f5      	beq.n	800b5f4 <__ieee754_sqrt+0x34>
 800b608:	b15d      	cbz	r5, 800b622 <__ieee754_sqrt+0x62>
 800b60a:	ee10 2a10 	vmov	r2, s0
 800b60e:	462b      	mov	r3, r5
 800b610:	ee10 0a10 	vmov	r0, s0
 800b614:	f7f4 fde8 	bl	80001e8 <__aeabi_dsub>
 800b618:	4602      	mov	r2, r0
 800b61a:	460b      	mov	r3, r1
 800b61c:	f7f5 f8c6 	bl	80007ac <__aeabi_ddiv>
 800b620:	e7e6      	b.n	800b5f0 <__ieee754_sqrt+0x30>
 800b622:	1512      	asrs	r2, r2, #20
 800b624:	d074      	beq.n	800b710 <__ieee754_sqrt+0x150>
 800b626:	07d4      	lsls	r4, r2, #31
 800b628:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b62c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b634:	bf5e      	ittt	pl
 800b636:	0fda      	lsrpl	r2, r3, #31
 800b638:	005b      	lslpl	r3, r3, #1
 800b63a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b63e:	2400      	movs	r4, #0
 800b640:	0fda      	lsrs	r2, r3, #31
 800b642:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b646:	107f      	asrs	r7, r7, #1
 800b648:	005b      	lsls	r3, r3, #1
 800b64a:	2516      	movs	r5, #22
 800b64c:	4620      	mov	r0, r4
 800b64e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b652:	1886      	adds	r6, r0, r2
 800b654:	428e      	cmp	r6, r1
 800b656:	bfde      	ittt	le
 800b658:	1b89      	suble	r1, r1, r6
 800b65a:	18b0      	addle	r0, r6, r2
 800b65c:	18a4      	addle	r4, r4, r2
 800b65e:	0049      	lsls	r1, r1, #1
 800b660:	3d01      	subs	r5, #1
 800b662:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b666:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b66a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b66e:	d1f0      	bne.n	800b652 <__ieee754_sqrt+0x92>
 800b670:	462a      	mov	r2, r5
 800b672:	f04f 0e20 	mov.w	lr, #32
 800b676:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b67a:	4281      	cmp	r1, r0
 800b67c:	eb06 0c05 	add.w	ip, r6, r5
 800b680:	dc02      	bgt.n	800b688 <__ieee754_sqrt+0xc8>
 800b682:	d113      	bne.n	800b6ac <__ieee754_sqrt+0xec>
 800b684:	459c      	cmp	ip, r3
 800b686:	d811      	bhi.n	800b6ac <__ieee754_sqrt+0xec>
 800b688:	f1bc 0f00 	cmp.w	ip, #0
 800b68c:	eb0c 0506 	add.w	r5, ip, r6
 800b690:	da43      	bge.n	800b71a <__ieee754_sqrt+0x15a>
 800b692:	2d00      	cmp	r5, #0
 800b694:	db41      	blt.n	800b71a <__ieee754_sqrt+0x15a>
 800b696:	f100 0801 	add.w	r8, r0, #1
 800b69a:	1a09      	subs	r1, r1, r0
 800b69c:	459c      	cmp	ip, r3
 800b69e:	bf88      	it	hi
 800b6a0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b6a4:	eba3 030c 	sub.w	r3, r3, ip
 800b6a8:	4432      	add	r2, r6
 800b6aa:	4640      	mov	r0, r8
 800b6ac:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b6b0:	f1be 0e01 	subs.w	lr, lr, #1
 800b6b4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b6b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b6bc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b6c0:	d1db      	bne.n	800b67a <__ieee754_sqrt+0xba>
 800b6c2:	430b      	orrs	r3, r1
 800b6c4:	d006      	beq.n	800b6d4 <__ieee754_sqrt+0x114>
 800b6c6:	1c50      	adds	r0, r2, #1
 800b6c8:	bf13      	iteet	ne
 800b6ca:	3201      	addne	r2, #1
 800b6cc:	3401      	addeq	r4, #1
 800b6ce:	4672      	moveq	r2, lr
 800b6d0:	f022 0201 	bicne.w	r2, r2, #1
 800b6d4:	1063      	asrs	r3, r4, #1
 800b6d6:	0852      	lsrs	r2, r2, #1
 800b6d8:	07e1      	lsls	r1, r4, #31
 800b6da:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b6de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b6e2:	bf48      	it	mi
 800b6e4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b6e8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b6ec:	4614      	mov	r4, r2
 800b6ee:	e781      	b.n	800b5f4 <__ieee754_sqrt+0x34>
 800b6f0:	0ad9      	lsrs	r1, r3, #11
 800b6f2:	3815      	subs	r0, #21
 800b6f4:	055b      	lsls	r3, r3, #21
 800b6f6:	2900      	cmp	r1, #0
 800b6f8:	d0fa      	beq.n	800b6f0 <__ieee754_sqrt+0x130>
 800b6fa:	02cd      	lsls	r5, r1, #11
 800b6fc:	d50a      	bpl.n	800b714 <__ieee754_sqrt+0x154>
 800b6fe:	f1c2 0420 	rsb	r4, r2, #32
 800b702:	fa23 f404 	lsr.w	r4, r3, r4
 800b706:	1e55      	subs	r5, r2, #1
 800b708:	4093      	lsls	r3, r2
 800b70a:	4321      	orrs	r1, r4
 800b70c:	1b42      	subs	r2, r0, r5
 800b70e:	e78a      	b.n	800b626 <__ieee754_sqrt+0x66>
 800b710:	4610      	mov	r0, r2
 800b712:	e7f0      	b.n	800b6f6 <__ieee754_sqrt+0x136>
 800b714:	0049      	lsls	r1, r1, #1
 800b716:	3201      	adds	r2, #1
 800b718:	e7ef      	b.n	800b6fa <__ieee754_sqrt+0x13a>
 800b71a:	4680      	mov	r8, r0
 800b71c:	e7bd      	b.n	800b69a <__ieee754_sqrt+0xda>
 800b71e:	bf00      	nop
 800b720:	7ff00000 	.word	0x7ff00000

0800b724 <__ieee754_atan2f>:
 800b724:	ee10 2a90 	vmov	r2, s1
 800b728:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800b72c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b730:	b510      	push	{r4, lr}
 800b732:	eef0 7a40 	vmov.f32	s15, s0
 800b736:	dc06      	bgt.n	800b746 <__ieee754_atan2f+0x22>
 800b738:	ee10 0a10 	vmov	r0, s0
 800b73c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b740:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b744:	dd04      	ble.n	800b750 <__ieee754_atan2f+0x2c>
 800b746:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b74a:	eeb0 0a67 	vmov.f32	s0, s15
 800b74e:	bd10      	pop	{r4, pc}
 800b750:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800b754:	d103      	bne.n	800b75e <__ieee754_atan2f+0x3a>
 800b756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b75a:	f000 bce1 	b.w	800c120 <atanf>
 800b75e:	1794      	asrs	r4, r2, #30
 800b760:	f004 0402 	and.w	r4, r4, #2
 800b764:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b768:	b943      	cbnz	r3, 800b77c <__ieee754_atan2f+0x58>
 800b76a:	2c02      	cmp	r4, #2
 800b76c:	d05e      	beq.n	800b82c <__ieee754_atan2f+0x108>
 800b76e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b840 <__ieee754_atan2f+0x11c>
 800b772:	2c03      	cmp	r4, #3
 800b774:	bf08      	it	eq
 800b776:	eef0 7a47 	vmoveq.f32	s15, s14
 800b77a:	e7e6      	b.n	800b74a <__ieee754_atan2f+0x26>
 800b77c:	b941      	cbnz	r1, 800b790 <__ieee754_atan2f+0x6c>
 800b77e:	eddf 7a31 	vldr	s15, [pc, #196]	; 800b844 <__ieee754_atan2f+0x120>
 800b782:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800b848 <__ieee754_atan2f+0x124>
 800b786:	2800      	cmp	r0, #0
 800b788:	bfb8      	it	lt
 800b78a:	eef0 7a40 	vmovlt.f32	s15, s0
 800b78e:	e7dc      	b.n	800b74a <__ieee754_atan2f+0x26>
 800b790:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b794:	d110      	bne.n	800b7b8 <__ieee754_atan2f+0x94>
 800b796:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b79a:	f104 34ff 	add.w	r4, r4, #4294967295
 800b79e:	d107      	bne.n	800b7b0 <__ieee754_atan2f+0x8c>
 800b7a0:	2c02      	cmp	r4, #2
 800b7a2:	d846      	bhi.n	800b832 <__ieee754_atan2f+0x10e>
 800b7a4:	4b29      	ldr	r3, [pc, #164]	; (800b84c <__ieee754_atan2f+0x128>)
 800b7a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b7aa:	edd4 7a00 	vldr	s15, [r4]
 800b7ae:	e7cc      	b.n	800b74a <__ieee754_atan2f+0x26>
 800b7b0:	2c02      	cmp	r4, #2
 800b7b2:	d841      	bhi.n	800b838 <__ieee754_atan2f+0x114>
 800b7b4:	4b26      	ldr	r3, [pc, #152]	; (800b850 <__ieee754_atan2f+0x12c>)
 800b7b6:	e7f6      	b.n	800b7a6 <__ieee754_atan2f+0x82>
 800b7b8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b7bc:	d0df      	beq.n	800b77e <__ieee754_atan2f+0x5a>
 800b7be:	1a5b      	subs	r3, r3, r1
 800b7c0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800b7c4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800b7c8:	da1a      	bge.n	800b800 <__ieee754_atan2f+0xdc>
 800b7ca:	2a00      	cmp	r2, #0
 800b7cc:	da01      	bge.n	800b7d2 <__ieee754_atan2f+0xae>
 800b7ce:	313c      	adds	r1, #60	; 0x3c
 800b7d0:	db19      	blt.n	800b806 <__ieee754_atan2f+0xe2>
 800b7d2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800b7d6:	f000 fd77 	bl	800c2c8 <fabsf>
 800b7da:	f000 fca1 	bl	800c120 <atanf>
 800b7de:	eef0 7a40 	vmov.f32	s15, s0
 800b7e2:	2c01      	cmp	r4, #1
 800b7e4:	d012      	beq.n	800b80c <__ieee754_atan2f+0xe8>
 800b7e6:	2c02      	cmp	r4, #2
 800b7e8:	d017      	beq.n	800b81a <__ieee754_atan2f+0xf6>
 800b7ea:	2c00      	cmp	r4, #0
 800b7ec:	d0ad      	beq.n	800b74a <__ieee754_atan2f+0x26>
 800b7ee:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800b854 <__ieee754_atan2f+0x130>
 800b7f2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b7f6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800b858 <__ieee754_atan2f+0x134>
 800b7fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b7fe:	e7a4      	b.n	800b74a <__ieee754_atan2f+0x26>
 800b800:	eddf 7a10 	vldr	s15, [pc, #64]	; 800b844 <__ieee754_atan2f+0x120>
 800b804:	e7ed      	b.n	800b7e2 <__ieee754_atan2f+0xbe>
 800b806:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b85c <__ieee754_atan2f+0x138>
 800b80a:	e7ea      	b.n	800b7e2 <__ieee754_atan2f+0xbe>
 800b80c:	ee17 3a90 	vmov	r3, s15
 800b810:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b814:	ee07 3a90 	vmov	s15, r3
 800b818:	e797      	b.n	800b74a <__ieee754_atan2f+0x26>
 800b81a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800b854 <__ieee754_atan2f+0x130>
 800b81e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b822:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800b858 <__ieee754_atan2f+0x134>
 800b826:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b82a:	e78e      	b.n	800b74a <__ieee754_atan2f+0x26>
 800b82c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800b858 <__ieee754_atan2f+0x134>
 800b830:	e78b      	b.n	800b74a <__ieee754_atan2f+0x26>
 800b832:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800b860 <__ieee754_atan2f+0x13c>
 800b836:	e788      	b.n	800b74a <__ieee754_atan2f+0x26>
 800b838:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b85c <__ieee754_atan2f+0x138>
 800b83c:	e785      	b.n	800b74a <__ieee754_atan2f+0x26>
 800b83e:	bf00      	nop
 800b840:	c0490fdb 	.word	0xc0490fdb
 800b844:	3fc90fdb 	.word	0x3fc90fdb
 800b848:	bfc90fdb 	.word	0xbfc90fdb
 800b84c:	0800c90c 	.word	0x0800c90c
 800b850:	0800c918 	.word	0x0800c918
 800b854:	33bbbd2e 	.word	0x33bbbd2e
 800b858:	40490fdb 	.word	0x40490fdb
 800b85c:	00000000 	.word	0x00000000
 800b860:	3f490fdb 	.word	0x3f490fdb

0800b864 <__ieee754_rem_pio2f>:
 800b864:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b866:	ee10 6a10 	vmov	r6, s0
 800b86a:	4b8e      	ldr	r3, [pc, #568]	; (800baa4 <__ieee754_rem_pio2f+0x240>)
 800b86c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b870:	429d      	cmp	r5, r3
 800b872:	b087      	sub	sp, #28
 800b874:	eef0 7a40 	vmov.f32	s15, s0
 800b878:	4604      	mov	r4, r0
 800b87a:	dc05      	bgt.n	800b888 <__ieee754_rem_pio2f+0x24>
 800b87c:	2300      	movs	r3, #0
 800b87e:	ed80 0a00 	vstr	s0, [r0]
 800b882:	6043      	str	r3, [r0, #4]
 800b884:	2000      	movs	r0, #0
 800b886:	e01a      	b.n	800b8be <__ieee754_rem_pio2f+0x5a>
 800b888:	4b87      	ldr	r3, [pc, #540]	; (800baa8 <__ieee754_rem_pio2f+0x244>)
 800b88a:	429d      	cmp	r5, r3
 800b88c:	dc46      	bgt.n	800b91c <__ieee754_rem_pio2f+0xb8>
 800b88e:	2e00      	cmp	r6, #0
 800b890:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800baac <__ieee754_rem_pio2f+0x248>
 800b894:	4b86      	ldr	r3, [pc, #536]	; (800bab0 <__ieee754_rem_pio2f+0x24c>)
 800b896:	f025 050f 	bic.w	r5, r5, #15
 800b89a:	dd1f      	ble.n	800b8dc <__ieee754_rem_pio2f+0x78>
 800b89c:	429d      	cmp	r5, r3
 800b89e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b8a2:	d00e      	beq.n	800b8c2 <__ieee754_rem_pio2f+0x5e>
 800b8a4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800bab4 <__ieee754_rem_pio2f+0x250>
 800b8a8:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b8ac:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b8b0:	ed80 0a00 	vstr	s0, [r0]
 800b8b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b8b8:	2001      	movs	r0, #1
 800b8ba:	edc4 7a01 	vstr	s15, [r4, #4]
 800b8be:	b007      	add	sp, #28
 800b8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8c2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800bab8 <__ieee754_rem_pio2f+0x254>
 800b8c6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800babc <__ieee754_rem_pio2f+0x258>
 800b8ca:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b8ce:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b8d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b8d6:	edc0 6a00 	vstr	s13, [r0]
 800b8da:	e7eb      	b.n	800b8b4 <__ieee754_rem_pio2f+0x50>
 800b8dc:	429d      	cmp	r5, r3
 800b8de:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b8e2:	d00e      	beq.n	800b902 <__ieee754_rem_pio2f+0x9e>
 800b8e4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800bab4 <__ieee754_rem_pio2f+0x250>
 800b8e8:	ee37 0a87 	vadd.f32	s0, s15, s14
 800b8ec:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b8f0:	ed80 0a00 	vstr	s0, [r0]
 800b8f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8fc:	edc4 7a01 	vstr	s15, [r4, #4]
 800b900:	e7dd      	b.n	800b8be <__ieee754_rem_pio2f+0x5a>
 800b902:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800bab8 <__ieee754_rem_pio2f+0x254>
 800b906:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800babc <__ieee754_rem_pio2f+0x258>
 800b90a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b90e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b912:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b916:	edc0 6a00 	vstr	s13, [r0]
 800b91a:	e7eb      	b.n	800b8f4 <__ieee754_rem_pio2f+0x90>
 800b91c:	4b68      	ldr	r3, [pc, #416]	; (800bac0 <__ieee754_rem_pio2f+0x25c>)
 800b91e:	429d      	cmp	r5, r3
 800b920:	dc72      	bgt.n	800ba08 <__ieee754_rem_pio2f+0x1a4>
 800b922:	f000 fcd1 	bl	800c2c8 <fabsf>
 800b926:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800bac4 <__ieee754_rem_pio2f+0x260>
 800b92a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b92e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b932:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b936:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b93a:	ee17 0a90 	vmov	r0, s15
 800b93e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800baac <__ieee754_rem_pio2f+0x248>
 800b942:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b946:	281f      	cmp	r0, #31
 800b948:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800bab4 <__ieee754_rem_pio2f+0x250>
 800b94c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b950:	eeb1 6a47 	vneg.f32	s12, s14
 800b954:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b958:	ee16 2a90 	vmov	r2, s13
 800b95c:	dc1c      	bgt.n	800b998 <__ieee754_rem_pio2f+0x134>
 800b95e:	495a      	ldr	r1, [pc, #360]	; (800bac8 <__ieee754_rem_pio2f+0x264>)
 800b960:	1e47      	subs	r7, r0, #1
 800b962:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b966:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b96a:	428b      	cmp	r3, r1
 800b96c:	d014      	beq.n	800b998 <__ieee754_rem_pio2f+0x134>
 800b96e:	6022      	str	r2, [r4, #0]
 800b970:	ed94 7a00 	vldr	s14, [r4]
 800b974:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b978:	2e00      	cmp	r6, #0
 800b97a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b97e:	ed84 0a01 	vstr	s0, [r4, #4]
 800b982:	da9c      	bge.n	800b8be <__ieee754_rem_pio2f+0x5a>
 800b984:	eeb1 7a47 	vneg.f32	s14, s14
 800b988:	eeb1 0a40 	vneg.f32	s0, s0
 800b98c:	ed84 7a00 	vstr	s14, [r4]
 800b990:	ed84 0a01 	vstr	s0, [r4, #4]
 800b994:	4240      	negs	r0, r0
 800b996:	e792      	b.n	800b8be <__ieee754_rem_pio2f+0x5a>
 800b998:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b99c:	15eb      	asrs	r3, r5, #23
 800b99e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800b9a2:	2d08      	cmp	r5, #8
 800b9a4:	dde3      	ble.n	800b96e <__ieee754_rem_pio2f+0x10a>
 800b9a6:	eddf 7a44 	vldr	s15, [pc, #272]	; 800bab8 <__ieee754_rem_pio2f+0x254>
 800b9aa:	eddf 5a44 	vldr	s11, [pc, #272]	; 800babc <__ieee754_rem_pio2f+0x258>
 800b9ae:	eef0 6a40 	vmov.f32	s13, s0
 800b9b2:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b9b6:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b9ba:	eea6 0a27 	vfma.f32	s0, s12, s15
 800b9be:	eef0 7a40 	vmov.f32	s15, s0
 800b9c2:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b9c6:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b9ca:	ee15 2a90 	vmov	r2, s11
 800b9ce:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b9d2:	1a5b      	subs	r3, r3, r1
 800b9d4:	2b19      	cmp	r3, #25
 800b9d6:	dc04      	bgt.n	800b9e2 <__ieee754_rem_pio2f+0x17e>
 800b9d8:	edc4 5a00 	vstr	s11, [r4]
 800b9dc:	eeb0 0a66 	vmov.f32	s0, s13
 800b9e0:	e7c6      	b.n	800b970 <__ieee754_rem_pio2f+0x10c>
 800b9e2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800bacc <__ieee754_rem_pio2f+0x268>
 800b9e6:	eeb0 0a66 	vmov.f32	s0, s13
 800b9ea:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b9ee:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b9f2:	eddf 6a37 	vldr	s13, [pc, #220]	; 800bad0 <__ieee754_rem_pio2f+0x26c>
 800b9f6:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b9fa:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b9fe:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ba02:	ed84 7a00 	vstr	s14, [r4]
 800ba06:	e7b3      	b.n	800b970 <__ieee754_rem_pio2f+0x10c>
 800ba08:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ba0c:	db06      	blt.n	800ba1c <__ieee754_rem_pio2f+0x1b8>
 800ba0e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ba12:	edc0 7a01 	vstr	s15, [r0, #4]
 800ba16:	edc0 7a00 	vstr	s15, [r0]
 800ba1a:	e733      	b.n	800b884 <__ieee754_rem_pio2f+0x20>
 800ba1c:	15ea      	asrs	r2, r5, #23
 800ba1e:	3a86      	subs	r2, #134	; 0x86
 800ba20:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800ba24:	ee07 3a90 	vmov	s15, r3
 800ba28:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ba2c:	eddf 6a29 	vldr	s13, [pc, #164]	; 800bad4 <__ieee754_rem_pio2f+0x270>
 800ba30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ba34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba38:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ba3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ba40:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ba44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ba48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba4c:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ba50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ba54:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ba58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba5c:	edcd 7a05 	vstr	s15, [sp, #20]
 800ba60:	d11e      	bne.n	800baa0 <__ieee754_rem_pio2f+0x23c>
 800ba62:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ba66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba6a:	bf14      	ite	ne
 800ba6c:	2302      	movne	r3, #2
 800ba6e:	2301      	moveq	r3, #1
 800ba70:	4919      	ldr	r1, [pc, #100]	; (800bad8 <__ieee754_rem_pio2f+0x274>)
 800ba72:	9101      	str	r1, [sp, #4]
 800ba74:	2102      	movs	r1, #2
 800ba76:	9100      	str	r1, [sp, #0]
 800ba78:	a803      	add	r0, sp, #12
 800ba7a:	4621      	mov	r1, r4
 800ba7c:	f000 f892 	bl	800bba4 <__kernel_rem_pio2f>
 800ba80:	2e00      	cmp	r6, #0
 800ba82:	f6bf af1c 	bge.w	800b8be <__ieee754_rem_pio2f+0x5a>
 800ba86:	edd4 7a00 	vldr	s15, [r4]
 800ba8a:	eef1 7a67 	vneg.f32	s15, s15
 800ba8e:	edc4 7a00 	vstr	s15, [r4]
 800ba92:	edd4 7a01 	vldr	s15, [r4, #4]
 800ba96:	eef1 7a67 	vneg.f32	s15, s15
 800ba9a:	edc4 7a01 	vstr	s15, [r4, #4]
 800ba9e:	e779      	b.n	800b994 <__ieee754_rem_pio2f+0x130>
 800baa0:	2303      	movs	r3, #3
 800baa2:	e7e5      	b.n	800ba70 <__ieee754_rem_pio2f+0x20c>
 800baa4:	3f490fd8 	.word	0x3f490fd8
 800baa8:	4016cbe3 	.word	0x4016cbe3
 800baac:	3fc90f80 	.word	0x3fc90f80
 800bab0:	3fc90fd0 	.word	0x3fc90fd0
 800bab4:	37354443 	.word	0x37354443
 800bab8:	37354400 	.word	0x37354400
 800babc:	2e85a308 	.word	0x2e85a308
 800bac0:	43490f80 	.word	0x43490f80
 800bac4:	3f22f984 	.word	0x3f22f984
 800bac8:	0800c924 	.word	0x0800c924
 800bacc:	2e85a300 	.word	0x2e85a300
 800bad0:	248d3132 	.word	0x248d3132
 800bad4:	43800000 	.word	0x43800000
 800bad8:	0800c9a4 	.word	0x0800c9a4

0800badc <__ieee754_sqrtf>:
 800badc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bae0:	4770      	bx	lr
	...

0800bae4 <__kernel_cosf>:
 800bae4:	ee10 3a10 	vmov	r3, s0
 800bae8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800baec:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800baf0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800baf4:	da05      	bge.n	800bb02 <__kernel_cosf+0x1e>
 800baf6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bafa:	ee17 2a90 	vmov	r2, s15
 800bafe:	2a00      	cmp	r2, #0
 800bb00:	d03d      	beq.n	800bb7e <__kernel_cosf+0x9a>
 800bb02:	ee60 5a00 	vmul.f32	s11, s0, s0
 800bb06:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800bb84 <__kernel_cosf+0xa0>
 800bb0a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800bb88 <__kernel_cosf+0xa4>
 800bb0e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800bb8c <__kernel_cosf+0xa8>
 800bb12:	4a1f      	ldr	r2, [pc, #124]	; (800bb90 <__kernel_cosf+0xac>)
 800bb14:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800bb94 <__kernel_cosf+0xb0>
 800bb1e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800bb22:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800bb98 <__kernel_cosf+0xb4>
 800bb26:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800bb2a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800bb9c <__kernel_cosf+0xb8>
 800bb2e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800bb32:	eeb0 7a66 	vmov.f32	s14, s13
 800bb36:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800bb3a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800bb3e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800bb42:	ee67 6a25 	vmul.f32	s13, s14, s11
 800bb46:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800bb4a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bb4e:	dc04      	bgt.n	800bb5a <__kernel_cosf+0x76>
 800bb50:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800bb54:	ee36 0a47 	vsub.f32	s0, s12, s14
 800bb58:	4770      	bx	lr
 800bb5a:	4a11      	ldr	r2, [pc, #68]	; (800bba0 <__kernel_cosf+0xbc>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	bfda      	itte	le
 800bb60:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800bb64:	ee06 3a90 	vmovle	s13, r3
 800bb68:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800bb6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bb70:	ee36 0a66 	vsub.f32	s0, s12, s13
 800bb74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb78:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bb7c:	4770      	bx	lr
 800bb7e:	eeb0 0a46 	vmov.f32	s0, s12
 800bb82:	4770      	bx	lr
 800bb84:	ad47d74e 	.word	0xad47d74e
 800bb88:	310f74f6 	.word	0x310f74f6
 800bb8c:	3d2aaaab 	.word	0x3d2aaaab
 800bb90:	3e999999 	.word	0x3e999999
 800bb94:	b493f27c 	.word	0xb493f27c
 800bb98:	37d00d01 	.word	0x37d00d01
 800bb9c:	bab60b61 	.word	0xbab60b61
 800bba0:	3f480000 	.word	0x3f480000

0800bba4 <__kernel_rem_pio2f>:
 800bba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba8:	ed2d 8b04 	vpush	{d8-d9}
 800bbac:	b0d9      	sub	sp, #356	; 0x164
 800bbae:	4688      	mov	r8, r1
 800bbb0:	9002      	str	r0, [sp, #8]
 800bbb2:	49bb      	ldr	r1, [pc, #748]	; (800bea0 <__kernel_rem_pio2f+0x2fc>)
 800bbb4:	9866      	ldr	r0, [sp, #408]	; 0x198
 800bbb6:	9301      	str	r3, [sp, #4]
 800bbb8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800bbbc:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800bbc0:	1e59      	subs	r1, r3, #1
 800bbc2:	1d13      	adds	r3, r2, #4
 800bbc4:	db27      	blt.n	800bc16 <__kernel_rem_pio2f+0x72>
 800bbc6:	f1b2 0b03 	subs.w	fp, r2, #3
 800bbca:	bf48      	it	mi
 800bbcc:	f102 0b04 	addmi.w	fp, r2, #4
 800bbd0:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800bbd4:	1c45      	adds	r5, r0, #1
 800bbd6:	00ec      	lsls	r4, r5, #3
 800bbd8:	1a47      	subs	r7, r0, r1
 800bbda:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800beb0 <__kernel_rem_pio2f+0x30c>
 800bbde:	9403      	str	r4, [sp, #12]
 800bbe0:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800bbe4:	eb0a 0c01 	add.w	ip, sl, r1
 800bbe8:	ae1c      	add	r6, sp, #112	; 0x70
 800bbea:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800bbee:	2400      	movs	r4, #0
 800bbf0:	4564      	cmp	r4, ip
 800bbf2:	dd12      	ble.n	800bc1a <__kernel_rem_pio2f+0x76>
 800bbf4:	9b01      	ldr	r3, [sp, #4]
 800bbf6:	ac1c      	add	r4, sp, #112	; 0x70
 800bbf8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800bbfc:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800bc00:	f04f 0c00 	mov.w	ip, #0
 800bc04:	45d4      	cmp	ip, sl
 800bc06:	dc27      	bgt.n	800bc58 <__kernel_rem_pio2f+0xb4>
 800bc08:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800bc0c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800beb0 <__kernel_rem_pio2f+0x30c>
 800bc10:	4627      	mov	r7, r4
 800bc12:	2600      	movs	r6, #0
 800bc14:	e016      	b.n	800bc44 <__kernel_rem_pio2f+0xa0>
 800bc16:	2000      	movs	r0, #0
 800bc18:	e7dc      	b.n	800bbd4 <__kernel_rem_pio2f+0x30>
 800bc1a:	42e7      	cmn	r7, r4
 800bc1c:	bf5d      	ittte	pl
 800bc1e:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800bc22:	ee07 3a90 	vmovpl	s15, r3
 800bc26:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800bc2a:	eef0 7a47 	vmovmi.f32	s15, s14
 800bc2e:	ece6 7a01 	vstmia	r6!, {s15}
 800bc32:	3401      	adds	r4, #1
 800bc34:	e7dc      	b.n	800bbf0 <__kernel_rem_pio2f+0x4c>
 800bc36:	ecf9 6a01 	vldmia	r9!, {s13}
 800bc3a:	ed97 7a00 	vldr	s14, [r7]
 800bc3e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bc42:	3601      	adds	r6, #1
 800bc44:	428e      	cmp	r6, r1
 800bc46:	f1a7 0704 	sub.w	r7, r7, #4
 800bc4a:	ddf4      	ble.n	800bc36 <__kernel_rem_pio2f+0x92>
 800bc4c:	eceb 7a01 	vstmia	fp!, {s15}
 800bc50:	f10c 0c01 	add.w	ip, ip, #1
 800bc54:	3404      	adds	r4, #4
 800bc56:	e7d5      	b.n	800bc04 <__kernel_rem_pio2f+0x60>
 800bc58:	ab08      	add	r3, sp, #32
 800bc5a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800bc5e:	eddf 8a93 	vldr	s17, [pc, #588]	; 800beac <__kernel_rem_pio2f+0x308>
 800bc62:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800bea8 <__kernel_rem_pio2f+0x304>
 800bc66:	9304      	str	r3, [sp, #16]
 800bc68:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800bc6c:	4656      	mov	r6, sl
 800bc6e:	00b3      	lsls	r3, r6, #2
 800bc70:	9305      	str	r3, [sp, #20]
 800bc72:	ab58      	add	r3, sp, #352	; 0x160
 800bc74:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800bc78:	ac08      	add	r4, sp, #32
 800bc7a:	ab44      	add	r3, sp, #272	; 0x110
 800bc7c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800bc80:	46a4      	mov	ip, r4
 800bc82:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800bc86:	4637      	mov	r7, r6
 800bc88:	2f00      	cmp	r7, #0
 800bc8a:	f1a0 0004 	sub.w	r0, r0, #4
 800bc8e:	dc4f      	bgt.n	800bd30 <__kernel_rem_pio2f+0x18c>
 800bc90:	4628      	mov	r0, r5
 800bc92:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800bc96:	f000 fb61 	bl	800c35c <scalbnf>
 800bc9a:	eeb0 8a40 	vmov.f32	s16, s0
 800bc9e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800bca2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bca6:	f000 fb17 	bl	800c2d8 <floorf>
 800bcaa:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800bcae:	eea0 8a67 	vfms.f32	s16, s0, s15
 800bcb2:	2d00      	cmp	r5, #0
 800bcb4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800bcb8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800bcbc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800bcc0:	ee17 9a90 	vmov	r9, s15
 800bcc4:	ee38 8a40 	vsub.f32	s16, s16, s0
 800bcc8:	dd44      	ble.n	800bd54 <__kernel_rem_pio2f+0x1b0>
 800bcca:	f106 3cff 	add.w	ip, r6, #4294967295
 800bcce:	ab08      	add	r3, sp, #32
 800bcd0:	f1c5 0e08 	rsb	lr, r5, #8
 800bcd4:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800bcd8:	fa47 f00e 	asr.w	r0, r7, lr
 800bcdc:	4481      	add	r9, r0
 800bcde:	fa00 f00e 	lsl.w	r0, r0, lr
 800bce2:	1a3f      	subs	r7, r7, r0
 800bce4:	f1c5 0007 	rsb	r0, r5, #7
 800bce8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800bcec:	4107      	asrs	r7, r0
 800bcee:	2f00      	cmp	r7, #0
 800bcf0:	dd3f      	ble.n	800bd72 <__kernel_rem_pio2f+0x1ce>
 800bcf2:	f04f 0e00 	mov.w	lr, #0
 800bcf6:	f109 0901 	add.w	r9, r9, #1
 800bcfa:	4673      	mov	r3, lr
 800bcfc:	4576      	cmp	r6, lr
 800bcfe:	dc6b      	bgt.n	800bdd8 <__kernel_rem_pio2f+0x234>
 800bd00:	2d00      	cmp	r5, #0
 800bd02:	dd04      	ble.n	800bd0e <__kernel_rem_pio2f+0x16a>
 800bd04:	2d01      	cmp	r5, #1
 800bd06:	d078      	beq.n	800bdfa <__kernel_rem_pio2f+0x256>
 800bd08:	2d02      	cmp	r5, #2
 800bd0a:	f000 8081 	beq.w	800be10 <__kernel_rem_pio2f+0x26c>
 800bd0e:	2f02      	cmp	r7, #2
 800bd10:	d12f      	bne.n	800bd72 <__kernel_rem_pio2f+0x1ce>
 800bd12:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bd16:	ee30 8a48 	vsub.f32	s16, s0, s16
 800bd1a:	b353      	cbz	r3, 800bd72 <__kernel_rem_pio2f+0x1ce>
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800bd22:	f000 fb1b 	bl	800c35c <scalbnf>
 800bd26:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800bd2a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800bd2e:	e020      	b.n	800bd72 <__kernel_rem_pio2f+0x1ce>
 800bd30:	ee60 7a28 	vmul.f32	s15, s0, s17
 800bd34:	3f01      	subs	r7, #1
 800bd36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd3e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800bd42:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bd46:	ecac 0a01 	vstmia	ip!, {s0}
 800bd4a:	ed90 0a00 	vldr	s0, [r0]
 800bd4e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800bd52:	e799      	b.n	800bc88 <__kernel_rem_pio2f+0xe4>
 800bd54:	d105      	bne.n	800bd62 <__kernel_rem_pio2f+0x1be>
 800bd56:	1e70      	subs	r0, r6, #1
 800bd58:	ab08      	add	r3, sp, #32
 800bd5a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800bd5e:	11ff      	asrs	r7, r7, #7
 800bd60:	e7c5      	b.n	800bcee <__kernel_rem_pio2f+0x14a>
 800bd62:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bd66:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bd6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd6e:	da31      	bge.n	800bdd4 <__kernel_rem_pio2f+0x230>
 800bd70:	2700      	movs	r7, #0
 800bd72:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bd76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd7a:	f040 809b 	bne.w	800beb4 <__kernel_rem_pio2f+0x310>
 800bd7e:	1e74      	subs	r4, r6, #1
 800bd80:	46a4      	mov	ip, r4
 800bd82:	2000      	movs	r0, #0
 800bd84:	45d4      	cmp	ip, sl
 800bd86:	da4a      	bge.n	800be1e <__kernel_rem_pio2f+0x27a>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d07a      	beq.n	800be82 <__kernel_rem_pio2f+0x2de>
 800bd8c:	ab08      	add	r3, sp, #32
 800bd8e:	3d08      	subs	r5, #8
 800bd90:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	f000 8081 	beq.w	800be9c <__kernel_rem_pio2f+0x2f8>
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bda0:	00a5      	lsls	r5, r4, #2
 800bda2:	f000 fadb 	bl	800c35c <scalbnf>
 800bda6:	aa44      	add	r2, sp, #272	; 0x110
 800bda8:	1d2b      	adds	r3, r5, #4
 800bdaa:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800beac <__kernel_rem_pio2f+0x308>
 800bdae:	18d1      	adds	r1, r2, r3
 800bdb0:	4622      	mov	r2, r4
 800bdb2:	2a00      	cmp	r2, #0
 800bdb4:	f280 80ae 	bge.w	800bf14 <__kernel_rem_pio2f+0x370>
 800bdb8:	4622      	mov	r2, r4
 800bdba:	2a00      	cmp	r2, #0
 800bdbc:	f2c0 80cc 	blt.w	800bf58 <__kernel_rem_pio2f+0x3b4>
 800bdc0:	a944      	add	r1, sp, #272	; 0x110
 800bdc2:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800bdc6:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800bea4 <__kernel_rem_pio2f+0x300>
 800bdca:	eddf 7a39 	vldr	s15, [pc, #228]	; 800beb0 <__kernel_rem_pio2f+0x30c>
 800bdce:	2000      	movs	r0, #0
 800bdd0:	1aa1      	subs	r1, r4, r2
 800bdd2:	e0b6      	b.n	800bf42 <__kernel_rem_pio2f+0x39e>
 800bdd4:	2702      	movs	r7, #2
 800bdd6:	e78c      	b.n	800bcf2 <__kernel_rem_pio2f+0x14e>
 800bdd8:	6820      	ldr	r0, [r4, #0]
 800bdda:	b94b      	cbnz	r3, 800bdf0 <__kernel_rem_pio2f+0x24c>
 800bddc:	b118      	cbz	r0, 800bde6 <__kernel_rem_pio2f+0x242>
 800bdde:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800bde2:	6020      	str	r0, [r4, #0]
 800bde4:	2001      	movs	r0, #1
 800bde6:	f10e 0e01 	add.w	lr, lr, #1
 800bdea:	3404      	adds	r4, #4
 800bdec:	4603      	mov	r3, r0
 800bdee:	e785      	b.n	800bcfc <__kernel_rem_pio2f+0x158>
 800bdf0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800bdf4:	6020      	str	r0, [r4, #0]
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	e7f5      	b.n	800bde6 <__kernel_rem_pio2f+0x242>
 800bdfa:	1e74      	subs	r4, r6, #1
 800bdfc:	a808      	add	r0, sp, #32
 800bdfe:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800be02:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800be06:	f10d 0c20 	add.w	ip, sp, #32
 800be0a:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800be0e:	e77e      	b.n	800bd0e <__kernel_rem_pio2f+0x16a>
 800be10:	1e74      	subs	r4, r6, #1
 800be12:	a808      	add	r0, sp, #32
 800be14:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800be18:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800be1c:	e7f3      	b.n	800be06 <__kernel_rem_pio2f+0x262>
 800be1e:	ab08      	add	r3, sp, #32
 800be20:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800be24:	f10c 3cff 	add.w	ip, ip, #4294967295
 800be28:	4318      	orrs	r0, r3
 800be2a:	e7ab      	b.n	800bd84 <__kernel_rem_pio2f+0x1e0>
 800be2c:	f10c 0c01 	add.w	ip, ip, #1
 800be30:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800be34:	2c00      	cmp	r4, #0
 800be36:	d0f9      	beq.n	800be2c <__kernel_rem_pio2f+0x288>
 800be38:	9b05      	ldr	r3, [sp, #20]
 800be3a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800be3e:	eb0d 0003 	add.w	r0, sp, r3
 800be42:	9b01      	ldr	r3, [sp, #4]
 800be44:	18f4      	adds	r4, r6, r3
 800be46:	ab1c      	add	r3, sp, #112	; 0x70
 800be48:	1c77      	adds	r7, r6, #1
 800be4a:	384c      	subs	r0, #76	; 0x4c
 800be4c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800be50:	4466      	add	r6, ip
 800be52:	42be      	cmp	r6, r7
 800be54:	f6ff af0b 	blt.w	800bc6e <__kernel_rem_pio2f+0xca>
 800be58:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800be5c:	f8dd e008 	ldr.w	lr, [sp, #8]
 800be60:	ee07 3a90 	vmov	s15, r3
 800be64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be68:	f04f 0c00 	mov.w	ip, #0
 800be6c:	ece4 7a01 	vstmia	r4!, {s15}
 800be70:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800beb0 <__kernel_rem_pio2f+0x30c>
 800be74:	46a1      	mov	r9, r4
 800be76:	458c      	cmp	ip, r1
 800be78:	dd07      	ble.n	800be8a <__kernel_rem_pio2f+0x2e6>
 800be7a:	ece0 7a01 	vstmia	r0!, {s15}
 800be7e:	3701      	adds	r7, #1
 800be80:	e7e7      	b.n	800be52 <__kernel_rem_pio2f+0x2ae>
 800be82:	9804      	ldr	r0, [sp, #16]
 800be84:	f04f 0c01 	mov.w	ip, #1
 800be88:	e7d2      	b.n	800be30 <__kernel_rem_pio2f+0x28c>
 800be8a:	ecfe 6a01 	vldmia	lr!, {s13}
 800be8e:	ed39 7a01 	vldmdb	r9!, {s14}
 800be92:	f10c 0c01 	add.w	ip, ip, #1
 800be96:	eee6 7a87 	vfma.f32	s15, s13, s14
 800be9a:	e7ec      	b.n	800be76 <__kernel_rem_pio2f+0x2d2>
 800be9c:	3c01      	subs	r4, #1
 800be9e:	e775      	b.n	800bd8c <__kernel_rem_pio2f+0x1e8>
 800bea0:	0800cce8 	.word	0x0800cce8
 800bea4:	0800ccbc 	.word	0x0800ccbc
 800bea8:	43800000 	.word	0x43800000
 800beac:	3b800000 	.word	0x3b800000
 800beb0:	00000000 	.word	0x00000000
 800beb4:	9b03      	ldr	r3, [sp, #12]
 800beb6:	eeb0 0a48 	vmov.f32	s0, s16
 800beba:	1a98      	subs	r0, r3, r2
 800bebc:	f000 fa4e 	bl	800c35c <scalbnf>
 800bec0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800bea8 <__kernel_rem_pio2f+0x304>
 800bec4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800becc:	db19      	blt.n	800bf02 <__kernel_rem_pio2f+0x35e>
 800bece:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800beac <__kernel_rem_pio2f+0x308>
 800bed2:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bed6:	aa08      	add	r2, sp, #32
 800bed8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bedc:	1c74      	adds	r4, r6, #1
 800bede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bee2:	3508      	adds	r5, #8
 800bee4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800beec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bef0:	ee10 3a10 	vmov	r3, s0
 800bef4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800bef8:	ee17 3a90 	vmov	r3, s15
 800befc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800bf00:	e74b      	b.n	800bd9a <__kernel_rem_pio2f+0x1f6>
 800bf02:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bf06:	aa08      	add	r2, sp, #32
 800bf08:	ee10 3a10 	vmov	r3, s0
 800bf0c:	4634      	mov	r4, r6
 800bf0e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800bf12:	e742      	b.n	800bd9a <__kernel_rem_pio2f+0x1f6>
 800bf14:	a808      	add	r0, sp, #32
 800bf16:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800bf1a:	9001      	str	r0, [sp, #4]
 800bf1c:	ee07 0a90 	vmov	s15, r0
 800bf20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf24:	3a01      	subs	r2, #1
 800bf26:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bf2a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bf2e:	ed61 7a01 	vstmdb	r1!, {s15}
 800bf32:	e73e      	b.n	800bdb2 <__kernel_rem_pio2f+0x20e>
 800bf34:	ecfc 6a01 	vldmia	ip!, {s13}
 800bf38:	ecb6 7a01 	vldmia	r6!, {s14}
 800bf3c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bf40:	3001      	adds	r0, #1
 800bf42:	4550      	cmp	r0, sl
 800bf44:	dc01      	bgt.n	800bf4a <__kernel_rem_pio2f+0x3a6>
 800bf46:	4288      	cmp	r0, r1
 800bf48:	ddf4      	ble.n	800bf34 <__kernel_rem_pio2f+0x390>
 800bf4a:	a858      	add	r0, sp, #352	; 0x160
 800bf4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bf50:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800bf54:	3a01      	subs	r2, #1
 800bf56:	e730      	b.n	800bdba <__kernel_rem_pio2f+0x216>
 800bf58:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800bf5a:	2a02      	cmp	r2, #2
 800bf5c:	dc09      	bgt.n	800bf72 <__kernel_rem_pio2f+0x3ce>
 800bf5e:	2a00      	cmp	r2, #0
 800bf60:	dc2a      	bgt.n	800bfb8 <__kernel_rem_pio2f+0x414>
 800bf62:	d043      	beq.n	800bfec <__kernel_rem_pio2f+0x448>
 800bf64:	f009 0007 	and.w	r0, r9, #7
 800bf68:	b059      	add	sp, #356	; 0x164
 800bf6a:	ecbd 8b04 	vpop	{d8-d9}
 800bf6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf72:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800bf74:	2b03      	cmp	r3, #3
 800bf76:	d1f5      	bne.n	800bf64 <__kernel_rem_pio2f+0x3c0>
 800bf78:	ab30      	add	r3, sp, #192	; 0xc0
 800bf7a:	442b      	add	r3, r5
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	4619      	mov	r1, r3
 800bf80:	4620      	mov	r0, r4
 800bf82:	2800      	cmp	r0, #0
 800bf84:	f1a1 0104 	sub.w	r1, r1, #4
 800bf88:	dc51      	bgt.n	800c02e <__kernel_rem_pio2f+0x48a>
 800bf8a:	4621      	mov	r1, r4
 800bf8c:	2901      	cmp	r1, #1
 800bf8e:	f1a2 0204 	sub.w	r2, r2, #4
 800bf92:	dc5c      	bgt.n	800c04e <__kernel_rem_pio2f+0x4aa>
 800bf94:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800beb0 <__kernel_rem_pio2f+0x30c>
 800bf98:	3304      	adds	r3, #4
 800bf9a:	2c01      	cmp	r4, #1
 800bf9c:	dc67      	bgt.n	800c06e <__kernel_rem_pio2f+0x4ca>
 800bf9e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800bfa2:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800bfa6:	2f00      	cmp	r7, #0
 800bfa8:	d167      	bne.n	800c07a <__kernel_rem_pio2f+0x4d6>
 800bfaa:	edc8 6a00 	vstr	s13, [r8]
 800bfae:	ed88 7a01 	vstr	s14, [r8, #4]
 800bfb2:	edc8 7a02 	vstr	s15, [r8, #8]
 800bfb6:	e7d5      	b.n	800bf64 <__kernel_rem_pio2f+0x3c0>
 800bfb8:	aa30      	add	r2, sp, #192	; 0xc0
 800bfba:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800beb0 <__kernel_rem_pio2f+0x30c>
 800bfbe:	4413      	add	r3, r2
 800bfc0:	4622      	mov	r2, r4
 800bfc2:	2a00      	cmp	r2, #0
 800bfc4:	da24      	bge.n	800c010 <__kernel_rem_pio2f+0x46c>
 800bfc6:	b34f      	cbz	r7, 800c01c <__kernel_rem_pio2f+0x478>
 800bfc8:	eef1 7a47 	vneg.f32	s15, s14
 800bfcc:	edc8 7a00 	vstr	s15, [r8]
 800bfd0:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800bfd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bfd8:	aa31      	add	r2, sp, #196	; 0xc4
 800bfda:	2301      	movs	r3, #1
 800bfdc:	429c      	cmp	r4, r3
 800bfde:	da20      	bge.n	800c022 <__kernel_rem_pio2f+0x47e>
 800bfe0:	b10f      	cbz	r7, 800bfe6 <__kernel_rem_pio2f+0x442>
 800bfe2:	eef1 7a67 	vneg.f32	s15, s15
 800bfe6:	edc8 7a01 	vstr	s15, [r8, #4]
 800bfea:	e7bb      	b.n	800bf64 <__kernel_rem_pio2f+0x3c0>
 800bfec:	aa30      	add	r2, sp, #192	; 0xc0
 800bfee:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800beb0 <__kernel_rem_pio2f+0x30c>
 800bff2:	4413      	add	r3, r2
 800bff4:	2c00      	cmp	r4, #0
 800bff6:	da05      	bge.n	800c004 <__kernel_rem_pio2f+0x460>
 800bff8:	b10f      	cbz	r7, 800bffe <__kernel_rem_pio2f+0x45a>
 800bffa:	eef1 7a67 	vneg.f32	s15, s15
 800bffe:	edc8 7a00 	vstr	s15, [r8]
 800c002:	e7af      	b.n	800bf64 <__kernel_rem_pio2f+0x3c0>
 800c004:	ed33 7a01 	vldmdb	r3!, {s14}
 800c008:	3c01      	subs	r4, #1
 800c00a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c00e:	e7f1      	b.n	800bff4 <__kernel_rem_pio2f+0x450>
 800c010:	ed73 7a01 	vldmdb	r3!, {s15}
 800c014:	3a01      	subs	r2, #1
 800c016:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c01a:	e7d2      	b.n	800bfc2 <__kernel_rem_pio2f+0x41e>
 800c01c:	eef0 7a47 	vmov.f32	s15, s14
 800c020:	e7d4      	b.n	800bfcc <__kernel_rem_pio2f+0x428>
 800c022:	ecb2 7a01 	vldmia	r2!, {s14}
 800c026:	3301      	adds	r3, #1
 800c028:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c02c:	e7d6      	b.n	800bfdc <__kernel_rem_pio2f+0x438>
 800c02e:	edd1 7a00 	vldr	s15, [r1]
 800c032:	edd1 6a01 	vldr	s13, [r1, #4]
 800c036:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c03a:	3801      	subs	r0, #1
 800c03c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c040:	ed81 7a00 	vstr	s14, [r1]
 800c044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c048:	edc1 7a01 	vstr	s15, [r1, #4]
 800c04c:	e799      	b.n	800bf82 <__kernel_rem_pio2f+0x3de>
 800c04e:	edd2 7a00 	vldr	s15, [r2]
 800c052:	edd2 6a01 	vldr	s13, [r2, #4]
 800c056:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c05a:	3901      	subs	r1, #1
 800c05c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c060:	ed82 7a00 	vstr	s14, [r2]
 800c064:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c068:	edc2 7a01 	vstr	s15, [r2, #4]
 800c06c:	e78e      	b.n	800bf8c <__kernel_rem_pio2f+0x3e8>
 800c06e:	ed33 7a01 	vldmdb	r3!, {s14}
 800c072:	3c01      	subs	r4, #1
 800c074:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c078:	e78f      	b.n	800bf9a <__kernel_rem_pio2f+0x3f6>
 800c07a:	eef1 6a66 	vneg.f32	s13, s13
 800c07e:	eeb1 7a47 	vneg.f32	s14, s14
 800c082:	edc8 6a00 	vstr	s13, [r8]
 800c086:	ed88 7a01 	vstr	s14, [r8, #4]
 800c08a:	eef1 7a67 	vneg.f32	s15, s15
 800c08e:	e790      	b.n	800bfb2 <__kernel_rem_pio2f+0x40e>

0800c090 <__kernel_sinf>:
 800c090:	ee10 3a10 	vmov	r3, s0
 800c094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c098:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c09c:	da04      	bge.n	800c0a8 <__kernel_sinf+0x18>
 800c09e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c0a2:	ee17 3a90 	vmov	r3, s15
 800c0a6:	b35b      	cbz	r3, 800c100 <__kernel_sinf+0x70>
 800c0a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c0ac:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c104 <__kernel_sinf+0x74>
 800c0b0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c108 <__kernel_sinf+0x78>
 800c0b4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c0b8:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c10c <__kernel_sinf+0x7c>
 800c0bc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c0c0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c110 <__kernel_sinf+0x80>
 800c0c4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c0c8:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c114 <__kernel_sinf+0x84>
 800c0cc:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c0d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c0d4:	b930      	cbnz	r0, 800c0e4 <__kernel_sinf+0x54>
 800c0d6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c118 <__kernel_sinf+0x88>
 800c0da:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c0de:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c0e2:	4770      	bx	lr
 800c0e4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c0e8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c0ec:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c0f0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c0f4:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c11c <__kernel_sinf+0x8c>
 800c0f8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c0fc:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c100:	4770      	bx	lr
 800c102:	bf00      	nop
 800c104:	2f2ec9d3 	.word	0x2f2ec9d3
 800c108:	b2d72f34 	.word	0xb2d72f34
 800c10c:	3638ef1b 	.word	0x3638ef1b
 800c110:	b9500d01 	.word	0xb9500d01
 800c114:	3c088889 	.word	0x3c088889
 800c118:	be2aaaab 	.word	0xbe2aaaab
 800c11c:	3e2aaaab 	.word	0x3e2aaaab

0800c120 <atanf>:
 800c120:	b538      	push	{r3, r4, r5, lr}
 800c122:	ee10 5a10 	vmov	r5, s0
 800c126:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800c12a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800c12e:	eef0 7a40 	vmov.f32	s15, s0
 800c132:	db10      	blt.n	800c156 <atanf+0x36>
 800c134:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c138:	dd04      	ble.n	800c144 <atanf+0x24>
 800c13a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c13e:	eeb0 0a67 	vmov.f32	s0, s15
 800c142:	bd38      	pop	{r3, r4, r5, pc}
 800c144:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800c27c <atanf+0x15c>
 800c148:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800c280 <atanf+0x160>
 800c14c:	2d00      	cmp	r5, #0
 800c14e:	bfd8      	it	le
 800c150:	eef0 7a40 	vmovle.f32	s15, s0
 800c154:	e7f3      	b.n	800c13e <atanf+0x1e>
 800c156:	4b4b      	ldr	r3, [pc, #300]	; (800c284 <atanf+0x164>)
 800c158:	429c      	cmp	r4, r3
 800c15a:	dc10      	bgt.n	800c17e <atanf+0x5e>
 800c15c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800c160:	da0a      	bge.n	800c178 <atanf+0x58>
 800c162:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c288 <atanf+0x168>
 800c166:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c16a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c16e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c176:	dce2      	bgt.n	800c13e <atanf+0x1e>
 800c178:	f04f 33ff 	mov.w	r3, #4294967295
 800c17c:	e013      	b.n	800c1a6 <atanf+0x86>
 800c17e:	f000 f8a3 	bl	800c2c8 <fabsf>
 800c182:	4b42      	ldr	r3, [pc, #264]	; (800c28c <atanf+0x16c>)
 800c184:	429c      	cmp	r4, r3
 800c186:	dc4f      	bgt.n	800c228 <atanf+0x108>
 800c188:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c18c:	429c      	cmp	r4, r3
 800c18e:	dc41      	bgt.n	800c214 <atanf+0xf4>
 800c190:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c194:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c198:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c19c:	2300      	movs	r3, #0
 800c19e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c1a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c1a6:	1c5a      	adds	r2, r3, #1
 800c1a8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c1ac:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800c290 <atanf+0x170>
 800c1b0:	eddf 5a38 	vldr	s11, [pc, #224]	; 800c294 <atanf+0x174>
 800c1b4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800c298 <atanf+0x178>
 800c1b8:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c1bc:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c1c0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800c29c <atanf+0x17c>
 800c1c4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c1c8:	eddf 5a35 	vldr	s11, [pc, #212]	; 800c2a0 <atanf+0x180>
 800c1cc:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c1d0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800c2a4 <atanf+0x184>
 800c1d4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c1d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c2a8 <atanf+0x188>
 800c1dc:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c1e0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800c2ac <atanf+0x18c>
 800c1e4:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c1e8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800c2b0 <atanf+0x190>
 800c1ec:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c1f0:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800c2b4 <atanf+0x194>
 800c1f4:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c1f8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800c2b8 <atanf+0x198>
 800c1fc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c200:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c204:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c208:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c20c:	d121      	bne.n	800c252 <atanf+0x132>
 800c20e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c212:	e794      	b.n	800c13e <atanf+0x1e>
 800c214:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c218:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c21c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c220:	2301      	movs	r3, #1
 800c222:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c226:	e7be      	b.n	800c1a6 <atanf+0x86>
 800c228:	4b24      	ldr	r3, [pc, #144]	; (800c2bc <atanf+0x19c>)
 800c22a:	429c      	cmp	r4, r3
 800c22c:	dc0b      	bgt.n	800c246 <atanf+0x126>
 800c22e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c236:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c23a:	2302      	movs	r3, #2
 800c23c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c244:	e7af      	b.n	800c1a6 <atanf+0x86>
 800c246:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c24a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c24e:	2303      	movs	r3, #3
 800c250:	e7a9      	b.n	800c1a6 <atanf+0x86>
 800c252:	4a1b      	ldr	r2, [pc, #108]	; (800c2c0 <atanf+0x1a0>)
 800c254:	491b      	ldr	r1, [pc, #108]	; (800c2c4 <atanf+0x1a4>)
 800c256:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c25a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c25e:	ed93 0a00 	vldr	s0, [r3]
 800c262:	ee37 7a40 	vsub.f32	s14, s14, s0
 800c266:	ed92 0a00 	vldr	s0, [r2]
 800c26a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c26e:	2d00      	cmp	r5, #0
 800c270:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c274:	bfb8      	it	lt
 800c276:	eef1 7a67 	vneglt.f32	s15, s15
 800c27a:	e760      	b.n	800c13e <atanf+0x1e>
 800c27c:	3fc90fdb 	.word	0x3fc90fdb
 800c280:	bfc90fdb 	.word	0xbfc90fdb
 800c284:	3edfffff 	.word	0x3edfffff
 800c288:	7149f2ca 	.word	0x7149f2ca
 800c28c:	3f97ffff 	.word	0x3f97ffff
 800c290:	3c8569d7 	.word	0x3c8569d7
 800c294:	3d4bda59 	.word	0x3d4bda59
 800c298:	bd6ef16b 	.word	0xbd6ef16b
 800c29c:	3d886b35 	.word	0x3d886b35
 800c2a0:	3dba2e6e 	.word	0x3dba2e6e
 800c2a4:	3e124925 	.word	0x3e124925
 800c2a8:	3eaaaaab 	.word	0x3eaaaaab
 800c2ac:	bd15a221 	.word	0xbd15a221
 800c2b0:	bd9d8795 	.word	0xbd9d8795
 800c2b4:	bde38e38 	.word	0xbde38e38
 800c2b8:	be4ccccd 	.word	0xbe4ccccd
 800c2bc:	401bffff 	.word	0x401bffff
 800c2c0:	0800ccf4 	.word	0x0800ccf4
 800c2c4:	0800cd04 	.word	0x0800cd04

0800c2c8 <fabsf>:
 800c2c8:	ee10 3a10 	vmov	r3, s0
 800c2cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c2d0:	ee00 3a10 	vmov	s0, r3
 800c2d4:	4770      	bx	lr
	...

0800c2d8 <floorf>:
 800c2d8:	ee10 3a10 	vmov	r3, s0
 800c2dc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c2e0:	3a7f      	subs	r2, #127	; 0x7f
 800c2e2:	2a16      	cmp	r2, #22
 800c2e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c2e8:	dc2a      	bgt.n	800c340 <floorf+0x68>
 800c2ea:	2a00      	cmp	r2, #0
 800c2ec:	da11      	bge.n	800c312 <floorf+0x3a>
 800c2ee:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c350 <floorf+0x78>
 800c2f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c2f6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2fe:	dd05      	ble.n	800c30c <floorf+0x34>
 800c300:	2b00      	cmp	r3, #0
 800c302:	da23      	bge.n	800c34c <floorf+0x74>
 800c304:	4a13      	ldr	r2, [pc, #76]	; (800c354 <floorf+0x7c>)
 800c306:	2900      	cmp	r1, #0
 800c308:	bf18      	it	ne
 800c30a:	4613      	movne	r3, r2
 800c30c:	ee00 3a10 	vmov	s0, r3
 800c310:	4770      	bx	lr
 800c312:	4911      	ldr	r1, [pc, #68]	; (800c358 <floorf+0x80>)
 800c314:	4111      	asrs	r1, r2
 800c316:	420b      	tst	r3, r1
 800c318:	d0fa      	beq.n	800c310 <floorf+0x38>
 800c31a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c350 <floorf+0x78>
 800c31e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c322:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c32a:	ddef      	ble.n	800c30c <floorf+0x34>
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	bfbe      	ittt	lt
 800c330:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c334:	fa40 f202 	asrlt.w	r2, r0, r2
 800c338:	189b      	addlt	r3, r3, r2
 800c33a:	ea23 0301 	bic.w	r3, r3, r1
 800c33e:	e7e5      	b.n	800c30c <floorf+0x34>
 800c340:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c344:	d3e4      	bcc.n	800c310 <floorf+0x38>
 800c346:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c34a:	4770      	bx	lr
 800c34c:	2300      	movs	r3, #0
 800c34e:	e7dd      	b.n	800c30c <floorf+0x34>
 800c350:	7149f2ca 	.word	0x7149f2ca
 800c354:	bf800000 	.word	0xbf800000
 800c358:	007fffff 	.word	0x007fffff

0800c35c <scalbnf>:
 800c35c:	ee10 3a10 	vmov	r3, s0
 800c360:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c364:	d025      	beq.n	800c3b2 <scalbnf+0x56>
 800c366:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c36a:	d302      	bcc.n	800c372 <scalbnf+0x16>
 800c36c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c370:	4770      	bx	lr
 800c372:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c376:	d122      	bne.n	800c3be <scalbnf+0x62>
 800c378:	4b2a      	ldr	r3, [pc, #168]	; (800c424 <scalbnf+0xc8>)
 800c37a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c428 <scalbnf+0xcc>
 800c37e:	4298      	cmp	r0, r3
 800c380:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c384:	db16      	blt.n	800c3b4 <scalbnf+0x58>
 800c386:	ee10 3a10 	vmov	r3, s0
 800c38a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c38e:	3a19      	subs	r2, #25
 800c390:	4402      	add	r2, r0
 800c392:	2afe      	cmp	r2, #254	; 0xfe
 800c394:	dd15      	ble.n	800c3c2 <scalbnf+0x66>
 800c396:	ee10 3a10 	vmov	r3, s0
 800c39a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c42c <scalbnf+0xd0>
 800c39e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c430 <scalbnf+0xd4>
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	eeb0 7a67 	vmov.f32	s14, s15
 800c3a8:	bfb8      	it	lt
 800c3aa:	eef0 7a66 	vmovlt.f32	s15, s13
 800c3ae:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c3b2:	4770      	bx	lr
 800c3b4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c434 <scalbnf+0xd8>
 800c3b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c3bc:	4770      	bx	lr
 800c3be:	0dd2      	lsrs	r2, r2, #23
 800c3c0:	e7e6      	b.n	800c390 <scalbnf+0x34>
 800c3c2:	2a00      	cmp	r2, #0
 800c3c4:	dd06      	ble.n	800c3d4 <scalbnf+0x78>
 800c3c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c3ca:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c3ce:	ee00 3a10 	vmov	s0, r3
 800c3d2:	4770      	bx	lr
 800c3d4:	f112 0f16 	cmn.w	r2, #22
 800c3d8:	da1a      	bge.n	800c410 <scalbnf+0xb4>
 800c3da:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c3de:	4298      	cmp	r0, r3
 800c3e0:	ee10 3a10 	vmov	r3, s0
 800c3e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c3e8:	dd0a      	ble.n	800c400 <scalbnf+0xa4>
 800c3ea:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c42c <scalbnf+0xd0>
 800c3ee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c430 <scalbnf+0xd4>
 800c3f2:	eef0 7a40 	vmov.f32	s15, s0
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	bf18      	it	ne
 800c3fa:	eeb0 0a47 	vmovne.f32	s0, s14
 800c3fe:	e7db      	b.n	800c3b8 <scalbnf+0x5c>
 800c400:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c434 <scalbnf+0xd8>
 800c404:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c438 <scalbnf+0xdc>
 800c408:	eef0 7a40 	vmov.f32	s15, s0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	e7f3      	b.n	800c3f8 <scalbnf+0x9c>
 800c410:	3219      	adds	r2, #25
 800c412:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c416:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c41a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c43c <scalbnf+0xe0>
 800c41e:	ee07 3a10 	vmov	s14, r3
 800c422:	e7c4      	b.n	800c3ae <scalbnf+0x52>
 800c424:	ffff3cb0 	.word	0xffff3cb0
 800c428:	4c000000 	.word	0x4c000000
 800c42c:	7149f2ca 	.word	0x7149f2ca
 800c430:	f149f2ca 	.word	0xf149f2ca
 800c434:	0da24260 	.word	0x0da24260
 800c438:	8da24260 	.word	0x8da24260
 800c43c:	33000000 	.word	0x33000000

0800c440 <_init>:
 800c440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c442:	bf00      	nop
 800c444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c446:	bc08      	pop	{r3}
 800c448:	469e      	mov	lr, r3
 800c44a:	4770      	bx	lr

0800c44c <_fini>:
 800c44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c44e:	bf00      	nop
 800c450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c452:	bc08      	pop	{r3}
 800c454:	469e      	mov	lr, r3
 800c456:	4770      	bx	lr
