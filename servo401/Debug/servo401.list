
servo401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009080  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08009220  08009220  00019220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094ec  080094ec  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  080094ec  080094ec  000194ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094f4  080094f4  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094f4  080094f4  000194f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094f8  080094f8  000194f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080094fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005120  200000b0  080095ac  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200051d0  080095ac  000251d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c8d9  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bb5  00000000  00000000  0003c9b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  00040570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001538  00000000  00000000  00041c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fca  00000000  00000000  00043138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d34  00000000  00000000  0005d102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a56a9  00000000  00000000  00076e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011c4df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006208  00000000  00000000  0011c530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b0 	.word	0x200000b0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009208 	.word	0x08009208

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b4 	.word	0x200000b4
 80001dc:	08009208 	.word	0x08009208

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <modbus_protocol_read>:
uint16_t modbus_registers_buffer[30] = {0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}; //modbus holding registers

extern UART_HandleTypeDef huart1;
extern DMA_HandleTypeDef hdma_usart1_rx;

uint16_t modbus_protocol_read(uint32_t la){
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]

	if(la>=40001 && la<=40030)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f649 4240 	movw	r2, #40000	; 0x9c40
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d90c      	bls.n	8000510 <modbus_protocol_read+0x2c>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f649 425e 	movw	r2, #40030	; 0x9c5e
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d807      	bhi.n	8000510 <modbus_protocol_read+0x2c>
	{return modbus_registers_buffer[la-40001];}else{
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8000506:	3b41      	subs	r3, #65	; 0x41
 8000508:	4a05      	ldr	r2, [pc, #20]	; (8000520 <modbus_protocol_read+0x3c>)
 800050a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800050e:	e001      	b.n	8000514 <modbus_protocol_read+0x30>
		return 0xFFFF;
 8000510:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 8000514:	4618      	mov	r0, r3
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	20000000 	.word	0x20000000

08000524 <modbus_protocol_write>:

uint16_t modbus_protocol_write(uint32_t la, uint16_t value)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	460b      	mov	r3, r1
 800052e:	807b      	strh	r3, [r7, #2]
	uint8_t local_address=la-40001;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	b2db      	uxtb	r3, r3
 8000534:	3b41      	subs	r3, #65	; 0x41
 8000536:	73fb      	strb	r3, [r7, #15]
	switch (local_address){
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	3b02      	subs	r3, #2
 800053c:	2b05      	cmp	r3, #5
 800053e:	f200 80b4 	bhi.w	80006aa <modbus_protocol_write+0x186>
 8000542:	a201      	add	r2, pc, #4	; (adr r2, 8000548 <modbus_protocol_write+0x24>)
 8000544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000548:	08000561 	.word	0x08000561
 800054c:	08000577 	.word	0x08000577
 8000550:	080006ab 	.word	0x080006ab
 8000554:	080005ad 	.word	0x080005ad
 8000558:	080005c9 	.word	0x080005c9
 800055c:	08000611 	.word	0x08000611
	case 2://error register
		if(value==0){inverter_error = no_error;modbus_registers_buffer[2]=value;}break; //acknowledge error
 8000560:	887b      	ldrh	r3, [r7, #2]
 8000562:	2b00      	cmp	r3, #0
 8000564:	f040 80a3 	bne.w	80006ae <modbus_protocol_write+0x18a>
 8000568:	4b56      	ldr	r3, [pc, #344]	; (80006c4 <modbus_protocol_write+0x1a0>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
 800056e:	4a56      	ldr	r2, [pc, #344]	; (80006c8 <modbus_protocol_write+0x1a4>)
 8000570:	887b      	ldrh	r3, [r7, #2]
 8000572:	8093      	strh	r3, [r2, #4]
 8000574:	e09b      	b.n	80006ae <modbus_protocol_write+0x18a>
	case 3: //control register
		switch(value){
 8000576:	887b      	ldrh	r3, [r7, #2]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d002      	beq.n	8000582 <modbus_protocol_write+0x5e>
 800057c:	2b01      	cmp	r3, #1
 800057e:	d006      	beq.n	800058e <modbus_protocol_write+0x6a>
 8000580:	e010      	b.n	80005a4 <modbus_protocol_write+0x80>
		case 0:
			modbus_registers_buffer[3] = value;inverter_disable();break;
 8000582:	4a51      	ldr	r2, [pc, #324]	; (80006c8 <modbus_protocol_write+0x1a4>)
 8000584:	887b      	ldrh	r3, [r7, #2]
 8000586:	80d3      	strh	r3, [r2, #6]
 8000588:	f000 f9e4 	bl	8000954 <inverter_disable>
 800058c:	e00d      	b.n	80005aa <modbus_protocol_write+0x86>
		case 1:
			modbus_registers_buffer[3] = value;inv_control_mode = modbus_registers_buffer[5];inverter_enable();break;
 800058e:	4a4e      	ldr	r2, [pc, #312]	; (80006c8 <modbus_protocol_write+0x1a4>)
 8000590:	887b      	ldrh	r3, [r7, #2]
 8000592:	80d3      	strh	r3, [r2, #6]
 8000594:	4b4c      	ldr	r3, [pc, #304]	; (80006c8 <modbus_protocol_write+0x1a4>)
 8000596:	895b      	ldrh	r3, [r3, #10]
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4b4c      	ldr	r3, [pc, #304]	; (80006cc <modbus_protocol_write+0x1a8>)
 800059c:	701a      	strb	r2, [r3, #0]
 800059e:	f000 f99b 	bl	80008d8 <inverter_enable>
 80005a2:	e002      	b.n	80005aa <modbus_protocol_write+0x86>
		default:
			inverter_disable();break;
 80005a4:	f000 f9d6 	bl	8000954 <inverter_disable>
 80005a8:	bf00      	nop
		}
		break;
 80005aa:	e085      	b.n	80006b8 <modbus_protocol_write+0x194>
	case 5: //operation mode register
		if(value<=2){inv_control_mode=value;
 80005ac:	887b      	ldrh	r3, [r7, #2]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d87f      	bhi.n	80006b2 <modbus_protocol_write+0x18e>
 80005b2:	887b      	ldrh	r3, [r7, #2]
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4b45      	ldr	r3, [pc, #276]	; (80006cc <modbus_protocol_write+0x1a8>)
 80005b8:	701a      	strb	r2, [r3, #0]
		modbus_registers_buffer[5]=inv_control_mode;}
 80005ba:	4b44      	ldr	r3, [pc, #272]	; (80006cc <modbus_protocol_write+0x1a8>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	b29a      	uxth	r2, r3
 80005c2:	4b41      	ldr	r3, [pc, #260]	; (80006c8 <modbus_protocol_write+0x1a4>)
 80005c4:	815a      	strh	r2, [r3, #10]
		break;
 80005c6:	e074      	b.n	80006b2 <modbus_protocol_write+0x18e>
	case 6: //speed setpoint in rpm
		{int16_t received_speed=value;
 80005c8:	887b      	ldrh	r3, [r7, #2]
 80005ca:	817b      	strh	r3, [r7, #10]
		if((received_speed)<=1000 && (received_speed)>=(-1000) ){speed_setpoint_deg_s = (float)received_speed*6.0f;}
 80005cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005d4:	dc11      	bgt.n	80005fa <modbus_protocol_write+0xd6>
 80005d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005da:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80005de:	db0c      	blt.n	80005fa <modbus_protocol_write+0xd6>
 80005e0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005e4:	ee07 3a90 	vmov	s15, r3
 80005e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ec:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80005f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005f4:	4b36      	ldr	r3, [pc, #216]	; (80006d0 <modbus_protocol_write+0x1ac>)
 80005f6:	edc3 7a00 	vstr	s15, [r3]
		modbus_registers_buffer[6]=(uint16_t)speed_setpoint_deg_s;
 80005fa:	4b35      	ldr	r3, [pc, #212]	; (80006d0 <modbus_protocol_write+0x1ac>)
 80005fc:	edd3 7a00 	vldr	s15, [r3]
 8000600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000604:	ee17 3a90 	vmov	r3, s15
 8000608:	b29a      	uxth	r2, r3
 800060a:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <modbus_protocol_write+0x1a4>)
 800060c:	819a      	strh	r2, [r3, #12]
		break;}
 800060e:	e053      	b.n	80006b8 <modbus_protocol_write+0x194>
	case 7: //set output voltage in manual/torque in foc
		{if(inv_control_mode==manual){
 8000610:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <modbus_protocol_write+0x1a8>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b01      	cmp	r3, #1
 8000618:	d122      	bne.n	8000660 <modbus_protocol_write+0x13c>
			uint8_t received_duty_cycle_percent=value;
 800061a:	887b      	ldrh	r3, [r7, #2]
 800061c:	73bb      	strb	r3, [r7, #14]
			if(value<=100 && value>=0){duty_cycle = ((float)received_duty_cycle_percent/100.0f)*(float)duty_cycle_limit;}
 800061e:	887b      	ldrh	r3, [r7, #2]
 8000620:	2b64      	cmp	r3, #100	; 0x64
 8000622:	d813      	bhi.n	800064c <modbus_protocol_write+0x128>
 8000624:	7bbb      	ldrb	r3, [r7, #14]
 8000626:	ee07 3a90 	vmov	s15, r3
 800062a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800062e:	eddf 6a29 	vldr	s13, [pc, #164]	; 80006d4 <modbus_protocol_write+0x1b0>
 8000632:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <modbus_protocol_write+0x1b4>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	ee07 3a90 	vmov	s15, r3
 800063e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <modbus_protocol_write+0x1b8>)
 8000648:	edc3 7a00 	vstr	s15, [r3]
			modbus_registers_buffer[7]=duty_cycle;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <modbus_protocol_write+0x1b8>)
 800064e:	edd3 7a00 	vldr	s15, [r3]
 8000652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000656:	ee17 3a90 	vmov	r3, s15
 800065a:	b29a      	uxth	r2, r3
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <modbus_protocol_write+0x1a4>)
 800065e:	81da      	strh	r2, [r3, #14]
		}
		if(inv_control_mode==foc){
 8000660:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <modbus_protocol_write+0x1a8>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	2b02      	cmp	r3, #2
 8000668:	d125      	bne.n	80006b6 <modbus_protocol_write+0x192>
			int8_t received_torque_setpoint = (int16_t)value;
 800066a:	887b      	ldrh	r3, [r7, #2]
 800066c:	737b      	strb	r3, [r7, #13]
			if(received_torque_setpoint>=-100 && received_torque_setpoint<=100){
 800066e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000672:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000676:	db1e      	blt.n	80006b6 <modbus_protocol_write+0x192>
 8000678:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800067c:	2b64      	cmp	r3, #100	; 0x64
 800067e:	dc1a      	bgt.n	80006b6 <modbus_protocol_write+0x192>
			torque_setpoint=received_torque_setpoint;
 8000680:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000684:	ee07 3a90 	vmov	s15, r3
 8000688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <modbus_protocol_write+0x1bc>)
 800068e:	edc3 7a00 	vstr	s15, [r3]
			modbus_registers_buffer[7]=(int16_t)torque_setpoint;
 8000692:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <modbus_protocol_write+0x1bc>)
 8000694:	edd3 7a00 	vldr	s15, [r3]
 8000698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800069c:	ee17 3a90 	vmov	r3, s15
 80006a0:	b21b      	sxth	r3, r3
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <modbus_protocol_write+0x1a4>)
 80006a6:	81da      	strh	r2, [r3, #14]
			}
		}

		break;}
 80006a8:	e005      	b.n	80006b6 <modbus_protocol_write+0x192>
	default:
		//if not handled inside switch, then read-only parameter
		break;
 80006aa:	bf00      	nop
 80006ac:	e004      	b.n	80006b8 <modbus_protocol_write+0x194>
		if(value==0){inverter_error = no_error;modbus_registers_buffer[2]=value;}break; //acknowledge error
 80006ae:	bf00      	nop
 80006b0:	e002      	b.n	80006b8 <modbus_protocol_write+0x194>
		break;
 80006b2:	bf00      	nop
 80006b4:	e000      	b.n	80006b8 <modbus_protocol_write+0x194>
		break;}
 80006b6:	bf00      	nop
	}
	return value;
 80006b8:	887b      	ldrh	r3, [r7, #2]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000484 	.word	0x20000484
 80006c8:	20000000 	.word	0x20000000
 80006cc:	2000070c 	.word	0x2000070c
 80006d0:	20000710 	.word	0x20000710
 80006d4:	42c80000 	.word	0x42c80000
 80006d8:	08009268 	.word	0x08009268
 80006dc:	20000714 	.word	0x20000714
 80006e0:	20000718 	.word	0x20000718

080006e4 <mbus_send>:

int mbus_send(const mbus_t context,const uint8_t* data, const uint16_t size){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	6039      	str	r1, [r7, #0]
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	4613      	mov	r3, r2
 80006f2:	80bb      	strh	r3, [r7, #4]
	UNUSED(context);
	if(HAL_UART_Transmit_DMA( &huart1, (uint8_t*) data,size)==HAL_OK){
 80006f4:	88bb      	ldrh	r3, [r7, #4]
 80006f6:	461a      	mov	r2, r3
 80006f8:	6839      	ldr	r1, [r7, #0]
 80006fa:	4807      	ldr	r0, [pc, #28]	; (8000718 <mbus_send+0x34>)
 80006fc:	f004 fd14 	bl	8005128 <HAL_UART_Transmit_DMA>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d101      	bne.n	800070a <mbus_send+0x26>
		return MBUS_OK;
 8000706:	2300      	movs	r3, #0
 8000708:	e001      	b.n	800070e <mbus_send+0x2a>
	}else{return MBUS_ERROR;}
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800070e:	4618      	mov	r0, r3
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200005c0 	.word	0x200005c0

0800071c <Modbus_init>:

void Modbus_init(){
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
	/* Device slave address */
	mb_config.devaddr = 0x01;
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <Modbus_init+0x68>)
 8000724:	2201      	movs	r2, #1
 8000726:	701a      	strb	r2, [r3, #0]

	/* Just ptr on any external object, you can get it by context */
	mb_config.device = (void*) 0;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <Modbus_init+0x68>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]

	uint8_t * pmodbusSendBuffer;
	pmodbusSendBuffer=&modbusSendBufer;
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <Modbus_init+0x6c>)
 8000730:	60fb      	str	r3, [r7, #12]
	mb_config.sendbuf = pmodbusSendBuffer;
 8000732:	4a14      	ldr	r2, [pc, #80]	; (8000784 <Modbus_init+0x68>)
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	6193      	str	r3, [r2, #24]
	mb_config.sendbuf_sz = sizeof(modbusSendBufer);
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <Modbus_init+0x68>)
 800073a:	2264      	movs	r2, #100	; 0x64
 800073c:	839a      	strh	r2, [r3, #28]

	uint8_t * pmodbusRecvBuffer;
	pmodbusRecvBuffer=&modbusReceiveBufer;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <Modbus_init+0x70>)
 8000740:	60bb      	str	r3, [r7, #8]
	mb_config.recvbuf = pmodbusRecvBuffer;
 8000742:	4a10      	ldr	r2, [pc, #64]	; (8000784 <Modbus_init+0x68>)
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	6213      	str	r3, [r2, #32]
	mb_config.recvbuf_sz = sizeof(modbusReceiveBufer);
 8000748:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <Modbus_init+0x68>)
 800074a:	2264      	movs	r2, #100	; 0x64
 800074c:	849a      	strh	r2, [r3, #36]	; 0x24

	/* This that function for sending some data (use sendbuf for buf) */
	mb_config.send = &mbus_send;
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <Modbus_init+0x68>)
 8000750:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <Modbus_init+0x74>)
 8000752:	60da      	str	r2, [r3, #12]

	Modbus_Conf_t * pconf;
	pconf=&mb_config;
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <Modbus_init+0x68>)
 8000756:	607b      	str	r3, [r7, #4]
	//User Read callback function ( read by logical address)
	pconf->read = modbus_protocol_read;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <Modbus_init+0x78>)
 800075c:	611a      	str	r2, [r3, #16]

	//Write callback function
	pconf->write = modbus_protocol_write;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <Modbus_init+0x7c>)
 8000762:	615a      	str	r2, [r3, #20]

	//Open modbus contex
	modbus = mbus_open(pconf);
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f000 ffa7 	bl	80016b8 <mbus_open>
 800076a:	4603      	mov	r3, r0
 800076c:	461a      	mov	r2, r3
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <Modbus_init+0x80>)
 8000770:	701a      	strb	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, UART_RX_buf, sizeof(UART_RX_buf));
 8000772:	22c8      	movs	r2, #200	; 0xc8
 8000774:	490a      	ldr	r1, [pc, #40]	; (80007a0 <Modbus_init+0x84>)
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <Modbus_init+0x88>)
 8000778:	f004 fd54 	bl	8005224 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200000d0 	.word	0x200000d0
 8000788:	200003bc 	.word	0x200003bc
 800078c:	20000420 	.word	0x20000420
 8000790:	080006e5 	.word	0x080006e5
 8000794:	080004e5 	.word	0x080004e5
 8000798:	08000525 	.word	0x08000525
 800079c:	200000cc 	.word	0x200000cc
 80007a0:	200000f8 	.word	0x200000f8
 80007a4:	200005c0 	.word	0x200005c0

080007a8 <modbus_process_new_data_to_fifo>:

void modbus_process_new_data_to_fifo(UART_HandleTypeDef *huart, uint16_t Size){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a29      	ldr	r2, [pc, #164]	; (8000860 <modbus_process_new_data_to_fifo+0xb8>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d14c      	bne.n	8000858 <modbus_process_new_data_to_fifo+0xb0>
	{
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) UART_RX_buf, sizeof(UART_RX_buf));
 80007be:	22c8      	movs	r2, #200	; 0xc8
 80007c0:	4928      	ldr	r1, [pc, #160]	; (8000864 <modbus_process_new_data_to_fifo+0xbc>)
 80007c2:	4829      	ldr	r0, [pc, #164]	; (8000868 <modbus_process_new_data_to_fifo+0xc0>)
 80007c4:	f004 fd2e 	bl	8005224 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80007c8:	4b28      	ldr	r3, [pc, #160]	; (800086c <modbus_process_new_data_to_fifo+0xc4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	4b27      	ldr	r3, [pc, #156]	; (800086c <modbus_process_new_data_to_fifo+0xc4>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f022 0208 	bic.w	r2, r2, #8
 80007d6:	601a      	str	r2, [r3, #0]

		fifo_oldpos = fifo_newpos;  // Update the last position before copying new data
 80007d8:	4b25      	ldr	r3, [pc, #148]	; (8000870 <modbus_process_new_data_to_fifo+0xc8>)
 80007da:	881a      	ldrh	r2, [r3, #0]
 80007dc:	4b25      	ldr	r3, [pc, #148]	; (8000874 <modbus_process_new_data_to_fifo+0xcc>)
 80007de:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (fifo_oldpos+Size > sizeof(UART_RX_FIFO)-1)  // If the current position + new data size is greater than the main buffer
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <modbus_process_new_data_to_fifo+0xcc>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	887b      	ldrh	r3, [r7, #2]
 80007e8:	4413      	add	r3, r2
 80007ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007ee:	d322      	bcc.n	8000836 <modbus_process_new_data_to_fifo+0x8e>
		{
			uint16_t datatocopy = sizeof(UART_RX_FIFO)-fifo_oldpos;  // find out how much space is left in the main buffer
 80007f0:	4b20      	ldr	r3, [pc, #128]	; (8000874 <modbus_process_new_data_to_fifo+0xcc>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 80007f8:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)UART_RX_FIFO+fifo_oldpos, UART_RX_buf, datatocopy);  // copy data in that remaining space
 80007fa:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <modbus_process_new_data_to_fifo+0xcc>)
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <modbus_process_new_data_to_fifo+0xd0>)
 8000802:	4413      	add	r3, r2
 8000804:	89fa      	ldrh	r2, [r7, #14]
 8000806:	4917      	ldr	r1, [pc, #92]	; (8000864 <modbus_process_new_data_to_fifo+0xbc>)
 8000808:	4618      	mov	r0, r3
 800080a:	f008 fc25 	bl	8009058 <memcpy>

			fifo_oldpos = 0;  // point to the start of the buffer
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <modbus_process_new_data_to_fifo+0xcc>)
 8000810:	2200      	movs	r2, #0
 8000812:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)UART_RX_FIFO, (uint8_t *)UART_RX_buf+datatocopy, (Size-datatocopy));  // copy the remaining data
 8000814:	89fb      	ldrh	r3, [r7, #14]
 8000816:	4a13      	ldr	r2, [pc, #76]	; (8000864 <modbus_process_new_data_to_fifo+0xbc>)
 8000818:	1899      	adds	r1, r3, r2
 800081a:	887a      	ldrh	r2, [r7, #2]
 800081c:	89fb      	ldrh	r3, [r7, #14]
 800081e:	1ad3      	subs	r3, r2, r3
 8000820:	461a      	mov	r2, r3
 8000822:	4815      	ldr	r0, [pc, #84]	; (8000878 <modbus_process_new_data_to_fifo+0xd0>)
 8000824:	f008 fc18 	bl	8009058 <memcpy>
			fifo_newpos = (Size-datatocopy);  // update the position
 8000828:	887a      	ldrh	r2, [r7, #2]
 800082a:	89fb      	ldrh	r3, [r7, #14]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b29a      	uxth	r2, r3
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <modbus_process_new_data_to_fifo+0xc8>)
 8000832:	801a      	strh	r2, [r3, #0]
		}



	}
}
 8000834:	e010      	b.n	8000858 <modbus_process_new_data_to_fifo+0xb0>
			memcpy ((uint8_t *)UART_RX_FIFO+fifo_oldpos, UART_RX_buf, Size);
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <modbus_process_new_data_to_fifo+0xcc>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <modbus_process_new_data_to_fifo+0xd0>)
 800083e:	4413      	add	r3, r2
 8000840:	887a      	ldrh	r2, [r7, #2]
 8000842:	4908      	ldr	r1, [pc, #32]	; (8000864 <modbus_process_new_data_to_fifo+0xbc>)
 8000844:	4618      	mov	r0, r3
 8000846:	f008 fc07 	bl	8009058 <memcpy>
			fifo_newpos = Size+fifo_oldpos;
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <modbus_process_new_data_to_fifo+0xcc>)
 800084c:	881a      	ldrh	r2, [r3, #0]
 800084e:	887b      	ldrh	r3, [r7, #2]
 8000850:	4413      	add	r3, r2
 8000852:	b29a      	uxth	r2, r3
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <modbus_process_new_data_to_fifo+0xc8>)
 8000856:	801a      	strh	r2, [r3, #0]
}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40011000 	.word	0x40011000
 8000864:	200000f8 	.word	0x200000f8
 8000868:	200005c0 	.word	0x200005c0
 800086c:	20000648 	.word	0x20000648
 8000870:	200003b6 	.word	0x200003b6
 8000874:	200003b4 	.word	0x200003b4
 8000878:	200001c0 	.word	0x200001c0

0800087c <process_modbus_command>:

void process_modbus_command(){
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	while(fifo_read_pos!=fifo_newpos){
 8000880:	e019      	b.n	80008b6 <process_modbus_command+0x3a>
		mbus_poll(modbus, UART_RX_FIFO[fifo_read_pos] );
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <process_modbus_command+0x4c>)
 8000884:	f993 3000 	ldrsb.w	r3, [r3]
 8000888:	4a10      	ldr	r2, [pc, #64]	; (80008cc <process_modbus_command+0x50>)
 800088a:	8812      	ldrh	r2, [r2, #0]
 800088c:	4611      	mov	r1, r2
 800088e:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <process_modbus_command+0x54>)
 8000890:	5c52      	ldrb	r2, [r2, r1]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f001 f967 	bl	8001b68 <mbus_poll>
		fifo_read_pos++;
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <process_modbus_command+0x50>)
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	3301      	adds	r3, #1
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <process_modbus_command+0x50>)
 80008a4:	801a      	strh	r2, [r3, #0]
		if(fifo_read_pos>=sizeof(UART_RX_FIFO)){
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <process_modbus_command+0x50>)
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008ae:	d302      	bcc.n	80008b6 <process_modbus_command+0x3a>
			fifo_read_pos=0;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <process_modbus_command+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	801a      	strh	r2, [r3, #0]
	while(fifo_read_pos!=fifo_newpos){
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <process_modbus_command+0x50>)
 80008b8:	881a      	ldrh	r2, [r3, #0]
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <process_modbus_command+0x58>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d1df      	bne.n	8000882 <process_modbus_command+0x6>
		}
	}

}
 80008c2:	bf00      	nop
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200000cc 	.word	0x200000cc
 80008cc:	200003b8 	.word	0x200003b8
 80008d0:	200001c0 	.word	0x200001c0
 80008d4:	200003b6 	.word	0x200003b6

080008d8 <inverter_enable>:

extern TIM_HandleTypeDef htim1;
extern UART_HandleTypeDef huart1;
volatile inverter_error_t inverter_error=no_error;

void inverter_enable(){
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	if(inverter_error==0){
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <inverter_enable+0x64>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d128      	bne.n	8000938 <inverter_enable+0x60>
		speed_setpoint_deg_s=0.0f;
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <inverter_enable+0x68>)
 80008e8:	f04f 0200 	mov.w	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
		duty_cycle=0.0f;
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <inverter_enable+0x6c>)
 80008f0:	f04f 0200 	mov.w	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
		TIM1->CCR1=0;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <inverter_enable+0x70>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=0;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <inverter_enable+0x70>)
 80008fe:	2200      	movs	r2, #0
 8000900:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=0;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <inverter_enable+0x70>)
 8000904:	2200      	movs	r2, #0
 8000906:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(INV_ENABLE_GPIO_Port, INV_ENABLE_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800090e:	480f      	ldr	r0, [pc, #60]	; (800094c <inverter_enable+0x74>)
 8000910:	f002 ff12 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INV_ENABLE_GPIO_Port, INV_ENABLE_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800091a:	480c      	ldr	r0, [pc, #48]	; (800094c <inverter_enable+0x74>)
 800091c:	f002 ff0c 	bl	8003738 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000920:	2100      	movs	r1, #0
 8000922:	480b      	ldr	r0, [pc, #44]	; (8000950 <inverter_enable+0x78>)
 8000924:	f003 fcb4 	bl	8004290 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000928:	2104      	movs	r1, #4
 800092a:	4809      	ldr	r0, [pc, #36]	; (8000950 <inverter_enable+0x78>)
 800092c:	f003 fcb0 	bl	8004290 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000930:	2108      	movs	r1, #8
 8000932:	4807      	ldr	r0, [pc, #28]	; (8000950 <inverter_enable+0x78>)
 8000934:	f003 fcac 	bl	8004290 <HAL_TIM_PWM_Start>
	}
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000484 	.word	0x20000484
 8000940:	20000710 	.word	0x20000710
 8000944:	20000714 	.word	0x20000714
 8000948:	40010000 	.word	0x40010000
 800094c:	40020400 	.word	0x40020400
 8000950:	20000530 	.word	0x20000530

08000954 <inverter_disable>:

void inverter_disable(){
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	speed_setpoint_deg_s=0.0f;
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <inverter_disable+0x54>)
 800095a:	f04f 0200 	mov.w	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
	duty_cycle=0.0f;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <inverter_disable+0x58>)
 8000962:	f04f 0200 	mov.w	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
	//TIM1->CCR1=0;TIM1->CCR2=0;TIM1->CCR3=0;
	HAL_GPIO_WritePin(INV_DISABLE_GPIO_Port, INV_DISABLE_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096e:	4810      	ldr	r0, [pc, #64]	; (80009b0 <inverter_disable+0x5c>)
 8000970:	f002 fee2 	bl	8003738 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INV_DISABLE_GPIO_Port, INV_DISABLE_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097a:	480d      	ldr	r0, [pc, #52]	; (80009b0 <inverter_disable+0x5c>)
 800097c:	f002 fedc 	bl	8003738 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8000980:	2100      	movs	r1, #0
 8000982:	480c      	ldr	r0, [pc, #48]	; (80009b4 <inverter_disable+0x60>)
 8000984:	f003 fd34 	bl	80043f0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2);
 8000988:	2104      	movs	r1, #4
 800098a:	480a      	ldr	r0, [pc, #40]	; (80009b4 <inverter_disable+0x60>)
 800098c:	f003 fd30 	bl	80043f0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_3);
 8000990:	2108      	movs	r1, #8
 8000992:	4808      	ldr	r0, [pc, #32]	; (80009b4 <inverter_disable+0x60>)
 8000994:	f003 fd2c 	bl	80043f0 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 8000998:	4806      	ldr	r0, [pc, #24]	; (80009b4 <inverter_disable+0x60>)
 800099a:	f003 fbf1 	bl	8004180 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim1); //restart base timer to keep 16khz tim1_update ISR active for reading current and encoder data when inverter not working
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <inverter_disable+0x60>)
 80009a0:	f003 fb8c 	bl	80040bc <HAL_TIM_Base_Start_IT>
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000710 	.word	0x20000710
 80009ac:	20000714 	.word	0x20000714
 80009b0:	40020400 	.word	0x40020400
 80009b4:	20000530 	.word	0x20000530

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009bc:	f001 fbdc 	bl	8002178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c0:	f000 f822 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c4:	f000 fa96 	bl	8000ef4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80009c8:	f000 f888 	bl	8000adc <MX_ADC1_Init>
  MX_TIM1_Init();
 80009cc:	f000 f902 	bl	8000bd4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009d0:	f000 f9b8 	bl	8000d44 <MX_TIM2_Init>
  MX_DMA_Init();
 80009d4:	f000 fa5e 	bl	8000e94 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009d8:	f000 fa32 	bl	8000e40 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80009dc:	f000 fa06 	bl	8000dec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009e0:	f005 fd98 	bl	8006514 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009e4:	4a05      	ldr	r2, [pc, #20]	; (80009fc <main+0x44>)
 80009e6:	2100      	movs	r1, #0
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <main+0x48>)
 80009ea:	f005 fddd 	bl	80065a8 <osThreadNew>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <main+0x4c>)
 80009f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009f4:	f005 fdb2 	bl	800655c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <main+0x40>
 80009fa:	bf00      	nop
 80009fc:	08009244 	.word	0x08009244
 8000a00:	080010b1 	.word	0x080010b1
 8000a04:	20000708 	.word	0x20000708

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b094      	sub	sp, #80	; 0x50
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 0320 	add.w	r3, r7, #32
 8000a12:	2230      	movs	r2, #48	; 0x30
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f008 fb2c 	bl	8009074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	4a27      	ldr	r2, [pc, #156]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3c:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <SystemClock_Config+0xd0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a54:	4a20      	ldr	r2, [pc, #128]	; (8000ad8 <SystemClock_Config+0xd0>)
 8000a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a5a:	6013      	str	r3, [r2, #0]
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <SystemClock_Config+0xd0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a72:	2302      	movs	r3, #2
 8000a74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a80:	2360      	movs	r3, #96	; 0x60
 8000a82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8c:	f107 0320 	add.w	r3, r7, #32
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 fe6b 	bl	800376c <HAL_RCC_OscConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a9c:	f000 fb12 	bl	80010c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	2102      	movs	r1, #2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f003 f8cd 	bl	8003c5c <HAL_RCC_ClockConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ac8:	f000 fafc 	bl	80010c4 <Error_Handler>
  }
}
 8000acc:	bf00      	nop
 8000ace:	3750      	adds	r7, #80	; 0x50
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40007000 	.word	0x40007000

08000adc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000aee:	4b36      	ldr	r3, [pc, #216]	; (8000bc8 <MX_ADC1_Init+0xec>)
 8000af0:	4a36      	ldr	r2, [pc, #216]	; (8000bcc <MX_ADC1_Init+0xf0>)
 8000af2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000af4:	4b34      	ldr	r3, [pc, #208]	; (8000bc8 <MX_ADC1_Init+0xec>)
 8000af6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000afa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000afc:	4b32      	ldr	r3, [pc, #200]	; (8000bc8 <MX_ADC1_Init+0xec>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b02:	4b31      	ldr	r3, [pc, #196]	; (8000bc8 <MX_ADC1_Init+0xec>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b08:	4b2f      	ldr	r3, [pc, #188]	; (8000bc8 <MX_ADC1_Init+0xec>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b0e:	4b2e      	ldr	r3, [pc, #184]	; (8000bc8 <MX_ADC1_Init+0xec>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b16:	4b2c      	ldr	r3, [pc, #176]	; (8000bc8 <MX_ADC1_Init+0xec>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b1c:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <MX_ADC1_Init+0xec>)
 8000b1e:	4a2c      	ldr	r2, [pc, #176]	; (8000bd0 <MX_ADC1_Init+0xf4>)
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b22:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <MX_ADC1_Init+0xec>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000b28:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <MX_ADC1_Init+0xec>)
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <MX_ADC1_Init+0xec>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b36:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <MX_ADC1_Init+0xec>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b3c:	4822      	ldr	r0, [pc, #136]	; (8000bc8 <MX_ADC1_Init+0xec>)
 8000b3e:	f001 fb8d 	bl	800225c <HAL_ADC_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b48:	f000 fabc 	bl	80010c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b58:	463b      	mov	r3, r7
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	481a      	ldr	r0, [pc, #104]	; (8000bc8 <MX_ADC1_Init+0xec>)
 8000b5e:	f001 fbc1 	bl	80022e4 <HAL_ADC_ConfigChannel>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b68:	f000 faac 	bl	80010c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b6c:	2305      	movs	r3, #5
 8000b6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b74:	463b      	mov	r3, r7
 8000b76:	4619      	mov	r1, r3
 8000b78:	4813      	ldr	r0, [pc, #76]	; (8000bc8 <MX_ADC1_Init+0xec>)
 8000b7a:	f001 fbb3 	bl	80022e4 <HAL_ADC_ConfigChannel>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b84:	f000 fa9e 	bl	80010c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b88:	2306      	movs	r3, #6
 8000b8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b90:	463b      	mov	r3, r7
 8000b92:	4619      	mov	r1, r3
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <MX_ADC1_Init+0xec>)
 8000b96:	f001 fba5 	bl	80022e4 <HAL_ADC_ConfigChannel>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000ba0:	f000 fa90 	bl	80010c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bac:	463b      	mov	r3, r7
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_ADC1_Init+0xec>)
 8000bb2:	f001 fb97 	bl	80022e4 <HAL_ADC_ConfigChannel>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000bbc:	f000 fa82 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000488 	.word	0x20000488
 8000bcc:	40012000 	.word	0x40012000
 8000bd0:	0f000001 	.word	0x0f000001

08000bd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b096      	sub	sp, #88	; 0x58
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]
 8000c02:	615a      	str	r2, [r3, #20]
 8000c04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2220      	movs	r2, #32
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f008 fa31 	bl	8009074 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c12:	4b4a      	ldr	r3, [pc, #296]	; (8000d3c <MX_TIM1_Init+0x168>)
 8000c14:	4a4a      	ldr	r2, [pc, #296]	; (8000d40 <MX_TIM1_Init+0x16c>)
 8000c16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c18:	4b48      	ldr	r3, [pc, #288]	; (8000d3c <MX_TIM1_Init+0x168>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000c1e:	4b47      	ldr	r3, [pc, #284]	; (8000d3c <MX_TIM1_Init+0x168>)
 8000c20:	2220      	movs	r2, #32
 8000c22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5249;
 8000c24:	4b45      	ldr	r3, [pc, #276]	; (8000d3c <MX_TIM1_Init+0x168>)
 8000c26:	f241 4281 	movw	r2, #5249	; 0x1481
 8000c2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2c:	4b43      	ldr	r3, [pc, #268]	; (8000d3c <MX_TIM1_Init+0x168>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c32:	4b42      	ldr	r3, [pc, #264]	; (8000d3c <MX_TIM1_Init+0x168>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c38:	4b40      	ldr	r3, [pc, #256]	; (8000d3c <MX_TIM1_Init+0x168>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c3e:	483f      	ldr	r0, [pc, #252]	; (8000d3c <MX_TIM1_Init+0x168>)
 8000c40:	f003 f9ec 	bl	800401c <HAL_TIM_Base_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000c4a:	f000 fa3b 	bl	80010c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c52:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4838      	ldr	r0, [pc, #224]	; (8000d3c <MX_TIM1_Init+0x168>)
 8000c5c:	f003 fd94 	bl	8004788 <HAL_TIM_ConfigClockSource>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000c66:	f000 fa2d 	bl	80010c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c6a:	4834      	ldr	r0, [pc, #208]	; (8000d3c <MX_TIM1_Init+0x168>)
 8000c6c:	f003 fab7 	bl	80041de <HAL_TIM_PWM_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c76:	f000 fa25 	bl	80010c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c86:	4619      	mov	r1, r3
 8000c88:	482c      	ldr	r0, [pc, #176]	; (8000d3c <MX_TIM1_Init+0x168>)
 8000c8a:	f004 f911 	bl	8004eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c94:	f000 fa16 	bl	80010c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c98:	2360      	movs	r3, #96	; 0x60
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cac:	2300      	movs	r3, #0
 8000cae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	2200      	movs	r2, #0
 8000cba:	4619      	mov	r1, r3
 8000cbc:	481f      	ldr	r0, [pc, #124]	; (8000d3c <MX_TIM1_Init+0x168>)
 8000cbe:	f003 fca1 	bl	8004604 <HAL_TIM_PWM_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000cc8:	f000 f9fc 	bl	80010c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd0:	2204      	movs	r2, #4
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4819      	ldr	r0, [pc, #100]	; (8000d3c <MX_TIM1_Init+0x168>)
 8000cd6:	f003 fc95 	bl	8004604 <HAL_TIM_PWM_ConfigChannel>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000ce0:	f000 f9f0 	bl	80010c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce8:	2208      	movs	r2, #8
 8000cea:	4619      	mov	r1, r3
 8000cec:	4813      	ldr	r0, [pc, #76]	; (8000d3c <MX_TIM1_Init+0x168>)
 8000cee:	f003 fc89 	bl	8004604 <HAL_TIM_PWM_ConfigChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000cf8:	f000 f9e4 	bl	80010c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4807      	ldr	r0, [pc, #28]	; (8000d3c <MX_TIM1_Init+0x168>)
 8000d20:	f004 f934 	bl	8004f8c <HAL_TIMEx_ConfigBreakDeadTime>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000d2a:	f000 f9cb 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d2e:	4803      	ldr	r0, [pc, #12]	; (8000d3c <MX_TIM1_Init+0x168>)
 8000d30:	f000 fad8 	bl	80012e4 <HAL_TIM_MspPostInit>

}
 8000d34:	bf00      	nop
 8000d36:	3758      	adds	r7, #88	; 0x58
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000530 	.word	0x20000530
 8000d40:	40010000 	.word	0x40010000

08000d44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08c      	sub	sp, #48	; 0x30
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	2224      	movs	r2, #36	; 0x24
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f008 f98e 	bl	8009074 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d60:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <MX_TIM2_Init+0xa4>)
 8000d62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <MX_TIM2_Init+0xa4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <MX_TIM2_Init+0xa4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <MX_TIM2_Init+0xa4>)
 8000d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <MX_TIM2_Init+0xa4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <MX_TIM2_Init+0xa4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d90:	2301      	movs	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000d98:	230a      	movs	r3, #10
 8000d9a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000da0:	2301      	movs	r3, #1
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000da8:	230a      	movs	r3, #10
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	4619      	mov	r1, r3
 8000db2:	480d      	ldr	r0, [pc, #52]	; (8000de8 <MX_TIM2_Init+0xa4>)
 8000db4:	f003 fb80 	bl	80044b8 <HAL_TIM_Encoder_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000dbe:	f000 f981 	bl	80010c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4806      	ldr	r0, [pc, #24]	; (8000de8 <MX_TIM2_Init+0xa4>)
 8000dd0:	f004 f86e 	bl	8004eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000dda:	f000 f973 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	3730      	adds	r7, #48	; 0x30
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000578 	.word	0x20000578

08000dec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <MX_USART1_UART_Init+0x50>)
 8000df4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_USART1_UART_Init+0x4c>)
 8000e24:	f004 f904 	bl	8005030 <HAL_UART_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e2e:	f000 f949 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200005c0 	.word	0x200005c0
 8000e3c:	40011000 	.word	0x40011000

08000e40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <MX_USART2_UART_Init+0x50>)
 8000e48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_USART2_UART_Init+0x4c>)
 8000e78:	f004 f8da 	bl	8005030 <HAL_UART_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e82:	f000 f91f 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000604 	.word	0x20000604
 8000e90:	40004400 	.word	0x40004400

08000e94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <MX_DMA_Init+0x5c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <MX_DMA_Init+0x5c>)
 8000ea4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_DMA_Init+0x5c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2105      	movs	r1, #5
 8000eba:	2038      	movs	r0, #56	; 0x38
 8000ebc:	f001 fd2f 	bl	800291e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ec0:	2038      	movs	r0, #56	; 0x38
 8000ec2:	f001 fd48 	bl	8002956 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2105      	movs	r1, #5
 8000eca:	203a      	movs	r0, #58	; 0x3a
 8000ecc:	f001 fd27 	bl	800291e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ed0:	203a      	movs	r0, #58	; 0x3a
 8000ed2:	f001 fd40 	bl	8002956 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2105      	movs	r1, #5
 8000eda:	2046      	movs	r0, #70	; 0x46
 8000edc:	f001 fd1f 	bl	800291e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000ee0:	2046      	movs	r0, #70	; 0x46
 8000ee2:	f001 fd38 	bl	8002956 <HAL_NVIC_EnableIRQ>

}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800

08000ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	4b51      	ldr	r3, [pc, #324]	; (8001054 <MX_GPIO_Init+0x160>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a50      	ldr	r2, [pc, #320]	; (8001054 <MX_GPIO_Init+0x160>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b4e      	ldr	r3, [pc, #312]	; (8001054 <MX_GPIO_Init+0x160>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b4a      	ldr	r3, [pc, #296]	; (8001054 <MX_GPIO_Init+0x160>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a49      	ldr	r2, [pc, #292]	; (8001054 <MX_GPIO_Init+0x160>)
 8000f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b47      	ldr	r3, [pc, #284]	; (8001054 <MX_GPIO_Init+0x160>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	4b43      	ldr	r3, [pc, #268]	; (8001054 <MX_GPIO_Init+0x160>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a42      	ldr	r2, [pc, #264]	; (8001054 <MX_GPIO_Init+0x160>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b40      	ldr	r3, [pc, #256]	; (8001054 <MX_GPIO_Init+0x160>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b3c      	ldr	r3, [pc, #240]	; (8001054 <MX_GPIO_Init+0x160>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a3b      	ldr	r2, [pc, #236]	; (8001054 <MX_GPIO_Init+0x160>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b39      	ldr	r3, [pc, #228]	; (8001054 <MX_GPIO_Init+0x160>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SOFTSTART_GPIO_Port, SOFTSTART_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f80:	4835      	ldr	r0, [pc, #212]	; (8001058 <MX_GPIO_Init+0x164>)
 8000f82:	f002 fbd9 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INPUTS_LOAD_Pin|INPUTS_CS_Pin|DISP_LATCH_Pin|DISP_EN_Pin
 8000f86:	2200      	movs	r2, #0
 8000f88:	f240 3117 	movw	r1, #791	; 0x317
 8000f8c:	4833      	ldr	r0, [pc, #204]	; (800105c <MX_GPIO_Init+0x168>)
 8000f8e:	f002 fbd3 	bl	8003738 <HAL_GPIO_WritePin>
                          |MODBUS_DE_Pin|ADC_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INV_ENABLE_Pin|INV_DISABLE_Pin, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000f98:	4830      	ldr	r0, [pc, #192]	; (800105c <MX_GPIO_Init+0x168>)
 8000f9a:	f002 fbcd 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4829      	ldr	r0, [pc, #164]	; (8001058 <MX_GPIO_Init+0x164>)
 8000fb4:	f002 f958 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : SOFTSTART_Pin */
  GPIO_InitStruct.Pin = SOFTSTART_Pin;
 8000fb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SOFTSTART_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4821      	ldr	r0, [pc, #132]	; (8001058 <MX_GPIO_Init+0x164>)
 8000fd2:	f002 f949 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUTS_LOAD_Pin INPUTS_CS_Pin DISP_LATCH_Pin INV_ENABLE_Pin
                           INV_DISABLE_Pin DISP_EN_Pin MODBUS_DE_Pin ADC_CS_Pin */
  GPIO_InitStruct.Pin = INPUTS_LOAD_Pin|INPUTS_CS_Pin|DISP_LATCH_Pin|INV_ENABLE_Pin
 8000fd6:	f243 3317 	movw	r3, #13079	; 0x3317
 8000fda:	617b      	str	r3, [r7, #20]
                          |INV_DISABLE_Pin|DISP_EN_Pin|MODBUS_DE_Pin|ADC_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	481b      	ldr	r0, [pc, #108]	; (800105c <MX_GPIO_Init+0x168>)
 8000ff0:	f002 f93a 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CLK_Pin PB14 PB15 */
  GPIO_InitStruct.Pin = SPI_CLK_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8000ff4:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001006:	2305      	movs	r3, #5
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	4812      	ldr	r0, [pc, #72]	; (800105c <MX_GPIO_Init+0x168>)
 8001012:	f002 f929 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_Pin DIR_Pin ENC_Z_Pin */
  GPIO_InitStruct.Pin = STEP_Pin|DIR_Pin|ENC_Z_Pin;
 8001016:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 800101a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800101c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	480c      	ldr	r0, [pc, #48]	; (8001060 <MX_GPIO_Init+0x16c>)
 800102e:	f002 f91b 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : OC_ALARM_Pin */
  GPIO_InitStruct.Pin = OC_ALARM_Pin;
 8001032:	2320      	movs	r3, #32
 8001034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001036:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800103a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OC_ALARM_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_GPIO_Init+0x168>)
 8001048:	f002 f90e 	bl	8003268 <HAL_GPIO_Init>

}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	; 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40023800 	.word	0x40023800
 8001058:	40020800 	.word	0x40020800
 800105c:	40020400 	.word	0x40020400
 8001060:	40020000 	.word	0x40020000

08001064 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]
	modbus_process_new_data_to_fifo(huart,Size);
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	4619      	mov	r1, r3
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff fb97 	bl	80007a8 <modbus_process_new_data_to_fifo>
	process_modbus_command();
 800107a:	f7ff fbff 	bl	800087c <process_modbus_command>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
     if(huart == &huart1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_UART_ErrorCallback+0x24>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d104      	bne.n	80010a2 <HAL_UART_ErrorCallback+0x1a>
     {
         HAL_UART_DeInit(&huart1);
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <HAL_UART_ErrorCallback+0x24>)
 800109a:	f004 f816 	bl	80050ca <HAL_UART_DeInit>
         MX_USART1_UART_Init();
 800109e:	f7ff fea5 	bl	8000dec <MX_USART1_UART_Init>
     }
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200005c0 	.word	0x200005c0

080010b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	Modbus_init();
 80010b8:	f7ff fb30 	bl	800071c <Modbus_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010bc:	2001      	movs	r0, #1
 80010be:	f005 fb05 	bl	80066cc <osDelay>
 80010c2:	e7fb      	b.n	80010bc <StartDefaultTask+0xc>

080010c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c8:	b672      	cpsid	i
}
 80010ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010cc:	e7fe      	b.n	80010cc <Error_Handler+0x8>
	...

080010d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_MspInit+0x54>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a11      	ldr	r2, [pc, #68]	; (8001124 <HAL_MspInit+0x54>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <HAL_MspInit+0x54>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_MspInit+0x54>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <HAL_MspInit+0x54>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_MspInit+0x54>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	210f      	movs	r1, #15
 8001112:	f06f 0001 	mvn.w	r0, #1
 8001116:	f001 fc02 	bl	800291e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800

08001128 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a2e      	ldr	r2, [pc, #184]	; (8001200 <HAL_ADC_MspInit+0xd8>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d156      	bne.n	80011f8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <HAL_ADC_MspInit+0xdc>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	4a2c      	ldr	r2, [pc, #176]	; (8001204 <HAL_ADC_MspInit+0xdc>)
 8001154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001158:	6453      	str	r3, [r2, #68]	; 0x44
 800115a:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <HAL_ADC_MspInit+0xdc>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b26      	ldr	r3, [pc, #152]	; (8001204 <HAL_ADC_MspInit+0xdc>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a25      	ldr	r2, [pc, #148]	; (8001204 <HAL_ADC_MspInit+0xdc>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <HAL_ADC_MspInit+0xdc>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = I_U_Pin|I_V_Pin|DC_VOLTAGE_Pin|HEATSINK_TEMP_Pin;
 8001182:	23f0      	movs	r3, #240	; 0xf0
 8001184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001186:	2303      	movs	r3, #3
 8001188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	481c      	ldr	r0, [pc, #112]	; (8001208 <HAL_ADC_MspInit+0xe0>)
 8001196:	f002 f867 	bl	8003268 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_ADC_MspInit+0xe4>)
 800119c:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <HAL_ADC_MspInit+0xe8>)
 800119e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011dc:	480b      	ldr	r0, [pc, #44]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011de:	f001 fbe3 	bl	80029a8 <HAL_DMA_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80011e8:	f7ff ff6c 	bl	80010c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a07      	ldr	r2, [pc, #28]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011f0:	639a      	str	r2, [r3, #56]	; 0x38
 80011f2:	4a06      	ldr	r2, [pc, #24]	; (800120c <HAL_ADC_MspInit+0xe4>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	; 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40012000 	.word	0x40012000
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000
 800120c:	200004d0 	.word	0x200004d0
 8001210:	40026410 	.word	0x40026410

08001214 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <HAL_TIM_Base_MspInit+0x3c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d10d      	bne.n	8001242 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_TIM_Base_MspInit+0x40>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <HAL_TIM_Base_MspInit+0x40>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6453      	str	r3, [r2, #68]	; 0x44
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <HAL_TIM_Base_MspInit+0x40>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40010000 	.word	0x40010000
 8001254:	40023800 	.word	0x40023800

08001258 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001278:	d12b      	bne.n	80012d2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <HAL_TIM_Encoder_MspInit+0x84>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a16      	ldr	r2, [pc, #88]	; (80012dc <HAL_TIM_Encoder_MspInit+0x84>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <HAL_TIM_Encoder_MspInit+0x84>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <HAL_TIM_Encoder_MspInit+0x84>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <HAL_TIM_Encoder_MspInit+0x84>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <HAL_TIM_Encoder_MspInit+0x84>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 80012b2:	2303      	movs	r3, #3
 80012b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012c2:	2301      	movs	r3, #1
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <HAL_TIM_Encoder_MspInit+0x88>)
 80012ce:	f001 ffcb 	bl	8003268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012d2:	bf00      	nop
 80012d4:	3728      	adds	r7, #40	; 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020000 	.word	0x40020000

080012e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a12      	ldr	r2, [pc, #72]	; (800134c <HAL_TIM_MspPostInit+0x68>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d11e      	bne.n	8001344 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_TIM_MspPostInit+0x6c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a10      	ldr	r2, [pc, #64]	; (8001350 <HAL_TIM_MspPostInit+0x6c>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_TIM_MspPostInit+0x6c>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_Pin|V_PWM_Pin|W_PWM_Pin;
 8001322:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001326:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001334:	2301      	movs	r3, #1
 8001336:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	4619      	mov	r1, r3
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <HAL_TIM_MspPostInit+0x70>)
 8001340:	f001 ff92 	bl	8003268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001344:	bf00      	nop
 8001346:	3720      	adds	r7, #32
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40010000 	.word	0x40010000
 8001350:	40023800 	.word	0x40023800
 8001354:	40020000 	.word	0x40020000

08001358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08c      	sub	sp, #48	; 0x30
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a64      	ldr	r2, [pc, #400]	; (8001508 <HAL_UART_MspInit+0x1b0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	f040 8091 	bne.w	800149e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	61bb      	str	r3, [r7, #24]
 8001380:	4b62      	ldr	r3, [pc, #392]	; (800150c <HAL_UART_MspInit+0x1b4>)
 8001382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001384:	4a61      	ldr	r2, [pc, #388]	; (800150c <HAL_UART_MspInit+0x1b4>)
 8001386:	f043 0310 	orr.w	r3, r3, #16
 800138a:	6453      	str	r3, [r2, #68]	; 0x44
 800138c:	4b5f      	ldr	r3, [pc, #380]	; (800150c <HAL_UART_MspInit+0x1b4>)
 800138e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001390:	f003 0310 	and.w	r3, r3, #16
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	4b5b      	ldr	r3, [pc, #364]	; (800150c <HAL_UART_MspInit+0x1b4>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	4a5a      	ldr	r2, [pc, #360]	; (800150c <HAL_UART_MspInit+0x1b4>)
 80013a2:	f043 0302 	orr.w	r3, r3, #2
 80013a6:	6313      	str	r3, [r2, #48]	; 0x30
 80013a8:	4b58      	ldr	r3, [pc, #352]	; (800150c <HAL_UART_MspInit+0x1b4>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MODBUS_TX_Pin|MODBUS_RX_Pin;
 80013b4:	23c0      	movs	r3, #192	; 0xc0
 80013b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013c4:	2307      	movs	r3, #7
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	4850      	ldr	r0, [pc, #320]	; (8001510 <HAL_UART_MspInit+0x1b8>)
 80013d0:	f001 ff4a 	bl	8003268 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80013d4:	4b4f      	ldr	r3, [pc, #316]	; (8001514 <HAL_UART_MspInit+0x1bc>)
 80013d6:	4a50      	ldr	r2, [pc, #320]	; (8001518 <HAL_UART_MspInit+0x1c0>)
 80013d8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80013da:	4b4e      	ldr	r3, [pc, #312]	; (8001514 <HAL_UART_MspInit+0x1bc>)
 80013dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013e0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013e2:	4b4c      	ldr	r3, [pc, #304]	; (8001514 <HAL_UART_MspInit+0x1bc>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e8:	4b4a      	ldr	r3, [pc, #296]	; (8001514 <HAL_UART_MspInit+0x1bc>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013ee:	4b49      	ldr	r3, [pc, #292]	; (8001514 <HAL_UART_MspInit+0x1bc>)
 80013f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013f4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013f6:	4b47      	ldr	r3, [pc, #284]	; (8001514 <HAL_UART_MspInit+0x1bc>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013fc:	4b45      	ldr	r3, [pc, #276]	; (8001514 <HAL_UART_MspInit+0x1bc>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001402:	4b44      	ldr	r3, [pc, #272]	; (8001514 <HAL_UART_MspInit+0x1bc>)
 8001404:	2200      	movs	r2, #0
 8001406:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001408:	4b42      	ldr	r3, [pc, #264]	; (8001514 <HAL_UART_MspInit+0x1bc>)
 800140a:	2200      	movs	r2, #0
 800140c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800140e:	4b41      	ldr	r3, [pc, #260]	; (8001514 <HAL_UART_MspInit+0x1bc>)
 8001410:	2200      	movs	r2, #0
 8001412:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001414:	483f      	ldr	r0, [pc, #252]	; (8001514 <HAL_UART_MspInit+0x1bc>)
 8001416:	f001 fac7 	bl	80029a8 <HAL_DMA_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001420:	f7ff fe50 	bl	80010c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a3b      	ldr	r2, [pc, #236]	; (8001514 <HAL_UART_MspInit+0x1bc>)
 8001428:	639a      	str	r2, [r3, #56]	; 0x38
 800142a:	4a3a      	ldr	r2, [pc, #232]	; (8001514 <HAL_UART_MspInit+0x1bc>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001430:	4b3a      	ldr	r3, [pc, #232]	; (800151c <HAL_UART_MspInit+0x1c4>)
 8001432:	4a3b      	ldr	r2, [pc, #236]	; (8001520 <HAL_UART_MspInit+0x1c8>)
 8001434:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001436:	4b39      	ldr	r3, [pc, #228]	; (800151c <HAL_UART_MspInit+0x1c4>)
 8001438:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800143c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800143e:	4b37      	ldr	r3, [pc, #220]	; (800151c <HAL_UART_MspInit+0x1c4>)
 8001440:	2240      	movs	r2, #64	; 0x40
 8001442:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001444:	4b35      	ldr	r3, [pc, #212]	; (800151c <HAL_UART_MspInit+0x1c4>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800144a:	4b34      	ldr	r3, [pc, #208]	; (800151c <HAL_UART_MspInit+0x1c4>)
 800144c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001450:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001452:	4b32      	ldr	r3, [pc, #200]	; (800151c <HAL_UART_MspInit+0x1c4>)
 8001454:	2200      	movs	r2, #0
 8001456:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001458:	4b30      	ldr	r3, [pc, #192]	; (800151c <HAL_UART_MspInit+0x1c4>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800145e:	4b2f      	ldr	r3, [pc, #188]	; (800151c <HAL_UART_MspInit+0x1c4>)
 8001460:	2200      	movs	r2, #0
 8001462:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001464:	4b2d      	ldr	r3, [pc, #180]	; (800151c <HAL_UART_MspInit+0x1c4>)
 8001466:	2200      	movs	r2, #0
 8001468:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800146a:	4b2c      	ldr	r3, [pc, #176]	; (800151c <HAL_UART_MspInit+0x1c4>)
 800146c:	2200      	movs	r2, #0
 800146e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001470:	482a      	ldr	r0, [pc, #168]	; (800151c <HAL_UART_MspInit+0x1c4>)
 8001472:	f001 fa99 	bl	80029a8 <HAL_DMA_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800147c:	f7ff fe22 	bl	80010c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a26      	ldr	r2, [pc, #152]	; (800151c <HAL_UART_MspInit+0x1c4>)
 8001484:	635a      	str	r2, [r3, #52]	; 0x34
 8001486:	4a25      	ldr	r2, [pc, #148]	; (800151c <HAL_UART_MspInit+0x1c4>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2105      	movs	r1, #5
 8001490:	2025      	movs	r0, #37	; 0x25
 8001492:	f001 fa44 	bl	800291e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001496:	2025      	movs	r0, #37	; 0x25
 8001498:	f001 fa5d 	bl	8002956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800149c:	e030      	b.n	8001500 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a20      	ldr	r2, [pc, #128]	; (8001524 <HAL_UART_MspInit+0x1cc>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d12b      	bne.n	8001500 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014a8:	2300      	movs	r3, #0
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_UART_MspInit+0x1b4>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	4a16      	ldr	r2, [pc, #88]	; (800150c <HAL_UART_MspInit+0x1b4>)
 80014b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b6:	6413      	str	r3, [r2, #64]	; 0x40
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <HAL_UART_MspInit+0x1b4>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_UART_MspInit+0x1b4>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	4a0f      	ldr	r2, [pc, #60]	; (800150c <HAL_UART_MspInit+0x1b4>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6313      	str	r3, [r2, #48]	; 0x30
 80014d4:	4b0d      	ldr	r3, [pc, #52]	; (800150c <HAL_UART_MspInit+0x1b4>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SSI_TX_Pin|SSI_RX_Pin;
 80014e0:	230c      	movs	r3, #12
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014f0:	2307      	movs	r3, #7
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	480b      	ldr	r0, [pc, #44]	; (8001528 <HAL_UART_MspInit+0x1d0>)
 80014fc:	f001 feb4 	bl	8003268 <HAL_GPIO_Init>
}
 8001500:	bf00      	nop
 8001502:	3730      	adds	r7, #48	; 0x30
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40011000 	.word	0x40011000
 800150c:	40023800 	.word	0x40023800
 8001510:	40020400 	.word	0x40020400
 8001514:	20000648 	.word	0x20000648
 8001518:	40026440 	.word	0x40026440
 800151c:	200006a8 	.word	0x200006a8
 8001520:	400264b8 	.word	0x400264b8
 8001524:	40004400 	.word	0x40004400
 8001528:	40020000 	.word	0x40020000

0800152c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a16      	ldr	r2, [pc, #88]	; (8001594 <HAL_UART_MspDeInit+0x68>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d117      	bne.n	800156e <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800153e:	4b16      	ldr	r3, [pc, #88]	; (8001598 <HAL_UART_MspDeInit+0x6c>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a15      	ldr	r2, [pc, #84]	; (8001598 <HAL_UART_MspDeInit+0x6c>)
 8001544:	f023 0310 	bic.w	r3, r3, #16
 8001548:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, MODBUS_TX_Pin|MODBUS_RX_Pin);
 800154a:	21c0      	movs	r1, #192	; 0xc0
 800154c:	4813      	ldr	r0, [pc, #76]	; (800159c <HAL_UART_MspDeInit+0x70>)
 800154e:	f002 f80f 	bl	8003570 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001556:	4618      	mov	r0, r3
 8001558:	f001 fad4 	bl	8002b04 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001560:	4618      	mov	r0, r3
 8001562:	f001 facf 	bl	8002b04 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001566:	2025      	movs	r0, #37	; 0x25
 8001568:	f001 fa03 	bl	8002972 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800156c:	e00e      	b.n	800158c <HAL_UART_MspDeInit+0x60>
  else if(huart->Instance==USART2)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <HAL_UART_MspDeInit+0x74>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d109      	bne.n	800158c <HAL_UART_MspDeInit+0x60>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <HAL_UART_MspDeInit+0x6c>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	4a06      	ldr	r2, [pc, #24]	; (8001598 <HAL_UART_MspDeInit+0x6c>)
 800157e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001582:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, SSI_TX_Pin|SSI_RX_Pin);
 8001584:	210c      	movs	r1, #12
 8001586:	4807      	ldr	r0, [pc, #28]	; (80015a4 <HAL_UART_MspDeInit+0x78>)
 8001588:	f001 fff2 	bl	8003570 <HAL_GPIO_DeInit>
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40011000 	.word	0x40011000
 8001598:	40023800 	.word	0x40023800
 800159c:	40020400 	.word	0x40020400
 80015a0:	40004400 	.word	0x40004400
 80015a4:	40020000 	.word	0x40020000

080015a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <NMI_Handler+0x4>

080015ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <HardFault_Handler+0x4>

080015b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <MemManage_Handler+0x4>

080015ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <BusFault_Handler+0x4>

080015c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <UsageFault_Handler+0x4>

080015c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d8:	f000 fe20 	bl	800221c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015dc:	f006 fcae 	bl	8007f3c <xTaskGetSchedulerState>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d001      	beq.n	80015ea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015e6:	f007 fa97 	bl	8008b18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <USART1_IRQHandler+0x10>)
 80015f6:	f003 fe7b 	bl	80052f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200005c0 	.word	0x200005c0

08001604 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <DMA2_Stream0_IRQHandler+0x10>)
 800160a:	f001 fbc3 	bl	8002d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200004d0 	.word	0x200004d0

08001618 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <DMA2_Stream2_IRQHandler+0x10>)
 800161e:	f001 fbb9 	bl	8002d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000648 	.word	0x20000648

0800162c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <DMA2_Stream7_IRQHandler+0x10>)
 8001632:	f001 fbaf 	bl	8002d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200006a8 	.word	0x200006a8

08001640 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <SystemInit+0x20>)
 8001646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <SystemInit+0x20>)
 800164c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800169c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001668:	480d      	ldr	r0, [pc, #52]	; (80016a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800166a:	490e      	ldr	r1, [pc, #56]	; (80016a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800166c:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001680:	4c0b      	ldr	r4, [pc, #44]	; (80016b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800168e:	f7ff ffd7 	bl	8001640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001692:	f007 fcbb 	bl	800900c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001696:	f7ff f98f 	bl	80009b8 <main>
  bx  lr    
 800169a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800169c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a4:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80016a8:	080094fc 	.word	0x080094fc
  ldr r2, =_sbss
 80016ac:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80016b0:	200051d0 	.word	0x200051d0

080016b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <ADC_IRQHandler>
	...

080016b8 <mbus_open>:
/*
 * function mbus_open()
 * open new modbus context for new port
 * return: MODBUS_ERROR - if can't open context
 */
mbus_t mbus_open(Modbus_Conf_t *pconf) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  mbus_t context;
  for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++) {
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	e010      	b.n	80016e8 <mbus_open+0x30>
    if (g_mbusContext[context].open == 0) {
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	4a22      	ldr	r2, [pc, #136]	; (8001754 <mbus_open+0x9c>)
 80016cc:	2194      	movs	r1, #148	; 0x94
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	3328      	adds	r3, #40	; 0x28
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00a      	beq.n	80016f2 <mbus_open+0x3a>
  for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++) {
 80016dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	3301      	adds	r3, #1
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	ddea      	ble.n	80016c6 <mbus_open+0xe>
 80016f0:	e000      	b.n	80016f4 <mbus_open+0x3c>
      break;
 80016f2:	bf00      	nop
    }
  }
  if (context == STMODBUS_COUNT_CONTEXT)
 80016f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d102      	bne.n	8001702 <mbus_open+0x4a>
    return (mbus_t)MBUS_ERROR;
 80016fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001700:	e023      	b.n	800174a <mbus_open+0x92>
  // Clear context
  memset(&g_mbusContext[context], 0, sizeof(_stmodbus_context_t));
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001706:	2294      	movs	r2, #148	; 0x94
 8001708:	fb02 f303 	mul.w	r3, r2, r3
 800170c:	4a11      	ldr	r2, [pc, #68]	; (8001754 <mbus_open+0x9c>)
 800170e:	4413      	add	r3, r2
 8001710:	2294      	movs	r2, #148	; 0x94
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f007 fcad 	bl	8009074 <memset>
  // Copy config to context
  memcpy((void *)&g_mbusContext[context].conf, (void *)pconf,
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	2294      	movs	r2, #148	; 0x94
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <mbus_open+0x9c>)
 8001726:	4413      	add	r3, r2
 8001728:	2228      	movs	r2, #40	; 0x28
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	4618      	mov	r0, r3
 800172e:	f007 fc93 	bl	8009058 <memcpy>
         sizeof(Modbus_Conf_t));

  g_mbusContext[context].open = 1;
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4a07      	ldr	r2, [pc, #28]	; (8001754 <mbus_open+0x9c>)
 8001738:	2194      	movs	r1, #148	; 0x94
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	4413      	add	r3, r2
 8001740:	3328      	adds	r3, #40	; 0x28
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
  return context;
 8001746:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000071c 	.word	0x2000071c

08001758 <mbus_flush>:

mbus_status_t mbus_flush(const mbus_t context) {
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
  g_mbusContext[context].crc16 = 0xFFFF;
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	4a0d      	ldr	r2, [pc, #52]	; (800179c <mbus_flush+0x44>)
 8001768:	2194      	movs	r1, #148	; 0x94
 800176a:	fb01 f303 	mul.w	r3, r1, r3
 800176e:	4413      	add	r3, r2
 8001770:	332a      	adds	r3, #42	; 0x2a
 8001772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001776:	801a      	strh	r2, [r3, #0]
  g_mbusContext[context].state = MBUS_STATE_IDLE;
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	4a07      	ldr	r2, [pc, #28]	; (800179c <mbus_flush+0x44>)
 800177e:	2194      	movs	r1, #148	; 0x94
 8001780:	fb01 f303 	mul.w	r3, r1, r3
 8001784:	4413      	add	r3, r2
 8001786:	3329      	adds	r3, #41	; 0x29
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
  return MBUS_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	2000071c 	.word	0x2000071c

080017a0 <mbus_response>:

mbus_status_t mbus_response(mbus_t mb_context, Modbus_ResponseType response) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	460a      	mov	r2, r1
 80017aa:	71fb      	strb	r3, [r7, #7]
 80017ac:	4613      	mov	r3, r2
 80017ae:	71bb      	strb	r3, [r7, #6]

  if (response != MBUS_RESPONSE_OK) {
 80017b0:	79bb      	ldrb	r3, [r7, #6]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d008      	beq.n	80017c8 <mbus_response+0x28>
    return mbus_send_error(mb_context, response);
 80017b6:	79ba      	ldrb	r2, [r7, #6]
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	4611      	mov	r1, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 fbba 	bl	8001f38 <mbus_send_error>
 80017c4:	4603      	mov	r3, r0
 80017c6:	e001      	b.n	80017cc <mbus_response+0x2c>
  } else {
  }
  return MBUS_ERROR;
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <mbus_poll_response>:
uint16_t mbus_error(Modbus_ResponseType error) {
    g_userError = error;
    return 0;
}

inline mbus_status_t mbus_poll_response(mbus_t mb_context) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08c      	sub	sp, #48	; 0x30
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  stmbCallBackFunc func = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	2294      	movs	r2, #148	; 0x94
 80017e8:	fb02 f303 	mul.w	r3, r2, r3
 80017ec:	4a93      	ldr	r2, [pc, #588]	; (8001a3c <mbus_poll_response+0x268>)
 80017ee:	4413      	add	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
  int read = 1, la;
 80017f2:	2301      	movs	r3, #1
 80017f4:	60fb      	str	r3, [r7, #12]
  uint16_t d;

  if (ctx->header.func == 0x04) {
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d101      	bne.n	8001804 <mbus_poll_response+0x30>
    la = 10;
 8001800:	230a      	movs	r3, #10
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
  }

#if STMODBUS_COUNT_FUNC > 0
  for (int i = 0; i < STMODBUS_COUNT_FUNC; i++) {
 8001804:	2300      	movs	r3, #0
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
 8001808:	e014      	b.n	8001834 <mbus_poll_response+0x60>
    if ((ctx->func[i].code == ctx->response.func)) {
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180e:	3206      	adds	r2, #6
 8001810:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800181a:	429a      	cmp	r2, r3
 800181c:	d107      	bne.n	800182e <mbus_poll_response+0x5a>
      func = ctx->func[i].func;
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	3306      	adds	r3, #6
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	4413      	add	r3, r2
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800182c:	e005      	b.n	800183a <mbus_poll_response+0x66>
  for (int i = 0; i < STMODBUS_COUNT_FUNC; i++) {
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	3301      	adds	r3, #1
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	2b09      	cmp	r3, #9
 8001838:	dde7      	ble.n	800180a <mbus_poll_response+0x36>
    }
  }
#endif
  switch (ctx->header.func) {
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001840:	2b0f      	cmp	r3, #15
 8001842:	d006      	beq.n	8001852 <mbus_poll_response+0x7e>
 8001844:	2b0f      	cmp	r3, #15
 8001846:	dc52      	bgt.n	80018ee <mbus_poll_response+0x11a>
 8001848:	2b01      	cmp	r3, #1
 800184a:	d002      	beq.n	8001852 <mbus_poll_response+0x7e>
 800184c:	2b02      	cmp	r3, #2
 800184e:	d027      	beq.n	80018a0 <mbus_poll_response+0xcc>
    if ((ctx->header.addr + ctx->header.num) > ctx->conf.discrete) {
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
    }
    break;
  default:
    break;
 8001850:	e04d      	b.n	80018ee <mbus_poll_response+0x11a>
    if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0)) {
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <mbus_poll_response+0x94>
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001862:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001866:	d907      	bls.n	8001878 <mbus_poll_response+0xa4>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	2103      	movs	r1, #3
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ff96 	bl	80017a0 <mbus_response>
 8001874:	4603      	mov	r3, r0
 8001876:	e173      	b.n	8001b60 <mbus_poll_response+0x38c>
    if ((ctx->header.addr + ctx->header.num) >= ctx->conf.coils) {
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800187e:	461a      	mov	r2, r3
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001886:	4413      	add	r3, r2
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	8852      	ldrh	r2, [r2, #2]
 800188c:	4293      	cmp	r3, r2
 800188e:	db30      	blt.n	80018f2 <mbus_poll_response+0x11e>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	2102      	movs	r1, #2
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ff82 	bl	80017a0 <mbus_response>
 800189c:	4603      	mov	r3, r0
 800189e:	e15f      	b.n	8001b60 <mbus_poll_response+0x38c>
    if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0)) {
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <mbus_poll_response+0xe2>
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80018b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018b4:	d907      	bls.n	80018c6 <mbus_poll_response+0xf2>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	2103      	movs	r1, #3
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff6f 	bl	80017a0 <mbus_response>
 80018c2:	4603      	mov	r3, r0
 80018c4:	e14c      	b.n	8001b60 <mbus_poll_response+0x38c>
    if ((ctx->header.addr + ctx->header.num) > ctx->conf.discrete) {
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80018cc:	461a      	mov	r2, r3
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80018d4:	4413      	add	r3, r2
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	8892      	ldrh	r2, [r2, #4]
 80018da:	4293      	cmp	r3, r2
 80018dc:	dd0b      	ble.n	80018f6 <mbus_poll_response+0x122>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	2102      	movs	r1, #2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff5b 	bl	80017a0 <mbus_response>
 80018ea:	4603      	mov	r3, r0
 80018ec:	e138      	b.n	8001b60 <mbus_poll_response+0x38c>
    break;
 80018ee:	bf00      	nop
 80018f0:	e002      	b.n	80018f8 <mbus_poll_response+0x124>
    break;
 80018f2:	bf00      	nop
 80018f4:	e000      	b.n	80018f8 <mbus_poll_response+0x124>
    break;
 80018f6:	bf00      	nop
  }

  if (func != 0) {
 80018f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d006      	beq.n	800190c <mbus_poll_response+0x138>
    return func(mb_context);
 80018fe:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001904:	4610      	mov	r0, r2
 8001906:	4798      	blx	r3
 8001908:	4603      	mov	r3, r0
 800190a:	e129      	b.n	8001b60 <mbus_poll_response+0x38c>
  }

  la = mbus_proto_address((Modbus_ConnectFuncType)ctx->header.func, (int*)&read);
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001912:	f107 020c 	add.w	r2, r7, #12
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f000 fb9b 	bl	8002054 <mbus_proto_address>
 800191e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (la > 0) {
 8001920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001922:	2b00      	cmp	r3, #0
 8001924:	dd06      	ble.n	8001934 <mbus_poll_response+0x160>
    la += ctx->header.addr;
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800192c:	461a      	mov	r2, r3
 800192e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001930:	4413      	add	r3, r2
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  if (la < 50001) {
 8001934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001936:	f24c 3250 	movw	r2, #50000	; 0xc350
 800193a:	4293      	cmp	r3, r2
 800193c:	f300 8109 	bgt.w	8001b52 <mbus_poll_response+0x37e>
    ctx->conf.sendbuf[0] = ctx->header.devaddr;
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800194a:	701a      	strb	r2, [r3, #0]
    ctx->conf.sendbuf[1] = ctx->header.func;
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	3301      	adds	r3, #1
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 8001958:	701a      	strb	r2, [r3, #0]
    ctx->conf.sendbuf[2] = ctx->header.num * 2;
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001960:	b2da      	uxtb	r2, r3
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	3302      	adds	r3, #2
 8001968:	0052      	lsls	r2, r2, #1
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	701a      	strb	r2, [r3, #0]
    if (read && ctx->conf.read) {
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d04d      	beq.n	8001a10 <mbus_poll_response+0x23c>
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d049      	beq.n	8001a10 <mbus_poll_response+0x23c>
      g_userError = MBUS_RESPONSE_OK;
 800197c:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <mbus_poll_response+0x26c>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ctx->header.num; i++) {
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
 8001986:	e01f      	b.n	80019c8 <mbus_poll_response+0x1f4>
        
        d = ctx->conf.read(la + i);
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800198e:	6a3a      	ldr	r2, [r7, #32]
 8001990:	440a      	add	r2, r1
 8001992:	4610      	mov	r0, r2
 8001994:	4798      	blx	r3
 8001996:	4603      	mov	r3, r0
 8001998:	82fb      	strh	r3, [r7, #22]
        ctx->conf.sendbuf[3 + (i << 1)] = d >> 8;
 800199a:	8afb      	ldrh	r3, [r7, #22]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	b299      	uxth	r1, r3
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	6a3a      	ldr	r2, [r7, #32]
 80019a6:	0052      	lsls	r2, r2, #1
 80019a8:	3203      	adds	r2, #3
 80019aa:	4413      	add	r3, r2
 80019ac:	b2ca      	uxtb	r2, r1
 80019ae:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[3 + (i << 1) + 1] = d & 0xFF;
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	699a      	ldr	r2, [r3, #24]
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	3304      	adds	r3, #4
 80019ba:	4413      	add	r3, r2
 80019bc:	8afa      	ldrh	r2, [r7, #22]
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ctx->header.num; i++) {
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	3301      	adds	r3, #1
 80019c6:	623b      	str	r3, [r7, #32]
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80019ce:	461a      	mov	r2, r3
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	4293      	cmp	r3, r2
 80019d4:	dbd8      	blt.n	8001988 <mbus_poll_response+0x1b4>
      }
      if (g_userError == MBUS_RESPONSE_OK) {
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <mbus_poll_response+0x26c>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10e      	bne.n	80019fc <mbus_poll_response+0x228>
          return mbus_send_data(mb_context, 3 + ctx->conf.sendbuf[2]);
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	3302      	adds	r3, #2
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	3303      	adds	r3, #3
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	4611      	mov	r1, r2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 faca 	bl	8001f8c <mbus_send_data>
 80019f8:	4603      	mov	r3, r0
 80019fa:	e0b1      	b.n	8001b60 <mbus_poll_response+0x38c>
      }else {
          return mbus_response(mb_context, g_userError);
 80019fc:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <mbus_poll_response+0x26c>)
 80019fe:	781a      	ldrb	r2, [r3, #0]
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff feca 	bl	80017a0 <mbus_response>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	e0a7      	b.n	8001b60 <mbus_poll_response+0x38c>
      }
    } else if (ctx->conf.write) {
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 809c 	beq.w	8001b52 <mbus_poll_response+0x37e>
      uint16_t *value;
      ctx->conf.sendbuf[2] = 0;
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	3302      	adds	r3, #2
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
      switch (ctx->header.func) {
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	dc02      	bgt.n	8001a34 <mbus_poll_response+0x260>
 8001a2e:	2b05      	cmp	r3, #5
 8001a30:	da08      	bge.n	8001a44 <mbus_poll_response+0x270>
 8001a32:	e08e      	b.n	8001b52 <mbus_poll_response+0x37e>
 8001a34:	2b10      	cmp	r3, #16
 8001a36:	d037      	beq.n	8001aa8 <mbus_poll_response+0x2d4>
 8001a38:	e08b      	b.n	8001b52 <mbus_poll_response+0x37e>
 8001a3a:	bf00      	nop
 8001a3c:	2000071c 	.word	0x2000071c
 8001a40:	200007b0 	.word	0x200007b0
      case MBUS_FUNC_WRITE_REG:
      case MBUS_FUNC_WRITE_COIL:
        // in both these cases, we should return the same packet that we
        // received. in both cases, the packes have 6 bytes of data + 2 CRC
        // bytes = 8 bytes
        value = (uint16_t *)ctx->conf.recvbuf;
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	613b      	str	r3, [r7, #16]
        ctx->conf.write(la, *value);
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	8812      	ldrh	r2, [r2, #0]
 8001a54:	4611      	mov	r1, r2
 8001a56:	4798      	blx	r3
        ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001a5e:	0a1b      	lsrs	r3, r3, #8
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	3302      	adds	r3, #2
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	3303      	adds	r3, #3
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[4] = ctx->conf.recvbuf[1];
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	6a1a      	ldr	r2, [r3, #32]
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	3304      	adds	r3, #4
 8001a86:	7852      	ldrb	r2, [r2, #1]
 8001a88:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[5] = ctx->conf.recvbuf[0];
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	6a1a      	ldr	r2, [r3, #32]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	3305      	adds	r3, #5
 8001a94:	7812      	ldrb	r2, [r2, #0]
 8001a96:	701a      	strb	r2, [r3, #0]
        return mbus_send_data(mb_context, 6);
 8001a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9c:	2106      	movs	r1, #6
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 fa74 	bl	8001f8c <mbus_send_data>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	e05b      	b.n	8001b60 <mbus_poll_response+0x38c>

      case MBUS_FUNC_WRITE_REGS:
    	  for (int i = 0; i < ctx->header.num; i++) {
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
 8001aac:	e01e      	b.n	8001aec <mbus_poll_response+0x318>
    		  uint16_t regvalue = ((uint16_t)ctx->conf.recvbuf[i*2]<<8)|((uint16_t)ctx->conf.recvbuf[i*2+1]);
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	69fa      	ldr	r2, [r7, #28]
 8001ab4:	0052      	lsls	r2, r2, #1
 8001ab6:	4413      	add	r3, r2
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	b21a      	sxth	r2, r3
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	6a19      	ldr	r1, [r3, #32]
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	440b      	add	r3, r1
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b21b      	sxth	r3, r3
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	b21b      	sxth	r3, r3
 8001ad2:	82bb      	strh	r3, [r7, #20]
    		  ctx->conf.write(la + i, regvalue);
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	440a      	add	r2, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	8aba      	ldrh	r2, [r7, #20]
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4798      	blx	r3
    	  for (int i = 0; i < ctx->header.num; i++) {
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001af2:	461a      	mov	r2, r3
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	4293      	cmp	r3, r2
 8001af8:	dbd9      	blt.n	8001aae <mbus_poll_response+0x2da>
    	  }
    	  ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	3302      	adds	r3, #2
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	701a      	strb	r2, [r3, #0]
    	  ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	3303      	adds	r3, #3
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]
    	  ctx->conf.sendbuf[4] = ctx->header.num >> 8;
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]
    	  ctx->conf.sendbuf[5] = ctx->header.num & 0xFF;
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	3305      	adds	r3, #5
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	701a      	strb	r2, [r3, #0]
    	  return mbus_send_data(mb_context, 6);
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	2106      	movs	r1, #6
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fa1f 	bl	8001f8c <mbus_send_data>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	e006      	b.n	8001b60 <mbus_poll_response+0x38c>
      } // end of switch
    }
  }
  return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_FUNCTION);
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	2101      	movs	r1, #1
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fe21 	bl	80017a0 <mbus_response>
 8001b5e:	4603      	mov	r3, r0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3730      	adds	r7, #48	; 0x30
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <mbus_poll>:
/*
 * function mbus_close()
 * close modbus context
 * return: none
 */
mbus_status_t mbus_poll(mbus_t mb_context, uint8_t byte) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460a      	mov	r2, r1
 8001b72:	71fb      	strb	r3, [r7, #7]
 8001b74:	4613      	mov	r3, r2
 8001b76:	71bb      	strb	r3, [r7, #6]
  // State machine
  _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	2294      	movs	r2, #148	; 0x94
 8001b7e:	fb02 f303 	mul.w	r3, r2, r3
 8001b82:	4abf      	ldr	r2, [pc, #764]	; (8001e80 <mbus_poll+0x318>)
 8001b84:	4413      	add	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]

  if (mbus_tickcount() - ctx->timer > 4) {
 8001b88:	f000 faee 	bl	8002168 <mbus_tickcount>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d904      	bls.n	8001ba2 <mbus_poll+0x3a>
    mbus_flush(mb_context);
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fddb 	bl	8001758 <mbus_flush>
  }
  ctx->timer = mbus_tickcount();
 8001ba2:	f000 fae1 	bl	8002168 <mbus_tickcount>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	62da      	str	r2, [r3, #44]	; 0x2c

  switch (ctx->state) {
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001bb2:	2b0e      	cmp	r3, #14
 8001bb4:	f200 816e 	bhi.w	8001e94 <mbus_poll+0x32c>
 8001bb8:	a201      	add	r2, pc, #4	; (adr r2, 8001bc0 <mbus_poll+0x58>)
 8001bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbe:	bf00      	nop
 8001bc0:	08001bfd 	.word	0x08001bfd
 8001bc4:	08001e95 	.word	0x08001e95
 8001bc8:	08001c19 	.word	0x08001c19
 8001bcc:	08001cff 	.word	0x08001cff
 8001bd0:	08001ce7 	.word	0x08001ce7
 8001bd4:	08001e1d 	.word	0x08001e1d
 8001bd8:	08001e05 	.word	0x08001e05
 8001bdc:	08001d63 	.word	0x08001d63
 8001be0:	08001d3b 	.word	0x08001d3b
 8001be4:	08001dad 	.word	0x08001dad
 8001be8:	08001dc7 	.word	0x08001dc7
 8001bec:	08001e75 	.word	0x08001e75
 8001bf0:	08001e85 	.word	0x08001e85
 8001bf4:	08001e95 	.word	0x08001e95
 8001bf8:	08001e8f 	.word	0x08001e8f
  case MBUS_STATE_IDLE:
    mbus_flush(mb_context);
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fda9 	bl	8001758 <mbus_flush>
    ctx->state = MBUS_STATE_FUNCTION;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2202      	movs	r2, #2
 8001c0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.devaddr = byte;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	79ba      	ldrb	r2, [r7, #6]
 8001c12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    break;
 8001c16:	e146      	b.n	8001ea6 <mbus_poll+0x33e>
  case MBUS_STATE_FUNCTION:
    ctx->header.func = byte;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	79ba      	ldrb	r2, [r7, #6]
 8001c1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    switch (byte) {
 8001c20:	79bb      	ldrb	r3, [r7, #6]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d857      	bhi.n	8001cd8 <mbus_poll+0x170>
 8001c28:	a201      	add	r2, pc, #4	; (adr r2, 8001c30 <mbus_poll+0xc8>)
 8001c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2e:	bf00      	nop
 8001c30:	08001ca5 	.word	0x08001ca5
 8001c34:	08001cd9 	.word	0x08001cd9
 8001c38:	08001ca5 	.word	0x08001ca5
 8001c3c:	08001ca5 	.word	0x08001ca5
 8001c40:	08001cbf 	.word	0x08001cbf
 8001c44:	08001c71 	.word	0x08001c71
 8001c48:	08001cd9 	.word	0x08001cd9
 8001c4c:	08001cd9 	.word	0x08001cd9
 8001c50:	08001cd9 	.word	0x08001cd9
 8001c54:	08001cd9 	.word	0x08001cd9
 8001c58:	08001cd9 	.word	0x08001cd9
 8001c5c:	08001cd9 	.word	0x08001cd9
 8001c60:	08001cd9 	.word	0x08001cd9
 8001c64:	08001cd9 	.word	0x08001cd9
 8001c68:	08001c8b 	.word	0x08001c8b
 8001c6c:	08001c8b 	.word	0x08001c8b
    case MBUS_FUNC_WRITE_REG:
      ctx->header.rnum = 1;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->header.num = 1;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      ctx->state = MBUS_STATE_REGADDR_HI;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2204      	movs	r2, #4
 8001c84:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      break;
 8001c88:	e02c      	b.n	8001ce4 <mbus_poll+0x17c>
    case MBUS_FUNC_WRITE_REGS:
    case MBUS_FUNC_WRITE_COILS:
      ctx->header.rnum = 1;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->header.num = 0;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      ctx->state = MBUS_STATE_REGADDR_HI;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      break;
 8001ca2:	e01f      	b.n	8001ce4 <mbus_poll+0x17c>
    case MBUS_FUNC_READ_INPUT_REGS:
    case MBUS_FUNC_READ_COILS:
    case MBUS_FUNC_READ_REGS:
      ctx->state = MBUS_STATE_REGADDR_HI;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      ctx->header.rnum = 0;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->header.num = 0;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      break;
 8001cbc:	e012      	b.n	8001ce4 <mbus_poll+0x17c>
    case MBUS_FUNC_WRITE_COIL:
      ctx->header.rnum = 1;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->header.num = 1;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      ctx->state = MBUS_STATE_REGADDR_HI;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      break;
 8001cd6:	e005      	b.n	8001ce4 <mbus_poll+0x17c>
    default:
      // ctx->state = MBUS_STATE_IDLE;
      mbus_flush(mb_context);
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fd3b 	bl	8001758 <mbus_flush>
      break;
 8001ce2:	bf00      	nop
    }
    break;
 8001ce4:	e0df      	b.n	8001ea6 <mbus_poll+0x33e>
  case MBUS_STATE_REGADDR_HI:
    ctx->state = MBUS_STATE_REGADDR_LO;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2203      	movs	r2, #3
 8001cea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.addr = byte << 8;
 8001cee:	79bb      	ldrb	r3, [r7, #6]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    break;
 8001cfc:	e0d3      	b.n	8001ea6 <mbus_poll+0x33e>
  case MBUS_STATE_REGADDR_LO:
    ctx->header.addr |= byte;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8001d04:	79bb      	ldrb	r3, [r7, #6]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    if (ctx->header.num == 1 && ctx->header.rnum == 1) {
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d109      	bne.n	8001d30 <mbus_poll+0x1c8>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d104      	bne.n	8001d30 <mbus_poll+0x1c8>
      ctx->state = MBUS_STATE_DATA_HI;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2208      	movs	r2, #8
 8001d2a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    } else {
      ctx->state = MBUS_STATE_REGNUM_HI;
    }
    break;
 8001d2e:	e0ba      	b.n	8001ea6 <mbus_poll+0x33e>
      ctx->state = MBUS_STATE_REGNUM_HI;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2206      	movs	r2, #6
 8001d34:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8001d38:	e0b5      	b.n	8001ea6 <mbus_poll+0x33e>
  case MBUS_STATE_DATA_HI:
    ctx->state = MBUS_STATE_DATA_LO;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum) + 1] = byte;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6a1a      	ldr	r2, [r3, #32]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001d54:	1acb      	subs	r3, r1, r3
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	3301      	adds	r3, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	79ba      	ldrb	r2, [r7, #6]
 8001d5e:	701a      	strb	r2, [r3, #0]
    break;
 8001d60:	e0a1      	b.n	8001ea6 <mbus_poll+0x33e>
  case MBUS_STATE_DATA_LO:
    ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum)] = byte;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	f8b2 2086 	ldrh.w	r2, [r2, #134]	; 0x86
 8001d74:	1a8a      	subs	r2, r1, r2
 8001d76:	0052      	lsls	r2, r2, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	79ba      	ldrb	r2, [r7, #6]
 8001d7c:	701a      	strb	r2, [r3, #0]
    ctx->header.rnum--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    if (ctx->header.rnum == 0) {
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d104      	bne.n	8001da2 <mbus_poll+0x23a>
      ctx->state = MBUS_STATE_CRC_LO;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	220b      	movs	r2, #11
 8001d9c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    } else {
      ctx->state = MBUS_STATE_DATA_HI;
    }
    break;
 8001da0:	e081      	b.n	8001ea6 <mbus_poll+0x33e>
      ctx->state = MBUS_STATE_DATA_HI;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2208      	movs	r2, #8
 8001da6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8001daa:	e07c      	b.n	8001ea6 <mbus_poll+0x33e>
  case MBUS_STATE_DATA_SIZE:
    ctx->state = MBUS_STATE_DATA;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	220a      	movs	r2, #10
 8001db0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.size = byte;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	79ba      	ldrb	r2, [r7, #6]
 8001db8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    ctx->header.rsize = byte;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	79ba      	ldrb	r2, [r7, #6]
 8001dc0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    break;
 8001dc4:	e06f      	b.n	8001ea6 <mbus_poll+0x33e>
  case MBUS_STATE_DATA:
    ctx->conf.recvbuf[ctx->header.size - ctx->header.rsize] = byte;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	f892 2088 	ldrb.w	r2, [r2, #136]	; 0x88
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	f892 2089 	ldrb.w	r2, [r2, #137]	; 0x89
 8001dd8:	1a8a      	subs	r2, r1, r2
 8001dda:	4413      	add	r3, r2
 8001ddc:	79ba      	ldrb	r2, [r7, #6]
 8001dde:	701a      	strb	r2, [r3, #0]
    ctx->header.rsize--;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    if (ctx->header.rsize == 0) {
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d152      	bne.n	8001ea0 <mbus_poll+0x338>
      ctx->state = MBUS_STATE_CRC_LO;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	220b      	movs	r2, #11
 8001dfe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }
    break;
 8001e02:	e04d      	b.n	8001ea0 <mbus_poll+0x338>
  case MBUS_STATE_REGNUM_HI:
    ctx->state = MBUS_STATE_REGNUM_LO;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2205      	movs	r2, #5
 8001e08:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.num = byte << 8;
 8001e0c:	79bb      	ldrb	r3, [r7, #6]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    break;
 8001e1a:	e044      	b.n	8001ea6 <mbus_poll+0x33e>
  case MBUS_STATE_REGNUM_LO:
    ctx->state = MBUS_STATE_CRC_LO;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	220b      	movs	r2, #11
 8001e20:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.num |= byte;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8001e2a:	79bb      	ldrb	r3, [r7, #6]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    if (ctx->header.rnum == 0) {
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d104      	bne.n	8001e4c <mbus_poll+0x2e4>
      ctx->state = MBUS_STATE_CRC_LO;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	220b      	movs	r2, #11
 8001e46:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      if (ctx->header.func == MBUS_FUNC_WRITE_REGS) {
        ctx->state = MBUS_STATE_DATA_SIZE;
      }
    }

    break;
 8001e4a:	e02b      	b.n	8001ea4 <mbus_poll+0x33c>
      ctx->header.rnum = ctx->header.num;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->state = MBUS_STATE_DATA_HI;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2208      	movs	r2, #8
 8001e5c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      if (ctx->header.func == MBUS_FUNC_WRITE_REGS) {
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001e66:	2b10      	cmp	r3, #16
 8001e68:	d11c      	bne.n	8001ea4 <mbus_poll+0x33c>
        ctx->state = MBUS_STATE_DATA_SIZE;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2209      	movs	r2, #9
 8001e6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8001e72:	e017      	b.n	8001ea4 <mbus_poll+0x33c>
  case MBUS_STATE_CRC_LO:
    ctx->state = MBUS_STATE_CRC_HI;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	220c      	movs	r2, #12
 8001e78:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8001e7c:	e013      	b.n	8001ea6 <mbus_poll+0x33e>
 8001e7e:	bf00      	nop
 8001e80:	2000071c 	.word	0x2000071c
  case MBUS_STATE_CRC_HI:
    ctx->state = MBUS_STATE_FINISH;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	220d      	movs	r2, #13
 8001e88:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8001e8c:	e00b      	b.n	8001ea6 <mbus_poll+0x33e>
  // We can't processing any more before callback not returned
  case MBUS_STATE_RESPONSE:
    return MBUS_ERROR;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e92:	e04c      	b.n	8001f2e <mbus_poll+0x3c6>
  default:
    mbus_flush(mb_context);
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fc5d 	bl	8001758 <mbus_flush>
    break;
 8001e9e:	e002      	b.n	8001ea6 <mbus_poll+0x33e>
    break;
 8001ea0:	bf00      	nop
 8001ea2:	e000      	b.n	8001ea6 <mbus_poll+0x33e>
    break;
 8001ea4:	bf00      	nop
  }

  ctx->crc16 = mbus_crc16(ctx->crc16, byte);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eaa:	79ba      	ldrb	r2, [r7, #6]
 8001eac:	4611      	mov	r1, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 f92e 	bl	8002110 <mbus_crc16>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (ctx->state == MBUS_STATE_FINISH) {
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001ec2:	2b0d      	cmp	r3, #13
 8001ec4:	d132      	bne.n	8001f2c <mbus_poll+0x3c4>
    // CRC error
    if (ctx->crc16 != 0) {
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <mbus_poll+0x376>
      mbus_flush(mb_context);
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fc40 	bl	8001758 <mbus_flush>
      return MBUS_ERROR;
 8001ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8001edc:	e027      	b.n	8001f2e <mbus_poll+0x3c6>
    }

    // TODO: Add broadcast messages
    if (ctx->header.devaddr == ctx->conf.devaddr) {
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d11a      	bne.n	8001f22 <mbus_poll+0x3ba>
      ctx->state = MBUS_STATE_RESPONSE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	220e      	movs	r2, #14
 8001ef0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      if (mbus_poll_response(mb_context) == MBUS_OK) {
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff fc6b 	bl	80017d4 <mbus_poll_response>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d106      	bne.n	8001f12 <mbus_poll+0x3aa>
        mbus_flush(mb_context);
 8001f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fc25 	bl	8001758 <mbus_flush>
        return MBUS_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e00d      	b.n	8001f2e <mbus_poll+0x3c6>
      }
      mbus_flush(mb_context);
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fc1e 	bl	8001758 <mbus_flush>
      return MBUS_ERROR;
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f20:	e005      	b.n	8001f2e <mbus_poll+0x3c6>
    }
    mbus_flush(mb_context);
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fc16 	bl	8001758 <mbus_flush>
  }
  return MBUS_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop

08001f38 <mbus_send_error>:
  if (g_mbusContext[mb_context].open)
    return (mbus_context_t)&g_mbusContext[mb_context];
  return 0;
}

mbus_status_t mbus_send_error(mbus_t mb_context, Modbus_ResponseType response) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	460a      	mov	r2, r1
 8001f42:	71fb      	strb	r3, [r7, #7]
 8001f44:	4613      	mov	r3, r2
 8001f46:	71bb      	strb	r3, [r7, #6]
  uint16_t *pbuf = (uint16_t *)(g_mbusContext[mb_context].conf.sendbuf + 2);
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	4a0d      	ldr	r2, [pc, #52]	; (8001f84 <mbus_send_error+0x4c>)
 8001f4e:	2194      	movs	r1, #148	; 0x94
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	4413      	add	r3, r2
 8001f56:	3318      	adds	r3, #24
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	60fb      	str	r3, [r7, #12]
  *pbuf = 0x8300 | (uint8_t)response;
 8001f5e:	79bb      	ldrb	r3, [r7, #6]
 8001f60:	b21a      	sxth	r2, r3
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <mbus_send_error+0x50>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	b21b      	sxth	r3, r3
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	801a      	strh	r2, [r3, #0]
  return mbus_send_data(mb_context, 4);
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	2104      	movs	r1, #4
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 f809 	bl	8001f8c <mbus_send_data>
 8001f7a:	4603      	mov	r3, r0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	2000071c 	.word	0x2000071c
 8001f88:	ffff8300 	.word	0xffff8300

08001f8c <mbus_send_data>:

mbus_status_t mbus_send_data(mbus_t mb_context, uint16_t size) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	460a      	mov	r2, r1
 8001f96:	71fb      	strb	r3, [r7, #7]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	80bb      	strh	r3, [r7, #4]
  // if size > ( conf.send_sz-2) error
  uint16_t crc32 = 0xFFFF;
 8001f9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fa0:	82fb      	strh	r3, [r7, #22]
  const _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	2294      	movs	r2, #148	; 0x94
 8001fa8:	fb02 f303 	mul.w	r3, r2, r3
 8001fac:	4a28      	ldr	r2, [pc, #160]	; (8002050 <mbus_send_data+0xc4>)
 8001fae:	4413      	add	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
  uint8_t *pbuf = ctx->conf.sendbuf;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	60bb      	str	r3, [r7, #8]
  if (ctx->conf.send == 0 || pbuf == 0 || ctx->conf.sendbuf_sz < (size + 2))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <mbus_send_data+0x46>
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <mbus_send_data+0x46>
 8001fc6:	88bb      	ldrh	r3, [r7, #4]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	8b92      	ldrh	r2, [r2, #28]
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	db02      	blt.n	8001fd8 <mbus_send_data+0x4c>
    return MBUS_ERROR;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	e037      	b.n	8002048 <mbus_send_data+0xbc>
  for (int i = 0; i < size; i++) {
 8001fd8:	2300      	movs	r3, #0
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	e00d      	b.n	8001ffa <mbus_send_data+0x6e>
    crc32 = mbus_crc16(crc32, pbuf[i]);
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	781a      	ldrb	r2, [r3, #0]
 8001fe6:	8afb      	ldrh	r3, [r7, #22]
 8001fe8:	4611      	mov	r1, r2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 f890 	bl	8002110 <mbus_crc16>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	82fb      	strh	r3, [r7, #22]
  for (int i = 0; i < size; i++) {
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	88bb      	ldrh	r3, [r7, #4]
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	dbed      	blt.n	8001fde <mbus_send_data+0x52>
  }
  pbuf[size++] = crc32 & 0xFF;
 8002002:	88bb      	ldrh	r3, [r7, #4]
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	80ba      	strh	r2, [r7, #4]
 8002008:	461a      	mov	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	4413      	add	r3, r2
 800200e:	8afa      	ldrh	r2, [r7, #22]
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	701a      	strb	r2, [r3, #0]
  pbuf[size++] = (crc32 >> 8);
 8002014:	8afb      	ldrh	r3, [r7, #22]
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	b29a      	uxth	r2, r3
 800201a:	88bb      	ldrh	r3, [r7, #4]
 800201c:	1c59      	adds	r1, r3, #1
 800201e:	80b9      	strh	r1, [r7, #4]
 8002020:	4619      	mov	r1, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	440b      	add	r3, r1
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	701a      	strb	r2, [r3, #0]

  if (ctx->conf.send(mb_context, pbuf, size) != size)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	88ba      	ldrh	r2, [r7, #4]
 8002030:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	4798      	blx	r3
 8002038:	4602      	mov	r2, r0
 800203a:	88bb      	ldrh	r3, [r7, #4]
 800203c:	429a      	cmp	r2, r3
 800203e:	d002      	beq.n	8002046 <mbus_send_data+0xba>
    return MBUS_ERROR;
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
 8002044:	e000      	b.n	8002048 <mbus_send_data+0xbc>
  return MBUS_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	2000071c 	.word	0x2000071c

08002054 <mbus_proto_address>:
  }
#endif
  return MBUS_ERROR;
}

int mbus_proto_address( Modbus_ConnectFuncType func, int *r) {
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	6039      	str	r1, [r7, #0]
 800205e:	71fb      	strb	r3, [r7, #7]
  int adr = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	60fb      	str	r3, [r7, #12]
  *r = 1;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]
  switch (func) {
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	3b01      	subs	r3, #1
 800206e:	2b16      	cmp	r3, #22
 8002070:	d845      	bhi.n	80020fe <mbus_proto_address+0xaa>
 8002072:	a201      	add	r2, pc, #4	; (adr r2, 8002078 <mbus_proto_address+0x24>)
 8002074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002078:	080020f9 	.word	0x080020f9
 800207c:	080020eb 	.word	0x080020eb
 8002080:	080020db 	.word	0x080020db
 8002084:	080020e3 	.word	0x080020e3
 8002088:	080020f3 	.word	0x080020f3
 800208c:	080020d5 	.word	0x080020d5
 8002090:	080020ff 	.word	0x080020ff
 8002094:	080020ff 	.word	0x080020ff
 8002098:	080020ff 	.word	0x080020ff
 800209c:	080020ff 	.word	0x080020ff
 80020a0:	080020ff 	.word	0x080020ff
 80020a4:	080020ff 	.word	0x080020ff
 80020a8:	080020ff 	.word	0x080020ff
 80020ac:	080020ff 	.word	0x080020ff
 80020b0:	080020f3 	.word	0x080020f3
 80020b4:	080020d5 	.word	0x080020d5
 80020b8:	080020ff 	.word	0x080020ff
 80020bc:	080020ff 	.word	0x080020ff
 80020c0:	080020ff 	.word	0x080020ff
 80020c4:	080020ff 	.word	0x080020ff
 80020c8:	080020ff 	.word	0x080020ff
 80020cc:	080020d5 	.word	0x080020d5
 80020d0:	080020d5 	.word	0x080020d5
  case MBUS_FUNC_WRITE_REG:
  case MBUS_FUNC_WRITE_REGS:
  case MBUS_FUNC_READ_WRITE_MASK_REGS:
  case MBUS_FUNC_READ_WRITE_REGS:
    *r = 0;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
  case MBUS_FUNC_READ_REGS:
    adr = 40001;
 80020da:	f649 4341 	movw	r3, #40001	; 0x9c41
 80020de:	60fb      	str	r3, [r7, #12]
    break;
 80020e0:	e00e      	b.n	8002100 <mbus_proto_address+0xac>
  case MBUS_FUNC_READ_INPUT_REGS:
    adr = 30001;
 80020e2:	f247 5331 	movw	r3, #30001	; 0x7531
 80020e6:	60fb      	str	r3, [r7, #12]
    break;
 80020e8:	e00a      	b.n	8002100 <mbus_proto_address+0xac>
  case MBUS_FUNC_READ_DISCRETE:
    adr = 10001;
 80020ea:	f242 7311 	movw	r3, #10001	; 0x2711
 80020ee:	60fb      	str	r3, [r7, #12]
    break;
 80020f0:	e006      	b.n	8002100 <mbus_proto_address+0xac>
  case MBUS_FUNC_WRITE_COILS:
  case MBUS_FUNC_WRITE_COIL:
    *r = 0;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
  case MBUS_FUNC_READ_COILS:
    adr = 0001;
 80020f8:	2301      	movs	r3, #1
 80020fa:	60fb      	str	r3, [r7, #12]
    break;
 80020fc:	e000      	b.n	8002100 <mbus_proto_address+0xac>
  default:
    break;
 80020fe:	bf00      	nop
  }
  return adr;
 8002100:	68fb      	ldr	r3, [r7, #12]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop

08002110 <mbus_crc16>:
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}

*/

uint16_t mbus_crc16(uint16_t crc16, uint8_t byte) {
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	460a      	mov	r2, r1
 800211a:	80fb      	strh	r3, [r7, #6]
 800211c:	4613      	mov	r3, r2
 800211e:	717b      	strb	r3, [r7, #5]
  const int index = (crc16 & 0xFF) ^ byte;
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	797b      	ldrb	r3, [r7, #5]
 8002126:	4053      	eors	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
  return (aucCRCLo[index] << 8) | ((crc16 >> 8) ^ aucCRCHi[index]);
 800212a:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <mbus_crc16+0x50>)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4413      	add	r3, r2
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	b21a      	sxth	r2, r3
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	0a1b      	lsrs	r3, r3, #8
 800213a:	b299      	uxth	r1, r3
 800213c:	4809      	ldr	r0, [pc, #36]	; (8002164 <mbus_crc16+0x54>)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4403      	add	r3, r0
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	b29b      	uxth	r3, r3
 8002146:	404b      	eors	r3, r1
 8002148:	b29b      	uxth	r3, r3
 800214a:	b21b      	sxth	r3, r3
 800214c:	4313      	orrs	r3, r2
 800214e:	b21b      	sxth	r3, r3
 8002150:	b29b      	uxth	r3, r3
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	08009384 	.word	0x08009384
 8002164:	08009284 	.word	0x08009284

08002168 <mbus_tickcount>:

uint32_t mbus_tickcount() { return 0; }
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
 800216c:	2300      	movs	r3, #0
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <HAL_Init+0x40>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <HAL_Init+0x40>)
 8002182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_Init+0x40>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <HAL_Init+0x40>)
 800218e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_Init+0x40>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <HAL_Init+0x40>)
 800219a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a0:	2003      	movs	r0, #3
 80021a2:	f000 fbb1 	bl	8002908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a6:	200f      	movs	r0, #15
 80021a8:	f000 f808 	bl	80021bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ac:	f7fe ff90 	bl	80010d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023c00 	.word	0x40023c00

080021bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_InitTick+0x54>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_InitTick+0x58>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	4619      	mov	r1, r3
 80021ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 fbd7 	bl	800298e <HAL_SYSTICK_Config>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00e      	b.n	8002208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b0f      	cmp	r3, #15
 80021ee:	d80a      	bhi.n	8002206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f0:	2200      	movs	r2, #0
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295
 80021f8:	f000 fb91 	bl	800291e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021fc:	4a06      	ldr	r2, [pc, #24]	; (8002218 <HAL_InitTick+0x5c>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e000      	b.n	8002208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	2000003c 	.word	0x2000003c
 8002214:	20000044 	.word	0x20000044
 8002218:	20000040 	.word	0x20000040

0800221c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_IncTick+0x20>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_IncTick+0x24>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4413      	add	r3, r2
 800222c:	4a04      	ldr	r2, [pc, #16]	; (8002240 <HAL_IncTick+0x24>)
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000044 	.word	0x20000044
 8002240:	200007b4 	.word	0x200007b4

08002244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return uwTick;
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <HAL_GetTick+0x14>)
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	200007b4 	.word	0x200007b4

0800225c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e033      	b.n	80022da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	2b00      	cmp	r3, #0
 8002278:	d109      	bne.n	800228e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe ff54 	bl	8001128 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b00      	cmp	r3, #0
 8002298:	d118      	bne.n	80022cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022a2:	f023 0302 	bic.w	r3, r3, #2
 80022a6:	f043 0202 	orr.w	r2, r3, #2
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f93a 	bl	8002528 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f023 0303 	bic.w	r3, r3, #3
 80022c2:	f043 0201 	orr.w	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
 80022ca:	e001      	b.n	80022d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x1c>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e105      	b.n	800250c <HAL_ADC_ConfigChannel+0x228>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b09      	cmp	r3, #9
 800230e:	d925      	bls.n	800235c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68d9      	ldr	r1, [r3, #12]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	4613      	mov	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4413      	add	r3, r2
 8002324:	3b1e      	subs	r3, #30
 8002326:	2207      	movs	r2, #7
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43da      	mvns	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	400a      	ands	r2, r1
 8002334:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68d9      	ldr	r1, [r3, #12]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	b29b      	uxth	r3, r3
 8002346:	4618      	mov	r0, r3
 8002348:	4603      	mov	r3, r0
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4403      	add	r3, r0
 800234e:	3b1e      	subs	r3, #30
 8002350:	409a      	lsls	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	e022      	b.n	80023a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6919      	ldr	r1, [r3, #16]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	2207      	movs	r2, #7
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	400a      	ands	r2, r1
 800237e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6919      	ldr	r1, [r3, #16]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	4618      	mov	r0, r3
 8002392:	4603      	mov	r3, r0
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4403      	add	r3, r0
 8002398:	409a      	lsls	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d824      	bhi.n	80023f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	3b05      	subs	r3, #5
 80023bc:	221f      	movs	r2, #31
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43da      	mvns	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	400a      	ands	r2, r1
 80023ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	4618      	mov	r0, r3
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	3b05      	subs	r3, #5
 80023e6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	635a      	str	r2, [r3, #52]	; 0x34
 80023f2:	e04c      	b.n	800248e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b0c      	cmp	r3, #12
 80023fa:	d824      	bhi.n	8002446 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	3b23      	subs	r3, #35	; 0x23
 800240e:	221f      	movs	r2, #31
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43da      	mvns	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	400a      	ands	r2, r1
 800241c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	b29b      	uxth	r3, r3
 800242a:	4618      	mov	r0, r3
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	3b23      	subs	r3, #35	; 0x23
 8002438:	fa00 f203 	lsl.w	r2, r0, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
 8002444:	e023      	b.n	800248e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	3b41      	subs	r3, #65	; 0x41
 8002458:	221f      	movs	r2, #31
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	400a      	ands	r2, r1
 8002466:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	4618      	mov	r0, r3
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	3b41      	subs	r3, #65	; 0x41
 8002482:	fa00 f203 	lsl.w	r2, r0, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800248e:	4b22      	ldr	r3, [pc, #136]	; (8002518 <HAL_ADC_ConfigChannel+0x234>)
 8002490:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a21      	ldr	r2, [pc, #132]	; (800251c <HAL_ADC_ConfigChannel+0x238>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d109      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x1cc>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b12      	cmp	r3, #18
 80024a2:	d105      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a19      	ldr	r2, [pc, #100]	; (800251c <HAL_ADC_ConfigChannel+0x238>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d123      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x21e>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b10      	cmp	r3, #16
 80024c0:	d003      	beq.n	80024ca <HAL_ADC_ConfigChannel+0x1e6>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b11      	cmp	r3, #17
 80024c8:	d11b      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b10      	cmp	r3, #16
 80024dc:	d111      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024de:	4b10      	ldr	r3, [pc, #64]	; (8002520 <HAL_ADC_ConfigChannel+0x23c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a10      	ldr	r2, [pc, #64]	; (8002524 <HAL_ADC_ConfigChannel+0x240>)
 80024e4:	fba2 2303 	umull	r2, r3, r2, r3
 80024e8:	0c9a      	lsrs	r2, r3, #18
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024f4:	e002      	b.n	80024fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f9      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	40012300 	.word	0x40012300
 800251c:	40012000 	.word	0x40012000
 8002520:	2000003c 	.word	0x2000003c
 8002524:	431bde83 	.word	0x431bde83

08002528 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002530:	4b79      	ldr	r3, [pc, #484]	; (8002718 <ADC_Init+0x1f0>)
 8002532:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	431a      	orrs	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800255c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6859      	ldr	r1, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	021a      	lsls	r2, r3, #8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002580:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6859      	ldr	r1, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6899      	ldr	r1, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ba:	4a58      	ldr	r2, [pc, #352]	; (800271c <ADC_Init+0x1f4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d022      	beq.n	8002606 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6899      	ldr	r1, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6899      	ldr	r1, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	e00f      	b.n	8002626 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002614:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002624:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0202 	bic.w	r2, r2, #2
 8002634:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6899      	ldr	r1, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7e1b      	ldrb	r3, [r3, #24]
 8002640:	005a      	lsls	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01b      	beq.n	800268c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002662:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002672:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6859      	ldr	r1, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	3b01      	subs	r3, #1
 8002680:	035a      	lsls	r2, r3, #13
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	e007      	b.n	800269c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800269a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	051a      	lsls	r2, r3, #20
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6899      	ldr	r1, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026de:	025a      	lsls	r2, r3, #9
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6899      	ldr	r1, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	029a      	lsls	r2, r3, #10
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	609a      	str	r2, [r3, #8]
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	40012300 	.word	0x40012300
 800271c:	0f000001 	.word	0x0f000001

08002720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800273c:	4013      	ands	r3, r2
 800273e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800274c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002752:	4a04      	ldr	r2, [pc, #16]	; (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	60d3      	str	r3, [r2, #12]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800276c:	4b04      	ldr	r3, [pc, #16]	; (8002780 <__NVIC_GetPriorityGrouping+0x18>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	f003 0307 	and.w	r3, r3, #7
}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	2b00      	cmp	r3, #0
 8002794:	db0b      	blt.n	80027ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	f003 021f 	and.w	r2, r3, #31
 800279c:	4907      	ldr	r1, [pc, #28]	; (80027bc <__NVIC_EnableIRQ+0x38>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	2001      	movs	r0, #1
 80027a6:	fa00 f202 	lsl.w	r2, r0, r2
 80027aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	e000e100 	.word	0xe000e100

080027c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	db12      	blt.n	80027f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	f003 021f 	and.w	r2, r3, #31
 80027d8:	490a      	ldr	r1, [pc, #40]	; (8002804 <__NVIC_DisableIRQ+0x44>)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	2001      	movs	r0, #1
 80027e2:	fa00 f202 	lsl.w	r2, r0, r2
 80027e6:	3320      	adds	r3, #32
 80027e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80027ec:	f3bf 8f4f 	dsb	sy
}
 80027f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027f2:	f3bf 8f6f 	isb	sy
}
 80027f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000e100 	.word	0xe000e100

08002808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	6039      	str	r1, [r7, #0]
 8002812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002818:	2b00      	cmp	r3, #0
 800281a:	db0a      	blt.n	8002832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	490c      	ldr	r1, [pc, #48]	; (8002854 <__NVIC_SetPriority+0x4c>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	0112      	lsls	r2, r2, #4
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	440b      	add	r3, r1
 800282c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002830:	e00a      	b.n	8002848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4908      	ldr	r1, [pc, #32]	; (8002858 <__NVIC_SetPriority+0x50>)
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	3b04      	subs	r3, #4
 8002840:	0112      	lsls	r2, r2, #4
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	440b      	add	r3, r1
 8002846:	761a      	strb	r2, [r3, #24]
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000e100 	.word	0xe000e100
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	; 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f1c3 0307 	rsb	r3, r3, #7
 8002876:	2b04      	cmp	r3, #4
 8002878:	bf28      	it	cs
 800287a:	2304      	movcs	r3, #4
 800287c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3304      	adds	r3, #4
 8002882:	2b06      	cmp	r3, #6
 8002884:	d902      	bls.n	800288c <NVIC_EncodePriority+0x30>
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3b03      	subs	r3, #3
 800288a:	e000      	b.n	800288e <NVIC_EncodePriority+0x32>
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	f04f 32ff 	mov.w	r2, #4294967295
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43da      	mvns	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	401a      	ands	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a4:	f04f 31ff 	mov.w	r1, #4294967295
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	43d9      	mvns	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	4313      	orrs	r3, r2
         );
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3724      	adds	r7, #36	; 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028d4:	d301      	bcc.n	80028da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028d6:	2301      	movs	r3, #1
 80028d8:	e00f      	b.n	80028fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028da:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <SysTick_Config+0x40>)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3b01      	subs	r3, #1
 80028e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028e2:	210f      	movs	r1, #15
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295
 80028e8:	f7ff ff8e 	bl	8002808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <SysTick_Config+0x40>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028f2:	4b04      	ldr	r3, [pc, #16]	; (8002904 <SysTick_Config+0x40>)
 80028f4:	2207      	movs	r2, #7
 80028f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	e000e010 	.word	0xe000e010

08002908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff ff05 	bl	8002720 <__NVIC_SetPriorityGrouping>
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800291e:	b580      	push	{r7, lr}
 8002920:	b086      	sub	sp, #24
 8002922:	af00      	add	r7, sp, #0
 8002924:	4603      	mov	r3, r0
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002930:	f7ff ff1a 	bl	8002768 <__NVIC_GetPriorityGrouping>
 8002934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	6978      	ldr	r0, [r7, #20]
 800293c:	f7ff ff8e 	bl	800285c <NVIC_EncodePriority>
 8002940:	4602      	mov	r2, r0
 8002942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff ff5d 	bl	8002808 <__NVIC_SetPriority>
}
 800294e:	bf00      	nop
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff0d 	bl	8002784 <__NVIC_EnableIRQ>
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	4603      	mov	r3, r0
 800297a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800297c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff1d 	bl	80027c0 <__NVIC_DisableIRQ>
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ff94 	bl	80028c4 <SysTick_Config>
 800299c:	4603      	mov	r3, r0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029b4:	f7ff fc46 	bl	8002244 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e099      	b.n	8002af8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0201 	bic.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029e4:	e00f      	b.n	8002a06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029e6:	f7ff fc2d 	bl	8002244 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b05      	cmp	r3, #5
 80029f2:	d908      	bls.n	8002a06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2220      	movs	r2, #32
 80029f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2203      	movs	r2, #3
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e078      	b.n	8002af8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1e8      	bne.n	80029e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	4b38      	ldr	r3, [pc, #224]	; (8002b00 <HAL_DMA_Init+0x158>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d107      	bne.n	8002a70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f023 0307 	bic.w	r3, r3, #7
 8002a86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d117      	bne.n	8002aca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00e      	beq.n	8002aca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 fb5f 	bl	8003170 <DMA_CheckFifoParam>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2240      	movs	r2, #64	; 0x40
 8002abc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e016      	b.n	8002af8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 fb16 	bl	8003104 <DMA_CalcBaseAndBitshift>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae0:	223f      	movs	r2, #63	; 0x3f
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	f010803f 	.word	0xf010803f

08002b04 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e050      	b.n	8002bb8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d101      	bne.n	8002b26 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002b22:	2302      	movs	r3, #2
 8002b24:	e048      	b.n	8002bb8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0201 	bic.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2200      	movs	r2, #0
 8002b44:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2200      	movs	r2, #0
 8002b54:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2221      	movs	r2, #33	; 0x21
 8002b64:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 facc 	bl	8003104 <DMA_CalcBaseAndBitshift>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b98:	223f      	movs	r2, #63	; 0x3f
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_DMA_Start_IT+0x26>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e040      	b.n	8002c68 <HAL_DMA_Start_IT+0xa8>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d12f      	bne.n	8002c5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 fa4a 	bl	80030a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c18:	223f      	movs	r2, #63	; 0x3f
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0216 	orr.w	r2, r2, #22
 8002c2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d007      	beq.n	8002c48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0208 	orr.w	r2, r2, #8
 8002c46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	e005      	b.n	8002c66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c62:	2302      	movs	r3, #2
 8002c64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c7e:	f7ff fae1 	bl	8002244 <HAL_GetTick>
 8002c82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d008      	beq.n	8002ca2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2280      	movs	r2, #128	; 0x80
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e052      	b.n	8002d48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0216 	bic.w	r2, r2, #22
 8002cb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695a      	ldr	r2, [r3, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d103      	bne.n	8002cd2 <HAL_DMA_Abort+0x62>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0208 	bic.w	r2, r2, #8
 8002ce0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0201 	bic.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf2:	e013      	b.n	8002d1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cf4:	f7ff faa6 	bl	8002244 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b05      	cmp	r3, #5
 8002d00:	d90c      	bls.n	8002d1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2220      	movs	r2, #32
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e015      	b.n	8002d48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1e4      	bne.n	8002cf4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2e:	223f      	movs	r2, #63	; 0x3f
 8002d30:	409a      	lsls	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d004      	beq.n	8002d6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2280      	movs	r2, #128	; 0x80
 8002d68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e00c      	b.n	8002d88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2205      	movs	r2, #5
 8002d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0201 	bic.w	r2, r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002da0:	4b8e      	ldr	r3, [pc, #568]	; (8002fdc <HAL_DMA_IRQHandler+0x248>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a8e      	ldr	r2, [pc, #568]	; (8002fe0 <HAL_DMA_IRQHandler+0x24c>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	0a9b      	lsrs	r3, r3, #10
 8002dac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbe:	2208      	movs	r2, #8
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d01a      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d013      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0204 	bic.w	r2, r2, #4
 8002de6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	2208      	movs	r2, #8
 8002dee:	409a      	lsls	r2, r3
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df8:	f043 0201 	orr.w	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e04:	2201      	movs	r2, #1
 8002e06:	409a      	lsls	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d012      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e22:	2201      	movs	r2, #1
 8002e24:	409a      	lsls	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	f043 0202 	orr.w	r2, r3, #2
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	409a      	lsls	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d012      	beq.n	8002e6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00b      	beq.n	8002e6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e58:	2204      	movs	r2, #4
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e64:	f043 0204 	orr.w	r2, r3, #4
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e70:	2210      	movs	r2, #16
 8002e72:	409a      	lsls	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d043      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d03c      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8e:	2210      	movs	r2, #16
 8002e90:	409a      	lsls	r2, r3
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d018      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d108      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d024      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	4798      	blx	r3
 8002ec2:	e01f      	b.n	8002f04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01b      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
 8002ed4:	e016      	b.n	8002f04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d107      	bne.n	8002ef4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0208 	bic.w	r2, r2, #8
 8002ef2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f08:	2220      	movs	r2, #32
 8002f0a:	409a      	lsls	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 808f 	beq.w	8003034 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 8087 	beq.w	8003034 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	409a      	lsls	r2, r3
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b05      	cmp	r3, #5
 8002f3c:	d136      	bne.n	8002fac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0216 	bic.w	r2, r2, #22
 8002f4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695a      	ldr	r2, [r3, #20]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d103      	bne.n	8002f6e <HAL_DMA_IRQHandler+0x1da>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d007      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0208 	bic.w	r2, r2, #8
 8002f7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	223f      	movs	r2, #63	; 0x3f
 8002f84:	409a      	lsls	r2, r3
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d07e      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	4798      	blx	r3
        }
        return;
 8002faa:	e079      	b.n	80030a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d01d      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10d      	bne.n	8002fe4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d031      	beq.n	8003034 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4798      	blx	r3
 8002fd8:	e02c      	b.n	8003034 <HAL_DMA_IRQHandler+0x2a0>
 8002fda:	bf00      	nop
 8002fdc:	2000003c 	.word	0x2000003c
 8002fe0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d023      	beq.n	8003034 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	4798      	blx	r3
 8002ff4:	e01e      	b.n	8003034 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10f      	bne.n	8003024 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0210 	bic.w	r2, r2, #16
 8003012:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003038:	2b00      	cmp	r3, #0
 800303a:	d032      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d022      	beq.n	800308e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2205      	movs	r2, #5
 800304c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0201 	bic.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	3301      	adds	r3, #1
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	429a      	cmp	r2, r3
 800306a:	d307      	bcc.n	800307c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f2      	bne.n	8003060 <HAL_DMA_IRQHandler+0x2cc>
 800307a:	e000      	b.n	800307e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800307c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	4798      	blx	r3
 800309e:	e000      	b.n	80030a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80030a0:	bf00      	nop
    }
  }
}
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b40      	cmp	r3, #64	; 0x40
 80030d4:	d108      	bne.n	80030e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030e6:	e007      	b.n	80030f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	60da      	str	r2, [r3, #12]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	3b10      	subs	r3, #16
 8003114:	4a14      	ldr	r2, [pc, #80]	; (8003168 <DMA_CalcBaseAndBitshift+0x64>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800311e:	4a13      	ldr	r2, [pc, #76]	; (800316c <DMA_CalcBaseAndBitshift+0x68>)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4413      	add	r3, r2
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b03      	cmp	r3, #3
 8003130:	d909      	bls.n	8003146 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800313a:	f023 0303 	bic.w	r3, r3, #3
 800313e:	1d1a      	adds	r2, r3, #4
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	659a      	str	r2, [r3, #88]	; 0x58
 8003144:	e007      	b.n	8003156 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800314e:	f023 0303 	bic.w	r3, r3, #3
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	aaaaaaab 	.word	0xaaaaaaab
 800316c:	08009484 	.word	0x08009484

08003170 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d11f      	bne.n	80031ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d856      	bhi.n	800323e <DMA_CheckFifoParam+0xce>
 8003190:	a201      	add	r2, pc, #4	; (adr r2, 8003198 <DMA_CheckFifoParam+0x28>)
 8003192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003196:	bf00      	nop
 8003198:	080031a9 	.word	0x080031a9
 800319c:	080031bb 	.word	0x080031bb
 80031a0:	080031a9 	.word	0x080031a9
 80031a4:	0800323f 	.word	0x0800323f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d046      	beq.n	8003242 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b8:	e043      	b.n	8003242 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031c2:	d140      	bne.n	8003246 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c8:	e03d      	b.n	8003246 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d2:	d121      	bne.n	8003218 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	d837      	bhi.n	800324a <DMA_CheckFifoParam+0xda>
 80031da:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <DMA_CheckFifoParam+0x70>)
 80031dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e0:	080031f1 	.word	0x080031f1
 80031e4:	080031f7 	.word	0x080031f7
 80031e8:	080031f1 	.word	0x080031f1
 80031ec:	08003209 	.word	0x08003209
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
      break;
 80031f4:	e030      	b.n	8003258 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d025      	beq.n	800324e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003206:	e022      	b.n	800324e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003210:	d11f      	bne.n	8003252 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003216:	e01c      	b.n	8003252 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d903      	bls.n	8003226 <DMA_CheckFifoParam+0xb6>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b03      	cmp	r3, #3
 8003222:	d003      	beq.n	800322c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003224:	e018      	b.n	8003258 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	73fb      	strb	r3, [r7, #15]
      break;
 800322a:	e015      	b.n	8003258 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00e      	beq.n	8003256 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
      break;
 800323c:	e00b      	b.n	8003256 <DMA_CheckFifoParam+0xe6>
      break;
 800323e:	bf00      	nop
 8003240:	e00a      	b.n	8003258 <DMA_CheckFifoParam+0xe8>
      break;
 8003242:	bf00      	nop
 8003244:	e008      	b.n	8003258 <DMA_CheckFifoParam+0xe8>
      break;
 8003246:	bf00      	nop
 8003248:	e006      	b.n	8003258 <DMA_CheckFifoParam+0xe8>
      break;
 800324a:	bf00      	nop
 800324c:	e004      	b.n	8003258 <DMA_CheckFifoParam+0xe8>
      break;
 800324e:	bf00      	nop
 8003250:	e002      	b.n	8003258 <DMA_CheckFifoParam+0xe8>
      break;   
 8003252:	bf00      	nop
 8003254:	e000      	b.n	8003258 <DMA_CheckFifoParam+0xe8>
      break;
 8003256:	bf00      	nop
    }
  } 
  
  return status; 
 8003258:	7bfb      	ldrb	r3, [r7, #15]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop

08003268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003268:	b480      	push	{r7}
 800326a:	b089      	sub	sp, #36	; 0x24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800327a:	2300      	movs	r3, #0
 800327c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	e159      	b.n	8003538 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003284:	2201      	movs	r2, #1
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	4013      	ands	r3, r2
 8003296:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	429a      	cmp	r2, r3
 800329e:	f040 8148 	bne.w	8003532 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d005      	beq.n	80032ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d130      	bne.n	800331c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	2203      	movs	r2, #3
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032f0:	2201      	movs	r2, #1
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	091b      	lsrs	r3, r3, #4
 8003306:	f003 0201 	and.w	r2, r3, #1
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	2b03      	cmp	r3, #3
 8003326:	d017      	beq.n	8003358 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	2203      	movs	r2, #3
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d123      	bne.n	80033ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	08da      	lsrs	r2, r3, #3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3208      	adds	r2, #8
 800336c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003370:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	220f      	movs	r2, #15
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	08da      	lsrs	r2, r3, #3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3208      	adds	r2, #8
 80033a6:	69b9      	ldr	r1, [r7, #24]
 80033a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	2203      	movs	r2, #3
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 0203 	and.w	r2, r3, #3
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80a2 	beq.w	8003532 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	4b57      	ldr	r3, [pc, #348]	; (8003550 <HAL_GPIO_Init+0x2e8>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	4a56      	ldr	r2, [pc, #344]	; (8003550 <HAL_GPIO_Init+0x2e8>)
 80033f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033fc:	6453      	str	r3, [r2, #68]	; 0x44
 80033fe:	4b54      	ldr	r3, [pc, #336]	; (8003550 <HAL_GPIO_Init+0x2e8>)
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800340a:	4a52      	ldr	r2, [pc, #328]	; (8003554 <HAL_GPIO_Init+0x2ec>)
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	089b      	lsrs	r3, r3, #2
 8003410:	3302      	adds	r3, #2
 8003412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	220f      	movs	r2, #15
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4013      	ands	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a49      	ldr	r2, [pc, #292]	; (8003558 <HAL_GPIO_Init+0x2f0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d019      	beq.n	800346a <HAL_GPIO_Init+0x202>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a48      	ldr	r2, [pc, #288]	; (800355c <HAL_GPIO_Init+0x2f4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d013      	beq.n	8003466 <HAL_GPIO_Init+0x1fe>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a47      	ldr	r2, [pc, #284]	; (8003560 <HAL_GPIO_Init+0x2f8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00d      	beq.n	8003462 <HAL_GPIO_Init+0x1fa>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a46      	ldr	r2, [pc, #280]	; (8003564 <HAL_GPIO_Init+0x2fc>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d007      	beq.n	800345e <HAL_GPIO_Init+0x1f6>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a45      	ldr	r2, [pc, #276]	; (8003568 <HAL_GPIO_Init+0x300>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d101      	bne.n	800345a <HAL_GPIO_Init+0x1f2>
 8003456:	2304      	movs	r3, #4
 8003458:	e008      	b.n	800346c <HAL_GPIO_Init+0x204>
 800345a:	2307      	movs	r3, #7
 800345c:	e006      	b.n	800346c <HAL_GPIO_Init+0x204>
 800345e:	2303      	movs	r3, #3
 8003460:	e004      	b.n	800346c <HAL_GPIO_Init+0x204>
 8003462:	2302      	movs	r3, #2
 8003464:	e002      	b.n	800346c <HAL_GPIO_Init+0x204>
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <HAL_GPIO_Init+0x204>
 800346a:	2300      	movs	r3, #0
 800346c:	69fa      	ldr	r2, [r7, #28]
 800346e:	f002 0203 	and.w	r2, r2, #3
 8003472:	0092      	lsls	r2, r2, #2
 8003474:	4093      	lsls	r3, r2
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4313      	orrs	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800347c:	4935      	ldr	r1, [pc, #212]	; (8003554 <HAL_GPIO_Init+0x2ec>)
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	089b      	lsrs	r3, r3, #2
 8003482:	3302      	adds	r3, #2
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800348a:	4b38      	ldr	r3, [pc, #224]	; (800356c <HAL_GPIO_Init+0x304>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034ae:	4a2f      	ldr	r2, [pc, #188]	; (800356c <HAL_GPIO_Init+0x304>)
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034b4:	4b2d      	ldr	r3, [pc, #180]	; (800356c <HAL_GPIO_Init+0x304>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	43db      	mvns	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034d8:	4a24      	ldr	r2, [pc, #144]	; (800356c <HAL_GPIO_Init+0x304>)
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034de:	4b23      	ldr	r3, [pc, #140]	; (800356c <HAL_GPIO_Init+0x304>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	43db      	mvns	r3, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4013      	ands	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003502:	4a1a      	ldr	r2, [pc, #104]	; (800356c <HAL_GPIO_Init+0x304>)
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003508:	4b18      	ldr	r3, [pc, #96]	; (800356c <HAL_GPIO_Init+0x304>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	43db      	mvns	r3, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4013      	ands	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800352c:	4a0f      	ldr	r2, [pc, #60]	; (800356c <HAL_GPIO_Init+0x304>)
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3301      	adds	r3, #1
 8003536:	61fb      	str	r3, [r7, #28]
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	2b0f      	cmp	r3, #15
 800353c:	f67f aea2 	bls.w	8003284 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003540:	bf00      	nop
 8003542:	bf00      	nop
 8003544:	3724      	adds	r7, #36	; 0x24
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40023800 	.word	0x40023800
 8003554:	40013800 	.word	0x40013800
 8003558:	40020000 	.word	0x40020000
 800355c:	40020400 	.word	0x40020400
 8003560:	40020800 	.word	0x40020800
 8003564:	40020c00 	.word	0x40020c00
 8003568:	40021000 	.word	0x40021000
 800356c:	40013c00 	.word	0x40013c00

08003570 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800357a:	2300      	movs	r3, #0
 800357c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003586:	2300      	movs	r3, #0
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	e0bb      	b.n	8003704 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800358c:	2201      	movs	r2, #1
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4013      	ands	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	f040 80ab 	bne.w	80036fe <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80035a8:	4a5c      	ldr	r2, [pc, #368]	; (800371c <HAL_GPIO_DeInit+0x1ac>)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	089b      	lsrs	r3, r3, #2
 80035ae:	3302      	adds	r3, #2
 80035b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	220f      	movs	r2, #15
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	4013      	ands	r3, r2
 80035c8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a54      	ldr	r2, [pc, #336]	; (8003720 <HAL_GPIO_DeInit+0x1b0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d019      	beq.n	8003606 <HAL_GPIO_DeInit+0x96>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a53      	ldr	r2, [pc, #332]	; (8003724 <HAL_GPIO_DeInit+0x1b4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d013      	beq.n	8003602 <HAL_GPIO_DeInit+0x92>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a52      	ldr	r2, [pc, #328]	; (8003728 <HAL_GPIO_DeInit+0x1b8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00d      	beq.n	80035fe <HAL_GPIO_DeInit+0x8e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a51      	ldr	r2, [pc, #324]	; (800372c <HAL_GPIO_DeInit+0x1bc>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d007      	beq.n	80035fa <HAL_GPIO_DeInit+0x8a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a50      	ldr	r2, [pc, #320]	; (8003730 <HAL_GPIO_DeInit+0x1c0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d101      	bne.n	80035f6 <HAL_GPIO_DeInit+0x86>
 80035f2:	2304      	movs	r3, #4
 80035f4:	e008      	b.n	8003608 <HAL_GPIO_DeInit+0x98>
 80035f6:	2307      	movs	r3, #7
 80035f8:	e006      	b.n	8003608 <HAL_GPIO_DeInit+0x98>
 80035fa:	2303      	movs	r3, #3
 80035fc:	e004      	b.n	8003608 <HAL_GPIO_DeInit+0x98>
 80035fe:	2302      	movs	r3, #2
 8003600:	e002      	b.n	8003608 <HAL_GPIO_DeInit+0x98>
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <HAL_GPIO_DeInit+0x98>
 8003606:	2300      	movs	r3, #0
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	f002 0203 	and.w	r2, r2, #3
 800360e:	0092      	lsls	r2, r2, #2
 8003610:	4093      	lsls	r3, r2
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	429a      	cmp	r2, r3
 8003616:	d132      	bne.n	800367e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003618:	4b46      	ldr	r3, [pc, #280]	; (8003734 <HAL_GPIO_DeInit+0x1c4>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	43db      	mvns	r3, r3
 8003620:	4944      	ldr	r1, [pc, #272]	; (8003734 <HAL_GPIO_DeInit+0x1c4>)
 8003622:	4013      	ands	r3, r2
 8003624:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003626:	4b43      	ldr	r3, [pc, #268]	; (8003734 <HAL_GPIO_DeInit+0x1c4>)
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	43db      	mvns	r3, r3
 800362e:	4941      	ldr	r1, [pc, #260]	; (8003734 <HAL_GPIO_DeInit+0x1c4>)
 8003630:	4013      	ands	r3, r2
 8003632:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003634:	4b3f      	ldr	r3, [pc, #252]	; (8003734 <HAL_GPIO_DeInit+0x1c4>)
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	43db      	mvns	r3, r3
 800363c:	493d      	ldr	r1, [pc, #244]	; (8003734 <HAL_GPIO_DeInit+0x1c4>)
 800363e:	4013      	ands	r3, r2
 8003640:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003642:	4b3c      	ldr	r3, [pc, #240]	; (8003734 <HAL_GPIO_DeInit+0x1c4>)
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	43db      	mvns	r3, r3
 800364a:	493a      	ldr	r1, [pc, #232]	; (8003734 <HAL_GPIO_DeInit+0x1c4>)
 800364c:	4013      	ands	r3, r2
 800364e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	220f      	movs	r2, #15
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003660:	4a2e      	ldr	r2, [pc, #184]	; (800371c <HAL_GPIO_DeInit+0x1ac>)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	089b      	lsrs	r3, r3, #2
 8003666:	3302      	adds	r3, #2
 8003668:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	43da      	mvns	r2, r3
 8003670:	482a      	ldr	r0, [pc, #168]	; (800371c <HAL_GPIO_DeInit+0x1ac>)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	089b      	lsrs	r3, r3, #2
 8003676:	400a      	ands	r2, r1
 8003678:	3302      	adds	r3, #2
 800367a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	2103      	movs	r1, #3
 8003688:	fa01 f303 	lsl.w	r3, r1, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	401a      	ands	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	08da      	lsrs	r2, r3, #3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3208      	adds	r2, #8
 800369c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	220f      	movs	r2, #15
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43db      	mvns	r3, r3
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	08d2      	lsrs	r2, r2, #3
 80036b4:	4019      	ands	r1, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3208      	adds	r2, #8
 80036ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	2103      	movs	r1, #3
 80036c8:	fa01 f303 	lsl.w	r3, r1, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	401a      	ands	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	2101      	movs	r1, #1
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	fa01 f303 	lsl.w	r3, r1, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	401a      	ands	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	2103      	movs	r1, #3
 80036f2:	fa01 f303 	lsl.w	r3, r1, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	401a      	ands	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	3301      	adds	r3, #1
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2b0f      	cmp	r3, #15
 8003708:	f67f af40 	bls.w	800358c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800370c:	bf00      	nop
 800370e:	bf00      	nop
 8003710:	371c      	adds	r7, #28
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40013800 	.word	0x40013800
 8003720:	40020000 	.word	0x40020000
 8003724:	40020400 	.word	0x40020400
 8003728:	40020800 	.word	0x40020800
 800372c:	40020c00 	.word	0x40020c00
 8003730:	40021000 	.word	0x40021000
 8003734:	40013c00 	.word	0x40013c00

08003738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	807b      	strh	r3, [r7, #2]
 8003744:	4613      	mov	r3, r2
 8003746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003748:	787b      	ldrb	r3, [r7, #1]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800374e:	887a      	ldrh	r2, [r7, #2]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003754:	e003      	b.n	800375e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003756:	887b      	ldrh	r3, [r7, #2]
 8003758:	041a      	lsls	r2, r3, #16
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	619a      	str	r2, [r3, #24]
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
	...

0800376c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e267      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d075      	beq.n	8003876 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800378a:	4b88      	ldr	r3, [pc, #544]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b04      	cmp	r3, #4
 8003794:	d00c      	beq.n	80037b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003796:	4b85      	ldr	r3, [pc, #532]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d112      	bne.n	80037c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037a2:	4b82      	ldr	r3, [pc, #520]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ae:	d10b      	bne.n	80037c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b0:	4b7e      	ldr	r3, [pc, #504]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d05b      	beq.n	8003874 <HAL_RCC_OscConfig+0x108>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d157      	bne.n	8003874 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e242      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d0:	d106      	bne.n	80037e0 <HAL_RCC_OscConfig+0x74>
 80037d2:	4b76      	ldr	r3, [pc, #472]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a75      	ldr	r2, [pc, #468]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e01d      	b.n	800381c <HAL_RCC_OscConfig+0xb0>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037e8:	d10c      	bne.n	8003804 <HAL_RCC_OscConfig+0x98>
 80037ea:	4b70      	ldr	r3, [pc, #448]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a6f      	ldr	r2, [pc, #444]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80037f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	4b6d      	ldr	r3, [pc, #436]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a6c      	ldr	r2, [pc, #432]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80037fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	e00b      	b.n	800381c <HAL_RCC_OscConfig+0xb0>
 8003804:	4b69      	ldr	r3, [pc, #420]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a68      	ldr	r2, [pc, #416]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 800380a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	4b66      	ldr	r3, [pc, #408]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a65      	ldr	r2, [pc, #404]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800381a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d013      	beq.n	800384c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003824:	f7fe fd0e 	bl	8002244 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800382c:	f7fe fd0a 	bl	8002244 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b64      	cmp	r3, #100	; 0x64
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e207      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383e:	4b5b      	ldr	r3, [pc, #364]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f0      	beq.n	800382c <HAL_RCC_OscConfig+0xc0>
 800384a:	e014      	b.n	8003876 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7fe fcfa 	bl	8002244 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003854:	f7fe fcf6 	bl	8002244 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	; 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e1f3      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003866:	4b51      	ldr	r3, [pc, #324]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0xe8>
 8003872:	e000      	b.n	8003876 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d063      	beq.n	800394a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003882:	4b4a      	ldr	r3, [pc, #296]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00b      	beq.n	80038a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800388e:	4b47      	ldr	r3, [pc, #284]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003896:	2b08      	cmp	r3, #8
 8003898:	d11c      	bne.n	80038d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800389a:	4b44      	ldr	r3, [pc, #272]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d116      	bne.n	80038d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a6:	4b41      	ldr	r3, [pc, #260]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_RCC_OscConfig+0x152>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d001      	beq.n	80038be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e1c7      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038be:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4937      	ldr	r1, [pc, #220]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d2:	e03a      	b.n	800394a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d020      	beq.n	800391e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038dc:	4b34      	ldr	r3, [pc, #208]	; (80039b0 <HAL_RCC_OscConfig+0x244>)
 80038de:	2201      	movs	r2, #1
 80038e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e2:	f7fe fcaf 	bl	8002244 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ea:	f7fe fcab 	bl	8002244 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e1a8      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038fc:	4b2b      	ldr	r3, [pc, #172]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f0      	beq.n	80038ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003908:	4b28      	ldr	r3, [pc, #160]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4925      	ldr	r1, [pc, #148]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003918:	4313      	orrs	r3, r2
 800391a:	600b      	str	r3, [r1, #0]
 800391c:	e015      	b.n	800394a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800391e:	4b24      	ldr	r3, [pc, #144]	; (80039b0 <HAL_RCC_OscConfig+0x244>)
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7fe fc8e 	bl	8002244 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800392c:	f7fe fc8a 	bl	8002244 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e187      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393e:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d036      	beq.n	80039c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d016      	beq.n	800398c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800395e:	4b15      	ldr	r3, [pc, #84]	; (80039b4 <HAL_RCC_OscConfig+0x248>)
 8003960:	2201      	movs	r2, #1
 8003962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003964:	f7fe fc6e 	bl	8002244 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800396c:	f7fe fc6a 	bl	8002244 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e167      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397e:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x200>
 800398a:	e01b      	b.n	80039c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800398c:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <HAL_RCC_OscConfig+0x248>)
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003992:	f7fe fc57 	bl	8002244 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003998:	e00e      	b.n	80039b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800399a:	f7fe fc53 	bl	8002244 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d907      	bls.n	80039b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e150      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
 80039ac:	40023800 	.word	0x40023800
 80039b0:	42470000 	.word	0x42470000
 80039b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b8:	4b88      	ldr	r3, [pc, #544]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 80039ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1ea      	bne.n	800399a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 8097 	beq.w	8003b00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039d2:	2300      	movs	r3, #0
 80039d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d6:	4b81      	ldr	r3, [pc, #516]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10f      	bne.n	8003a02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	60bb      	str	r3, [r7, #8]
 80039e6:	4b7d      	ldr	r3, [pc, #500]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	4a7c      	ldr	r2, [pc, #496]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 80039ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f0:	6413      	str	r3, [r2, #64]	; 0x40
 80039f2:	4b7a      	ldr	r3, [pc, #488]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039fe:	2301      	movs	r3, #1
 8003a00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a02:	4b77      	ldr	r3, [pc, #476]	; (8003be0 <HAL_RCC_OscConfig+0x474>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d118      	bne.n	8003a40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a0e:	4b74      	ldr	r3, [pc, #464]	; (8003be0 <HAL_RCC_OscConfig+0x474>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a73      	ldr	r2, [pc, #460]	; (8003be0 <HAL_RCC_OscConfig+0x474>)
 8003a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a1a:	f7fe fc13 	bl	8002244 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a22:	f7fe fc0f 	bl	8002244 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e10c      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a34:	4b6a      	ldr	r3, [pc, #424]	; (8003be0 <HAL_RCC_OscConfig+0x474>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0f0      	beq.n	8003a22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d106      	bne.n	8003a56 <HAL_RCC_OscConfig+0x2ea>
 8003a48:	4b64      	ldr	r3, [pc, #400]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4c:	4a63      	ldr	r2, [pc, #396]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003a4e:	f043 0301 	orr.w	r3, r3, #1
 8003a52:	6713      	str	r3, [r2, #112]	; 0x70
 8003a54:	e01c      	b.n	8003a90 <HAL_RCC_OscConfig+0x324>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b05      	cmp	r3, #5
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCC_OscConfig+0x30c>
 8003a5e:	4b5f      	ldr	r3, [pc, #380]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	4a5e      	ldr	r2, [pc, #376]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003a64:	f043 0304 	orr.w	r3, r3, #4
 8003a68:	6713      	str	r3, [r2, #112]	; 0x70
 8003a6a:	4b5c      	ldr	r3, [pc, #368]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6e:	4a5b      	ldr	r2, [pc, #364]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	6713      	str	r3, [r2, #112]	; 0x70
 8003a76:	e00b      	b.n	8003a90 <HAL_RCC_OscConfig+0x324>
 8003a78:	4b58      	ldr	r3, [pc, #352]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	4a57      	ldr	r2, [pc, #348]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003a7e:	f023 0301 	bic.w	r3, r3, #1
 8003a82:	6713      	str	r3, [r2, #112]	; 0x70
 8003a84:	4b55      	ldr	r3, [pc, #340]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	4a54      	ldr	r2, [pc, #336]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003a8a:	f023 0304 	bic.w	r3, r3, #4
 8003a8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d015      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a98:	f7fe fbd4 	bl	8002244 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa0:	f7fe fbd0 	bl	8002244 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e0cb      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab6:	4b49      	ldr	r3, [pc, #292]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0ee      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x334>
 8003ac2:	e014      	b.n	8003aee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac4:	f7fe fbbe 	bl	8002244 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003acc:	f7fe fbba 	bl	8002244 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e0b5      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae2:	4b3e      	ldr	r3, [pc, #248]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1ee      	bne.n	8003acc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aee:	7dfb      	ldrb	r3, [r7, #23]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d105      	bne.n	8003b00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af4:	4b39      	ldr	r3, [pc, #228]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	4a38      	ldr	r2, [pc, #224]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003afe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80a1 	beq.w	8003c4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b0a:	4b34      	ldr	r3, [pc, #208]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 030c 	and.w	r3, r3, #12
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d05c      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d141      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1e:	4b31      	ldr	r3, [pc, #196]	; (8003be4 <HAL_RCC_OscConfig+0x478>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b24:	f7fe fb8e 	bl	8002244 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fe fb8a 	bl	8002244 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e087      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3e:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69da      	ldr	r2, [r3, #28]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	019b      	lsls	r3, r3, #6
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	085b      	lsrs	r3, r3, #1
 8003b62:	3b01      	subs	r3, #1
 8003b64:	041b      	lsls	r3, r3, #16
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	061b      	lsls	r3, r3, #24
 8003b6e:	491b      	ldr	r1, [pc, #108]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b74:	4b1b      	ldr	r3, [pc, #108]	; (8003be4 <HAL_RCC_OscConfig+0x478>)
 8003b76:	2201      	movs	r2, #1
 8003b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7a:	f7fe fb63 	bl	8002244 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b82:	f7fe fb5f 	bl	8002244 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e05c      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b94:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x416>
 8003ba0:	e054      	b.n	8003c4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba2:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <HAL_RCC_OscConfig+0x478>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7fe fb4c 	bl	8002244 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb0:	f7fe fb48 	bl	8002244 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e045      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc2:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f0      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x444>
 8003bce:	e03d      	b.n	8003c4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d107      	bne.n	8003be8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e038      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40007000 	.word	0x40007000
 8003be4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003be8:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <HAL_RCC_OscConfig+0x4ec>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d028      	beq.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d121      	bne.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d11a      	bne.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c18:	4013      	ands	r3, r2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d111      	bne.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2e:	085b      	lsrs	r3, r3, #1
 8003c30:	3b01      	subs	r3, #1
 8003c32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d107      	bne.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d001      	beq.n	8003c4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40023800 	.word	0x40023800

08003c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e0cc      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c70:	4b68      	ldr	r3, [pc, #416]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d90c      	bls.n	8003c98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7e:	4b65      	ldr	r3, [pc, #404]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	4b63      	ldr	r3, [pc, #396]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0b8      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d020      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb0:	4b59      	ldr	r3, [pc, #356]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	4a58      	ldr	r2, [pc, #352]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cc8:	4b53      	ldr	r3, [pc, #332]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	4a52      	ldr	r2, [pc, #328]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd4:	4b50      	ldr	r3, [pc, #320]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	494d      	ldr	r1, [pc, #308]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d044      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d107      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfa:	4b47      	ldr	r3, [pc, #284]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d119      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e07f      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d003      	beq.n	8003d1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d107      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1a:	4b3f      	ldr	r3, [pc, #252]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d109      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e06f      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2a:	4b3b      	ldr	r3, [pc, #236]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e067      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d3a:	4b37      	ldr	r3, [pc, #220]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f023 0203 	bic.w	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	4934      	ldr	r1, [pc, #208]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d4c:	f7fe fa7a 	bl	8002244 <HAL_GetTick>
 8003d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d52:	e00a      	b.n	8003d6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d54:	f7fe fa76 	bl	8002244 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e04f      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6a:	4b2b      	ldr	r3, [pc, #172]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 020c 	and.w	r2, r3, #12
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d1eb      	bne.n	8003d54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d7c:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d20c      	bcs.n	8003da4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8a:	4b22      	ldr	r3, [pc, #136]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d92:	4b20      	ldr	r3, [pc, #128]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e032      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db0:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4916      	ldr	r1, [pc, #88]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dce:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	490e      	ldr	r1, [pc, #56]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003de2:	f000 f821 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8003de6:	4602      	mov	r2, r0
 8003de8:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	490a      	ldr	r1, [pc, #40]	; (8003e1c <HAL_RCC_ClockConfig+0x1c0>)
 8003df4:	5ccb      	ldrb	r3, [r1, r3]
 8003df6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfa:	4a09      	ldr	r2, [pc, #36]	; (8003e20 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dfe:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <HAL_RCC_ClockConfig+0x1c8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fe f9da 	bl	80021bc <HAL_InitTick>

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40023c00 	.word	0x40023c00
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	0800926c 	.word	0x0800926c
 8003e20:	2000003c 	.word	0x2000003c
 8003e24:	20000040 	.word	0x20000040

08003e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e2c:	b090      	sub	sp, #64	; 0x40
 8003e2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	637b      	str	r3, [r7, #52]	; 0x34
 8003e34:	2300      	movs	r3, #0
 8003e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e38:	2300      	movs	r3, #0
 8003e3a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e40:	4b59      	ldr	r3, [pc, #356]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 030c 	and.w	r3, r3, #12
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d00d      	beq.n	8003e68 <HAL_RCC_GetSysClockFreq+0x40>
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	f200 80a1 	bhi.w	8003f94 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <HAL_RCC_GetSysClockFreq+0x34>
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d003      	beq.n	8003e62 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e5a:	e09b      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e5c:	4b53      	ldr	r3, [pc, #332]	; (8003fac <HAL_RCC_GetSysClockFreq+0x184>)
 8003e5e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003e60:	e09b      	b.n	8003f9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e62:	4b53      	ldr	r3, [pc, #332]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e66:	e098      	b.n	8003f9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e68:	4b4f      	ldr	r3, [pc, #316]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e70:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e72:	4b4d      	ldr	r3, [pc, #308]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d028      	beq.n	8003ed0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e7e:	4b4a      	ldr	r3, [pc, #296]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	099b      	lsrs	r3, r3, #6
 8003e84:	2200      	movs	r2, #0
 8003e86:	623b      	str	r3, [r7, #32]
 8003e88:	627a      	str	r2, [r7, #36]	; 0x24
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e90:	2100      	movs	r1, #0
 8003e92:	4b47      	ldr	r3, [pc, #284]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e94:	fb03 f201 	mul.w	r2, r3, r1
 8003e98:	2300      	movs	r3, #0
 8003e9a:	fb00 f303 	mul.w	r3, r0, r3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	4a43      	ldr	r2, [pc, #268]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ea2:	fba0 1202 	umull	r1, r2, r0, r2
 8003ea6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ea8:	460a      	mov	r2, r1
 8003eaa:	62ba      	str	r2, [r7, #40]	; 0x28
 8003eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eae:	4413      	add	r3, r2
 8003eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	61fa      	str	r2, [r7, #28]
 8003eba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ebe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ec2:	f7fc f98d 	bl	80001e0 <__aeabi_uldivmod>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4613      	mov	r3, r2
 8003ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ece:	e053      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ed0:	4b35      	ldr	r3, [pc, #212]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	099b      	lsrs	r3, r3, #6
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	617a      	str	r2, [r7, #20]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ee2:	f04f 0b00 	mov.w	fp, #0
 8003ee6:	4652      	mov	r2, sl
 8003ee8:	465b      	mov	r3, fp
 8003eea:	f04f 0000 	mov.w	r0, #0
 8003eee:	f04f 0100 	mov.w	r1, #0
 8003ef2:	0159      	lsls	r1, r3, #5
 8003ef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ef8:	0150      	lsls	r0, r2, #5
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	ebb2 080a 	subs.w	r8, r2, sl
 8003f02:	eb63 090b 	sbc.w	r9, r3, fp
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f1a:	ebb2 0408 	subs.w	r4, r2, r8
 8003f1e:	eb63 0509 	sbc.w	r5, r3, r9
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	00eb      	lsls	r3, r5, #3
 8003f2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f30:	00e2      	lsls	r2, r4, #3
 8003f32:	4614      	mov	r4, r2
 8003f34:	461d      	mov	r5, r3
 8003f36:	eb14 030a 	adds.w	r3, r4, sl
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	eb45 030b 	adc.w	r3, r5, fp
 8003f40:	607b      	str	r3, [r7, #4]
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f4e:	4629      	mov	r1, r5
 8003f50:	028b      	lsls	r3, r1, #10
 8003f52:	4621      	mov	r1, r4
 8003f54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f58:	4621      	mov	r1, r4
 8003f5a:	028a      	lsls	r2, r1, #10
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4619      	mov	r1, r3
 8003f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f62:	2200      	movs	r2, #0
 8003f64:	60bb      	str	r3, [r7, #8]
 8003f66:	60fa      	str	r2, [r7, #12]
 8003f68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f6c:	f7fc f938 	bl	80001e0 <__aeabi_uldivmod>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4613      	mov	r3, r2
 8003f76:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f78:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	0c1b      	lsrs	r3, r3, #16
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	3301      	adds	r3, #1
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003f88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f92:	e002      	b.n	8003f9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f94:	4b05      	ldr	r3, [pc, #20]	; (8003fac <HAL_RCC_GetSysClockFreq+0x184>)
 8003f96:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3740      	adds	r7, #64	; 0x40
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	00f42400 	.word	0x00f42400
 8003fb0:	017d7840 	.word	0x017d7840

08003fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fb8:	4b03      	ldr	r3, [pc, #12]	; (8003fc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fba:	681b      	ldr	r3, [r3, #0]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	2000003c 	.word	0x2000003c

08003fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fd0:	f7ff fff0 	bl	8003fb4 <HAL_RCC_GetHCLKFreq>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	4b05      	ldr	r3, [pc, #20]	; (8003fec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	0a9b      	lsrs	r3, r3, #10
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	4903      	ldr	r1, [pc, #12]	; (8003ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fe2:	5ccb      	ldrb	r3, [r1, r3]
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	0800927c 	.word	0x0800927c

08003ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ff8:	f7ff ffdc 	bl	8003fb4 <HAL_RCC_GetHCLKFreq>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	4b05      	ldr	r3, [pc, #20]	; (8004014 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	0b5b      	lsrs	r3, r3, #13
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	4903      	ldr	r1, [pc, #12]	; (8004018 <HAL_RCC_GetPCLK2Freq+0x24>)
 800400a:	5ccb      	ldrb	r3, [r1, r3]
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004010:	4618      	mov	r0, r3
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40023800 	.word	0x40023800
 8004018:	0800927c 	.word	0x0800927c

0800401c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e041      	b.n	80040b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fd f8e6 	bl	8001214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3304      	adds	r3, #4
 8004058:	4619      	mov	r1, r3
 800405a:	4610      	mov	r0, r2
 800405c:	f000 fc5c 	bl	8004918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d001      	beq.n	80040d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e044      	b.n	800415e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a1e      	ldr	r2, [pc, #120]	; (800416c <HAL_TIM_Base_Start_IT+0xb0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d018      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x6c>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fe:	d013      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x6c>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1a      	ldr	r2, [pc, #104]	; (8004170 <HAL_TIM_Base_Start_IT+0xb4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00e      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x6c>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a19      	ldr	r2, [pc, #100]	; (8004174 <HAL_TIM_Base_Start_IT+0xb8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d009      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x6c>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a17      	ldr	r2, [pc, #92]	; (8004178 <HAL_TIM_Base_Start_IT+0xbc>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d004      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x6c>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a16      	ldr	r2, [pc, #88]	; (800417c <HAL_TIM_Base_Start_IT+0xc0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d111      	bne.n	800414c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b06      	cmp	r3, #6
 8004138:	d010      	beq.n	800415c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0201 	orr.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414a:	e007      	b.n	800415c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40010000 	.word	0x40010000
 8004170:	40000400 	.word	0x40000400
 8004174:	40000800 	.word	0x40000800
 8004178:	40000c00 	.word	0x40000c00
 800417c:	40014000 	.word	0x40014000

08004180 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0201 	bic.w	r2, r2, #1
 8004196:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6a1a      	ldr	r2, [r3, #32]
 800419e:	f241 1311 	movw	r3, #4369	; 0x1111
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10f      	bne.n	80041c8 <HAL_TIM_Base_Stop_IT+0x48>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6a1a      	ldr	r2, [r3, #32]
 80041ae:	f240 4344 	movw	r3, #1092	; 0x444
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d107      	bne.n	80041c8 <HAL_TIM_Base_Stop_IT+0x48>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e041      	b.n	8004274 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d106      	bne.n	800420a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f839 	bl	800427c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2202      	movs	r2, #2
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3304      	adds	r3, #4
 800421a:	4619      	mov	r1, r3
 800421c:	4610      	mov	r0, r2
 800421e:	f000 fb7b 	bl	8004918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d109      	bne.n	80042b4 <HAL_TIM_PWM_Start+0x24>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	bf14      	ite	ne
 80042ac:	2301      	movne	r3, #1
 80042ae:	2300      	moveq	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	e022      	b.n	80042fa <HAL_TIM_PWM_Start+0x6a>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d109      	bne.n	80042ce <HAL_TIM_PWM_Start+0x3e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	bf14      	ite	ne
 80042c6:	2301      	movne	r3, #1
 80042c8:	2300      	moveq	r3, #0
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	e015      	b.n	80042fa <HAL_TIM_PWM_Start+0x6a>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d109      	bne.n	80042e8 <HAL_TIM_PWM_Start+0x58>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b01      	cmp	r3, #1
 80042de:	bf14      	ite	ne
 80042e0:	2301      	movne	r3, #1
 80042e2:	2300      	moveq	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	e008      	b.n	80042fa <HAL_TIM_PWM_Start+0x6a>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	bf14      	ite	ne
 80042f4:	2301      	movne	r3, #1
 80042f6:	2300      	moveq	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e068      	b.n	80043d4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d104      	bne.n	8004312 <HAL_TIM_PWM_Start+0x82>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004310:	e013      	b.n	800433a <HAL_TIM_PWM_Start+0xaa>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b04      	cmp	r3, #4
 8004316:	d104      	bne.n	8004322 <HAL_TIM_PWM_Start+0x92>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004320:	e00b      	b.n	800433a <HAL_TIM_PWM_Start+0xaa>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b08      	cmp	r3, #8
 8004326:	d104      	bne.n	8004332 <HAL_TIM_PWM_Start+0xa2>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004330:	e003      	b.n	800433a <HAL_TIM_PWM_Start+0xaa>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2202      	movs	r2, #2
 8004336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2201      	movs	r2, #1
 8004340:	6839      	ldr	r1, [r7, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fd8e 	bl	8004e64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a23      	ldr	r2, [pc, #140]	; (80043dc <HAL_TIM_PWM_Start+0x14c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d107      	bne.n	8004362 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004360:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a1d      	ldr	r2, [pc, #116]	; (80043dc <HAL_TIM_PWM_Start+0x14c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d018      	beq.n	800439e <HAL_TIM_PWM_Start+0x10e>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004374:	d013      	beq.n	800439e <HAL_TIM_PWM_Start+0x10e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a19      	ldr	r2, [pc, #100]	; (80043e0 <HAL_TIM_PWM_Start+0x150>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d00e      	beq.n	800439e <HAL_TIM_PWM_Start+0x10e>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a17      	ldr	r2, [pc, #92]	; (80043e4 <HAL_TIM_PWM_Start+0x154>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d009      	beq.n	800439e <HAL_TIM_PWM_Start+0x10e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a16      	ldr	r2, [pc, #88]	; (80043e8 <HAL_TIM_PWM_Start+0x158>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d004      	beq.n	800439e <HAL_TIM_PWM_Start+0x10e>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a14      	ldr	r2, [pc, #80]	; (80043ec <HAL_TIM_PWM_Start+0x15c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d111      	bne.n	80043c2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b06      	cmp	r3, #6
 80043ae:	d010      	beq.n	80043d2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c0:	e007      	b.n	80043d2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0201 	orr.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40010000 	.word	0x40010000
 80043e0:	40000400 	.word	0x40000400
 80043e4:	40000800 	.word	0x40000800
 80043e8:	40000c00 	.word	0x40000c00
 80043ec:	40014000 	.word	0x40014000

080043f0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2200      	movs	r2, #0
 8004400:	6839      	ldr	r1, [r7, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fd2e 	bl	8004e64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a29      	ldr	r2, [pc, #164]	; (80044b4 <HAL_TIM_PWM_Stop+0xc4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d117      	bne.n	8004442 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6a1a      	ldr	r2, [r3, #32]
 8004418:	f241 1311 	movw	r3, #4369	; 0x1111
 800441c:	4013      	ands	r3, r2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10f      	bne.n	8004442 <HAL_TIM_PWM_Stop+0x52>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6a1a      	ldr	r2, [r3, #32]
 8004428:	f240 4344 	movw	r3, #1092	; 0x444
 800442c:	4013      	ands	r3, r2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d107      	bne.n	8004442 <HAL_TIM_PWM_Stop+0x52>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004440:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6a1a      	ldr	r2, [r3, #32]
 8004448:	f241 1311 	movw	r3, #4369	; 0x1111
 800444c:	4013      	ands	r3, r2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10f      	bne.n	8004472 <HAL_TIM_PWM_Stop+0x82>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6a1a      	ldr	r2, [r3, #32]
 8004458:	f240 4344 	movw	r3, #1092	; 0x444
 800445c:	4013      	ands	r3, r2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d107      	bne.n	8004472 <HAL_TIM_PWM_Stop+0x82>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0201 	bic.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d104      	bne.n	8004482 <HAL_TIM_PWM_Stop+0x92>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004480:	e013      	b.n	80044aa <HAL_TIM_PWM_Stop+0xba>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b04      	cmp	r3, #4
 8004486:	d104      	bne.n	8004492 <HAL_TIM_PWM_Stop+0xa2>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004490:	e00b      	b.n	80044aa <HAL_TIM_PWM_Stop+0xba>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b08      	cmp	r3, #8
 8004496:	d104      	bne.n	80044a2 <HAL_TIM_PWM_Stop+0xb2>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044a0:	e003      	b.n	80044aa <HAL_TIM_PWM_Stop+0xba>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40010000 	.word	0x40010000

080044b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e097      	b.n	80045fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d106      	bne.n	80044e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7fc feb9 	bl	8001258 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2202      	movs	r2, #2
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6812      	ldr	r2, [r2, #0]
 80044f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044fc:	f023 0307 	bic.w	r3, r3, #7
 8004500:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3304      	adds	r3, #4
 800450a:	4619      	mov	r1, r3
 800450c:	4610      	mov	r0, r2
 800450e:	f000 fa03 	bl	8004918 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4313      	orrs	r3, r2
 8004532:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800453a:	f023 0303 	bic.w	r3, r3, #3
 800453e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	021b      	lsls	r3, r3, #8
 800454a:	4313      	orrs	r3, r2
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004558:	f023 030c 	bic.w	r3, r3, #12
 800455c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004564:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004568:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	021b      	lsls	r3, r3, #8
 8004574:	4313      	orrs	r3, r2
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	011a      	lsls	r2, r3, #4
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	031b      	lsls	r3, r3, #12
 8004588:	4313      	orrs	r3, r2
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004596:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800459e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	4313      	orrs	r3, r2
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800461e:	2302      	movs	r3, #2
 8004620:	e0ae      	b.n	8004780 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b0c      	cmp	r3, #12
 800462e:	f200 809f 	bhi.w	8004770 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004632:	a201      	add	r2, pc, #4	; (adr r2, 8004638 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004638:	0800466d 	.word	0x0800466d
 800463c:	08004771 	.word	0x08004771
 8004640:	08004771 	.word	0x08004771
 8004644:	08004771 	.word	0x08004771
 8004648:	080046ad 	.word	0x080046ad
 800464c:	08004771 	.word	0x08004771
 8004650:	08004771 	.word	0x08004771
 8004654:	08004771 	.word	0x08004771
 8004658:	080046ef 	.word	0x080046ef
 800465c:	08004771 	.word	0x08004771
 8004660:	08004771 	.word	0x08004771
 8004664:	08004771 	.word	0x08004771
 8004668:	0800472f 	.word	0x0800472f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	4618      	mov	r0, r3
 8004674:	f000 f9d0 	bl	8004a18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699a      	ldr	r2, [r3, #24]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0208 	orr.w	r2, r2, #8
 8004686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0204 	bic.w	r2, r2, #4
 8004696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6999      	ldr	r1, [r3, #24]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	691a      	ldr	r2, [r3, #16]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	619a      	str	r2, [r3, #24]
      break;
 80046aa:	e064      	b.n	8004776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68b9      	ldr	r1, [r7, #8]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fa16 	bl	8004ae4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6999      	ldr	r1, [r3, #24]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	021a      	lsls	r2, r3, #8
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	619a      	str	r2, [r3, #24]
      break;
 80046ec:	e043      	b.n	8004776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fa61 	bl	8004bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69da      	ldr	r2, [r3, #28]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0208 	orr.w	r2, r2, #8
 8004708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69da      	ldr	r2, [r3, #28]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0204 	bic.w	r2, r2, #4
 8004718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69d9      	ldr	r1, [r3, #28]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	61da      	str	r2, [r3, #28]
      break;
 800472c:	e023      	b.n	8004776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68b9      	ldr	r1, [r7, #8]
 8004734:	4618      	mov	r0, r3
 8004736:	f000 faab 	bl	8004c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69da      	ldr	r2, [r3, #28]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69d9      	ldr	r1, [r3, #28]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	021a      	lsls	r2, r3, #8
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	61da      	str	r2, [r3, #28]
      break;
 800476e:	e002      	b.n	8004776 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	75fb      	strb	r3, [r7, #23]
      break;
 8004774:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800477e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_TIM_ConfigClockSource+0x1c>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e0b4      	b.n	800490e <HAL_TIM_ConfigClockSource+0x186>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047dc:	d03e      	beq.n	800485c <HAL_TIM_ConfigClockSource+0xd4>
 80047de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e2:	f200 8087 	bhi.w	80048f4 <HAL_TIM_ConfigClockSource+0x16c>
 80047e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ea:	f000 8086 	beq.w	80048fa <HAL_TIM_ConfigClockSource+0x172>
 80047ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f2:	d87f      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x16c>
 80047f4:	2b70      	cmp	r3, #112	; 0x70
 80047f6:	d01a      	beq.n	800482e <HAL_TIM_ConfigClockSource+0xa6>
 80047f8:	2b70      	cmp	r3, #112	; 0x70
 80047fa:	d87b      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x16c>
 80047fc:	2b60      	cmp	r3, #96	; 0x60
 80047fe:	d050      	beq.n	80048a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004800:	2b60      	cmp	r3, #96	; 0x60
 8004802:	d877      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004804:	2b50      	cmp	r3, #80	; 0x50
 8004806:	d03c      	beq.n	8004882 <HAL_TIM_ConfigClockSource+0xfa>
 8004808:	2b50      	cmp	r3, #80	; 0x50
 800480a:	d873      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x16c>
 800480c:	2b40      	cmp	r3, #64	; 0x40
 800480e:	d058      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004810:	2b40      	cmp	r3, #64	; 0x40
 8004812:	d86f      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004814:	2b30      	cmp	r3, #48	; 0x30
 8004816:	d064      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004818:	2b30      	cmp	r3, #48	; 0x30
 800481a:	d86b      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x16c>
 800481c:	2b20      	cmp	r3, #32
 800481e:	d060      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004820:	2b20      	cmp	r3, #32
 8004822:	d867      	bhi.n	80048f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004824:	2b00      	cmp	r3, #0
 8004826:	d05c      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004828:	2b10      	cmp	r3, #16
 800482a:	d05a      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0x15a>
 800482c:	e062      	b.n	80048f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6899      	ldr	r1, [r3, #8]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f000 faf1 	bl	8004e24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004850:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	609a      	str	r2, [r3, #8]
      break;
 800485a:	e04f      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	6899      	ldr	r1, [r3, #8]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f000 fada 	bl	8004e24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800487e:	609a      	str	r2, [r3, #8]
      break;
 8004880:	e03c      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6818      	ldr	r0, [r3, #0]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	6859      	ldr	r1, [r3, #4]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	461a      	mov	r2, r3
 8004890:	f000 fa4e 	bl	8004d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2150      	movs	r1, #80	; 0x50
 800489a:	4618      	mov	r0, r3
 800489c:	f000 faa7 	bl	8004dee <TIM_ITRx_SetConfig>
      break;
 80048a0:	e02c      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6818      	ldr	r0, [r3, #0]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6859      	ldr	r1, [r3, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	461a      	mov	r2, r3
 80048b0:	f000 fa6d 	bl	8004d8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2160      	movs	r1, #96	; 0x60
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fa97 	bl	8004dee <TIM_ITRx_SetConfig>
      break;
 80048c0:	e01c      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6818      	ldr	r0, [r3, #0]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	6859      	ldr	r1, [r3, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	461a      	mov	r2, r3
 80048d0:	f000 fa2e 	bl	8004d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2140      	movs	r1, #64	; 0x40
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fa87 	bl	8004dee <TIM_ITRx_SetConfig>
      break;
 80048e0:	e00c      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4619      	mov	r1, r3
 80048ec:	4610      	mov	r0, r2
 80048ee:	f000 fa7e 	bl	8004dee <TIM_ITRx_SetConfig>
      break;
 80048f2:	e003      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	73fb      	strb	r3, [r7, #15]
      break;
 80048f8:	e000      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800490c:	7bfb      	ldrb	r3, [r7, #15]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a34      	ldr	r2, [pc, #208]	; (80049fc <TIM_Base_SetConfig+0xe4>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d00f      	beq.n	8004950 <TIM_Base_SetConfig+0x38>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004936:	d00b      	beq.n	8004950 <TIM_Base_SetConfig+0x38>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a31      	ldr	r2, [pc, #196]	; (8004a00 <TIM_Base_SetConfig+0xe8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d007      	beq.n	8004950 <TIM_Base_SetConfig+0x38>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a30      	ldr	r2, [pc, #192]	; (8004a04 <TIM_Base_SetConfig+0xec>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d003      	beq.n	8004950 <TIM_Base_SetConfig+0x38>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a2f      	ldr	r2, [pc, #188]	; (8004a08 <TIM_Base_SetConfig+0xf0>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d108      	bne.n	8004962 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a25      	ldr	r2, [pc, #148]	; (80049fc <TIM_Base_SetConfig+0xe4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d01b      	beq.n	80049a2 <TIM_Base_SetConfig+0x8a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004970:	d017      	beq.n	80049a2 <TIM_Base_SetConfig+0x8a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a22      	ldr	r2, [pc, #136]	; (8004a00 <TIM_Base_SetConfig+0xe8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d013      	beq.n	80049a2 <TIM_Base_SetConfig+0x8a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a21      	ldr	r2, [pc, #132]	; (8004a04 <TIM_Base_SetConfig+0xec>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00f      	beq.n	80049a2 <TIM_Base_SetConfig+0x8a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a20      	ldr	r2, [pc, #128]	; (8004a08 <TIM_Base_SetConfig+0xf0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00b      	beq.n	80049a2 <TIM_Base_SetConfig+0x8a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a1f      	ldr	r2, [pc, #124]	; (8004a0c <TIM_Base_SetConfig+0xf4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d007      	beq.n	80049a2 <TIM_Base_SetConfig+0x8a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a1e      	ldr	r2, [pc, #120]	; (8004a10 <TIM_Base_SetConfig+0xf8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d003      	beq.n	80049a2 <TIM_Base_SetConfig+0x8a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a1d      	ldr	r2, [pc, #116]	; (8004a14 <TIM_Base_SetConfig+0xfc>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d108      	bne.n	80049b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a08      	ldr	r2, [pc, #32]	; (80049fc <TIM_Base_SetConfig+0xe4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d103      	bne.n	80049e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	691a      	ldr	r2, [r3, #16]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	615a      	str	r2, [r3, #20]
}
 80049ee:	bf00      	nop
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40010000 	.word	0x40010000
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40000800 	.word	0x40000800
 8004a08:	40000c00 	.word	0x40000c00
 8004a0c:	40014000 	.word	0x40014000
 8004a10:	40014400 	.word	0x40014400
 8004a14:	40014800 	.word	0x40014800

08004a18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f023 0201 	bic.w	r2, r3, #1
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0303 	bic.w	r3, r3, #3
 8004a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f023 0302 	bic.w	r3, r3, #2
 8004a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a1c      	ldr	r2, [pc, #112]	; (8004ae0 <TIM_OC1_SetConfig+0xc8>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d10c      	bne.n	8004a8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f023 0308 	bic.w	r3, r3, #8
 8004a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f023 0304 	bic.w	r3, r3, #4
 8004a8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a13      	ldr	r2, [pc, #76]	; (8004ae0 <TIM_OC1_SetConfig+0xc8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d111      	bne.n	8004aba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	621a      	str	r2, [r3, #32]
}
 8004ad4:	bf00      	nop
 8004ad6:	371c      	adds	r7, #28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	40010000 	.word	0x40010000

08004ae4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	f023 0210 	bic.w	r2, r3, #16
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	021b      	lsls	r3, r3, #8
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f023 0320 	bic.w	r3, r3, #32
 8004b2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a1e      	ldr	r2, [pc, #120]	; (8004bb8 <TIM_OC2_SetConfig+0xd4>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d10d      	bne.n	8004b60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a15      	ldr	r2, [pc, #84]	; (8004bb8 <TIM_OC2_SetConfig+0xd4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d113      	bne.n	8004b90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	621a      	str	r2, [r3, #32]
}
 8004baa:	bf00      	nop
 8004bac:	371c      	adds	r7, #28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40010000 	.word	0x40010000

08004bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0303 	bic.w	r3, r3, #3
 8004bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	021b      	lsls	r3, r3, #8
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a1d      	ldr	r2, [pc, #116]	; (8004c8c <TIM_OC3_SetConfig+0xd0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d10d      	bne.n	8004c36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	021b      	lsls	r3, r3, #8
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a14      	ldr	r2, [pc, #80]	; (8004c8c <TIM_OC3_SetConfig+0xd0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d113      	bne.n	8004c66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	621a      	str	r2, [r3, #32]
}
 8004c80:	bf00      	nop
 8004c82:	371c      	adds	r7, #28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	40010000 	.word	0x40010000

08004c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	021b      	lsls	r3, r3, #8
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	031b      	lsls	r3, r3, #12
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a10      	ldr	r2, [pc, #64]	; (8004d2c <TIM_OC4_SetConfig+0x9c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d109      	bne.n	8004d04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	019b      	lsls	r3, r3, #6
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40010000 	.word	0x40010000

08004d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	f023 0201 	bic.w	r2, r3, #1
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f023 030a 	bic.w	r3, r3, #10
 8004d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	621a      	str	r2, [r3, #32]
}
 8004d82:	bf00      	nop
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b087      	sub	sp, #28
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	f023 0210 	bic.w	r2, r3, #16
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004db8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	031b      	lsls	r3, r3, #12
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	621a      	str	r2, [r3, #32]
}
 8004de2:	bf00      	nop
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b085      	sub	sp, #20
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f043 0307 	orr.w	r3, r3, #7
 8004e10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	609a      	str	r2, [r3, #8]
}
 8004e18:	bf00      	nop
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	021a      	lsls	r2, r3, #8
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	609a      	str	r2, [r3, #8]
}
 8004e58:	bf00      	nop
 8004e5a:	371c      	adds	r7, #28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f003 031f 	and.w	r3, r3, #31
 8004e76:	2201      	movs	r2, #1
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a1a      	ldr	r2, [r3, #32]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	43db      	mvns	r3, r3
 8004e86:	401a      	ands	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a1a      	ldr	r2, [r3, #32]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f003 031f 	and.w	r3, r3, #31
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	621a      	str	r2, [r3, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
	...

08004eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d101      	bne.n	8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e050      	b.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1c      	ldr	r2, [pc, #112]	; (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d018      	beq.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f14:	d013      	beq.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a18      	ldr	r2, [pc, #96]	; (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00e      	beq.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a16      	ldr	r2, [pc, #88]	; (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d009      	beq.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a15      	ldr	r2, [pc, #84]	; (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d004      	beq.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a13      	ldr	r2, [pc, #76]	; (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d10c      	bne.n	8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40010000 	.word	0x40010000
 8004f7c:	40000400 	.word	0x40000400
 8004f80:	40000800 	.word	0x40000800
 8004f84:	40000c00 	.word	0x40000c00
 8004f88:	40014000 	.word	0x40014000

08004f8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e03d      	b.n	8005024 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e03f      	b.n	80050c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7fc f97e 	bl	8001358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2224      	movs	r2, #36	; 0x24
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005072:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 ffa5 	bl	8005fc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005088:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695a      	ldr	r2, [r3, #20]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005098:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e021      	b.n	8005120 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2224      	movs	r2, #36	; 0x24
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050f2:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7fc fa19 	bl	800152c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08c      	sub	sp, #48	; 0x30
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	4613      	mov	r3, r2
 8005134:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b20      	cmp	r3, #32
 8005140:	d165      	bne.n	800520e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <HAL_UART_Transmit_DMA+0x26>
 8005148:	88fb      	ldrh	r3, [r7, #6]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e05e      	b.n	8005210 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005158:	2b01      	cmp	r3, #1
 800515a:	d101      	bne.n	8005160 <HAL_UART_Transmit_DMA+0x38>
 800515c:	2302      	movs	r3, #2
 800515e:	e057      	b.n	8005210 <HAL_UART_Transmit_DMA+0xe8>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	88fa      	ldrh	r2, [r7, #6]
 8005172:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	88fa      	ldrh	r2, [r7, #6]
 8005178:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2221      	movs	r2, #33	; 0x21
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518c:	4a22      	ldr	r2, [pc, #136]	; (8005218 <HAL_UART_Transmit_DMA+0xf0>)
 800518e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005194:	4a21      	ldr	r2, [pc, #132]	; (800521c <HAL_UART_Transmit_DMA+0xf4>)
 8005196:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519c:	4a20      	ldr	r2, [pc, #128]	; (8005220 <HAL_UART_Transmit_DMA+0xf8>)
 800519e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a4:	2200      	movs	r2, #0
 80051a6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80051a8:	f107 0308 	add.w	r3, r7, #8
 80051ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80051b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b4:	6819      	ldr	r1, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3304      	adds	r3, #4
 80051bc:	461a      	mov	r2, r3
 80051be:	88fb      	ldrh	r3, [r7, #6]
 80051c0:	f7fd fcfe 	bl	8002bc0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051cc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3314      	adds	r3, #20
 80051dc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	617b      	str	r3, [r7, #20]
   return(result);
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3314      	adds	r3, #20
 80051f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051f6:	627a      	str	r2, [r7, #36]	; 0x24
 80051f8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	6a39      	ldr	r1, [r7, #32]
 80051fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	61fb      	str	r3, [r7, #28]
   return(result);
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e5      	bne.n	80051d6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	e000      	b.n	8005210 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800520e:	2302      	movs	r3, #2
  }
}
 8005210:	4618      	mov	r0, r3
 8005212:	3730      	adds	r7, #48	; 0x30
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	0800585d 	.word	0x0800585d
 800521c:	080058f7 	.word	0x080058f7
 8005220:	08005a6f 	.word	0x08005a6f

08005224 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08c      	sub	sp, #48	; 0x30
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	4613      	mov	r3, r2
 8005230:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b20      	cmp	r3, #32
 800523c:	d152      	bne.n	80052e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005244:	88fb      	ldrh	r3, [r7, #6]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e04b      	b.n	80052e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8005258:	2302      	movs	r3, #2
 800525a:	e044      	b.n	80052e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800526a:	88fb      	ldrh	r3, [r7, #6]
 800526c:	461a      	mov	r2, r3
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 fc47 	bl	8005b04 <UART_Start_Receive_DMA>
 8005276:	4603      	mov	r3, r0
 8005278:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800527c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005280:	2b00      	cmp	r3, #0
 8005282:	d12c      	bne.n	80052de <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005288:	2b01      	cmp	r3, #1
 800528a:	d125      	bne.n	80052d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800528c:	2300      	movs	r3, #0
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	613b      	str	r3, [r7, #16]
 80052a0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	330c      	adds	r3, #12
 80052a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	e853 3f00 	ldrex	r3, [r3]
 80052b0:	617b      	str	r3, [r7, #20]
   return(result);
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f043 0310 	orr.w	r3, r3, #16
 80052b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	330c      	adds	r3, #12
 80052c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052c2:	627a      	str	r2, [r7, #36]	; 0x24
 80052c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c6:	6a39      	ldr	r1, [r7, #32]
 80052c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ca:	e841 2300 	strex	r3, r2, [r1]
 80052ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1e5      	bne.n	80052a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80052d6:	e002      	b.n	80052de <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80052de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052e2:	e000      	b.n	80052e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80052e4:	2302      	movs	r3, #2
  }
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3730      	adds	r7, #48	; 0x30
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b0ba      	sub	sp, #232	; 0xe8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005316:	2300      	movs	r3, #0
 8005318:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800531c:	2300      	movs	r3, #0
 800531e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800532e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10f      	bne.n	8005356 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800533a:	f003 0320 	and.w	r3, r3, #32
 800533e:	2b00      	cmp	r3, #0
 8005340:	d009      	beq.n	8005356 <HAL_UART_IRQHandler+0x66>
 8005342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005346:	f003 0320 	and.w	r3, r3, #32
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fd7d 	bl	8005e4e <UART_Receive_IT>
      return;
 8005354:	e256      	b.n	8005804 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 80de 	beq.w	800551c <HAL_UART_IRQHandler+0x22c>
 8005360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d106      	bne.n	800537a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800536c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005370:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 80d1 	beq.w	800551c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800537a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00b      	beq.n	800539e <HAL_UART_IRQHandler+0xae>
 8005386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800538a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538e:	2b00      	cmp	r3, #0
 8005390:	d005      	beq.n	800539e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	f043 0201 	orr.w	r2, r3, #1
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800539e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a2:	f003 0304 	and.w	r3, r3, #4
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00b      	beq.n	80053c2 <HAL_UART_IRQHandler+0xd2>
 80053aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d005      	beq.n	80053c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	f043 0202 	orr.w	r2, r3, #2
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00b      	beq.n	80053e6 <HAL_UART_IRQHandler+0xf6>
 80053ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d005      	beq.n	80053e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	f043 0204 	orr.w	r2, r3, #4
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d011      	beq.n	8005416 <HAL_UART_IRQHandler+0x126>
 80053f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d105      	bne.n	800540a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d005      	beq.n	8005416 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	f043 0208 	orr.w	r2, r3, #8
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 81ed 	beq.w	80057fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005424:	f003 0320 	and.w	r3, r3, #32
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <HAL_UART_IRQHandler+0x14e>
 800542c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005430:	f003 0320 	and.w	r3, r3, #32
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fd08 	bl	8005e4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005448:	2b40      	cmp	r3, #64	; 0x40
 800544a:	bf0c      	ite	eq
 800544c:	2301      	moveq	r3, #1
 800544e:	2300      	movne	r3, #0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	2b00      	cmp	r3, #0
 8005460:	d103      	bne.n	800546a <HAL_UART_IRQHandler+0x17a>
 8005462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005466:	2b00      	cmp	r3, #0
 8005468:	d04f      	beq.n	800550a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fc10 	bl	8005c90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547a:	2b40      	cmp	r3, #64	; 0x40
 800547c:	d141      	bne.n	8005502 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3314      	adds	r3, #20
 8005484:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800548c:	e853 3f00 	ldrex	r3, [r3]
 8005490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005494:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800549c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3314      	adds	r3, #20
 80054a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1d9      	bne.n	800547e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d013      	beq.n	80054fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d6:	4a7d      	ldr	r2, [pc, #500]	; (80056cc <HAL_UART_IRQHandler+0x3dc>)
 80054d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fd fc36 	bl	8002d50 <HAL_DMA_Abort_IT>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d016      	beq.n	8005518 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054f4:	4610      	mov	r0, r2
 80054f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f8:	e00e      	b.n	8005518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fb fdc4 	bl	8001088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005500:	e00a      	b.n	8005518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fb fdc0 	bl	8001088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005508:	e006      	b.n	8005518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fb fdbc 	bl	8001088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005516:	e170      	b.n	80057fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005518:	bf00      	nop
    return;
 800551a:	e16e      	b.n	80057fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005520:	2b01      	cmp	r3, #1
 8005522:	f040 814a 	bne.w	80057ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800552a:	f003 0310 	and.w	r3, r3, #16
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 8143 	beq.w	80057ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005538:	f003 0310 	and.w	r3, r3, #16
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 813c 	beq.w	80057ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005542:	2300      	movs	r3, #0
 8005544:	60bb      	str	r3, [r7, #8]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	60bb      	str	r3, [r7, #8]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	60bb      	str	r3, [r7, #8]
 8005556:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005562:	2b40      	cmp	r3, #64	; 0x40
 8005564:	f040 80b4 	bne.w	80056d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005574:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 8140 	beq.w	80057fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005586:	429a      	cmp	r2, r3
 8005588:	f080 8139 	bcs.w	80057fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005592:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800559e:	f000 8088 	beq.w	80056b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	330c      	adds	r3, #12
 80055a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055b0:	e853 3f00 	ldrex	r3, [r3]
 80055b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	330c      	adds	r3, #12
 80055ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80055ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055de:	e841 2300 	strex	r3, r2, [r1]
 80055e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1d9      	bne.n	80055a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3314      	adds	r3, #20
 80055f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055f8:	e853 3f00 	ldrex	r3, [r3]
 80055fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005600:	f023 0301 	bic.w	r3, r3, #1
 8005604:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3314      	adds	r3, #20
 800560e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005612:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005616:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005618:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800561a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e1      	bne.n	80055ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3314      	adds	r3, #20
 8005630:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800563a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800563c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3314      	adds	r3, #20
 800564a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800564e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005650:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005652:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005654:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005656:	e841 2300 	strex	r3, r2, [r1]
 800565a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800565c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1e3      	bne.n	800562a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2220      	movs	r2, #32
 8005666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	330c      	adds	r3, #12
 8005676:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800567a:	e853 3f00 	ldrex	r3, [r3]
 800567e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005682:	f023 0310 	bic.w	r3, r3, #16
 8005686:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	330c      	adds	r3, #12
 8005690:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005694:	65ba      	str	r2, [r7, #88]	; 0x58
 8005696:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005698:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800569a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800569c:	e841 2300 	strex	r3, r2, [r1]
 80056a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1e3      	bne.n	8005670 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7fd fadf 	bl	8002c70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	b29b      	uxth	r3, r3
 80056c0:	4619      	mov	r1, r3
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fb fcce 	bl	8001064 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056c8:	e099      	b.n	80057fe <HAL_UART_IRQHandler+0x50e>
 80056ca:	bf00      	nop
 80056cc:	08005d57 	.word	0x08005d57
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056d8:	b29b      	uxth	r3, r3
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 808b 	beq.w	8005802 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80056ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 8086 	beq.w	8005802 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	330c      	adds	r3, #12
 80056fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005700:	e853 3f00 	ldrex	r3, [r3]
 8005704:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005708:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800570c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	330c      	adds	r3, #12
 8005716:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800571a:	647a      	str	r2, [r7, #68]	; 0x44
 800571c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005722:	e841 2300 	strex	r3, r2, [r1]
 8005726:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e3      	bne.n	80056f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3314      	adds	r3, #20
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	e853 3f00 	ldrex	r3, [r3]
 800573c:	623b      	str	r3, [r7, #32]
   return(result);
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	f023 0301 	bic.w	r3, r3, #1
 8005744:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3314      	adds	r3, #20
 800574e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005752:	633a      	str	r2, [r7, #48]	; 0x30
 8005754:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1e3      	bne.n	800572e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2220      	movs	r2, #32
 800576a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	330c      	adds	r3, #12
 800577a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	60fb      	str	r3, [r7, #12]
   return(result);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0310 	bic.w	r3, r3, #16
 800578a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	330c      	adds	r3, #12
 8005794:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005798:	61fa      	str	r2, [r7, #28]
 800579a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579c:	69b9      	ldr	r1, [r7, #24]
 800579e:	69fa      	ldr	r2, [r7, #28]
 80057a0:	e841 2300 	strex	r3, r2, [r1]
 80057a4:	617b      	str	r3, [r7, #20]
   return(result);
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1e3      	bne.n	8005774 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057b0:	4619      	mov	r1, r3
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7fb fc56 	bl	8001064 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057b8:	e023      	b.n	8005802 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d009      	beq.n	80057da <HAL_UART_IRQHandler+0x4ea>
 80057c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fad3 	bl	8005d7e <UART_Transmit_IT>
    return;
 80057d8:	e014      	b.n	8005804 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00e      	beq.n	8005804 <HAL_UART_IRQHandler+0x514>
 80057e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d008      	beq.n	8005804 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fb13 	bl	8005e1e <UART_EndTransmit_IT>
    return;
 80057f8:	e004      	b.n	8005804 <HAL_UART_IRQHandler+0x514>
    return;
 80057fa:	bf00      	nop
 80057fc:	e002      	b.n	8005804 <HAL_UART_IRQHandler+0x514>
      return;
 80057fe:	bf00      	nop
 8005800:	e000      	b.n	8005804 <HAL_UART_IRQHandler+0x514>
      return;
 8005802:	bf00      	nop
  }
}
 8005804:	37e8      	adds	r7, #232	; 0xe8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop

0800580c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b090      	sub	sp, #64	; 0x40
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005874:	2b00      	cmp	r3, #0
 8005876:	d137      	bne.n	80058e8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800587a:	2200      	movs	r2, #0
 800587c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800587e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3314      	adds	r3, #20
 8005884:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	e853 3f00 	ldrex	r3, [r3]
 800588c:	623b      	str	r3, [r7, #32]
   return(result);
 800588e:	6a3b      	ldr	r3, [r7, #32]
 8005890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005894:	63bb      	str	r3, [r7, #56]	; 0x38
 8005896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3314      	adds	r3, #20
 800589c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800589e:	633a      	str	r2, [r7, #48]	; 0x30
 80058a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e5      	bne.n	800587e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	330c      	adds	r3, #12
 80058b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058c8:	637b      	str	r3, [r7, #52]	; 0x34
 80058ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	330c      	adds	r3, #12
 80058d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058d2:	61fa      	str	r2, [r7, #28]
 80058d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	69b9      	ldr	r1, [r7, #24]
 80058d8:	69fa      	ldr	r2, [r7, #28]
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	617b      	str	r3, [r7, #20]
   return(result);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e5      	bne.n	80058b2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058e6:	e002      	b.n	80058ee <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80058e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80058ea:	f7ff ff8f 	bl	800580c <HAL_UART_TxCpltCallback>
}
 80058ee:	bf00      	nop
 80058f0:	3740      	adds	r7, #64	; 0x40
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f7ff ff8b 	bl	8005820 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800590a:	bf00      	nop
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b09c      	sub	sp, #112	; 0x70
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592a:	2b00      	cmp	r3, #0
 800592c:	d172      	bne.n	8005a14 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800592e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005930:	2200      	movs	r2, #0
 8005932:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	330c      	adds	r3, #12
 800593a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800593e:	e853 3f00 	ldrex	r3, [r3]
 8005942:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005946:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800594a:	66bb      	str	r3, [r7, #104]	; 0x68
 800594c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	330c      	adds	r3, #12
 8005952:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005954:	65ba      	str	r2, [r7, #88]	; 0x58
 8005956:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005958:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800595a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800595c:	e841 2300 	strex	r3, r2, [r1]
 8005960:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1e5      	bne.n	8005934 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3314      	adds	r3, #20
 800596e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005972:	e853 3f00 	ldrex	r3, [r3]
 8005976:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597a:	f023 0301 	bic.w	r3, r3, #1
 800597e:	667b      	str	r3, [r7, #100]	; 0x64
 8005980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3314      	adds	r3, #20
 8005986:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005988:	647a      	str	r2, [r7, #68]	; 0x44
 800598a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800598e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005990:	e841 2300 	strex	r3, r2, [r1]
 8005994:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1e5      	bne.n	8005968 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800599c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3314      	adds	r3, #20
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	e853 3f00 	ldrex	r3, [r3]
 80059aa:	623b      	str	r3, [r7, #32]
   return(result);
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b2:	663b      	str	r3, [r7, #96]	; 0x60
 80059b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3314      	adds	r3, #20
 80059ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059bc:	633a      	str	r2, [r7, #48]	; 0x30
 80059be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059c4:	e841 2300 	strex	r3, r2, [r1]
 80059c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1e5      	bne.n	800599c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d2:	2220      	movs	r2, #32
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d119      	bne.n	8005a14 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330c      	adds	r3, #12
 80059e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0310 	bic.w	r3, r3, #16
 80059f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a00:	61fa      	str	r2, [r7, #28]
 8005a02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	69b9      	ldr	r1, [r7, #24]
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	e841 2300 	strex	r3, r2, [r1]
 8005a0c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e5      	bne.n	80059e0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d106      	bne.n	8005a2a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a20:	4619      	mov	r1, r3
 8005a22:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005a24:	f7fb fb1e 	bl	8001064 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a28:	e002      	b.n	8005a30 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005a2a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005a2c:	f7ff ff02 	bl	8005834 <HAL_UART_RxCpltCallback>
}
 8005a30:	bf00      	nop
 8005a32:	3770      	adds	r7, #112	; 0x70
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a44:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d108      	bne.n	8005a60 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a52:	085b      	lsrs	r3, r3, #1
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	4619      	mov	r1, r3
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f7fb fb03 	bl	8001064 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a5e:	e002      	b.n	8005a66 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7ff fef1 	bl	8005848 <HAL_UART_RxHalfCpltCallback>
}
 8005a66:	bf00      	nop
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b084      	sub	sp, #16
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8a:	2b80      	cmp	r3, #128	; 0x80
 8005a8c:	bf0c      	ite	eq
 8005a8e:	2301      	moveq	r3, #1
 8005a90:	2300      	movne	r3, #0
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b21      	cmp	r3, #33	; 0x21
 8005aa0:	d108      	bne.n	8005ab4 <UART_DMAError+0x46>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d005      	beq.n	8005ab4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005aae:	68b8      	ldr	r0, [r7, #8]
 8005ab0:	f000 f8c6 	bl	8005c40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abe:	2b40      	cmp	r3, #64	; 0x40
 8005ac0:	bf0c      	ite	eq
 8005ac2:	2301      	moveq	r3, #1
 8005ac4:	2300      	movne	r3, #0
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b22      	cmp	r3, #34	; 0x22
 8005ad4:	d108      	bne.n	8005ae8 <UART_DMAError+0x7a>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005ae2:	68b8      	ldr	r0, [r7, #8]
 8005ae4:	f000 f8d4 	bl	8005c90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aec:	f043 0210 	orr.w	r2, r3, #16
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005af4:	68b8      	ldr	r0, [r7, #8]
 8005af6:	f7fb fac7 	bl	8001088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005afa:	bf00      	nop
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b098      	sub	sp, #96	; 0x60
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	88fa      	ldrh	r2, [r7, #6]
 8005b1c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2222      	movs	r2, #34	; 0x22
 8005b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b30:	4a40      	ldr	r2, [pc, #256]	; (8005c34 <UART_Start_Receive_DMA+0x130>)
 8005b32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	4a3f      	ldr	r2, [pc, #252]	; (8005c38 <UART_Start_Receive_DMA+0x134>)
 8005b3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b40:	4a3e      	ldr	r2, [pc, #248]	; (8005c3c <UART_Start_Receive_DMA+0x138>)
 8005b42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b48:	2200      	movs	r2, #0
 8005b4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005b4c:	f107 0308 	add.w	r3, r7, #8
 8005b50:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	f7fd f82c 	bl	8002bc0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005b68:	2300      	movs	r3, #0
 8005b6a:	613b      	str	r3, [r7, #16]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	613b      	str	r3, [r7, #16]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	613b      	str	r3, [r7, #16]
 8005b7c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d019      	beq.n	8005bc2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	330c      	adds	r3, #12
 8005b94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b98:	e853 3f00 	ldrex	r3, [r3]
 8005b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	330c      	adds	r3, #12
 8005bac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bae:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005bb0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005bb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bb6:	e841 2300 	strex	r3, r2, [r1]
 8005bba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1e5      	bne.n	8005b8e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3314      	adds	r3, #20
 8005bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd4:	f043 0301 	orr.w	r3, r3, #1
 8005bd8:	657b      	str	r3, [r7, #84]	; 0x54
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3314      	adds	r3, #20
 8005be0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005be2:	63ba      	str	r2, [r7, #56]	; 0x38
 8005be4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005be8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e5      	bne.n	8005bc2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3314      	adds	r3, #20
 8005bfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	617b      	str	r3, [r7, #20]
   return(result);
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c0c:	653b      	str	r3, [r7, #80]	; 0x50
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3314      	adds	r3, #20
 8005c14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c16:	627a      	str	r2, [r7, #36]	; 0x24
 8005c18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6a39      	ldr	r1, [r7, #32]
 8005c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e5      	bne.n	8005bf6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3760      	adds	r7, #96	; 0x60
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	08005913 	.word	0x08005913
 8005c38:	08005a39 	.word	0x08005a39
 8005c3c:	08005a6f 	.word	0x08005a6f

08005c40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b089      	sub	sp, #36	; 0x24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	330c      	adds	r3, #12
 8005c4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c5e:	61fb      	str	r3, [r7, #28]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	330c      	adds	r3, #12
 8005c66:	69fa      	ldr	r2, [r7, #28]
 8005c68:	61ba      	str	r2, [r7, #24]
 8005c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	6979      	ldr	r1, [r7, #20]
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	613b      	str	r3, [r7, #16]
   return(result);
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e5      	bne.n	8005c48 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005c84:	bf00      	nop
 8005c86:	3724      	adds	r7, #36	; 0x24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b095      	sub	sp, #84	; 0x54
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	330c      	adds	r3, #12
 8005c9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca2:	e853 3f00 	ldrex	r3, [r3]
 8005ca6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005caa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	330c      	adds	r3, #12
 8005cb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cb8:	643a      	str	r2, [r7, #64]	; 0x40
 8005cba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cc0:	e841 2300 	strex	r3, r2, [r1]
 8005cc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1e5      	bne.n	8005c98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	3314      	adds	r3, #20
 8005cd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	e853 3f00 	ldrex	r3, [r3]
 8005cda:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	f023 0301 	bic.w	r3, r3, #1
 8005ce2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	3314      	adds	r3, #20
 8005cea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cf4:	e841 2300 	strex	r3, r2, [r1]
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1e5      	bne.n	8005ccc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d119      	bne.n	8005d3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	330c      	adds	r3, #12
 8005d0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	e853 3f00 	ldrex	r3, [r3]
 8005d16:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f023 0310 	bic.w	r3, r3, #16
 8005d1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	330c      	adds	r3, #12
 8005d26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d28:	61ba      	str	r2, [r7, #24]
 8005d2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2c:	6979      	ldr	r1, [r7, #20]
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	e841 2300 	strex	r3, r2, [r1]
 8005d34:	613b      	str	r3, [r7, #16]
   return(result);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1e5      	bne.n	8005d08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d4a:	bf00      	nop
 8005d4c:	3754      	adds	r7, #84	; 0x54
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b084      	sub	sp, #16
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f7fb f989 	bl	8001088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d76:	bf00      	nop
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b085      	sub	sp, #20
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b21      	cmp	r3, #33	; 0x21
 8005d90:	d13e      	bne.n	8005e10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d9a:	d114      	bne.n	8005dc6 <UART_Transmit_IT+0x48>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d110      	bne.n	8005dc6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	461a      	mov	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005db8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	1c9a      	adds	r2, r3, #2
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	621a      	str	r2, [r3, #32]
 8005dc4:	e008      	b.n	8005dd8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	1c59      	adds	r1, r3, #1
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6211      	str	r1, [r2, #32]
 8005dd0:	781a      	ldrb	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	3b01      	subs	r3, #1
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	4619      	mov	r1, r3
 8005de6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10f      	bne.n	8005e0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dfa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	e000      	b.n	8005e12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e10:	2302      	movs	r3, #2
  }
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b082      	sub	sp, #8
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68da      	ldr	r2, [r3, #12]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f7ff fce4 	bl	800580c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b08c      	sub	sp, #48	; 0x30
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b22      	cmp	r3, #34	; 0x22
 8005e60:	f040 80ab 	bne.w	8005fba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e6c:	d117      	bne.n	8005e9e <UART_Receive_IT+0x50>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d113      	bne.n	8005e9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e76:	2300      	movs	r3, #0
 8005e78:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e96:	1c9a      	adds	r2, r3, #2
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8005e9c:	e026      	b.n	8005eec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb0:	d007      	beq.n	8005ec2 <UART_Receive_IT+0x74>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10a      	bne.n	8005ed0 <UART_Receive_IT+0x82>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d106      	bne.n	8005ed0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ecc:	701a      	strb	r2, [r3, #0]
 8005ece:	e008      	b.n	8005ee2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	4619      	mov	r1, r3
 8005efa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d15a      	bne.n	8005fb6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0220 	bic.w	r2, r2, #32
 8005f0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68da      	ldr	r2, [r3, #12]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695a      	ldr	r2, [r3, #20]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0201 	bic.w	r2, r2, #1
 8005f2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d135      	bne.n	8005fac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	330c      	adds	r3, #12
 8005f4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	e853 3f00 	ldrex	r3, [r3]
 8005f54:	613b      	str	r3, [r7, #16]
   return(result);
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f023 0310 	bic.w	r3, r3, #16
 8005f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	330c      	adds	r3, #12
 8005f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f66:	623a      	str	r2, [r7, #32]
 8005f68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6a:	69f9      	ldr	r1, [r7, #28]
 8005f6c:	6a3a      	ldr	r2, [r7, #32]
 8005f6e:	e841 2300 	strex	r3, r2, [r1]
 8005f72:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1e5      	bne.n	8005f46 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0310 	and.w	r3, r3, #16
 8005f84:	2b10      	cmp	r3, #16
 8005f86:	d10a      	bne.n	8005f9e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f88:	2300      	movs	r3, #0
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7fb f85d 	bl	8001064 <HAL_UARTEx_RxEventCallback>
 8005faa:	e002      	b.n	8005fb2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f7ff fc41 	bl	8005834 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e002      	b.n	8005fbc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	e000      	b.n	8005fbc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005fba:	2302      	movs	r3, #2
  }
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3730      	adds	r7, #48	; 0x30
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fc8:	b0c0      	sub	sp, #256	; 0x100
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe0:	68d9      	ldr	r1, [r3, #12]
 8005fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	ea40 0301 	orr.w	r3, r0, r1
 8005fec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	431a      	orrs	r2, r3
 8006004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	4313      	orrs	r3, r2
 800600c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800601c:	f021 010c 	bic.w	r1, r1, #12
 8006020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800602a:	430b      	orrs	r3, r1
 800602c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800602e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800603a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603e:	6999      	ldr	r1, [r3, #24]
 8006040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	ea40 0301 	orr.w	r3, r0, r1
 800604a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800604c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	4b8f      	ldr	r3, [pc, #572]	; (8006290 <UART_SetConfig+0x2cc>)
 8006054:	429a      	cmp	r2, r3
 8006056:	d005      	beq.n	8006064 <UART_SetConfig+0xa0>
 8006058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	4b8d      	ldr	r3, [pc, #564]	; (8006294 <UART_SetConfig+0x2d0>)
 8006060:	429a      	cmp	r2, r3
 8006062:	d104      	bne.n	800606e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006064:	f7fd ffc6 	bl	8003ff4 <HAL_RCC_GetPCLK2Freq>
 8006068:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800606c:	e003      	b.n	8006076 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800606e:	f7fd ffad 	bl	8003fcc <HAL_RCC_GetPCLK1Freq>
 8006072:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006080:	f040 810c 	bne.w	800629c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006088:	2200      	movs	r2, #0
 800608a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800608e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006092:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006096:	4622      	mov	r2, r4
 8006098:	462b      	mov	r3, r5
 800609a:	1891      	adds	r1, r2, r2
 800609c:	65b9      	str	r1, [r7, #88]	; 0x58
 800609e:	415b      	adcs	r3, r3
 80060a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060a6:	4621      	mov	r1, r4
 80060a8:	eb12 0801 	adds.w	r8, r2, r1
 80060ac:	4629      	mov	r1, r5
 80060ae:	eb43 0901 	adc.w	r9, r3, r1
 80060b2:	f04f 0200 	mov.w	r2, #0
 80060b6:	f04f 0300 	mov.w	r3, #0
 80060ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060c6:	4690      	mov	r8, r2
 80060c8:	4699      	mov	r9, r3
 80060ca:	4623      	mov	r3, r4
 80060cc:	eb18 0303 	adds.w	r3, r8, r3
 80060d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060d4:	462b      	mov	r3, r5
 80060d6:	eb49 0303 	adc.w	r3, r9, r3
 80060da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060f2:	460b      	mov	r3, r1
 80060f4:	18db      	adds	r3, r3, r3
 80060f6:	653b      	str	r3, [r7, #80]	; 0x50
 80060f8:	4613      	mov	r3, r2
 80060fa:	eb42 0303 	adc.w	r3, r2, r3
 80060fe:	657b      	str	r3, [r7, #84]	; 0x54
 8006100:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006104:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006108:	f7fa f86a 	bl	80001e0 <__aeabi_uldivmod>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	4b61      	ldr	r3, [pc, #388]	; (8006298 <UART_SetConfig+0x2d4>)
 8006112:	fba3 2302 	umull	r2, r3, r3, r2
 8006116:	095b      	lsrs	r3, r3, #5
 8006118:	011c      	lsls	r4, r3, #4
 800611a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800611e:	2200      	movs	r2, #0
 8006120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006124:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006128:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800612c:	4642      	mov	r2, r8
 800612e:	464b      	mov	r3, r9
 8006130:	1891      	adds	r1, r2, r2
 8006132:	64b9      	str	r1, [r7, #72]	; 0x48
 8006134:	415b      	adcs	r3, r3
 8006136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006138:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800613c:	4641      	mov	r1, r8
 800613e:	eb12 0a01 	adds.w	sl, r2, r1
 8006142:	4649      	mov	r1, r9
 8006144:	eb43 0b01 	adc.w	fp, r3, r1
 8006148:	f04f 0200 	mov.w	r2, #0
 800614c:	f04f 0300 	mov.w	r3, #0
 8006150:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006154:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006158:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800615c:	4692      	mov	sl, r2
 800615e:	469b      	mov	fp, r3
 8006160:	4643      	mov	r3, r8
 8006162:	eb1a 0303 	adds.w	r3, sl, r3
 8006166:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800616a:	464b      	mov	r3, r9
 800616c:	eb4b 0303 	adc.w	r3, fp, r3
 8006170:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006180:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006184:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006188:	460b      	mov	r3, r1
 800618a:	18db      	adds	r3, r3, r3
 800618c:	643b      	str	r3, [r7, #64]	; 0x40
 800618e:	4613      	mov	r3, r2
 8006190:	eb42 0303 	adc.w	r3, r2, r3
 8006194:	647b      	str	r3, [r7, #68]	; 0x44
 8006196:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800619a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800619e:	f7fa f81f 	bl	80001e0 <__aeabi_uldivmod>
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	4611      	mov	r1, r2
 80061a8:	4b3b      	ldr	r3, [pc, #236]	; (8006298 <UART_SetConfig+0x2d4>)
 80061aa:	fba3 2301 	umull	r2, r3, r3, r1
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	2264      	movs	r2, #100	; 0x64
 80061b2:	fb02 f303 	mul.w	r3, r2, r3
 80061b6:	1acb      	subs	r3, r1, r3
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061be:	4b36      	ldr	r3, [pc, #216]	; (8006298 <UART_SetConfig+0x2d4>)
 80061c0:	fba3 2302 	umull	r2, r3, r3, r2
 80061c4:	095b      	lsrs	r3, r3, #5
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061cc:	441c      	add	r4, r3
 80061ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061d2:	2200      	movs	r2, #0
 80061d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061e0:	4642      	mov	r2, r8
 80061e2:	464b      	mov	r3, r9
 80061e4:	1891      	adds	r1, r2, r2
 80061e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80061e8:	415b      	adcs	r3, r3
 80061ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061f0:	4641      	mov	r1, r8
 80061f2:	1851      	adds	r1, r2, r1
 80061f4:	6339      	str	r1, [r7, #48]	; 0x30
 80061f6:	4649      	mov	r1, r9
 80061f8:	414b      	adcs	r3, r1
 80061fa:	637b      	str	r3, [r7, #52]	; 0x34
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006208:	4659      	mov	r1, fp
 800620a:	00cb      	lsls	r3, r1, #3
 800620c:	4651      	mov	r1, sl
 800620e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006212:	4651      	mov	r1, sl
 8006214:	00ca      	lsls	r2, r1, #3
 8006216:	4610      	mov	r0, r2
 8006218:	4619      	mov	r1, r3
 800621a:	4603      	mov	r3, r0
 800621c:	4642      	mov	r2, r8
 800621e:	189b      	adds	r3, r3, r2
 8006220:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006224:	464b      	mov	r3, r9
 8006226:	460a      	mov	r2, r1
 8006228:	eb42 0303 	adc.w	r3, r2, r3
 800622c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800623c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006240:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006244:	460b      	mov	r3, r1
 8006246:	18db      	adds	r3, r3, r3
 8006248:	62bb      	str	r3, [r7, #40]	; 0x28
 800624a:	4613      	mov	r3, r2
 800624c:	eb42 0303 	adc.w	r3, r2, r3
 8006250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006252:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006256:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800625a:	f7f9 ffc1 	bl	80001e0 <__aeabi_uldivmod>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4b0d      	ldr	r3, [pc, #52]	; (8006298 <UART_SetConfig+0x2d4>)
 8006264:	fba3 1302 	umull	r1, r3, r3, r2
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	2164      	movs	r1, #100	; 0x64
 800626c:	fb01 f303 	mul.w	r3, r1, r3
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	3332      	adds	r3, #50	; 0x32
 8006276:	4a08      	ldr	r2, [pc, #32]	; (8006298 <UART_SetConfig+0x2d4>)
 8006278:	fba2 2303 	umull	r2, r3, r2, r3
 800627c:	095b      	lsrs	r3, r3, #5
 800627e:	f003 0207 	and.w	r2, r3, #7
 8006282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4422      	add	r2, r4
 800628a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800628c:	e105      	b.n	800649a <UART_SetConfig+0x4d6>
 800628e:	bf00      	nop
 8006290:	40011000 	.word	0x40011000
 8006294:	40011400 	.word	0x40011400
 8006298:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800629c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062a0:	2200      	movs	r2, #0
 80062a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80062ae:	4642      	mov	r2, r8
 80062b0:	464b      	mov	r3, r9
 80062b2:	1891      	adds	r1, r2, r2
 80062b4:	6239      	str	r1, [r7, #32]
 80062b6:	415b      	adcs	r3, r3
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062be:	4641      	mov	r1, r8
 80062c0:	1854      	adds	r4, r2, r1
 80062c2:	4649      	mov	r1, r9
 80062c4:	eb43 0501 	adc.w	r5, r3, r1
 80062c8:	f04f 0200 	mov.w	r2, #0
 80062cc:	f04f 0300 	mov.w	r3, #0
 80062d0:	00eb      	lsls	r3, r5, #3
 80062d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062d6:	00e2      	lsls	r2, r4, #3
 80062d8:	4614      	mov	r4, r2
 80062da:	461d      	mov	r5, r3
 80062dc:	4643      	mov	r3, r8
 80062de:	18e3      	adds	r3, r4, r3
 80062e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062e4:	464b      	mov	r3, r9
 80062e6:	eb45 0303 	adc.w	r3, r5, r3
 80062ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	f04f 0300 	mov.w	r3, #0
 8006306:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800630a:	4629      	mov	r1, r5
 800630c:	008b      	lsls	r3, r1, #2
 800630e:	4621      	mov	r1, r4
 8006310:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006314:	4621      	mov	r1, r4
 8006316:	008a      	lsls	r2, r1, #2
 8006318:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800631c:	f7f9 ff60 	bl	80001e0 <__aeabi_uldivmod>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4b60      	ldr	r3, [pc, #384]	; (80064a8 <UART_SetConfig+0x4e4>)
 8006326:	fba3 2302 	umull	r2, r3, r3, r2
 800632a:	095b      	lsrs	r3, r3, #5
 800632c:	011c      	lsls	r4, r3, #4
 800632e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006332:	2200      	movs	r2, #0
 8006334:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006338:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800633c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006340:	4642      	mov	r2, r8
 8006342:	464b      	mov	r3, r9
 8006344:	1891      	adds	r1, r2, r2
 8006346:	61b9      	str	r1, [r7, #24]
 8006348:	415b      	adcs	r3, r3
 800634a:	61fb      	str	r3, [r7, #28]
 800634c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006350:	4641      	mov	r1, r8
 8006352:	1851      	adds	r1, r2, r1
 8006354:	6139      	str	r1, [r7, #16]
 8006356:	4649      	mov	r1, r9
 8006358:	414b      	adcs	r3, r1
 800635a:	617b      	str	r3, [r7, #20]
 800635c:	f04f 0200 	mov.w	r2, #0
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006368:	4659      	mov	r1, fp
 800636a:	00cb      	lsls	r3, r1, #3
 800636c:	4651      	mov	r1, sl
 800636e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006372:	4651      	mov	r1, sl
 8006374:	00ca      	lsls	r2, r1, #3
 8006376:	4610      	mov	r0, r2
 8006378:	4619      	mov	r1, r3
 800637a:	4603      	mov	r3, r0
 800637c:	4642      	mov	r2, r8
 800637e:	189b      	adds	r3, r3, r2
 8006380:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006384:	464b      	mov	r3, r9
 8006386:	460a      	mov	r2, r1
 8006388:	eb42 0303 	adc.w	r3, r2, r3
 800638c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	67bb      	str	r3, [r7, #120]	; 0x78
 800639a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800639c:	f04f 0200 	mov.w	r2, #0
 80063a0:	f04f 0300 	mov.w	r3, #0
 80063a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80063a8:	4649      	mov	r1, r9
 80063aa:	008b      	lsls	r3, r1, #2
 80063ac:	4641      	mov	r1, r8
 80063ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063b2:	4641      	mov	r1, r8
 80063b4:	008a      	lsls	r2, r1, #2
 80063b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80063ba:	f7f9 ff11 	bl	80001e0 <__aeabi_uldivmod>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4b39      	ldr	r3, [pc, #228]	; (80064a8 <UART_SetConfig+0x4e4>)
 80063c4:	fba3 1302 	umull	r1, r3, r3, r2
 80063c8:	095b      	lsrs	r3, r3, #5
 80063ca:	2164      	movs	r1, #100	; 0x64
 80063cc:	fb01 f303 	mul.w	r3, r1, r3
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	011b      	lsls	r3, r3, #4
 80063d4:	3332      	adds	r3, #50	; 0x32
 80063d6:	4a34      	ldr	r2, [pc, #208]	; (80064a8 <UART_SetConfig+0x4e4>)
 80063d8:	fba2 2303 	umull	r2, r3, r2, r3
 80063dc:	095b      	lsrs	r3, r3, #5
 80063de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063e2:	441c      	add	r4, r3
 80063e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063e8:	2200      	movs	r2, #0
 80063ea:	673b      	str	r3, [r7, #112]	; 0x70
 80063ec:	677a      	str	r2, [r7, #116]	; 0x74
 80063ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063f2:	4642      	mov	r2, r8
 80063f4:	464b      	mov	r3, r9
 80063f6:	1891      	adds	r1, r2, r2
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	415b      	adcs	r3, r3
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006402:	4641      	mov	r1, r8
 8006404:	1851      	adds	r1, r2, r1
 8006406:	6039      	str	r1, [r7, #0]
 8006408:	4649      	mov	r1, r9
 800640a:	414b      	adcs	r3, r1
 800640c:	607b      	str	r3, [r7, #4]
 800640e:	f04f 0200 	mov.w	r2, #0
 8006412:	f04f 0300 	mov.w	r3, #0
 8006416:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800641a:	4659      	mov	r1, fp
 800641c:	00cb      	lsls	r3, r1, #3
 800641e:	4651      	mov	r1, sl
 8006420:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006424:	4651      	mov	r1, sl
 8006426:	00ca      	lsls	r2, r1, #3
 8006428:	4610      	mov	r0, r2
 800642a:	4619      	mov	r1, r3
 800642c:	4603      	mov	r3, r0
 800642e:	4642      	mov	r2, r8
 8006430:	189b      	adds	r3, r3, r2
 8006432:	66bb      	str	r3, [r7, #104]	; 0x68
 8006434:	464b      	mov	r3, r9
 8006436:	460a      	mov	r2, r1
 8006438:	eb42 0303 	adc.w	r3, r2, r3
 800643c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800643e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	663b      	str	r3, [r7, #96]	; 0x60
 8006448:	667a      	str	r2, [r7, #100]	; 0x64
 800644a:	f04f 0200 	mov.w	r2, #0
 800644e:	f04f 0300 	mov.w	r3, #0
 8006452:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006456:	4649      	mov	r1, r9
 8006458:	008b      	lsls	r3, r1, #2
 800645a:	4641      	mov	r1, r8
 800645c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006460:	4641      	mov	r1, r8
 8006462:	008a      	lsls	r2, r1, #2
 8006464:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006468:	f7f9 feba 	bl	80001e0 <__aeabi_uldivmod>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4b0d      	ldr	r3, [pc, #52]	; (80064a8 <UART_SetConfig+0x4e4>)
 8006472:	fba3 1302 	umull	r1, r3, r3, r2
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	2164      	movs	r1, #100	; 0x64
 800647a:	fb01 f303 	mul.w	r3, r1, r3
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	011b      	lsls	r3, r3, #4
 8006482:	3332      	adds	r3, #50	; 0x32
 8006484:	4a08      	ldr	r2, [pc, #32]	; (80064a8 <UART_SetConfig+0x4e4>)
 8006486:	fba2 2303 	umull	r2, r3, r2, r3
 800648a:	095b      	lsrs	r3, r3, #5
 800648c:	f003 020f 	and.w	r2, r3, #15
 8006490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4422      	add	r2, r4
 8006498:	609a      	str	r2, [r3, #8]
}
 800649a:	bf00      	nop
 800649c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064a0:	46bd      	mov	sp, r7
 80064a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064a6:	bf00      	nop
 80064a8:	51eb851f 	.word	0x51eb851f

080064ac <__NVIC_SetPriority>:
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	4603      	mov	r3, r0
 80064b4:	6039      	str	r1, [r7, #0]
 80064b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	db0a      	blt.n	80064d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	490c      	ldr	r1, [pc, #48]	; (80064f8 <__NVIC_SetPriority+0x4c>)
 80064c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ca:	0112      	lsls	r2, r2, #4
 80064cc:	b2d2      	uxtb	r2, r2
 80064ce:	440b      	add	r3, r1
 80064d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80064d4:	e00a      	b.n	80064ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	4908      	ldr	r1, [pc, #32]	; (80064fc <__NVIC_SetPriority+0x50>)
 80064dc:	79fb      	ldrb	r3, [r7, #7]
 80064de:	f003 030f 	and.w	r3, r3, #15
 80064e2:	3b04      	subs	r3, #4
 80064e4:	0112      	lsls	r2, r2, #4
 80064e6:	b2d2      	uxtb	r2, r2
 80064e8:	440b      	add	r3, r1
 80064ea:	761a      	strb	r2, [r3, #24]
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	e000e100 	.word	0xe000e100
 80064fc:	e000ed00 	.word	0xe000ed00

08006500 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006504:	2100      	movs	r1, #0
 8006506:	f06f 0004 	mvn.w	r0, #4
 800650a:	f7ff ffcf 	bl	80064ac <__NVIC_SetPriority>
#endif
}
 800650e:	bf00      	nop
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800651a:	f3ef 8305 	mrs	r3, IPSR
 800651e:	603b      	str	r3, [r7, #0]
  return(result);
 8006520:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006526:	f06f 0305 	mvn.w	r3, #5
 800652a:	607b      	str	r3, [r7, #4]
 800652c:	e00c      	b.n	8006548 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800652e:	4b0a      	ldr	r3, [pc, #40]	; (8006558 <osKernelInitialize+0x44>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d105      	bne.n	8006542 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006536:	4b08      	ldr	r3, [pc, #32]	; (8006558 <osKernelInitialize+0x44>)
 8006538:	2201      	movs	r2, #1
 800653a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800653c:	2300      	movs	r3, #0
 800653e:	607b      	str	r3, [r7, #4]
 8006540:	e002      	b.n	8006548 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006542:	f04f 33ff 	mov.w	r3, #4294967295
 8006546:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006548:	687b      	ldr	r3, [r7, #4]
}
 800654a:	4618      	mov	r0, r3
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	200007b8 	.word	0x200007b8

0800655c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006562:	f3ef 8305 	mrs	r3, IPSR
 8006566:	603b      	str	r3, [r7, #0]
  return(result);
 8006568:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <osKernelStart+0x1a>
    stat = osErrorISR;
 800656e:	f06f 0305 	mvn.w	r3, #5
 8006572:	607b      	str	r3, [r7, #4]
 8006574:	e010      	b.n	8006598 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006576:	4b0b      	ldr	r3, [pc, #44]	; (80065a4 <osKernelStart+0x48>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d109      	bne.n	8006592 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800657e:	f7ff ffbf 	bl	8006500 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006582:	4b08      	ldr	r3, [pc, #32]	; (80065a4 <osKernelStart+0x48>)
 8006584:	2202      	movs	r2, #2
 8006586:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006588:	f001 f87c 	bl	8007684 <vTaskStartScheduler>
      stat = osOK;
 800658c:	2300      	movs	r3, #0
 800658e:	607b      	str	r3, [r7, #4]
 8006590:	e002      	b.n	8006598 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006592:	f04f 33ff 	mov.w	r3, #4294967295
 8006596:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006598:	687b      	ldr	r3, [r7, #4]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	200007b8 	.word	0x200007b8

080065a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08e      	sub	sp, #56	; 0x38
 80065ac:	af04      	add	r7, sp, #16
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80065b4:	2300      	movs	r3, #0
 80065b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065b8:	f3ef 8305 	mrs	r3, IPSR
 80065bc:	617b      	str	r3, [r7, #20]
  return(result);
 80065be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d17e      	bne.n	80066c2 <osThreadNew+0x11a>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d07b      	beq.n	80066c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80065ca:	2380      	movs	r3, #128	; 0x80
 80065cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80065ce:	2318      	movs	r3, #24
 80065d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80065d2:	2300      	movs	r3, #0
 80065d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80065d6:	f04f 33ff 	mov.w	r3, #4294967295
 80065da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d045      	beq.n	800666e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <osThreadNew+0x48>
        name = attr->name;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d008      	beq.n	8006616 <osThreadNew+0x6e>
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	2b38      	cmp	r3, #56	; 0x38
 8006608:	d805      	bhi.n	8006616 <osThreadNew+0x6e>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <osThreadNew+0x72>
        return (NULL);
 8006616:	2300      	movs	r3, #0
 8006618:	e054      	b.n	80066c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	089b      	lsrs	r3, r3, #2
 8006628:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00e      	beq.n	8006650 <osThreadNew+0xa8>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	2bbb      	cmp	r3, #187	; 0xbb
 8006638:	d90a      	bls.n	8006650 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800663e:	2b00      	cmp	r3, #0
 8006640:	d006      	beq.n	8006650 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <osThreadNew+0xa8>
        mem = 1;
 800664a:	2301      	movs	r3, #1
 800664c:	61bb      	str	r3, [r7, #24]
 800664e:	e010      	b.n	8006672 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10c      	bne.n	8006672 <osThreadNew+0xca>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d108      	bne.n	8006672 <osThreadNew+0xca>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d104      	bne.n	8006672 <osThreadNew+0xca>
          mem = 0;
 8006668:	2300      	movs	r3, #0
 800666a:	61bb      	str	r3, [r7, #24]
 800666c:	e001      	b.n	8006672 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800666e:	2300      	movs	r3, #0
 8006670:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d110      	bne.n	800669a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006680:	9202      	str	r2, [sp, #8]
 8006682:	9301      	str	r3, [sp, #4]
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	6a3a      	ldr	r2, [r7, #32]
 800668c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 fe0c 	bl	80072ac <xTaskCreateStatic>
 8006694:	4603      	mov	r3, r0
 8006696:	613b      	str	r3, [r7, #16]
 8006698:	e013      	b.n	80066c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d110      	bne.n	80066c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	f107 0310 	add.w	r3, r7, #16
 80066a8:	9301      	str	r3, [sp, #4]
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 fe57 	bl	8007366 <xTaskCreate>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d001      	beq.n	80066c2 <osThreadNew+0x11a>
            hTask = NULL;
 80066be:	2300      	movs	r3, #0
 80066c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066c2:	693b      	ldr	r3, [r7, #16]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3728      	adds	r7, #40	; 0x28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066d4:	f3ef 8305 	mrs	r3, IPSR
 80066d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80066da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <osDelay+0x1c>
    stat = osErrorISR;
 80066e0:	f06f 0305 	mvn.w	r3, #5
 80066e4:	60fb      	str	r3, [r7, #12]
 80066e6:	e007      	b.n	80066f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 ff92 	bl	800761c <vTaskDelay>
    }
  }

  return (stat);
 80066f8:	68fb      	ldr	r3, [r7, #12]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
	...

08006704 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4a07      	ldr	r2, [pc, #28]	; (8006730 <vApplicationGetIdleTaskMemory+0x2c>)
 8006714:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	4a06      	ldr	r2, [pc, #24]	; (8006734 <vApplicationGetIdleTaskMemory+0x30>)
 800671a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2280      	movs	r2, #128	; 0x80
 8006720:	601a      	str	r2, [r3, #0]
}
 8006722:	bf00      	nop
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	200007bc 	.word	0x200007bc
 8006734:	20000878 	.word	0x20000878

08006738 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4a07      	ldr	r2, [pc, #28]	; (8006764 <vApplicationGetTimerTaskMemory+0x2c>)
 8006748:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	4a06      	ldr	r2, [pc, #24]	; (8006768 <vApplicationGetTimerTaskMemory+0x30>)
 800674e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006756:	601a      	str	r2, [r3, #0]
}
 8006758:	bf00      	nop
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	20000a78 	.word	0x20000a78
 8006768:	20000b34 	.word	0x20000b34

0800676c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f103 0208 	add.w	r2, r3, #8
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f04f 32ff 	mov.w	r2, #4294967295
 8006784:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f103 0208 	add.w	r2, r3, #8
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f103 0208 	add.w	r2, r3, #8
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067ba:	bf00      	nop
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067c6:	b480      	push	{r7}
 80067c8:	b085      	sub	sp, #20
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	601a      	str	r2, [r3, #0]
}
 8006802:	bf00      	nop
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800680e:	b480      	push	{r7}
 8006810:	b085      	sub	sp, #20
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006824:	d103      	bne.n	800682e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	e00c      	b.n	8006848 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	3308      	adds	r3, #8
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	e002      	b.n	800683c <vListInsert+0x2e>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	429a      	cmp	r2, r3
 8006846:	d2f6      	bcs.n	8006836 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	683a      	ldr	r2, [r7, #0]
 8006862:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	601a      	str	r2, [r3, #0]
}
 8006874:	bf00      	nop
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	6892      	ldr	r2, [r2, #8]
 8006896:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	6852      	ldr	r2, [r2, #4]
 80068a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d103      	bne.n	80068b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	1e5a      	subs	r2, r3, #1
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80068fa:	bf00      	nop
 80068fc:	e7fe      	b.n	80068fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80068fe:	f002 f879 	bl	80089f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690a:	68f9      	ldr	r1, [r7, #12]
 800690c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800690e:	fb01 f303 	mul.w	r3, r1, r3
 8006912:	441a      	add	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800692e:	3b01      	subs	r3, #1
 8006930:	68f9      	ldr	r1, [r7, #12]
 8006932:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006934:	fb01 f303 	mul.w	r3, r1, r3
 8006938:	441a      	add	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	22ff      	movs	r2, #255	; 0xff
 8006942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	22ff      	movs	r2, #255	; 0xff
 800694a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d114      	bne.n	800697e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01a      	beq.n	8006992 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	3310      	adds	r3, #16
 8006960:	4618      	mov	r0, r3
 8006962:	f001 f929 	bl	8007bb8 <xTaskRemoveFromEventList>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d012      	beq.n	8006992 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800696c:	4b0c      	ldr	r3, [pc, #48]	; (80069a0 <xQueueGenericReset+0xcc>)
 800696e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	e009      	b.n	8006992 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	3310      	adds	r3, #16
 8006982:	4618      	mov	r0, r3
 8006984:	f7ff fef2 	bl	800676c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3324      	adds	r3, #36	; 0x24
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff feed 	bl	800676c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006992:	f002 f85f 	bl	8008a54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006996:	2301      	movs	r3, #1
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	e000ed04 	.word	0xe000ed04

080069a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08e      	sub	sp, #56	; 0x38
 80069a8:	af02      	add	r7, sp, #8
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069ca:	bf00      	nop
 80069cc:	e7fe      	b.n	80069cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10a      	bne.n	80069ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <xQueueGenericCreateStatic+0x52>
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <xQueueGenericCreateStatic+0x56>
 80069f6:	2301      	movs	r3, #1
 80069f8:	e000      	b.n	80069fc <xQueueGenericCreateStatic+0x58>
 80069fa:	2300      	movs	r3, #0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10a      	bne.n	8006a16 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	623b      	str	r3, [r7, #32]
}
 8006a12:	bf00      	nop
 8006a14:	e7fe      	b.n	8006a14 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d102      	bne.n	8006a22 <xQueueGenericCreateStatic+0x7e>
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <xQueueGenericCreateStatic+0x82>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e000      	b.n	8006a28 <xQueueGenericCreateStatic+0x84>
 8006a26:	2300      	movs	r3, #0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10a      	bne.n	8006a42 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	61fb      	str	r3, [r7, #28]
}
 8006a3e:	bf00      	nop
 8006a40:	e7fe      	b.n	8006a40 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a42:	2350      	movs	r3, #80	; 0x50
 8006a44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b50      	cmp	r3, #80	; 0x50
 8006a4a:	d00a      	beq.n	8006a62 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	61bb      	str	r3, [r7, #24]
}
 8006a5e:	bf00      	nop
 8006a60:	e7fe      	b.n	8006a60 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a62:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00d      	beq.n	8006a8a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a76:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	68b9      	ldr	r1, [r7, #8]
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 f805 	bl	8006a94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3730      	adds	r7, #48	; 0x30
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d103      	bne.n	8006ab0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	e002      	b.n	8006ab6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	69b8      	ldr	r0, [r7, #24]
 8006ac6:	f7ff ff05 	bl	80068d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	78fa      	ldrb	r2, [r7, #3]
 8006ace:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ad2:	bf00      	nop
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08e      	sub	sp, #56	; 0x38
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006aea:	2300      	movs	r3, #0
 8006aec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10a      	bne.n	8006b0e <xQueueGenericSend+0x32>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b0a:	bf00      	nop
 8006b0c:	e7fe      	b.n	8006b0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d103      	bne.n	8006b1c <xQueueGenericSend+0x40>
 8006b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <xQueueGenericSend+0x44>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e000      	b.n	8006b22 <xQueueGenericSend+0x46>
 8006b20:	2300      	movs	r3, #0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10a      	bne.n	8006b3c <xQueueGenericSend+0x60>
	__asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b38:	bf00      	nop
 8006b3a:	e7fe      	b.n	8006b3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d103      	bne.n	8006b4a <xQueueGenericSend+0x6e>
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d101      	bne.n	8006b4e <xQueueGenericSend+0x72>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e000      	b.n	8006b50 <xQueueGenericSend+0x74>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10a      	bne.n	8006b6a <xQueueGenericSend+0x8e>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	623b      	str	r3, [r7, #32]
}
 8006b66:	bf00      	nop
 8006b68:	e7fe      	b.n	8006b68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b6a:	f001 f9e7 	bl	8007f3c <xTaskGetSchedulerState>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d102      	bne.n	8006b7a <xQueueGenericSend+0x9e>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <xQueueGenericSend+0xa2>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e000      	b.n	8006b80 <xQueueGenericSend+0xa4>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10a      	bne.n	8006b9a <xQueueGenericSend+0xbe>
	__asm volatile
 8006b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	61fb      	str	r3, [r7, #28]
}
 8006b96:	bf00      	nop
 8006b98:	e7fe      	b.n	8006b98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b9a:	f001 ff2b 	bl	80089f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d302      	bcc.n	8006bb0 <xQueueGenericSend+0xd4>
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d129      	bne.n	8006c04 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	68b9      	ldr	r1, [r7, #8]
 8006bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bb6:	f000 fa0b 	bl	8006fd0 <prvCopyDataToQueue>
 8006bba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d010      	beq.n	8006be6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc6:	3324      	adds	r3, #36	; 0x24
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 fff5 	bl	8007bb8 <xTaskRemoveFromEventList>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d013      	beq.n	8006bfc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006bd4:	4b3f      	ldr	r3, [pc, #252]	; (8006cd4 <xQueueGenericSend+0x1f8>)
 8006bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	e00a      	b.n	8006bfc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d007      	beq.n	8006bfc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006bec:	4b39      	ldr	r3, [pc, #228]	; (8006cd4 <xQueueGenericSend+0x1f8>)
 8006bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	f3bf 8f4f 	dsb	sy
 8006bf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006bfc:	f001 ff2a 	bl	8008a54 <vPortExitCritical>
				return pdPASS;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e063      	b.n	8006ccc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d103      	bne.n	8006c12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c0a:	f001 ff23 	bl	8008a54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	e05c      	b.n	8006ccc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d106      	bne.n	8006c26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c18:	f107 0314 	add.w	r3, r7, #20
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f001 f82f 	bl	8007c80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c22:	2301      	movs	r3, #1
 8006c24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c26:	f001 ff15 	bl	8008a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c2a:	f000 fd9b 	bl	8007764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c2e:	f001 fee1 	bl	80089f4 <vPortEnterCritical>
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c38:	b25b      	sxtb	r3, r3
 8006c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3e:	d103      	bne.n	8006c48 <xQueueGenericSend+0x16c>
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c4e:	b25b      	sxtb	r3, r3
 8006c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c54:	d103      	bne.n	8006c5e <xQueueGenericSend+0x182>
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c5e:	f001 fef9 	bl	8008a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c62:	1d3a      	adds	r2, r7, #4
 8006c64:	f107 0314 	add.w	r3, r7, #20
 8006c68:	4611      	mov	r1, r2
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f001 f81e 	bl	8007cac <xTaskCheckForTimeOut>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d124      	bne.n	8006cc0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c78:	f000 faa2 	bl	80071c0 <prvIsQueueFull>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d018      	beq.n	8006cb4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	3310      	adds	r3, #16
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	4611      	mov	r1, r2
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 ff44 	bl	8007b18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c92:	f000 fa2d 	bl	80070f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c96:	f000 fd73 	bl	8007780 <xTaskResumeAll>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f47f af7c 	bne.w	8006b9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006ca2:	4b0c      	ldr	r3, [pc, #48]	; (8006cd4 <xQueueGenericSend+0x1f8>)
 8006ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	e772      	b.n	8006b9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cb6:	f000 fa1b 	bl	80070f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cba:	f000 fd61 	bl	8007780 <xTaskResumeAll>
 8006cbe:	e76c      	b.n	8006b9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cc2:	f000 fa15 	bl	80070f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cc6:	f000 fd5b 	bl	8007780 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006cca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3738      	adds	r7, #56	; 0x38
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	e000ed04 	.word	0xe000ed04

08006cd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b090      	sub	sp, #64	; 0x40
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
 8006ce4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10a      	bne.n	8006d06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d103      	bne.n	8006d14 <xQueueGenericSendFromISR+0x3c>
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d101      	bne.n	8006d18 <xQueueGenericSendFromISR+0x40>
 8006d14:	2301      	movs	r3, #1
 8006d16:	e000      	b.n	8006d1a <xQueueGenericSendFromISR+0x42>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10a      	bne.n	8006d34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d30:	bf00      	nop
 8006d32:	e7fe      	b.n	8006d32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d103      	bne.n	8006d42 <xQueueGenericSendFromISR+0x6a>
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <xQueueGenericSendFromISR+0x6e>
 8006d42:	2301      	movs	r3, #1
 8006d44:	e000      	b.n	8006d48 <xQueueGenericSendFromISR+0x70>
 8006d46:	2300      	movs	r3, #0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10a      	bne.n	8006d62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	623b      	str	r3, [r7, #32]
}
 8006d5e:	bf00      	nop
 8006d60:	e7fe      	b.n	8006d60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d62:	f001 ff29 	bl	8008bb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d66:	f3ef 8211 	mrs	r2, BASEPRI
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	61fa      	str	r2, [r7, #28]
 8006d7c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d7e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d80:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d302      	bcc.n	8006d94 <xQueueGenericSendFromISR+0xbc>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d12f      	bne.n	8006df4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	68b9      	ldr	r1, [r7, #8]
 8006da8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006daa:	f000 f911 	bl	8006fd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006dae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db6:	d112      	bne.n	8006dde <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d016      	beq.n	8006dee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc2:	3324      	adds	r3, #36	; 0x24
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 fef7 	bl	8007bb8 <xTaskRemoveFromEventList>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00e      	beq.n	8006dee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00b      	beq.n	8006dee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	601a      	str	r2, [r3, #0]
 8006ddc:	e007      	b.n	8006dee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006dde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006de2:	3301      	adds	r3, #1
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	b25a      	sxtb	r2, r3
 8006de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006dee:	2301      	movs	r3, #1
 8006df0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006df2:	e001      	b.n	8006df8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006df4:	2300      	movs	r3, #0
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3740      	adds	r7, #64	; 0x40
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
	...

08006e10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b08c      	sub	sp, #48	; 0x30
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10a      	bne.n	8006e40 <xQueueReceive+0x30>
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	623b      	str	r3, [r7, #32]
}
 8006e3c:	bf00      	nop
 8006e3e:	e7fe      	b.n	8006e3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d103      	bne.n	8006e4e <xQueueReceive+0x3e>
 8006e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <xQueueReceive+0x42>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e000      	b.n	8006e54 <xQueueReceive+0x44>
 8006e52:	2300      	movs	r3, #0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10a      	bne.n	8006e6e <xQueueReceive+0x5e>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	61fb      	str	r3, [r7, #28]
}
 8006e6a:	bf00      	nop
 8006e6c:	e7fe      	b.n	8006e6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e6e:	f001 f865 	bl	8007f3c <xTaskGetSchedulerState>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d102      	bne.n	8006e7e <xQueueReceive+0x6e>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <xQueueReceive+0x72>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e000      	b.n	8006e84 <xQueueReceive+0x74>
 8006e82:	2300      	movs	r3, #0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10a      	bne.n	8006e9e <xQueueReceive+0x8e>
	__asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	61bb      	str	r3, [r7, #24]
}
 8006e9a:	bf00      	nop
 8006e9c:	e7fe      	b.n	8006e9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e9e:	f001 fda9 	bl	80089f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d01f      	beq.n	8006eee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006eae:	68b9      	ldr	r1, [r7, #8]
 8006eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eb2:	f000 f8f7 	bl	80070a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	1e5a      	subs	r2, r3, #1
 8006eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00f      	beq.n	8006ee6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec8:	3310      	adds	r3, #16
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fe74 	bl	8007bb8 <xTaskRemoveFromEventList>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d007      	beq.n	8006ee6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ed6:	4b3d      	ldr	r3, [pc, #244]	; (8006fcc <xQueueReceive+0x1bc>)
 8006ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ee6:	f001 fdb5 	bl	8008a54 <vPortExitCritical>
				return pdPASS;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e069      	b.n	8006fc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d103      	bne.n	8006efc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ef4:	f001 fdae 	bl	8008a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	e062      	b.n	8006fc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d106      	bne.n	8006f10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f02:	f107 0310 	add.w	r3, r7, #16
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 feba 	bl	8007c80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f10:	f001 fda0 	bl	8008a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f14:	f000 fc26 	bl	8007764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f18:	f001 fd6c 	bl	80089f4 <vPortEnterCritical>
 8006f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f22:	b25b      	sxtb	r3, r3
 8006f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f28:	d103      	bne.n	8006f32 <xQueueReceive+0x122>
 8006f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f38:	b25b      	sxtb	r3, r3
 8006f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3e:	d103      	bne.n	8006f48 <xQueueReceive+0x138>
 8006f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f48:	f001 fd84 	bl	8008a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f4c:	1d3a      	adds	r2, r7, #4
 8006f4e:	f107 0310 	add.w	r3, r7, #16
 8006f52:	4611      	mov	r1, r2
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 fea9 	bl	8007cac <xTaskCheckForTimeOut>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d123      	bne.n	8006fa8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f62:	f000 f917 	bl	8007194 <prvIsQueueEmpty>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d017      	beq.n	8006f9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	3324      	adds	r3, #36	; 0x24
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	4611      	mov	r1, r2
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 fdcf 	bl	8007b18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f7c:	f000 f8b8 	bl	80070f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f80:	f000 fbfe 	bl	8007780 <xTaskResumeAll>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d189      	bne.n	8006e9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006f8a:	4b10      	ldr	r3, [pc, #64]	; (8006fcc <xQueueReceive+0x1bc>)
 8006f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	e780      	b.n	8006e9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f9e:	f000 f8a7 	bl	80070f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fa2:	f000 fbed 	bl	8007780 <xTaskResumeAll>
 8006fa6:	e77a      	b.n	8006e9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006fa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006faa:	f000 f8a1 	bl	80070f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fae:	f000 fbe7 	bl	8007780 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fb4:	f000 f8ee 	bl	8007194 <prvIsQueueEmpty>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f43f af6f 	beq.w	8006e9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3730      	adds	r7, #48	; 0x30
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	e000ed04 	.word	0xe000ed04

08006fd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10d      	bne.n	800700a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d14d      	bne.n	8007092 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 ffbc 	bl	8007f78 <xTaskPriorityDisinherit>
 8007000:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	609a      	str	r2, [r3, #8]
 8007008:	e043      	b.n	8007092 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d119      	bne.n	8007044 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6858      	ldr	r0, [r3, #4]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007018:	461a      	mov	r2, r3
 800701a:	68b9      	ldr	r1, [r7, #8]
 800701c:	f002 f81c 	bl	8009058 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	441a      	add	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	429a      	cmp	r2, r3
 8007038:	d32b      	bcc.n	8007092 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	605a      	str	r2, [r3, #4]
 8007042:	e026      	b.n	8007092 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	68d8      	ldr	r0, [r3, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	461a      	mov	r2, r3
 800704e:	68b9      	ldr	r1, [r7, #8]
 8007050:	f002 f802 	bl	8009058 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	68da      	ldr	r2, [r3, #12]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705c:	425b      	negs	r3, r3
 800705e:	441a      	add	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	429a      	cmp	r2, r3
 800706e:	d207      	bcs.n	8007080 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007078:	425b      	negs	r3, r3
 800707a:	441a      	add	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b02      	cmp	r3, #2
 8007084:	d105      	bne.n	8007092 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d002      	beq.n	8007092 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	3b01      	subs	r3, #1
 8007090:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	1c5a      	adds	r2, r3, #1
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800709a:	697b      	ldr	r3, [r7, #20]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3718      	adds	r7, #24
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d018      	beq.n	80070e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	441a      	add	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68da      	ldr	r2, [r3, #12]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d303      	bcc.n	80070d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68d9      	ldr	r1, [r3, #12]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e0:	461a      	mov	r2, r3
 80070e2:	6838      	ldr	r0, [r7, #0]
 80070e4:	f001 ffb8 	bl	8009058 <memcpy>
	}
}
 80070e8:	bf00      	nop
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80070f8:	f001 fc7c 	bl	80089f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007102:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007104:	e011      	b.n	800712a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	2b00      	cmp	r3, #0
 800710c:	d012      	beq.n	8007134 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	3324      	adds	r3, #36	; 0x24
 8007112:	4618      	mov	r0, r3
 8007114:	f000 fd50 	bl	8007bb8 <xTaskRemoveFromEventList>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800711e:	f000 fe27 	bl	8007d70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007122:	7bfb      	ldrb	r3, [r7, #15]
 8007124:	3b01      	subs	r3, #1
 8007126:	b2db      	uxtb	r3, r3
 8007128:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800712a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800712e:	2b00      	cmp	r3, #0
 8007130:	dce9      	bgt.n	8007106 <prvUnlockQueue+0x16>
 8007132:	e000      	b.n	8007136 <prvUnlockQueue+0x46>
					break;
 8007134:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	22ff      	movs	r2, #255	; 0xff
 800713a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800713e:	f001 fc89 	bl	8008a54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007142:	f001 fc57 	bl	80089f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800714c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800714e:	e011      	b.n	8007174 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d012      	beq.n	800717e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3310      	adds	r3, #16
 800715c:	4618      	mov	r0, r3
 800715e:	f000 fd2b 	bl	8007bb8 <xTaskRemoveFromEventList>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007168:	f000 fe02 	bl	8007d70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	3b01      	subs	r3, #1
 8007170:	b2db      	uxtb	r3, r3
 8007172:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007174:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007178:	2b00      	cmp	r3, #0
 800717a:	dce9      	bgt.n	8007150 <prvUnlockQueue+0x60>
 800717c:	e000      	b.n	8007180 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800717e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	22ff      	movs	r2, #255	; 0xff
 8007184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007188:	f001 fc64 	bl	8008a54 <vPortExitCritical>
}
 800718c:	bf00      	nop
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800719c:	f001 fc2a 	bl	80089f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d102      	bne.n	80071ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071a8:	2301      	movs	r3, #1
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	e001      	b.n	80071b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80071ae:	2300      	movs	r3, #0
 80071b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071b2:	f001 fc4f 	bl	8008a54 <vPortExitCritical>

	return xReturn;
 80071b6:	68fb      	ldr	r3, [r7, #12]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071c8:	f001 fc14 	bl	80089f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d102      	bne.n	80071de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071d8:	2301      	movs	r3, #1
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	e001      	b.n	80071e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071e2:	f001 fc37 	bl	8008a54 <vPortExitCritical>

	return xReturn;
 80071e6:	68fb      	ldr	r3, [r7, #12]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071fa:	2300      	movs	r3, #0
 80071fc:	60fb      	str	r3, [r7, #12]
 80071fe:	e014      	b.n	800722a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007200:	4a0f      	ldr	r2, [pc, #60]	; (8007240 <vQueueAddToRegistry+0x50>)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10b      	bne.n	8007224 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800720c:	490c      	ldr	r1, [pc, #48]	; (8007240 <vQueueAddToRegistry+0x50>)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007216:	4a0a      	ldr	r2, [pc, #40]	; (8007240 <vQueueAddToRegistry+0x50>)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	4413      	add	r3, r2
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007222:	e006      	b.n	8007232 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	3301      	adds	r3, #1
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2b07      	cmp	r3, #7
 800722e:	d9e7      	bls.n	8007200 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007230:	bf00      	nop
 8007232:	bf00      	nop
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	20000f34 	.word	0x20000f34

08007244 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007254:	f001 fbce 	bl	80089f4 <vPortEnterCritical>
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800725e:	b25b      	sxtb	r3, r3
 8007260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007264:	d103      	bne.n	800726e <vQueueWaitForMessageRestricted+0x2a>
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007274:	b25b      	sxtb	r3, r3
 8007276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727a:	d103      	bne.n	8007284 <vQueueWaitForMessageRestricted+0x40>
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007284:	f001 fbe6 	bl	8008a54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728c:	2b00      	cmp	r3, #0
 800728e:	d106      	bne.n	800729e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	3324      	adds	r3, #36	; 0x24
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	68b9      	ldr	r1, [r7, #8]
 8007298:	4618      	mov	r0, r3
 800729a:	f000 fc61 	bl	8007b60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800729e:	6978      	ldr	r0, [r7, #20]
 80072a0:	f7ff ff26 	bl	80070f0 <prvUnlockQueue>
	}
 80072a4:	bf00      	nop
 80072a6:	3718      	adds	r7, #24
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08e      	sub	sp, #56	; 0x38
 80072b0:	af04      	add	r7, sp, #16
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10a      	bne.n	80072d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	623b      	str	r3, [r7, #32]
}
 80072d2:	bf00      	nop
 80072d4:	e7fe      	b.n	80072d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80072d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10a      	bne.n	80072f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	61fb      	str	r3, [r7, #28]
}
 80072ee:	bf00      	nop
 80072f0:	e7fe      	b.n	80072f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80072f2:	23bc      	movs	r3, #188	; 0xbc
 80072f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	2bbc      	cmp	r3, #188	; 0xbc
 80072fa:	d00a      	beq.n	8007312 <xTaskCreateStatic+0x66>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	61bb      	str	r3, [r7, #24]
}
 800730e:	bf00      	nop
 8007310:	e7fe      	b.n	8007310 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007312:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007316:	2b00      	cmp	r3, #0
 8007318:	d01e      	beq.n	8007358 <xTaskCreateStatic+0xac>
 800731a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731c:	2b00      	cmp	r3, #0
 800731e:	d01b      	beq.n	8007358 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007328:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	2202      	movs	r2, #2
 800732e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007332:	2300      	movs	r3, #0
 8007334:	9303      	str	r3, [sp, #12]
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	9302      	str	r3, [sp, #8]
 800733a:	f107 0314 	add.w	r3, r7, #20
 800733e:	9301      	str	r3, [sp, #4]
 8007340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	68b9      	ldr	r1, [r7, #8]
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f000 f850 	bl	80073f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007350:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007352:	f000 f8f3 	bl	800753c <prvAddNewTaskToReadyList>
 8007356:	e001      	b.n	800735c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007358:	2300      	movs	r3, #0
 800735a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800735c:	697b      	ldr	r3, [r7, #20]
	}
 800735e:	4618      	mov	r0, r3
 8007360:	3728      	adds	r7, #40	; 0x28
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007366:	b580      	push	{r7, lr}
 8007368:	b08c      	sub	sp, #48	; 0x30
 800736a:	af04      	add	r7, sp, #16
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	60b9      	str	r1, [r7, #8]
 8007370:	603b      	str	r3, [r7, #0]
 8007372:	4613      	mov	r3, r2
 8007374:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007376:	88fb      	ldrh	r3, [r7, #6]
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4618      	mov	r0, r3
 800737c:	f001 fc5c 	bl	8008c38 <pvPortMalloc>
 8007380:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00e      	beq.n	80073a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007388:	20bc      	movs	r0, #188	; 0xbc
 800738a:	f001 fc55 	bl	8008c38 <pvPortMalloc>
 800738e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	631a      	str	r2, [r3, #48]	; 0x30
 800739c:	e005      	b.n	80073aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800739e:	6978      	ldr	r0, [r7, #20]
 80073a0:	f001 fd16 	bl	8008dd0 <vPortFree>
 80073a4:	e001      	b.n	80073aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d017      	beq.n	80073e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073b8:	88fa      	ldrh	r2, [r7, #6]
 80073ba:	2300      	movs	r3, #0
 80073bc:	9303      	str	r3, [sp, #12]
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	9302      	str	r3, [sp, #8]
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	9301      	str	r3, [sp, #4]
 80073c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	68b9      	ldr	r1, [r7, #8]
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 f80e 	bl	80073f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073d4:	69f8      	ldr	r0, [r7, #28]
 80073d6:	f000 f8b1 	bl	800753c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80073da:	2301      	movs	r3, #1
 80073dc:	61bb      	str	r3, [r7, #24]
 80073de:	e002      	b.n	80073e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073e0:	f04f 33ff 	mov.w	r3, #4294967295
 80073e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80073e6:	69bb      	ldr	r3, [r7, #24]
	}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3720      	adds	r7, #32
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b088      	sub	sp, #32
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
 80073fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80073fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007400:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	461a      	mov	r2, r3
 8007408:	21a5      	movs	r1, #165	; 0xa5
 800740a:	f001 fe33 	bl	8009074 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007418:	3b01      	subs	r3, #1
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	f023 0307 	bic.w	r3, r3, #7
 8007426:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	f003 0307 	and.w	r3, r3, #7
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00a      	beq.n	8007448 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007436:	f383 8811 	msr	BASEPRI, r3
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	617b      	str	r3, [r7, #20]
}
 8007444:	bf00      	nop
 8007446:	e7fe      	b.n	8007446 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d01f      	beq.n	800748e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800744e:	2300      	movs	r3, #0
 8007450:	61fb      	str	r3, [r7, #28]
 8007452:	e012      	b.n	800747a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	4413      	add	r3, r2
 800745a:	7819      	ldrb	r1, [r3, #0]
 800745c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	4413      	add	r3, r2
 8007462:	3334      	adds	r3, #52	; 0x34
 8007464:	460a      	mov	r2, r1
 8007466:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	4413      	add	r3, r2
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d006      	beq.n	8007482 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	3301      	adds	r3, #1
 8007478:	61fb      	str	r3, [r7, #28]
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	2b0f      	cmp	r3, #15
 800747e:	d9e9      	bls.n	8007454 <prvInitialiseNewTask+0x64>
 8007480:	e000      	b.n	8007484 <prvInitialiseNewTask+0x94>
			{
				break;
 8007482:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800748c:	e003      	b.n	8007496 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007498:	2b37      	cmp	r3, #55	; 0x37
 800749a:	d901      	bls.n	80074a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800749c:	2337      	movs	r3, #55	; 0x37
 800749e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80074ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ae:	2200      	movs	r2, #0
 80074b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	3304      	adds	r3, #4
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7ff f978 	bl	80067ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074be:	3318      	adds	r3, #24
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7ff f973 	bl	80067ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80074d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	2200      	movs	r2, #0
 80074e0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	3354      	adds	r3, #84	; 0x54
 80074f0:	2260      	movs	r2, #96	; 0x60
 80074f2:	2100      	movs	r1, #0
 80074f4:	4618      	mov	r0, r3
 80074f6:	f001 fdbd 	bl	8009074 <memset>
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	4a0c      	ldr	r2, [pc, #48]	; (8007530 <prvInitialiseNewTask+0x140>)
 80074fe:	659a      	str	r2, [r3, #88]	; 0x58
 8007500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007502:	4a0c      	ldr	r2, [pc, #48]	; (8007534 <prvInitialiseNewTask+0x144>)
 8007504:	65da      	str	r2, [r3, #92]	; 0x5c
 8007506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007508:	4a0b      	ldr	r2, [pc, #44]	; (8007538 <prvInitialiseNewTask+0x148>)
 800750a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	68f9      	ldr	r1, [r7, #12]
 8007510:	69b8      	ldr	r0, [r7, #24]
 8007512:	f001 f941 	bl	8008798 <pxPortInitialiseStack>
 8007516:	4602      	mov	r2, r0
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800751c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007526:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007528:	bf00      	nop
 800752a:	3720      	adds	r7, #32
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	080094ac 	.word	0x080094ac
 8007534:	080094cc 	.word	0x080094cc
 8007538:	0800948c 	.word	0x0800948c

0800753c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007544:	f001 fa56 	bl	80089f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007548:	4b2d      	ldr	r3, [pc, #180]	; (8007600 <prvAddNewTaskToReadyList+0xc4>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3301      	adds	r3, #1
 800754e:	4a2c      	ldr	r2, [pc, #176]	; (8007600 <prvAddNewTaskToReadyList+0xc4>)
 8007550:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007552:	4b2c      	ldr	r3, [pc, #176]	; (8007604 <prvAddNewTaskToReadyList+0xc8>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d109      	bne.n	800756e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800755a:	4a2a      	ldr	r2, [pc, #168]	; (8007604 <prvAddNewTaskToReadyList+0xc8>)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007560:	4b27      	ldr	r3, [pc, #156]	; (8007600 <prvAddNewTaskToReadyList+0xc4>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d110      	bne.n	800758a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007568:	f000 fc26 	bl	8007db8 <prvInitialiseTaskLists>
 800756c:	e00d      	b.n	800758a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800756e:	4b26      	ldr	r3, [pc, #152]	; (8007608 <prvAddNewTaskToReadyList+0xcc>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d109      	bne.n	800758a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007576:	4b23      	ldr	r3, [pc, #140]	; (8007604 <prvAddNewTaskToReadyList+0xc8>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007580:	429a      	cmp	r2, r3
 8007582:	d802      	bhi.n	800758a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007584:	4a1f      	ldr	r2, [pc, #124]	; (8007604 <prvAddNewTaskToReadyList+0xc8>)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800758a:	4b20      	ldr	r3, [pc, #128]	; (800760c <prvAddNewTaskToReadyList+0xd0>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3301      	adds	r3, #1
 8007590:	4a1e      	ldr	r2, [pc, #120]	; (800760c <prvAddNewTaskToReadyList+0xd0>)
 8007592:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007594:	4b1d      	ldr	r3, [pc, #116]	; (800760c <prvAddNewTaskToReadyList+0xd0>)
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a0:	4b1b      	ldr	r3, [pc, #108]	; (8007610 <prvAddNewTaskToReadyList+0xd4>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d903      	bls.n	80075b0 <prvAddNewTaskToReadyList+0x74>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	4a18      	ldr	r2, [pc, #96]	; (8007610 <prvAddNewTaskToReadyList+0xd4>)
 80075ae:	6013      	str	r3, [r2, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b4:	4613      	mov	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4a15      	ldr	r2, [pc, #84]	; (8007614 <prvAddNewTaskToReadyList+0xd8>)
 80075be:	441a      	add	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	3304      	adds	r3, #4
 80075c4:	4619      	mov	r1, r3
 80075c6:	4610      	mov	r0, r2
 80075c8:	f7ff f8fd 	bl	80067c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075cc:	f001 fa42 	bl	8008a54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075d0:	4b0d      	ldr	r3, [pc, #52]	; (8007608 <prvAddNewTaskToReadyList+0xcc>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00e      	beq.n	80075f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075d8:	4b0a      	ldr	r3, [pc, #40]	; (8007604 <prvAddNewTaskToReadyList+0xc8>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d207      	bcs.n	80075f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075e6:	4b0c      	ldr	r3, [pc, #48]	; (8007618 <prvAddNewTaskToReadyList+0xdc>)
 80075e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075f6:	bf00      	nop
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20001448 	.word	0x20001448
 8007604:	20000f74 	.word	0x20000f74
 8007608:	20001454 	.word	0x20001454
 800760c:	20001464 	.word	0x20001464
 8007610:	20001450 	.word	0x20001450
 8007614:	20000f78 	.word	0x20000f78
 8007618:	e000ed04 	.word	0xe000ed04

0800761c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007624:	2300      	movs	r3, #0
 8007626:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d017      	beq.n	800765e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800762e:	4b13      	ldr	r3, [pc, #76]	; (800767c <vTaskDelay+0x60>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00a      	beq.n	800764c <vTaskDelay+0x30>
	__asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	60bb      	str	r3, [r7, #8]
}
 8007648:	bf00      	nop
 800764a:	e7fe      	b.n	800764a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800764c:	f000 f88a 	bl	8007764 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007650:	2100      	movs	r1, #0
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fcfe 	bl	8008054 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007658:	f000 f892 	bl	8007780 <xTaskResumeAll>
 800765c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d107      	bne.n	8007674 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007664:	4b06      	ldr	r3, [pc, #24]	; (8007680 <vTaskDelay+0x64>)
 8007666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007674:	bf00      	nop
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	20001470 	.word	0x20001470
 8007680:	e000ed04 	.word	0xe000ed04

08007684 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b08a      	sub	sp, #40	; 0x28
 8007688:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800768a:	2300      	movs	r3, #0
 800768c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800768e:	2300      	movs	r3, #0
 8007690:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007692:	463a      	mov	r2, r7
 8007694:	1d39      	adds	r1, r7, #4
 8007696:	f107 0308 	add.w	r3, r7, #8
 800769a:	4618      	mov	r0, r3
 800769c:	f7ff f832 	bl	8006704 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	9202      	str	r2, [sp, #8]
 80076a8:	9301      	str	r3, [sp, #4]
 80076aa:	2300      	movs	r3, #0
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	2300      	movs	r3, #0
 80076b0:	460a      	mov	r2, r1
 80076b2:	4924      	ldr	r1, [pc, #144]	; (8007744 <vTaskStartScheduler+0xc0>)
 80076b4:	4824      	ldr	r0, [pc, #144]	; (8007748 <vTaskStartScheduler+0xc4>)
 80076b6:	f7ff fdf9 	bl	80072ac <xTaskCreateStatic>
 80076ba:	4603      	mov	r3, r0
 80076bc:	4a23      	ldr	r2, [pc, #140]	; (800774c <vTaskStartScheduler+0xc8>)
 80076be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076c0:	4b22      	ldr	r3, [pc, #136]	; (800774c <vTaskStartScheduler+0xc8>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d002      	beq.n	80076ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076c8:	2301      	movs	r3, #1
 80076ca:	617b      	str	r3, [r7, #20]
 80076cc:	e001      	b.n	80076d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d102      	bne.n	80076de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80076d8:	f000 fd10 	bl	80080fc <xTimerCreateTimerTask>
 80076dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d11b      	bne.n	800771c <vTaskStartScheduler+0x98>
	__asm volatile
 80076e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	613b      	str	r3, [r7, #16]
}
 80076f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076f8:	4b15      	ldr	r3, [pc, #84]	; (8007750 <vTaskStartScheduler+0xcc>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3354      	adds	r3, #84	; 0x54
 80076fe:	4a15      	ldr	r2, [pc, #84]	; (8007754 <vTaskStartScheduler+0xd0>)
 8007700:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007702:	4b15      	ldr	r3, [pc, #84]	; (8007758 <vTaskStartScheduler+0xd4>)
 8007704:	f04f 32ff 	mov.w	r2, #4294967295
 8007708:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800770a:	4b14      	ldr	r3, [pc, #80]	; (800775c <vTaskStartScheduler+0xd8>)
 800770c:	2201      	movs	r2, #1
 800770e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007710:	4b13      	ldr	r3, [pc, #76]	; (8007760 <vTaskStartScheduler+0xdc>)
 8007712:	2200      	movs	r2, #0
 8007714:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007716:	f001 f8cb 	bl	80088b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800771a:	e00e      	b.n	800773a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007722:	d10a      	bne.n	800773a <vTaskStartScheduler+0xb6>
	__asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	60fb      	str	r3, [r7, #12]
}
 8007736:	bf00      	nop
 8007738:	e7fe      	b.n	8007738 <vTaskStartScheduler+0xb4>
}
 800773a:	bf00      	nop
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	0800922c 	.word	0x0800922c
 8007748:	08007d89 	.word	0x08007d89
 800774c:	2000146c 	.word	0x2000146c
 8007750:	20000f74 	.word	0x20000f74
 8007754:	2000004c 	.word	0x2000004c
 8007758:	20001468 	.word	0x20001468
 800775c:	20001454 	.word	0x20001454
 8007760:	2000144c 	.word	0x2000144c

08007764 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007764:	b480      	push	{r7}
 8007766:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007768:	4b04      	ldr	r3, [pc, #16]	; (800777c <vTaskSuspendAll+0x18>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3301      	adds	r3, #1
 800776e:	4a03      	ldr	r2, [pc, #12]	; (800777c <vTaskSuspendAll+0x18>)
 8007770:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007772:	bf00      	nop
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	20001470 	.word	0x20001470

08007780 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007786:	2300      	movs	r3, #0
 8007788:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800778a:	2300      	movs	r3, #0
 800778c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800778e:	4b42      	ldr	r3, [pc, #264]	; (8007898 <xTaskResumeAll+0x118>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10a      	bne.n	80077ac <xTaskResumeAll+0x2c>
	__asm volatile
 8007796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	603b      	str	r3, [r7, #0]
}
 80077a8:	bf00      	nop
 80077aa:	e7fe      	b.n	80077aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077ac:	f001 f922 	bl	80089f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077b0:	4b39      	ldr	r3, [pc, #228]	; (8007898 <xTaskResumeAll+0x118>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	4a38      	ldr	r2, [pc, #224]	; (8007898 <xTaskResumeAll+0x118>)
 80077b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077ba:	4b37      	ldr	r3, [pc, #220]	; (8007898 <xTaskResumeAll+0x118>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d162      	bne.n	8007888 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077c2:	4b36      	ldr	r3, [pc, #216]	; (800789c <xTaskResumeAll+0x11c>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d05e      	beq.n	8007888 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077ca:	e02f      	b.n	800782c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077cc:	4b34      	ldr	r3, [pc, #208]	; (80078a0 <xTaskResumeAll+0x120>)
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	3318      	adds	r3, #24
 80077d8:	4618      	mov	r0, r3
 80077da:	f7ff f851 	bl	8006880 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	3304      	adds	r3, #4
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7ff f84c 	bl	8006880 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ec:	4b2d      	ldr	r3, [pc, #180]	; (80078a4 <xTaskResumeAll+0x124>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d903      	bls.n	80077fc <xTaskResumeAll+0x7c>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	4a2a      	ldr	r2, [pc, #168]	; (80078a4 <xTaskResumeAll+0x124>)
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007800:	4613      	mov	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4a27      	ldr	r2, [pc, #156]	; (80078a8 <xTaskResumeAll+0x128>)
 800780a:	441a      	add	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	3304      	adds	r3, #4
 8007810:	4619      	mov	r1, r3
 8007812:	4610      	mov	r0, r2
 8007814:	f7fe ffd7 	bl	80067c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781c:	4b23      	ldr	r3, [pc, #140]	; (80078ac <xTaskResumeAll+0x12c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007822:	429a      	cmp	r2, r3
 8007824:	d302      	bcc.n	800782c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007826:	4b22      	ldr	r3, [pc, #136]	; (80078b0 <xTaskResumeAll+0x130>)
 8007828:	2201      	movs	r2, #1
 800782a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800782c:	4b1c      	ldr	r3, [pc, #112]	; (80078a0 <xTaskResumeAll+0x120>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1cb      	bne.n	80077cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800783a:	f000 fb5f 	bl	8007efc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800783e:	4b1d      	ldr	r3, [pc, #116]	; (80078b4 <xTaskResumeAll+0x134>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d010      	beq.n	800786c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800784a:	f000 f847 	bl	80078dc <xTaskIncrementTick>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007854:	4b16      	ldr	r3, [pc, #88]	; (80078b0 <xTaskResumeAll+0x130>)
 8007856:	2201      	movs	r2, #1
 8007858:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	3b01      	subs	r3, #1
 800785e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1f1      	bne.n	800784a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007866:	4b13      	ldr	r3, [pc, #76]	; (80078b4 <xTaskResumeAll+0x134>)
 8007868:	2200      	movs	r2, #0
 800786a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800786c:	4b10      	ldr	r3, [pc, #64]	; (80078b0 <xTaskResumeAll+0x130>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d009      	beq.n	8007888 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007874:	2301      	movs	r3, #1
 8007876:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007878:	4b0f      	ldr	r3, [pc, #60]	; (80078b8 <xTaskResumeAll+0x138>)
 800787a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007888:	f001 f8e4 	bl	8008a54 <vPortExitCritical>

	return xAlreadyYielded;
 800788c:	68bb      	ldr	r3, [r7, #8]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	20001470 	.word	0x20001470
 800789c:	20001448 	.word	0x20001448
 80078a0:	20001408 	.word	0x20001408
 80078a4:	20001450 	.word	0x20001450
 80078a8:	20000f78 	.word	0x20000f78
 80078ac:	20000f74 	.word	0x20000f74
 80078b0:	2000145c 	.word	0x2000145c
 80078b4:	20001458 	.word	0x20001458
 80078b8:	e000ed04 	.word	0xe000ed04

080078bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80078c2:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <xTaskGetTickCount+0x1c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80078c8:	687b      	ldr	r3, [r7, #4]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	2000144c 	.word	0x2000144c

080078dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078e2:	2300      	movs	r3, #0
 80078e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078e6:	4b4f      	ldr	r3, [pc, #316]	; (8007a24 <xTaskIncrementTick+0x148>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f040 808f 	bne.w	8007a0e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078f0:	4b4d      	ldr	r3, [pc, #308]	; (8007a28 <xTaskIncrementTick+0x14c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3301      	adds	r3, #1
 80078f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078f8:	4a4b      	ldr	r2, [pc, #300]	; (8007a28 <xTaskIncrementTick+0x14c>)
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d120      	bne.n	8007946 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007904:	4b49      	ldr	r3, [pc, #292]	; (8007a2c <xTaskIncrementTick+0x150>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00a      	beq.n	8007924 <xTaskIncrementTick+0x48>
	__asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	603b      	str	r3, [r7, #0]
}
 8007920:	bf00      	nop
 8007922:	e7fe      	b.n	8007922 <xTaskIncrementTick+0x46>
 8007924:	4b41      	ldr	r3, [pc, #260]	; (8007a2c <xTaskIncrementTick+0x150>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	60fb      	str	r3, [r7, #12]
 800792a:	4b41      	ldr	r3, [pc, #260]	; (8007a30 <xTaskIncrementTick+0x154>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a3f      	ldr	r2, [pc, #252]	; (8007a2c <xTaskIncrementTick+0x150>)
 8007930:	6013      	str	r3, [r2, #0]
 8007932:	4a3f      	ldr	r2, [pc, #252]	; (8007a30 <xTaskIncrementTick+0x154>)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6013      	str	r3, [r2, #0]
 8007938:	4b3e      	ldr	r3, [pc, #248]	; (8007a34 <xTaskIncrementTick+0x158>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3301      	adds	r3, #1
 800793e:	4a3d      	ldr	r2, [pc, #244]	; (8007a34 <xTaskIncrementTick+0x158>)
 8007940:	6013      	str	r3, [r2, #0]
 8007942:	f000 fadb 	bl	8007efc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007946:	4b3c      	ldr	r3, [pc, #240]	; (8007a38 <xTaskIncrementTick+0x15c>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	429a      	cmp	r2, r3
 800794e:	d349      	bcc.n	80079e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007950:	4b36      	ldr	r3, [pc, #216]	; (8007a2c <xTaskIncrementTick+0x150>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d104      	bne.n	8007964 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800795a:	4b37      	ldr	r3, [pc, #220]	; (8007a38 <xTaskIncrementTick+0x15c>)
 800795c:	f04f 32ff 	mov.w	r2, #4294967295
 8007960:	601a      	str	r2, [r3, #0]
					break;
 8007962:	e03f      	b.n	80079e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007964:	4b31      	ldr	r3, [pc, #196]	; (8007a2c <xTaskIncrementTick+0x150>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	429a      	cmp	r2, r3
 800797a:	d203      	bcs.n	8007984 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800797c:	4a2e      	ldr	r2, [pc, #184]	; (8007a38 <xTaskIncrementTick+0x15c>)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007982:	e02f      	b.n	80079e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	3304      	adds	r3, #4
 8007988:	4618      	mov	r0, r3
 800798a:	f7fe ff79 	bl	8006880 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007992:	2b00      	cmp	r3, #0
 8007994:	d004      	beq.n	80079a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	3318      	adds	r3, #24
 800799a:	4618      	mov	r0, r3
 800799c:	f7fe ff70 	bl	8006880 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a4:	4b25      	ldr	r3, [pc, #148]	; (8007a3c <xTaskIncrementTick+0x160>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d903      	bls.n	80079b4 <xTaskIncrementTick+0xd8>
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b0:	4a22      	ldr	r2, [pc, #136]	; (8007a3c <xTaskIncrementTick+0x160>)
 80079b2:	6013      	str	r3, [r2, #0]
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b8:	4613      	mov	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4413      	add	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4a1f      	ldr	r2, [pc, #124]	; (8007a40 <xTaskIncrementTick+0x164>)
 80079c2:	441a      	add	r2, r3
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	3304      	adds	r3, #4
 80079c8:	4619      	mov	r1, r3
 80079ca:	4610      	mov	r0, r2
 80079cc:	f7fe fefb 	bl	80067c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d4:	4b1b      	ldr	r3, [pc, #108]	; (8007a44 <xTaskIncrementTick+0x168>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079da:	429a      	cmp	r2, r3
 80079dc:	d3b8      	bcc.n	8007950 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80079de:	2301      	movs	r3, #1
 80079e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079e2:	e7b5      	b.n	8007950 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079e4:	4b17      	ldr	r3, [pc, #92]	; (8007a44 <xTaskIncrementTick+0x168>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ea:	4915      	ldr	r1, [pc, #84]	; (8007a40 <xTaskIncrementTick+0x164>)
 80079ec:	4613      	mov	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	440b      	add	r3, r1
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d901      	bls.n	8007a00 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80079fc:	2301      	movs	r3, #1
 80079fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a00:	4b11      	ldr	r3, [pc, #68]	; (8007a48 <xTaskIncrementTick+0x16c>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d007      	beq.n	8007a18 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	617b      	str	r3, [r7, #20]
 8007a0c:	e004      	b.n	8007a18 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a0e:	4b0f      	ldr	r3, [pc, #60]	; (8007a4c <xTaskIncrementTick+0x170>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3301      	adds	r3, #1
 8007a14:	4a0d      	ldr	r2, [pc, #52]	; (8007a4c <xTaskIncrementTick+0x170>)
 8007a16:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a18:	697b      	ldr	r3, [r7, #20]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	20001470 	.word	0x20001470
 8007a28:	2000144c 	.word	0x2000144c
 8007a2c:	20001400 	.word	0x20001400
 8007a30:	20001404 	.word	0x20001404
 8007a34:	20001460 	.word	0x20001460
 8007a38:	20001468 	.word	0x20001468
 8007a3c:	20001450 	.word	0x20001450
 8007a40:	20000f78 	.word	0x20000f78
 8007a44:	20000f74 	.word	0x20000f74
 8007a48:	2000145c 	.word	0x2000145c
 8007a4c:	20001458 	.word	0x20001458

08007a50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a56:	4b2a      	ldr	r3, [pc, #168]	; (8007b00 <vTaskSwitchContext+0xb0>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d003      	beq.n	8007a66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a5e:	4b29      	ldr	r3, [pc, #164]	; (8007b04 <vTaskSwitchContext+0xb4>)
 8007a60:	2201      	movs	r2, #1
 8007a62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a64:	e046      	b.n	8007af4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007a66:	4b27      	ldr	r3, [pc, #156]	; (8007b04 <vTaskSwitchContext+0xb4>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a6c:	4b26      	ldr	r3, [pc, #152]	; (8007b08 <vTaskSwitchContext+0xb8>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	e010      	b.n	8007a96 <vTaskSwitchContext+0x46>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10a      	bne.n	8007a90 <vTaskSwitchContext+0x40>
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	607b      	str	r3, [r7, #4]
}
 8007a8c:	bf00      	nop
 8007a8e:	e7fe      	b.n	8007a8e <vTaskSwitchContext+0x3e>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3b01      	subs	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	491d      	ldr	r1, [pc, #116]	; (8007b0c <vTaskSwitchContext+0xbc>)
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	440b      	add	r3, r1
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d0e4      	beq.n	8007a74 <vTaskSwitchContext+0x24>
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	4613      	mov	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4a15      	ldr	r2, [pc, #84]	; (8007b0c <vTaskSwitchContext+0xbc>)
 8007ab6:	4413      	add	r3, r2
 8007ab8:	60bb      	str	r3, [r7, #8]
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	605a      	str	r2, [r3, #4]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	3308      	adds	r3, #8
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d104      	bne.n	8007ada <vTaskSwitchContext+0x8a>
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	685a      	ldr	r2, [r3, #4]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	605a      	str	r2, [r3, #4]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	4a0b      	ldr	r2, [pc, #44]	; (8007b10 <vTaskSwitchContext+0xc0>)
 8007ae2:	6013      	str	r3, [r2, #0]
 8007ae4:	4a08      	ldr	r2, [pc, #32]	; (8007b08 <vTaskSwitchContext+0xb8>)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007aea:	4b09      	ldr	r3, [pc, #36]	; (8007b10 <vTaskSwitchContext+0xc0>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3354      	adds	r3, #84	; 0x54
 8007af0:	4a08      	ldr	r2, [pc, #32]	; (8007b14 <vTaskSwitchContext+0xc4>)
 8007af2:	6013      	str	r3, [r2, #0]
}
 8007af4:	bf00      	nop
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	20001470 	.word	0x20001470
 8007b04:	2000145c 	.word	0x2000145c
 8007b08:	20001450 	.word	0x20001450
 8007b0c:	20000f78 	.word	0x20000f78
 8007b10:	20000f74 	.word	0x20000f74
 8007b14:	2000004c 	.word	0x2000004c

08007b18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10a      	bne.n	8007b3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	60fb      	str	r3, [r7, #12]
}
 8007b3a:	bf00      	nop
 8007b3c:	e7fe      	b.n	8007b3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b3e:	4b07      	ldr	r3, [pc, #28]	; (8007b5c <vTaskPlaceOnEventList+0x44>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3318      	adds	r3, #24
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7fe fe61 	bl	800680e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	6838      	ldr	r0, [r7, #0]
 8007b50:	f000 fa80 	bl	8008054 <prvAddCurrentTaskToDelayedList>
}
 8007b54:	bf00      	nop
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	20000f74 	.word	0x20000f74

08007b60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10a      	bne.n	8007b88 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	617b      	str	r3, [r7, #20]
}
 8007b84:	bf00      	nop
 8007b86:	e7fe      	b.n	8007b86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b88:	4b0a      	ldr	r3, [pc, #40]	; (8007bb4 <vTaskPlaceOnEventListRestricted+0x54>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3318      	adds	r3, #24
 8007b8e:	4619      	mov	r1, r3
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f7fe fe18 	bl	80067c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ba2:	6879      	ldr	r1, [r7, #4]
 8007ba4:	68b8      	ldr	r0, [r7, #8]
 8007ba6:	f000 fa55 	bl	8008054 <prvAddCurrentTaskToDelayedList>
	}
 8007baa:	bf00      	nop
 8007bac:	3718      	adds	r7, #24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20000f74 	.word	0x20000f74

08007bb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10a      	bne.n	8007be4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	60fb      	str	r3, [r7, #12]
}
 8007be0:	bf00      	nop
 8007be2:	e7fe      	b.n	8007be2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	3318      	adds	r3, #24
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fe fe49 	bl	8006880 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bee:	4b1e      	ldr	r3, [pc, #120]	; (8007c68 <xTaskRemoveFromEventList+0xb0>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d11d      	bne.n	8007c32 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fe fe40 	bl	8006880 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c04:	4b19      	ldr	r3, [pc, #100]	; (8007c6c <xTaskRemoveFromEventList+0xb4>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d903      	bls.n	8007c14 <xTaskRemoveFromEventList+0x5c>
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c10:	4a16      	ldr	r2, [pc, #88]	; (8007c6c <xTaskRemoveFromEventList+0xb4>)
 8007c12:	6013      	str	r3, [r2, #0]
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c18:	4613      	mov	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4413      	add	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4a13      	ldr	r2, [pc, #76]	; (8007c70 <xTaskRemoveFromEventList+0xb8>)
 8007c22:	441a      	add	r2, r3
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	3304      	adds	r3, #4
 8007c28:	4619      	mov	r1, r3
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	f7fe fdcb 	bl	80067c6 <vListInsertEnd>
 8007c30:	e005      	b.n	8007c3e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	3318      	adds	r3, #24
 8007c36:	4619      	mov	r1, r3
 8007c38:	480e      	ldr	r0, [pc, #56]	; (8007c74 <xTaskRemoveFromEventList+0xbc>)
 8007c3a:	f7fe fdc4 	bl	80067c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c42:	4b0d      	ldr	r3, [pc, #52]	; (8007c78 <xTaskRemoveFromEventList+0xc0>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d905      	bls.n	8007c58 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c50:	4b0a      	ldr	r3, [pc, #40]	; (8007c7c <xTaskRemoveFromEventList+0xc4>)
 8007c52:	2201      	movs	r2, #1
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	e001      	b.n	8007c5c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c5c:	697b      	ldr	r3, [r7, #20]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3718      	adds	r7, #24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	20001470 	.word	0x20001470
 8007c6c:	20001450 	.word	0x20001450
 8007c70:	20000f78 	.word	0x20000f78
 8007c74:	20001408 	.word	0x20001408
 8007c78:	20000f74 	.word	0x20000f74
 8007c7c:	2000145c 	.word	0x2000145c

08007c80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c88:	4b06      	ldr	r3, [pc, #24]	; (8007ca4 <vTaskInternalSetTimeOutState+0x24>)
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c90:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <vTaskInternalSetTimeOutState+0x28>)
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	605a      	str	r2, [r3, #4]
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr
 8007ca4:	20001460 	.word	0x20001460
 8007ca8:	2000144c 	.word	0x2000144c

08007cac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b088      	sub	sp, #32
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10a      	bne.n	8007cd2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	613b      	str	r3, [r7, #16]
}
 8007cce:	bf00      	nop
 8007cd0:	e7fe      	b.n	8007cd0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10a      	bne.n	8007cee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	60fb      	str	r3, [r7, #12]
}
 8007cea:	bf00      	nop
 8007cec:	e7fe      	b.n	8007cec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007cee:	f000 fe81 	bl	80089f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007cf2:	4b1d      	ldr	r3, [pc, #116]	; (8007d68 <xTaskCheckForTimeOut+0xbc>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0a:	d102      	bne.n	8007d12 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	61fb      	str	r3, [r7, #28]
 8007d10:	e023      	b.n	8007d5a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	4b15      	ldr	r3, [pc, #84]	; (8007d6c <xTaskCheckForTimeOut+0xc0>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d007      	beq.n	8007d2e <xTaskCheckForTimeOut+0x82>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	69ba      	ldr	r2, [r7, #24]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d302      	bcc.n	8007d2e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	61fb      	str	r3, [r7, #28]
 8007d2c:	e015      	b.n	8007d5a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d20b      	bcs.n	8007d50 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	1ad2      	subs	r2, r2, r3
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff ff9b 	bl	8007c80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	61fb      	str	r3, [r7, #28]
 8007d4e:	e004      	b.n	8007d5a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	2200      	movs	r2, #0
 8007d54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d56:	2301      	movs	r3, #1
 8007d58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d5a:	f000 fe7b 	bl	8008a54 <vPortExitCritical>

	return xReturn;
 8007d5e:	69fb      	ldr	r3, [r7, #28]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3720      	adds	r7, #32
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	2000144c 	.word	0x2000144c
 8007d6c:	20001460 	.word	0x20001460

08007d70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d70:	b480      	push	{r7}
 8007d72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d74:	4b03      	ldr	r3, [pc, #12]	; (8007d84 <vTaskMissedYield+0x14>)
 8007d76:	2201      	movs	r2, #1
 8007d78:	601a      	str	r2, [r3, #0]
}
 8007d7a:	bf00      	nop
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	2000145c 	.word	0x2000145c

08007d88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d90:	f000 f852 	bl	8007e38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d94:	4b06      	ldr	r3, [pc, #24]	; (8007db0 <prvIdleTask+0x28>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d9f9      	bls.n	8007d90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d9c:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <prvIdleTask+0x2c>)
 8007d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007dac:	e7f0      	b.n	8007d90 <prvIdleTask+0x8>
 8007dae:	bf00      	nop
 8007db0:	20000f78 	.word	0x20000f78
 8007db4:	e000ed04 	.word	0xe000ed04

08007db8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	607b      	str	r3, [r7, #4]
 8007dc2:	e00c      	b.n	8007dde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4413      	add	r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4a12      	ldr	r2, [pc, #72]	; (8007e18 <prvInitialiseTaskLists+0x60>)
 8007dd0:	4413      	add	r3, r2
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fe fcca 	bl	800676c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	607b      	str	r3, [r7, #4]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b37      	cmp	r3, #55	; 0x37
 8007de2:	d9ef      	bls.n	8007dc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007de4:	480d      	ldr	r0, [pc, #52]	; (8007e1c <prvInitialiseTaskLists+0x64>)
 8007de6:	f7fe fcc1 	bl	800676c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007dea:	480d      	ldr	r0, [pc, #52]	; (8007e20 <prvInitialiseTaskLists+0x68>)
 8007dec:	f7fe fcbe 	bl	800676c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007df0:	480c      	ldr	r0, [pc, #48]	; (8007e24 <prvInitialiseTaskLists+0x6c>)
 8007df2:	f7fe fcbb 	bl	800676c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007df6:	480c      	ldr	r0, [pc, #48]	; (8007e28 <prvInitialiseTaskLists+0x70>)
 8007df8:	f7fe fcb8 	bl	800676c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007dfc:	480b      	ldr	r0, [pc, #44]	; (8007e2c <prvInitialiseTaskLists+0x74>)
 8007dfe:	f7fe fcb5 	bl	800676c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e02:	4b0b      	ldr	r3, [pc, #44]	; (8007e30 <prvInitialiseTaskLists+0x78>)
 8007e04:	4a05      	ldr	r2, [pc, #20]	; (8007e1c <prvInitialiseTaskLists+0x64>)
 8007e06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e08:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <prvInitialiseTaskLists+0x7c>)
 8007e0a:	4a05      	ldr	r2, [pc, #20]	; (8007e20 <prvInitialiseTaskLists+0x68>)
 8007e0c:	601a      	str	r2, [r3, #0]
}
 8007e0e:	bf00      	nop
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	20000f78 	.word	0x20000f78
 8007e1c:	200013d8 	.word	0x200013d8
 8007e20:	200013ec 	.word	0x200013ec
 8007e24:	20001408 	.word	0x20001408
 8007e28:	2000141c 	.word	0x2000141c
 8007e2c:	20001434 	.word	0x20001434
 8007e30:	20001400 	.word	0x20001400
 8007e34:	20001404 	.word	0x20001404

08007e38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e3e:	e019      	b.n	8007e74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e40:	f000 fdd8 	bl	80089f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e44:	4b10      	ldr	r3, [pc, #64]	; (8007e88 <prvCheckTasksWaitingTermination+0x50>)
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3304      	adds	r3, #4
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7fe fd15 	bl	8006880 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e56:	4b0d      	ldr	r3, [pc, #52]	; (8007e8c <prvCheckTasksWaitingTermination+0x54>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	4a0b      	ldr	r2, [pc, #44]	; (8007e8c <prvCheckTasksWaitingTermination+0x54>)
 8007e5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e60:	4b0b      	ldr	r3, [pc, #44]	; (8007e90 <prvCheckTasksWaitingTermination+0x58>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3b01      	subs	r3, #1
 8007e66:	4a0a      	ldr	r2, [pc, #40]	; (8007e90 <prvCheckTasksWaitingTermination+0x58>)
 8007e68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e6a:	f000 fdf3 	bl	8008a54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f810 	bl	8007e94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e74:	4b06      	ldr	r3, [pc, #24]	; (8007e90 <prvCheckTasksWaitingTermination+0x58>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1e1      	bne.n	8007e40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e7c:	bf00      	nop
 8007e7e:	bf00      	nop
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	2000141c 	.word	0x2000141c
 8007e8c:	20001448 	.word	0x20001448
 8007e90:	20001430 	.word	0x20001430

08007e94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	3354      	adds	r3, #84	; 0x54
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f001 f8fd 	bl	80090a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d108      	bne.n	8007ec2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f000 ff8b 	bl	8008dd0 <vPortFree>
				vPortFree( pxTCB );
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 ff88 	bl	8008dd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ec0:	e018      	b.n	8007ef4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d103      	bne.n	8007ed4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 ff7f 	bl	8008dd0 <vPortFree>
	}
 8007ed2:	e00f      	b.n	8007ef4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d00a      	beq.n	8007ef4 <prvDeleteTCB+0x60>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	60fb      	str	r3, [r7, #12]
}
 8007ef0:	bf00      	nop
 8007ef2:	e7fe      	b.n	8007ef2 <prvDeleteTCB+0x5e>
	}
 8007ef4:	bf00      	nop
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f02:	4b0c      	ldr	r3, [pc, #48]	; (8007f34 <prvResetNextTaskUnblockTime+0x38>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d104      	bne.n	8007f16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f0c:	4b0a      	ldr	r3, [pc, #40]	; (8007f38 <prvResetNextTaskUnblockTime+0x3c>)
 8007f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f14:	e008      	b.n	8007f28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f16:	4b07      	ldr	r3, [pc, #28]	; (8007f34 <prvResetNextTaskUnblockTime+0x38>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	4a04      	ldr	r2, [pc, #16]	; (8007f38 <prvResetNextTaskUnblockTime+0x3c>)
 8007f26:	6013      	str	r3, [r2, #0]
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	20001400 	.word	0x20001400
 8007f38:	20001468 	.word	0x20001468

08007f3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f42:	4b0b      	ldr	r3, [pc, #44]	; (8007f70 <xTaskGetSchedulerState+0x34>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d102      	bne.n	8007f50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	607b      	str	r3, [r7, #4]
 8007f4e:	e008      	b.n	8007f62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f50:	4b08      	ldr	r3, [pc, #32]	; (8007f74 <xTaskGetSchedulerState+0x38>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f58:	2302      	movs	r3, #2
 8007f5a:	607b      	str	r3, [r7, #4]
 8007f5c:	e001      	b.n	8007f62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f62:	687b      	ldr	r3, [r7, #4]
	}
 8007f64:	4618      	mov	r0, r3
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	20001454 	.word	0x20001454
 8007f74:	20001470 	.word	0x20001470

08007f78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f84:	2300      	movs	r3, #0
 8007f86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d056      	beq.n	800803c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f8e:	4b2e      	ldr	r3, [pc, #184]	; (8008048 <xTaskPriorityDisinherit+0xd0>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	693a      	ldr	r2, [r7, #16]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d00a      	beq.n	8007fae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	60fb      	str	r3, [r7, #12]
}
 8007faa:	bf00      	nop
 8007fac:	e7fe      	b.n	8007fac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10a      	bne.n	8007fcc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	60bb      	str	r3, [r7, #8]
}
 8007fc8:	bf00      	nop
 8007fca:	e7fe      	b.n	8007fca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fd0:	1e5a      	subs	r2, r3, #1
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d02c      	beq.n	800803c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d128      	bne.n	800803c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	3304      	adds	r3, #4
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fe fc46 	bl	8006880 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008000:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800800c:	4b0f      	ldr	r3, [pc, #60]	; (800804c <xTaskPriorityDisinherit+0xd4>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	429a      	cmp	r2, r3
 8008012:	d903      	bls.n	800801c <xTaskPriorityDisinherit+0xa4>
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008018:	4a0c      	ldr	r2, [pc, #48]	; (800804c <xTaskPriorityDisinherit+0xd4>)
 800801a:	6013      	str	r3, [r2, #0]
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008020:	4613      	mov	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4413      	add	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4a09      	ldr	r2, [pc, #36]	; (8008050 <xTaskPriorityDisinherit+0xd8>)
 800802a:	441a      	add	r2, r3
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	3304      	adds	r3, #4
 8008030:	4619      	mov	r1, r3
 8008032:	4610      	mov	r0, r2
 8008034:	f7fe fbc7 	bl	80067c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008038:	2301      	movs	r3, #1
 800803a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800803c:	697b      	ldr	r3, [r7, #20]
	}
 800803e:	4618      	mov	r0, r3
 8008040:	3718      	adds	r7, #24
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	20000f74 	.word	0x20000f74
 800804c:	20001450 	.word	0x20001450
 8008050:	20000f78 	.word	0x20000f78

08008054 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800805e:	4b21      	ldr	r3, [pc, #132]	; (80080e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008064:	4b20      	ldr	r3, [pc, #128]	; (80080e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	3304      	adds	r3, #4
 800806a:	4618      	mov	r0, r3
 800806c:	f7fe fc08 	bl	8006880 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008076:	d10a      	bne.n	800808e <prvAddCurrentTaskToDelayedList+0x3a>
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d007      	beq.n	800808e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800807e:	4b1a      	ldr	r3, [pc, #104]	; (80080e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3304      	adds	r3, #4
 8008084:	4619      	mov	r1, r3
 8008086:	4819      	ldr	r0, [pc, #100]	; (80080ec <prvAddCurrentTaskToDelayedList+0x98>)
 8008088:	f7fe fb9d 	bl	80067c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800808c:	e026      	b.n	80080dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4413      	add	r3, r2
 8008094:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008096:	4b14      	ldr	r3, [pc, #80]	; (80080e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d209      	bcs.n	80080ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080a6:	4b12      	ldr	r3, [pc, #72]	; (80080f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	4b0f      	ldr	r3, [pc, #60]	; (80080e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3304      	adds	r3, #4
 80080b0:	4619      	mov	r1, r3
 80080b2:	4610      	mov	r0, r2
 80080b4:	f7fe fbab 	bl	800680e <vListInsert>
}
 80080b8:	e010      	b.n	80080dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080ba:	4b0e      	ldr	r3, [pc, #56]	; (80080f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3304      	adds	r3, #4
 80080c4:	4619      	mov	r1, r3
 80080c6:	4610      	mov	r0, r2
 80080c8:	f7fe fba1 	bl	800680e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080cc:	4b0a      	ldr	r3, [pc, #40]	; (80080f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d202      	bcs.n	80080dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80080d6:	4a08      	ldr	r2, [pc, #32]	; (80080f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	6013      	str	r3, [r2, #0]
}
 80080dc:	bf00      	nop
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	2000144c 	.word	0x2000144c
 80080e8:	20000f74 	.word	0x20000f74
 80080ec:	20001434 	.word	0x20001434
 80080f0:	20001404 	.word	0x20001404
 80080f4:	20001400 	.word	0x20001400
 80080f8:	20001468 	.word	0x20001468

080080fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b08a      	sub	sp, #40	; 0x28
 8008100:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008102:	2300      	movs	r3, #0
 8008104:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008106:	f000 fb07 	bl	8008718 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800810a:	4b1c      	ldr	r3, [pc, #112]	; (800817c <xTimerCreateTimerTask+0x80>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d021      	beq.n	8008156 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008112:	2300      	movs	r3, #0
 8008114:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008116:	2300      	movs	r3, #0
 8008118:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800811a:	1d3a      	adds	r2, r7, #4
 800811c:	f107 0108 	add.w	r1, r7, #8
 8008120:	f107 030c 	add.w	r3, r7, #12
 8008124:	4618      	mov	r0, r3
 8008126:	f7fe fb07 	bl	8006738 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800812a:	6879      	ldr	r1, [r7, #4]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	9202      	str	r2, [sp, #8]
 8008132:	9301      	str	r3, [sp, #4]
 8008134:	2302      	movs	r3, #2
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	2300      	movs	r3, #0
 800813a:	460a      	mov	r2, r1
 800813c:	4910      	ldr	r1, [pc, #64]	; (8008180 <xTimerCreateTimerTask+0x84>)
 800813e:	4811      	ldr	r0, [pc, #68]	; (8008184 <xTimerCreateTimerTask+0x88>)
 8008140:	f7ff f8b4 	bl	80072ac <xTaskCreateStatic>
 8008144:	4603      	mov	r3, r0
 8008146:	4a10      	ldr	r2, [pc, #64]	; (8008188 <xTimerCreateTimerTask+0x8c>)
 8008148:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800814a:	4b0f      	ldr	r3, [pc, #60]	; (8008188 <xTimerCreateTimerTask+0x8c>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008152:	2301      	movs	r3, #1
 8008154:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10a      	bne.n	8008172 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	613b      	str	r3, [r7, #16]
}
 800816e:	bf00      	nop
 8008170:	e7fe      	b.n	8008170 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008172:	697b      	ldr	r3, [r7, #20]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	200014a4 	.word	0x200014a4
 8008180:	08009234 	.word	0x08009234
 8008184:	080082c1 	.word	0x080082c1
 8008188:	200014a8 	.word	0x200014a8

0800818c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b08a      	sub	sp, #40	; 0x28
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
 8008198:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800819a:	2300      	movs	r3, #0
 800819c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10a      	bne.n	80081ba <xTimerGenericCommand+0x2e>
	__asm volatile
 80081a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a8:	f383 8811 	msr	BASEPRI, r3
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	623b      	str	r3, [r7, #32]
}
 80081b6:	bf00      	nop
 80081b8:	e7fe      	b.n	80081b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80081ba:	4b1a      	ldr	r3, [pc, #104]	; (8008224 <xTimerGenericCommand+0x98>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d02a      	beq.n	8008218 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	2b05      	cmp	r3, #5
 80081d2:	dc18      	bgt.n	8008206 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80081d4:	f7ff feb2 	bl	8007f3c <xTaskGetSchedulerState>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d109      	bne.n	80081f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80081de:	4b11      	ldr	r3, [pc, #68]	; (8008224 <xTimerGenericCommand+0x98>)
 80081e0:	6818      	ldr	r0, [r3, #0]
 80081e2:	f107 0110 	add.w	r1, r7, #16
 80081e6:	2300      	movs	r3, #0
 80081e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ea:	f7fe fc77 	bl	8006adc <xQueueGenericSend>
 80081ee:	6278      	str	r0, [r7, #36]	; 0x24
 80081f0:	e012      	b.n	8008218 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80081f2:	4b0c      	ldr	r3, [pc, #48]	; (8008224 <xTimerGenericCommand+0x98>)
 80081f4:	6818      	ldr	r0, [r3, #0]
 80081f6:	f107 0110 	add.w	r1, r7, #16
 80081fa:	2300      	movs	r3, #0
 80081fc:	2200      	movs	r2, #0
 80081fe:	f7fe fc6d 	bl	8006adc <xQueueGenericSend>
 8008202:	6278      	str	r0, [r7, #36]	; 0x24
 8008204:	e008      	b.n	8008218 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008206:	4b07      	ldr	r3, [pc, #28]	; (8008224 <xTimerGenericCommand+0x98>)
 8008208:	6818      	ldr	r0, [r3, #0]
 800820a:	f107 0110 	add.w	r1, r7, #16
 800820e:	2300      	movs	r3, #0
 8008210:	683a      	ldr	r2, [r7, #0]
 8008212:	f7fe fd61 	bl	8006cd8 <xQueueGenericSendFromISR>
 8008216:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800821a:	4618      	mov	r0, r3
 800821c:	3728      	adds	r7, #40	; 0x28
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	200014a4 	.word	0x200014a4

08008228 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b088      	sub	sp, #32
 800822c:	af02      	add	r7, sp, #8
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008232:	4b22      	ldr	r3, [pc, #136]	; (80082bc <prvProcessExpiredTimer+0x94>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	3304      	adds	r3, #4
 8008240:	4618      	mov	r0, r3
 8008242:	f7fe fb1d 	bl	8006880 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800824c:	f003 0304 	and.w	r3, r3, #4
 8008250:	2b00      	cmp	r3, #0
 8008252:	d022      	beq.n	800829a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	699a      	ldr	r2, [r3, #24]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	18d1      	adds	r1, r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	6978      	ldr	r0, [r7, #20]
 8008262:	f000 f8d1 	bl	8008408 <prvInsertTimerInActiveList>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d01f      	beq.n	80082ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800826c:	2300      	movs	r3, #0
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	2300      	movs	r3, #0
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	2100      	movs	r1, #0
 8008276:	6978      	ldr	r0, [r7, #20]
 8008278:	f7ff ff88 	bl	800818c <xTimerGenericCommand>
 800827c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d113      	bne.n	80082ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	60fb      	str	r3, [r7, #12]
}
 8008296:	bf00      	nop
 8008298:	e7fe      	b.n	8008298 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082a0:	f023 0301 	bic.w	r3, r3, #1
 80082a4:	b2da      	uxtb	r2, r3
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	6a1b      	ldr	r3, [r3, #32]
 80082b0:	6978      	ldr	r0, [r7, #20]
 80082b2:	4798      	blx	r3
}
 80082b4:	bf00      	nop
 80082b6:	3718      	adds	r7, #24
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	2000149c 	.word	0x2000149c

080082c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082c8:	f107 0308 	add.w	r3, r7, #8
 80082cc:	4618      	mov	r0, r3
 80082ce:	f000 f857 	bl	8008380 <prvGetNextExpireTime>
 80082d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	4619      	mov	r1, r3
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 f803 	bl	80082e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80082de:	f000 f8d5 	bl	800848c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082e2:	e7f1      	b.n	80082c8 <prvTimerTask+0x8>

080082e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80082ee:	f7ff fa39 	bl	8007764 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082f2:	f107 0308 	add.w	r3, r7, #8
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 f866 	bl	80083c8 <prvSampleTimeNow>
 80082fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d130      	bne.n	8008366 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10a      	bne.n	8008320 <prvProcessTimerOrBlockTask+0x3c>
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	429a      	cmp	r2, r3
 8008310:	d806      	bhi.n	8008320 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008312:	f7ff fa35 	bl	8007780 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008316:	68f9      	ldr	r1, [r7, #12]
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f7ff ff85 	bl	8008228 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800831e:	e024      	b.n	800836a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d008      	beq.n	8008338 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008326:	4b13      	ldr	r3, [pc, #76]	; (8008374 <prvProcessTimerOrBlockTask+0x90>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <prvProcessTimerOrBlockTask+0x50>
 8008330:	2301      	movs	r3, #1
 8008332:	e000      	b.n	8008336 <prvProcessTimerOrBlockTask+0x52>
 8008334:	2300      	movs	r3, #0
 8008336:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008338:	4b0f      	ldr	r3, [pc, #60]	; (8008378 <prvProcessTimerOrBlockTask+0x94>)
 800833a:	6818      	ldr	r0, [r3, #0]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	4619      	mov	r1, r3
 8008346:	f7fe ff7d 	bl	8007244 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800834a:	f7ff fa19 	bl	8007780 <xTaskResumeAll>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10a      	bne.n	800836a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008354:	4b09      	ldr	r3, [pc, #36]	; (800837c <prvProcessTimerOrBlockTask+0x98>)
 8008356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800835a:	601a      	str	r2, [r3, #0]
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	f3bf 8f6f 	isb	sy
}
 8008364:	e001      	b.n	800836a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008366:	f7ff fa0b 	bl	8007780 <xTaskResumeAll>
}
 800836a:	bf00      	nop
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	200014a0 	.word	0x200014a0
 8008378:	200014a4 	.word	0x200014a4
 800837c:	e000ed04 	.word	0xe000ed04

08008380 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008388:	4b0e      	ldr	r3, [pc, #56]	; (80083c4 <prvGetNextExpireTime+0x44>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d101      	bne.n	8008396 <prvGetNextExpireTime+0x16>
 8008392:	2201      	movs	r2, #1
 8008394:	e000      	b.n	8008398 <prvGetNextExpireTime+0x18>
 8008396:	2200      	movs	r2, #0
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d105      	bne.n	80083b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083a4:	4b07      	ldr	r3, [pc, #28]	; (80083c4 <prvGetNextExpireTime+0x44>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	60fb      	str	r3, [r7, #12]
 80083ae:	e001      	b.n	80083b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80083b4:	68fb      	ldr	r3, [r7, #12]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	2000149c 	.word	0x2000149c

080083c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80083d0:	f7ff fa74 	bl	80078bc <xTaskGetTickCount>
 80083d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80083d6:	4b0b      	ldr	r3, [pc, #44]	; (8008404 <prvSampleTimeNow+0x3c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d205      	bcs.n	80083ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80083e0:	f000 f936 	bl	8008650 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	601a      	str	r2, [r3, #0]
 80083ea:	e002      	b.n	80083f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80083f2:	4a04      	ldr	r2, [pc, #16]	; (8008404 <prvSampleTimeNow+0x3c>)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80083f8:	68fb      	ldr	r3, [r7, #12]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	200014ac 	.word	0x200014ac

08008408 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b086      	sub	sp, #24
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	607a      	str	r2, [r7, #4]
 8008414:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008416:	2300      	movs	r3, #0
 8008418:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	429a      	cmp	r2, r3
 800842c:	d812      	bhi.n	8008454 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	1ad2      	subs	r2, r2, r3
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	429a      	cmp	r2, r3
 800843a:	d302      	bcc.n	8008442 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800843c:	2301      	movs	r3, #1
 800843e:	617b      	str	r3, [r7, #20]
 8008440:	e01b      	b.n	800847a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008442:	4b10      	ldr	r3, [pc, #64]	; (8008484 <prvInsertTimerInActiveList+0x7c>)
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	3304      	adds	r3, #4
 800844a:	4619      	mov	r1, r3
 800844c:	4610      	mov	r0, r2
 800844e:	f7fe f9de 	bl	800680e <vListInsert>
 8008452:	e012      	b.n	800847a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	429a      	cmp	r2, r3
 800845a:	d206      	bcs.n	800846a <prvInsertTimerInActiveList+0x62>
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	429a      	cmp	r2, r3
 8008462:	d302      	bcc.n	800846a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008464:	2301      	movs	r3, #1
 8008466:	617b      	str	r3, [r7, #20]
 8008468:	e007      	b.n	800847a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800846a:	4b07      	ldr	r3, [pc, #28]	; (8008488 <prvInsertTimerInActiveList+0x80>)
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3304      	adds	r3, #4
 8008472:	4619      	mov	r1, r3
 8008474:	4610      	mov	r0, r2
 8008476:	f7fe f9ca 	bl	800680e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800847a:	697b      	ldr	r3, [r7, #20]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3718      	adds	r7, #24
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	200014a0 	.word	0x200014a0
 8008488:	2000149c 	.word	0x2000149c

0800848c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b08e      	sub	sp, #56	; 0x38
 8008490:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008492:	e0ca      	b.n	800862a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	da18      	bge.n	80084cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800849a:	1d3b      	adds	r3, r7, #4
 800849c:	3304      	adds	r3, #4
 800849e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80084a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10a      	bne.n	80084bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	61fb      	str	r3, [r7, #28]
}
 80084b8:	bf00      	nop
 80084ba:	e7fe      	b.n	80084ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80084bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084c2:	6850      	ldr	r0, [r2, #4]
 80084c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084c6:	6892      	ldr	r2, [r2, #8]
 80084c8:	4611      	mov	r1, r2
 80084ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f2c0 80aa 	blt.w	8008628 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80084d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084da:	695b      	ldr	r3, [r3, #20]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d004      	beq.n	80084ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e2:	3304      	adds	r3, #4
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fe f9cb 	bl	8006880 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084ea:	463b      	mov	r3, r7
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7ff ff6b 	bl	80083c8 <prvSampleTimeNow>
 80084f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b09      	cmp	r3, #9
 80084f8:	f200 8097 	bhi.w	800862a <prvProcessReceivedCommands+0x19e>
 80084fc:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <prvProcessReceivedCommands+0x78>)
 80084fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008502:	bf00      	nop
 8008504:	0800852d 	.word	0x0800852d
 8008508:	0800852d 	.word	0x0800852d
 800850c:	0800852d 	.word	0x0800852d
 8008510:	080085a1 	.word	0x080085a1
 8008514:	080085b5 	.word	0x080085b5
 8008518:	080085ff 	.word	0x080085ff
 800851c:	0800852d 	.word	0x0800852d
 8008520:	0800852d 	.word	0x0800852d
 8008524:	080085a1 	.word	0x080085a1
 8008528:	080085b5 	.word	0x080085b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008532:	f043 0301 	orr.w	r3, r3, #1
 8008536:	b2da      	uxtb	r2, r3
 8008538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800853e:	68ba      	ldr	r2, [r7, #8]
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	699b      	ldr	r3, [r3, #24]
 8008544:	18d1      	adds	r1, r2, r3
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800854a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800854c:	f7ff ff5c 	bl	8008408 <prvInsertTimerInActiveList>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d069      	beq.n	800862a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800855c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800855e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008564:	f003 0304 	and.w	r3, r3, #4
 8008568:	2b00      	cmp	r3, #0
 800856a:	d05e      	beq.n	800862a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800856c:	68ba      	ldr	r2, [r7, #8]
 800856e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	441a      	add	r2, r3
 8008574:	2300      	movs	r3, #0
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	2300      	movs	r3, #0
 800857a:	2100      	movs	r1, #0
 800857c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800857e:	f7ff fe05 	bl	800818c <xTimerGenericCommand>
 8008582:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d14f      	bne.n	800862a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	f383 8811 	msr	BASEPRI, r3
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	61bb      	str	r3, [r7, #24]
}
 800859c:	bf00      	nop
 800859e:	e7fe      	b.n	800859e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085a6:	f023 0301 	bic.w	r3, r3, #1
 80085aa:	b2da      	uxtb	r2, r3
 80085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80085b2:	e03a      	b.n	800862a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085ba:	f043 0301 	orr.w	r3, r3, #1
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80085cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10a      	bne.n	80085ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80085d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d8:	f383 8811 	msr	BASEPRI, r3
 80085dc:	f3bf 8f6f 	isb	sy
 80085e0:	f3bf 8f4f 	dsb	sy
 80085e4:	617b      	str	r3, [r7, #20]
}
 80085e6:	bf00      	nop
 80085e8:	e7fe      	b.n	80085e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80085ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ec:	699a      	ldr	r2, [r3, #24]
 80085ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f0:	18d1      	adds	r1, r2, r3
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085f8:	f7ff ff06 	bl	8008408 <prvInsertTimerInActiveList>
					break;
 80085fc:	e015      	b.n	800862a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80085fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008604:	f003 0302 	and.w	r3, r3, #2
 8008608:	2b00      	cmp	r3, #0
 800860a:	d103      	bne.n	8008614 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800860c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800860e:	f000 fbdf 	bl	8008dd0 <vPortFree>
 8008612:	e00a      	b.n	800862a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800861a:	f023 0301 	bic.w	r3, r3, #1
 800861e:	b2da      	uxtb	r2, r3
 8008620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008626:	e000      	b.n	800862a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008628:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800862a:	4b08      	ldr	r3, [pc, #32]	; (800864c <prvProcessReceivedCommands+0x1c0>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	1d39      	adds	r1, r7, #4
 8008630:	2200      	movs	r2, #0
 8008632:	4618      	mov	r0, r3
 8008634:	f7fe fbec 	bl	8006e10 <xQueueReceive>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	f47f af2a 	bne.w	8008494 <prvProcessReceivedCommands+0x8>
	}
}
 8008640:	bf00      	nop
 8008642:	bf00      	nop
 8008644:	3730      	adds	r7, #48	; 0x30
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	200014a4 	.word	0x200014a4

08008650 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b088      	sub	sp, #32
 8008654:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008656:	e048      	b.n	80086ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008658:	4b2d      	ldr	r3, [pc, #180]	; (8008710 <prvSwitchTimerLists+0xc0>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008662:	4b2b      	ldr	r3, [pc, #172]	; (8008710 <prvSwitchTimerLists+0xc0>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	3304      	adds	r3, #4
 8008670:	4618      	mov	r0, r3
 8008672:	f7fe f905 	bl	8006880 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008684:	f003 0304 	and.w	r3, r3, #4
 8008688:	2b00      	cmp	r3, #0
 800868a:	d02e      	beq.n	80086ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	4413      	add	r3, r2
 8008694:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	429a      	cmp	r2, r3
 800869c:	d90e      	bls.n	80086bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086aa:	4b19      	ldr	r3, [pc, #100]	; (8008710 <prvSwitchTimerLists+0xc0>)
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	3304      	adds	r3, #4
 80086b2:	4619      	mov	r1, r3
 80086b4:	4610      	mov	r0, r2
 80086b6:	f7fe f8aa 	bl	800680e <vListInsert>
 80086ba:	e016      	b.n	80086ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086bc:	2300      	movs	r3, #0
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	2300      	movs	r3, #0
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	2100      	movs	r1, #0
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f7ff fd60 	bl	800818c <xTimerGenericCommand>
 80086cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10a      	bne.n	80086ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 80086d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	603b      	str	r3, [r7, #0]
}
 80086e6:	bf00      	nop
 80086e8:	e7fe      	b.n	80086e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086ea:	4b09      	ldr	r3, [pc, #36]	; (8008710 <prvSwitchTimerLists+0xc0>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1b1      	bne.n	8008658 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80086f4:	4b06      	ldr	r3, [pc, #24]	; (8008710 <prvSwitchTimerLists+0xc0>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80086fa:	4b06      	ldr	r3, [pc, #24]	; (8008714 <prvSwitchTimerLists+0xc4>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a04      	ldr	r2, [pc, #16]	; (8008710 <prvSwitchTimerLists+0xc0>)
 8008700:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008702:	4a04      	ldr	r2, [pc, #16]	; (8008714 <prvSwitchTimerLists+0xc4>)
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	6013      	str	r3, [r2, #0]
}
 8008708:	bf00      	nop
 800870a:	3718      	adds	r7, #24
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	2000149c 	.word	0x2000149c
 8008714:	200014a0 	.word	0x200014a0

08008718 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800871e:	f000 f969 	bl	80089f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008722:	4b15      	ldr	r3, [pc, #84]	; (8008778 <prvCheckForValidListAndQueue+0x60>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d120      	bne.n	800876c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800872a:	4814      	ldr	r0, [pc, #80]	; (800877c <prvCheckForValidListAndQueue+0x64>)
 800872c:	f7fe f81e 	bl	800676c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008730:	4813      	ldr	r0, [pc, #76]	; (8008780 <prvCheckForValidListAndQueue+0x68>)
 8008732:	f7fe f81b 	bl	800676c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008736:	4b13      	ldr	r3, [pc, #76]	; (8008784 <prvCheckForValidListAndQueue+0x6c>)
 8008738:	4a10      	ldr	r2, [pc, #64]	; (800877c <prvCheckForValidListAndQueue+0x64>)
 800873a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800873c:	4b12      	ldr	r3, [pc, #72]	; (8008788 <prvCheckForValidListAndQueue+0x70>)
 800873e:	4a10      	ldr	r2, [pc, #64]	; (8008780 <prvCheckForValidListAndQueue+0x68>)
 8008740:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008742:	2300      	movs	r3, #0
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	4b11      	ldr	r3, [pc, #68]	; (800878c <prvCheckForValidListAndQueue+0x74>)
 8008748:	4a11      	ldr	r2, [pc, #68]	; (8008790 <prvCheckForValidListAndQueue+0x78>)
 800874a:	2110      	movs	r1, #16
 800874c:	200a      	movs	r0, #10
 800874e:	f7fe f929 	bl	80069a4 <xQueueGenericCreateStatic>
 8008752:	4603      	mov	r3, r0
 8008754:	4a08      	ldr	r2, [pc, #32]	; (8008778 <prvCheckForValidListAndQueue+0x60>)
 8008756:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008758:	4b07      	ldr	r3, [pc, #28]	; (8008778 <prvCheckForValidListAndQueue+0x60>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d005      	beq.n	800876c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008760:	4b05      	ldr	r3, [pc, #20]	; (8008778 <prvCheckForValidListAndQueue+0x60>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	490b      	ldr	r1, [pc, #44]	; (8008794 <prvCheckForValidListAndQueue+0x7c>)
 8008766:	4618      	mov	r0, r3
 8008768:	f7fe fd42 	bl	80071f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800876c:	f000 f972 	bl	8008a54 <vPortExitCritical>
}
 8008770:	bf00      	nop
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	200014a4 	.word	0x200014a4
 800877c:	20001474 	.word	0x20001474
 8008780:	20001488 	.word	0x20001488
 8008784:	2000149c 	.word	0x2000149c
 8008788:	200014a0 	.word	0x200014a0
 800878c:	20001550 	.word	0x20001550
 8008790:	200014b0 	.word	0x200014b0
 8008794:	0800923c 	.word	0x0800923c

08008798 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	3b04      	subs	r3, #4
 80087a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3b04      	subs	r3, #4
 80087b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	f023 0201 	bic.w	r2, r3, #1
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3b04      	subs	r3, #4
 80087c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80087c8:	4a0c      	ldr	r2, [pc, #48]	; (80087fc <pxPortInitialiseStack+0x64>)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	3b14      	subs	r3, #20
 80087d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	3b04      	subs	r3, #4
 80087de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f06f 0202 	mvn.w	r2, #2
 80087e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	3b20      	subs	r3, #32
 80087ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80087ee:	68fb      	ldr	r3, [r7, #12]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	08008801 	.word	0x08008801

08008800 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008806:	2300      	movs	r3, #0
 8008808:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800880a:	4b12      	ldr	r3, [pc, #72]	; (8008854 <prvTaskExitError+0x54>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008812:	d00a      	beq.n	800882a <prvTaskExitError+0x2a>
	__asm volatile
 8008814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	60fb      	str	r3, [r7, #12]
}
 8008826:	bf00      	nop
 8008828:	e7fe      	b.n	8008828 <prvTaskExitError+0x28>
	__asm volatile
 800882a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882e:	f383 8811 	msr	BASEPRI, r3
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	60bb      	str	r3, [r7, #8]
}
 800883c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800883e:	bf00      	nop
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d0fc      	beq.n	8008840 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008846:	bf00      	nop
 8008848:	bf00      	nop
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr
 8008854:	20000048 	.word	0x20000048
	...

08008860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008860:	4b07      	ldr	r3, [pc, #28]	; (8008880 <pxCurrentTCBConst2>)
 8008862:	6819      	ldr	r1, [r3, #0]
 8008864:	6808      	ldr	r0, [r1, #0]
 8008866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886a:	f380 8809 	msr	PSP, r0
 800886e:	f3bf 8f6f 	isb	sy
 8008872:	f04f 0000 	mov.w	r0, #0
 8008876:	f380 8811 	msr	BASEPRI, r0
 800887a:	4770      	bx	lr
 800887c:	f3af 8000 	nop.w

08008880 <pxCurrentTCBConst2>:
 8008880:	20000f74 	.word	0x20000f74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008884:	bf00      	nop
 8008886:	bf00      	nop

08008888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008888:	4808      	ldr	r0, [pc, #32]	; (80088ac <prvPortStartFirstTask+0x24>)
 800888a:	6800      	ldr	r0, [r0, #0]
 800888c:	6800      	ldr	r0, [r0, #0]
 800888e:	f380 8808 	msr	MSP, r0
 8008892:	f04f 0000 	mov.w	r0, #0
 8008896:	f380 8814 	msr	CONTROL, r0
 800889a:	b662      	cpsie	i
 800889c:	b661      	cpsie	f
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	df00      	svc	0
 80088a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80088aa:	bf00      	nop
 80088ac:	e000ed08 	.word	0xe000ed08

080088b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80088b6:	4b46      	ldr	r3, [pc, #280]	; (80089d0 <xPortStartScheduler+0x120>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a46      	ldr	r2, [pc, #280]	; (80089d4 <xPortStartScheduler+0x124>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d10a      	bne.n	80088d6 <xPortStartScheduler+0x26>
	__asm volatile
 80088c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	613b      	str	r3, [r7, #16]
}
 80088d2:	bf00      	nop
 80088d4:	e7fe      	b.n	80088d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80088d6:	4b3e      	ldr	r3, [pc, #248]	; (80089d0 <xPortStartScheduler+0x120>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a3f      	ldr	r2, [pc, #252]	; (80089d8 <xPortStartScheduler+0x128>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d10a      	bne.n	80088f6 <xPortStartScheduler+0x46>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	60fb      	str	r3, [r7, #12]
}
 80088f2:	bf00      	nop
 80088f4:	e7fe      	b.n	80088f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80088f6:	4b39      	ldr	r3, [pc, #228]	; (80089dc <xPortStartScheduler+0x12c>)
 80088f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	22ff      	movs	r2, #255	; 0xff
 8008906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	b2db      	uxtb	r3, r3
 800890e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008910:	78fb      	ldrb	r3, [r7, #3]
 8008912:	b2db      	uxtb	r3, r3
 8008914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008918:	b2da      	uxtb	r2, r3
 800891a:	4b31      	ldr	r3, [pc, #196]	; (80089e0 <xPortStartScheduler+0x130>)
 800891c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800891e:	4b31      	ldr	r3, [pc, #196]	; (80089e4 <xPortStartScheduler+0x134>)
 8008920:	2207      	movs	r2, #7
 8008922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008924:	e009      	b.n	800893a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008926:	4b2f      	ldr	r3, [pc, #188]	; (80089e4 <xPortStartScheduler+0x134>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	3b01      	subs	r3, #1
 800892c:	4a2d      	ldr	r2, [pc, #180]	; (80089e4 <xPortStartScheduler+0x134>)
 800892e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008930:	78fb      	ldrb	r3, [r7, #3]
 8008932:	b2db      	uxtb	r3, r3
 8008934:	005b      	lsls	r3, r3, #1
 8008936:	b2db      	uxtb	r3, r3
 8008938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800893a:	78fb      	ldrb	r3, [r7, #3]
 800893c:	b2db      	uxtb	r3, r3
 800893e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008942:	2b80      	cmp	r3, #128	; 0x80
 8008944:	d0ef      	beq.n	8008926 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008946:	4b27      	ldr	r3, [pc, #156]	; (80089e4 <xPortStartScheduler+0x134>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f1c3 0307 	rsb	r3, r3, #7
 800894e:	2b04      	cmp	r3, #4
 8008950:	d00a      	beq.n	8008968 <xPortStartScheduler+0xb8>
	__asm volatile
 8008952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008956:	f383 8811 	msr	BASEPRI, r3
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	60bb      	str	r3, [r7, #8]
}
 8008964:	bf00      	nop
 8008966:	e7fe      	b.n	8008966 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008968:	4b1e      	ldr	r3, [pc, #120]	; (80089e4 <xPortStartScheduler+0x134>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	021b      	lsls	r3, r3, #8
 800896e:	4a1d      	ldr	r2, [pc, #116]	; (80089e4 <xPortStartScheduler+0x134>)
 8008970:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008972:	4b1c      	ldr	r3, [pc, #112]	; (80089e4 <xPortStartScheduler+0x134>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800897a:	4a1a      	ldr	r2, [pc, #104]	; (80089e4 <xPortStartScheduler+0x134>)
 800897c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	b2da      	uxtb	r2, r3
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008986:	4b18      	ldr	r3, [pc, #96]	; (80089e8 <xPortStartScheduler+0x138>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a17      	ldr	r2, [pc, #92]	; (80089e8 <xPortStartScheduler+0x138>)
 800898c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008990:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008992:	4b15      	ldr	r3, [pc, #84]	; (80089e8 <xPortStartScheduler+0x138>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a14      	ldr	r2, [pc, #80]	; (80089e8 <xPortStartScheduler+0x138>)
 8008998:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800899c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800899e:	f000 f8dd 	bl	8008b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80089a2:	4b12      	ldr	r3, [pc, #72]	; (80089ec <xPortStartScheduler+0x13c>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80089a8:	f000 f8fc 	bl	8008ba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80089ac:	4b10      	ldr	r3, [pc, #64]	; (80089f0 <xPortStartScheduler+0x140>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a0f      	ldr	r2, [pc, #60]	; (80089f0 <xPortStartScheduler+0x140>)
 80089b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80089b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80089b8:	f7ff ff66 	bl	8008888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80089bc:	f7ff f848 	bl	8007a50 <vTaskSwitchContext>
	prvTaskExitError();
 80089c0:	f7ff ff1e 	bl	8008800 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3718      	adds	r7, #24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	e000ed00 	.word	0xe000ed00
 80089d4:	410fc271 	.word	0x410fc271
 80089d8:	410fc270 	.word	0x410fc270
 80089dc:	e000e400 	.word	0xe000e400
 80089e0:	200015a0 	.word	0x200015a0
 80089e4:	200015a4 	.word	0x200015a4
 80089e8:	e000ed20 	.word	0xe000ed20
 80089ec:	20000048 	.word	0x20000048
 80089f0:	e000ef34 	.word	0xe000ef34

080089f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	607b      	str	r3, [r7, #4]
}
 8008a0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a0e:	4b0f      	ldr	r3, [pc, #60]	; (8008a4c <vPortEnterCritical+0x58>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	3301      	adds	r3, #1
 8008a14:	4a0d      	ldr	r2, [pc, #52]	; (8008a4c <vPortEnterCritical+0x58>)
 8008a16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a18:	4b0c      	ldr	r3, [pc, #48]	; (8008a4c <vPortEnterCritical+0x58>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d10f      	bne.n	8008a40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a20:	4b0b      	ldr	r3, [pc, #44]	; (8008a50 <vPortEnterCritical+0x5c>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00a      	beq.n	8008a40 <vPortEnterCritical+0x4c>
	__asm volatile
 8008a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	603b      	str	r3, [r7, #0]
}
 8008a3c:	bf00      	nop
 8008a3e:	e7fe      	b.n	8008a3e <vPortEnterCritical+0x4a>
	}
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr
 8008a4c:	20000048 	.word	0x20000048
 8008a50:	e000ed04 	.word	0xe000ed04

08008a54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a5a:	4b12      	ldr	r3, [pc, #72]	; (8008aa4 <vPortExitCritical+0x50>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10a      	bne.n	8008a78 <vPortExitCritical+0x24>
	__asm volatile
 8008a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	607b      	str	r3, [r7, #4]
}
 8008a74:	bf00      	nop
 8008a76:	e7fe      	b.n	8008a76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008a78:	4b0a      	ldr	r3, [pc, #40]	; (8008aa4 <vPortExitCritical+0x50>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	4a09      	ldr	r2, [pc, #36]	; (8008aa4 <vPortExitCritical+0x50>)
 8008a80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a82:	4b08      	ldr	r3, [pc, #32]	; (8008aa4 <vPortExitCritical+0x50>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d105      	bne.n	8008a96 <vPortExitCritical+0x42>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	f383 8811 	msr	BASEPRI, r3
}
 8008a94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a96:	bf00      	nop
 8008a98:	370c      	adds	r7, #12
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	20000048 	.word	0x20000048
	...

08008ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ab0:	f3ef 8009 	mrs	r0, PSP
 8008ab4:	f3bf 8f6f 	isb	sy
 8008ab8:	4b15      	ldr	r3, [pc, #84]	; (8008b10 <pxCurrentTCBConst>)
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	f01e 0f10 	tst.w	lr, #16
 8008ac0:	bf08      	it	eq
 8008ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aca:	6010      	str	r0, [r2, #0]
 8008acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ad4:	f380 8811 	msr	BASEPRI, r0
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	f7fe ffb6 	bl	8007a50 <vTaskSwitchContext>
 8008ae4:	f04f 0000 	mov.w	r0, #0
 8008ae8:	f380 8811 	msr	BASEPRI, r0
 8008aec:	bc09      	pop	{r0, r3}
 8008aee:	6819      	ldr	r1, [r3, #0]
 8008af0:	6808      	ldr	r0, [r1, #0]
 8008af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af6:	f01e 0f10 	tst.w	lr, #16
 8008afa:	bf08      	it	eq
 8008afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b00:	f380 8809 	msr	PSP, r0
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	f3af 8000 	nop.w

08008b10 <pxCurrentTCBConst>:
 8008b10:	20000f74 	.word	0x20000f74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b14:	bf00      	nop
 8008b16:	bf00      	nop

08008b18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	607b      	str	r3, [r7, #4]
}
 8008b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b32:	f7fe fed3 	bl	80078dc <xTaskIncrementTick>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d003      	beq.n	8008b44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b3c:	4b06      	ldr	r3, [pc, #24]	; (8008b58 <xPortSysTickHandler+0x40>)
 8008b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	2300      	movs	r3, #0
 8008b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	f383 8811 	msr	BASEPRI, r3
}
 8008b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b50:	bf00      	nop
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	e000ed04 	.word	0xe000ed04

08008b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b60:	4b0b      	ldr	r3, [pc, #44]	; (8008b90 <vPortSetupTimerInterrupt+0x34>)
 8008b62:	2200      	movs	r2, #0
 8008b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b66:	4b0b      	ldr	r3, [pc, #44]	; (8008b94 <vPortSetupTimerInterrupt+0x38>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b6c:	4b0a      	ldr	r3, [pc, #40]	; (8008b98 <vPortSetupTimerInterrupt+0x3c>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a0a      	ldr	r2, [pc, #40]	; (8008b9c <vPortSetupTimerInterrupt+0x40>)
 8008b72:	fba2 2303 	umull	r2, r3, r2, r3
 8008b76:	099b      	lsrs	r3, r3, #6
 8008b78:	4a09      	ldr	r2, [pc, #36]	; (8008ba0 <vPortSetupTimerInterrupt+0x44>)
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b7e:	4b04      	ldr	r3, [pc, #16]	; (8008b90 <vPortSetupTimerInterrupt+0x34>)
 8008b80:	2207      	movs	r2, #7
 8008b82:	601a      	str	r2, [r3, #0]
}
 8008b84:	bf00      	nop
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	e000e010 	.word	0xe000e010
 8008b94:	e000e018 	.word	0xe000e018
 8008b98:	2000003c 	.word	0x2000003c
 8008b9c:	10624dd3 	.word	0x10624dd3
 8008ba0:	e000e014 	.word	0xe000e014

08008ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008bb4 <vPortEnableVFP+0x10>
 8008ba8:	6801      	ldr	r1, [r0, #0]
 8008baa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008bae:	6001      	str	r1, [r0, #0]
 8008bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008bb2:	bf00      	nop
 8008bb4:	e000ed88 	.word	0xe000ed88

08008bb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008bbe:	f3ef 8305 	mrs	r3, IPSR
 8008bc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2b0f      	cmp	r3, #15
 8008bc8:	d914      	bls.n	8008bf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008bca:	4a17      	ldr	r2, [pc, #92]	; (8008c28 <vPortValidateInterruptPriority+0x70>)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	4413      	add	r3, r2
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008bd4:	4b15      	ldr	r3, [pc, #84]	; (8008c2c <vPortValidateInterruptPriority+0x74>)
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	7afa      	ldrb	r2, [r7, #11]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d20a      	bcs.n	8008bf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	607b      	str	r3, [r7, #4]
}
 8008bf0:	bf00      	nop
 8008bf2:	e7fe      	b.n	8008bf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008bf4:	4b0e      	ldr	r3, [pc, #56]	; (8008c30 <vPortValidateInterruptPriority+0x78>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008bfc:	4b0d      	ldr	r3, [pc, #52]	; (8008c34 <vPortValidateInterruptPriority+0x7c>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d90a      	bls.n	8008c1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	603b      	str	r3, [r7, #0]
}
 8008c16:	bf00      	nop
 8008c18:	e7fe      	b.n	8008c18 <vPortValidateInterruptPriority+0x60>
	}
 8008c1a:	bf00      	nop
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	e000e3f0 	.word	0xe000e3f0
 8008c2c:	200015a0 	.word	0x200015a0
 8008c30:	e000ed0c 	.word	0xe000ed0c
 8008c34:	200015a4 	.word	0x200015a4

08008c38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b08a      	sub	sp, #40	; 0x28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c40:	2300      	movs	r3, #0
 8008c42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c44:	f7fe fd8e 	bl	8007764 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c48:	4b5b      	ldr	r3, [pc, #364]	; (8008db8 <pvPortMalloc+0x180>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d101      	bne.n	8008c54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c50:	f000 f920 	bl	8008e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c54:	4b59      	ldr	r3, [pc, #356]	; (8008dbc <pvPortMalloc+0x184>)
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f040 8093 	bne.w	8008d88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d01d      	beq.n	8008ca4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008c68:	2208      	movs	r2, #8
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f003 0307 	and.w	r3, r3, #7
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d014      	beq.n	8008ca4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f023 0307 	bic.w	r3, r3, #7
 8008c80:	3308      	adds	r3, #8
 8008c82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f003 0307 	and.w	r3, r3, #7
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00a      	beq.n	8008ca4 <pvPortMalloc+0x6c>
	__asm volatile
 8008c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c92:	f383 8811 	msr	BASEPRI, r3
 8008c96:	f3bf 8f6f 	isb	sy
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	617b      	str	r3, [r7, #20]
}
 8008ca0:	bf00      	nop
 8008ca2:	e7fe      	b.n	8008ca2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d06e      	beq.n	8008d88 <pvPortMalloc+0x150>
 8008caa:	4b45      	ldr	r3, [pc, #276]	; (8008dc0 <pvPortMalloc+0x188>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d869      	bhi.n	8008d88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008cb4:	4b43      	ldr	r3, [pc, #268]	; (8008dc4 <pvPortMalloc+0x18c>)
 8008cb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008cb8:	4b42      	ldr	r3, [pc, #264]	; (8008dc4 <pvPortMalloc+0x18c>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cbe:	e004      	b.n	8008cca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d903      	bls.n	8008cdc <pvPortMalloc+0xa4>
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1f1      	bne.n	8008cc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008cdc:	4b36      	ldr	r3, [pc, #216]	; (8008db8 <pvPortMalloc+0x180>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d050      	beq.n	8008d88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2208      	movs	r2, #8
 8008cec:	4413      	add	r3, r2
 8008cee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	6a3b      	ldr	r3, [r7, #32]
 8008cf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	1ad2      	subs	r2, r2, r3
 8008d00:	2308      	movs	r3, #8
 8008d02:	005b      	lsls	r3, r3, #1
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d91f      	bls.n	8008d48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	f003 0307 	and.w	r3, r3, #7
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00a      	beq.n	8008d30 <pvPortMalloc+0xf8>
	__asm volatile
 8008d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1e:	f383 8811 	msr	BASEPRI, r3
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	613b      	str	r3, [r7, #16]
}
 8008d2c:	bf00      	nop
 8008d2e:	e7fe      	b.n	8008d2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	685a      	ldr	r2, [r3, #4]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	1ad2      	subs	r2, r2, r3
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d42:	69b8      	ldr	r0, [r7, #24]
 8008d44:	f000 f908 	bl	8008f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d48:	4b1d      	ldr	r3, [pc, #116]	; (8008dc0 <pvPortMalloc+0x188>)
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	4a1b      	ldr	r2, [pc, #108]	; (8008dc0 <pvPortMalloc+0x188>)
 8008d54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d56:	4b1a      	ldr	r3, [pc, #104]	; (8008dc0 <pvPortMalloc+0x188>)
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	4b1b      	ldr	r3, [pc, #108]	; (8008dc8 <pvPortMalloc+0x190>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d203      	bcs.n	8008d6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d62:	4b17      	ldr	r3, [pc, #92]	; (8008dc0 <pvPortMalloc+0x188>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a18      	ldr	r2, [pc, #96]	; (8008dc8 <pvPortMalloc+0x190>)
 8008d68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	4b13      	ldr	r3, [pc, #76]	; (8008dbc <pvPortMalloc+0x184>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	431a      	orrs	r2, r3
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d7e:	4b13      	ldr	r3, [pc, #76]	; (8008dcc <pvPortMalloc+0x194>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3301      	adds	r3, #1
 8008d84:	4a11      	ldr	r2, [pc, #68]	; (8008dcc <pvPortMalloc+0x194>)
 8008d86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d88:	f7fe fcfa 	bl	8007780 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	f003 0307 	and.w	r3, r3, #7
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00a      	beq.n	8008dac <pvPortMalloc+0x174>
	__asm volatile
 8008d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9a:	f383 8811 	msr	BASEPRI, r3
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	60fb      	str	r3, [r7, #12]
}
 8008da8:	bf00      	nop
 8008daa:	e7fe      	b.n	8008daa <pvPortMalloc+0x172>
	return pvReturn;
 8008dac:	69fb      	ldr	r3, [r7, #28]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3728      	adds	r7, #40	; 0x28
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	200051b0 	.word	0x200051b0
 8008dbc:	200051c4 	.word	0x200051c4
 8008dc0:	200051b4 	.word	0x200051b4
 8008dc4:	200051a8 	.word	0x200051a8
 8008dc8:	200051b8 	.word	0x200051b8
 8008dcc:	200051bc 	.word	0x200051bc

08008dd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d04d      	beq.n	8008e7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008de2:	2308      	movs	r3, #8
 8008de4:	425b      	negs	r3, r3
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	4413      	add	r3, r2
 8008dea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	685a      	ldr	r2, [r3, #4]
 8008df4:	4b24      	ldr	r3, [pc, #144]	; (8008e88 <vPortFree+0xb8>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4013      	ands	r3, r2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10a      	bne.n	8008e14 <vPortFree+0x44>
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	60fb      	str	r3, [r7, #12]
}
 8008e10:	bf00      	nop
 8008e12:	e7fe      	b.n	8008e12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00a      	beq.n	8008e32 <vPortFree+0x62>
	__asm volatile
 8008e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	60bb      	str	r3, [r7, #8]
}
 8008e2e:	bf00      	nop
 8008e30:	e7fe      	b.n	8008e30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	4b14      	ldr	r3, [pc, #80]	; (8008e88 <vPortFree+0xb8>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d01e      	beq.n	8008e7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d11a      	bne.n	8008e7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	4b0e      	ldr	r3, [pc, #56]	; (8008e88 <vPortFree+0xb8>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	43db      	mvns	r3, r3
 8008e52:	401a      	ands	r2, r3
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e58:	f7fe fc84 	bl	8007764 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	685a      	ldr	r2, [r3, #4]
 8008e60:	4b0a      	ldr	r3, [pc, #40]	; (8008e8c <vPortFree+0xbc>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4413      	add	r3, r2
 8008e66:	4a09      	ldr	r2, [pc, #36]	; (8008e8c <vPortFree+0xbc>)
 8008e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e6a:	6938      	ldr	r0, [r7, #16]
 8008e6c:	f000 f874 	bl	8008f58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e70:	4b07      	ldr	r3, [pc, #28]	; (8008e90 <vPortFree+0xc0>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3301      	adds	r3, #1
 8008e76:	4a06      	ldr	r2, [pc, #24]	; (8008e90 <vPortFree+0xc0>)
 8008e78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e7a:	f7fe fc81 	bl	8007780 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e7e:	bf00      	nop
 8008e80:	3718      	adds	r7, #24
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	200051c4 	.word	0x200051c4
 8008e8c:	200051b4 	.word	0x200051b4
 8008e90:	200051c0 	.word	0x200051c0

08008e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ea0:	4b27      	ldr	r3, [pc, #156]	; (8008f40 <prvHeapInit+0xac>)
 8008ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f003 0307 	and.w	r3, r3, #7
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00c      	beq.n	8008ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3307      	adds	r3, #7
 8008eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f023 0307 	bic.w	r3, r3, #7
 8008eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	4a1f      	ldr	r2, [pc, #124]	; (8008f40 <prvHeapInit+0xac>)
 8008ec4:	4413      	add	r3, r2
 8008ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ecc:	4a1d      	ldr	r2, [pc, #116]	; (8008f44 <prvHeapInit+0xb0>)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ed2:	4b1c      	ldr	r3, [pc, #112]	; (8008f44 <prvHeapInit+0xb0>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	4413      	add	r3, r2
 8008ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ee0:	2208      	movs	r2, #8
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	1a9b      	subs	r3, r3, r2
 8008ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f023 0307 	bic.w	r3, r3, #7
 8008eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	4a15      	ldr	r2, [pc, #84]	; (8008f48 <prvHeapInit+0xb4>)
 8008ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ef6:	4b14      	ldr	r3, [pc, #80]	; (8008f48 <prvHeapInit+0xb4>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2200      	movs	r2, #0
 8008efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008efe:	4b12      	ldr	r3, [pc, #72]	; (8008f48 <prvHeapInit+0xb4>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2200      	movs	r2, #0
 8008f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	1ad2      	subs	r2, r2, r3
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f14:	4b0c      	ldr	r3, [pc, #48]	; (8008f48 <prvHeapInit+0xb4>)
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	4a0a      	ldr	r2, [pc, #40]	; (8008f4c <prvHeapInit+0xb8>)
 8008f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	4a09      	ldr	r2, [pc, #36]	; (8008f50 <prvHeapInit+0xbc>)
 8008f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f2c:	4b09      	ldr	r3, [pc, #36]	; (8008f54 <prvHeapInit+0xc0>)
 8008f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008f32:	601a      	str	r2, [r3, #0]
}
 8008f34:	bf00      	nop
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	200015a8 	.word	0x200015a8
 8008f44:	200051a8 	.word	0x200051a8
 8008f48:	200051b0 	.word	0x200051b0
 8008f4c:	200051b8 	.word	0x200051b8
 8008f50:	200051b4 	.word	0x200051b4
 8008f54:	200051c4 	.word	0x200051c4

08008f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f60:	4b28      	ldr	r3, [pc, #160]	; (8009004 <prvInsertBlockIntoFreeList+0xac>)
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	e002      	b.n	8008f6c <prvInsertBlockIntoFreeList+0x14>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d8f7      	bhi.n	8008f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	4413      	add	r3, r2
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d108      	bne.n	8008f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	441a      	add	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	441a      	add	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d118      	bne.n	8008fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	4b15      	ldr	r3, [pc, #84]	; (8009008 <prvInsertBlockIntoFreeList+0xb0>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d00d      	beq.n	8008fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685a      	ldr	r2, [r3, #4]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	441a      	add	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	601a      	str	r2, [r3, #0]
 8008fd4:	e008      	b.n	8008fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008fd6:	4b0c      	ldr	r3, [pc, #48]	; (8009008 <prvInsertBlockIntoFreeList+0xb0>)
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	601a      	str	r2, [r3, #0]
 8008fde:	e003      	b.n	8008fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d002      	beq.n	8008ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ff6:	bf00      	nop
 8008ff8:	3714      	adds	r7, #20
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	200051a8 	.word	0x200051a8
 8009008:	200051b0 	.word	0x200051b0

0800900c <__libc_init_array>:
 800900c:	b570      	push	{r4, r5, r6, lr}
 800900e:	4d0d      	ldr	r5, [pc, #52]	; (8009044 <__libc_init_array+0x38>)
 8009010:	4c0d      	ldr	r4, [pc, #52]	; (8009048 <__libc_init_array+0x3c>)
 8009012:	1b64      	subs	r4, r4, r5
 8009014:	10a4      	asrs	r4, r4, #2
 8009016:	2600      	movs	r6, #0
 8009018:	42a6      	cmp	r6, r4
 800901a:	d109      	bne.n	8009030 <__libc_init_array+0x24>
 800901c:	4d0b      	ldr	r5, [pc, #44]	; (800904c <__libc_init_array+0x40>)
 800901e:	4c0c      	ldr	r4, [pc, #48]	; (8009050 <__libc_init_array+0x44>)
 8009020:	f000 f8f2 	bl	8009208 <_init>
 8009024:	1b64      	subs	r4, r4, r5
 8009026:	10a4      	asrs	r4, r4, #2
 8009028:	2600      	movs	r6, #0
 800902a:	42a6      	cmp	r6, r4
 800902c:	d105      	bne.n	800903a <__libc_init_array+0x2e>
 800902e:	bd70      	pop	{r4, r5, r6, pc}
 8009030:	f855 3b04 	ldr.w	r3, [r5], #4
 8009034:	4798      	blx	r3
 8009036:	3601      	adds	r6, #1
 8009038:	e7ee      	b.n	8009018 <__libc_init_array+0xc>
 800903a:	f855 3b04 	ldr.w	r3, [r5], #4
 800903e:	4798      	blx	r3
 8009040:	3601      	adds	r6, #1
 8009042:	e7f2      	b.n	800902a <__libc_init_array+0x1e>
 8009044:	080094f4 	.word	0x080094f4
 8009048:	080094f4 	.word	0x080094f4
 800904c:	080094f4 	.word	0x080094f4
 8009050:	080094f8 	.word	0x080094f8

08009054 <__retarget_lock_acquire_recursive>:
 8009054:	4770      	bx	lr

08009056 <__retarget_lock_release_recursive>:
 8009056:	4770      	bx	lr

08009058 <memcpy>:
 8009058:	440a      	add	r2, r1
 800905a:	4291      	cmp	r1, r2
 800905c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009060:	d100      	bne.n	8009064 <memcpy+0xc>
 8009062:	4770      	bx	lr
 8009064:	b510      	push	{r4, lr}
 8009066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800906a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800906e:	4291      	cmp	r1, r2
 8009070:	d1f9      	bne.n	8009066 <memcpy+0xe>
 8009072:	bd10      	pop	{r4, pc}

08009074 <memset>:
 8009074:	4402      	add	r2, r0
 8009076:	4603      	mov	r3, r0
 8009078:	4293      	cmp	r3, r2
 800907a:	d100      	bne.n	800907e <memset+0xa>
 800907c:	4770      	bx	lr
 800907e:	f803 1b01 	strb.w	r1, [r3], #1
 8009082:	e7f9      	b.n	8009078 <memset+0x4>

08009084 <cleanup_glue>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	460c      	mov	r4, r1
 8009088:	6809      	ldr	r1, [r1, #0]
 800908a:	4605      	mov	r5, r0
 800908c:	b109      	cbz	r1, 8009092 <cleanup_glue+0xe>
 800908e:	f7ff fff9 	bl	8009084 <cleanup_glue>
 8009092:	4621      	mov	r1, r4
 8009094:	4628      	mov	r0, r5
 8009096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800909a:	f000 b869 	b.w	8009170 <_free_r>
	...

080090a0 <_reclaim_reent>:
 80090a0:	4b2c      	ldr	r3, [pc, #176]	; (8009154 <_reclaim_reent+0xb4>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4283      	cmp	r3, r0
 80090a6:	b570      	push	{r4, r5, r6, lr}
 80090a8:	4604      	mov	r4, r0
 80090aa:	d051      	beq.n	8009150 <_reclaim_reent+0xb0>
 80090ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80090ae:	b143      	cbz	r3, 80090c2 <_reclaim_reent+0x22>
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d14a      	bne.n	800914c <_reclaim_reent+0xac>
 80090b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090b8:	6819      	ldr	r1, [r3, #0]
 80090ba:	b111      	cbz	r1, 80090c2 <_reclaim_reent+0x22>
 80090bc:	4620      	mov	r0, r4
 80090be:	f000 f857 	bl	8009170 <_free_r>
 80090c2:	6961      	ldr	r1, [r4, #20]
 80090c4:	b111      	cbz	r1, 80090cc <_reclaim_reent+0x2c>
 80090c6:	4620      	mov	r0, r4
 80090c8:	f000 f852 	bl	8009170 <_free_r>
 80090cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80090ce:	b111      	cbz	r1, 80090d6 <_reclaim_reent+0x36>
 80090d0:	4620      	mov	r0, r4
 80090d2:	f000 f84d 	bl	8009170 <_free_r>
 80090d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80090d8:	b111      	cbz	r1, 80090e0 <_reclaim_reent+0x40>
 80090da:	4620      	mov	r0, r4
 80090dc:	f000 f848 	bl	8009170 <_free_r>
 80090e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80090e2:	b111      	cbz	r1, 80090ea <_reclaim_reent+0x4a>
 80090e4:	4620      	mov	r0, r4
 80090e6:	f000 f843 	bl	8009170 <_free_r>
 80090ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80090ec:	b111      	cbz	r1, 80090f4 <_reclaim_reent+0x54>
 80090ee:	4620      	mov	r0, r4
 80090f0:	f000 f83e 	bl	8009170 <_free_r>
 80090f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80090f6:	b111      	cbz	r1, 80090fe <_reclaim_reent+0x5e>
 80090f8:	4620      	mov	r0, r4
 80090fa:	f000 f839 	bl	8009170 <_free_r>
 80090fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009100:	b111      	cbz	r1, 8009108 <_reclaim_reent+0x68>
 8009102:	4620      	mov	r0, r4
 8009104:	f000 f834 	bl	8009170 <_free_r>
 8009108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800910a:	b111      	cbz	r1, 8009112 <_reclaim_reent+0x72>
 800910c:	4620      	mov	r0, r4
 800910e:	f000 f82f 	bl	8009170 <_free_r>
 8009112:	69a3      	ldr	r3, [r4, #24]
 8009114:	b1e3      	cbz	r3, 8009150 <_reclaim_reent+0xb0>
 8009116:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009118:	4620      	mov	r0, r4
 800911a:	4798      	blx	r3
 800911c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800911e:	b1b9      	cbz	r1, 8009150 <_reclaim_reent+0xb0>
 8009120:	4620      	mov	r0, r4
 8009122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009126:	f7ff bfad 	b.w	8009084 <cleanup_glue>
 800912a:	5949      	ldr	r1, [r1, r5]
 800912c:	b941      	cbnz	r1, 8009140 <_reclaim_reent+0xa0>
 800912e:	3504      	adds	r5, #4
 8009130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009132:	2d80      	cmp	r5, #128	; 0x80
 8009134:	68d9      	ldr	r1, [r3, #12]
 8009136:	d1f8      	bne.n	800912a <_reclaim_reent+0x8a>
 8009138:	4620      	mov	r0, r4
 800913a:	f000 f819 	bl	8009170 <_free_r>
 800913e:	e7ba      	b.n	80090b6 <_reclaim_reent+0x16>
 8009140:	680e      	ldr	r6, [r1, #0]
 8009142:	4620      	mov	r0, r4
 8009144:	f000 f814 	bl	8009170 <_free_r>
 8009148:	4631      	mov	r1, r6
 800914a:	e7ef      	b.n	800912c <_reclaim_reent+0x8c>
 800914c:	2500      	movs	r5, #0
 800914e:	e7ef      	b.n	8009130 <_reclaim_reent+0x90>
 8009150:	bd70      	pop	{r4, r5, r6, pc}
 8009152:	bf00      	nop
 8009154:	2000004c 	.word	0x2000004c

08009158 <__malloc_lock>:
 8009158:	4801      	ldr	r0, [pc, #4]	; (8009160 <__malloc_lock+0x8>)
 800915a:	f7ff bf7b 	b.w	8009054 <__retarget_lock_acquire_recursive>
 800915e:	bf00      	nop
 8009160:	200051c8 	.word	0x200051c8

08009164 <__malloc_unlock>:
 8009164:	4801      	ldr	r0, [pc, #4]	; (800916c <__malloc_unlock+0x8>)
 8009166:	f7ff bf76 	b.w	8009056 <__retarget_lock_release_recursive>
 800916a:	bf00      	nop
 800916c:	200051c8 	.word	0x200051c8

08009170 <_free_r>:
 8009170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009172:	2900      	cmp	r1, #0
 8009174:	d044      	beq.n	8009200 <_free_r+0x90>
 8009176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800917a:	9001      	str	r0, [sp, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	f1a1 0404 	sub.w	r4, r1, #4
 8009182:	bfb8      	it	lt
 8009184:	18e4      	addlt	r4, r4, r3
 8009186:	f7ff ffe7 	bl	8009158 <__malloc_lock>
 800918a:	4a1e      	ldr	r2, [pc, #120]	; (8009204 <_free_r+0x94>)
 800918c:	9801      	ldr	r0, [sp, #4]
 800918e:	6813      	ldr	r3, [r2, #0]
 8009190:	b933      	cbnz	r3, 80091a0 <_free_r+0x30>
 8009192:	6063      	str	r3, [r4, #4]
 8009194:	6014      	str	r4, [r2, #0]
 8009196:	b003      	add	sp, #12
 8009198:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800919c:	f7ff bfe2 	b.w	8009164 <__malloc_unlock>
 80091a0:	42a3      	cmp	r3, r4
 80091a2:	d908      	bls.n	80091b6 <_free_r+0x46>
 80091a4:	6825      	ldr	r5, [r4, #0]
 80091a6:	1961      	adds	r1, r4, r5
 80091a8:	428b      	cmp	r3, r1
 80091aa:	bf01      	itttt	eq
 80091ac:	6819      	ldreq	r1, [r3, #0]
 80091ae:	685b      	ldreq	r3, [r3, #4]
 80091b0:	1949      	addeq	r1, r1, r5
 80091b2:	6021      	streq	r1, [r4, #0]
 80091b4:	e7ed      	b.n	8009192 <_free_r+0x22>
 80091b6:	461a      	mov	r2, r3
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	b10b      	cbz	r3, 80091c0 <_free_r+0x50>
 80091bc:	42a3      	cmp	r3, r4
 80091be:	d9fa      	bls.n	80091b6 <_free_r+0x46>
 80091c0:	6811      	ldr	r1, [r2, #0]
 80091c2:	1855      	adds	r5, r2, r1
 80091c4:	42a5      	cmp	r5, r4
 80091c6:	d10b      	bne.n	80091e0 <_free_r+0x70>
 80091c8:	6824      	ldr	r4, [r4, #0]
 80091ca:	4421      	add	r1, r4
 80091cc:	1854      	adds	r4, r2, r1
 80091ce:	42a3      	cmp	r3, r4
 80091d0:	6011      	str	r1, [r2, #0]
 80091d2:	d1e0      	bne.n	8009196 <_free_r+0x26>
 80091d4:	681c      	ldr	r4, [r3, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	6053      	str	r3, [r2, #4]
 80091da:	4421      	add	r1, r4
 80091dc:	6011      	str	r1, [r2, #0]
 80091de:	e7da      	b.n	8009196 <_free_r+0x26>
 80091e0:	d902      	bls.n	80091e8 <_free_r+0x78>
 80091e2:	230c      	movs	r3, #12
 80091e4:	6003      	str	r3, [r0, #0]
 80091e6:	e7d6      	b.n	8009196 <_free_r+0x26>
 80091e8:	6825      	ldr	r5, [r4, #0]
 80091ea:	1961      	adds	r1, r4, r5
 80091ec:	428b      	cmp	r3, r1
 80091ee:	bf04      	itt	eq
 80091f0:	6819      	ldreq	r1, [r3, #0]
 80091f2:	685b      	ldreq	r3, [r3, #4]
 80091f4:	6063      	str	r3, [r4, #4]
 80091f6:	bf04      	itt	eq
 80091f8:	1949      	addeq	r1, r1, r5
 80091fa:	6021      	streq	r1, [r4, #0]
 80091fc:	6054      	str	r4, [r2, #4]
 80091fe:	e7ca      	b.n	8009196 <_free_r+0x26>
 8009200:	b003      	add	sp, #12
 8009202:	bd30      	pop	{r4, r5, pc}
 8009204:	200051cc 	.word	0x200051cc

08009208 <_init>:
 8009208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920a:	bf00      	nop
 800920c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800920e:	bc08      	pop	{r3}
 8009210:	469e      	mov	lr, r3
 8009212:	4770      	bx	lr

08009214 <_fini>:
 8009214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009216:	bf00      	nop
 8009218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800921a:	bc08      	pop	{r3}
 800921c:	469e      	mov	lr, r3
 800921e:	4770      	bx	lr
