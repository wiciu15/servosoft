
servo401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfdc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000848  0800d17c  0800d17c  0001d17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9c4  0800d9c4  00020124  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9c4  0800d9c4  0001d9c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9cc  0800d9cc  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9cc  0800d9cc  0001d9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9d0  0800d9d0  0001d9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  0800d9d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005340  20000124  0800daf8  00020124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005464  0800daf8  00025464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e4cd  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f40  00000000  00000000  0003e621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  00042568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e0  00000000  00000000  00043ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a35b  00000000  00000000  00045288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b496  00000000  00000000  0005f5e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5c61  00000000  00000000  0007aa79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001206da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069c0  00000000  00000000  0012072c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000124 	.word	0x20000124
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d164 	.word	0x0800d164

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000128 	.word	0x20000128
 80001dc:	0800d164 	.word	0x0800d164

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b974 	b.w	8000e58 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	468e      	mov	lr, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14d      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4694      	mov	ip, r2
 8000b9a:	d969      	bls.n	8000c70 <__udivmoddi4+0xe8>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b152      	cbz	r2, 8000bb8 <__udivmoddi4+0x30>
 8000ba2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ba6:	f1c2 0120 	rsb	r1, r2, #32
 8000baa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bb6:	4094      	lsls	r4, r2
 8000bb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bbc:	0c21      	lsrs	r1, r4, #16
 8000bbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000bc2:	fa1f f78c 	uxth.w	r7, ip
 8000bc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bce:	fb06 f107 	mul.w	r1, r6, r7
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bde:	f080 811f 	bcs.w	8000e20 <__udivmoddi4+0x298>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 811c 	bls.w	8000e20 <__udivmoddi4+0x298>
 8000be8:	3e02      	subs	r6, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a5b      	subs	r3, r3, r1
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bfc:	fb00 f707 	mul.w	r7, r0, r7
 8000c00:	42a7      	cmp	r7, r4
 8000c02:	d90a      	bls.n	8000c1a <__udivmoddi4+0x92>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0c:	f080 810a 	bcs.w	8000e24 <__udivmoddi4+0x29c>
 8000c10:	42a7      	cmp	r7, r4
 8000c12:	f240 8107 	bls.w	8000e24 <__udivmoddi4+0x29c>
 8000c16:	4464      	add	r4, ip
 8000c18:	3802      	subs	r0, #2
 8000c1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1e:	1be4      	subs	r4, r4, r7
 8000c20:	2600      	movs	r6, #0
 8000c22:	b11d      	cbz	r5, 8000c2c <__udivmoddi4+0xa4>
 8000c24:	40d4      	lsrs	r4, r2
 8000c26:	2300      	movs	r3, #0
 8000c28:	e9c5 4300 	strd	r4, r3, [r5]
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0xc2>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80ef 	beq.w	8000e1a <__udivmoddi4+0x292>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x160>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xd4>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80f9 	bhi.w	8000e4e <__udivmoddi4+0x2c6>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	469e      	mov	lr, r3
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e0      	beq.n	8000c2c <__udivmoddi4+0xa4>
 8000c6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c6e:	e7dd      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000c70:	b902      	cbnz	r2, 8000c74 <__udivmoddi4+0xec>
 8000c72:	deff      	udf	#255	; 0xff
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f040 8092 	bne.w	8000da2 <__udivmoddi4+0x21a>
 8000c7e:	eba1 010c 	sub.w	r1, r1, ip
 8000c82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	2601      	movs	r6, #1
 8000c8c:	0c20      	lsrs	r0, r4, #16
 8000c8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c92:	fb07 1113 	mls	r1, r7, r3, r1
 8000c96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9a:	fb0e f003 	mul.w	r0, lr, r3
 8000c9e:	4288      	cmp	r0, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x12c>
 8000ca2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x12a>
 8000cac:	4288      	cmp	r0, r1
 8000cae:	f200 80cb 	bhi.w	8000e48 <__udivmoddi4+0x2c0>
 8000cb2:	4643      	mov	r3, r8
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x156>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x154>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f200 80bb 	bhi.w	8000e52 <__udivmoddi4+0x2ca>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ce6:	e79c      	b.n	8000c22 <__udivmoddi4+0x9a>
 8000ce8:	f1c6 0720 	rsb	r7, r6, #32
 8000cec:	40b3      	lsls	r3, r6
 8000cee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf6:	fa20 f407 	lsr.w	r4, r0, r7
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	431c      	orrs	r4, r3
 8000d00:	40f9      	lsrs	r1, r7
 8000d02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d06:	fa00 f306 	lsl.w	r3, r0, r6
 8000d0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d0e:	0c20      	lsrs	r0, r4, #16
 8000d10:	fa1f fe8c 	uxth.w	lr, ip
 8000d14:	fb09 1118 	mls	r1, r9, r8, r1
 8000d18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d20:	4288      	cmp	r0, r1
 8000d22:	fa02 f206 	lsl.w	r2, r2, r6
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x1b8>
 8000d28:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d30:	f080 8088 	bcs.w	8000e44 <__udivmoddi4+0x2bc>
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f240 8085 	bls.w	8000e44 <__udivmoddi4+0x2bc>
 8000d3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	1a09      	subs	r1, r1, r0
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d48:	fb09 1110 	mls	r1, r9, r0, r1
 8000d4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d54:	458e      	cmp	lr, r1
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1e2>
 8000d58:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d60:	d26c      	bcs.n	8000e3c <__udivmoddi4+0x2b4>
 8000d62:	458e      	cmp	lr, r1
 8000d64:	d96a      	bls.n	8000e3c <__udivmoddi4+0x2b4>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4461      	add	r1, ip
 8000d6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d72:	eba1 010e 	sub.w	r1, r1, lr
 8000d76:	42a1      	cmp	r1, r4
 8000d78:	46c8      	mov	r8, r9
 8000d7a:	46a6      	mov	lr, r4
 8000d7c:	d356      	bcc.n	8000e2c <__udivmoddi4+0x2a4>
 8000d7e:	d053      	beq.n	8000e28 <__udivmoddi4+0x2a0>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x212>
 8000d82:	ebb3 0208 	subs.w	r2, r3, r8
 8000d86:	eb61 010e 	sbc.w	r1, r1, lr
 8000d8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d92:	40f1      	lsrs	r1, r6
 8000d94:	431f      	orrs	r7, r3
 8000d96:	e9c5 7100 	strd	r7, r1, [r5]
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	f1c2 0320 	rsb	r3, r2, #32
 8000da6:	40d8      	lsrs	r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa21 f303 	lsr.w	r3, r1, r3
 8000db0:	4091      	lsls	r1, r2
 8000db2:	4301      	orrs	r1, r0
 8000db4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db8:	fa1f fe8c 	uxth.w	lr, ip
 8000dbc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dc0:	fb07 3610 	mls	r6, r7, r0, r3
 8000dc4:	0c0b      	lsrs	r3, r1, #16
 8000dc6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dca:	fb00 f60e 	mul.w	r6, r0, lr
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x260>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dde:	d22f      	bcs.n	8000e40 <__udivmoddi4+0x2b8>
 8000de0:	429e      	cmp	r6, r3
 8000de2:	d92d      	bls.n	8000e40 <__udivmoddi4+0x2b8>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	b289      	uxth	r1, r1
 8000dec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000df0:	fb07 3316 	mls	r3, r7, r6, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb06 f30e 	mul.w	r3, r6, lr
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x28a>
 8000e00:	eb1c 0101 	adds.w	r1, ip, r1
 8000e04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e08:	d216      	bcs.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d914      	bls.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0e:	3e02      	subs	r6, #2
 8000e10:	4461      	add	r1, ip
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e18:	e738      	b.n	8000c8c <__udivmoddi4+0x104>
 8000e1a:	462e      	mov	r6, r5
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	e705      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000e20:	4606      	mov	r6, r0
 8000e22:	e6e3      	b.n	8000bec <__udivmoddi4+0x64>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6f8      	b.n	8000c1a <__udivmoddi4+0x92>
 8000e28:	454b      	cmp	r3, r9
 8000e2a:	d2a9      	bcs.n	8000d80 <__udivmoddi4+0x1f8>
 8000e2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e34:	3801      	subs	r0, #1
 8000e36:	e7a3      	b.n	8000d80 <__udivmoddi4+0x1f8>
 8000e38:	4646      	mov	r6, r8
 8000e3a:	e7ea      	b.n	8000e12 <__udivmoddi4+0x28a>
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	e794      	b.n	8000d6a <__udivmoddi4+0x1e2>
 8000e40:	4640      	mov	r0, r8
 8000e42:	e7d1      	b.n	8000de8 <__udivmoddi4+0x260>
 8000e44:	46d0      	mov	r8, sl
 8000e46:	e77b      	b.n	8000d40 <__udivmoddi4+0x1b8>
 8000e48:	3b02      	subs	r3, #2
 8000e4a:	4461      	add	r1, ip
 8000e4c:	e732      	b.n	8000cb4 <__udivmoddi4+0x12c>
 8000e4e:	4630      	mov	r0, r6
 8000e50:	e709      	b.n	8000c66 <__udivmoddi4+0xde>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e742      	b.n	8000cde <__udivmoddi4+0x156>

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <modbus_protocol_read>:
uint16_t modbus_registers_buffer[30] = {0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}; //modbus holding registers

extern UART_HandleTypeDef huart1;
extern DMA_HandleTypeDef hdma_usart1_rx;

uint16_t modbus_protocol_read(uint32_t la){
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

	if(la>=40001 && la<=40030)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d90c      	bls.n	8000e88 <modbus_protocol_read+0x2c>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f649 425e 	movw	r2, #40030	; 0x9c5e
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d807      	bhi.n	8000e88 <modbus_protocol_read+0x2c>
	{return modbus_registers_buffer[la-40001];}else{
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8000e7e:	3b41      	subs	r3, #65	; 0x41
 8000e80:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <modbus_protocol_read+0x3c>)
 8000e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e86:	e001      	b.n	8000e8c <modbus_protocol_read+0x30>
		return 0xFFFF;
 8000e88:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	20000000 	.word	0x20000000

08000e9c <modbus_protocol_write>:

uint16_t modbus_protocol_write(uint32_t la, uint16_t value)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
	uint8_t local_address=la-40001;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	3b41      	subs	r3, #65	; 0x41
 8000eae:	73fb      	strb	r3, [r7, #15]
	switch (local_address){
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	3b02      	subs	r3, #2
 8000eb4:	2b06      	cmp	r3, #6
 8000eb6:	f200 80d6 	bhi.w	8001066 <modbus_protocol_write+0x1ca>
 8000eba:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <modbus_protocol_write+0x24>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000edd 	.word	0x08000edd
 8000ec4:	08000ef3 	.word	0x08000ef3
 8000ec8:	08001067 	.word	0x08001067
 8000ecc:	08000f29 	.word	0x08000f29
 8000ed0:	08000f47 	.word	0x08000f47
 8000ed4:	08000fb5 	.word	0x08000fb5
 8000ed8:	0800104f 	.word	0x0800104f
	case 2://error register
		if(value==0){inverter_error = no_error;modbus_registers_buffer[2]=value;}break; //acknowledge error
 8000edc:	887b      	ldrh	r3, [r7, #2]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 80c3 	bne.w	800106a <modbus_protocol_write+0x1ce>
 8000ee4:	4b67      	ldr	r3, [pc, #412]	; (8001084 <modbus_protocol_write+0x1e8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
 8000eea:	4a67      	ldr	r2, [pc, #412]	; (8001088 <modbus_protocol_write+0x1ec>)
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	8093      	strh	r3, [r2, #4]
 8000ef0:	e0bb      	b.n	800106a <modbus_protocol_write+0x1ce>
	case 3: //control register
		switch(value){
 8000ef2:	887b      	ldrh	r3, [r7, #2]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d002      	beq.n	8000efe <modbus_protocol_write+0x62>
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d006      	beq.n	8000f0a <modbus_protocol_write+0x6e>
 8000efc:	e010      	b.n	8000f20 <modbus_protocol_write+0x84>
		case 0:
			modbus_registers_buffer[3] = value;inverter_disable();break;
 8000efe:	4a62      	ldr	r2, [pc, #392]	; (8001088 <modbus_protocol_write+0x1ec>)
 8000f00:	887b      	ldrh	r3, [r7, #2]
 8000f02:	80d3      	strh	r3, [r2, #6]
 8000f04:	f000 fa1a 	bl	800133c <inverter_disable>
 8000f08:	e00d      	b.n	8000f26 <modbus_protocol_write+0x8a>
		case 1:
			modbus_registers_buffer[3] = value;inv_control_mode = modbus_registers_buffer[5];inverter_enable();break;
 8000f0a:	4a5f      	ldr	r2, [pc, #380]	; (8001088 <modbus_protocol_write+0x1ec>)
 8000f0c:	887b      	ldrh	r3, [r7, #2]
 8000f0e:	80d3      	strh	r3, [r2, #6]
 8000f10:	4b5d      	ldr	r3, [pc, #372]	; (8001088 <modbus_protocol_write+0x1ec>)
 8000f12:	895b      	ldrh	r3, [r3, #10]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b5d      	ldr	r3, [pc, #372]	; (800108c <modbus_protocol_write+0x1f0>)
 8000f18:	701a      	strb	r2, [r3, #0]
 8000f1a:	f000 f9c9 	bl	80012b0 <inverter_enable>
 8000f1e:	e002      	b.n	8000f26 <modbus_protocol_write+0x8a>
		default:
			inverter_disable();break;
 8000f20:	f000 fa0c 	bl	800133c <inverter_disable>
 8000f24:	bf00      	nop
		}
		break;
 8000f26:	e0a7      	b.n	8001078 <modbus_protocol_write+0x1dc>
		case 5: //operation mode register
			if(value<=2){inv_control_mode=value;
 8000f28:	887b      	ldrh	r3, [r7, #2]
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	f200 809f 	bhi.w	800106e <modbus_protocol_write+0x1d2>
 8000f30:	887b      	ldrh	r3, [r7, #2]
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	4b55      	ldr	r3, [pc, #340]	; (800108c <modbus_protocol_write+0x1f0>)
 8000f36:	701a      	strb	r2, [r3, #0]
			modbus_registers_buffer[5]=inv_control_mode;}
 8000f38:	4b54      	ldr	r3, [pc, #336]	; (800108c <modbus_protocol_write+0x1f0>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	4b51      	ldr	r3, [pc, #324]	; (8001088 <modbus_protocol_write+0x1ec>)
 8000f42:	815a      	strh	r2, [r3, #10]
			break;
 8000f44:	e093      	b.n	800106e <modbus_protocol_write+0x1d2>
		case 6: //speed setpoint in rpm
		{int16_t received_speed=value;
 8000f46:	887b      	ldrh	r3, [r7, #2]
 8000f48:	817b      	strh	r3, [r7, #10]
		if(inv_control_mode==manual){
 8000f4a:	4b50      	ldr	r3, [pc, #320]	; (800108c <modbus_protocol_write+0x1f0>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d119      	bne.n	8000f88 <modbus_protocol_write+0xec>
			if((received_speed)<=1000 && (received_speed)>=(-1000) ){speed_setpoint_deg_s = (float)received_speed*6.0f;}
 8000f54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f5c:	dc11      	bgt.n	8000f82 <modbus_protocol_write+0xe6>
 8000f5e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f62:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000f66:	db0c      	blt.n	8000f82 <modbus_protocol_write+0xe6>
 8000f68:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f6c:	ee07 3a90 	vmov	s15, r3
 8000f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f74:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000f78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f7c:	4b44      	ldr	r3, [pc, #272]	; (8001090 <modbus_protocol_write+0x1f4>)
 8000f7e:	edc3 7a00 	vstr	s15, [r3]
			modbus_registers_buffer[6]=(uint16_t)received_speed;
 8000f82:	897a      	ldrh	r2, [r7, #10]
 8000f84:	4b40      	ldr	r3, [pc, #256]	; (8001088 <modbus_protocol_write+0x1ec>)
 8000f86:	819a      	strh	r2, [r3, #12]
		}
		if(inv_control_mode==foc){
 8000f88:	4b40      	ldr	r3, [pc, #256]	; (800108c <modbus_protocol_write+0x1f0>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d16f      	bne.n	8001072 <modbus_protocol_write+0x1d6>
			if((received_speed)<=1000 && (received_speed)>=(-1000) ){speed_setpoint_rpm = received_speed;}
 8000f92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f9a:	dc07      	bgt.n	8000fac <modbus_protocol_write+0x110>
 8000f9c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000fa0:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000fa4:	db02      	blt.n	8000fac <modbus_protocol_write+0x110>
 8000fa6:	4a3b      	ldr	r2, [pc, #236]	; (8001094 <modbus_protocol_write+0x1f8>)
 8000fa8:	897b      	ldrh	r3, [r7, #10]
 8000faa:	8013      	strh	r3, [r2, #0]
			modbus_registers_buffer[6]=(uint16_t)received_speed;
 8000fac:	897a      	ldrh	r2, [r7, #10]
 8000fae:	4b36      	ldr	r3, [pc, #216]	; (8001088 <modbus_protocol_write+0x1ec>)
 8000fb0:	819a      	strh	r2, [r3, #12]
		}
		break;}
 8000fb2:	e05e      	b.n	8001072 <modbus_protocol_write+0x1d6>
		case 7: //set output voltage in manual/torque in foc
		{if(inv_control_mode==manual){
 8000fb4:	4b35      	ldr	r3, [pc, #212]	; (800108c <modbus_protocol_write+0x1f0>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d122      	bne.n	8001004 <modbus_protocol_write+0x168>
			uint8_t received_duty_cycle_percent=value;
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	73bb      	strb	r3, [r7, #14]
			if(value<=100 && value>=0){duty_cycle = ((float)received_duty_cycle_percent/100.0f)*(float)duty_cycle_limit;}
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	2b64      	cmp	r3, #100	; 0x64
 8000fc6:	d813      	bhi.n	8000ff0 <modbus_protocol_write+0x154>
 8000fc8:	7bbb      	ldrb	r3, [r7, #14]
 8000fca:	ee07 3a90 	vmov	s15, r3
 8000fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fd2:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001098 <modbus_protocol_write+0x1fc>
 8000fd6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fda:	4b30      	ldr	r3, [pc, #192]	; (800109c <modbus_protocol_write+0x200>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fea:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <modbus_protocol_write+0x204>)
 8000fec:	edc3 7a00 	vstr	s15, [r3]
			modbus_registers_buffer[7]=duty_cycle;
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <modbus_protocol_write+0x204>)
 8000ff2:	edd3 7a00 	vldr	s15, [r3]
 8000ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ffa:	ee17 3a90 	vmov	r3, s15
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	4b21      	ldr	r3, [pc, #132]	; (8001088 <modbus_protocol_write+0x1ec>)
 8001002:	81da      	strh	r2, [r3, #14]
		}
		if(inv_control_mode==foc){
 8001004:	4b21      	ldr	r3, [pc, #132]	; (800108c <modbus_protocol_write+0x1f0>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d133      	bne.n	8001076 <modbus_protocol_write+0x1da>
			int8_t received_torque_setpoint = (int16_t)value;
 800100e:	887b      	ldrh	r3, [r7, #2]
 8001010:	737b      	strb	r3, [r7, #13]
			if(received_torque_setpoint>=-100 && received_torque_setpoint<=100){
 8001012:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001016:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800101a:	db2c      	blt.n	8001076 <modbus_protocol_write+0x1da>
 800101c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001020:	2b64      	cmp	r3, #100	; 0x64
 8001022:	dc28      	bgt.n	8001076 <modbus_protocol_write+0x1da>
				torque_setpoint=received_torque_setpoint;
 8001024:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <modbus_protocol_write+0x208>)
 8001032:	edc3 7a00 	vstr	s15, [r3]
				modbus_registers_buffer[7]=(int16_t)torque_setpoint;
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <modbus_protocol_write+0x208>)
 8001038:	edd3 7a00 	vldr	s15, [r3]
 800103c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001040:	ee17 3a90 	vmov	r3, s15
 8001044:	b21b      	sxth	r3, r3
 8001046:	b29a      	uxth	r2, r3
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <modbus_protocol_write+0x1ec>)
 800104a:	81da      	strh	r2, [r3, #14]
			}
		}

		break;
 800104c:	e013      	b.n	8001076 <modbus_protocol_write+0x1da>
	case 8:
		if(value<=2){
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d808      	bhi.n	8001066 <modbus_protocol_write+0x1ca>
			motor_feedback_type=value;
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <modbus_protocol_write+0x20c>)
 800105a:	701a      	strb	r2, [r3, #0]
		modbus_registers_buffer[8]=motor_feedback_type;}
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <modbus_protocol_write+0x20c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b29a      	uxth	r2, r3
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <modbus_protocol_write+0x1ec>)
 8001064:	821a      	strh	r2, [r3, #16]
		}
	default:
		//if not handled inside switch, then read-only parameter
		break;
 8001066:	bf00      	nop
 8001068:	e006      	b.n	8001078 <modbus_protocol_write+0x1dc>
		if(value==0){inverter_error = no_error;modbus_registers_buffer[2]=value;}break; //acknowledge error
 800106a:	bf00      	nop
 800106c:	e004      	b.n	8001078 <modbus_protocol_write+0x1dc>
			break;
 800106e:	bf00      	nop
 8001070:	e002      	b.n	8001078 <modbus_protocol_write+0x1dc>
		break;}
 8001072:	bf00      	nop
 8001074:	e000      	b.n	8001078 <modbus_protocol_write+0x1dc>
		break;
 8001076:	bf00      	nop
	}
	return value;
 8001078:	887b      	ldrh	r3, [r7, #2]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200004f8 	.word	0x200004f8
 8001088:	20000000 	.word	0x20000000
 800108c:	20000908 	.word	0x20000908
 8001090:	2000090c 	.word	0x2000090c
 8001094:	20000910 	.word	0x20000910
 8001098:	42c80000 	.word	0x42c80000
 800109c:	0800d330 	.word	0x0800d330
 80010a0:	20000918 	.word	0x20000918
 80010a4:	2000092c 	.word	0x2000092c
 80010a8:	200000ac 	.word	0x200000ac

080010ac <mbus_send>:

int mbus_send(const mbus_t context,const uint8_t* data, const uint16_t size){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	80bb      	strh	r3, [r7, #4]
	UNUSED(context);
	HAL_GPIO_WritePin(MODBUS_DE_GPIO_Port,MODBUS_DE_Pin, 1);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c2:	480a      	ldr	r0, [pc, #40]	; (80010ec <mbus_send+0x40>)
 80010c4:	f004 ff24 	bl	8005f10 <HAL_GPIO_WritePin>
	if(HAL_UART_Transmit_DMA( &huart1, (uint8_t*) data,size)==HAL_OK){
 80010c8:	88bb      	ldrh	r3, [r7, #4]
 80010ca:	461a      	mov	r2, r3
 80010cc:	6839      	ldr	r1, [r7, #0]
 80010ce:	4808      	ldr	r0, [pc, #32]	; (80010f0 <mbus_send+0x44>)
 80010d0:	f006 fe84 	bl	8007ddc <HAL_UART_Transmit_DMA>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <mbus_send+0x32>
		return MBUS_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e001      	b.n	80010e2 <mbus_send+0x36>
	}else{return MBUS_ERROR;}
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40020400 	.word	0x40020400
 80010f0:	200006c4 	.word	0x200006c4

080010f4 <Modbus_init>:

void Modbus_init(){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
	/* Device slave address */
	mb_config.devaddr = 0x01;
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <Modbus_init+0x68>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]

	/* Just ptr on any external object, you can get it by context */
	mb_config.device = (void*) 0;
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <Modbus_init+0x68>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]

	uint8_t * pmodbusSendBuffer;
	pmodbusSendBuffer=&modbusSendBufer;
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <Modbus_init+0x6c>)
 8001108:	60fb      	str	r3, [r7, #12]
	mb_config.sendbuf = pmodbusSendBuffer;
 800110a:	4a14      	ldr	r2, [pc, #80]	; (800115c <Modbus_init+0x68>)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6193      	str	r3, [r2, #24]
	mb_config.sendbuf_sz = sizeof(modbusSendBufer);
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <Modbus_init+0x68>)
 8001112:	2264      	movs	r2, #100	; 0x64
 8001114:	839a      	strh	r2, [r3, #28]

	uint8_t * pmodbusRecvBuffer;
	pmodbusRecvBuffer=&modbusReceiveBufer;
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <Modbus_init+0x70>)
 8001118:	60bb      	str	r3, [r7, #8]
	mb_config.recvbuf = pmodbusRecvBuffer;
 800111a:	4a10      	ldr	r2, [pc, #64]	; (800115c <Modbus_init+0x68>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	6213      	str	r3, [r2, #32]
	mb_config.recvbuf_sz = sizeof(modbusReceiveBufer);
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <Modbus_init+0x68>)
 8001122:	2264      	movs	r2, #100	; 0x64
 8001124:	849a      	strh	r2, [r3, #36]	; 0x24

	/* This that function for sending some data (use sendbuf for buf) */
	mb_config.send = &mbus_send;
 8001126:	4b0d      	ldr	r3, [pc, #52]	; (800115c <Modbus_init+0x68>)
 8001128:	4a0f      	ldr	r2, [pc, #60]	; (8001168 <Modbus_init+0x74>)
 800112a:	60da      	str	r2, [r3, #12]

	Modbus_Conf_t * pconf;
	pconf=&mb_config;
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <Modbus_init+0x68>)
 800112e:	607b      	str	r3, [r7, #4]
	//User Read callback function ( read by logical address)
	pconf->read = modbus_protocol_read;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a0e      	ldr	r2, [pc, #56]	; (800116c <Modbus_init+0x78>)
 8001134:	611a      	str	r2, [r3, #16]

	//Write callback function
	pconf->write = modbus_protocol_write;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <Modbus_init+0x7c>)
 800113a:	615a      	str	r2, [r3, #20]

	//Open modbus contex
	modbus = mbus_open(pconf);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f002 fd17 	bl	8003b70 <mbus_open>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <Modbus_init+0x80>)
 8001148:	701a      	strb	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, UART_RX_buf, sizeof(UART_RX_buf));
 800114a:	22c8      	movs	r2, #200	; 0xc8
 800114c:	490a      	ldr	r1, [pc, #40]	; (8001178 <Modbus_init+0x84>)
 800114e:	480b      	ldr	r0, [pc, #44]	; (800117c <Modbus_init+0x88>)
 8001150:	f006 fef2 	bl	8007f38 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000144 	.word	0x20000144
 8001160:	20000430 	.word	0x20000430
 8001164:	20000494 	.word	0x20000494
 8001168:	080010ad 	.word	0x080010ad
 800116c:	08000e5d 	.word	0x08000e5d
 8001170:	08000e9d 	.word	0x08000e9d
 8001174:	20000140 	.word	0x20000140
 8001178:	2000016c 	.word	0x2000016c
 800117c:	200006c4 	.word	0x200006c4

08001180 <modbus_process_new_data_to_fifo>:

void modbus_process_new_data_to_fifo(UART_HandleTypeDef *huart, uint16_t Size){
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a29      	ldr	r2, [pc, #164]	; (8001238 <modbus_process_new_data_to_fifo+0xb8>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d14c      	bne.n	8001230 <modbus_process_new_data_to_fifo+0xb0>
	{
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) UART_RX_buf, sizeof(UART_RX_buf));
 8001196:	22c8      	movs	r2, #200	; 0xc8
 8001198:	4928      	ldr	r1, [pc, #160]	; (800123c <modbus_process_new_data_to_fifo+0xbc>)
 800119a:	4829      	ldr	r0, [pc, #164]	; (8001240 <modbus_process_new_data_to_fifo+0xc0>)
 800119c:	f006 fecc 	bl	8007f38 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80011a0:	4b28      	ldr	r3, [pc, #160]	; (8001244 <modbus_process_new_data_to_fifo+0xc4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	4b27      	ldr	r3, [pc, #156]	; (8001244 <modbus_process_new_data_to_fifo+0xc4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0208 	bic.w	r2, r2, #8
 80011ae:	601a      	str	r2, [r3, #0]

		fifo_oldpos = fifo_newpos;  // Update the last position before copying new data
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <modbus_process_new_data_to_fifo+0xc8>)
 80011b2:	881a      	ldrh	r2, [r3, #0]
 80011b4:	4b25      	ldr	r3, [pc, #148]	; (800124c <modbus_process_new_data_to_fifo+0xcc>)
 80011b6:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (fifo_oldpos+Size > sizeof(UART_RX_FIFO)-1)  // If the current position + new data size is greater than the main buffer
 80011b8:	4b24      	ldr	r3, [pc, #144]	; (800124c <modbus_process_new_data_to_fifo+0xcc>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	4413      	add	r3, r2
 80011c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011c6:	d322      	bcc.n	800120e <modbus_process_new_data_to_fifo+0x8e>
		{
			uint16_t datatocopy = sizeof(UART_RX_FIFO)-fifo_oldpos;  // find out how much space is left in the main buffer
 80011c8:	4b20      	ldr	r3, [pc, #128]	; (800124c <modbus_process_new_data_to_fifo+0xcc>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 80011d0:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)UART_RX_FIFO+fifo_oldpos, UART_RX_buf, datatocopy);  // copy data in that remaining space
 80011d2:	4b1e      	ldr	r3, [pc, #120]	; (800124c <modbus_process_new_data_to_fifo+0xcc>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <modbus_process_new_data_to_fifo+0xd0>)
 80011da:	4413      	add	r3, r2
 80011dc:	89fa      	ldrh	r2, [r7, #14]
 80011de:	4917      	ldr	r1, [pc, #92]	; (800123c <modbus_process_new_data_to_fifo+0xbc>)
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00a fe2f 	bl	800be44 <memcpy>

			fifo_oldpos = 0;  // point to the start of the buffer
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <modbus_process_new_data_to_fifo+0xcc>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)UART_RX_FIFO, (uint8_t *)UART_RX_buf+datatocopy, (Size-datatocopy));  // copy the remaining data
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	4a13      	ldr	r2, [pc, #76]	; (800123c <modbus_process_new_data_to_fifo+0xbc>)
 80011f0:	1899      	adds	r1, r3, r2
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	89fb      	ldrh	r3, [r7, #14]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	4815      	ldr	r0, [pc, #84]	; (8001250 <modbus_process_new_data_to_fifo+0xd0>)
 80011fc:	f00a fe22 	bl	800be44 <memcpy>
			fifo_newpos = (Size-datatocopy);  // update the position
 8001200:	887a      	ldrh	r2, [r7, #2]
 8001202:	89fb      	ldrh	r3, [r7, #14]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	b29a      	uxth	r2, r3
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <modbus_process_new_data_to_fifo+0xc8>)
 800120a:	801a      	strh	r2, [r3, #0]
		}



	}
}
 800120c:	e010      	b.n	8001230 <modbus_process_new_data_to_fifo+0xb0>
			memcpy ((uint8_t *)UART_RX_FIFO+fifo_oldpos, UART_RX_buf, Size);
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <modbus_process_new_data_to_fifo+0xcc>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <modbus_process_new_data_to_fifo+0xd0>)
 8001216:	4413      	add	r3, r2
 8001218:	887a      	ldrh	r2, [r7, #2]
 800121a:	4908      	ldr	r1, [pc, #32]	; (800123c <modbus_process_new_data_to_fifo+0xbc>)
 800121c:	4618      	mov	r0, r3
 800121e:	f00a fe11 	bl	800be44 <memcpy>
			fifo_newpos = Size+fifo_oldpos;
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <modbus_process_new_data_to_fifo+0xcc>)
 8001224:	881a      	ldrh	r2, [r3, #0]
 8001226:	887b      	ldrh	r3, [r7, #2]
 8001228:	4413      	add	r3, r2
 800122a:	b29a      	uxth	r2, r3
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <modbus_process_new_data_to_fifo+0xc8>)
 800122e:	801a      	strh	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40011000 	.word	0x40011000
 800123c:	2000016c 	.word	0x2000016c
 8001240:	200006c4 	.word	0x200006c4
 8001244:	2000074c 	.word	0x2000074c
 8001248:	2000042a 	.word	0x2000042a
 800124c:	20000428 	.word	0x20000428
 8001250:	20000234 	.word	0x20000234

08001254 <process_modbus_command>:

void process_modbus_command(){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	while(fifo_read_pos!=fifo_newpos){
 8001258:	e019      	b.n	800128e <process_modbus_command+0x3a>
		mbus_poll(modbus, UART_RX_FIFO[fifo_read_pos] );
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <process_modbus_command+0x4c>)
 800125c:	f993 3000 	ldrsb.w	r3, [r3]
 8001260:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <process_modbus_command+0x50>)
 8001262:	8812      	ldrh	r2, [r2, #0]
 8001264:	4611      	mov	r1, r2
 8001266:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <process_modbus_command+0x54>)
 8001268:	5c52      	ldrb	r2, [r2, r1]
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f002 fed7 	bl	8004020 <mbus_poll>
		fifo_read_pos++;
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <process_modbus_command+0x50>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	3301      	adds	r3, #1
 8001278:	b29a      	uxth	r2, r3
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <process_modbus_command+0x50>)
 800127c:	801a      	strh	r2, [r3, #0]
		if(fifo_read_pos>=sizeof(UART_RX_FIFO)){
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <process_modbus_command+0x50>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001286:	d302      	bcc.n	800128e <process_modbus_command+0x3a>
			fifo_read_pos=0;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <process_modbus_command+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	801a      	strh	r2, [r3, #0]
	while(fifo_read_pos!=fifo_newpos){
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <process_modbus_command+0x50>)
 8001290:	881a      	ldrh	r2, [r3, #0]
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <process_modbus_command+0x58>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d1df      	bne.n	800125a <process_modbus_command+0x6>
		}
	}

}
 800129a:	bf00      	nop
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000140 	.word	0x20000140
 80012a4:	2000042c 	.word	0x2000042c
 80012a8:	20000234 	.word	0x20000234
 80012ac:	2000042a 	.word	0x2000042a

080012b0 <inverter_enable>:

extern TIM_HandleTypeDef htim1;
extern UART_HandleTypeDef huart1;
volatile inverter_error_t inverter_error=no_error;

void inverter_enable(){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	if(inverter_error==0){
 80012b4:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <inverter_enable+0x70>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d12e      	bne.n	800131c <inverter_enable+0x6c>
		speed_setpoint_deg_s=0.0f;
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <inverter_enable+0x74>)
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
		duty_cycle=0.0f;
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <inverter_enable+0x78>)
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
		TIM1->CCR1=0;
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <inverter_enable+0x7c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=0;
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <inverter_enable+0x7c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=0;
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <inverter_enable+0x7c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(INV_ENABLE_GPIO_Port, INV_ENABLE_Pin, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012e6:	4812      	ldr	r0, [pc, #72]	; (8001330 <inverter_enable+0x80>)
 80012e8:	f004 fe12 	bl	8005f10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INV_ENABLE_GPIO_Port, INV_ENABLE_Pin, GPIO_PIN_SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f2:	480f      	ldr	r0, [pc, #60]	; (8001330 <inverter_enable+0x80>)
 80012f4:	f004 fe0c 	bl	8005f10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SOFTSTART_GPIO_Port, SOFTSTART_Pin, 1);
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <inverter_enable+0x84>)
 8001300:	f004 fe06 	bl	8005f10 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001304:	2100      	movs	r1, #0
 8001306:	480c      	ldr	r0, [pc, #48]	; (8001338 <inverter_enable+0x88>)
 8001308:	f005 fbae 	bl	8006a68 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800130c:	2104      	movs	r1, #4
 800130e:	480a      	ldr	r0, [pc, #40]	; (8001338 <inverter_enable+0x88>)
 8001310:	f005 fbaa 	bl	8006a68 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8001314:	2108      	movs	r1, #8
 8001316:	4808      	ldr	r0, [pc, #32]	; (8001338 <inverter_enable+0x88>)
 8001318:	f005 fba6 	bl	8006a68 <HAL_TIM_PWM_Start>
	}
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200004f8 	.word	0x200004f8
 8001324:	2000090c 	.word	0x2000090c
 8001328:	20000918 	.word	0x20000918
 800132c:	40010000 	.word	0x40010000
 8001330:	40020400 	.word	0x40020400
 8001334:	40020800 	.word	0x40020800
 8001338:	200005a4 	.word	0x200005a4

0800133c <inverter_disable>:

void inverter_disable(){
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	speed_setpoint_deg_s=0.0f;
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <inverter_disable+0x60>)
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
	duty_cycle=0.0f;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <inverter_disable+0x64>)
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
	//TIM1->CCR1=0;TIM1->CCR2=0;TIM1->CCR3=0;
	HAL_GPIO_WritePin(INV_DISABLE_GPIO_Port, INV_DISABLE_Pin, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001356:	4813      	ldr	r0, [pc, #76]	; (80013a4 <inverter_disable+0x68>)
 8001358:	f004 fdda 	bl	8005f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INV_DISABLE_GPIO_Port, INV_DISABLE_Pin, GPIO_PIN_SET);
 800135c:	2201      	movs	r2, #1
 800135e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001362:	4810      	ldr	r0, [pc, #64]	; (80013a4 <inverter_disable+0x68>)
 8001364:	f004 fdd4 	bl	8005f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SOFTSTART_GPIO_Port, SOFTSTART_Pin, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800136e:	480e      	ldr	r0, [pc, #56]	; (80013a8 <inverter_disable+0x6c>)
 8001370:	f004 fdce 	bl	8005f10 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8001374:	2100      	movs	r1, #0
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <inverter_disable+0x70>)
 8001378:	f005 fc26 	bl	8006bc8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2);
 800137c:	2104      	movs	r1, #4
 800137e:	480b      	ldr	r0, [pc, #44]	; (80013ac <inverter_disable+0x70>)
 8001380:	f005 fc22 	bl	8006bc8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_3);
 8001384:	2108      	movs	r1, #8
 8001386:	4809      	ldr	r0, [pc, #36]	; (80013ac <inverter_disable+0x70>)
 8001388:	f005 fc1e 	bl	8006bc8 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 800138c:	4807      	ldr	r0, [pc, #28]	; (80013ac <inverter_disable+0x70>)
 800138e:	f005 fae3 	bl	8006958 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim1); //restart base timer to keep 16khz tim1_update ISR active for reading current and encoder data when inverter not working
 8001392:	4806      	ldr	r0, [pc, #24]	; (80013ac <inverter_disable+0x70>)
 8001394:	f005 fa7e 	bl	8006894 <HAL_TIM_Base_Start_IT>
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2000090c 	.word	0x2000090c
 80013a0:	20000918 	.word	0x20000918
 80013a4:	40020400 	.word	0x40020400
 80013a8:	40020800 	.word	0x40020800
 80013ac:	200005a4 	.word	0x200005a4

080013b0 <inverter_error_trip>:

void inverter_error_trip(inverter_error_t error){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
	inverter_disable();
 80013ba:	f7ff ffbf 	bl	800133c <inverter_disable>
	inverter_error=error;
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <inverter_error_trip+0x24>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	7013      	strb	r3, [r2, #0]
	modbus_registers_buffer[2]=error;
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <inverter_error_trip+0x28>)
 80013ca:	809a      	strh	r2, [r3, #4]
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200004f8 	.word	0x200004f8
 80013d8:	20000000 	.word	0x20000000

080013dc <park_transform>:

void park_transform(float I_U,float I_V,float motor_angle,float * I_d,float * I_q){
 80013dc:	b580      	push	{r7, lr}
 80013de:	ed2d 8b02 	vpush	{d8}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	ed87 0a05 	vstr	s0, [r7, #20]
 80013ea:	edc7 0a04 	vstr	s1, [r7, #16]
 80013ee:	ed87 1a03 	vstr	s2, [r7, #12]
 80013f2:	60b8      	str	r0, [r7, #8]
 80013f4:	6079      	str	r1, [r7, #4]
	float Ialfa=I_U;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
	float Ibeta=(0.5773502f * I_U) + (1.1547005f * I_V);
 80013fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80013fe:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80014a4 <park_transform+0xc8>
 8001402:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001406:	edd7 7a04 	vldr	s15, [r7, #16]
 800140a:	eddf 6a27 	vldr	s13, [pc, #156]	; 80014a8 <park_transform+0xcc>
 800140e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001416:	edc7 7a08 	vstr	s15, [r7, #32]
	float motor_angle_rad = (motor_angle/180.0f)*3.141592f;
 800141a:	ed97 7a03 	vldr	s14, [r7, #12]
 800141e:	eddf 6a23 	vldr	s13, [pc, #140]	; 80014ac <park_transform+0xd0>
 8001422:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001426:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80014b0 <park_transform+0xd4>
 800142a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800142e:	edc7 7a07 	vstr	s15, [r7, #28]
	*I_q = (Ialfa * cosf(motor_angle_rad)) + (Ibeta * sinf(motor_angle_rad));
 8001432:	ed97 0a07 	vldr	s0, [r7, #28]
 8001436:	f00a fddd 	bl	800bff4 <cosf>
 800143a:	eeb0 7a40 	vmov.f32	s14, s0
 800143e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001442:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001446:	ed97 0a07 	vldr	s0, [r7, #28]
 800144a:	f00a fe17 	bl	800c07c <sinf>
 800144e:	eeb0 7a40 	vmov.f32	s14, s0
 8001452:	edd7 7a08 	vldr	s15, [r7, #32]
 8001456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	edc3 7a00 	vstr	s15, [r3]
	*I_d = (Ialfa * sinf(motor_angle_rad)*(-1)) + (Ibeta * cosf(motor_angle_rad));
 8001464:	ed97 0a07 	vldr	s0, [r7, #28]
 8001468:	f00a fdc4 	bl	800bff4 <cosf>
 800146c:	eeb0 7a40 	vmov.f32	s14, s0
 8001470:	edd7 7a08 	vldr	s15, [r7, #32]
 8001474:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001478:	ed97 0a07 	vldr	s0, [r7, #28]
 800147c:	f00a fdfe 	bl	800c07c <sinf>
 8001480:	eeb0 7a40 	vmov.f32	s14, s0
 8001484:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	edc3 7a00 	vstr	s15, [r3]
}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	ecbd 8b02 	vpop	{d8}
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	3f13cd39 	.word	0x3f13cd39
 80014a8:	3f93cd3a 	.word	0x3f93cd3a
 80014ac:	43340000 	.word	0x43340000
 80014b0:	40490fd8 	.word	0x40490fd8

080014b4 <inv_park_transform>:


void inv_park_transform(float U_d,float U_q, float motor_angle, float * U_alpha, float * U_beta){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	ed2d 8b02 	vpush	{d8}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
 80014be:	ed87 0a05 	vstr	s0, [r7, #20]
 80014c2:	edc7 0a04 	vstr	s1, [r7, #16]
 80014c6:	ed87 1a03 	vstr	s2, [r7, #12]
 80014ca:	60b8      	str	r0, [r7, #8]
 80014cc:	6079      	str	r1, [r7, #4]
	float motor_angle_rad = (motor_angle/180.0f)*3.141592f;
 80014ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80014d2:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001558 <inv_park_transform+0xa4>
 80014d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014da:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800155c <inv_park_transform+0xa8>
 80014de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e2:	edc7 7a07 	vstr	s15, [r7, #28]
	*U_alpha= (U_d * cosf(motor_angle_rad)) - (U_q * sinf(motor_angle_rad));
 80014e6:	ed97 0a07 	vldr	s0, [r7, #28]
 80014ea:	f00a fd83 	bl	800bff4 <cosf>
 80014ee:	eeb0 7a40 	vmov.f32	s14, s0
 80014f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80014f6:	ee27 8a27 	vmul.f32	s16, s14, s15
 80014fa:	ed97 0a07 	vldr	s0, [r7, #28]
 80014fe:	f00a fdbd 	bl	800c07c <sinf>
 8001502:	eeb0 7a40 	vmov.f32	s14, s0
 8001506:	edd7 7a04 	vldr	s15, [r7, #16]
 800150a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800150e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	edc3 7a00 	vstr	s15, [r3]
	*U_beta = (U_d * sinf(motor_angle_rad)) + (U_q * cosf(motor_angle_rad));
 8001518:	ed97 0a07 	vldr	s0, [r7, #28]
 800151c:	f00a fdae 	bl	800c07c <sinf>
 8001520:	eeb0 7a40 	vmov.f32	s14, s0
 8001524:	edd7 7a05 	vldr	s15, [r7, #20]
 8001528:	ee27 8a27 	vmul.f32	s16, s14, s15
 800152c:	ed97 0a07 	vldr	s0, [r7, #28]
 8001530:	f00a fd60 	bl	800bff4 <cosf>
 8001534:	eeb0 7a40 	vmov.f32	s14, s0
 8001538:	edd7 7a04 	vldr	s15, [r7, #16]
 800153c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001540:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	edc3 7a00 	vstr	s15, [r3]
}
 800154a:	bf00      	nop
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	ecbd 8b02 	vpop	{d8}
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	43340000 	.word	0x43340000
 800155c:	40490fd8 	.word	0x40490fd8

08001560 <LowPassFilter>:

//Tf - filter time constant in seconds
float LowPassFilter(float Tf,float actual_measurement, float * last_filtered_value){
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	ed87 0a03 	vstr	s0, [r7, #12]
 800156a:	edc7 0a02 	vstr	s1, [r7, #8]
 800156e:	6078      	str	r0, [r7, #4]
	float alpha = Tf/(Tf + 0.0002f); //0.0002 = 1/5kHz - pwm interrupt frequency and sampling
 8001570:	edd7 7a03 	vldr	s15, [r7, #12]
 8001574:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80015cc <LowPassFilter+0x6c>
 8001578:	ee37 7a87 	vadd.f32	s14, s15, s14
 800157c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001584:	edc7 7a05 	vstr	s15, [r7, #20]
	float filtered_value = (alpha*(*last_filtered_value)) + ((1.0f - alpha)*actual_measurement);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	ed93 7a00 	vldr	s14, [r3]
 800158e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001592:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800159a:	edd7 7a05 	vldr	s15, [r7, #20]
 800159e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80015a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ae:	edc7 7a04 	vstr	s15, [r7, #16]
	*last_filtered_value = filtered_value;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	601a      	str	r2, [r3, #0]
	return filtered_value;
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	ee07 3a90 	vmov	s15, r3
}
 80015be:	eeb0 0a67 	vmov.f32	s0, s15
 80015c2:	371c      	adds	r7, #28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	3951b717 	.word	0x3951b717

080015d0 <get_sine_value>:

float get_sine_value(uint16_t angle){
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
	float sine=0.0f;
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
	if(angle>=360){angle-=360;}
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80015e6:	d303      	bcc.n	80015f0 <get_sine_value+0x20>
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80015ee:	80fb      	strh	r3, [r7, #6]
	if(angle<0){angle+=360;}
	uint8_t sector=angle/90;
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	085b      	lsrs	r3, r3, #1
 80015f4:	4a24      	ldr	r2, [pc, #144]	; (8001688 <get_sine_value+0xb8>)
 80015f6:	fba2 2303 	umull	r2, r3, r2, r3
 80015fa:	095b      	lsrs	r3, r3, #5
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	72fb      	strb	r3, [r7, #11]
	switch (sector){
 8001600:	7afb      	ldrb	r3, [r7, #11]
 8001602:	2b03      	cmp	r3, #3
 8001604:	d833      	bhi.n	800166e <get_sine_value+0x9e>
 8001606:	a201      	add	r2, pc, #4	; (adr r2, 800160c <get_sine_value+0x3c>)
 8001608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160c:	0800161d 	.word	0x0800161d
 8001610:	0800162b 	.word	0x0800162b
 8001614:	0800163d 	.word	0x0800163d
 8001618:	08001655 	.word	0x08001655
	case 0:
		sine=sine_table[angle];
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	4a1b      	ldr	r2, [pc, #108]	; (800168c <get_sine_value+0xbc>)
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	60fb      	str	r3, [r7, #12]
		break;
 8001628:	e024      	b.n	8001674 <get_sine_value+0xa4>
	case 1:
		sine=sine_table[90-(angle-90)];
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8001630:	4a16      	ldr	r2, [pc, #88]	; (800168c <get_sine_value+0xbc>)
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60fb      	str	r3, [r7, #12]
		break;
 800163a:	e01b      	b.n	8001674 <get_sine_value+0xa4>
	case 2:
		sine=sine_table[angle-180]*(-1.0f);
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	3bb4      	subs	r3, #180	; 0xb4
 8001640:	4a12      	ldr	r2, [pc, #72]	; (800168c <get_sine_value+0xbc>)
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	eef1 7a67 	vneg.f32	s15, s15
 800164e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001652:	e00f      	b.n	8001674 <get_sine_value+0xa4>
	case 3:
		sine=sine_table[90-(angle-270)]*(-1.0f);
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 800165a:	4a0c      	ldr	r2, [pc, #48]	; (800168c <get_sine_value+0xbc>)
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	eef1 7a67 	vneg.f32	s15, s15
 8001668:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800166c:	e002      	b.n	8001674 <get_sine_value+0xa4>
	default:
		sine=0;
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
	}
	return sine;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	ee07 3a90 	vmov	s15, r3
}
 800167a:	eeb0 0a67 	vmov.f32	s0, s15
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	b60b60b7 	.word	0xb60b60b7
 800168c:	0800d1a0 	.word	0x0800d1a0

08001690 <output_sine_pwm>:

//this doesnt work
void output_sine_pwm(uint16_t angle,uint16_t max_duty_cycle){
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	460a      	mov	r2, r1
 800169a:	80fb      	strh	r3, [r7, #6]
 800169c:	4613      	mov	r3, r2
 800169e:	80bb      	strh	r3, [r7, #4]
	float sin_u = 0;
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
	float sin_v = 0;
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
	float sin_w = 0;
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
	if(angle>=360){ //fault
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80016b8:	d309      	bcc.n	80016ce <output_sine_pwm+0x3e>
		TIM1->CCR1=0;
 80016ba:	4b34      	ldr	r3, [pc, #208]	; (800178c <output_sine_pwm+0xfc>)
 80016bc:	2200      	movs	r2, #0
 80016be:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=0;
 80016c0:	4b32      	ldr	r3, [pc, #200]	; (800178c <output_sine_pwm+0xfc>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=0;
 80016c6:	4b31      	ldr	r3, [pc, #196]	; (800178c <output_sine_pwm+0xfc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	63da      	str	r2, [r3, #60]	; 0x3c
		sin_w=get_sine_value(angle+240);
		TIM1->CCR1=(DUTY_CYCLE_LIMIT/2.0f)+sin_u*(max_duty_cycle/2.0f);
		TIM1->CCR2=(DUTY_CYCLE_LIMIT/2.0f)+sin_v*(max_duty_cycle/2.0f);
		TIM1->CCR3=(DUTY_CYCLE_LIMIT/2.0f)+sin_w*(max_duty_cycle/2.0f);
	}
}
 80016cc:	e05a      	b.n	8001784 <output_sine_pwm+0xf4>
		sin_u=get_sine_value(angle);
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff7d 	bl	80015d0 <get_sine_value>
 80016d6:	ed87 0a05 	vstr	s0, [r7, #20]
		sin_v=get_sine_value(angle+120);
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	3378      	adds	r3, #120	; 0x78
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff75 	bl	80015d0 <get_sine_value>
 80016e6:	ed87 0a04 	vstr	s0, [r7, #16]
		sin_w=get_sine_value(angle+240);
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	33f0      	adds	r3, #240	; 0xf0
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff6d 	bl	80015d0 <get_sine_value>
 80016f6:	ed87 0a03 	vstr	s0, [r7, #12]
		TIM1->CCR1=(DUTY_CYCLE_LIMIT/2.0f)+sin_u*(max_duty_cycle/2.0f);
 80016fa:	88bb      	ldrh	r3, [r7, #4]
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001704:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001708:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800170c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001714:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001790 <output_sine_pwm+0x100>
 8001718:	ee77 7a87 	vadd.f32	s15, s15, s14
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <output_sine_pwm+0xfc>)
 800171e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001722:	ee17 2a90 	vmov	r2, s15
 8001726:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=(DUTY_CYCLE_LIMIT/2.0f)+sin_v*(max_duty_cycle/2.0f);
 8001728:	88bb      	ldrh	r3, [r7, #4]
 800172a:	ee07 3a90 	vmov	s15, r3
 800172e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001732:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001736:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800173a:	edd7 7a04 	vldr	s15, [r7, #16]
 800173e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001742:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001790 <output_sine_pwm+0x100>
 8001746:	ee77 7a87 	vadd.f32	s15, s15, s14
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <output_sine_pwm+0xfc>)
 800174c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001750:	ee17 2a90 	vmov	r2, s15
 8001754:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=(DUTY_CYCLE_LIMIT/2.0f)+sin_w*(max_duty_cycle/2.0f);
 8001756:	88bb      	ldrh	r3, [r7, #4]
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001760:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001764:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001768:	edd7 7a03 	vldr	s15, [r7, #12]
 800176c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001770:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001790 <output_sine_pwm+0x100>
 8001774:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <output_sine_pwm+0xfc>)
 800177a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800177e:	ee17 2a90 	vmov	r2, s15
 8001782:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001784:	bf00      	nop
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40010000 	.word	0x40010000
 8001790:	451c3800 	.word	0x451c3800

08001794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001798:	f002 ff4a 	bl	8004630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800179c:	f000 f826 	bl	80017ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a0:	f000 fb64 	bl	8001e6c <MX_GPIO_Init>

  MX_TIM1_Init();
 80017a4:	f000 f908 	bl	80019b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80017a8:	f000 f9c0 	bl	8001b2c <MX_TIM2_Init>
  MX_DMA_Init();MX_ADC1_Init();
 80017ac:	f000 fb10 	bl	8001dd0 <MX_DMA_Init>
 80017b0:	f000 f886 	bl	80018c0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80017b4:	f000 fae2 	bl	8001d7c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80017b8:	f000 faa8 	bl	8001d0c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80017bc:	f000 fa0a 	bl	8001bd4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80017c0:	f000 fa56 	bl	8001c70 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80017c4:	f007 fd94 	bl	80092f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80017c8:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <main+0x4c>)
 80017ca:	2100      	movs	r1, #0
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <main+0x50>)
 80017ce:	f007 fdd9 	bl	8009384 <osThreadNew>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <main+0x54>)
 80017d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80017d8:	f007 fdae 	bl	8009338 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <main+0x48>
 80017de:	bf00      	nop
 80017e0:	0800d30c 	.word	0x0800d30c
 80017e4:	08002059 	.word	0x08002059
 80017e8:	200008cc 	.word	0x200008cc

080017ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b094      	sub	sp, #80	; 0x50
 80017f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f2:	f107 0320 	add.w	r3, r7, #32
 80017f6:	2230      	movs	r2, #48	; 0x30
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f00a fb30 	bl	800be60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <SystemClock_Config+0xcc>)
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	4a27      	ldr	r2, [pc, #156]	; (80018b8 <SystemClock_Config+0xcc>)
 800181a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181e:	6413      	str	r3, [r2, #64]	; 0x40
 8001820:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <SystemClock_Config+0xcc>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800182c:	2300      	movs	r3, #0
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	4b22      	ldr	r3, [pc, #136]	; (80018bc <SystemClock_Config+0xd0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001838:	4a20      	ldr	r2, [pc, #128]	; (80018bc <SystemClock_Config+0xd0>)
 800183a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <SystemClock_Config+0xd0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800184c:	2301      	movs	r3, #1
 800184e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001856:	2302      	movs	r3, #2
 8001858:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800185a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800185e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001860:	230f      	movs	r3, #15
 8001862:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001864:	2360      	movs	r3, #96	; 0x60
 8001866:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001868:	2302      	movs	r3, #2
 800186a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800186c:	2304      	movs	r3, #4
 800186e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001870:	f107 0320 	add.w	r3, r7, #32
 8001874:	4618      	mov	r0, r3
 8001876:	f004 fb65 	bl	8005f44 <HAL_RCC_OscConfig>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001880:	f000 fc10 	bl	80020a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001884:	230f      	movs	r3, #15
 8001886:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001888:	2302      	movs	r3, #2
 800188a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001894:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	2102      	movs	r1, #2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f004 fdc7 	bl	8006434 <HAL_RCC_ClockConfig>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80018ac:	f000 fbfa 	bl	80020a4 <Error_Handler>
  }
}
 80018b0:	bf00      	nop
 80018b2:	3750      	adds	r7, #80	; 0x50
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40007000 	.word	0x40007000

080018c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018c6:	463b      	mov	r3, r7
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018d2:	4b36      	ldr	r3, [pc, #216]	; (80019ac <MX_ADC1_Init+0xec>)
 80018d4:	4a36      	ldr	r2, [pc, #216]	; (80019b0 <MX_ADC1_Init+0xf0>)
 80018d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018d8:	4b34      	ldr	r3, [pc, #208]	; (80019ac <MX_ADC1_Init+0xec>)
 80018da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018e0:	4b32      	ldr	r3, [pc, #200]	; (80019ac <MX_ADC1_Init+0xec>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80018e6:	4b31      	ldr	r3, [pc, #196]	; (80019ac <MX_ADC1_Init+0xec>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018ec:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <MX_ADC1_Init+0xec>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018f2:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <MX_ADC1_Init+0xec>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018fa:	4b2c      	ldr	r3, [pc, #176]	; (80019ac <MX_ADC1_Init+0xec>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001900:	4b2a      	ldr	r3, [pc, #168]	; (80019ac <MX_ADC1_Init+0xec>)
 8001902:	4a2c      	ldr	r2, [pc, #176]	; (80019b4 <MX_ADC1_Init+0xf4>)
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001906:	4b29      	ldr	r3, [pc, #164]	; (80019ac <MX_ADC1_Init+0xec>)
 8001908:	2200      	movs	r2, #0
 800190a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800190c:	4b27      	ldr	r3, [pc, #156]	; (80019ac <MX_ADC1_Init+0xec>)
 800190e:	2204      	movs	r2, #4
 8001910:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <MX_ADC1_Init+0xec>)
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800191a:	4b24      	ldr	r3, [pc, #144]	; (80019ac <MX_ADC1_Init+0xec>)
 800191c:	2200      	movs	r2, #0
 800191e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001920:	4822      	ldr	r0, [pc, #136]	; (80019ac <MX_ADC1_Init+0xec>)
 8001922:	f002 fef7 	bl	8004714 <HAL_ADC_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800192c:	f000 fbba 	bl	80020a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001930:	2304      	movs	r3, #4
 8001932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001934:	2301      	movs	r3, #1
 8001936:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800193c:	463b      	mov	r3, r7
 800193e:	4619      	mov	r1, r3
 8001940:	481a      	ldr	r0, [pc, #104]	; (80019ac <MX_ADC1_Init+0xec>)
 8001942:	f003 f839 	bl	80049b8 <HAL_ADC_ConfigChannel>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800194c:	f000 fbaa 	bl	80020a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001950:	2305      	movs	r3, #5
 8001952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001954:	2302      	movs	r3, #2
 8001956:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001958:	463b      	mov	r3, r7
 800195a:	4619      	mov	r1, r3
 800195c:	4813      	ldr	r0, [pc, #76]	; (80019ac <MX_ADC1_Init+0xec>)
 800195e:	f003 f82b 	bl	80049b8 <HAL_ADC_ConfigChannel>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001968:	f000 fb9c 	bl	80020a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800196c:	2306      	movs	r3, #6
 800196e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001970:	2303      	movs	r3, #3
 8001972:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001974:	463b      	mov	r3, r7
 8001976:	4619      	mov	r1, r3
 8001978:	480c      	ldr	r0, [pc, #48]	; (80019ac <MX_ADC1_Init+0xec>)
 800197a:	f003 f81d 	bl	80049b8 <HAL_ADC_ConfigChannel>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001984:	f000 fb8e 	bl	80020a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001988:	2307      	movs	r3, #7
 800198a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800198c:	2304      	movs	r3, #4
 800198e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001990:	463b      	mov	r3, r7
 8001992:	4619      	mov	r1, r3
 8001994:	4805      	ldr	r0, [pc, #20]	; (80019ac <MX_ADC1_Init+0xec>)
 8001996:	f003 f80f 	bl	80049b8 <HAL_ADC_ConfigChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80019a0:	f000 fb80 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	200004fc 	.word	0x200004fc
 80019b0:	40012000 	.word	0x40012000
 80019b4:	0f000001 	.word	0x0f000001

080019b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b096      	sub	sp, #88	; 0x58
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	611a      	str	r2, [r3, #16]
 80019e6:	615a      	str	r2, [r3, #20]
 80019e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	2220      	movs	r2, #32
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f00a fa35 	bl	800be60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019f6:	4b4b      	ldr	r3, [pc, #300]	; (8001b24 <MX_TIM1_Init+0x16c>)
 80019f8:	4a4b      	ldr	r2, [pc, #300]	; (8001b28 <MX_TIM1_Init+0x170>)
 80019fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019fc:	4b49      	ldr	r3, [pc, #292]	; (8001b24 <MX_TIM1_Init+0x16c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001a02:	4b48      	ldr	r3, [pc, #288]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001a04:	2220      	movs	r2, #32
 8001a06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8001a08:	4b46      	ldr	r3, [pc, #280]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001a0a:	f241 3287 	movw	r2, #4999	; 0x1387
 8001a0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a10:	4b44      	ldr	r3, [pc, #272]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a16:	4b43      	ldr	r3, [pc, #268]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1c:	4b41      	ldr	r3, [pc, #260]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a22:	4840      	ldr	r0, [pc, #256]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001a24:	f004 fee6 	bl	80067f4 <HAL_TIM_Base_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a2e:	f000 fb39 	bl	80020a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a36:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4839      	ldr	r0, [pc, #228]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001a40:	f005 fc24 	bl	800728c <HAL_TIM_ConfigClockSource>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a4a:	f000 fb2b 	bl	80020a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a4e:	4835      	ldr	r0, [pc, #212]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001a50:	f004 ffb1 	bl	80069b6 <HAL_TIM_PWM_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001a5a:	f000 fb23 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	482d      	ldr	r0, [pc, #180]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001a6e:	f005 ffd3 	bl	8007a18 <HAL_TIMEx_MasterConfigSynchronization>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a78:	f000 fb14 	bl	80020a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a7c:	2360      	movs	r3, #96	; 0x60
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001a84:	2302      	movs	r3, #2
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001a8c:	2304      	movs	r3, #4
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a94:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4820      	ldr	r0, [pc, #128]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001aa4:	f005 fb30 	bl	8007108 <HAL_TIM_PWM_ConfigChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001aae:	f000 faf9 	bl	80020a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	481a      	ldr	r0, [pc, #104]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001abc:	f005 fb24 	bl	8007108 <HAL_TIM_PWM_ConfigChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001ac6:	f000 faed 	bl	80020a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ace:	2208      	movs	r2, #8
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4814      	ldr	r0, [pc, #80]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001ad4:	f005 fb18 	bl	8007108 <HAL_TIM_PWM_ConfigChannel>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001ade:	f000 fae1 	bl	80020a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001af6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001afa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	4619      	mov	r1, r3
 8001b04:	4807      	ldr	r0, [pc, #28]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001b06:	f005 fff5 	bl	8007af4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001b10:	f000 fac8 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b14:	4803      	ldr	r0, [pc, #12]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001b16:	f000 fe15 	bl	8002744 <HAL_TIM_MspPostInit>

}
 8001b1a:	bf00      	nop
 8001b1c:	3758      	adds	r7, #88	; 0x58
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200005a4 	.word	0x200005a4
 8001b28:	40010000 	.word	0x40010000

08001b2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08c      	sub	sp, #48	; 0x30
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	2224      	movs	r2, #36	; 0x24
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f00a f990 	bl	800be60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b48:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <MX_TIM2_Init+0xa4>)
 8001b4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b50:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <MX_TIM2_Init+0xa4>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <MX_TIM2_Init+0xa4>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <MX_TIM2_Init+0xa4>)
 8001b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <MX_TIM2_Init+0xa4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6a:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <MX_TIM2_Init+0xa4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8001b70:	2302      	movs	r3, #2
 8001b72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b80:	230a      	movs	r3, #10
 8001b82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001b90:	230a      	movs	r3, #10
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b94:	f107 030c 	add.w	r3, r7, #12
 8001b98:	4619      	mov	r1, r3
 8001b9a:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <MX_TIM2_Init+0xa4>)
 8001b9c:	f005 f878 	bl	8006c90 <HAL_TIM_Encoder_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001ba6:	f000 fa7d 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4806      	ldr	r0, [pc, #24]	; (8001bd0 <MX_TIM2_Init+0xa4>)
 8001bb8:	f005 ff2e 	bl	8007a18 <HAL_TIMEx_MasterConfigSynchronization>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001bc2:	f000 fa6f 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	3730      	adds	r7, #48	; 0x30
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200005ec 	.word	0x200005ec

08001bd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be8:	463b      	mov	r3, r7
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <MX_TIM3_Init+0x94>)
 8001bf2:	4a1e      	ldr	r2, [pc, #120]	; (8001c6c <MX_TIM3_Init+0x98>)
 8001bf4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <MX_TIM3_Init+0x94>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <MX_TIM3_Init+0x94>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15999;
 8001c02:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <MX_TIM3_Init+0x94>)
 8001c04:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001c08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <MX_TIM3_Init+0x94>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <MX_TIM3_Init+0x94>)
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c16:	4814      	ldr	r0, [pc, #80]	; (8001c68 <MX_TIM3_Init+0x94>)
 8001c18:	f004 fdec 	bl	80067f4 <HAL_TIM_Base_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001c22:	f000 fa3f 	bl	80020a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c2c:	f107 0308 	add.w	r3, r7, #8
 8001c30:	4619      	mov	r1, r3
 8001c32:	480d      	ldr	r0, [pc, #52]	; (8001c68 <MX_TIM3_Init+0x94>)
 8001c34:	f005 fb2a 	bl	800728c <HAL_TIM_ConfigClockSource>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001c3e:	f000 fa31 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c4a:	463b      	mov	r3, r7
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4806      	ldr	r0, [pc, #24]	; (8001c68 <MX_TIM3_Init+0x94>)
 8001c50:	f005 fee2 	bl	8007a18 <HAL_TIMEx_MasterConfigSynchronization>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001c5a:	f000 fa23 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000634 	.word	0x20000634
 8001c6c:	40000400 	.word	0x40000400

08001c70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c76:	f107 0308 	add.w	r3, r7, #8
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c84:	463b      	mov	r3, r7
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c8c:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <MX_TIM4_Init+0x94>)
 8001c8e:	4a1e      	ldr	r2, [pc, #120]	; (8001d08 <MX_TIM4_Init+0x98>)
 8001c90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001c92:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <MX_TIM4_Init+0x94>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c98:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <MX_TIM4_Init+0x94>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 63999;
 8001c9e:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <MX_TIM4_Init+0x94>)
 8001ca0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001ca4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <MX_TIM4_Init+0x94>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <MX_TIM4_Init+0x94>)
 8001cae:	2280      	movs	r2, #128	; 0x80
 8001cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cb2:	4814      	ldr	r0, [pc, #80]	; (8001d04 <MX_TIM4_Init+0x94>)
 8001cb4:	f004 fd9e 	bl	80067f4 <HAL_TIM_Base_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001cbe:	f000 f9f1 	bl	80020a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cc8:	f107 0308 	add.w	r3, r7, #8
 8001ccc:	4619      	mov	r1, r3
 8001cce:	480d      	ldr	r0, [pc, #52]	; (8001d04 <MX_TIM4_Init+0x94>)
 8001cd0:	f005 fadc 	bl	800728c <HAL_TIM_ConfigClockSource>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001cda:	f000 f9e3 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4806      	ldr	r0, [pc, #24]	; (8001d04 <MX_TIM4_Init+0x94>)
 8001cec:	f005 fe94 	bl	8007a18 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001cf6:	f000 f9d5 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	2000067c 	.word	0x2000067c
 8001d08:	40000800 	.word	0x40000800

08001d0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d12:	4a18      	ldr	r2, [pc, #96]	; (8001d74 <MX_USART1_UART_Init+0x68>)
 8001d14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d16:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d32:	220c      	movs	r2, #12
 8001d34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d42:	480b      	ldr	r0, [pc, #44]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d44:	f005 ff3c 	bl	8007bc0 <HAL_UART_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d4e:	f000 f9a9 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 0210 	orr.w	r2, r2, #16
 8001d60:	60da      	str	r2, [r3, #12]
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) UART_RX_buf, sizeof(UART_RX_buf));
 8001d62:	22c8      	movs	r2, #200	; 0xc8
 8001d64:	4904      	ldr	r1, [pc, #16]	; (8001d78 <MX_USART1_UART_Init+0x6c>)
 8001d66:	4802      	ldr	r0, [pc, #8]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d68:	f006 f8e6 	bl	8007f38 <HAL_UARTEx_ReceiveToIdle_DMA>
  /* USER CODE END USART1_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	200006c4 	.word	0x200006c4
 8001d74:	40011000 	.word	0x40011000
 8001d78:	2000016c 	.word	0x2000016c

08001d7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d80:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <MX_USART2_UART_Init+0x48>)
 8001d82:	4a11      	ldr	r2, [pc, #68]	; (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001d84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2500000;
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <MX_USART2_UART_Init+0x48>)
 8001d88:	4a10      	ldr	r2, [pc, #64]	; (8001dcc <MX_USART2_UART_Init+0x50>)
 8001d8a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <MX_USART2_UART_Init+0x48>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <MX_USART2_UART_Init+0x48>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <MX_USART2_UART_Init+0x48>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <MX_USART2_UART_Init+0x48>)
 8001da0:	220c      	movs	r2, #12
 8001da2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <MX_USART2_UART_Init+0x48>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <MX_USART2_UART_Init+0x48>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001db0:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <MX_USART2_UART_Init+0x48>)
 8001db2:	f005 ff05 	bl	8007bc0 <HAL_UART_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8001dbc:	f000 f972 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000708 	.word	0x20000708
 8001dc8:	40004400 	.word	0x40004400
 8001dcc:	002625a0 	.word	0x002625a0

08001dd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <MX_DMA_Init+0x98>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a22      	ldr	r2, [pc, #136]	; (8001e68 <MX_DMA_Init+0x98>)
 8001de0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <MX_DMA_Init+0x98>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <MX_DMA_Init+0x98>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <MX_DMA_Init+0x98>)
 8001dfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <MX_DMA_Init+0x98>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2105      	movs	r1, #5
 8001e12:	2010      	movs	r0, #16
 8001e14:	f003 f96f 	bl	80050f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e18:	2010      	movs	r0, #16
 8001e1a:	f003 f988 	bl	800512e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2105      	movs	r1, #5
 8001e22:	2011      	movs	r0, #17
 8001e24:	f003 f967 	bl	80050f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001e28:	2011      	movs	r0, #17
 8001e2a:	f003 f980 	bl	800512e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2105      	movs	r1, #5
 8001e32:	2038      	movs	r0, #56	; 0x38
 8001e34:	f003 f95f 	bl	80050f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001e38:	2038      	movs	r0, #56	; 0x38
 8001e3a:	f003 f978 	bl	800512e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2105      	movs	r1, #5
 8001e42:	203a      	movs	r0, #58	; 0x3a
 8001e44:	f003 f957 	bl	80050f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001e48:	203a      	movs	r0, #58	; 0x3a
 8001e4a:	f003 f970 	bl	800512e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2105      	movs	r1, #5
 8001e52:	2046      	movs	r0, #70	; 0x46
 8001e54:	f003 f94f 	bl	80050f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001e58:	2046      	movs	r0, #70	; 0x46
 8001e5a:	f003 f968 	bl	800512e <HAL_NVIC_EnableIRQ>

}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800

08001e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	4b51      	ldr	r3, [pc, #324]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a50      	ldr	r2, [pc, #320]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001e8c:	f043 0304 	orr.w	r3, r3, #4
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b4e      	ldr	r3, [pc, #312]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b4a      	ldr	r3, [pc, #296]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a49      	ldr	r2, [pc, #292]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b47      	ldr	r3, [pc, #284]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	4b43      	ldr	r3, [pc, #268]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a42      	ldr	r2, [pc, #264]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b40      	ldr	r3, [pc, #256]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	4b3c      	ldr	r3, [pc, #240]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a3b      	ldr	r2, [pc, #236]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b39      	ldr	r3, [pc, #228]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SOFTSTART_GPIO_Port, SOFTSTART_Pin, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ef8:	4835      	ldr	r0, [pc, #212]	; (8001fd0 <MX_GPIO_Init+0x164>)
 8001efa:	f004 f809 	bl	8005f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INPUTS_LOAD_Pin|INPUTS_CS_Pin|DISP_LATCH_Pin|DISP_EN_Pin
 8001efe:	2200      	movs	r2, #0
 8001f00:	f240 3117 	movw	r1, #791	; 0x317
 8001f04:	4833      	ldr	r0, [pc, #204]	; (8001fd4 <MX_GPIO_Init+0x168>)
 8001f06:	f004 f803 	bl	8005f10 <HAL_GPIO_WritePin>
                          |MODBUS_DE_Pin|ADC_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INV_ENABLE_Pin|INV_DISABLE_Pin, GPIO_PIN_SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001f10:	4830      	ldr	r0, [pc, #192]	; (8001fd4 <MX_GPIO_Init+0x168>)
 8001f12:	f003 fffd 	bl	8005f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4829      	ldr	r0, [pc, #164]	; (8001fd0 <MX_GPIO_Init+0x164>)
 8001f2c:	f003 fd88 	bl	8005a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : SOFTSTART_Pin */
  GPIO_InitStruct.Pin = SOFTSTART_Pin;
 8001f30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f36:	2301      	movs	r3, #1
 8001f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SOFTSTART_GPIO_Port, &GPIO_InitStruct);
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	4619      	mov	r1, r3
 8001f48:	4821      	ldr	r0, [pc, #132]	; (8001fd0 <MX_GPIO_Init+0x164>)
 8001f4a:	f003 fd79 	bl	8005a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUTS_LOAD_Pin INPUTS_CS_Pin DISP_LATCH_Pin INV_ENABLE_Pin
                           INV_DISABLE_Pin DISP_EN_Pin MODBUS_DE_Pin ADC_CS_Pin */
  GPIO_InitStruct.Pin = INPUTS_LOAD_Pin|INPUTS_CS_Pin|DISP_LATCH_Pin|INV_ENABLE_Pin
 8001f4e:	f243 3317 	movw	r3, #13079	; 0x3317
 8001f52:	617b      	str	r3, [r7, #20]
                          |INV_DISABLE_Pin|DISP_EN_Pin|MODBUS_DE_Pin|ADC_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4619      	mov	r1, r3
 8001f66:	481b      	ldr	r0, [pc, #108]	; (8001fd4 <MX_GPIO_Init+0x168>)
 8001f68:	f003 fd6a 	bl	8005a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CLK_Pin PB14 PB15 */
  GPIO_InitStruct.Pin = SPI_CLK_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8001f6c:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f7e:	2305      	movs	r3, #5
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	4812      	ldr	r0, [pc, #72]	; (8001fd4 <MX_GPIO_Init+0x168>)
 8001f8a:	f003 fd59 	bl	8005a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_Pin DIR_Pin ENC_Z_Pin */
  GPIO_InitStruct.Pin = STEP_Pin|DIR_Pin|ENC_Z_Pin;
 8001f8e:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8001f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <MX_GPIO_Init+0x16c>)
 8001fa6:	f003 fd4b 	bl	8005a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OC_ALARM_Pin */
  GPIO_InitStruct.Pin = OC_ALARM_Pin;
 8001faa:	2320      	movs	r3, #32
 8001fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OC_ALARM_GPIO_Port, &GPIO_InitStruct);
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <MX_GPIO_Init+0x168>)
 8001fc0:	f003 fd3e 	bl	8005a40 <HAL_GPIO_Init>

}
 8001fc4:	bf00      	nop
 8001fc6:	3728      	adds	r7, #40	; 0x28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40020800 	.word	0x40020800
 8001fd4:	40020400 	.word	0x40020400
 8001fd8:	40020000 	.word	0x40020000

08001fdc <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]
	modbus_process_new_data_to_fifo(huart,Size);
 8001fe8:	887b      	ldrh	r3, [r7, #2]
 8001fea:	4619      	mov	r1, r3
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff f8c7 	bl	8001180 <modbus_process_new_data_to_fifo>
	process_modbus_command();
 8001ff2:	f7ff f92f 	bl	8001254 <process_modbus_command>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
     if(huart == &huart1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a06      	ldr	r2, [pc, #24]	; (8002024 <HAL_UART_ErrorCallback+0x24>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d104      	bne.n	800201a <HAL_UART_ErrorCallback+0x1a>
     {
         HAL_UART_DeInit(&huart1);
 8002010:	4804      	ldr	r0, [pc, #16]	; (8002024 <HAL_UART_ErrorCallback+0x24>)
 8002012:	f005 fe22 	bl	8007c5a <HAL_UART_DeInit>
         MX_USART1_UART_Init();
 8002016:	f7ff fe79 	bl	8001d0c <MX_USART1_UART_Init>
     }
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200006c4 	.word	0x200006c4

08002028 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a06      	ldr	r2, [pc, #24]	; (8002050 <HAL_UART_TxCpltCallback+0x28>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d105      	bne.n	8002046 <HAL_UART_TxCpltCallback+0x1e>
	HAL_GPIO_WritePin(MODBUS_DE_GPIO_Port,MODBUS_DE_Pin, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002040:	4804      	ldr	r0, [pc, #16]	; (8002054 <HAL_UART_TxCpltCallback+0x2c>)
 8002042:	f003 ff65 	bl	8005f10 <HAL_GPIO_WritePin>
	}
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40011000 	.word	0x40011000
 8002054:	40020400 	.word	0x40020400

08002058 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//HAL_ADC_Start_DMA(&hadc1, ADC_rawdata, 4);
	Modbus_init();
 8002060:	f7ff f848 	bl	80010f4 <Modbus_init>
	osDelay(300);
 8002064:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002068:	f007 fa1e 	bl	80094a8 <osDelay>
	motor_identification();
 800206c:	f000 f820 	bl	80020b0 <motor_identification>
	HAL_TIM_Base_Start_IT(&htim3);
 8002070:	4808      	ldr	r0, [pc, #32]	; (8002094 <StartDefaultTask+0x3c>)
 8002072:	f004 fc0f 	bl	8006894 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8002076:	4808      	ldr	r0, [pc, #32]	; (8002098 <StartDefaultTask+0x40>)
 8002078:	f004 fc0c 	bl	8006894 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1); //16 khz ISR synchronized with PWM
 800207c:	4807      	ldr	r0, [pc, #28]	; (800209c <StartDefaultTask+0x44>)
 800207e:	f004 fc09 	bl	8006894 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002082:	213c      	movs	r1, #60	; 0x3c
 8002084:	4806      	ldr	r0, [pc, #24]	; (80020a0 <StartDefaultTask+0x48>)
 8002086:	f004 fea9 	bl	8006ddc <HAL_TIM_Encoder_Start>
	/* Infinite loop */
	for(;;)
	{
    osDelay(1);
 800208a:	2001      	movs	r0, #1
 800208c:	f007 fa0c 	bl	80094a8 <osDelay>
 8002090:	e7fb      	b.n	800208a <StartDefaultTask+0x32>
 8002092:	bf00      	nop
 8002094:	20000634 	.word	0x20000634
 8002098:	2000067c 	.word	0x2000067c
 800209c:	200005a4 	.word	0x200005a4
 80020a0:	200005ec 	.word	0x200005ec

080020a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020a8:	b672      	cpsid	i
}
 80020aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020ac:	e7fe      	b.n	80020ac <Error_Handler+0x8>
	...

080020b0 <motor_identification>:

extern UART_HandleTypeDef huart2;
uint8_t UART2_RX_raw[9];
ssi_encoder_data_t ssi_encoder_data;

void motor_identification(void){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
	//first send 2 packets with 0x92 command, then 8 with 0x7A command (motor data read)
	uint8_t command = 0x92;
 80020b6:	2392      	movs	r3, #146	; 0x92
 80020b8:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i=0;i<10;i++){
 80020ba:	2300      	movs	r3, #0
 80020bc:	71fb      	strb	r3, [r7, #7]
 80020be:	e018      	b.n	80020f2 <motor_identification+0x42>
		if(i>2){command=0x7A;}
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <motor_identification+0x1a>
 80020c6:	237a      	movs	r3, #122	; 0x7a
 80020c8:	71bb      	strb	r3, [r7, #6]
		HAL_UART_Transmit(&huart2, &command, 1, 100);
 80020ca:	1db9      	adds	r1, r7, #6
 80020cc:	2364      	movs	r3, #100	; 0x64
 80020ce:	2201      	movs	r2, #1
 80020d0:	4838      	ldr	r0, [pc, #224]	; (80021b4 <motor_identification+0x104>)
 80020d2:	f005 fdf1 	bl	8007cb8 <HAL_UART_Transmit>
		osDelay(1);
 80020d6:	2001      	movs	r0, #1
 80020d8:	f007 f9e6 	bl	80094a8 <osDelay>
		HAL_UART_Receive_DMA(&huart2, UART2_RX_raw, 9);
 80020dc:	2209      	movs	r2, #9
 80020de:	4936      	ldr	r1, [pc, #216]	; (80021b8 <motor_identification+0x108>)
 80020e0:	4834      	ldr	r0, [pc, #208]	; (80021b4 <motor_identification+0x104>)
 80020e2:	f005 fef9 	bl	8007ed8 <HAL_UART_Receive_DMA>
		osDelay(1);
 80020e6:	2001      	movs	r0, #1
 80020e8:	f007 f9de 	bl	80094a8 <osDelay>
	for(uint8_t i=0;i<10;i++){
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	3301      	adds	r3, #1
 80020f0:	71fb      	strb	r3, [r7, #7]
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	2b09      	cmp	r3, #9
 80020f6:	d9e3      	bls.n	80020c0 <motor_identification+0x10>
	}
	//check if encoder sent data back ok
	if(UART2_RX_raw[1]!=0x21){ssi_encoder_data.encoder_state=encoder_error_no_communication;}
 80020f8:	4b2f      	ldr	r3, [pc, #188]	; (80021b8 <motor_identification+0x108>)
 80020fa:	785b      	ldrb	r3, [r3, #1]
 80020fc:	2b21      	cmp	r3, #33	; 0x21
 80020fe:	d003      	beq.n	8002108 <motor_identification+0x58>
 8002100:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <motor_identification+0x10c>)
 8002102:	2203      	movs	r2, #3
 8002104:	701a      	strb	r2, [r3, #0]
		}
		//determine speed and power
		ssi_encoder_data.motor_power=(UART2_RX_raw[4] >> 4)*100;
		ssi_encoder_data.motor_speed=(UART2_RX_raw[4] & 0x0F)*1000;
	}
}
 8002106:	e050      	b.n	80021aa <motor_identification+0xfa>
		ssi_encoder_data.encoder_state=encoder_ok;
 8002108:	4b2c      	ldr	r3, [pc, #176]	; (80021bc <motor_identification+0x10c>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
		if(UART2_RX_raw[2]==0x41){ssi_encoder_data.encoder_resolution=p131072ppr;ssi_encoder_data.motor_family=j2super;}
 800210e:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <motor_identification+0x108>)
 8002110:	789b      	ldrb	r3, [r3, #2]
 8002112:	2b41      	cmp	r3, #65	; 0x41
 8002114:	d106      	bne.n	8002124 <motor_identification+0x74>
 8002116:	4b29      	ldr	r3, [pc, #164]	; (80021bc <motor_identification+0x10c>)
 8002118:	2202      	movs	r2, #2
 800211a:	771a      	strb	r2, [r3, #28]
 800211c:	4b27      	ldr	r3, [pc, #156]	; (80021bc <motor_identification+0x10c>)
 800211e:	2202      	movs	r2, #2
 8002120:	775a      	strb	r2, [r3, #29]
 8002122:	e010      	b.n	8002146 <motor_identification+0x96>
		else if(UART2_RX_raw[2]==0x3D){ssi_encoder_data.encoder_resolution=p8192ppr;ssi_encoder_data.motor_family=j2;}
 8002124:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <motor_identification+0x108>)
 8002126:	789b      	ldrb	r3, [r3, #2]
 8002128:	2b3d      	cmp	r3, #61	; 0x3d
 800212a:	d106      	bne.n	800213a <motor_identification+0x8a>
 800212c:	4b23      	ldr	r3, [pc, #140]	; (80021bc <motor_identification+0x10c>)
 800212e:	2201      	movs	r2, #1
 8002130:	771a      	strb	r2, [r3, #28]
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <motor_identification+0x10c>)
 8002134:	2201      	movs	r2, #1
 8002136:	775a      	strb	r2, [r3, #29]
 8002138:	e005      	b.n	8002146 <motor_identification+0x96>
		else{ssi_encoder_data.encoder_resolution=unknown_resolution;ssi_encoder_data.motor_family=unknown_family;}
 800213a:	4b20      	ldr	r3, [pc, #128]	; (80021bc <motor_identification+0x10c>)
 800213c:	2200      	movs	r2, #0
 800213e:	771a      	strb	r2, [r3, #28]
 8002140:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <motor_identification+0x10c>)
 8002142:	2200      	movs	r2, #0
 8002144:	775a      	strb	r2, [r3, #29]
		switch(UART2_RX_raw[3]){
 8002146:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <motor_identification+0x108>)
 8002148:	78db      	ldrb	r3, [r3, #3]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d005      	beq.n	800215a <motor_identification+0xaa>
 800214e:	2b12      	cmp	r3, #18
 8002150:	d107      	bne.n	8002162 <motor_identification+0xb2>
			ssi_encoder_data.motor_formfactor=kf;break;
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <motor_identification+0x10c>)
 8002154:	2202      	movs	r2, #2
 8002156:	779a      	strb	r2, [r3, #30]
 8002158:	e007      	b.n	800216a <motor_identification+0xba>
			ssi_encoder_data.motor_formfactor=mf;break;
 800215a:	4b18      	ldr	r3, [pc, #96]	; (80021bc <motor_identification+0x10c>)
 800215c:	2201      	movs	r2, #1
 800215e:	779a      	strb	r2, [r3, #30]
 8002160:	e003      	b.n	800216a <motor_identification+0xba>
			ssi_encoder_data.motor_formfactor=unknown_formfactor;break;
 8002162:	4b16      	ldr	r3, [pc, #88]	; (80021bc <motor_identification+0x10c>)
 8002164:	2200      	movs	r2, #0
 8002166:	779a      	strb	r2, [r3, #30]
 8002168:	bf00      	nop
		ssi_encoder_data.motor_power=(UART2_RX_raw[4] >> 4)*100;
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <motor_identification+0x108>)
 800216c:	791b      	ldrb	r3, [r3, #4]
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	b2db      	uxtb	r3, r3
 8002172:	b29b      	uxth	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	0092      	lsls	r2, r2, #2
 8002178:	4413      	add	r3, r2
 800217a:	461a      	mov	r2, r3
 800217c:	0091      	lsls	r1, r2, #2
 800217e:	461a      	mov	r2, r3
 8002180:	460b      	mov	r3, r1
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	b29a      	uxth	r2, r3
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <motor_identification+0x10c>)
 800218a:	841a      	strh	r2, [r3, #32]
		ssi_encoder_data.motor_speed=(UART2_RX_raw[4] & 0x0F)*1000;
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <motor_identification+0x108>)
 800218e:	791b      	ldrb	r3, [r3, #4]
 8002190:	b29b      	uxth	r3, r3
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	b29b      	uxth	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	0152      	lsls	r2, r2, #5
 800219c:	1ad2      	subs	r2, r2, r3
 800219e:	0092      	lsls	r2, r2, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	4b05      	ldr	r3, [pc, #20]	; (80021bc <motor_identification+0x10c>)
 80021a8:	845a      	strh	r2, [r3, #34]	; 0x22
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000708 	.word	0x20000708
 80021b8:	200008d0 	.word	0x200008d0
 80021bc:	200008dc 	.word	0x200008dc

080021c0 <motor_encoder_read_position>:

void motor_encoder_read_position(void){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
	uint8_t xor_cheksum=0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0;i<8;i++){
 80021ca:	2300      	movs	r3, #0
 80021cc:	73bb      	strb	r3, [r7, #14]
 80021ce:	e008      	b.n	80021e2 <motor_encoder_read_position+0x22>
		xor_cheksum^=UART2_RX_raw[i];
 80021d0:	7bbb      	ldrb	r3, [r7, #14]
 80021d2:	4a6b      	ldr	r2, [pc, #428]	; (8002380 <motor_encoder_read_position+0x1c0>)
 80021d4:	5cd2      	ldrb	r2, [r2, r3]
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	4053      	eors	r3, r2
 80021da:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0;i<8;i++){
 80021dc:	7bbb      	ldrb	r3, [r7, #14]
 80021de:	3301      	adds	r3, #1
 80021e0:	73bb      	strb	r3, [r7, #14]
 80021e2:	7bbb      	ldrb	r3, [r7, #14]
 80021e4:	2b07      	cmp	r3, #7
 80021e6:	d9f3      	bls.n	80021d0 <motor_encoder_read_position+0x10>
	}
	if(xor_cheksum!=UART2_RX_raw[8]){
 80021e8:	4b65      	ldr	r3, [pc, #404]	; (8002380 <motor_encoder_read_position+0x1c0>)
 80021ea:	7a1b      	ldrb	r3, [r3, #8]
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d019      	beq.n	8002226 <motor_encoder_read_position+0x66>
		ssi_encoder_data.checksum_error_count++;
 80021f2:	4b64      	ldr	r3, [pc, #400]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80021f4:	7c1b      	ldrb	r3, [r3, #16]
 80021f6:	3301      	adds	r3, #1
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4b62      	ldr	r3, [pc, #392]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80021fc:	741a      	strb	r2, [r3, #16]
		if(ssi_encoder_data.checksum_error_count>3 && ssi_encoder_data.encoder_state!=encoder_error_no_communication){ssi_encoder_data.encoder_state=encoder_error_cheksum;}
 80021fe:	4b61      	ldr	r3, [pc, #388]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002200:	7c1b      	ldrb	r3, [r3, #16]
 8002202:	2b03      	cmp	r3, #3
 8002204:	d906      	bls.n	8002214 <motor_encoder_read_position+0x54>
 8002206:	4b5f      	ldr	r3, [pc, #380]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d002      	beq.n	8002214 <motor_encoder_read_position+0x54>
 800220e:	4b5d      	ldr	r3, [pc, #372]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
		if(ssi_encoder_data.checksum_error_count>100){ssi_encoder_data.encoder_state=encoder_error_no_communication;}
 8002214:	4b5b      	ldr	r3, [pc, #364]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002216:	7c1b      	ldrb	r3, [r3, #16]
 8002218:	2b64      	cmp	r3, #100	; 0x64
 800221a:	f240 808f 	bls.w	800233c <motor_encoder_read_position+0x17c>
 800221e:	4b59      	ldr	r3, [pc, #356]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002220:	2203      	movs	r2, #3
 8002222:	701a      	strb	r2, [r3, #0]
 8002224:	e08a      	b.n	800233c <motor_encoder_read_position+0x17c>
	}
	else{ //calculate position and speed from received earlier data
		if(ssi_encoder_data.encoder_resolution==p131072ppr){
 8002226:	4b57      	ldr	r3, [pc, #348]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002228:	7f1b      	ldrb	r3, [r3, #28]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d143      	bne.n	80022b6 <motor_encoder_read_position+0xf6>
			ssi_encoder_data.last_encoder_position=ssi_encoder_data.encoder_position;
 800222e:	4b55      	ldr	r3, [pc, #340]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4a54      	ldr	r2, [pc, #336]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002234:	6093      	str	r3, [r2, #8]
			if(UART2_RX_raw[0]==0xA2){ssi_encoder_data.encoder_position=UART2_RX_raw[2]>>3 | UART2_RX_raw[3]<<5 | UART2_RX_raw[4]<<13;}
 8002236:	4b52      	ldr	r3, [pc, #328]	; (8002380 <motor_encoder_read_position+0x1c0>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2ba2      	cmp	r3, #162	; 0xa2
 800223c:	d10f      	bne.n	800225e <motor_encoder_read_position+0x9e>
 800223e:	4b50      	ldr	r3, [pc, #320]	; (8002380 <motor_encoder_read_position+0x1c0>)
 8002240:	789b      	ldrb	r3, [r3, #2]
 8002242:	08db      	lsrs	r3, r3, #3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	461a      	mov	r2, r3
 8002248:	4b4d      	ldr	r3, [pc, #308]	; (8002380 <motor_encoder_read_position+0x1c0>)
 800224a:	78db      	ldrb	r3, [r3, #3]
 800224c:	015b      	lsls	r3, r3, #5
 800224e:	431a      	orrs	r2, r3
 8002250:	4b4b      	ldr	r3, [pc, #300]	; (8002380 <motor_encoder_read_position+0x1c0>)
 8002252:	791b      	ldrb	r3, [r3, #4]
 8002254:	035b      	lsls	r3, r3, #13
 8002256:	4313      	orrs	r3, r2
 8002258:	461a      	mov	r2, r3
 800225a:	4b4a      	ldr	r3, [pc, #296]	; (8002384 <motor_encoder_read_position+0x1c4>)
 800225c:	605a      	str	r2, [r3, #4]
			if(ssi_encoder_data.encoder_position>131073){ssi_encoder_data.encoder_position=ssi_encoder_data.last_encoder_position;}//error handling
 800225e:	4b49      	ldr	r3, [pc, #292]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f1b3 1f02 	cmp.w	r3, #131074	; 0x20002
 8002266:	d303      	bcc.n	8002270 <motor_encoder_read_position+0xb0>
 8002268:	4b46      	ldr	r3, [pc, #280]	; (8002384 <motor_encoder_read_position+0x1c4>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	4a45      	ldr	r2, [pc, #276]	; (8002384 <motor_encoder_read_position+0x1c4>)
 800226e:	6053      	str	r3, [r2, #4]
			int32_t speed = ssi_encoder_data.last_encoder_position-ssi_encoder_data.encoder_position;
 8002270:	4b44      	ldr	r3, [pc, #272]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	4b43      	ldr	r3, [pc, #268]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	60bb      	str	r3, [r7, #8]
			if(((speed>2000) && (speed<129000))||
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002282:	dd03      	ble.n	800228c <motor_encoder_read_position+0xcc>
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4a40      	ldr	r2, [pc, #256]	; (8002388 <motor_encoder_read_position+0x1c8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	dd07      	ble.n	800229c <motor_encoder_read_position+0xdc>
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8002292:	da10      	bge.n	80022b6 <motor_encoder_read_position+0xf6>
					((speed<(-2000)) && (speed>(-129000)))){
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4a3d      	ldr	r2, [pc, #244]	; (800238c <motor_encoder_read_position+0x1cc>)
 8002298:	4293      	cmp	r3, r2
 800229a:	db0c      	blt.n	80022b6 <motor_encoder_read_position+0xf6>
				ssi_encoder_data.excessive_acceleration_error_count++;
 800229c:	4b39      	ldr	r3, [pc, #228]	; (8002384 <motor_encoder_read_position+0x1c4>)
 800229e:	7c5b      	ldrb	r3, [r3, #17]
 80022a0:	3301      	adds	r3, #1
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	4b37      	ldr	r3, [pc, #220]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022a6:	745a      	strb	r2, [r3, #17]
				if(ssi_encoder_data.excessive_acceleration_error_count>2){ssi_encoder_data.encoder_state=encoder_error_acceleration;}
 80022a8:	4b36      	ldr	r3, [pc, #216]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022aa:	7c5b      	ldrb	r3, [r3, #17]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d902      	bls.n	80022b6 <motor_encoder_read_position+0xf6>
 80022b0:	4b34      	ldr	r3, [pc, #208]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022b2:	2202      	movs	r2, #2
 80022b4:	701a      	strb	r2, [r3, #0]
			}
		}
		if(ssi_encoder_data.encoder_resolution==p8192ppr){
 80022b6:	4b33      	ldr	r3, [pc, #204]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022b8:	7f1b      	ldrb	r3, [r3, #28]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d13e      	bne.n	800233c <motor_encoder_read_position+0x17c>
			ssi_encoder_data.last_encoder_position=ssi_encoder_data.encoder_position;
 80022be:	4b31      	ldr	r3, [pc, #196]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4a30      	ldr	r2, [pc, #192]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022c4:	6093      	str	r3, [r2, #8]
			if(UART2_RX_raw[0]==0x1A){ssi_encoder_data.encoder_position=UART2_RX_raw[2] | UART2_RX_raw[3]<<8;}
 80022c6:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <motor_encoder_read_position+0x1c0>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b1a      	cmp	r3, #26
 80022cc:	d109      	bne.n	80022e2 <motor_encoder_read_position+0x122>
 80022ce:	4b2c      	ldr	r3, [pc, #176]	; (8002380 <motor_encoder_read_position+0x1c0>)
 80022d0:	789b      	ldrb	r3, [r3, #2]
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <motor_encoder_read_position+0x1c0>)
 80022d6:	78db      	ldrb	r3, [r3, #3]
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	4313      	orrs	r3, r2
 80022dc:	461a      	mov	r2, r3
 80022de:	4b29      	ldr	r3, [pc, #164]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022e0:	605a      	str	r2, [r3, #4]
			if(ssi_encoder_data.encoder_position>8193){ssi_encoder_data.encoder_position=ssi_encoder_data.last_encoder_position;}//error handling
 80022e2:	4b28      	ldr	r3, [pc, #160]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f242 0201 	movw	r2, #8193	; 0x2001
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d903      	bls.n	80022f6 <motor_encoder_read_position+0x136>
 80022ee:	4b25      	ldr	r3, [pc, #148]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	4a24      	ldr	r2, [pc, #144]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022f4:	6053      	str	r3, [r2, #4]
			int32_t speed = ssi_encoder_data.last_encoder_position-ssi_encoder_data.encoder_position;
 80022f6:	4b23      	ldr	r3, [pc, #140]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	4b22      	ldr	r3, [pc, #136]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	607b      	str	r3, [r7, #4]
			if(((speed>50) && (speed<8100))||
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b32      	cmp	r3, #50	; 0x32
 8002306:	dd04      	ble.n	8002312 <motor_encoder_read_position+0x152>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f641 72a3 	movw	r2, #8099	; 0x1fa3
 800230e:	4293      	cmp	r3, r2
 8002310:	dd07      	ble.n	8002322 <motor_encoder_read_position+0x162>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8002318:	da10      	bge.n	800233c <motor_encoder_read_position+0x17c>
					((speed<(-50)) && (speed>(-8100)))){
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a1c      	ldr	r2, [pc, #112]	; (8002390 <motor_encoder_read_position+0x1d0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	db0c      	blt.n	800233c <motor_encoder_read_position+0x17c>
				ssi_encoder_data.excessive_acceleration_error_count++;
 8002322:	4b18      	ldr	r3, [pc, #96]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002324:	7c5b      	ldrb	r3, [r3, #17]
 8002326:	3301      	adds	r3, #1
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4b16      	ldr	r3, [pc, #88]	; (8002384 <motor_encoder_read_position+0x1c4>)
 800232c:	745a      	strb	r2, [r3, #17]
				if(ssi_encoder_data.excessive_acceleration_error_count>2){ssi_encoder_data.encoder_state=encoder_error_acceleration;}
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002330:	7c5b      	ldrb	r3, [r3, #17]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d902      	bls.n	800233c <motor_encoder_read_position+0x17c>
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002338:	2202      	movs	r2, #2
 800233a:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	//set command to send to encoder depending on its type
	if(ssi_encoder_data.encoder_resolution==p8192ppr){ssi_encoder_data.encoder_command=0x1A;}//j2s series also gives position after this command but resolution is limited to 16-bit
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <motor_encoder_read_position+0x1c4>)
 800233e:	7f1b      	ldrb	r3, [r3, #28]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d103      	bne.n	800234c <motor_encoder_read_position+0x18c>
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002346:	221a      	movs	r2, #26
 8002348:	76da      	strb	r2, [r3, #27]
 800234a:	e002      	b.n	8002352 <motor_encoder_read_position+0x192>
	else {ssi_encoder_data.encoder_command=0xA2;}
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <motor_encoder_read_position+0x1c4>)
 800234e:	22a2      	movs	r2, #162	; 0xa2
 8002350:	76da      	strb	r2, [r3, #27]
	HAL_StatusTypeDef err_code = HAL_UART_Transmit_DMA(&huart2, &ssi_encoder_data.encoder_command, 1);
 8002352:	2201      	movs	r2, #1
 8002354:	490f      	ldr	r1, [pc, #60]	; (8002394 <motor_encoder_read_position+0x1d4>)
 8002356:	4810      	ldr	r0, [pc, #64]	; (8002398 <motor_encoder_read_position+0x1d8>)
 8002358:	f005 fd40 	bl	8007ddc <HAL_UART_Transmit_DMA>
 800235c:	4603      	mov	r3, r0
 800235e:	70fb      	strb	r3, [r7, #3]
	if(err_code!=HAL_OK){
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <motor_encoder_read_position+0x1ac>
		ssi_encoder_data.encoder_state=encoder_error_uart_busy;
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002368:	2204      	movs	r2, #4
 800236a:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_DMA(&huart2, UART2_RX_raw, 9);//start listening for response, it will be automatically copied by DMA after reception
 800236c:	2209      	movs	r2, #9
 800236e:	4904      	ldr	r1, [pc, #16]	; (8002380 <motor_encoder_read_position+0x1c0>)
 8002370:	4809      	ldr	r0, [pc, #36]	; (8002398 <motor_encoder_read_position+0x1d8>)
 8002372:	f005 fdb1 	bl	8007ed8 <HAL_UART_Receive_DMA>
}
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	200008d0 	.word	0x200008d0
 8002384:	200008dc 	.word	0x200008dc
 8002388:	0001f7e7 	.word	0x0001f7e7
 800238c:	fffe0819 	.word	0xfffe0819
 8002390:	ffffe05d 	.word	0xffffe05d
 8002394:	200008f7 	.word	0x200008f7
 8002398:	20000708 	.word	0x20000708

0800239c <PI_control>:
 *  Created on: Apr 9, 2022
 *      Author: Wiktor
 */
#include "pid.h"

float PI_control(PID_t  *pid_data, float error){
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	ed87 0a00 	vstr	s0, [r7]
	float proportional = pid_data->proportional_gain * error;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	ed97 7a00 	vldr	s14, [r7]
 80023b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b6:	edc7 7a03 	vstr	s15, [r7, #12]
	float integral = pid_data->last_integral + (pid_data->integral_gain*pid_data->sampling_time*0.5f*(error+pid_data->last_error));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	ed93 7a06 	vldr	s14, [r3, #24]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	edd3 6a01 	vldr	s13, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80023cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80023d4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	ed93 6a07 	vldr	s12, [r3, #28]
 80023de:	edd7 7a00 	vldr	s15, [r7]
 80023e2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80023e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ee:	edc7 7a05 	vstr	s15, [r7, #20]
	//antiwindup
	if(integral>pid_data->antiwindup_limit){integral=pid_data->antiwindup_limit;}
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80023f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80023fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002404:	dd02      	ble.n	800240c <PI_control+0x70>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	617b      	str	r3, [r7, #20]
	if(integral<(pid_data->antiwindup_limit*-1)){integral=(pid_data->antiwindup_limit)*(-1.0f);}
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002412:	eef1 7a67 	vneg.f32	s15, s15
 8002416:	ed97 7a05 	vldr	s14, [r7, #20]
 800241a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800241e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002422:	d506      	bpl.n	8002432 <PI_control+0x96>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	edd3 7a02 	vldr	s15, [r3, #8]
 800242a:	eef1 7a67 	vneg.f32	s15, s15
 800242e:	edc7 7a05 	vstr	s15, [r7, #20]

	float output = proportional+integral;
 8002432:	ed97 7a03 	vldr	s14, [r7, #12]
 8002436:	edd7 7a05 	vldr	s15, [r7, #20]
 800243a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800243e:	edc7 7a04 	vstr	s15, [r7, #16]
	if(output>pid_data->output_limit){output=pid_data->output_limit;}
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	edd3 7a03 	vldr	s15, [r3, #12]
 8002448:	ed97 7a04 	vldr	s14, [r7, #16]
 800244c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002454:	dd02      	ble.n	800245c <PI_control+0xc0>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	613b      	str	r3, [r7, #16]
	if(output<((pid_data->output_limit)*(-1.0f))){output=(pid_data->output_limit)*(-1.0f);}
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002462:	eef1 7a67 	vneg.f32	s15, s15
 8002466:	ed97 7a04 	vldr	s14, [r7, #16]
 800246a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800246e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002472:	d506      	bpl.n	8002482 <PI_control+0xe6>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	edd3 7a03 	vldr	s15, [r3, #12]
 800247a:	eef1 7a67 	vneg.f32	s15, s15
 800247e:	edc7 7a04 	vstr	s15, [r7, #16]

	pid_data->last_error=error;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	61da      	str	r2, [r3, #28]
	pid_data->last_integral=integral;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	619a      	str	r2, [r3, #24]
	pid_data->last_output=output;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	621a      	str	r2, [r3, #32]
	return output;
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	ee07 3a90 	vmov	s15, r3
}
 800249a:	eeb0 0a67 	vmov.f32	s0, s15
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	607b      	str	r3, [r7, #4]
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_MspInit+0x54>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	4a11      	ldr	r2, [pc, #68]	; (80024fc <HAL_MspInit+0x54>)
 80024b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024bc:	6453      	str	r3, [r2, #68]	; 0x44
 80024be:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <HAL_MspInit+0x54>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	603b      	str	r3, [r7, #0]
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_MspInit+0x54>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <HAL_MspInit+0x54>)
 80024d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d8:	6413      	str	r3, [r2, #64]	; 0x40
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <HAL_MspInit+0x54>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e2:	603b      	str	r3, [r7, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	210f      	movs	r1, #15
 80024ea:	f06f 0001 	mvn.w	r0, #1
 80024ee:	f002 fe02 	bl	80050f6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800

08002500 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	; 0x28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a2f      	ldr	r2, [pc, #188]	; (80025dc <HAL_ADC_MspInit+0xdc>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d157      	bne.n	80025d2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	4b2e      	ldr	r3, [pc, #184]	; (80025e0 <HAL_ADC_MspInit+0xe0>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	4a2d      	ldr	r2, [pc, #180]	; (80025e0 <HAL_ADC_MspInit+0xe0>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002530:	6453      	str	r3, [r2, #68]	; 0x44
 8002532:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_ADC_MspInit+0xe0>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	4b27      	ldr	r3, [pc, #156]	; (80025e0 <HAL_ADC_MspInit+0xe0>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4a26      	ldr	r2, [pc, #152]	; (80025e0 <HAL_ADC_MspInit+0xe0>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6313      	str	r3, [r2, #48]	; 0x30
 800254e:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <HAL_ADC_MspInit+0xe0>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = I_U_Pin|I_V_Pin|DC_VOLTAGE_Pin|HEATSINK_TEMP_Pin;
 800255a:	23f0      	movs	r3, #240	; 0xf0
 800255c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800255e:	2303      	movs	r3, #3
 8002560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002566:	f107 0314 	add.w	r3, r7, #20
 800256a:	4619      	mov	r1, r3
 800256c:	481d      	ldr	r0, [pc, #116]	; (80025e4 <HAL_ADC_MspInit+0xe4>)
 800256e:	f003 fa67 	bl	8005a40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002572:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 8002574:	4a1d      	ldr	r2, [pc, #116]	; (80025ec <HAL_ADC_MspInit+0xec>)
 8002576:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002578:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 800257a:	2200      	movs	r2, #0
 800257c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800257e:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002584:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 8002586:	2200      	movs	r2, #0
 8002588:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800258a:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 800258c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002590:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 8002594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002598:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800259a:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 800259c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80025a2:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80025a8:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 80025aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025b0:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025b6:	480c      	ldr	r0, [pc, #48]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 80025b8:	f002 fde2 	bl	8005180 <HAL_DMA_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80025c2:	f7ff fd6f 	bl	80020a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 80025ca:	639a      	str	r2, [r3, #56]	; 0x38
 80025cc:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025d2:	bf00      	nop
 80025d4:	3728      	adds	r7, #40	; 0x28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40012000 	.word	0x40012000
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40020000 	.word	0x40020000
 80025e8:	20000544 	.word	0x20000544
 80025ec:	40026410 	.word	0x40026410

080025f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a2a      	ldr	r2, [pc, #168]	; (80026a8 <HAL_TIM_Base_MspInit+0xb8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d116      	bne.n	8002630 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	4b29      	ldr	r3, [pc, #164]	; (80026ac <HAL_TIM_Base_MspInit+0xbc>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	4a28      	ldr	r2, [pc, #160]	; (80026ac <HAL_TIM_Base_MspInit+0xbc>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6453      	str	r3, [r2, #68]	; 0x44
 8002612:	4b26      	ldr	r3, [pc, #152]	; (80026ac <HAL_TIM_Base_MspInit+0xbc>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800261e:	2200      	movs	r2, #0
 8002620:	2105      	movs	r1, #5
 8002622:	2019      	movs	r0, #25
 8002624:	f002 fd67 	bl	80050f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002628:	2019      	movs	r0, #25
 800262a:	f002 fd80 	bl	800512e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800262e:	e036      	b.n	800269e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a1e      	ldr	r2, [pc, #120]	; (80026b0 <HAL_TIM_Base_MspInit+0xc0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d116      	bne.n	8002668 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <HAL_TIM_Base_MspInit+0xbc>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	4a1a      	ldr	r2, [pc, #104]	; (80026ac <HAL_TIM_Base_MspInit+0xbc>)
 8002644:	f043 0302 	orr.w	r3, r3, #2
 8002648:	6413      	str	r3, [r2, #64]	; 0x40
 800264a:	4b18      	ldr	r3, [pc, #96]	; (80026ac <HAL_TIM_Base_MspInit+0xbc>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	2105      	movs	r1, #5
 800265a:	201d      	movs	r0, #29
 800265c:	f002 fd4b 	bl	80050f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002660:	201d      	movs	r0, #29
 8002662:	f002 fd64 	bl	800512e <HAL_NVIC_EnableIRQ>
}
 8002666:	e01a      	b.n	800269e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a11      	ldr	r2, [pc, #68]	; (80026b4 <HAL_TIM_Base_MspInit+0xc4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d115      	bne.n	800269e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <HAL_TIM_Base_MspInit+0xbc>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a0c      	ldr	r2, [pc, #48]	; (80026ac <HAL_TIM_Base_MspInit+0xbc>)
 800267c:	f043 0304 	orr.w	r3, r3, #4
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
 8002682:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <HAL_TIM_Base_MspInit+0xbc>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800268e:	2200      	movs	r2, #0
 8002690:	2105      	movs	r1, #5
 8002692:	201e      	movs	r0, #30
 8002694:	f002 fd2f 	bl	80050f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002698:	201e      	movs	r0, #30
 800269a:	f002 fd48 	bl	800512e <HAL_NVIC_EnableIRQ>
}
 800269e:	bf00      	nop
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40010000 	.word	0x40010000
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40000400 	.word	0x40000400
 80026b4:	40000800 	.word	0x40000800

080026b8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	; 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d8:	d12b      	bne.n	8002732 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	4b17      	ldr	r3, [pc, #92]	; (800273c <HAL_TIM_Encoder_MspInit+0x84>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	4a16      	ldr	r2, [pc, #88]	; (800273c <HAL_TIM_Encoder_MspInit+0x84>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ea:	4b14      	ldr	r3, [pc, #80]	; (800273c <HAL_TIM_Encoder_MspInit+0x84>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_TIM_Encoder_MspInit+0x84>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a0f      	ldr	r2, [pc, #60]	; (800273c <HAL_TIM_Encoder_MspInit+0x84>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b0d      	ldr	r3, [pc, #52]	; (800273c <HAL_TIM_Encoder_MspInit+0x84>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 8002712:	2303      	movs	r3, #3
 8002714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	2300      	movs	r3, #0
 8002720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002722:	2301      	movs	r3, #1
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002726:	f107 0314 	add.w	r3, r7, #20
 800272a:	4619      	mov	r1, r3
 800272c:	4804      	ldr	r0, [pc, #16]	; (8002740 <HAL_TIM_Encoder_MspInit+0x88>)
 800272e:	f003 f987 	bl	8005a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002732:	bf00      	nop
 8002734:	3728      	adds	r7, #40	; 0x28
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	40020000 	.word	0x40020000

08002744 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a12      	ldr	r2, [pc, #72]	; (80027ac <HAL_TIM_MspPostInit+0x68>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d11e      	bne.n	80027a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <HAL_TIM_MspPostInit+0x6c>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a10      	ldr	r2, [pc, #64]	; (80027b0 <HAL_TIM_MspPostInit+0x6c>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <HAL_TIM_MspPostInit+0x6c>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_Pin|V_PWM_Pin|W_PWM_Pin;
 8002782:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002786:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002788:	2302      	movs	r3, #2
 800278a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002790:	2300      	movs	r3, #0
 8002792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002794:	2301      	movs	r3, #1
 8002796:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002798:	f107 030c 	add.w	r3, r7, #12
 800279c:	4619      	mov	r1, r3
 800279e:	4805      	ldr	r0, [pc, #20]	; (80027b4 <HAL_TIM_MspPostInit+0x70>)
 80027a0:	f003 f94e 	bl	8005a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80027a4:	bf00      	nop
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40010000 	.word	0x40010000
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40020000 	.word	0x40020000

080027b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08c      	sub	sp, #48	; 0x30
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	f107 031c 	add.w	r3, r7, #28
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a97      	ldr	r2, [pc, #604]	; (8002a34 <HAL_UART_MspInit+0x27c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	f040 8092 	bne.w	8002900 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027dc:	2300      	movs	r3, #0
 80027de:	61bb      	str	r3, [r7, #24]
 80027e0:	4b95      	ldr	r3, [pc, #596]	; (8002a38 <HAL_UART_MspInit+0x280>)
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	4a94      	ldr	r2, [pc, #592]	; (8002a38 <HAL_UART_MspInit+0x280>)
 80027e6:	f043 0310 	orr.w	r3, r3, #16
 80027ea:	6453      	str	r3, [r2, #68]	; 0x44
 80027ec:	4b92      	ldr	r3, [pc, #584]	; (8002a38 <HAL_UART_MspInit+0x280>)
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	4b8e      	ldr	r3, [pc, #568]	; (8002a38 <HAL_UART_MspInit+0x280>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	4a8d      	ldr	r2, [pc, #564]	; (8002a38 <HAL_UART_MspInit+0x280>)
 8002802:	f043 0302 	orr.w	r3, r3, #2
 8002806:	6313      	str	r3, [r2, #48]	; 0x30
 8002808:	4b8b      	ldr	r3, [pc, #556]	; (8002a38 <HAL_UART_MspInit+0x280>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MODBUS_TX_Pin|MODBUS_RX_Pin;
 8002814:	23c0      	movs	r3, #192	; 0xc0
 8002816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002818:	2302      	movs	r3, #2
 800281a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002820:	2303      	movs	r3, #3
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002824:	2307      	movs	r3, #7
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002828:	f107 031c 	add.w	r3, r7, #28
 800282c:	4619      	mov	r1, r3
 800282e:	4883      	ldr	r0, [pc, #524]	; (8002a3c <HAL_UART_MspInit+0x284>)
 8002830:	f003 f906 	bl	8005a40 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002834:	4b82      	ldr	r3, [pc, #520]	; (8002a40 <HAL_UART_MspInit+0x288>)
 8002836:	4a83      	ldr	r2, [pc, #524]	; (8002a44 <HAL_UART_MspInit+0x28c>)
 8002838:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800283a:	4b81      	ldr	r3, [pc, #516]	; (8002a40 <HAL_UART_MspInit+0x288>)
 800283c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002840:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002842:	4b7f      	ldr	r3, [pc, #508]	; (8002a40 <HAL_UART_MspInit+0x288>)
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002848:	4b7d      	ldr	r3, [pc, #500]	; (8002a40 <HAL_UART_MspInit+0x288>)
 800284a:	2200      	movs	r2, #0
 800284c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800284e:	4b7c      	ldr	r3, [pc, #496]	; (8002a40 <HAL_UART_MspInit+0x288>)
 8002850:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002854:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002856:	4b7a      	ldr	r3, [pc, #488]	; (8002a40 <HAL_UART_MspInit+0x288>)
 8002858:	2200      	movs	r2, #0
 800285a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800285c:	4b78      	ldr	r3, [pc, #480]	; (8002a40 <HAL_UART_MspInit+0x288>)
 800285e:	2200      	movs	r2, #0
 8002860:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002862:	4b77      	ldr	r3, [pc, #476]	; (8002a40 <HAL_UART_MspInit+0x288>)
 8002864:	2200      	movs	r2, #0
 8002866:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002868:	4b75      	ldr	r3, [pc, #468]	; (8002a40 <HAL_UART_MspInit+0x288>)
 800286a:	2200      	movs	r2, #0
 800286c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800286e:	4b74      	ldr	r3, [pc, #464]	; (8002a40 <HAL_UART_MspInit+0x288>)
 8002870:	2200      	movs	r2, #0
 8002872:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002874:	4872      	ldr	r0, [pc, #456]	; (8002a40 <HAL_UART_MspInit+0x288>)
 8002876:	f002 fc83 	bl	8005180 <HAL_DMA_Init>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002880:	f7ff fc10 	bl	80020a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a6e      	ldr	r2, [pc, #440]	; (8002a40 <HAL_UART_MspInit+0x288>)
 8002888:	639a      	str	r2, [r3, #56]	; 0x38
 800288a:	4a6d      	ldr	r2, [pc, #436]	; (8002a40 <HAL_UART_MspInit+0x288>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002890:	4b6d      	ldr	r3, [pc, #436]	; (8002a48 <HAL_UART_MspInit+0x290>)
 8002892:	4a6e      	ldr	r2, [pc, #440]	; (8002a4c <HAL_UART_MspInit+0x294>)
 8002894:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002896:	4b6c      	ldr	r3, [pc, #432]	; (8002a48 <HAL_UART_MspInit+0x290>)
 8002898:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800289c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800289e:	4b6a      	ldr	r3, [pc, #424]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028a0:	2240      	movs	r2, #64	; 0x40
 80028a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028a4:	4b68      	ldr	r3, [pc, #416]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028aa:	4b67      	ldr	r3, [pc, #412]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028b0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028b2:	4b65      	ldr	r3, [pc, #404]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028b8:	4b63      	ldr	r3, [pc, #396]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80028be:	4b62      	ldr	r3, [pc, #392]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80028c4:	4b60      	ldr	r3, [pc, #384]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028ca:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028cc:	4b5e      	ldr	r3, [pc, #376]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80028d2:	485d      	ldr	r0, [pc, #372]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028d4:	f002 fc54 	bl	8005180 <HAL_DMA_Init>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80028de:	f7ff fbe1 	bl	80020a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a58      	ldr	r2, [pc, #352]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028e6:	635a      	str	r2, [r3, #52]	; 0x34
 80028e8:	4a57      	ldr	r2, [pc, #348]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80028ee:	2200      	movs	r2, #0
 80028f0:	2105      	movs	r1, #5
 80028f2:	2025      	movs	r0, #37	; 0x25
 80028f4:	f002 fbff 	bl	80050f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028f8:	2025      	movs	r0, #37	; 0x25
 80028fa:	f002 fc18 	bl	800512e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028fe:	e095      	b.n	8002a2c <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a52      	ldr	r2, [pc, #328]	; (8002a50 <HAL_UART_MspInit+0x298>)
 8002906:	4293      	cmp	r3, r2
 8002908:	f040 8090 	bne.w	8002a2c <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 800290c:	2300      	movs	r3, #0
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	4b49      	ldr	r3, [pc, #292]	; (8002a38 <HAL_UART_MspInit+0x280>)
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	4a48      	ldr	r2, [pc, #288]	; (8002a38 <HAL_UART_MspInit+0x280>)
 8002916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291a:	6413      	str	r3, [r2, #64]	; 0x40
 800291c:	4b46      	ldr	r3, [pc, #280]	; (8002a38 <HAL_UART_MspInit+0x280>)
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	4b42      	ldr	r3, [pc, #264]	; (8002a38 <HAL_UART_MspInit+0x280>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	4a41      	ldr	r2, [pc, #260]	; (8002a38 <HAL_UART_MspInit+0x280>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6313      	str	r3, [r2, #48]	; 0x30
 8002938:	4b3f      	ldr	r3, [pc, #252]	; (8002a38 <HAL_UART_MspInit+0x280>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SSI_TX_Pin|SSI_RX_Pin;
 8002944:	230c      	movs	r3, #12
 8002946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002950:	2303      	movs	r3, #3
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002954:	2307      	movs	r3, #7
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002958:	f107 031c 	add.w	r3, r7, #28
 800295c:	4619      	mov	r1, r3
 800295e:	483d      	ldr	r0, [pc, #244]	; (8002a54 <HAL_UART_MspInit+0x29c>)
 8002960:	f003 f86e 	bl	8005a40 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002964:	4b3c      	ldr	r3, [pc, #240]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 8002966:	4a3d      	ldr	r2, [pc, #244]	; (8002a5c <HAL_UART_MspInit+0x2a4>)
 8002968:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800296a:	4b3b      	ldr	r3, [pc, #236]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 800296c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002970:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002972:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002978:	4b37      	ldr	r3, [pc, #220]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 800297a:	2200      	movs	r2, #0
 800297c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800297e:	4b36      	ldr	r3, [pc, #216]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 8002980:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002984:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002986:	4b34      	ldr	r3, [pc, #208]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 8002988:	2200      	movs	r2, #0
 800298a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800298c:	4b32      	ldr	r3, [pc, #200]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 800298e:	2200      	movs	r2, #0
 8002990:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002992:	4b31      	ldr	r3, [pc, #196]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 8002994:	2200      	movs	r2, #0
 8002996:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002998:	4b2f      	ldr	r3, [pc, #188]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 800299a:	2200      	movs	r2, #0
 800299c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800299e:	4b2e      	ldr	r3, [pc, #184]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80029a4:	482c      	ldr	r0, [pc, #176]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 80029a6:	f002 fbeb 	bl	8005180 <HAL_DMA_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80029b0:	f7ff fb78 	bl	80020a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a28      	ldr	r2, [pc, #160]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 80029b8:	639a      	str	r2, [r3, #56]	; 0x38
 80029ba:	4a27      	ldr	r2, [pc, #156]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80029c0:	4b27      	ldr	r3, [pc, #156]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 80029c2:	4a28      	ldr	r2, [pc, #160]	; (8002a64 <HAL_UART_MspInit+0x2ac>)
 80029c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80029c6:	4b26      	ldr	r3, [pc, #152]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 80029c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029cc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029ce:	4b24      	ldr	r3, [pc, #144]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 80029d0:	2240      	movs	r2, #64	; 0x40
 80029d2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d4:	4b22      	ldr	r3, [pc, #136]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029da:	4b21      	ldr	r3, [pc, #132]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 80029dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029e2:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029e8:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80029ee:	4b1c      	ldr	r3, [pc, #112]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029f4:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029fa:	4b19      	ldr	r3, [pc, #100]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002a00:	4817      	ldr	r0, [pc, #92]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 8002a02:	f002 fbbd 	bl	8005180 <HAL_DMA_Init>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8002a0c:	f7ff fb4a 	bl	80020a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 8002a14:	635a      	str	r2, [r3, #52]	; 0x34
 8002a16:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2105      	movs	r1, #5
 8002a20:	2026      	movs	r0, #38	; 0x26
 8002a22:	f002 fb68 	bl	80050f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a26:	2026      	movs	r0, #38	; 0x26
 8002a28:	f002 fb81 	bl	800512e <HAL_NVIC_EnableIRQ>
}
 8002a2c:	bf00      	nop
 8002a2e:	3730      	adds	r7, #48	; 0x30
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40011000 	.word	0x40011000
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40020400 	.word	0x40020400
 8002a40:	2000074c 	.word	0x2000074c
 8002a44:	40026440 	.word	0x40026440
 8002a48:	200007ac 	.word	0x200007ac
 8002a4c:	400264b8 	.word	0x400264b8
 8002a50:	40004400 	.word	0x40004400
 8002a54:	40020000 	.word	0x40020000
 8002a58:	2000080c 	.word	0x2000080c
 8002a5c:	40026088 	.word	0x40026088
 8002a60:	2000086c 	.word	0x2000086c
 8002a64:	400260a0 	.word	0x400260a0

08002a68 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1d      	ldr	r2, [pc, #116]	; (8002aec <HAL_UART_MspDeInit+0x84>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d117      	bne.n	8002aaa <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <HAL_UART_MspDeInit+0x88>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <HAL_UART_MspDeInit+0x88>)
 8002a80:	f023 0310 	bic.w	r3, r3, #16
 8002a84:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, MODBUS_TX_Pin|MODBUS_RX_Pin);
 8002a86:	21c0      	movs	r1, #192	; 0xc0
 8002a88:	481a      	ldr	r0, [pc, #104]	; (8002af4 <HAL_UART_MspDeInit+0x8c>)
 8002a8a:	f003 f95d 	bl	8005d48 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a92:	4618      	mov	r0, r3
 8002a94:	f002 fc22 	bl	80052dc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f002 fc1d 	bl	80052dc <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002aa2:	2025      	movs	r0, #37	; 0x25
 8002aa4:	f002 fb51 	bl	800514a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002aa8:	e01b      	b.n	8002ae2 <HAL_UART_MspDeInit+0x7a>
  else if(huart->Instance==USART2)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a12      	ldr	r2, [pc, #72]	; (8002af8 <HAL_UART_MspDeInit+0x90>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d116      	bne.n	8002ae2 <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <HAL_UART_MspDeInit+0x88>)
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <HAL_UART_MspDeInit+0x88>)
 8002aba:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002abe:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, SSI_TX_Pin|SSI_RX_Pin);
 8002ac0:	210c      	movs	r1, #12
 8002ac2:	480e      	ldr	r0, [pc, #56]	; (8002afc <HAL_UART_MspDeInit+0x94>)
 8002ac4:	f003 f940 	bl	8005d48 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002acc:	4618      	mov	r0, r3
 8002ace:	f002 fc05 	bl	80052dc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f002 fc00 	bl	80052dc <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002adc:	2026      	movs	r0, #38	; 0x26
 8002ade:	f002 fb34 	bl	800514a <HAL_NVIC_DisableIRQ>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40011000 	.word	0x40011000
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40020400 	.word	0x40020400
 8002af8:	40004400 	.word	0x40004400
 8002afc:	40020000 	.word	0x40020000

08002b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b04:	e7fe      	b.n	8002b04 <NMI_Handler+0x4>

08002b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b0a:	e7fe      	b.n	8002b0a <HardFault_Handler+0x4>

08002b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <MemManage_Handler+0x4>

08002b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b16:	e7fe      	b.n	8002b16 <BusFault_Handler+0x4>

08002b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <UsageFault_Handler+0x4>

08002b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b30:	f001 fdd0 	bl	80046d4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002b34:	f008 f8f0 	bl	800ad18 <xTaskGetSchedulerState>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d001      	beq.n	8002b42 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002b3e:	f008 fedb 	bl	800b8f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b4c:	4802      	ldr	r0, [pc, #8]	; (8002b58 <DMA1_Stream5_IRQHandler+0x10>)
 8002b4e:	f002 fd0d 	bl	800556c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	2000080c 	.word	0x2000080c

08002b5c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002b60:	4802      	ldr	r0, [pc, #8]	; (8002b6c <DMA1_Stream6_IRQHandler+0x10>)
 8002b62:	f002 fd03 	bl	800556c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	2000086c 	.word	0x2000086c

08002b70 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b74:	4802      	ldr	r0, [pc, #8]	; (8002b80 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002b76:	f004 f9bf 	bl	8006ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	200005a4 	.word	0x200005a4

08002b84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_ADC_Start_DMA(&hadc1, ADC_rawdata, 4);
 8002b88:	2204      	movs	r2, #4
 8002b8a:	4908      	ldr	r1, [pc, #32]	; (8002bac <TIM3_IRQHandler+0x28>)
 8002b8c:	4808      	ldr	r0, [pc, #32]	; (8002bb0 <TIM3_IRQHandler+0x2c>)
 8002b8e:	f001 fe05 	bl	800479c <HAL_ADC_Start_DMA>
	motor_encoder_read_position();
 8002b92:	f7ff fb15 	bl	80021c0 <motor_encoder_read_position>
	HAL_GPIO_WritePin(DISP_LATCH_GPIO_Port, DISP_LATCH_Pin, 1);
 8002b96:	2201      	movs	r2, #1
 8002b98:	2104      	movs	r1, #4
 8002b9a:	4806      	ldr	r0, [pc, #24]	; (8002bb4 <TIM3_IRQHandler+0x30>)
 8002b9c:	f003 f9b8 	bl	8005f10 <HAL_GPIO_WritePin>

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ba0:	4805      	ldr	r0, [pc, #20]	; (8002bb8 <TIM3_IRQHandler+0x34>)
 8002ba2:	f004 f9a9 	bl	8006ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000900 	.word	0x20000900
 8002bb0:	200004fc 	.word	0x200004fc
 8002bb4:	40020400 	.word	0x40020400
 8002bb8:	20000634 	.word	0x20000634

08002bbc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
if(speed_setpoint_rpm!=0){
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <TIM4_IRQHandler+0x44>)
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	b21b      	sxth	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d015      	beq.n	8002bf6 <TIM4_IRQHandler+0x3a>
	torque_setpoint = PI_control(&speed_controller_data, speed_setpoint_rpm-filtered_speed);
 8002bca:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <TIM4_IRQHandler+0x44>)
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	b21b      	sxth	r3, r3
 8002bd0:	ee07 3a90 	vmov	s15, r3
 8002bd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <TIM4_IRQHandler+0x48>)
 8002bda:	edd3 7a00 	vldr	s15, [r3]
 8002bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be2:	eeb0 0a67 	vmov.f32	s0, s15
 8002be6:	4808      	ldr	r0, [pc, #32]	; (8002c08 <TIM4_IRQHandler+0x4c>)
 8002be8:	f7ff fbd8 	bl	800239c <PI_control>
 8002bec:	eef0 7a40 	vmov.f32	s15, s0
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <TIM4_IRQHandler+0x50>)
 8002bf2:	edc3 7a00 	vstr	s15, [r3]
}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002bf6:	4806      	ldr	r0, [pc, #24]	; (8002c10 <TIM4_IRQHandler+0x54>)
 8002bf8:	f004 f97e 	bl	8006ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	20000910 	.word	0x20000910
 8002c04:	200009a8 	.word	0x200009a8
 8002c08:	20000084 	.word	0x20000084
 8002c0c:	2000092c 	.word	0x2000092c
 8002c10:	2000067c 	.word	0x2000067c

08002c14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c18:	4802      	ldr	r0, [pc, #8]	; (8002c24 <USART1_IRQHandler+0x10>)
 8002c1a:	f005 f9f3 	bl	8008004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200006c4 	.word	0x200006c4

08002c28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c2c:	4802      	ldr	r0, [pc, #8]	; (8002c38 <USART2_IRQHandler+0x10>)
 8002c2e:	f005 f9e9 	bl	8008004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000708 	.word	0x20000708

08002c3c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	HAL_GPIO_WritePin(DISP_LATCH_GPIO_Port, DISP_LATCH_Pin, 0);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2104      	movs	r1, #4
 8002c46:	485b      	ldr	r0, [pc, #364]	; (8002db4 <DMA2_Stream0_IRQHandler+0x178>)
 8002c48:	f003 f962 	bl	8005f10 <HAL_GPIO_WritePin>
	if(zerocurrent_reading_loop_i<15){
 8002c4c:	4b5a      	ldr	r3, [pc, #360]	; (8002db8 <DMA2_Stream0_IRQHandler+0x17c>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b0e      	cmp	r3, #14
 8002c52:	d82f      	bhi.n	8002cb4 <DMA2_Stream0_IRQHandler+0x78>
				I_U_zerocurrentreading+=ADC_rawdata[0];
 8002c54:	4b59      	ldr	r3, [pc, #356]	; (8002dbc <DMA2_Stream0_IRQHandler+0x180>)
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	4b59      	ldr	r3, [pc, #356]	; (8002dc0 <DMA2_Stream0_IRQHandler+0x184>)
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	4413      	add	r3, r2
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	4b57      	ldr	r3, [pc, #348]	; (8002dc0 <DMA2_Stream0_IRQHandler+0x184>)
 8002c64:	801a      	strh	r2, [r3, #0]
				I_V_zerocurrentreading+=ADC_rawdata[1];
 8002c66:	4b55      	ldr	r3, [pc, #340]	; (8002dbc <DMA2_Stream0_IRQHandler+0x180>)
 8002c68:	885b      	ldrh	r3, [r3, #2]
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	4b55      	ldr	r3, [pc, #340]	; (8002dc4 <DMA2_Stream0_IRQHandler+0x188>)
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	4413      	add	r3, r2
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	4b53      	ldr	r3, [pc, #332]	; (8002dc4 <DMA2_Stream0_IRQHandler+0x188>)
 8002c76:	801a      	strh	r2, [r3, #0]
				if(zerocurrent_reading_loop_i==14){I_U_zerocurrentreading/=15;I_V_zerocurrentreading/=15;}
 8002c78:	4b4f      	ldr	r3, [pc, #316]	; (8002db8 <DMA2_Stream0_IRQHandler+0x17c>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b0e      	cmp	r3, #14
 8002c7e:	d111      	bne.n	8002ca4 <DMA2_Stream0_IRQHandler+0x68>
 8002c80:	4b4f      	ldr	r3, [pc, #316]	; (8002dc0 <DMA2_Stream0_IRQHandler+0x184>)
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	4a50      	ldr	r2, [pc, #320]	; (8002dc8 <DMA2_Stream0_IRQHandler+0x18c>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	08db      	lsrs	r3, r3, #3
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	4b4c      	ldr	r3, [pc, #304]	; (8002dc0 <DMA2_Stream0_IRQHandler+0x184>)
 8002c90:	801a      	strh	r2, [r3, #0]
 8002c92:	4b4c      	ldr	r3, [pc, #304]	; (8002dc4 <DMA2_Stream0_IRQHandler+0x188>)
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	4a4c      	ldr	r2, [pc, #304]	; (8002dc8 <DMA2_Stream0_IRQHandler+0x18c>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	08db      	lsrs	r3, r3, #3
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	4b48      	ldr	r3, [pc, #288]	; (8002dc4 <DMA2_Stream0_IRQHandler+0x188>)
 8002ca2:	801a      	strh	r2, [r3, #0]
				zerocurrent_reading_loop_i++;
 8002ca4:	4b44      	ldr	r3, [pc, #272]	; (8002db8 <DMA2_Stream0_IRQHandler+0x17c>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	4b42      	ldr	r3, [pc, #264]	; (8002db8 <DMA2_Stream0_IRQHandler+0x17c>)
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	f000 bef1 	b.w	8003a96 <DMA2_Stream0_IRQHandler+0xe5a>
			}else{

				if(ADC_rawdata[0]<40 || ADC_rawdata[1]<40 ||ADC_rawdata[0]>4000 || ADC_rawdata[1]>4000){
 8002cb4:	4b41      	ldr	r3, [pc, #260]	; (8002dbc <DMA2_Stream0_IRQHandler+0x180>)
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b27      	cmp	r3, #39	; 0x27
 8002cbc:	d910      	bls.n	8002ce0 <DMA2_Stream0_IRQHandler+0xa4>
 8002cbe:	4b3f      	ldr	r3, [pc, #252]	; (8002dbc <DMA2_Stream0_IRQHandler+0x180>)
 8002cc0:	885b      	ldrh	r3, [r3, #2]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b27      	cmp	r3, #39	; 0x27
 8002cc6:	d90b      	bls.n	8002ce0 <DMA2_Stream0_IRQHandler+0xa4>
 8002cc8:	4b3c      	ldr	r3, [pc, #240]	; (8002dbc <DMA2_Stream0_IRQHandler+0x180>)
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002cd2:	d805      	bhi.n	8002ce0 <DMA2_Stream0_IRQHandler+0xa4>
 8002cd4:	4b39      	ldr	r3, [pc, #228]	; (8002dbc <DMA2_Stream0_IRQHandler+0x180>)
 8002cd6:	885b      	ldrh	r3, [r3, #2]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002cde:	d90d      	bls.n	8002cfc <DMA2_Stream0_IRQHandler+0xc0>
					if(measurement_error_counter==1)inverter_error_trip(shortcircuit);
 8002ce0:	4b3a      	ldr	r3, [pc, #232]	; (8002dcc <DMA2_Stream0_IRQHandler+0x190>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d102      	bne.n	8002cee <DMA2_Stream0_IRQHandler+0xb2>
 8002ce8:	2003      	movs	r0, #3
 8002cea:	f7fe fb61 	bl	80013b0 <inverter_error_trip>
					measurement_error_counter++;
 8002cee:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <DMA2_Stream0_IRQHandler+0x190>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4b35      	ldr	r3, [pc, #212]	; (8002dcc <DMA2_Stream0_IRQHandler+0x190>)
 8002cf8:	701a      	strb	r2, [r3, #0]
 8002cfa:	e002      	b.n	8002d02 <DMA2_Stream0_IRQHandler+0xc6>
				}else{measurement_error_counter=0;}
 8002cfc:	4b33      	ldr	r3, [pc, #204]	; (8002dcc <DMA2_Stream0_IRQHandler+0x190>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
				//DC link voltage
				U_DClink = (float)ADC_rawdata[2]*0.0250945f;
 8002d02:	4b2e      	ldr	r3, [pc, #184]	; (8002dbc <DMA2_Stream0_IRQHandler+0x180>)
 8002d04:	889b      	ldrh	r3, [r3, #4]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	ee07 3a90 	vmov	s15, r3
 8002d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d10:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002dd0 <DMA2_Stream0_IRQHandler+0x194>
 8002d14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d18:	4b2e      	ldr	r3, [pc, #184]	; (8002dd4 <DMA2_Stream0_IRQHandler+0x198>)
 8002d1a:	edc3 7a00 	vstr	s15, [r3]
				U_DClink_filtered = LowPassFilter(0.01f, U_DClink, &U_DClink_last);
 8002d1e:	4b2d      	ldr	r3, [pc, #180]	; (8002dd4 <DMA2_Stream0_IRQHandler+0x198>)
 8002d20:	edd3 7a00 	vldr	s15, [r3]
 8002d24:	482c      	ldr	r0, [pc, #176]	; (8002dd8 <DMA2_Stream0_IRQHandler+0x19c>)
 8002d26:	eef0 0a67 	vmov.f32	s1, s15
 8002d2a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8002ddc <DMA2_Stream0_IRQHandler+0x1a0>
 8002d2e:	f7fe fc17 	bl	8001560 <LowPassFilter>
 8002d32:	eef0 7a40 	vmov.f32	s15, s0
 8002d36:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <DMA2_Stream0_IRQHandler+0x1a4>)
 8002d38:	edc3 7a00 	vstr	s15, [r3]

				if(U_DClink_filtered>INVERTER_OVERVOLTAGE_LEVEL && OV_measurement_error_counter<2){if(OV_measurement_error_counter==1){inverter_error_trip(overvoltage);}OV_measurement_error_counter++;}else{OV_measurement_error_counter=0;}
 8002d3c:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <DMA2_Stream0_IRQHandler+0x1a4>)
 8002d3e:	edd3 7a00 	vldr	s15, [r3]
 8002d42:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002de4 <DMA2_Stream0_IRQHandler+0x1a8>
 8002d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4e:	dd11      	ble.n	8002d74 <DMA2_Stream0_IRQHandler+0x138>
 8002d50:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <DMA2_Stream0_IRQHandler+0x1ac>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d80d      	bhi.n	8002d74 <DMA2_Stream0_IRQHandler+0x138>
 8002d58:	4b23      	ldr	r3, [pc, #140]	; (8002de8 <DMA2_Stream0_IRQHandler+0x1ac>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d102      	bne.n	8002d66 <DMA2_Stream0_IRQHandler+0x12a>
 8002d60:	2002      	movs	r0, #2
 8002d62:	f7fe fb25 	bl	80013b0 <inverter_error_trip>
 8002d66:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <DMA2_Stream0_IRQHandler+0x1ac>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <DMA2_Stream0_IRQHandler+0x1ac>)
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	e002      	b.n	8002d7a <DMA2_Stream0_IRQHandler+0x13e>
 8002d74:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <DMA2_Stream0_IRQHandler+0x1ac>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	701a      	strb	r2, [r3, #0]
				if(U_DClink_filtered<INVERTER_UNDERVOLTAGE_LEVEL && UV_measurement_error_counter<2){if(UV_measurement_error_counter==1){inverter_error_trip(undervoltage);}UV_measurement_error_counter++;}else{UV_measurement_error_counter=0;} //2 measurements under a treshold must happen in a row
 8002d7a:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <DMA2_Stream0_IRQHandler+0x1a4>)
 8002d7c:	edd3 7a00 	vldr	s15, [r3]
 8002d80:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8c:	d530      	bpl.n	8002df0 <DMA2_Stream0_IRQHandler+0x1b4>
 8002d8e:	4b17      	ldr	r3, [pc, #92]	; (8002dec <DMA2_Stream0_IRQHandler+0x1b0>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d82c      	bhi.n	8002df0 <DMA2_Stream0_IRQHandler+0x1b4>
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <DMA2_Stream0_IRQHandler+0x1b0>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d102      	bne.n	8002da4 <DMA2_Stream0_IRQHandler+0x168>
 8002d9e:	2001      	movs	r0, #1
 8002da0:	f7fe fb06 	bl	80013b0 <inverter_error_trip>
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <DMA2_Stream0_IRQHandler+0x1b0>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	3301      	adds	r3, #1
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <DMA2_Stream0_IRQHandler+0x1b0>)
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	e021      	b.n	8002df6 <DMA2_Stream0_IRQHandler+0x1ba>
 8002db2:	bf00      	nop
 8002db4:	40020400 	.word	0x40020400
 8002db8:	20000930 	.word	0x20000930
 8002dbc:	20000900 	.word	0x20000900
 8002dc0:	20000932 	.word	0x20000932
 8002dc4:	20000934 	.word	0x20000934
 8002dc8:	88888889 	.word	0x88888889
 8002dcc:	20000928 	.word	0x20000928
 8002dd0:	3ccd92fb 	.word	0x3ccd92fb
 8002dd4:	2000091c 	.word	0x2000091c
 8002dd8:	20000920 	.word	0x20000920
 8002ddc:	3c23d70a 	.word	0x3c23d70a
 8002de0:	20000924 	.word	0x20000924
 8002de4:	42b40000 	.word	0x42b40000
 8002de8:	2000092b 	.word	0x2000092b
 8002dec:	2000092a 	.word	0x2000092a
 8002df0:	4bb3      	ldr	r3, [pc, #716]	; (80030c0 <DMA2_Stream0_IRQHandler+0x484>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
				modbus_registers_buffer[14] = (uint16_t)(U_DClink_filtered*10.0f);
 8002df6:	4bb3      	ldr	r3, [pc, #716]	; (80030c4 <DMA2_Stream0_IRQHandler+0x488>)
 8002df8:	edd3 7a00 	vldr	s15, [r3]
 8002dfc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e08:	ee17 3a90 	vmov	r3, s15
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	4bae      	ldr	r3, [pc, #696]	; (80030c8 <DMA2_Stream0_IRQHandler+0x48c>)
 8002e10:	839a      	strh	r2, [r3, #28]
				//current calculation
				I_U_raw=ADC_rawdata[0]-I_U_zerocurrentreading;
 8002e12:	4bae      	ldr	r3, [pc, #696]	; (80030cc <DMA2_Stream0_IRQHandler+0x490>)
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	4bad      	ldr	r3, [pc, #692]	; (80030d0 <DMA2_Stream0_IRQHandler+0x494>)
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	b21a      	sxth	r2, r3
 8002e22:	4bac      	ldr	r3, [pc, #688]	; (80030d4 <DMA2_Stream0_IRQHandler+0x498>)
 8002e24:	801a      	strh	r2, [r3, #0]
				I_V_raw=ADC_rawdata[1]-I_V_zerocurrentreading;
 8002e26:	4ba9      	ldr	r3, [pc, #676]	; (80030cc <DMA2_Stream0_IRQHandler+0x490>)
 8002e28:	885b      	ldrh	r3, [r3, #2]
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	4baa      	ldr	r3, [pc, #680]	; (80030d8 <DMA2_Stream0_IRQHandler+0x49c>)
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	b21a      	sxth	r2, r3
 8002e36:	4ba9      	ldr	r3, [pc, #676]	; (80030dc <DMA2_Stream0_IRQHandler+0x4a0>)
 8002e38:	801a      	strh	r2, [r3, #0]
				I_U=(float)I_U_raw*CURRENT_SENSE_RATIO;
 8002e3a:	4ba6      	ldr	r3, [pc, #664]	; (80030d4 <DMA2_Stream0_IRQHandler+0x498>)
 8002e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e40:	ee07 3a90 	vmov	s15, r3
 8002e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e48:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 80030e0 <DMA2_Stream0_IRQHandler+0x4a4>
 8002e4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e50:	4ba4      	ldr	r3, [pc, #656]	; (80030e4 <DMA2_Stream0_IRQHandler+0x4a8>)
 8002e52:	edc3 7a00 	vstr	s15, [r3]
				I_V=(float)I_V_raw*CURRENT_SENSE_RATIO;
 8002e56:	4ba1      	ldr	r3, [pc, #644]	; (80030dc <DMA2_Stream0_IRQHandler+0x4a0>)
 8002e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e5c:	ee07 3a90 	vmov	s15, r3
 8002e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e64:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80030e0 <DMA2_Stream0_IRQHandler+0x4a4>
 8002e68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e6c:	4b9e      	ldr	r3, [pc, #632]	; (80030e8 <DMA2_Stream0_IRQHandler+0x4ac>)
 8002e6e:	edc3 7a00 	vstr	s15, [r3]
				I_W=-I_U-I_V;
 8002e72:	4b9c      	ldr	r3, [pc, #624]	; (80030e4 <DMA2_Stream0_IRQHandler+0x4a8>)
 8002e74:	edd3 7a00 	vldr	s15, [r3]
 8002e78:	eeb1 7a67 	vneg.f32	s14, s15
 8002e7c:	4b9a      	ldr	r3, [pc, #616]	; (80030e8 <DMA2_Stream0_IRQHandler+0x4ac>)
 8002e7e:	edd3 7a00 	vldr	s15, [r3]
 8002e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e86:	4b99      	ldr	r3, [pc, #612]	; (80030ec <DMA2_Stream0_IRQHandler+0x4b0>)
 8002e88:	edc3 7a00 	vstr	s15, [r3]
				//RMS current calculation loop

				rms_count++;
 8002e8c:	4b98      	ldr	r3, [pc, #608]	; (80030f0 <DMA2_Stream0_IRQHandler+0x4b4>)
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	3301      	adds	r3, #1
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	4b96      	ldr	r3, [pc, #600]	; (80030f0 <DMA2_Stream0_IRQHandler+0x4b4>)
 8002e98:	801a      	strh	r2, [r3, #0]
				I_U_square_sum+=(I_U*I_U);
 8002e9a:	4b92      	ldr	r3, [pc, #584]	; (80030e4 <DMA2_Stream0_IRQHandler+0x4a8>)
 8002e9c:	ed93 7a00 	vldr	s14, [r3]
 8002ea0:	4b90      	ldr	r3, [pc, #576]	; (80030e4 <DMA2_Stream0_IRQHandler+0x4a8>)
 8002ea2:	edd3 7a00 	vldr	s15, [r3]
 8002ea6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eaa:	4b92      	ldr	r3, [pc, #584]	; (80030f4 <DMA2_Stream0_IRQHandler+0x4b8>)
 8002eac:	edd3 7a00 	vldr	s15, [r3]
 8002eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb4:	4b8f      	ldr	r3, [pc, #572]	; (80030f4 <DMA2_Stream0_IRQHandler+0x4b8>)
 8002eb6:	edc3 7a00 	vstr	s15, [r3]
				I_V_square_sum+=(I_V*I_V);
 8002eba:	4b8b      	ldr	r3, [pc, #556]	; (80030e8 <DMA2_Stream0_IRQHandler+0x4ac>)
 8002ebc:	ed93 7a00 	vldr	s14, [r3]
 8002ec0:	4b89      	ldr	r3, [pc, #548]	; (80030e8 <DMA2_Stream0_IRQHandler+0x4ac>)
 8002ec2:	edd3 7a00 	vldr	s15, [r3]
 8002ec6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eca:	4b8b      	ldr	r3, [pc, #556]	; (80030f8 <DMA2_Stream0_IRQHandler+0x4bc>)
 8002ecc:	edd3 7a00 	vldr	s15, [r3]
 8002ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed4:	4b88      	ldr	r3, [pc, #544]	; (80030f8 <DMA2_Stream0_IRQHandler+0x4bc>)
 8002ed6:	edc3 7a00 	vstr	s15, [r3]
				I_W_square_sum+=(I_W*I_W);
 8002eda:	4b84      	ldr	r3, [pc, #528]	; (80030ec <DMA2_Stream0_IRQHandler+0x4b0>)
 8002edc:	ed93 7a00 	vldr	s14, [r3]
 8002ee0:	4b82      	ldr	r3, [pc, #520]	; (80030ec <DMA2_Stream0_IRQHandler+0x4b0>)
 8002ee2:	edd3 7a00 	vldr	s15, [r3]
 8002ee6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eea:	4b84      	ldr	r3, [pc, #528]	; (80030fc <DMA2_Stream0_IRQHandler+0x4c0>)
 8002eec:	edd3 7a00 	vldr	s15, [r3]
 8002ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef4:	4b81      	ldr	r3, [pc, #516]	; (80030fc <DMA2_Stream0_IRQHandler+0x4c0>)
 8002ef6:	edc3 7a00 	vstr	s15, [r3]

				if(rms_count>CURRENT_RMS_SAMPLING_COUNT){
 8002efa:	4b7d      	ldr	r3, [pc, #500]	; (80030f0 <DMA2_Stream0_IRQHandler+0x4b4>)
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f04:	f240 808e 	bls.w	8003024 <DMA2_Stream0_IRQHandler+0x3e8>
					I_U_RMS=sqrt(I_U_square_sum/(float)rms_count);
 8002f08:	4b7a      	ldr	r3, [pc, #488]	; (80030f4 <DMA2_Stream0_IRQHandler+0x4b8>)
 8002f0a:	ed93 7a00 	vldr	s14, [r3]
 8002f0e:	4b78      	ldr	r3, [pc, #480]	; (80030f0 <DMA2_Stream0_IRQHandler+0x4b4>)
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	ee07 3a90 	vmov	s15, r3
 8002f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f1c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f20:	ee16 0a90 	vmov	r0, s13
 8002f24:	f7fd fac0 	bl	80004a8 <__aeabi_f2d>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	ec43 2b10 	vmov	d0, r2, r3
 8002f30:	f009 f8ea 	bl	800c108 <sqrt>
 8002f34:	ec53 2b10 	vmov	r2, r3, d0
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	f7fd fdbc 	bl	8000ab8 <__aeabi_d2f>
 8002f40:	4603      	mov	r3, r0
 8002f42:	4a6f      	ldr	r2, [pc, #444]	; (8003100 <DMA2_Stream0_IRQHandler+0x4c4>)
 8002f44:	6013      	str	r3, [r2, #0]
					I_V_RMS=sqrt(I_V_square_sum/(float)rms_count);
 8002f46:	4b6c      	ldr	r3, [pc, #432]	; (80030f8 <DMA2_Stream0_IRQHandler+0x4bc>)
 8002f48:	ed93 7a00 	vldr	s14, [r3]
 8002f4c:	4b68      	ldr	r3, [pc, #416]	; (80030f0 <DMA2_Stream0_IRQHandler+0x4b4>)
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	ee07 3a90 	vmov	s15, r3
 8002f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f5e:	ee16 0a90 	vmov	r0, s13
 8002f62:	f7fd faa1 	bl	80004a8 <__aeabi_f2d>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	ec43 2b10 	vmov	d0, r2, r3
 8002f6e:	f009 f8cb 	bl	800c108 <sqrt>
 8002f72:	ec53 2b10 	vmov	r2, r3, d0
 8002f76:	4610      	mov	r0, r2
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f7fd fd9d 	bl	8000ab8 <__aeabi_d2f>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4a60      	ldr	r2, [pc, #384]	; (8003104 <DMA2_Stream0_IRQHandler+0x4c8>)
 8002f82:	6013      	str	r3, [r2, #0]
					I_W_RMS=sqrt(I_W_square_sum/(float)rms_count);
 8002f84:	4b5d      	ldr	r3, [pc, #372]	; (80030fc <DMA2_Stream0_IRQHandler+0x4c0>)
 8002f86:	ed93 7a00 	vldr	s14, [r3]
 8002f8a:	4b59      	ldr	r3, [pc, #356]	; (80030f0 <DMA2_Stream0_IRQHandler+0x4b4>)
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	ee07 3a90 	vmov	s15, r3
 8002f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f98:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f9c:	ee16 0a90 	vmov	r0, s13
 8002fa0:	f7fd fa82 	bl	80004a8 <__aeabi_f2d>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	ec43 2b10 	vmov	d0, r2, r3
 8002fac:	f009 f8ac 	bl	800c108 <sqrt>
 8002fb0:	ec53 2b10 	vmov	r2, r3, d0
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	f7fd fd7e 	bl	8000ab8 <__aeabi_d2f>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	4a52      	ldr	r2, [pc, #328]	; (8003108 <DMA2_Stream0_IRQHandler+0x4cc>)
 8002fc0:	6013      	str	r3, [r2, #0]
					I_out=(I_U_RMS+I_V_RMS+I_W_RMS)/3.0f;
 8002fc2:	4b4f      	ldr	r3, [pc, #316]	; (8003100 <DMA2_Stream0_IRQHandler+0x4c4>)
 8002fc4:	ed93 7a00 	vldr	s14, [r3]
 8002fc8:	4b4e      	ldr	r3, [pc, #312]	; (8003104 <DMA2_Stream0_IRQHandler+0x4c8>)
 8002fca:	edd3 7a00 	vldr	s15, [r3]
 8002fce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fd2:	4b4d      	ldr	r3, [pc, #308]	; (8003108 <DMA2_Stream0_IRQHandler+0x4cc>)
 8002fd4:	edd3 7a00 	vldr	s15, [r3]
 8002fd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fdc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002fe0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fe4:	4b49      	ldr	r3, [pc, #292]	; (800310c <DMA2_Stream0_IRQHandler+0x4d0>)
 8002fe6:	edc3 7a00 	vstr	s15, [r3]
					modbus_registers_buffer[10]=(uint16_t)(I_out*100.0f);
 8002fea:	4b48      	ldr	r3, [pc, #288]	; (800310c <DMA2_Stream0_IRQHandler+0x4d0>)
 8002fec:	edd3 7a00 	vldr	s15, [r3]
 8002ff0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003110 <DMA2_Stream0_IRQHandler+0x4d4>
 8002ff4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ffc:	ee17 3a90 	vmov	r3, s15
 8003000:	b29a      	uxth	r2, r3
 8003002:	4b31      	ldr	r3, [pc, #196]	; (80030c8 <DMA2_Stream0_IRQHandler+0x48c>)
 8003004:	829a      	strh	r2, [r3, #20]
					rms_count=0;I_U_square_sum=0.0f;I_V_square_sum=0.0f;I_W_square_sum=0.0f;}
 8003006:	4b3a      	ldr	r3, [pc, #232]	; (80030f0 <DMA2_Stream0_IRQHandler+0x4b4>)
 8003008:	2200      	movs	r2, #0
 800300a:	801a      	strh	r2, [r3, #0]
 800300c:	4b39      	ldr	r3, [pc, #228]	; (80030f4 <DMA2_Stream0_IRQHandler+0x4b8>)
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	4b38      	ldr	r3, [pc, #224]	; (80030f8 <DMA2_Stream0_IRQHandler+0x4bc>)
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	4b37      	ldr	r3, [pc, #220]	; (80030fc <DMA2_Stream0_IRQHandler+0x4c0>)
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

				if((I_U>INVERTER_OVERCURRENT_TRIP_LEVEL || I_U < (-INVERTER_OVERCURRENT_TRIP_LEVEL) || I_V>INVERTER_OVERCURRENT_TRIP_LEVEL || I_V < (-INVERTER_OVERCURRENT_TRIP_LEVEL) || I_W > INVERTER_OVERCURRENT_TRIP_LEVEL || I_W <(-INVERTER_OVERCURRENT_TRIP_LEVEL)) && OC_measurement_error_counter<3){
 8003024:	4b2f      	ldr	r3, [pc, #188]	; (80030e4 <DMA2_Stream0_IRQHandler+0x4a8>)
 8003026:	edd3 7a00 	vldr	s15, [r3]
 800302a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800302e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003036:	dc31      	bgt.n	800309c <DMA2_Stream0_IRQHandler+0x460>
 8003038:	4b2a      	ldr	r3, [pc, #168]	; (80030e4 <DMA2_Stream0_IRQHandler+0x4a8>)
 800303a:	edd3 7a00 	vldr	s15, [r3]
 800303e:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8003042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304a:	d427      	bmi.n	800309c <DMA2_Stream0_IRQHandler+0x460>
 800304c:	4b26      	ldr	r3, [pc, #152]	; (80030e8 <DMA2_Stream0_IRQHandler+0x4ac>)
 800304e:	edd3 7a00 	vldr	s15, [r3]
 8003052:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003056:	eef4 7ac7 	vcmpe.f32	s15, s14
 800305a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305e:	dc1d      	bgt.n	800309c <DMA2_Stream0_IRQHandler+0x460>
 8003060:	4b21      	ldr	r3, [pc, #132]	; (80030e8 <DMA2_Stream0_IRQHandler+0x4ac>)
 8003062:	edd3 7a00 	vldr	s15, [r3]
 8003066:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 800306a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800306e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003072:	d413      	bmi.n	800309c <DMA2_Stream0_IRQHandler+0x460>
 8003074:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <DMA2_Stream0_IRQHandler+0x4b0>)
 8003076:	edd3 7a00 	vldr	s15, [r3]
 800307a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800307e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003086:	dc09      	bgt.n	800309c <DMA2_Stream0_IRQHandler+0x460>
 8003088:	4b18      	ldr	r3, [pc, #96]	; (80030ec <DMA2_Stream0_IRQHandler+0x4b0>)
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8003092:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309a:	d53d      	bpl.n	8003118 <DMA2_Stream0_IRQHandler+0x4dc>
 800309c:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <DMA2_Stream0_IRQHandler+0x4d8>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d839      	bhi.n	8003118 <DMA2_Stream0_IRQHandler+0x4dc>
					OC_measurement_error_counter++;
 80030a4:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <DMA2_Stream0_IRQHandler+0x4d8>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	3301      	adds	r3, #1
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	4b19      	ldr	r3, [pc, #100]	; (8003114 <DMA2_Stream0_IRQHandler+0x4d8>)
 80030ae:	701a      	strb	r2, [r3, #0]
					if(OC_measurement_error_counter==2){inverter_error_trip(overcurrent);}
 80030b0:	4b18      	ldr	r3, [pc, #96]	; (8003114 <DMA2_Stream0_IRQHandler+0x4d8>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d132      	bne.n	800311e <DMA2_Stream0_IRQHandler+0x4e2>
 80030b8:	2004      	movs	r0, #4
 80030ba:	f7fe f979 	bl	80013b0 <inverter_error_trip>
 80030be:	e02e      	b.n	800311e <DMA2_Stream0_IRQHandler+0x4e2>
 80030c0:	2000092a 	.word	0x2000092a
 80030c4:	20000924 	.word	0x20000924
 80030c8:	20000000 	.word	0x20000000
 80030cc:	20000900 	.word	0x20000900
 80030d0:	20000932 	.word	0x20000932
 80030d4:	20000936 	.word	0x20000936
 80030d8:	20000934 	.word	0x20000934
 80030dc:	20000938 	.word	0x20000938
 80030e0:	3c88018c 	.word	0x3c88018c
 80030e4:	2000093c 	.word	0x2000093c
 80030e8:	20000940 	.word	0x20000940
 80030ec:	20000944 	.word	0x20000944
 80030f0:	20000948 	.word	0x20000948
 80030f4:	2000094c 	.word	0x2000094c
 80030f8:	20000950 	.word	0x20000950
 80030fc:	20000954 	.word	0x20000954
 8003100:	20000958 	.word	0x20000958
 8003104:	2000095c 	.word	0x2000095c
 8003108:	20000960 	.word	0x20000960
 800310c:	20000964 	.word	0x20000964
 8003110:	42c80000 	.word	0x42c80000
 8003114:	20000929 	.word	0x20000929
				}else{OC_measurement_error_counter=0;}
 8003118:	4b4c      	ldr	r3, [pc, #304]	; (800324c <DMA2_Stream0_IRQHandler+0x610>)
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]

				if(motor_feedback_type==abz_encoder){
 800311e:	4b4c      	ldr	r3, [pc, #304]	; (8003250 <DMA2_Stream0_IRQHandler+0x614>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b01      	cmp	r3, #1
 8003124:	f040 8122 	bne.w	800336c <DMA2_Stream0_IRQHandler+0x730>
					if(encoder_positioned){
 8003128:	4b4a      	ldr	r3, [pc, #296]	; (8003254 <DMA2_Stream0_IRQHandler+0x618>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 811d 	beq.w	800336c <DMA2_Stream0_IRQHandler+0x730>
						if(TIM2->CNT <5000){encoder_actual_position=5000-TIM2->CNT;}
 8003132:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	f241 3287 	movw	r2, #4999	; 0x1387
 800313c:	4293      	cmp	r3, r2
 800313e:	d80b      	bhi.n	8003158 <DMA2_Stream0_IRQHandler+0x51c>
 8003140:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	b29b      	uxth	r3, r3
 8003148:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 800314c:	3308      	adds	r3, #8
 800314e:	b29b      	uxth	r3, r3
 8003150:	b21a      	sxth	r2, r3
 8003152:	4b41      	ldr	r3, [pc, #260]	; (8003258 <DMA2_Stream0_IRQHandler+0x61c>)
 8003154:	801a      	strh	r2, [r3, #0]
 8003156:	e00a      	b.n	800316e <DMA2_Stream0_IRQHandler+0x532>
						else{encoder_actual_position=10000-TIM2->CNT;}
 8003158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	b29b      	uxth	r3, r3
 8003160:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8003164:	3310      	adds	r3, #16
 8003166:	b29b      	uxth	r3, r3
 8003168:	b21a      	sxth	r2, r3
 800316a:	4b3b      	ldr	r3, [pc, #236]	; (8003258 <DMA2_Stream0_IRQHandler+0x61c>)
 800316c:	801a      	strh	r2, [r3, #0]
						modbus_registers_buffer[11]=encoder_actual_position;
 800316e:	4b3a      	ldr	r3, [pc, #232]	; (8003258 <DMA2_Stream0_IRQHandler+0x61c>)
 8003170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003174:	b29a      	uxth	r2, r3
 8003176:	4b39      	ldr	r3, [pc, #228]	; (800325c <DMA2_Stream0_IRQHandler+0x620>)
 8003178:	82da      	strh	r2, [r3, #22]
						int16_t corrected_encoder_position=((encoder_actual_position % 1000) - encoder_correction_abz);
 800317a:	4b37      	ldr	r3, [pc, #220]	; (8003258 <DMA2_Stream0_IRQHandler+0x61c>)
 800317c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003180:	4a37      	ldr	r2, [pc, #220]	; (8003260 <DMA2_Stream0_IRQHandler+0x624>)
 8003182:	fb82 1203 	smull	r1, r2, r2, r3
 8003186:	1191      	asrs	r1, r2, #6
 8003188:	17da      	asrs	r2, r3, #31
 800318a:	1a8a      	subs	r2, r1, r2
 800318c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003190:	fb01 f202 	mul.w	r2, r1, r2
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	b21b      	sxth	r3, r3
 8003198:	b29a      	uxth	r2, r3
 800319a:	4b32      	ldr	r3, [pc, #200]	; (8003264 <DMA2_Stream0_IRQHandler+0x628>)
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	80fb      	strh	r3, [r7, #6]
						if(corrected_encoder_position<0){corrected_encoder_position+=1000;}
 80031a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	da04      	bge.n	80031b6 <DMA2_Stream0_IRQHandler+0x57a>
 80031ac:	88fb      	ldrh	r3, [r7, #6]
 80031ae:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	80fb      	strh	r3, [r7, #6]
						actual_electric_angle=(float)(corrected_encoder_position)*0.36f;
 80031b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031c2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003268 <DMA2_Stream0_IRQHandler+0x62c>
 80031c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031ca:	4b28      	ldr	r3, [pc, #160]	; (800326c <DMA2_Stream0_IRQHandler+0x630>)
 80031cc:	edc3 7a00 	vstr	s15, [r3]
						if(actual_electric_angle-electric_angle>180.0f){actual_torque_angle=(actual_electric_angle-electric_angle) - 360.0f;}
 80031d0:	4b26      	ldr	r3, [pc, #152]	; (800326c <DMA2_Stream0_IRQHandler+0x630>)
 80031d2:	ed93 7a00 	vldr	s14, [r3]
 80031d6:	4b26      	ldr	r3, [pc, #152]	; (8003270 <DMA2_Stream0_IRQHandler+0x634>)
 80031d8:	edd3 7a00 	vldr	s15, [r3]
 80031dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e0:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003274 <DMA2_Stream0_IRQHandler+0x638>
 80031e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	dd0f      	ble.n	800320e <DMA2_Stream0_IRQHandler+0x5d2>
 80031ee:	4b1f      	ldr	r3, [pc, #124]	; (800326c <DMA2_Stream0_IRQHandler+0x630>)
 80031f0:	ed93 7a00 	vldr	s14, [r3]
 80031f4:	4b1e      	ldr	r3, [pc, #120]	; (8003270 <DMA2_Stream0_IRQHandler+0x634>)
 80031f6:	edd3 7a00 	vldr	s15, [r3]
 80031fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031fe:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003278 <DMA2_Stream0_IRQHandler+0x63c>
 8003202:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003206:	4b1d      	ldr	r3, [pc, #116]	; (800327c <DMA2_Stream0_IRQHandler+0x640>)
 8003208:	edc3 7a00 	vstr	s15, [r3]
 800320c:	e045      	b.n	800329a <DMA2_Stream0_IRQHandler+0x65e>
						else if(actual_electric_angle-electric_angle<(-180.0f)){actual_torque_angle=actual_electric_angle-electric_angle + 360.0f;}
 800320e:	4b17      	ldr	r3, [pc, #92]	; (800326c <DMA2_Stream0_IRQHandler+0x630>)
 8003210:	ed93 7a00 	vldr	s14, [r3]
 8003214:	4b16      	ldr	r3, [pc, #88]	; (8003270 <DMA2_Stream0_IRQHandler+0x634>)
 8003216:	edd3 7a00 	vldr	s15, [r3]
 800321a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800321e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003280 <DMA2_Stream0_IRQHandler+0x644>
 8003222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322a:	d52b      	bpl.n	8003284 <DMA2_Stream0_IRQHandler+0x648>
 800322c:	4b0f      	ldr	r3, [pc, #60]	; (800326c <DMA2_Stream0_IRQHandler+0x630>)
 800322e:	ed93 7a00 	vldr	s14, [r3]
 8003232:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <DMA2_Stream0_IRQHandler+0x634>)
 8003234:	edd3 7a00 	vldr	s15, [r3]
 8003238:	ee77 7a67 	vsub.f32	s15, s14, s15
 800323c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003278 <DMA2_Stream0_IRQHandler+0x63c>
 8003240:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003244:	4b0d      	ldr	r3, [pc, #52]	; (800327c <DMA2_Stream0_IRQHandler+0x640>)
 8003246:	edc3 7a00 	vstr	s15, [r3]
 800324a:	e026      	b.n	800329a <DMA2_Stream0_IRQHandler+0x65e>
 800324c:	20000929 	.word	0x20000929
 8003250:	200000ac 	.word	0x200000ac
 8003254:	20000990 	.word	0x20000990
 8003258:	20000992 	.word	0x20000992
 800325c:	20000000 	.word	0x20000000
 8003260:	10624dd3 	.word	0x10624dd3
 8003264:	200000a8 	.word	0x200000a8
 8003268:	3eb851ec 	.word	0x3eb851ec
 800326c:	20000994 	.word	0x20000994
 8003270:	20000914 	.word	0x20000914
 8003274:	43340000 	.word	0x43340000
 8003278:	43b40000 	.word	0x43b40000
 800327c:	2000099c 	.word	0x2000099c
 8003280:	c3340000 	.word	0xc3340000
						else{actual_torque_angle=actual_electric_angle-electric_angle;}
 8003284:	4bad      	ldr	r3, [pc, #692]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 8003286:	ed93 7a00 	vldr	s14, [r3]
 800328a:	4bad      	ldr	r3, [pc, #692]	; (8003540 <DMA2_Stream0_IRQHandler+0x904>)
 800328c:	edd3 7a00 	vldr	s15, [r3]
 8003290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003294:	4bab      	ldr	r3, [pc, #684]	; (8003544 <DMA2_Stream0_IRQHandler+0x908>)
 8003296:	edc3 7a00 	vstr	s15, [r3]
						modbus_registers_buffer[12]=(int16_t)actual_torque_angle;//write calculated value to modbus array
 800329a:	4baa      	ldr	r3, [pc, #680]	; (8003544 <DMA2_Stream0_IRQHandler+0x908>)
 800329c:	edd3 7a00 	vldr	s15, [r3]
 80032a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032a4:	ee17 3a90 	vmov	r3, s15
 80032a8:	b21b      	sxth	r3, r3
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	4ba6      	ldr	r3, [pc, #664]	; (8003548 <DMA2_Stream0_IRQHandler+0x90c>)
 80032ae:	831a      	strh	r2, [r3, #24]
						speed_measurement_loop_i++;
 80032b0:	4ba6      	ldr	r3, [pc, #664]	; (800354c <DMA2_Stream0_IRQHandler+0x910>)
 80032b2:	edd3 7a00 	vldr	s15, [r3]
 80032b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032be:	4ba3      	ldr	r3, [pc, #652]	; (800354c <DMA2_Stream0_IRQHandler+0x910>)
 80032c0:	edc3 7a00 	vstr	s15, [r3]
						if(speed_measurement_loop_i>=30){
 80032c4:	4ba1      	ldr	r3, [pc, #644]	; (800354c <DMA2_Stream0_IRQHandler+0x910>)
 80032c6:	edd3 7a00 	vldr	s15, [r3]
 80032ca:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80032ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d6:	db49      	blt.n	800336c <DMA2_Stream0_IRQHandler+0x730>
							speed=(actual_electric_angle-last_actual_electric_angle)*17.77777f; //speed(rpm) = ((x(deg)/polepairs)/360deg)/(0,001875(s)/60s)
 80032d8:	4b98      	ldr	r3, [pc, #608]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 80032da:	ed93 7a00 	vldr	s14, [r3]
 80032de:	4b9c      	ldr	r3, [pc, #624]	; (8003550 <DMA2_Stream0_IRQHandler+0x914>)
 80032e0:	edd3 7a00 	vldr	s15, [r3]
 80032e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e8:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8003554 <DMA2_Stream0_IRQHandler+0x918>
 80032ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032f0:	4b99      	ldr	r3, [pc, #612]	; (8003558 <DMA2_Stream0_IRQHandler+0x91c>)
 80032f2:	edc3 7a00 	vstr	s15, [r3]
							if(speed>3200){speed-=6400;}if(speed<(-3200)){speed+=6400;}
 80032f6:	4b98      	ldr	r3, [pc, #608]	; (8003558 <DMA2_Stream0_IRQHandler+0x91c>)
 80032f8:	edd3 7a00 	vldr	s15, [r3]
 80032fc:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800355c <DMA2_Stream0_IRQHandler+0x920>
 8003300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003308:	dd09      	ble.n	800331e <DMA2_Stream0_IRQHandler+0x6e2>
 800330a:	4b93      	ldr	r3, [pc, #588]	; (8003558 <DMA2_Stream0_IRQHandler+0x91c>)
 800330c:	edd3 7a00 	vldr	s15, [r3]
 8003310:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8003560 <DMA2_Stream0_IRQHandler+0x924>
 8003314:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003318:	4b8f      	ldr	r3, [pc, #572]	; (8003558 <DMA2_Stream0_IRQHandler+0x91c>)
 800331a:	edc3 7a00 	vstr	s15, [r3]
 800331e:	4b8e      	ldr	r3, [pc, #568]	; (8003558 <DMA2_Stream0_IRQHandler+0x91c>)
 8003320:	edd3 7a00 	vldr	s15, [r3]
 8003324:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8003564 <DMA2_Stream0_IRQHandler+0x928>
 8003328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800332c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003330:	d509      	bpl.n	8003346 <DMA2_Stream0_IRQHandler+0x70a>
 8003332:	4b89      	ldr	r3, [pc, #548]	; (8003558 <DMA2_Stream0_IRQHandler+0x91c>)
 8003334:	edd3 7a00 	vldr	s15, [r3]
 8003338:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8003560 <DMA2_Stream0_IRQHandler+0x924>
 800333c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003340:	4b85      	ldr	r3, [pc, #532]	; (8003558 <DMA2_Stream0_IRQHandler+0x91c>)
 8003342:	edc3 7a00 	vstr	s15, [r3]
							modbus_registers_buffer[13]=(int16_t)(filtered_speed);
 8003346:	4b88      	ldr	r3, [pc, #544]	; (8003568 <DMA2_Stream0_IRQHandler+0x92c>)
 8003348:	edd3 7a00 	vldr	s15, [r3]
 800334c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003350:	ee17 3a90 	vmov	r3, s15
 8003354:	b21b      	sxth	r3, r3
 8003356:	b29a      	uxth	r2, r3
 8003358:	4b7b      	ldr	r3, [pc, #492]	; (8003548 <DMA2_Stream0_IRQHandler+0x90c>)
 800335a:	835a      	strh	r2, [r3, #26]
							last_actual_electric_angle = actual_electric_angle;
 800335c:	4b77      	ldr	r3, [pc, #476]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a7b      	ldr	r2, [pc, #492]	; (8003550 <DMA2_Stream0_IRQHandler+0x914>)
 8003362:	6013      	str	r3, [r2, #0]
							speed_measurement_loop_i=0;
 8003364:	4b79      	ldr	r3, [pc, #484]	; (800354c <DMA2_Stream0_IRQHandler+0x910>)
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
						}
					}
				}
				if(motor_feedback_type==ssi_encoder){
 800336c:	4b7f      	ldr	r3, [pc, #508]	; (800356c <DMA2_Stream0_IRQHandler+0x930>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b02      	cmp	r3, #2
 8003372:	f040 8198 	bne.w	80036a6 <DMA2_Stream0_IRQHandler+0xa6a>
					modbus_registers_buffer[11]=ssi_encoder_data.encoder_position;
 8003376:	4b7e      	ldr	r3, [pc, #504]	; (8003570 <DMA2_Stream0_IRQHandler+0x934>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	b29a      	uxth	r2, r3
 800337c:	4b72      	ldr	r3, [pc, #456]	; (8003548 <DMA2_Stream0_IRQHandler+0x90c>)
 800337e:	82da      	strh	r2, [r3, #22]
					if(ssi_encoder_data.encoder_resolution==p8192ppr){
 8003380:	4b7b      	ldr	r3, [pc, #492]	; (8003570 <DMA2_Stream0_IRQHandler+0x934>)
 8003382:	7f1b      	ldrb	r3, [r3, #28]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d147      	bne.n	8003418 <DMA2_Stream0_IRQHandler+0x7dc>
						actual_electric_angle=(((fmodf(ssi_encoder_data.encoder_position, 8192.0f/POLE_PAIRS))/(8192.0f/POLE_PAIRS))*360.0f)+encoder_correction_angle;
 8003388:	4b79      	ldr	r3, [pc, #484]	; (8003570 <DMA2_Stream0_IRQHandler+0x934>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	ee07 3a90 	vmov	s15, r3
 8003390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003394:	eddf 0a77 	vldr	s1, [pc, #476]	; 8003574 <DMA2_Stream0_IRQHandler+0x938>
 8003398:	eeb0 0a67 	vmov.f32	s0, s15
 800339c:	f008 fee2 	bl	800c164 <fmodf>
 80033a0:	eeb0 7a40 	vmov.f32	s14, s0
 80033a4:	eddf 6a73 	vldr	s13, [pc, #460]	; 8003574 <DMA2_Stream0_IRQHandler+0x938>
 80033a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033ac:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003578 <DMA2_Stream0_IRQHandler+0x93c>
 80033b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033b4:	4b71      	ldr	r3, [pc, #452]	; (800357c <DMA2_Stream0_IRQHandler+0x940>)
 80033b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c6:	4b5d      	ldr	r3, [pc, #372]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 80033c8:	edc3 7a00 	vstr	s15, [r3]
						if(actual_electric_angle>=360.0f){actual_electric_angle-=360.0f;}
 80033cc:	4b5b      	ldr	r3, [pc, #364]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 80033ce:	edd3 7a00 	vldr	s15, [r3]
 80033d2:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8003578 <DMA2_Stream0_IRQHandler+0x93c>
 80033d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033de:	db09      	blt.n	80033f4 <DMA2_Stream0_IRQHandler+0x7b8>
 80033e0:	4b56      	ldr	r3, [pc, #344]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 80033e2:	edd3 7a00 	vldr	s15, [r3]
 80033e6:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8003578 <DMA2_Stream0_IRQHandler+0x93c>
 80033ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033ee:	4b53      	ldr	r3, [pc, #332]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 80033f0:	edc3 7a00 	vstr	s15, [r3]
						if(actual_electric_angle<0){actual_electric_angle+=360.0f;}
 80033f4:	4b51      	ldr	r3, [pc, #324]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 80033f6:	edd3 7a00 	vldr	s15, [r3]
 80033fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003402:	d509      	bpl.n	8003418 <DMA2_Stream0_IRQHandler+0x7dc>
 8003404:	4b4d      	ldr	r3, [pc, #308]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 8003406:	edd3 7a00 	vldr	s15, [r3]
 800340a:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003578 <DMA2_Stream0_IRQHandler+0x93c>
 800340e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003412:	4b4a      	ldr	r3, [pc, #296]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 8003414:	edc3 7a00 	vstr	s15, [r3]
					}
					if(ssi_encoder_data.encoder_resolution==p131072ppr){
 8003418:	4b55      	ldr	r3, [pc, #340]	; (8003570 <DMA2_Stream0_IRQHandler+0x934>)
 800341a:	7f1b      	ldrb	r3, [r3, #28]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d147      	bne.n	80034b0 <DMA2_Stream0_IRQHandler+0x874>
						actual_electric_angle=(((fmodf(ssi_encoder_data.encoder_position,8192.0f/POLE_PAIRS))/(131072.0f/POLE_PAIRS))*360.0f)+encoder_correction_angle;
 8003420:	4b53      	ldr	r3, [pc, #332]	; (8003570 <DMA2_Stream0_IRQHandler+0x934>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	ee07 3a90 	vmov	s15, r3
 8003428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342c:	eddf 0a51 	vldr	s1, [pc, #324]	; 8003574 <DMA2_Stream0_IRQHandler+0x938>
 8003430:	eeb0 0a67 	vmov.f32	s0, s15
 8003434:	f008 fe96 	bl	800c164 <fmodf>
 8003438:	eeb0 7a40 	vmov.f32	s14, s0
 800343c:	eddf 6a50 	vldr	s13, [pc, #320]	; 8003580 <DMA2_Stream0_IRQHandler+0x944>
 8003440:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003444:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003578 <DMA2_Stream0_IRQHandler+0x93c>
 8003448:	ee27 7a87 	vmul.f32	s14, s15, s14
 800344c:	4b4b      	ldr	r3, [pc, #300]	; (800357c <DMA2_Stream0_IRQHandler+0x940>)
 800344e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800345a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800345e:	4b37      	ldr	r3, [pc, #220]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 8003460:	edc3 7a00 	vstr	s15, [r3]
						if(actual_electric_angle>=360.0f){actual_electric_angle-=360.0f;}
 8003464:	4b35      	ldr	r3, [pc, #212]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 8003466:	edd3 7a00 	vldr	s15, [r3]
 800346a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003578 <DMA2_Stream0_IRQHandler+0x93c>
 800346e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003476:	db09      	blt.n	800348c <DMA2_Stream0_IRQHandler+0x850>
 8003478:	4b30      	ldr	r3, [pc, #192]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 800347a:	edd3 7a00 	vldr	s15, [r3]
 800347e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003578 <DMA2_Stream0_IRQHandler+0x93c>
 8003482:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003486:	4b2d      	ldr	r3, [pc, #180]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 8003488:	edc3 7a00 	vstr	s15, [r3]
						if(actual_electric_angle<0){actual_electric_angle+=360.0f;}
 800348c:	4b2b      	ldr	r3, [pc, #172]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 800348e:	edd3 7a00 	vldr	s15, [r3]
 8003492:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800349a:	d509      	bpl.n	80034b0 <DMA2_Stream0_IRQHandler+0x874>
 800349c:	4b27      	ldr	r3, [pc, #156]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 800349e:	edd3 7a00 	vldr	s15, [r3]
 80034a2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003578 <DMA2_Stream0_IRQHandler+0x93c>
 80034a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034aa:	4b24      	ldr	r3, [pc, #144]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 80034ac:	edc3 7a00 	vstr	s15, [r3]
					}
					if(ssi_encoder_data.encoder_resolution==unknown_resolution){actual_electric_angle=0;}//@TODO encoder error trip
 80034b0:	4b2f      	ldr	r3, [pc, #188]	; (8003570 <DMA2_Stream0_IRQHandler+0x934>)
 80034b2:	7f1b      	ldrb	r3, [r3, #28]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d103      	bne.n	80034c0 <DMA2_Stream0_IRQHandler+0x884>
 80034b8:	4b20      	ldr	r3, [pc, #128]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
					if(actual_electric_angle-electric_angle>180.0f){actual_torque_angle=(actual_electric_angle-electric_angle) - 360.0f;}
 80034c0:	4b1e      	ldr	r3, [pc, #120]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 80034c2:	ed93 7a00 	vldr	s14, [r3]
 80034c6:	4b1e      	ldr	r3, [pc, #120]	; (8003540 <DMA2_Stream0_IRQHandler+0x904>)
 80034c8:	edd3 7a00 	vldr	s15, [r3]
 80034cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034d0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003584 <DMA2_Stream0_IRQHandler+0x948>
 80034d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034dc:	dd0f      	ble.n	80034fe <DMA2_Stream0_IRQHandler+0x8c2>
 80034de:	4b17      	ldr	r3, [pc, #92]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 80034e0:	ed93 7a00 	vldr	s14, [r3]
 80034e4:	4b16      	ldr	r3, [pc, #88]	; (8003540 <DMA2_Stream0_IRQHandler+0x904>)
 80034e6:	edd3 7a00 	vldr	s15, [r3]
 80034ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034ee:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003578 <DMA2_Stream0_IRQHandler+0x93c>
 80034f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034f6:	4b13      	ldr	r3, [pc, #76]	; (8003544 <DMA2_Stream0_IRQHandler+0x908>)
 80034f8:	edc3 7a00 	vstr	s15, [r3]
 80034fc:	e051      	b.n	80035a2 <DMA2_Stream0_IRQHandler+0x966>
					else if(actual_electric_angle-electric_angle<(-180.0f)){actual_torque_angle=actual_electric_angle-electric_angle + 360.0f;}
 80034fe:	4b0f      	ldr	r3, [pc, #60]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 8003500:	ed93 7a00 	vldr	s14, [r3]
 8003504:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <DMA2_Stream0_IRQHandler+0x904>)
 8003506:	edd3 7a00 	vldr	s15, [r3]
 800350a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800350e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003588 <DMA2_Stream0_IRQHandler+0x94c>
 8003512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351a:	d537      	bpl.n	800358c <DMA2_Stream0_IRQHandler+0x950>
 800351c:	4b07      	ldr	r3, [pc, #28]	; (800353c <DMA2_Stream0_IRQHandler+0x900>)
 800351e:	ed93 7a00 	vldr	s14, [r3]
 8003522:	4b07      	ldr	r3, [pc, #28]	; (8003540 <DMA2_Stream0_IRQHandler+0x904>)
 8003524:	edd3 7a00 	vldr	s15, [r3]
 8003528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800352c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003578 <DMA2_Stream0_IRQHandler+0x93c>
 8003530:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003534:	4b03      	ldr	r3, [pc, #12]	; (8003544 <DMA2_Stream0_IRQHandler+0x908>)
 8003536:	edc3 7a00 	vstr	s15, [r3]
 800353a:	e032      	b.n	80035a2 <DMA2_Stream0_IRQHandler+0x966>
 800353c:	20000994 	.word	0x20000994
 8003540:	20000914 	.word	0x20000914
 8003544:	2000099c 	.word	0x2000099c
 8003548:	20000000 	.word	0x20000000
 800354c:	200009a0 	.word	0x200009a0
 8003550:	20000998 	.word	0x20000998
 8003554:	418e38df 	.word	0x418e38df
 8003558:	200009a4 	.word	0x200009a4
 800355c:	45480000 	.word	0x45480000
 8003560:	45c80000 	.word	0x45c80000
 8003564:	c5480000 	.word	0xc5480000
 8003568:	200009a8 	.word	0x200009a8
 800356c:	200000ac 	.word	0x200000ac
 8003570:	200008dc 	.word	0x200008dc
 8003574:	45000000 	.word	0x45000000
 8003578:	43b40000 	.word	0x43b40000
 800357c:	200000aa 	.word	0x200000aa
 8003580:	47000000 	.word	0x47000000
 8003584:	43340000 	.word	0x43340000
 8003588:	c3340000 	.word	0xc3340000
					else{actual_torque_angle=actual_electric_angle-electric_angle;}
 800358c:	4bc3      	ldr	r3, [pc, #780]	; (800389c <DMA2_Stream0_IRQHandler+0xc60>)
 800358e:	ed93 7a00 	vldr	s14, [r3]
 8003592:	4bc3      	ldr	r3, [pc, #780]	; (80038a0 <DMA2_Stream0_IRQHandler+0xc64>)
 8003594:	edd3 7a00 	vldr	s15, [r3]
 8003598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800359c:	4bc1      	ldr	r3, [pc, #772]	; (80038a4 <DMA2_Stream0_IRQHandler+0xc68>)
 800359e:	edc3 7a00 	vstr	s15, [r3]
					modbus_registers_buffer[12]=(int16_t)actual_torque_angle;//write calculated value to modbus array
 80035a2:	4bc0      	ldr	r3, [pc, #768]	; (80038a4 <DMA2_Stream0_IRQHandler+0xc68>)
 80035a4:	edd3 7a00 	vldr	s15, [r3]
 80035a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035ac:	ee17 3a90 	vmov	r3, s15
 80035b0:	b21b      	sxth	r3, r3
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	4bbc      	ldr	r3, [pc, #752]	; (80038a8 <DMA2_Stream0_IRQHandler+0xc6c>)
 80035b6:	831a      	strh	r2, [r3, #24]
					speed_measurement_loop_i++;
 80035b8:	4bbc      	ldr	r3, [pc, #752]	; (80038ac <DMA2_Stream0_IRQHandler+0xc70>)
 80035ba:	edd3 7a00 	vldr	s15, [r3]
 80035be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035c6:	4bb9      	ldr	r3, [pc, #740]	; (80038ac <DMA2_Stream0_IRQHandler+0xc70>)
 80035c8:	edc3 7a00 	vstr	s15, [r3]
					if(speed_measurement_loop_i>=30){
 80035cc:	4bb7      	ldr	r3, [pc, #732]	; (80038ac <DMA2_Stream0_IRQHandler+0xc70>)
 80035ce:	edd3 7a00 	vldr	s15, [r3]
 80035d2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80035d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035de:	db48      	blt.n	8003672 <DMA2_Stream0_IRQHandler+0xa36>
						if(ssi_encoder_data.encoder_resolution==p8192ppr){
 80035e0:	4bb3      	ldr	r3, [pc, #716]	; (80038b0 <DMA2_Stream0_IRQHandler+0xc74>)
 80035e2:	7f1b      	ldrb	r3, [r3, #28]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d13c      	bne.n	8003662 <DMA2_Stream0_IRQHandler+0xa26>
							//speed(rpm)=(position pulse delta/enc resolution)*(60s/sample time(s))
							//speed=(delta/8192)*(60/0,003)
							speed=((float)ssi_encoder_data.encoder_position-(float)ssi_encoder_data.last_encoder_position_speed_loop)*1.2207f;
 80035e8:	4bb1      	ldr	r3, [pc, #708]	; (80038b0 <DMA2_Stream0_IRQHandler+0xc74>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	ee07 3a90 	vmov	s15, r3
 80035f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035f4:	4bae      	ldr	r3, [pc, #696]	; (80038b0 <DMA2_Stream0_IRQHandler+0xc74>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	ee07 3a90 	vmov	s15, r3
 80035fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003600:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003604:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80038b4 <DMA2_Stream0_IRQHandler+0xc78>
 8003608:	ee67 7a87 	vmul.f32	s15, s15, s14
 800360c:	4baa      	ldr	r3, [pc, #680]	; (80038b8 <DMA2_Stream0_IRQHandler+0xc7c>)
 800360e:	edc3 7a00 	vstr	s15, [r3]
							if(speed>5000.0f){speed-=10000.0f;}if(speed<-5000.0f){speed+=10000.0f;}
 8003612:	4ba9      	ldr	r3, [pc, #676]	; (80038b8 <DMA2_Stream0_IRQHandler+0xc7c>)
 8003614:	edd3 7a00 	vldr	s15, [r3]
 8003618:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 80038bc <DMA2_Stream0_IRQHandler+0xc80>
 800361c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003624:	dd09      	ble.n	800363a <DMA2_Stream0_IRQHandler+0x9fe>
 8003626:	4ba4      	ldr	r3, [pc, #656]	; (80038b8 <DMA2_Stream0_IRQHandler+0xc7c>)
 8003628:	edd3 7a00 	vldr	s15, [r3]
 800362c:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 80038c0 <DMA2_Stream0_IRQHandler+0xc84>
 8003630:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003634:	4ba0      	ldr	r3, [pc, #640]	; (80038b8 <DMA2_Stream0_IRQHandler+0xc7c>)
 8003636:	edc3 7a00 	vstr	s15, [r3]
 800363a:	4b9f      	ldr	r3, [pc, #636]	; (80038b8 <DMA2_Stream0_IRQHandler+0xc7c>)
 800363c:	edd3 7a00 	vldr	s15, [r3]
 8003640:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 80038c4 <DMA2_Stream0_IRQHandler+0xc88>
 8003644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364c:	d509      	bpl.n	8003662 <DMA2_Stream0_IRQHandler+0xa26>
 800364e:	4b9a      	ldr	r3, [pc, #616]	; (80038b8 <DMA2_Stream0_IRQHandler+0xc7c>)
 8003650:	edd3 7a00 	vldr	s15, [r3]
 8003654:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80038c0 <DMA2_Stream0_IRQHandler+0xc84>
 8003658:	ee77 7a87 	vadd.f32	s15, s15, s14
 800365c:	4b96      	ldr	r3, [pc, #600]	; (80038b8 <DMA2_Stream0_IRQHandler+0xc7c>)
 800365e:	edc3 7a00 	vstr	s15, [r3]
						}
						//@TODO: add speed measurement for 19bit encoders
						ssi_encoder_data.last_encoder_position_speed_loop=ssi_encoder_data.encoder_position;
 8003662:	4b93      	ldr	r3, [pc, #588]	; (80038b0 <DMA2_Stream0_IRQHandler+0xc74>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4a92      	ldr	r2, [pc, #584]	; (80038b0 <DMA2_Stream0_IRQHandler+0xc74>)
 8003668:	60d3      	str	r3, [r2, #12]
						speed_measurement_loop_i=0;
 800366a:	4b90      	ldr	r3, [pc, #576]	; (80038ac <DMA2_Stream0_IRQHandler+0xc70>)
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
					}
					filtered_speed=LowPassFilter(0.01,speed, &last_filtered_actual_speed);
 8003672:	4b91      	ldr	r3, [pc, #580]	; (80038b8 <DMA2_Stream0_IRQHandler+0xc7c>)
 8003674:	edd3 7a00 	vldr	s15, [r3]
 8003678:	4893      	ldr	r0, [pc, #588]	; (80038c8 <DMA2_Stream0_IRQHandler+0xc8c>)
 800367a:	eef0 0a67 	vmov.f32	s1, s15
 800367e:	ed9f 0a93 	vldr	s0, [pc, #588]	; 80038cc <DMA2_Stream0_IRQHandler+0xc90>
 8003682:	f7fd ff6d 	bl	8001560 <LowPassFilter>
 8003686:	eef0 7a40 	vmov.f32	s15, s0
 800368a:	4b91      	ldr	r3, [pc, #580]	; (80038d0 <DMA2_Stream0_IRQHandler+0xc94>)
 800368c:	edc3 7a00 	vstr	s15, [r3]
					modbus_registers_buffer[13]=(int16_t)(speed);
 8003690:	4b89      	ldr	r3, [pc, #548]	; (80038b8 <DMA2_Stream0_IRQHandler+0xc7c>)
 8003692:	edd3 7a00 	vldr	s15, [r3]
 8003696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800369a:	ee17 3a90 	vmov	r3, s15
 800369e:	b21b      	sxth	r3, r3
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	4b81      	ldr	r3, [pc, #516]	; (80038a8 <DMA2_Stream0_IRQHandler+0xc6c>)
 80036a4:	835a      	strh	r2, [r3, #26]

				}

				park_transform(I_U, I_V, 360.0f-actual_electric_angle, &I_d, &I_q);
 80036a6:	4b8b      	ldr	r3, [pc, #556]	; (80038d4 <DMA2_Stream0_IRQHandler+0xc98>)
 80036a8:	ed93 7a00 	vldr	s14, [r3]
 80036ac:	4b8a      	ldr	r3, [pc, #552]	; (80038d8 <DMA2_Stream0_IRQHandler+0xc9c>)
 80036ae:	edd3 6a00 	vldr	s13, [r3]
 80036b2:	4b7a      	ldr	r3, [pc, #488]	; (800389c <DMA2_Stream0_IRQHandler+0xc60>)
 80036b4:	edd3 7a00 	vldr	s15, [r3]
 80036b8:	ed9f 6a88 	vldr	s12, [pc, #544]	; 80038dc <DMA2_Stream0_IRQHandler+0xca0>
 80036bc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80036c0:	4987      	ldr	r1, [pc, #540]	; (80038e0 <DMA2_Stream0_IRQHandler+0xca4>)
 80036c2:	4888      	ldr	r0, [pc, #544]	; (80038e4 <DMA2_Stream0_IRQHandler+0xca8>)
 80036c4:	eeb0 1a67 	vmov.f32	s2, s15
 80036c8:	eef0 0a66 	vmov.f32	s1, s13
 80036cc:	eeb0 0a47 	vmov.f32	s0, s14
 80036d0:	f7fd fe84 	bl	80013dc <park_transform>
				I_d_filtered = LowPassFilter(0.007, I_d, &I_d_last);
 80036d4:	4b83      	ldr	r3, [pc, #524]	; (80038e4 <DMA2_Stream0_IRQHandler+0xca8>)
 80036d6:	edd3 7a00 	vldr	s15, [r3]
 80036da:	4883      	ldr	r0, [pc, #524]	; (80038e8 <DMA2_Stream0_IRQHandler+0xcac>)
 80036dc:	eef0 0a67 	vmov.f32	s1, s15
 80036e0:	ed9f 0a82 	vldr	s0, [pc, #520]	; 80038ec <DMA2_Stream0_IRQHandler+0xcb0>
 80036e4:	f7fd ff3c 	bl	8001560 <LowPassFilter>
 80036e8:	eef0 7a40 	vmov.f32	s15, s0
 80036ec:	4b80      	ldr	r3, [pc, #512]	; (80038f0 <DMA2_Stream0_IRQHandler+0xcb4>)
 80036ee:	edc3 7a00 	vstr	s15, [r3]
				I_q_filtered = LowPassFilter(0.007, I_q, &I_q_last);
 80036f2:	4b7b      	ldr	r3, [pc, #492]	; (80038e0 <DMA2_Stream0_IRQHandler+0xca4>)
 80036f4:	edd3 7a00 	vldr	s15, [r3]
 80036f8:	487e      	ldr	r0, [pc, #504]	; (80038f4 <DMA2_Stream0_IRQHandler+0xcb8>)
 80036fa:	eef0 0a67 	vmov.f32	s1, s15
 80036fe:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 80038ec <DMA2_Stream0_IRQHandler+0xcb0>
 8003702:	f7fd ff2d 	bl	8001560 <LowPassFilter>
 8003706:	eef0 7a40 	vmov.f32	s15, s0
 800370a:	4b7b      	ldr	r3, [pc, #492]	; (80038f8 <DMA2_Stream0_IRQHandler+0xcbc>)
 800370c:	edc3 7a00 	vstr	s15, [r3]
				modbus_registers_buffer[15]=(int16_t)(I_d_filtered*100);
 8003710:	4b77      	ldr	r3, [pc, #476]	; (80038f0 <DMA2_Stream0_IRQHandler+0xcb4>)
 8003712:	edd3 7a00 	vldr	s15, [r3]
 8003716:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80038fc <DMA2_Stream0_IRQHandler+0xcc0>
 800371a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800371e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003722:	ee17 3a90 	vmov	r3, s15
 8003726:	b21b      	sxth	r3, r3
 8003728:	b29a      	uxth	r2, r3
 800372a:	4b5f      	ldr	r3, [pc, #380]	; (80038a8 <DMA2_Stream0_IRQHandler+0xc6c>)
 800372c:	83da      	strh	r2, [r3, #30]
				modbus_registers_buffer[16]=(int16_t)(I_q_filtered*100);
 800372e:	4b72      	ldr	r3, [pc, #456]	; (80038f8 <DMA2_Stream0_IRQHandler+0xcbc>)
 8003730:	edd3 7a00 	vldr	s15, [r3]
 8003734:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80038fc <DMA2_Stream0_IRQHandler+0xcc0>
 8003738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800373c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003740:	ee17 3a90 	vmov	r3, s15
 8003744:	b21b      	sxth	r3, r3
 8003746:	b29a      	uxth	r2, r3
 8003748:	4b57      	ldr	r3, [pc, #348]	; (80038a8 <DMA2_Stream0_IRQHandler+0xc6c>)
 800374a:	841a      	strh	r2, [r3, #32]

				if(inv_control_mode==manual){
 800374c:	4b6c      	ldr	r3, [pc, #432]	; (8003900 <DMA2_Stream0_IRQHandler+0xcc4>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b01      	cmp	r3, #1
 8003754:	d12b      	bne.n	80037ae <DMA2_Stream0_IRQHandler+0xb72>
					electric_angle+=(speed_setpoint_deg_s*POLE_PAIRS)/5000.0f;  //5000hz control/sampling loop
 8003756:	4b6b      	ldr	r3, [pc, #428]	; (8003904 <DMA2_Stream0_IRQHandler+0xcc8>)
 8003758:	edd3 7a00 	vldr	s15, [r3]
 800375c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003764:	eddf 6a55 	vldr	s13, [pc, #340]	; 80038bc <DMA2_Stream0_IRQHandler+0xc80>
 8003768:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800376c:	4b4c      	ldr	r3, [pc, #304]	; (80038a0 <DMA2_Stream0_IRQHandler+0xc64>)
 800376e:	edd3 7a00 	vldr	s15, [r3]
 8003772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003776:	4b4a      	ldr	r3, [pc, #296]	; (80038a0 <DMA2_Stream0_IRQHandler+0xc64>)
 8003778:	edc3 7a00 	vstr	s15, [r3]
					if(electric_angle>=360.0f){	electric_angle=0.0f;}
 800377c:	4b48      	ldr	r3, [pc, #288]	; (80038a0 <DMA2_Stream0_IRQHandler+0xc64>)
 800377e:	edd3 7a00 	vldr	s15, [r3]
 8003782:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80038dc <DMA2_Stream0_IRQHandler+0xca0>
 8003786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800378a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378e:	db03      	blt.n	8003798 <DMA2_Stream0_IRQHandler+0xb5c>
 8003790:	4b43      	ldr	r3, [pc, #268]	; (80038a0 <DMA2_Stream0_IRQHandler+0xc64>)
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
					if(electric_angle<0.0f){electric_angle=359.0f;}
 8003798:	4b41      	ldr	r3, [pc, #260]	; (80038a0 <DMA2_Stream0_IRQHandler+0xc64>)
 800379a:	edd3 7a00 	vldr	s15, [r3]
 800379e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a6:	d502      	bpl.n	80037ae <DMA2_Stream0_IRQHandler+0xb72>
 80037a8:	4b3d      	ldr	r3, [pc, #244]	; (80038a0 <DMA2_Stream0_IRQHandler+0xc64>)
 80037aa:	4a57      	ldr	r2, [pc, #348]	; (8003908 <DMA2_Stream0_IRQHandler+0xccc>)
 80037ac:	601a      	str	r2, [r3, #0]
				}
				if(inv_control_mode==foc && modbus_registers_buffer[3] ==1){
 80037ae:	4b54      	ldr	r3, [pc, #336]	; (8003900 <DMA2_Stream0_IRQHandler+0xcc4>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	f040 814b 	bne.w	8003a50 <DMA2_Stream0_IRQHandler+0xe14>
 80037ba:	4b3b      	ldr	r3, [pc, #236]	; (80038a8 <DMA2_Stream0_IRQHandler+0xc6c>)
 80037bc:	88db      	ldrh	r3, [r3, #6]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	f040 8146 	bne.w	8003a50 <DMA2_Stream0_IRQHandler+0xe14>
					U_d = PI_control(&id_current_controller_data, -I_d_filtered);
 80037c4:	4b4a      	ldr	r3, [pc, #296]	; (80038f0 <DMA2_Stream0_IRQHandler+0xcb4>)
 80037c6:	edd3 7a00 	vldr	s15, [r3]
 80037ca:	eef1 7a67 	vneg.f32	s15, s15
 80037ce:	eeb0 0a67 	vmov.f32	s0, s15
 80037d2:	484e      	ldr	r0, [pc, #312]	; (800390c <DMA2_Stream0_IRQHandler+0xcd0>)
 80037d4:	f7fe fde2 	bl	800239c <PI_control>
 80037d8:	eef0 7a40 	vmov.f32	s15, s0
 80037dc:	4b4c      	ldr	r3, [pc, #304]	; (8003910 <DMA2_Stream0_IRQHandler+0xcd4>)
 80037de:	edc3 7a00 	vstr	s15, [r3]
					U_q = PI_control(&iq_current_controller_data,(torque_setpoint/10.0f)-I_q_filtered);
 80037e2:	4b4c      	ldr	r3, [pc, #304]	; (8003914 <DMA2_Stream0_IRQHandler+0xcd8>)
 80037e4:	edd3 7a00 	vldr	s15, [r3]
 80037e8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80037ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80037f0:	4b41      	ldr	r3, [pc, #260]	; (80038f8 <DMA2_Stream0_IRQHandler+0xcbc>)
 80037f2:	edd3 7a00 	vldr	s15, [r3]
 80037f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037fa:	eeb0 0a67 	vmov.f32	s0, s15
 80037fe:	4846      	ldr	r0, [pc, #280]	; (8003918 <DMA2_Stream0_IRQHandler+0xcdc>)
 8003800:	f7fe fdcc 	bl	800239c <PI_control>
 8003804:	eef0 7a40 	vmov.f32	s15, s0
 8003808:	4b44      	ldr	r3, [pc, #272]	; (800391c <DMA2_Stream0_IRQHandler+0xce0>)
 800380a:	edc3 7a00 	vstr	s15, [r3]
					inv_park_transform(U_d, U_q, actual_electric_angle, &U_alpha, &U_beta);
 800380e:	4b40      	ldr	r3, [pc, #256]	; (8003910 <DMA2_Stream0_IRQHandler+0xcd4>)
 8003810:	edd3 7a00 	vldr	s15, [r3]
 8003814:	4b41      	ldr	r3, [pc, #260]	; (800391c <DMA2_Stream0_IRQHandler+0xce0>)
 8003816:	ed93 7a00 	vldr	s14, [r3]
 800381a:	4b20      	ldr	r3, [pc, #128]	; (800389c <DMA2_Stream0_IRQHandler+0xc60>)
 800381c:	edd3 6a00 	vldr	s13, [r3]
 8003820:	493f      	ldr	r1, [pc, #252]	; (8003920 <DMA2_Stream0_IRQHandler+0xce4>)
 8003822:	4840      	ldr	r0, [pc, #256]	; (8003924 <DMA2_Stream0_IRQHandler+0xce8>)
 8003824:	eeb0 1a66 	vmov.f32	s2, s13
 8003828:	eef0 0a47 	vmov.f32	s1, s14
 800382c:	eeb0 0a67 	vmov.f32	s0, s15
 8003830:	f7fd fe40 	bl	80014b4 <inv_park_transform>
					duty_cycle=sqrtf(U_alpha*U_alpha+U_beta*U_beta);
 8003834:	4b3b      	ldr	r3, [pc, #236]	; (8003924 <DMA2_Stream0_IRQHandler+0xce8>)
 8003836:	ed93 7a00 	vldr	s14, [r3]
 800383a:	4b3a      	ldr	r3, [pc, #232]	; (8003924 <DMA2_Stream0_IRQHandler+0xce8>)
 800383c:	edd3 7a00 	vldr	s15, [r3]
 8003840:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003844:	4b36      	ldr	r3, [pc, #216]	; (8003920 <DMA2_Stream0_IRQHandler+0xce4>)
 8003846:	edd3 6a00 	vldr	s13, [r3]
 800384a:	4b35      	ldr	r3, [pc, #212]	; (8003920 <DMA2_Stream0_IRQHandler+0xce4>)
 800384c:	edd3 7a00 	vldr	s15, [r3]
 8003850:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003858:	eeb0 0a67 	vmov.f32	s0, s15
 800385c:	f008 fca2 	bl	800c1a4 <sqrtf>
 8003860:	eef0 7a40 	vmov.f32	s15, s0
 8003864:	4b30      	ldr	r3, [pc, #192]	; (8003928 <DMA2_Stream0_IRQHandler+0xcec>)
 8003866:	edc3 7a00 	vstr	s15, [r3]

					float electric_angle_rad=0.0f;
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	603b      	str	r3, [r7, #0]
					if(U_alpha>=0 && U_beta >=0){electric_angle_rad=atan2f(fabs(U_beta),fabs(U_alpha));}
 8003870:	4b2c      	ldr	r3, [pc, #176]	; (8003924 <DMA2_Stream0_IRQHandler+0xce8>)
 8003872:	edd3 7a00 	vldr	s15, [r3]
 8003876:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800387a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387e:	db62      	blt.n	8003946 <DMA2_Stream0_IRQHandler+0xd0a>
 8003880:	4b27      	ldr	r3, [pc, #156]	; (8003920 <DMA2_Stream0_IRQHandler+0xce4>)
 8003882:	edd3 7a00 	vldr	s15, [r3]
 8003886:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800388a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800388e:	db5a      	blt.n	8003946 <DMA2_Stream0_IRQHandler+0xd0a>
 8003890:	4b23      	ldr	r3, [pc, #140]	; (8003920 <DMA2_Stream0_IRQHandler+0xce4>)
 8003892:	edd3 7a00 	vldr	s15, [r3]
 8003896:	eeb0 7ae7 	vabs.f32	s14, s15
 800389a:	e047      	b.n	800392c <DMA2_Stream0_IRQHandler+0xcf0>
 800389c:	20000994 	.word	0x20000994
 80038a0:	20000914 	.word	0x20000914
 80038a4:	2000099c 	.word	0x2000099c
 80038a8:	20000000 	.word	0x20000000
 80038ac:	200009a0 	.word	0x200009a0
 80038b0:	200008dc 	.word	0x200008dc
 80038b4:	3f9c3fe6 	.word	0x3f9c3fe6
 80038b8:	200009a4 	.word	0x200009a4
 80038bc:	459c4000 	.word	0x459c4000
 80038c0:	461c4000 	.word	0x461c4000
 80038c4:	c59c4000 	.word	0xc59c4000
 80038c8:	200009ac 	.word	0x200009ac
 80038cc:	3c23d70a 	.word	0x3c23d70a
 80038d0:	200009a8 	.word	0x200009a8
 80038d4:	2000093c 	.word	0x2000093c
 80038d8:	20000940 	.word	0x20000940
 80038dc:	43b40000 	.word	0x43b40000
 80038e0:	20000974 	.word	0x20000974
 80038e4:	20000968 	.word	0x20000968
 80038e8:	2000096c 	.word	0x2000096c
 80038ec:	3be56042 	.word	0x3be56042
 80038f0:	20000970 	.word	0x20000970
 80038f4:	20000978 	.word	0x20000978
 80038f8:	2000097c 	.word	0x2000097c
 80038fc:	42c80000 	.word	0x42c80000
 8003900:	20000908 	.word	0x20000908
 8003904:	2000090c 	.word	0x2000090c
 8003908:	43b38000 	.word	0x43b38000
 800390c:	2000003c 	.word	0x2000003c
 8003910:	20000980 	.word	0x20000980
 8003914:	2000092c 	.word	0x2000092c
 8003918:	20000060 	.word	0x20000060
 800391c:	20000984 	.word	0x20000984
 8003920:	2000098c 	.word	0x2000098c
 8003924:	20000988 	.word	0x20000988
 8003928:	20000918 	.word	0x20000918
 800392c:	4b5d      	ldr	r3, [pc, #372]	; (8003aa4 <DMA2_Stream0_IRQHandler+0xe68>)
 800392e:	edd3 7a00 	vldr	s15, [r3]
 8003932:	eef0 7ae7 	vabs.f32	s15, s15
 8003936:	eef0 0a67 	vmov.f32	s1, s15
 800393a:	eeb0 0a47 	vmov.f32	s0, s14
 800393e:	f008 fc0f 	bl	800c160 <atan2f>
 8003942:	ed87 0a00 	vstr	s0, [r7]
					if(U_alpha<0 && U_beta >=0){electric_angle_rad=atan2f(fabs(U_alpha),fabs(U_beta)) + (3.141592f/2.0f);}
 8003946:	4b57      	ldr	r3, [pc, #348]	; (8003aa4 <DMA2_Stream0_IRQHandler+0xe68>)
 8003948:	edd3 7a00 	vldr	s15, [r3]
 800394c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003954:	d51f      	bpl.n	8003996 <DMA2_Stream0_IRQHandler+0xd5a>
 8003956:	4b54      	ldr	r3, [pc, #336]	; (8003aa8 <DMA2_Stream0_IRQHandler+0xe6c>)
 8003958:	edd3 7a00 	vldr	s15, [r3]
 800395c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003964:	db17      	blt.n	8003996 <DMA2_Stream0_IRQHandler+0xd5a>
 8003966:	4b4f      	ldr	r3, [pc, #316]	; (8003aa4 <DMA2_Stream0_IRQHandler+0xe68>)
 8003968:	edd3 7a00 	vldr	s15, [r3]
 800396c:	eeb0 7ae7 	vabs.f32	s14, s15
 8003970:	4b4d      	ldr	r3, [pc, #308]	; (8003aa8 <DMA2_Stream0_IRQHandler+0xe6c>)
 8003972:	edd3 7a00 	vldr	s15, [r3]
 8003976:	eef0 7ae7 	vabs.f32	s15, s15
 800397a:	eef0 0a67 	vmov.f32	s1, s15
 800397e:	eeb0 0a47 	vmov.f32	s0, s14
 8003982:	f008 fbed 	bl	800c160 <atan2f>
 8003986:	eef0 7a40 	vmov.f32	s15, s0
 800398a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003aac <DMA2_Stream0_IRQHandler+0xe70>
 800398e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003992:	edc7 7a00 	vstr	s15, [r7]
					if(U_alpha<0 && U_beta <0){electric_angle_rad=atan2f(fabs(U_beta),fabs(U_alpha)) + 3.141592f;}
 8003996:	4b43      	ldr	r3, [pc, #268]	; (8003aa4 <DMA2_Stream0_IRQHandler+0xe68>)
 8003998:	edd3 7a00 	vldr	s15, [r3]
 800399c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a4:	d51f      	bpl.n	80039e6 <DMA2_Stream0_IRQHandler+0xdaa>
 80039a6:	4b40      	ldr	r3, [pc, #256]	; (8003aa8 <DMA2_Stream0_IRQHandler+0xe6c>)
 80039a8:	edd3 7a00 	vldr	s15, [r3]
 80039ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b4:	d517      	bpl.n	80039e6 <DMA2_Stream0_IRQHandler+0xdaa>
 80039b6:	4b3c      	ldr	r3, [pc, #240]	; (8003aa8 <DMA2_Stream0_IRQHandler+0xe6c>)
 80039b8:	edd3 7a00 	vldr	s15, [r3]
 80039bc:	eeb0 7ae7 	vabs.f32	s14, s15
 80039c0:	4b38      	ldr	r3, [pc, #224]	; (8003aa4 <DMA2_Stream0_IRQHandler+0xe68>)
 80039c2:	edd3 7a00 	vldr	s15, [r3]
 80039c6:	eef0 7ae7 	vabs.f32	s15, s15
 80039ca:	eef0 0a67 	vmov.f32	s1, s15
 80039ce:	eeb0 0a47 	vmov.f32	s0, s14
 80039d2:	f008 fbc5 	bl	800c160 <atan2f>
 80039d6:	eef0 7a40 	vmov.f32	s15, s0
 80039da:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003ab0 <DMA2_Stream0_IRQHandler+0xe74>
 80039de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039e2:	edc7 7a00 	vstr	s15, [r7]
					if(U_alpha>=0 && U_beta <0){electric_angle_rad=atan2f(fabs(U_alpha),fabs(U_beta)) + (3.141592f*1.5f);}
 80039e6:	4b2f      	ldr	r3, [pc, #188]	; (8003aa4 <DMA2_Stream0_IRQHandler+0xe68>)
 80039e8:	edd3 7a00 	vldr	s15, [r3]
 80039ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f4:	db1f      	blt.n	8003a36 <DMA2_Stream0_IRQHandler+0xdfa>
 80039f6:	4b2c      	ldr	r3, [pc, #176]	; (8003aa8 <DMA2_Stream0_IRQHandler+0xe6c>)
 80039f8:	edd3 7a00 	vldr	s15, [r3]
 80039fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a04:	d517      	bpl.n	8003a36 <DMA2_Stream0_IRQHandler+0xdfa>
 8003a06:	4b27      	ldr	r3, [pc, #156]	; (8003aa4 <DMA2_Stream0_IRQHandler+0xe68>)
 8003a08:	edd3 7a00 	vldr	s15, [r3]
 8003a0c:	eeb0 7ae7 	vabs.f32	s14, s15
 8003a10:	4b25      	ldr	r3, [pc, #148]	; (8003aa8 <DMA2_Stream0_IRQHandler+0xe6c>)
 8003a12:	edd3 7a00 	vldr	s15, [r3]
 8003a16:	eef0 7ae7 	vabs.f32	s15, s15
 8003a1a:	eef0 0a67 	vmov.f32	s1, s15
 8003a1e:	eeb0 0a47 	vmov.f32	s0, s14
 8003a22:	f008 fb9d 	bl	800c160 <atan2f>
 8003a26:	eef0 7a40 	vmov.f32	s15, s0
 8003a2a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003ab4 <DMA2_Stream0_IRQHandler+0xe78>
 8003a2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a32:	edc7 7a00 	vstr	s15, [r7]

					electric_angle=(electric_angle_rad/3.141592f)*180.0f;
 8003a36:	ed97 7a00 	vldr	s14, [r7]
 8003a3a:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8003ab0 <DMA2_Stream0_IRQHandler+0xe74>
 8003a3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a42:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003ab8 <DMA2_Stream0_IRQHandler+0xe7c>
 8003a46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a4a:	4b1c      	ldr	r3, [pc, #112]	; (8003abc <DMA2_Stream0_IRQHandler+0xe80>)
 8003a4c:	edc3 7a00 	vstr	s15, [r3]
					//electric_angle+=(speed_setpoint_deg_s*POLE_PAIRS)/16000.0f;
					//if(electric_angle>=360.0f){	electric_angle=0.0f;}
					//if(electric_angle<0.0f){electric_angle=359.0f;}
				}

				if(inv_control_mode!=stop){
 8003a50:	4b1b      	ldr	r3, [pc, #108]	; (8003ac0 <DMA2_Stream0_IRQHandler+0xe84>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d014      	beq.n	8003a84 <DMA2_Stream0_IRQHandler+0xe48>
					//output_svpwm((uint16_t)electric_angle, (uint16_t)duty_cycle);
					output_sine_pwm((uint16_t)electric_angle, (uint16_t)duty_cycle);
 8003a5a:	4b18      	ldr	r3, [pc, #96]	; (8003abc <DMA2_Stream0_IRQHandler+0xe80>)
 8003a5c:	edd3 7a00 	vldr	s15, [r3]
 8003a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a64:	ee17 3a90 	vmov	r3, s15
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	4a16      	ldr	r2, [pc, #88]	; (8003ac4 <DMA2_Stream0_IRQHandler+0xe88>)
 8003a6c:	edd2 7a00 	vldr	s15, [r2]
 8003a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a74:	ee17 2a90 	vmov	r2, s15
 8003a78:	b292      	uxth	r2, r2
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fd fe07 	bl	8001690 <output_sine_pwm>
 8003a82:	e008      	b.n	8003a96 <DMA2_Stream0_IRQHandler+0xe5a>
				}
				else{TIM1->CCR1=0;TIM1->CCR2=0;TIM1->CCR3=0;}//if inverter in stop mode stop producing PWM signal while timer1 is still active to keep this interrupt alive for measurements on switched off inverter
 8003a84:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <DMA2_Stream0_IRQHandler+0xe8c>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	635a      	str	r2, [r3, #52]	; 0x34
 8003a8a:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <DMA2_Stream0_IRQHandler+0xe8c>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	639a      	str	r2, [r3, #56]	; 0x38
 8003a90:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <DMA2_Stream0_IRQHandler+0xe8c>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	63da      	str	r2, [r3, #60]	; 0x3c

			}
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a96:	480d      	ldr	r0, [pc, #52]	; (8003acc <DMA2_Stream0_IRQHandler+0xe90>)
 8003a98:	f001 fd68 	bl	800556c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	20000988 	.word	0x20000988
 8003aa8:	2000098c 	.word	0x2000098c
 8003aac:	3fc90fd8 	.word	0x3fc90fd8
 8003ab0:	40490fd8 	.word	0x40490fd8
 8003ab4:	4096cbe2 	.word	0x4096cbe2
 8003ab8:	43340000 	.word	0x43340000
 8003abc:	20000914 	.word	0x20000914
 8003ac0:	20000908 	.word	0x20000908
 8003ac4:	20000918 	.word	0x20000918
 8003ac8:	40010000 	.word	0x40010000
 8003acc:	20000544 	.word	0x20000544

08003ad0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003ad4:	4802      	ldr	r0, [pc, #8]	; (8003ae0 <DMA2_Stream2_IRQHandler+0x10>)
 8003ad6:	f001 fd49 	bl	800556c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	2000074c 	.word	0x2000074c

08003ae4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003ae8:	4802      	ldr	r0, [pc, #8]	; (8003af4 <DMA2_Stream7_IRQHandler+0x10>)
 8003aea:	f001 fd3f 	bl	800556c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	200007ac 	.word	0x200007ac

08003af8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003afc:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <SystemInit+0x20>)
 8003afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b02:	4a05      	ldr	r2, [pc, #20]	; (8003b18 <SystemInit+0x20>)
 8003b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b0c:	bf00      	nop
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	e000ed00 	.word	0xe000ed00

08003b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b20:	480d      	ldr	r0, [pc, #52]	; (8003b58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b22:	490e      	ldr	r1, [pc, #56]	; (8003b5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b24:	4a0e      	ldr	r2, [pc, #56]	; (8003b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b28:	e002      	b.n	8003b30 <LoopCopyDataInit>

08003b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b2e:	3304      	adds	r3, #4

08003b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b34:	d3f9      	bcc.n	8003b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b36:	4a0b      	ldr	r2, [pc, #44]	; (8003b64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b38:	4c0b      	ldr	r4, [pc, #44]	; (8003b68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b3c:	e001      	b.n	8003b42 <LoopFillZerobss>

08003b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b40:	3204      	adds	r2, #4

08003b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b44:	d3fb      	bcc.n	8003b3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b46:	f7ff ffd7 	bl	8003af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b4a:	f008 f955 	bl	800bdf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b4e:	f7fd fe21 	bl	8001794 <main>
  bx  lr    
 8003b52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b54:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b5c:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8003b60:	0800d9d4 	.word	0x0800d9d4
  ldr r2, =_sbss
 8003b64:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 8003b68:	20005464 	.word	0x20005464

08003b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b6c:	e7fe      	b.n	8003b6c <ADC_IRQHandler>
	...

08003b70 <mbus_open>:
/*
 * function mbus_open()
 * open new modbus context for new port
 * return: MODBUS_ERROR - if can't open context
 */
mbus_t mbus_open(Modbus_Conf_t *pconf) {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  mbus_t context;
  for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++) {
 8003b78:	2300      	movs	r3, #0
 8003b7a:	73fb      	strb	r3, [r7, #15]
 8003b7c:	e010      	b.n	8003ba0 <mbus_open+0x30>
    if (g_mbusContext[context].open == 0) {
 8003b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b82:	4a22      	ldr	r2, [pc, #136]	; (8003c0c <mbus_open+0x9c>)
 8003b84:	2194      	movs	r1, #148	; 0x94
 8003b86:	fb01 f303 	mul.w	r3, r1, r3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3328      	adds	r3, #40	; 0x28
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <mbus_open+0x3a>
  for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++) {
 8003b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	73fb      	strb	r3, [r7, #15]
 8003ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	ddea      	ble.n	8003b7e <mbus_open+0xe>
 8003ba8:	e000      	b.n	8003bac <mbus_open+0x3c>
      break;
 8003baa:	bf00      	nop
    }
  }
  if (context == STMODBUS_COUNT_CONTEXT)
 8003bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d102      	bne.n	8003bba <mbus_open+0x4a>
    return (mbus_t)MBUS_ERROR;
 8003bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb8:	e023      	b.n	8003c02 <mbus_open+0x92>
  // Clear context
  memset(&g_mbusContext[context], 0, sizeof(_stmodbus_context_t));
 8003bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bbe:	2294      	movs	r2, #148	; 0x94
 8003bc0:	fb02 f303 	mul.w	r3, r2, r3
 8003bc4:	4a11      	ldr	r2, [pc, #68]	; (8003c0c <mbus_open+0x9c>)
 8003bc6:	4413      	add	r3, r2
 8003bc8:	2294      	movs	r2, #148	; 0x94
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f008 f947 	bl	800be60 <memset>
  // Copy config to context
  memcpy((void *)&g_mbusContext[context].conf, (void *)pconf,
 8003bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bd6:	2294      	movs	r2, #148	; 0x94
 8003bd8:	fb02 f303 	mul.w	r3, r2, r3
 8003bdc:	4a0b      	ldr	r2, [pc, #44]	; (8003c0c <mbus_open+0x9c>)
 8003bde:	4413      	add	r3, r2
 8003be0:	2228      	movs	r2, #40	; 0x28
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f008 f92d 	bl	800be44 <memcpy>
         sizeof(Modbus_Conf_t));

  g_mbusContext[context].open = 1;
 8003bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bee:	4a07      	ldr	r2, [pc, #28]	; (8003c0c <mbus_open+0x9c>)
 8003bf0:	2194      	movs	r1, #148	; 0x94
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3328      	adds	r3, #40	; 0x28
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	701a      	strb	r2, [r3, #0]
  return context;
 8003bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	200009b0 	.word	0x200009b0

08003c10 <mbus_flush>:

mbus_status_t mbus_flush(const mbus_t context) {
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	71fb      	strb	r3, [r7, #7]
  g_mbusContext[context].crc16 = 0xFFFF;
 8003c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1e:	4a0d      	ldr	r2, [pc, #52]	; (8003c54 <mbus_flush+0x44>)
 8003c20:	2194      	movs	r1, #148	; 0x94
 8003c22:	fb01 f303 	mul.w	r3, r1, r3
 8003c26:	4413      	add	r3, r2
 8003c28:	332a      	adds	r3, #42	; 0x2a
 8003c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c2e:	801a      	strh	r2, [r3, #0]
  g_mbusContext[context].state = MBUS_STATE_IDLE;
 8003c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c34:	4a07      	ldr	r2, [pc, #28]	; (8003c54 <mbus_flush+0x44>)
 8003c36:	2194      	movs	r1, #148	; 0x94
 8003c38:	fb01 f303 	mul.w	r3, r1, r3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3329      	adds	r3, #41	; 0x29
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]
  return MBUS_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	200009b0 	.word	0x200009b0

08003c58 <mbus_response>:

mbus_status_t mbus_response(mbus_t mb_context, Modbus_ResponseType response) {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	460a      	mov	r2, r1
 8003c62:	71fb      	strb	r3, [r7, #7]
 8003c64:	4613      	mov	r3, r2
 8003c66:	71bb      	strb	r3, [r7, #6]

  if (response != MBUS_RESPONSE_OK) {
 8003c68:	79bb      	ldrb	r3, [r7, #6]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d008      	beq.n	8003c80 <mbus_response+0x28>
    return mbus_send_error(mb_context, response);
 8003c6e:	79ba      	ldrb	r2, [r7, #6]
 8003c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c74:	4611      	mov	r1, r2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fbba 	bl	80043f0 <mbus_send_error>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	e001      	b.n	8003c84 <mbus_response+0x2c>
  } else {
  }
  return MBUS_ERROR;
 8003c80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <mbus_poll_response>:
uint16_t mbus_error(Modbus_ResponseType error) {
    g_userError = error;
    return 0;
}

inline mbus_status_t mbus_poll_response(mbus_t mb_context) {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08c      	sub	sp, #48	; 0x30
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	71fb      	strb	r3, [r7, #7]
  stmbCallBackFunc func = 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8003c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9e:	2294      	movs	r2, #148	; 0x94
 8003ca0:	fb02 f303 	mul.w	r3, r2, r3
 8003ca4:	4a93      	ldr	r2, [pc, #588]	; (8003ef4 <mbus_poll_response+0x268>)
 8003ca6:	4413      	add	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
  int read = 1, la;
 8003caa:	2301      	movs	r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]
  uint16_t d;

  if (ctx->header.func == 0x04) {
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d101      	bne.n	8003cbc <mbus_poll_response+0x30>
    la = 10;
 8003cb8:	230a      	movs	r3, #10
 8003cba:	62bb      	str	r3, [r7, #40]	; 0x28
  }

#if STMODBUS_COUNT_FUNC > 0
  for (int i = 0; i < STMODBUS_COUNT_FUNC; i++) {
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc0:	e014      	b.n	8003cec <mbus_poll_response+0x60>
    if ((ctx->func[i].code == ctx->response.func)) {
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc6:	3206      	adds	r2, #6
 8003cc8:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d107      	bne.n	8003ce6 <mbus_poll_response+0x5a>
      func = ctx->func[i].func;
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	3306      	adds	r3, #6
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4413      	add	r3, r2
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8003ce4:	e005      	b.n	8003cf2 <mbus_poll_response+0x66>
  for (int i = 0; i < STMODBUS_COUNT_FUNC; i++) {
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	3301      	adds	r3, #1
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	2b09      	cmp	r3, #9
 8003cf0:	dde7      	ble.n	8003cc2 <mbus_poll_response+0x36>
    }
  }
#endif
  switch (ctx->header.func) {
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003cf8:	2b0f      	cmp	r3, #15
 8003cfa:	d006      	beq.n	8003d0a <mbus_poll_response+0x7e>
 8003cfc:	2b0f      	cmp	r3, #15
 8003cfe:	dc52      	bgt.n	8003da6 <mbus_poll_response+0x11a>
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d002      	beq.n	8003d0a <mbus_poll_response+0x7e>
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d027      	beq.n	8003d58 <mbus_poll_response+0xcc>
    if ((ctx->header.addr + ctx->header.num) > ctx->conf.discrete) {
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
    }
    break;
  default:
    break;
 8003d08:	e04d      	b.n	8003da6 <mbus_poll_response+0x11a>
    if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0)) {
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <mbus_poll_response+0x94>
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003d1a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003d1e:	d907      	bls.n	8003d30 <mbus_poll_response+0xa4>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 8003d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d24:	2103      	movs	r1, #3
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff ff96 	bl	8003c58 <mbus_response>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	e173      	b.n	8004018 <mbus_poll_response+0x38c>
    if ((ctx->header.addr + ctx->header.num) >= ctx->conf.coils) {
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003d36:	461a      	mov	r2, r3
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003d3e:	4413      	add	r3, r2
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	8852      	ldrh	r2, [r2, #2]
 8003d44:	4293      	cmp	r3, r2
 8003d46:	db30      	blt.n	8003daa <mbus_poll_response+0x11e>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 8003d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4c:	2102      	movs	r1, #2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff ff82 	bl	8003c58 <mbus_response>
 8003d54:	4603      	mov	r3, r0
 8003d56:	e15f      	b.n	8004018 <mbus_poll_response+0x38c>
    if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0)) {
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d005      	beq.n	8003d6e <mbus_poll_response+0xe2>
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003d68:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003d6c:	d907      	bls.n	8003d7e <mbus_poll_response+0xf2>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 8003d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d72:	2103      	movs	r1, #3
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff ff6f 	bl	8003c58 <mbus_response>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	e14c      	b.n	8004018 <mbus_poll_response+0x38c>
    if ((ctx->header.addr + ctx->header.num) > ctx->conf.discrete) {
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003d84:	461a      	mov	r2, r3
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003d8c:	4413      	add	r3, r2
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	8892      	ldrh	r2, [r2, #4]
 8003d92:	4293      	cmp	r3, r2
 8003d94:	dd0b      	ble.n	8003dae <mbus_poll_response+0x122>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 8003d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff ff5b 	bl	8003c58 <mbus_response>
 8003da2:	4603      	mov	r3, r0
 8003da4:	e138      	b.n	8004018 <mbus_poll_response+0x38c>
    break;
 8003da6:	bf00      	nop
 8003da8:	e002      	b.n	8003db0 <mbus_poll_response+0x124>
    break;
 8003daa:	bf00      	nop
 8003dac:	e000      	b.n	8003db0 <mbus_poll_response+0x124>
    break;
 8003dae:	bf00      	nop
  }

  if (func != 0) {
 8003db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d006      	beq.n	8003dc4 <mbus_poll_response+0x138>
    return func(mb_context);
 8003db6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	4798      	blx	r3
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	e129      	b.n	8004018 <mbus_poll_response+0x38c>
  }

  la = mbus_proto_address((Modbus_ConnectFuncType)ctx->header.func, (int*)&read);
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003dca:	f107 020c 	add.w	r2, r7, #12
 8003dce:	4611      	mov	r1, r2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 fb9b 	bl	800450c <mbus_proto_address>
 8003dd6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (la > 0) {
 8003dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	dd06      	ble.n	8003dec <mbus_poll_response+0x160>
    la += ctx->header.addr;
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003de4:	461a      	mov	r2, r3
 8003de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de8:	4413      	add	r3, r2
 8003dea:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  if (la < 50001) {
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003df2:	4293      	cmp	r3, r2
 8003df4:	f300 8109 	bgt.w	800400a <mbus_poll_response+0x37e>
    ctx->conf.sendbuf[0] = ctx->header.devaddr;
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8003e02:	701a      	strb	r2, [r3, #0]
    ctx->conf.sendbuf[1] = ctx->header.func;
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 8003e10:	701a      	strb	r2, [r3, #0]
    ctx->conf.sendbuf[2] = ctx->header.num * 2;
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	3302      	adds	r3, #2
 8003e20:	0052      	lsls	r2, r2, #1
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]
    if (read && ctx->conf.read) {
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d04d      	beq.n	8003ec8 <mbus_poll_response+0x23c>
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d049      	beq.n	8003ec8 <mbus_poll_response+0x23c>
      g_userError = MBUS_RESPONSE_OK;
 8003e34:	4b30      	ldr	r3, [pc, #192]	; (8003ef8 <mbus_poll_response+0x26c>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ctx->header.num; i++) {
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	623b      	str	r3, [r7, #32]
 8003e3e:	e01f      	b.n	8003e80 <mbus_poll_response+0x1f4>
        
        d = ctx->conf.read(la + i);
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e46:	6a3a      	ldr	r2, [r7, #32]
 8003e48:	440a      	add	r2, r1
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	4798      	blx	r3
 8003e4e:	4603      	mov	r3, r0
 8003e50:	82fb      	strh	r3, [r7, #22]
        ctx->conf.sendbuf[3 + (i << 1)] = d >> 8;
 8003e52:	8afb      	ldrh	r3, [r7, #22]
 8003e54:	0a1b      	lsrs	r3, r3, #8
 8003e56:	b299      	uxth	r1, r3
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	6a3a      	ldr	r2, [r7, #32]
 8003e5e:	0052      	lsls	r2, r2, #1
 8003e60:	3203      	adds	r2, #3
 8003e62:	4413      	add	r3, r2
 8003e64:	b2ca      	uxtb	r2, r1
 8003e66:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[3 + (i << 1) + 1] = d & 0xFF;
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	699a      	ldr	r2, [r3, #24]
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	3304      	adds	r3, #4
 8003e72:	4413      	add	r3, r2
 8003e74:	8afa      	ldrh	r2, [r7, #22]
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ctx->header.num; i++) {
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	623b      	str	r3, [r7, #32]
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003e86:	461a      	mov	r2, r3
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	dbd8      	blt.n	8003e40 <mbus_poll_response+0x1b4>
      }
      if (g_userError == MBUS_RESPONSE_OK) {
 8003e8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <mbus_poll_response+0x26c>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10e      	bne.n	8003eb4 <mbus_poll_response+0x228>
          return mbus_send_data(mb_context, 3 + ctx->conf.sendbuf[2]);
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	3302      	adds	r3, #2
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3303      	adds	r3, #3
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 faca 	bl	8004444 <mbus_send_data>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	e0b1      	b.n	8004018 <mbus_poll_response+0x38c>
      }else {
          return mbus_response(mb_context, g_userError);
 8003eb4:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <mbus_poll_response+0x26c>)
 8003eb6:	781a      	ldrb	r2, [r3, #0]
 8003eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff feca 	bl	8003c58 <mbus_response>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	e0a7      	b.n	8004018 <mbus_poll_response+0x38c>
      }
    } else if (ctx->conf.write) {
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 809c 	beq.w	800400a <mbus_poll_response+0x37e>
      uint16_t *value;
      ctx->conf.sendbuf[2] = 0;
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	3302      	adds	r3, #2
 8003ed8:	2200      	movs	r2, #0
 8003eda:	701a      	strb	r2, [r3, #0]
      switch (ctx->header.func) {
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003ee2:	2b06      	cmp	r3, #6
 8003ee4:	dc02      	bgt.n	8003eec <mbus_poll_response+0x260>
 8003ee6:	2b05      	cmp	r3, #5
 8003ee8:	da08      	bge.n	8003efc <mbus_poll_response+0x270>
 8003eea:	e08e      	b.n	800400a <mbus_poll_response+0x37e>
 8003eec:	2b10      	cmp	r3, #16
 8003eee:	d037      	beq.n	8003f60 <mbus_poll_response+0x2d4>
 8003ef0:	e08b      	b.n	800400a <mbus_poll_response+0x37e>
 8003ef2:	bf00      	nop
 8003ef4:	200009b0 	.word	0x200009b0
 8003ef8:	20000a44 	.word	0x20000a44
      case MBUS_FUNC_WRITE_REG:
      case MBUS_FUNC_WRITE_COIL:
        // in both these cases, we should return the same packet that we
        // received. in both cases, the packes have 6 bytes of data + 2 CRC
        // bytes = 8 bytes
        value = (uint16_t *)ctx->conf.recvbuf;
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	613b      	str	r3, [r7, #16]
        ctx->conf.write(la, *value);
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	8812      	ldrh	r2, [r2, #0]
 8003f0c:	4611      	mov	r1, r2
 8003f0e:	4798      	blx	r3
        ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003f16:	0a1b      	lsrs	r3, r3, #8
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	3302      	adds	r3, #2
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	3303      	adds	r3, #3
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[4] = ctx->conf.recvbuf[1];
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	6a1a      	ldr	r2, [r3, #32]
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	7852      	ldrb	r2, [r2, #1]
 8003f40:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[5] = ctx->conf.recvbuf[0];
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	6a1a      	ldr	r2, [r3, #32]
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	3305      	adds	r3, #5
 8003f4c:	7812      	ldrb	r2, [r2, #0]
 8003f4e:	701a      	strb	r2, [r3, #0]
        return mbus_send_data(mb_context, 6);
 8003f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f54:	2106      	movs	r1, #6
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fa74 	bl	8004444 <mbus_send_data>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	e05b      	b.n	8004018 <mbus_poll_response+0x38c>

      case MBUS_FUNC_WRITE_REGS:
    	  for (int i = 0; i < ctx->header.num; i++) {
 8003f60:	2300      	movs	r3, #0
 8003f62:	61fb      	str	r3, [r7, #28]
 8003f64:	e01e      	b.n	8003fa4 <mbus_poll_response+0x318>
    		  uint16_t regvalue = ((uint16_t)ctx->conf.recvbuf[i*2]<<8)|((uint16_t)ctx->conf.recvbuf[i*2+1]);
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	69fa      	ldr	r2, [r7, #28]
 8003f6c:	0052      	lsls	r2, r2, #1
 8003f6e:	4413      	add	r3, r2
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	021b      	lsls	r3, r3, #8
 8003f74:	b21a      	sxth	r2, r3
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	6a19      	ldr	r1, [r3, #32]
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	3301      	adds	r3, #1
 8003f80:	440b      	add	r3, r1
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	b21b      	sxth	r3, r3
 8003f86:	4313      	orrs	r3, r2
 8003f88:	b21b      	sxth	r3, r3
 8003f8a:	82bb      	strh	r3, [r7, #20]
    		  ctx->conf.write(la + i, regvalue);
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	440a      	add	r2, r1
 8003f96:	4610      	mov	r0, r2
 8003f98:	8aba      	ldrh	r2, [r7, #20]
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	4798      	blx	r3
    	  for (int i = 0; i < ctx->header.num; i++) {
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003faa:	461a      	mov	r2, r3
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	dbd9      	blt.n	8003f66 <mbus_poll_response+0x2da>
    	  }
    	  ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003fb8:	0a1b      	lsrs	r3, r3, #8
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	3302      	adds	r3, #2
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]
    	  ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	3303      	adds	r3, #3
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]
    	  ctx->conf.sendbuf[4] = ctx->header.num >> 8;
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003fdc:	0a1b      	lsrs	r3, r3, #8
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	701a      	strb	r2, [r3, #0]
    	  ctx->conf.sendbuf[5] = ctx->header.num & 0xFF;
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	3305      	adds	r3, #5
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]
    	  return mbus_send_data(mb_context, 6);
 8003ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffe:	2106      	movs	r1, #6
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fa1f 	bl	8004444 <mbus_send_data>
 8004006:	4603      	mov	r3, r0
 8004008:	e006      	b.n	8004018 <mbus_poll_response+0x38c>
      } // end of switch
    }
  }
  return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_FUNCTION);
 800400a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400e:	2101      	movs	r1, #1
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff fe21 	bl	8003c58 <mbus_response>
 8004016:	4603      	mov	r3, r0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3730      	adds	r7, #48	; 0x30
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <mbus_poll>:
/*
 * function mbus_close()
 * close modbus context
 * return: none
 */
mbus_status_t mbus_poll(mbus_t mb_context, uint8_t byte) {
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	460a      	mov	r2, r1
 800402a:	71fb      	strb	r3, [r7, #7]
 800402c:	4613      	mov	r3, r2
 800402e:	71bb      	strb	r3, [r7, #6]
  // State machine
  _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8004030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004034:	2294      	movs	r2, #148	; 0x94
 8004036:	fb02 f303 	mul.w	r3, r2, r3
 800403a:	4abf      	ldr	r2, [pc, #764]	; (8004338 <mbus_poll+0x318>)
 800403c:	4413      	add	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]

  if (mbus_tickcount() - ctx->timer > 4) {
 8004040:	f000 faee 	bl	8004620 <mbus_tickcount>
 8004044:	4602      	mov	r2, r0
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b04      	cmp	r3, #4
 800404e:	d904      	bls.n	800405a <mbus_poll+0x3a>
    mbus_flush(mb_context);
 8004050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff fddb 	bl	8003c10 <mbus_flush>
  }
  ctx->timer = mbus_tickcount();
 800405a:	f000 fae1 	bl	8004620 <mbus_tickcount>
 800405e:	4602      	mov	r2, r0
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	62da      	str	r2, [r3, #44]	; 0x2c

  switch (ctx->state) {
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800406a:	2b0e      	cmp	r3, #14
 800406c:	f200 816e 	bhi.w	800434c <mbus_poll+0x32c>
 8004070:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <mbus_poll+0x58>)
 8004072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004076:	bf00      	nop
 8004078:	080040b5 	.word	0x080040b5
 800407c:	0800434d 	.word	0x0800434d
 8004080:	080040d1 	.word	0x080040d1
 8004084:	080041b7 	.word	0x080041b7
 8004088:	0800419f 	.word	0x0800419f
 800408c:	080042d5 	.word	0x080042d5
 8004090:	080042bd 	.word	0x080042bd
 8004094:	0800421b 	.word	0x0800421b
 8004098:	080041f3 	.word	0x080041f3
 800409c:	08004265 	.word	0x08004265
 80040a0:	0800427f 	.word	0x0800427f
 80040a4:	0800432d 	.word	0x0800432d
 80040a8:	0800433d 	.word	0x0800433d
 80040ac:	0800434d 	.word	0x0800434d
 80040b0:	08004347 	.word	0x08004347
  case MBUS_STATE_IDLE:
    mbus_flush(mb_context);
 80040b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff fda9 	bl	8003c10 <mbus_flush>
    ctx->state = MBUS_STATE_FUNCTION;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2202      	movs	r2, #2
 80040c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.devaddr = byte;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	79ba      	ldrb	r2, [r7, #6]
 80040ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    break;
 80040ce:	e146      	b.n	800435e <mbus_poll+0x33e>
  case MBUS_STATE_FUNCTION:
    ctx->header.func = byte;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	79ba      	ldrb	r2, [r7, #6]
 80040d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    switch (byte) {
 80040d8:	79bb      	ldrb	r3, [r7, #6]
 80040da:	3b01      	subs	r3, #1
 80040dc:	2b0f      	cmp	r3, #15
 80040de:	d857      	bhi.n	8004190 <mbus_poll+0x170>
 80040e0:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <mbus_poll+0xc8>)
 80040e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e6:	bf00      	nop
 80040e8:	0800415d 	.word	0x0800415d
 80040ec:	08004191 	.word	0x08004191
 80040f0:	0800415d 	.word	0x0800415d
 80040f4:	0800415d 	.word	0x0800415d
 80040f8:	08004177 	.word	0x08004177
 80040fc:	08004129 	.word	0x08004129
 8004100:	08004191 	.word	0x08004191
 8004104:	08004191 	.word	0x08004191
 8004108:	08004191 	.word	0x08004191
 800410c:	08004191 	.word	0x08004191
 8004110:	08004191 	.word	0x08004191
 8004114:	08004191 	.word	0x08004191
 8004118:	08004191 	.word	0x08004191
 800411c:	08004191 	.word	0x08004191
 8004120:	08004143 	.word	0x08004143
 8004124:	08004143 	.word	0x08004143
    case MBUS_FUNC_WRITE_REG:
      ctx->header.rnum = 1;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->header.num = 1;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2201      	movs	r2, #1
 8004134:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      ctx->state = MBUS_STATE_REGADDR_HI;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2204      	movs	r2, #4
 800413c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      break;
 8004140:	e02c      	b.n	800419c <mbus_poll+0x17c>
    case MBUS_FUNC_WRITE_REGS:
    case MBUS_FUNC_WRITE_COILS:
      ctx->header.rnum = 1;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->header.num = 0;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      ctx->state = MBUS_STATE_REGADDR_HI;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2204      	movs	r2, #4
 8004156:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      break;
 800415a:	e01f      	b.n	800419c <mbus_poll+0x17c>
    case MBUS_FUNC_READ_INPUT_REGS:
    case MBUS_FUNC_READ_COILS:
    case MBUS_FUNC_READ_REGS:
      ctx->state = MBUS_STATE_REGADDR_HI;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2204      	movs	r2, #4
 8004160:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      ctx->header.rnum = 0;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->header.num = 0;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      break;
 8004174:	e012      	b.n	800419c <mbus_poll+0x17c>
    case MBUS_FUNC_WRITE_COIL:
      ctx->header.rnum = 1;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2201      	movs	r2, #1
 800417a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->header.num = 1;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      ctx->state = MBUS_STATE_REGADDR_HI;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2204      	movs	r2, #4
 800418a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      break;
 800418e:	e005      	b.n	800419c <mbus_poll+0x17c>
    default:
      // ctx->state = MBUS_STATE_IDLE;
      mbus_flush(mb_context);
 8004190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff fd3b 	bl	8003c10 <mbus_flush>
      break;
 800419a:	bf00      	nop
    }
    break;
 800419c:	e0df      	b.n	800435e <mbus_poll+0x33e>
  case MBUS_STATE_REGADDR_HI:
    ctx->state = MBUS_STATE_REGADDR_LO;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2203      	movs	r2, #3
 80041a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.addr = byte << 8;
 80041a6:	79bb      	ldrb	r3, [r7, #6]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    break;
 80041b4:	e0d3      	b.n	800435e <mbus_poll+0x33e>
  case MBUS_STATE_REGADDR_LO:
    ctx->header.addr |= byte;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 80041bc:	79bb      	ldrb	r3, [r7, #6]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	4313      	orrs	r3, r2
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    if (ctx->header.num == 1 && ctx->header.rnum == 1) {
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d109      	bne.n	80041e8 <mbus_poll+0x1c8>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d104      	bne.n	80041e8 <mbus_poll+0x1c8>
      ctx->state = MBUS_STATE_DATA_HI;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2208      	movs	r2, #8
 80041e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    } else {
      ctx->state = MBUS_STATE_REGNUM_HI;
    }
    break;
 80041e6:	e0ba      	b.n	800435e <mbus_poll+0x33e>
      ctx->state = MBUS_STATE_REGNUM_HI;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2206      	movs	r2, #6
 80041ec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 80041f0:	e0b5      	b.n	800435e <mbus_poll+0x33e>
  case MBUS_STATE_DATA_HI:
    ctx->state = MBUS_STATE_DATA_LO;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2207      	movs	r2, #7
 80041f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum) + 1] = byte;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a1a      	ldr	r2, [r3, #32]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8004204:	4619      	mov	r1, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800420c:	1acb      	subs	r3, r1, r3
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	3301      	adds	r3, #1
 8004212:	4413      	add	r3, r2
 8004214:	79ba      	ldrb	r2, [r7, #6]
 8004216:	701a      	strb	r2, [r3, #0]
    break;
 8004218:	e0a1      	b.n	800435e <mbus_poll+0x33e>
  case MBUS_STATE_DATA_LO:
    ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum)] = byte;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 8004224:	4611      	mov	r1, r2
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	f8b2 2086 	ldrh.w	r2, [r2, #134]	; 0x86
 800422c:	1a8a      	subs	r2, r1, r2
 800422e:	0052      	lsls	r2, r2, #1
 8004230:	4413      	add	r3, r2
 8004232:	79ba      	ldrb	r2, [r7, #6]
 8004234:	701a      	strb	r2, [r3, #0]
    ctx->header.rnum--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    if (ctx->header.rnum == 0) {
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800424c:	2b00      	cmp	r3, #0
 800424e:	d104      	bne.n	800425a <mbus_poll+0x23a>
      ctx->state = MBUS_STATE_CRC_LO;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	220b      	movs	r2, #11
 8004254:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    } else {
      ctx->state = MBUS_STATE_DATA_HI;
    }
    break;
 8004258:	e081      	b.n	800435e <mbus_poll+0x33e>
      ctx->state = MBUS_STATE_DATA_HI;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2208      	movs	r2, #8
 800425e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8004262:	e07c      	b.n	800435e <mbus_poll+0x33e>
  case MBUS_STATE_DATA_SIZE:
    ctx->state = MBUS_STATE_DATA;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	220a      	movs	r2, #10
 8004268:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.size = byte;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	79ba      	ldrb	r2, [r7, #6]
 8004270:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    ctx->header.rsize = byte;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	79ba      	ldrb	r2, [r7, #6]
 8004278:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    break;
 800427c:	e06f      	b.n	800435e <mbus_poll+0x33e>
  case MBUS_STATE_DATA:
    ctx->conf.recvbuf[ctx->header.size - ctx->header.rsize] = byte;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	f892 2088 	ldrb.w	r2, [r2, #136]	; 0x88
 8004288:	4611      	mov	r1, r2
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	f892 2089 	ldrb.w	r2, [r2, #137]	; 0x89
 8004290:	1a8a      	subs	r2, r1, r2
 8004292:	4413      	add	r3, r2
 8004294:	79ba      	ldrb	r2, [r7, #6]
 8004296:	701a      	strb	r2, [r3, #0]
    ctx->header.rsize--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800429e:	3b01      	subs	r3, #1
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    if (ctx->header.rsize == 0) {
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d152      	bne.n	8004358 <mbus_poll+0x338>
      ctx->state = MBUS_STATE_CRC_LO;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	220b      	movs	r2, #11
 80042b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }
    break;
 80042ba:	e04d      	b.n	8004358 <mbus_poll+0x338>
  case MBUS_STATE_REGNUM_HI:
    ctx->state = MBUS_STATE_REGNUM_LO;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2205      	movs	r2, #5
 80042c0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.num = byte << 8;
 80042c4:	79bb      	ldrb	r3, [r7, #6]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	021b      	lsls	r3, r3, #8
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    break;
 80042d2:	e044      	b.n	800435e <mbus_poll+0x33e>
  case MBUS_STATE_REGNUM_LO:
    ctx->state = MBUS_STATE_CRC_LO;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	220b      	movs	r2, #11
 80042d8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.num |= byte;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80042e2:	79bb      	ldrb	r3, [r7, #6]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	4313      	orrs	r3, r2
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    if (ctx->header.rnum == 0) {
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d104      	bne.n	8004304 <mbus_poll+0x2e4>
      ctx->state = MBUS_STATE_CRC_LO;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	220b      	movs	r2, #11
 80042fe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      if (ctx->header.func == MBUS_FUNC_WRITE_REGS) {
        ctx->state = MBUS_STATE_DATA_SIZE;
      }
    }

    break;
 8004302:	e02b      	b.n	800435c <mbus_poll+0x33c>
      ctx->header.rnum = ctx->header.num;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->state = MBUS_STATE_DATA_HI;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2208      	movs	r2, #8
 8004314:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      if (ctx->header.func == MBUS_FUNC_WRITE_REGS) {
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800431e:	2b10      	cmp	r3, #16
 8004320:	d11c      	bne.n	800435c <mbus_poll+0x33c>
        ctx->state = MBUS_STATE_DATA_SIZE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2209      	movs	r2, #9
 8004326:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 800432a:	e017      	b.n	800435c <mbus_poll+0x33c>
  case MBUS_STATE_CRC_LO:
    ctx->state = MBUS_STATE_CRC_HI;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	220c      	movs	r2, #12
 8004330:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8004334:	e013      	b.n	800435e <mbus_poll+0x33e>
 8004336:	bf00      	nop
 8004338:	200009b0 	.word	0x200009b0
  case MBUS_STATE_CRC_HI:
    ctx->state = MBUS_STATE_FINISH;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	220d      	movs	r2, #13
 8004340:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8004344:	e00b      	b.n	800435e <mbus_poll+0x33e>
  // We can't processing any more before callback not returned
  case MBUS_STATE_RESPONSE:
    return MBUS_ERROR;
 8004346:	f04f 33ff 	mov.w	r3, #4294967295
 800434a:	e04c      	b.n	80043e6 <mbus_poll+0x3c6>
  default:
    mbus_flush(mb_context);
 800434c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff fc5d 	bl	8003c10 <mbus_flush>
    break;
 8004356:	e002      	b.n	800435e <mbus_poll+0x33e>
    break;
 8004358:	bf00      	nop
 800435a:	e000      	b.n	800435e <mbus_poll+0x33e>
    break;
 800435c:	bf00      	nop
  }

  ctx->crc16 = mbus_crc16(ctx->crc16, byte);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004362:	79ba      	ldrb	r2, [r7, #6]
 8004364:	4611      	mov	r1, r2
 8004366:	4618      	mov	r0, r3
 8004368:	f000 f92e 	bl	80045c8 <mbus_crc16>
 800436c:	4603      	mov	r3, r0
 800436e:	461a      	mov	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (ctx->state == MBUS_STATE_FINISH) {
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800437a:	2b0d      	cmp	r3, #13
 800437c:	d132      	bne.n	80043e4 <mbus_poll+0x3c4>
    // CRC error
    if (ctx->crc16 != 0) {
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004382:	2b00      	cmp	r3, #0
 8004384:	d007      	beq.n	8004396 <mbus_poll+0x376>
      mbus_flush(mb_context);
 8004386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fc40 	bl	8003c10 <mbus_flush>
      return MBUS_ERROR;
 8004390:	f04f 33ff 	mov.w	r3, #4294967295
 8004394:	e027      	b.n	80043e6 <mbus_poll+0x3c6>
    }

    // TODO: Add broadcast messages
    if (ctx->header.devaddr == ctx->conf.devaddr) {
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d11a      	bne.n	80043da <mbus_poll+0x3ba>
      ctx->state = MBUS_STATE_RESPONSE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	220e      	movs	r2, #14
 80043a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      if (mbus_poll_response(mb_context) == MBUS_OK) {
 80043ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff fc6b 	bl	8003c8c <mbus_poll_response>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d106      	bne.n	80043ca <mbus_poll+0x3aa>
        mbus_flush(mb_context);
 80043bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fc25 	bl	8003c10 <mbus_flush>
        return MBUS_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	e00d      	b.n	80043e6 <mbus_poll+0x3c6>
      }
      mbus_flush(mb_context);
 80043ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff fc1e 	bl	8003c10 <mbus_flush>
      return MBUS_ERROR;
 80043d4:	f04f 33ff 	mov.w	r3, #4294967295
 80043d8:	e005      	b.n	80043e6 <mbus_poll+0x3c6>
    }
    mbus_flush(mb_context);
 80043da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff fc16 	bl	8003c10 <mbus_flush>
  }
  return MBUS_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop

080043f0 <mbus_send_error>:
  if (g_mbusContext[mb_context].open)
    return (mbus_context_t)&g_mbusContext[mb_context];
  return 0;
}

mbus_status_t mbus_send_error(mbus_t mb_context, Modbus_ResponseType response) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	460a      	mov	r2, r1
 80043fa:	71fb      	strb	r3, [r7, #7]
 80043fc:	4613      	mov	r3, r2
 80043fe:	71bb      	strb	r3, [r7, #6]
  uint16_t *pbuf = (uint16_t *)(g_mbusContext[mb_context].conf.sendbuf + 2);
 8004400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004404:	4a0d      	ldr	r2, [pc, #52]	; (800443c <mbus_send_error+0x4c>)
 8004406:	2194      	movs	r1, #148	; 0x94
 8004408:	fb01 f303 	mul.w	r3, r1, r3
 800440c:	4413      	add	r3, r2
 800440e:	3318      	adds	r3, #24
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3302      	adds	r3, #2
 8004414:	60fb      	str	r3, [r7, #12]
  *pbuf = 0x8300 | (uint8_t)response;
 8004416:	79bb      	ldrb	r3, [r7, #6]
 8004418:	b21a      	sxth	r2, r3
 800441a:	4b09      	ldr	r3, [pc, #36]	; (8004440 <mbus_send_error+0x50>)
 800441c:	4313      	orrs	r3, r2
 800441e:	b21b      	sxth	r3, r3
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	801a      	strh	r2, [r3, #0]
  return mbus_send_data(mb_context, 4);
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	2104      	movs	r1, #4
 800442c:	4618      	mov	r0, r3
 800442e:	f000 f809 	bl	8004444 <mbus_send_data>
 8004432:	4603      	mov	r3, r0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	200009b0 	.word	0x200009b0
 8004440:	ffff8300 	.word	0xffff8300

08004444 <mbus_send_data>:

mbus_status_t mbus_send_data(mbus_t mb_context, uint16_t size) {
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	460a      	mov	r2, r1
 800444e:	71fb      	strb	r3, [r7, #7]
 8004450:	4613      	mov	r3, r2
 8004452:	80bb      	strh	r3, [r7, #4]
  // if size > ( conf.send_sz-2) error
  uint16_t crc32 = 0xFFFF;
 8004454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004458:	82fb      	strh	r3, [r7, #22]
  const _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 800445a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445e:	2294      	movs	r2, #148	; 0x94
 8004460:	fb02 f303 	mul.w	r3, r2, r3
 8004464:	4a28      	ldr	r2, [pc, #160]	; (8004508 <mbus_send_data+0xc4>)
 8004466:	4413      	add	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  uint8_t *pbuf = ctx->conf.sendbuf;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	60bb      	str	r3, [r7, #8]
  if (ctx->conf.send == 0 || pbuf == 0 || ctx->conf.sendbuf_sz < (size + 2))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d008      	beq.n	800448a <mbus_send_data+0x46>
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <mbus_send_data+0x46>
 800447e:	88bb      	ldrh	r3, [r7, #4]
 8004480:	3301      	adds	r3, #1
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	8b92      	ldrh	r2, [r2, #28]
 8004486:	4293      	cmp	r3, r2
 8004488:	db02      	blt.n	8004490 <mbus_send_data+0x4c>
    return MBUS_ERROR;
 800448a:	f04f 33ff 	mov.w	r3, #4294967295
 800448e:	e037      	b.n	8004500 <mbus_send_data+0xbc>
  for (int i = 0; i < size; i++) {
 8004490:	2300      	movs	r3, #0
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	e00d      	b.n	80044b2 <mbus_send_data+0x6e>
    crc32 = mbus_crc16(crc32, pbuf[i]);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	4413      	add	r3, r2
 800449c:	781a      	ldrb	r2, [r3, #0]
 800449e:	8afb      	ldrh	r3, [r7, #22]
 80044a0:	4611      	mov	r1, r2
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 f890 	bl	80045c8 <mbus_crc16>
 80044a8:	4603      	mov	r3, r0
 80044aa:	82fb      	strh	r3, [r7, #22]
  for (int i = 0; i < size; i++) {
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	3301      	adds	r3, #1
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	88bb      	ldrh	r3, [r7, #4]
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	dbed      	blt.n	8004496 <mbus_send_data+0x52>
  }
  pbuf[size++] = crc32 & 0xFF;
 80044ba:	88bb      	ldrh	r3, [r7, #4]
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	80ba      	strh	r2, [r7, #4]
 80044c0:	461a      	mov	r2, r3
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	4413      	add	r3, r2
 80044c6:	8afa      	ldrh	r2, [r7, #22]
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	701a      	strb	r2, [r3, #0]
  pbuf[size++] = (crc32 >> 8);
 80044cc:	8afb      	ldrh	r3, [r7, #22]
 80044ce:	0a1b      	lsrs	r3, r3, #8
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	88bb      	ldrh	r3, [r7, #4]
 80044d4:	1c59      	adds	r1, r3, #1
 80044d6:	80b9      	strh	r1, [r7, #4]
 80044d8:	4619      	mov	r1, r3
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	440b      	add	r3, r1
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	701a      	strb	r2, [r3, #0]

  if (ctx->conf.send(mb_context, pbuf, size) != size)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	88ba      	ldrh	r2, [r7, #4]
 80044e8:	f997 0007 	ldrsb.w	r0, [r7, #7]
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	4798      	blx	r3
 80044f0:	4602      	mov	r2, r0
 80044f2:	88bb      	ldrh	r3, [r7, #4]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d002      	beq.n	80044fe <mbus_send_data+0xba>
    return MBUS_ERROR;
 80044f8:	f04f 33ff 	mov.w	r3, #4294967295
 80044fc:	e000      	b.n	8004500 <mbus_send_data+0xbc>
  return MBUS_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	200009b0 	.word	0x200009b0

0800450c <mbus_proto_address>:
  }
#endif
  return MBUS_ERROR;
}

int mbus_proto_address( Modbus_ConnectFuncType func, int *r) {
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	6039      	str	r1, [r7, #0]
 8004516:	71fb      	strb	r3, [r7, #7]
  int adr = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]
  *r = 1;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2201      	movs	r2, #1
 8004520:	601a      	str	r2, [r3, #0]
  switch (func) {
 8004522:	79fb      	ldrb	r3, [r7, #7]
 8004524:	3b01      	subs	r3, #1
 8004526:	2b16      	cmp	r3, #22
 8004528:	d845      	bhi.n	80045b6 <mbus_proto_address+0xaa>
 800452a:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <mbus_proto_address+0x24>)
 800452c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004530:	080045b1 	.word	0x080045b1
 8004534:	080045a3 	.word	0x080045a3
 8004538:	08004593 	.word	0x08004593
 800453c:	0800459b 	.word	0x0800459b
 8004540:	080045ab 	.word	0x080045ab
 8004544:	0800458d 	.word	0x0800458d
 8004548:	080045b7 	.word	0x080045b7
 800454c:	080045b7 	.word	0x080045b7
 8004550:	080045b7 	.word	0x080045b7
 8004554:	080045b7 	.word	0x080045b7
 8004558:	080045b7 	.word	0x080045b7
 800455c:	080045b7 	.word	0x080045b7
 8004560:	080045b7 	.word	0x080045b7
 8004564:	080045b7 	.word	0x080045b7
 8004568:	080045ab 	.word	0x080045ab
 800456c:	0800458d 	.word	0x0800458d
 8004570:	080045b7 	.word	0x080045b7
 8004574:	080045b7 	.word	0x080045b7
 8004578:	080045b7 	.word	0x080045b7
 800457c:	080045b7 	.word	0x080045b7
 8004580:	080045b7 	.word	0x080045b7
 8004584:	0800458d 	.word	0x0800458d
 8004588:	0800458d 	.word	0x0800458d
  case MBUS_FUNC_WRITE_REG:
  case MBUS_FUNC_WRITE_REGS:
  case MBUS_FUNC_READ_WRITE_MASK_REGS:
  case MBUS_FUNC_READ_WRITE_REGS:
    *r = 0;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
  case MBUS_FUNC_READ_REGS:
    adr = 40001;
 8004592:	f649 4341 	movw	r3, #40001	; 0x9c41
 8004596:	60fb      	str	r3, [r7, #12]
    break;
 8004598:	e00e      	b.n	80045b8 <mbus_proto_address+0xac>
  case MBUS_FUNC_READ_INPUT_REGS:
    adr = 30001;
 800459a:	f247 5331 	movw	r3, #30001	; 0x7531
 800459e:	60fb      	str	r3, [r7, #12]
    break;
 80045a0:	e00a      	b.n	80045b8 <mbus_proto_address+0xac>
  case MBUS_FUNC_READ_DISCRETE:
    adr = 10001;
 80045a2:	f242 7311 	movw	r3, #10001	; 0x2711
 80045a6:	60fb      	str	r3, [r7, #12]
    break;
 80045a8:	e006      	b.n	80045b8 <mbus_proto_address+0xac>
  case MBUS_FUNC_WRITE_COILS:
  case MBUS_FUNC_WRITE_COIL:
    *r = 0;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
  case MBUS_FUNC_READ_COILS:
    adr = 0001;
 80045b0:	2301      	movs	r3, #1
 80045b2:	60fb      	str	r3, [r7, #12]
    break;
 80045b4:	e000      	b.n	80045b8 <mbus_proto_address+0xac>
  default:
    break;
 80045b6:	bf00      	nop
  }
  return adr;
 80045b8:	68fb      	ldr	r3, [r7, #12]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop

080045c8 <mbus_crc16>:
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}

*/

uint16_t mbus_crc16(uint16_t crc16, uint8_t byte) {
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	460a      	mov	r2, r1
 80045d2:	80fb      	strh	r3, [r7, #6]
 80045d4:	4613      	mov	r3, r2
 80045d6:	717b      	strb	r3, [r7, #5]
  const int index = (crc16 & 0xFF) ^ byte;
 80045d8:	88fb      	ldrh	r3, [r7, #6]
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	797b      	ldrb	r3, [r7, #5]
 80045de:	4053      	eors	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
  return (aucCRCLo[index] << 8) | ((crc16 >> 8) ^ aucCRCHi[index]);
 80045e2:	4a0d      	ldr	r2, [pc, #52]	; (8004618 <mbus_crc16+0x50>)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4413      	add	r3, r2
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	021b      	lsls	r3, r3, #8
 80045ec:	b21a      	sxth	r2, r3
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	0a1b      	lsrs	r3, r3, #8
 80045f2:	b299      	uxth	r1, r3
 80045f4:	4809      	ldr	r0, [pc, #36]	; (800461c <mbus_crc16+0x54>)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4403      	add	r3, r0
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	404b      	eors	r3, r1
 8004600:	b29b      	uxth	r3, r3
 8004602:	b21b      	sxth	r3, r3
 8004604:	4313      	orrs	r3, r2
 8004606:	b21b      	sxth	r3, r3
 8004608:	b29b      	uxth	r3, r3
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	0800d44c 	.word	0x0800d44c
 800461c:	0800d34c 	.word	0x0800d34c

08004620 <mbus_tickcount>:

uint32_t mbus_tickcount() { return 0; }
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
 8004624:	2300      	movs	r3, #0
 8004626:	4618      	mov	r0, r3
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004634:	4b0e      	ldr	r3, [pc, #56]	; (8004670 <HAL_Init+0x40>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a0d      	ldr	r2, [pc, #52]	; (8004670 <HAL_Init+0x40>)
 800463a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800463e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <HAL_Init+0x40>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a0a      	ldr	r2, [pc, #40]	; (8004670 <HAL_Init+0x40>)
 8004646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800464a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800464c:	4b08      	ldr	r3, [pc, #32]	; (8004670 <HAL_Init+0x40>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a07      	ldr	r2, [pc, #28]	; (8004670 <HAL_Init+0x40>)
 8004652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004658:	2003      	movs	r0, #3
 800465a:	f000 fd41 	bl	80050e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800465e:	200f      	movs	r0, #15
 8004660:	f000 f808 	bl	8004674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004664:	f7fd ff20 	bl	80024a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40023c00 	.word	0x40023c00

08004674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800467c:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <HAL_InitTick+0x54>)
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	4b12      	ldr	r3, [pc, #72]	; (80046cc <HAL_InitTick+0x58>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	4619      	mov	r1, r3
 8004686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800468a:	fbb3 f3f1 	udiv	r3, r3, r1
 800468e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fd67 	bl	8005166 <HAL_SYSTICK_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e00e      	b.n	80046c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b0f      	cmp	r3, #15
 80046a6:	d80a      	bhi.n	80046be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046a8:	2200      	movs	r2, #0
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	f04f 30ff 	mov.w	r0, #4294967295
 80046b0:	f000 fd21 	bl	80050f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046b4:	4a06      	ldr	r2, [pc, #24]	; (80046d0 <HAL_InitTick+0x5c>)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	e000      	b.n	80046c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	200000b0 	.word	0x200000b0
 80046cc:	200000b8 	.word	0x200000b8
 80046d0:	200000b4 	.word	0x200000b4

080046d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046d8:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <HAL_IncTick+0x20>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <HAL_IncTick+0x24>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4413      	add	r3, r2
 80046e4:	4a04      	ldr	r2, [pc, #16]	; (80046f8 <HAL_IncTick+0x24>)
 80046e6:	6013      	str	r3, [r2, #0]
}
 80046e8:	bf00      	nop
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	200000b8 	.word	0x200000b8
 80046f8:	20000a48 	.word	0x20000a48

080046fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004700:	4b03      	ldr	r3, [pc, #12]	; (8004710 <HAL_GetTick+0x14>)
 8004702:	681b      	ldr	r3, [r3, #0]
}
 8004704:	4618      	mov	r0, r3
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	20000a48 	.word	0x20000a48

08004714 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e033      	b.n	8004792 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fd fee4 	bl	8002500 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f003 0310 	and.w	r3, r3, #16
 800474e:	2b00      	cmp	r3, #0
 8004750:	d118      	bne.n	8004784 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800475a:	f023 0302 	bic.w	r3, r3, #2
 800475e:	f043 0202 	orr.w	r2, r3, #2
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fa48 	bl	8004bfc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	f023 0303 	bic.w	r3, r3, #3
 800477a:	f043 0201 	orr.w	r2, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	641a      	str	r2, [r3, #64]	; 0x40
 8004782:	e001      	b.n	8004788 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004790:	7bfb      	ldrb	r3, [r7, #15]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_ADC_Start_DMA+0x1e>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e0ce      	b.n	8004958 <HAL_ADC_Start_DMA+0x1bc>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d018      	beq.n	8004802 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80047e0:	4b5f      	ldr	r3, [pc, #380]	; (8004960 <HAL_ADC_Start_DMA+0x1c4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a5f      	ldr	r2, [pc, #380]	; (8004964 <HAL_ADC_Start_DMA+0x1c8>)
 80047e6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ea:	0c9a      	lsrs	r2, r3, #18
 80047ec:	4613      	mov	r3, r2
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	4413      	add	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80047f4:	e002      	b.n	80047fc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f9      	bne.n	80047f6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004810:	d107      	bne.n	8004822 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004820:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b01      	cmp	r3, #1
 800482e:	f040 8086 	bne.w	800493e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800483a:	f023 0301 	bic.w	r3, r3, #1
 800483e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004850:	2b00      	cmp	r3, #0
 8004852:	d007      	beq.n	8004864 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800485c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800486c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004870:	d106      	bne.n	8004880 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004876:	f023 0206 	bic.w	r2, r3, #6
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	645a      	str	r2, [r3, #68]	; 0x44
 800487e:	e002      	b.n	8004886 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800488e:	4b36      	ldr	r3, [pc, #216]	; (8004968 <HAL_ADC_Start_DMA+0x1cc>)
 8004890:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	4a35      	ldr	r2, [pc, #212]	; (800496c <HAL_ADC_Start_DMA+0x1d0>)
 8004898:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	4a34      	ldr	r2, [pc, #208]	; (8004970 <HAL_ADC_Start_DMA+0x1d4>)
 80048a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	4a33      	ldr	r2, [pc, #204]	; (8004974 <HAL_ADC_Start_DMA+0x1d8>)
 80048a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80048b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80048c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	334c      	adds	r3, #76	; 0x4c
 80048de:	4619      	mov	r1, r3
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f000 fd58 	bl	8005398 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 031f 	and.w	r3, r3, #31
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10f      	bne.n	8004914 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d129      	bne.n	8004956 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004910:	609a      	str	r2, [r3, #8]
 8004912:	e020      	b.n	8004956 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a17      	ldr	r2, [pc, #92]	; (8004978 <HAL_ADC_Start_DMA+0x1dc>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d11b      	bne.n	8004956 <HAL_ADC_Start_DMA+0x1ba>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d114      	bne.n	8004956 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800493a:	609a      	str	r2, [r3, #8]
 800493c:	e00b      	b.n	8004956 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f043 0210 	orr.w	r2, r3, #16
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494e:	f043 0201 	orr.w	r2, r3, #1
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	200000b0 	.word	0x200000b0
 8004964:	431bde83 	.word	0x431bde83
 8004968:	40012300 	.word	0x40012300
 800496c:	08004df5 	.word	0x08004df5
 8004970:	08004eaf 	.word	0x08004eaf
 8004974:	08004ecb 	.word	0x08004ecb
 8004978:	40012000 	.word	0x40012000

0800497c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_ADC_ConfigChannel+0x1c>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e105      	b.n	8004be0 <HAL_ADC_ConfigChannel+0x228>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b09      	cmp	r3, #9
 80049e2:	d925      	bls.n	8004a30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68d9      	ldr	r1, [r3, #12]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	4613      	mov	r3, r2
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	4413      	add	r3, r2
 80049f8:	3b1e      	subs	r3, #30
 80049fa:	2207      	movs	r2, #7
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	43da      	mvns	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	400a      	ands	r2, r1
 8004a08:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68d9      	ldr	r1, [r3, #12]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	4403      	add	r3, r0
 8004a22:	3b1e      	subs	r3, #30
 8004a24:	409a      	lsls	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	60da      	str	r2, [r3, #12]
 8004a2e:	e022      	b.n	8004a76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6919      	ldr	r1, [r3, #16]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	4613      	mov	r3, r2
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	4413      	add	r3, r2
 8004a44:	2207      	movs	r2, #7
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	43da      	mvns	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	400a      	ands	r2, r1
 8004a52:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6919      	ldr	r1, [r3, #16]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	4618      	mov	r0, r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	4403      	add	r3, r0
 8004a6c:	409a      	lsls	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b06      	cmp	r3, #6
 8004a7c:	d824      	bhi.n	8004ac8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3b05      	subs	r3, #5
 8004a90:	221f      	movs	r2, #31
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	43da      	mvns	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	400a      	ands	r2, r1
 8004a9e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	4618      	mov	r0, r3
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	3b05      	subs	r3, #5
 8004aba:	fa00 f203 	lsl.w	r2, r0, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	635a      	str	r2, [r3, #52]	; 0x34
 8004ac6:	e04c      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	2b0c      	cmp	r3, #12
 8004ace:	d824      	bhi.n	8004b1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	4613      	mov	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	3b23      	subs	r3, #35	; 0x23
 8004ae2:	221f      	movs	r2, #31
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	43da      	mvns	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	400a      	ands	r2, r1
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	4618      	mov	r0, r3
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	3b23      	subs	r3, #35	; 0x23
 8004b0c:	fa00 f203 	lsl.w	r2, r0, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30
 8004b18:	e023      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	3b41      	subs	r3, #65	; 0x41
 8004b2c:	221f      	movs	r2, #31
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	43da      	mvns	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	400a      	ands	r2, r1
 8004b3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	4618      	mov	r0, r3
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	3b41      	subs	r3, #65	; 0x41
 8004b56:	fa00 f203 	lsl.w	r2, r0, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b62:	4b22      	ldr	r3, [pc, #136]	; (8004bec <HAL_ADC_ConfigChannel+0x234>)
 8004b64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a21      	ldr	r2, [pc, #132]	; (8004bf0 <HAL_ADC_ConfigChannel+0x238>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d109      	bne.n	8004b84 <HAL_ADC_ConfigChannel+0x1cc>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b12      	cmp	r3, #18
 8004b76:	d105      	bne.n	8004b84 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a19      	ldr	r2, [pc, #100]	; (8004bf0 <HAL_ADC_ConfigChannel+0x238>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d123      	bne.n	8004bd6 <HAL_ADC_ConfigChannel+0x21e>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d003      	beq.n	8004b9e <HAL_ADC_ConfigChannel+0x1e6>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b11      	cmp	r3, #17
 8004b9c:	d11b      	bne.n	8004bd6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b10      	cmp	r3, #16
 8004bb0:	d111      	bne.n	8004bd6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004bb2:	4b10      	ldr	r3, [pc, #64]	; (8004bf4 <HAL_ADC_ConfigChannel+0x23c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a10      	ldr	r2, [pc, #64]	; (8004bf8 <HAL_ADC_ConfigChannel+0x240>)
 8004bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbc:	0c9a      	lsrs	r2, r3, #18
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004bc8:	e002      	b.n	8004bd0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1f9      	bne.n	8004bca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	40012300 	.word	0x40012300
 8004bf0:	40012000 	.word	0x40012000
 8004bf4:	200000b0 	.word	0x200000b0
 8004bf8:	431bde83 	.word	0x431bde83

08004bfc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c04:	4b79      	ldr	r3, [pc, #484]	; (8004dec <ADC_Init+0x1f0>)
 8004c06:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6859      	ldr	r1, [r3, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	021a      	lsls	r2, r3, #8
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004c54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6859      	ldr	r1, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6899      	ldr	r1, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	4a58      	ldr	r2, [pc, #352]	; (8004df0 <ADC_Init+0x1f4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d022      	beq.n	8004cda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ca2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6899      	ldr	r1, [r3, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004cc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6899      	ldr	r1, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	609a      	str	r2, [r3, #8]
 8004cd8:	e00f      	b.n	8004cfa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ce8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004cf8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0202 	bic.w	r2, r2, #2
 8004d08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6899      	ldr	r1, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	7e1b      	ldrb	r3, [r3, #24]
 8004d14:	005a      	lsls	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01b      	beq.n	8004d60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004d46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6859      	ldr	r1, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	3b01      	subs	r3, #1
 8004d54:	035a      	lsls	r2, r3, #13
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
 8004d5e:	e007      	b.n	8004d70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	051a      	lsls	r2, r3, #20
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004da4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6899      	ldr	r1, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004db2:	025a      	lsls	r2, r3, #9
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6899      	ldr	r1, [r3, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	029a      	lsls	r2, r3, #10
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	609a      	str	r2, [r3, #8]
}
 8004de0:	bf00      	nop
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	40012300 	.word	0x40012300
 8004df0:	0f000001 	.word	0x0f000001

08004df4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d13c      	bne.n	8004e88 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d12b      	bne.n	8004e80 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d127      	bne.n	8004e80 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e36:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d006      	beq.n	8004e4c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d119      	bne.n	8004e80 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0220 	bic.w	r2, r2, #32
 8004e5a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d105      	bne.n	8004e80 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	f043 0201 	orr.w	r2, r3, #1
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f7ff fd7b 	bl	800497c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e86:	e00e      	b.n	8004ea6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	f003 0310 	and.w	r3, r3, #16
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f7ff fd85 	bl	80049a4 <HAL_ADC_ErrorCallback>
}
 8004e9a:	e004      	b.n	8004ea6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	4798      	blx	r3
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f7ff fd67 	bl	8004990 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2240      	movs	r2, #64	; 0x40
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee2:	f043 0204 	orr.w	r2, r3, #4
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f7ff fd5a 	bl	80049a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ef0:	bf00      	nop
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f08:	4b0c      	ldr	r3, [pc, #48]	; (8004f3c <__NVIC_SetPriorityGrouping+0x44>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f14:	4013      	ands	r3, r2
 8004f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f2a:	4a04      	ldr	r2, [pc, #16]	; (8004f3c <__NVIC_SetPriorityGrouping+0x44>)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	60d3      	str	r3, [r2, #12]
}
 8004f30:	bf00      	nop
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	e000ed00 	.word	0xe000ed00

08004f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f44:	4b04      	ldr	r3, [pc, #16]	; (8004f58 <__NVIC_GetPriorityGrouping+0x18>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	0a1b      	lsrs	r3, r3, #8
 8004f4a:	f003 0307 	and.w	r3, r3, #7
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	e000ed00 	.word	0xe000ed00

08004f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	4603      	mov	r3, r0
 8004f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	db0b      	blt.n	8004f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f6e:	79fb      	ldrb	r3, [r7, #7]
 8004f70:	f003 021f 	and.w	r2, r3, #31
 8004f74:	4907      	ldr	r1, [pc, #28]	; (8004f94 <__NVIC_EnableIRQ+0x38>)
 8004f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	e000e100 	.word	0xe000e100

08004f98 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	db12      	blt.n	8004fd0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	f003 021f 	and.w	r2, r3, #31
 8004fb0:	490a      	ldr	r1, [pc, #40]	; (8004fdc <__NVIC_DisableIRQ+0x44>)
 8004fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	2001      	movs	r0, #1
 8004fba:	fa00 f202 	lsl.w	r2, r0, r2
 8004fbe:	3320      	adds	r3, #32
 8004fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004fc4:	f3bf 8f4f 	dsb	sy
}
 8004fc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004fca:	f3bf 8f6f 	isb	sy
}
 8004fce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	e000e100 	.word	0xe000e100

08004fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	6039      	str	r1, [r7, #0]
 8004fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	db0a      	blt.n	800500a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	490c      	ldr	r1, [pc, #48]	; (800502c <__NVIC_SetPriority+0x4c>)
 8004ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ffe:	0112      	lsls	r2, r2, #4
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	440b      	add	r3, r1
 8005004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005008:	e00a      	b.n	8005020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	b2da      	uxtb	r2, r3
 800500e:	4908      	ldr	r1, [pc, #32]	; (8005030 <__NVIC_SetPriority+0x50>)
 8005010:	79fb      	ldrb	r3, [r7, #7]
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	3b04      	subs	r3, #4
 8005018:	0112      	lsls	r2, r2, #4
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	440b      	add	r3, r1
 800501e:	761a      	strb	r2, [r3, #24]
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	e000e100 	.word	0xe000e100
 8005030:	e000ed00 	.word	0xe000ed00

08005034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005034:	b480      	push	{r7}
 8005036:	b089      	sub	sp, #36	; 0x24
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f1c3 0307 	rsb	r3, r3, #7
 800504e:	2b04      	cmp	r3, #4
 8005050:	bf28      	it	cs
 8005052:	2304      	movcs	r3, #4
 8005054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	3304      	adds	r3, #4
 800505a:	2b06      	cmp	r3, #6
 800505c:	d902      	bls.n	8005064 <NVIC_EncodePriority+0x30>
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	3b03      	subs	r3, #3
 8005062:	e000      	b.n	8005066 <NVIC_EncodePriority+0x32>
 8005064:	2300      	movs	r3, #0
 8005066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005068:	f04f 32ff 	mov.w	r2, #4294967295
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	fa02 f303 	lsl.w	r3, r2, r3
 8005072:	43da      	mvns	r2, r3
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	401a      	ands	r2, r3
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800507c:	f04f 31ff 	mov.w	r1, #4294967295
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	fa01 f303 	lsl.w	r3, r1, r3
 8005086:	43d9      	mvns	r1, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800508c:	4313      	orrs	r3, r2
         );
}
 800508e:	4618      	mov	r0, r3
 8005090:	3724      	adds	r7, #36	; 0x24
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
	...

0800509c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050ac:	d301      	bcc.n	80050b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050ae:	2301      	movs	r3, #1
 80050b0:	e00f      	b.n	80050d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050b2:	4a0a      	ldr	r2, [pc, #40]	; (80050dc <SysTick_Config+0x40>)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050ba:	210f      	movs	r1, #15
 80050bc:	f04f 30ff 	mov.w	r0, #4294967295
 80050c0:	f7ff ff8e 	bl	8004fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050c4:	4b05      	ldr	r3, [pc, #20]	; (80050dc <SysTick_Config+0x40>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050ca:	4b04      	ldr	r3, [pc, #16]	; (80050dc <SysTick_Config+0x40>)
 80050cc:	2207      	movs	r2, #7
 80050ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	e000e010 	.word	0xe000e010

080050e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff ff05 	bl	8004ef8 <__NVIC_SetPriorityGrouping>
}
 80050ee:	bf00      	nop
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b086      	sub	sp, #24
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	4603      	mov	r3, r0
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	607a      	str	r2, [r7, #4]
 8005102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005108:	f7ff ff1a 	bl	8004f40 <__NVIC_GetPriorityGrouping>
 800510c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	6978      	ldr	r0, [r7, #20]
 8005114:	f7ff ff8e 	bl	8005034 <NVIC_EncodePriority>
 8005118:	4602      	mov	r2, r0
 800511a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800511e:	4611      	mov	r1, r2
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff ff5d 	bl	8004fe0 <__NVIC_SetPriority>
}
 8005126:	bf00      	nop
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b082      	sub	sp, #8
 8005132:	af00      	add	r7, sp, #0
 8005134:	4603      	mov	r3, r0
 8005136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff ff0d 	bl	8004f5c <__NVIC_EnableIRQ>
}
 8005142:	bf00      	nop
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	4603      	mov	r3, r0
 8005152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff ff1d 	bl	8004f98 <__NVIC_DisableIRQ>
}
 800515e:	bf00      	nop
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7ff ff94 	bl	800509c <SysTick_Config>
 8005174:	4603      	mov	r3, r0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800518c:	f7ff fab6 	bl	80046fc <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e099      	b.n	80052d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0201 	bic.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051bc:	e00f      	b.n	80051de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051be:	f7ff fa9d 	bl	80046fc <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b05      	cmp	r3, #5
 80051ca:	d908      	bls.n	80051de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2220      	movs	r2, #32
 80051d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2203      	movs	r2, #3
 80051d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e078      	b.n	80052d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e8      	bne.n	80051be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	4b38      	ldr	r3, [pc, #224]	; (80052d8 <HAL_DMA_Init+0x158>)
 80051f8:	4013      	ands	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800520a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005216:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005222:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	2b04      	cmp	r3, #4
 8005236:	d107      	bne.n	8005248 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005240:	4313      	orrs	r3, r2
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f023 0307 	bic.w	r3, r3, #7
 800525e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	2b04      	cmp	r3, #4
 8005270:	d117      	bne.n	80052a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00e      	beq.n	80052a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fb5f 	bl	8005948 <DMA_CheckFifoParam>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d008      	beq.n	80052a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2240      	movs	r2, #64	; 0x40
 8005294:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800529e:	2301      	movs	r3, #1
 80052a0:	e016      	b.n	80052d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fb16 	bl	80058dc <DMA_CalcBaseAndBitshift>
 80052b0:	4603      	mov	r3, r0
 80052b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b8:	223f      	movs	r2, #63	; 0x3f
 80052ba:	409a      	lsls	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3718      	adds	r7, #24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	f010803f 	.word	0xf010803f

080052dc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e050      	b.n	8005390 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d101      	bne.n	80052fe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80052fa:	2302      	movs	r3, #2
 80052fc:	e048      	b.n	8005390 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0201 	bic.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2200      	movs	r2, #0
 800531c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2200      	movs	r2, #0
 8005324:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2200      	movs	r2, #0
 800532c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2200      	movs	r2, #0
 8005334:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2221      	movs	r2, #33	; 0x21
 800533c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 facc 	bl	80058dc <DMA_CalcBaseAndBitshift>
 8005344:	4603      	mov	r3, r0
 8005346:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005370:	223f      	movs	r2, #63	; 0x3f
 8005372:	409a      	lsls	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_DMA_Start_IT+0x26>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e040      	b.n	8005440 <HAL_DMA_Start_IT+0xa8>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d12f      	bne.n	8005432 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2202      	movs	r2, #2
 80053d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	68b9      	ldr	r1, [r7, #8]
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 fa4a 	bl	8005880 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f0:	223f      	movs	r2, #63	; 0x3f
 80053f2:	409a      	lsls	r2, r3
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0216 	orr.w	r2, r2, #22
 8005406:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540c:	2b00      	cmp	r3, #0
 800540e:	d007      	beq.n	8005420 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0208 	orr.w	r2, r2, #8
 800541e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0201 	orr.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	e005      	b.n	800543e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800543a:	2302      	movs	r3, #2
 800543c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800543e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005454:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005456:	f7ff f951 	bl	80046fc <HAL_GetTick>
 800545a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d008      	beq.n	800547a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2280      	movs	r2, #128	; 0x80
 800546c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e052      	b.n	8005520 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0216 	bic.w	r2, r2, #22
 8005488:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695a      	ldr	r2, [r3, #20]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005498:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d103      	bne.n	80054aa <HAL_DMA_Abort+0x62>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d007      	beq.n	80054ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0208 	bic.w	r2, r2, #8
 80054b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0201 	bic.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054ca:	e013      	b.n	80054f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054cc:	f7ff f916 	bl	80046fc <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b05      	cmp	r3, #5
 80054d8:	d90c      	bls.n	80054f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2220      	movs	r2, #32
 80054de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2203      	movs	r2, #3
 80054e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e015      	b.n	8005520 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e4      	bne.n	80054cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005506:	223f      	movs	r2, #63	; 0x3f
 8005508:	409a      	lsls	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d004      	beq.n	8005546 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2280      	movs	r2, #128	; 0x80
 8005540:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e00c      	b.n	8005560 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2205      	movs	r2, #5
 800554a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0201 	bic.w	r2, r2, #1
 800555c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005578:	4b8e      	ldr	r3, [pc, #568]	; (80057b4 <HAL_DMA_IRQHandler+0x248>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a8e      	ldr	r2, [pc, #568]	; (80057b8 <HAL_DMA_IRQHandler+0x24c>)
 800557e:	fba2 2303 	umull	r2, r3, r2, r3
 8005582:	0a9b      	lsrs	r3, r3, #10
 8005584:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800558a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005596:	2208      	movs	r2, #8
 8005598:	409a      	lsls	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4013      	ands	r3, r2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d01a      	beq.n	80055d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d013      	beq.n	80055d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0204 	bic.w	r2, r2, #4
 80055be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055c4:	2208      	movs	r2, #8
 80055c6:	409a      	lsls	r2, r3
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d0:	f043 0201 	orr.w	r2, r3, #1
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055dc:	2201      	movs	r2, #1
 80055de:	409a      	lsls	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4013      	ands	r3, r2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d012      	beq.n	800560e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00b      	beq.n	800560e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fa:	2201      	movs	r2, #1
 80055fc:	409a      	lsls	r2, r3
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005606:	f043 0202 	orr.w	r2, r3, #2
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005612:	2204      	movs	r2, #4
 8005614:	409a      	lsls	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4013      	ands	r3, r2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d012      	beq.n	8005644 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00b      	beq.n	8005644 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005630:	2204      	movs	r2, #4
 8005632:	409a      	lsls	r2, r3
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563c:	f043 0204 	orr.w	r2, r3, #4
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005648:	2210      	movs	r2, #16
 800564a:	409a      	lsls	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4013      	ands	r3, r2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d043      	beq.n	80056dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b00      	cmp	r3, #0
 8005660:	d03c      	beq.n	80056dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005666:	2210      	movs	r2, #16
 8005668:	409a      	lsls	r2, r3
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d018      	beq.n	80056ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d108      	bne.n	800569c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	d024      	beq.n	80056dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	4798      	blx	r3
 800569a:	e01f      	b.n	80056dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d01b      	beq.n	80056dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	4798      	blx	r3
 80056ac:	e016      	b.n	80056dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d107      	bne.n	80056cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0208 	bic.w	r2, r2, #8
 80056ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e0:	2220      	movs	r2, #32
 80056e2:	409a      	lsls	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4013      	ands	r3, r2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 808f 	beq.w	800580c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0310 	and.w	r3, r3, #16
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 8087 	beq.w	800580c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005702:	2220      	movs	r2, #32
 8005704:	409a      	lsls	r2, r3
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b05      	cmp	r3, #5
 8005714:	d136      	bne.n	8005784 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0216 	bic.w	r2, r2, #22
 8005724:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	695a      	ldr	r2, [r3, #20]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005734:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	2b00      	cmp	r3, #0
 800573c:	d103      	bne.n	8005746 <HAL_DMA_IRQHandler+0x1da>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005742:	2b00      	cmp	r3, #0
 8005744:	d007      	beq.n	8005756 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0208 	bic.w	r2, r2, #8
 8005754:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575a:	223f      	movs	r2, #63	; 0x3f
 800575c:	409a      	lsls	r2, r3
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005776:	2b00      	cmp	r3, #0
 8005778:	d07e      	beq.n	8005878 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	4798      	blx	r3
        }
        return;
 8005782:	e079      	b.n	8005878 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d01d      	beq.n	80057ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10d      	bne.n	80057bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d031      	beq.n	800580c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	4798      	blx	r3
 80057b0:	e02c      	b.n	800580c <HAL_DMA_IRQHandler+0x2a0>
 80057b2:	bf00      	nop
 80057b4:	200000b0 	.word	0x200000b0
 80057b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d023      	beq.n	800580c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	4798      	blx	r3
 80057cc:	e01e      	b.n	800580c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10f      	bne.n	80057fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0210 	bic.w	r2, r2, #16
 80057ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005810:	2b00      	cmp	r3, #0
 8005812:	d032      	beq.n	800587a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d022      	beq.n	8005866 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2205      	movs	r2, #5
 8005824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0201 	bic.w	r2, r2, #1
 8005836:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	3301      	adds	r3, #1
 800583c:	60bb      	str	r3, [r7, #8]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	429a      	cmp	r2, r3
 8005842:	d307      	bcc.n	8005854 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1f2      	bne.n	8005838 <HAL_DMA_IRQHandler+0x2cc>
 8005852:	e000      	b.n	8005856 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005854:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800586a:	2b00      	cmp	r3, #0
 800586c:	d005      	beq.n	800587a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	4798      	blx	r3
 8005876:	e000      	b.n	800587a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005878:	bf00      	nop
    }
  }
}
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800589c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	2b40      	cmp	r3, #64	; 0x40
 80058ac:	d108      	bne.n	80058c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80058be:	e007      	b.n	80058d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	60da      	str	r2, [r3, #12]
}
 80058d0:	bf00      	nop
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	3b10      	subs	r3, #16
 80058ec:	4a14      	ldr	r2, [pc, #80]	; (8005940 <DMA_CalcBaseAndBitshift+0x64>)
 80058ee:	fba2 2303 	umull	r2, r3, r2, r3
 80058f2:	091b      	lsrs	r3, r3, #4
 80058f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80058f6:	4a13      	ldr	r2, [pc, #76]	; (8005944 <DMA_CalcBaseAndBitshift+0x68>)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b03      	cmp	r3, #3
 8005908:	d909      	bls.n	800591e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005912:	f023 0303 	bic.w	r3, r3, #3
 8005916:	1d1a      	adds	r2, r3, #4
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	659a      	str	r2, [r3, #88]	; 0x58
 800591c:	e007      	b.n	800592e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005926:	f023 0303 	bic.w	r3, r3, #3
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005932:	4618      	mov	r0, r3
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	aaaaaaab 	.word	0xaaaaaaab
 8005944:	0800d54c 	.word	0x0800d54c

08005948 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005958:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d11f      	bne.n	80059a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b03      	cmp	r3, #3
 8005966:	d856      	bhi.n	8005a16 <DMA_CheckFifoParam+0xce>
 8005968:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <DMA_CheckFifoParam+0x28>)
 800596a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596e:	bf00      	nop
 8005970:	08005981 	.word	0x08005981
 8005974:	08005993 	.word	0x08005993
 8005978:	08005981 	.word	0x08005981
 800597c:	08005a17 	.word	0x08005a17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d046      	beq.n	8005a1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005990:	e043      	b.n	8005a1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800599a:	d140      	bne.n	8005a1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059a0:	e03d      	b.n	8005a1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059aa:	d121      	bne.n	80059f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2b03      	cmp	r3, #3
 80059b0:	d837      	bhi.n	8005a22 <DMA_CheckFifoParam+0xda>
 80059b2:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <DMA_CheckFifoParam+0x70>)
 80059b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b8:	080059c9 	.word	0x080059c9
 80059bc:	080059cf 	.word	0x080059cf
 80059c0:	080059c9 	.word	0x080059c9
 80059c4:	080059e1 	.word	0x080059e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	73fb      	strb	r3, [r7, #15]
      break;
 80059cc:	e030      	b.n	8005a30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d025      	beq.n	8005a26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059de:	e022      	b.n	8005a26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059e8:	d11f      	bne.n	8005a2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80059ee:	e01c      	b.n	8005a2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d903      	bls.n	80059fe <DMA_CheckFifoParam+0xb6>
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d003      	beq.n	8005a04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80059fc:	e018      	b.n	8005a30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	73fb      	strb	r3, [r7, #15]
      break;
 8005a02:	e015      	b.n	8005a30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00e      	beq.n	8005a2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	73fb      	strb	r3, [r7, #15]
      break;
 8005a14:	e00b      	b.n	8005a2e <DMA_CheckFifoParam+0xe6>
      break;
 8005a16:	bf00      	nop
 8005a18:	e00a      	b.n	8005a30 <DMA_CheckFifoParam+0xe8>
      break;
 8005a1a:	bf00      	nop
 8005a1c:	e008      	b.n	8005a30 <DMA_CheckFifoParam+0xe8>
      break;
 8005a1e:	bf00      	nop
 8005a20:	e006      	b.n	8005a30 <DMA_CheckFifoParam+0xe8>
      break;
 8005a22:	bf00      	nop
 8005a24:	e004      	b.n	8005a30 <DMA_CheckFifoParam+0xe8>
      break;
 8005a26:	bf00      	nop
 8005a28:	e002      	b.n	8005a30 <DMA_CheckFifoParam+0xe8>
      break;   
 8005a2a:	bf00      	nop
 8005a2c:	e000      	b.n	8005a30 <DMA_CheckFifoParam+0xe8>
      break;
 8005a2e:	bf00      	nop
    }
  } 
  
  return status; 
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop

08005a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b089      	sub	sp, #36	; 0x24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a56:	2300      	movs	r3, #0
 8005a58:	61fb      	str	r3, [r7, #28]
 8005a5a:	e159      	b.n	8005d10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	fa02 f303 	lsl.w	r3, r2, r3
 8005a64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	f040 8148 	bne.w	8005d0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d005      	beq.n	8005a92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d130      	bne.n	8005af4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	2203      	movs	r2, #3
 8005a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa2:	43db      	mvns	r3, r3
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ac8:	2201      	movs	r2, #1
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad0:	43db      	mvns	r3, r3
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	091b      	lsrs	r3, r3, #4
 8005ade:	f003 0201 	and.w	r2, r3, #1
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f003 0303 	and.w	r3, r3, #3
 8005afc:	2b03      	cmp	r3, #3
 8005afe:	d017      	beq.n	8005b30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	2203      	movs	r2, #3
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	43db      	mvns	r3, r3
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	4013      	ands	r3, r2
 8005b16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	fa02 f303 	lsl.w	r3, r2, r3
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f003 0303 	and.w	r3, r3, #3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d123      	bne.n	8005b84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	08da      	lsrs	r2, r3, #3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3208      	adds	r2, #8
 8005b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	f003 0307 	and.w	r3, r3, #7
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	220f      	movs	r2, #15
 8005b54:	fa02 f303 	lsl.w	r3, r2, r3
 8005b58:	43db      	mvns	r3, r3
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	08da      	lsrs	r2, r3, #3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3208      	adds	r2, #8
 8005b7e:	69b9      	ldr	r1, [r7, #24]
 8005b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	2203      	movs	r2, #3
 8005b90:	fa02 f303 	lsl.w	r3, r2, r3
 8005b94:	43db      	mvns	r3, r3
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f003 0203 	and.w	r2, r3, #3
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 80a2 	beq.w	8005d0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	4b57      	ldr	r3, [pc, #348]	; (8005d28 <HAL_GPIO_Init+0x2e8>)
 8005bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bce:	4a56      	ldr	r2, [pc, #344]	; (8005d28 <HAL_GPIO_Init+0x2e8>)
 8005bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8005bd6:	4b54      	ldr	r3, [pc, #336]	; (8005d28 <HAL_GPIO_Init+0x2e8>)
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005be2:	4a52      	ldr	r2, [pc, #328]	; (8005d2c <HAL_GPIO_Init+0x2ec>)
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	089b      	lsrs	r3, r3, #2
 8005be8:	3302      	adds	r3, #2
 8005bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	220f      	movs	r2, #15
 8005bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfe:	43db      	mvns	r3, r3
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	4013      	ands	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a49      	ldr	r2, [pc, #292]	; (8005d30 <HAL_GPIO_Init+0x2f0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d019      	beq.n	8005c42 <HAL_GPIO_Init+0x202>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a48      	ldr	r2, [pc, #288]	; (8005d34 <HAL_GPIO_Init+0x2f4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d013      	beq.n	8005c3e <HAL_GPIO_Init+0x1fe>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a47      	ldr	r2, [pc, #284]	; (8005d38 <HAL_GPIO_Init+0x2f8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d00d      	beq.n	8005c3a <HAL_GPIO_Init+0x1fa>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a46      	ldr	r2, [pc, #280]	; (8005d3c <HAL_GPIO_Init+0x2fc>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d007      	beq.n	8005c36 <HAL_GPIO_Init+0x1f6>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a45      	ldr	r2, [pc, #276]	; (8005d40 <HAL_GPIO_Init+0x300>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d101      	bne.n	8005c32 <HAL_GPIO_Init+0x1f2>
 8005c2e:	2304      	movs	r3, #4
 8005c30:	e008      	b.n	8005c44 <HAL_GPIO_Init+0x204>
 8005c32:	2307      	movs	r3, #7
 8005c34:	e006      	b.n	8005c44 <HAL_GPIO_Init+0x204>
 8005c36:	2303      	movs	r3, #3
 8005c38:	e004      	b.n	8005c44 <HAL_GPIO_Init+0x204>
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	e002      	b.n	8005c44 <HAL_GPIO_Init+0x204>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <HAL_GPIO_Init+0x204>
 8005c42:	2300      	movs	r3, #0
 8005c44:	69fa      	ldr	r2, [r7, #28]
 8005c46:	f002 0203 	and.w	r2, r2, #3
 8005c4a:	0092      	lsls	r2, r2, #2
 8005c4c:	4093      	lsls	r3, r2
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c54:	4935      	ldr	r1, [pc, #212]	; (8005d2c <HAL_GPIO_Init+0x2ec>)
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	089b      	lsrs	r3, r3, #2
 8005c5a:	3302      	adds	r3, #2
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c62:	4b38      	ldr	r3, [pc, #224]	; (8005d44 <HAL_GPIO_Init+0x304>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	43db      	mvns	r3, r3
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c86:	4a2f      	ldr	r2, [pc, #188]	; (8005d44 <HAL_GPIO_Init+0x304>)
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c8c:	4b2d      	ldr	r3, [pc, #180]	; (8005d44 <HAL_GPIO_Init+0x304>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	43db      	mvns	r3, r3
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005cb0:	4a24      	ldr	r2, [pc, #144]	; (8005d44 <HAL_GPIO_Init+0x304>)
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005cb6:	4b23      	ldr	r3, [pc, #140]	; (8005d44 <HAL_GPIO_Init+0x304>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	43db      	mvns	r3, r3
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005cda:	4a1a      	ldr	r2, [pc, #104]	; (8005d44 <HAL_GPIO_Init+0x304>)
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ce0:	4b18      	ldr	r3, [pc, #96]	; (8005d44 <HAL_GPIO_Init+0x304>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	43db      	mvns	r3, r3
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	4013      	ands	r3, r2
 8005cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d04:	4a0f      	ldr	r2, [pc, #60]	; (8005d44 <HAL_GPIO_Init+0x304>)
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	61fb      	str	r3, [r7, #28]
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	2b0f      	cmp	r3, #15
 8005d14:	f67f aea2 	bls.w	8005a5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d18:	bf00      	nop
 8005d1a:	bf00      	nop
 8005d1c:	3724      	adds	r7, #36	; 0x24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	40023800 	.word	0x40023800
 8005d2c:	40013800 	.word	0x40013800
 8005d30:	40020000 	.word	0x40020000
 8005d34:	40020400 	.word	0x40020400
 8005d38:	40020800 	.word	0x40020800
 8005d3c:	40020c00 	.word	0x40020c00
 8005d40:	40021000 	.word	0x40021000
 8005d44:	40013c00 	.word	0x40013c00

08005d48 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d5e:	2300      	movs	r3, #0
 8005d60:	617b      	str	r3, [r7, #20]
 8005d62:	e0bb      	b.n	8005edc <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d64:	2201      	movs	r2, #1
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	4013      	ands	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	f040 80ab 	bne.w	8005ed6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005d80:	4a5c      	ldr	r2, [pc, #368]	; (8005ef4 <HAL_GPIO_DeInit+0x1ac>)
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	089b      	lsrs	r3, r3, #2
 8005d86:	3302      	adds	r3, #2
 8005d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d8c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f003 0303 	and.w	r3, r3, #3
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	220f      	movs	r2, #15
 8005d98:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a54      	ldr	r2, [pc, #336]	; (8005ef8 <HAL_GPIO_DeInit+0x1b0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d019      	beq.n	8005dde <HAL_GPIO_DeInit+0x96>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a53      	ldr	r2, [pc, #332]	; (8005efc <HAL_GPIO_DeInit+0x1b4>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d013      	beq.n	8005dda <HAL_GPIO_DeInit+0x92>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a52      	ldr	r2, [pc, #328]	; (8005f00 <HAL_GPIO_DeInit+0x1b8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00d      	beq.n	8005dd6 <HAL_GPIO_DeInit+0x8e>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a51      	ldr	r2, [pc, #324]	; (8005f04 <HAL_GPIO_DeInit+0x1bc>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d007      	beq.n	8005dd2 <HAL_GPIO_DeInit+0x8a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a50      	ldr	r2, [pc, #320]	; (8005f08 <HAL_GPIO_DeInit+0x1c0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d101      	bne.n	8005dce <HAL_GPIO_DeInit+0x86>
 8005dca:	2304      	movs	r3, #4
 8005dcc:	e008      	b.n	8005de0 <HAL_GPIO_DeInit+0x98>
 8005dce:	2307      	movs	r3, #7
 8005dd0:	e006      	b.n	8005de0 <HAL_GPIO_DeInit+0x98>
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e004      	b.n	8005de0 <HAL_GPIO_DeInit+0x98>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	e002      	b.n	8005de0 <HAL_GPIO_DeInit+0x98>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e000      	b.n	8005de0 <HAL_GPIO_DeInit+0x98>
 8005dde:	2300      	movs	r3, #0
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	f002 0203 	and.w	r2, r2, #3
 8005de6:	0092      	lsls	r2, r2, #2
 8005de8:	4093      	lsls	r3, r2
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d132      	bne.n	8005e56 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005df0:	4b46      	ldr	r3, [pc, #280]	; (8005f0c <HAL_GPIO_DeInit+0x1c4>)
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	43db      	mvns	r3, r3
 8005df8:	4944      	ldr	r1, [pc, #272]	; (8005f0c <HAL_GPIO_DeInit+0x1c4>)
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005dfe:	4b43      	ldr	r3, [pc, #268]	; (8005f0c <HAL_GPIO_DeInit+0x1c4>)
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	43db      	mvns	r3, r3
 8005e06:	4941      	ldr	r1, [pc, #260]	; (8005f0c <HAL_GPIO_DeInit+0x1c4>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005e0c:	4b3f      	ldr	r3, [pc, #252]	; (8005f0c <HAL_GPIO_DeInit+0x1c4>)
 8005e0e:	68da      	ldr	r2, [r3, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	43db      	mvns	r3, r3
 8005e14:	493d      	ldr	r1, [pc, #244]	; (8005f0c <HAL_GPIO_DeInit+0x1c4>)
 8005e16:	4013      	ands	r3, r2
 8005e18:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005e1a:	4b3c      	ldr	r3, [pc, #240]	; (8005f0c <HAL_GPIO_DeInit+0x1c4>)
 8005e1c:	689a      	ldr	r2, [r3, #8]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	43db      	mvns	r3, r3
 8005e22:	493a      	ldr	r1, [pc, #232]	; (8005f0c <HAL_GPIO_DeInit+0x1c4>)
 8005e24:	4013      	ands	r3, r2
 8005e26:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	220f      	movs	r2, #15
 8005e32:	fa02 f303 	lsl.w	r3, r2, r3
 8005e36:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005e38:	4a2e      	ldr	r2, [pc, #184]	; (8005ef4 <HAL_GPIO_DeInit+0x1ac>)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	089b      	lsrs	r3, r3, #2
 8005e3e:	3302      	adds	r3, #2
 8005e40:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	43da      	mvns	r2, r3
 8005e48:	482a      	ldr	r0, [pc, #168]	; (8005ef4 <HAL_GPIO_DeInit+0x1ac>)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	089b      	lsrs	r3, r3, #2
 8005e4e:	400a      	ands	r2, r1
 8005e50:	3302      	adds	r3, #2
 8005e52:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	2103      	movs	r1, #3
 8005e60:	fa01 f303 	lsl.w	r3, r1, r3
 8005e64:	43db      	mvns	r3, r3
 8005e66:	401a      	ands	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	08da      	lsrs	r2, r3, #3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3208      	adds	r2, #8
 8005e74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	220f      	movs	r2, #15
 8005e82:	fa02 f303 	lsl.w	r3, r2, r3
 8005e86:	43db      	mvns	r3, r3
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	08d2      	lsrs	r2, r2, #3
 8005e8c:	4019      	ands	r1, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	3208      	adds	r2, #8
 8005e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	2103      	movs	r1, #3
 8005ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea4:	43db      	mvns	r3, r3
 8005ea6:	401a      	ands	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	401a      	ands	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	2103      	movs	r1, #3
 8005eca:	fa01 f303 	lsl.w	r3, r1, r3
 8005ece:	43db      	mvns	r3, r3
 8005ed0:	401a      	ands	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2b0f      	cmp	r3, #15
 8005ee0:	f67f af40 	bls.w	8005d64 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005ee4:	bf00      	nop
 8005ee6:	bf00      	nop
 8005ee8:	371c      	adds	r7, #28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	40013800 	.word	0x40013800
 8005ef8:	40020000 	.word	0x40020000
 8005efc:	40020400 	.word	0x40020400
 8005f00:	40020800 	.word	0x40020800
 8005f04:	40020c00 	.word	0x40020c00
 8005f08:	40021000 	.word	0x40021000
 8005f0c:	40013c00 	.word	0x40013c00

08005f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	807b      	strh	r3, [r7, #2]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f20:	787b      	ldrb	r3, [r7, #1]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f26:	887a      	ldrh	r2, [r7, #2]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f2c:	e003      	b.n	8005f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f2e:	887b      	ldrh	r3, [r7, #2]
 8005f30:	041a      	lsls	r2, r3, #16
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	619a      	str	r2, [r3, #24]
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
	...

08005f44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e267      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d075      	beq.n	800604e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f62:	4b88      	ldr	r3, [pc, #544]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 030c 	and.w	r3, r3, #12
 8005f6a:	2b04      	cmp	r3, #4
 8005f6c:	d00c      	beq.n	8005f88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f6e:	4b85      	ldr	r3, [pc, #532]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f76:	2b08      	cmp	r3, #8
 8005f78:	d112      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f7a:	4b82      	ldr	r3, [pc, #520]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f86:	d10b      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f88:	4b7e      	ldr	r3, [pc, #504]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d05b      	beq.n	800604c <HAL_RCC_OscConfig+0x108>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d157      	bne.n	800604c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e242      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa8:	d106      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x74>
 8005faa:	4b76      	ldr	r3, [pc, #472]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a75      	ldr	r2, [pc, #468]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	e01d      	b.n	8005ff4 <HAL_RCC_OscConfig+0xb0>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fc0:	d10c      	bne.n	8005fdc <HAL_RCC_OscConfig+0x98>
 8005fc2:	4b70      	ldr	r3, [pc, #448]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a6f      	ldr	r2, [pc, #444]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	4b6d      	ldr	r3, [pc, #436]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a6c      	ldr	r2, [pc, #432]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	e00b      	b.n	8005ff4 <HAL_RCC_OscConfig+0xb0>
 8005fdc:	4b69      	ldr	r3, [pc, #420]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a68      	ldr	r2, [pc, #416]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	4b66      	ldr	r3, [pc, #408]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a65      	ldr	r2, [pc, #404]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8005fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d013      	beq.n	8006024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ffc:	f7fe fb7e 	bl	80046fc <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006004:	f7fe fb7a 	bl	80046fc <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b64      	cmp	r3, #100	; 0x64
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e207      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006016:	4b5b      	ldr	r3, [pc, #364]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f0      	beq.n	8006004 <HAL_RCC_OscConfig+0xc0>
 8006022:	e014      	b.n	800604e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006024:	f7fe fb6a 	bl	80046fc <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800602c:	f7fe fb66 	bl	80046fc <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b64      	cmp	r3, #100	; 0x64
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e1f3      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800603e:	4b51      	ldr	r3, [pc, #324]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f0      	bne.n	800602c <HAL_RCC_OscConfig+0xe8>
 800604a:	e000      	b.n	800604e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800604c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d063      	beq.n	8006122 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800605a:	4b4a      	ldr	r3, [pc, #296]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f003 030c 	and.w	r3, r3, #12
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00b      	beq.n	800607e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006066:	4b47      	ldr	r3, [pc, #284]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800606e:	2b08      	cmp	r3, #8
 8006070:	d11c      	bne.n	80060ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006072:	4b44      	ldr	r3, [pc, #272]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d116      	bne.n	80060ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800607e:	4b41      	ldr	r3, [pc, #260]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <HAL_RCC_OscConfig+0x152>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d001      	beq.n	8006096 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e1c7      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006096:	4b3b      	ldr	r3, [pc, #236]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	4937      	ldr	r1, [pc, #220]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060aa:	e03a      	b.n	8006122 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d020      	beq.n	80060f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060b4:	4b34      	ldr	r3, [pc, #208]	; (8006188 <HAL_RCC_OscConfig+0x244>)
 80060b6:	2201      	movs	r2, #1
 80060b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ba:	f7fe fb1f 	bl	80046fc <HAL_GetTick>
 80060be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060c0:	e008      	b.n	80060d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060c2:	f7fe fb1b 	bl	80046fc <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e1a8      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d4:	4b2b      	ldr	r3, [pc, #172]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0f0      	beq.n	80060c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060e0:	4b28      	ldr	r3, [pc, #160]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	4925      	ldr	r1, [pc, #148]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	600b      	str	r3, [r1, #0]
 80060f4:	e015      	b.n	8006122 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060f6:	4b24      	ldr	r3, [pc, #144]	; (8006188 <HAL_RCC_OscConfig+0x244>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060fc:	f7fe fafe 	bl	80046fc <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006104:	f7fe fafa 	bl	80046fc <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e187      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006116:	4b1b      	ldr	r3, [pc, #108]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f0      	bne.n	8006104 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b00      	cmp	r3, #0
 800612c:	d036      	beq.n	800619c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d016      	beq.n	8006164 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006136:	4b15      	ldr	r3, [pc, #84]	; (800618c <HAL_RCC_OscConfig+0x248>)
 8006138:	2201      	movs	r2, #1
 800613a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800613c:	f7fe fade 	bl	80046fc <HAL_GetTick>
 8006140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006142:	e008      	b.n	8006156 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006144:	f7fe fada 	bl	80046fc <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	2b02      	cmp	r3, #2
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e167      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006156:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <HAL_RCC_OscConfig+0x240>)
 8006158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0f0      	beq.n	8006144 <HAL_RCC_OscConfig+0x200>
 8006162:	e01b      	b.n	800619c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006164:	4b09      	ldr	r3, [pc, #36]	; (800618c <HAL_RCC_OscConfig+0x248>)
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800616a:	f7fe fac7 	bl	80046fc <HAL_GetTick>
 800616e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006170:	e00e      	b.n	8006190 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006172:	f7fe fac3 	bl	80046fc <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	2b02      	cmp	r3, #2
 800617e:	d907      	bls.n	8006190 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e150      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
 8006184:	40023800 	.word	0x40023800
 8006188:	42470000 	.word	0x42470000
 800618c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006190:	4b88      	ldr	r3, [pc, #544]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1ea      	bne.n	8006172 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 8097 	beq.w	80062d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061aa:	2300      	movs	r3, #0
 80061ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061ae:	4b81      	ldr	r3, [pc, #516]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10f      	bne.n	80061da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061ba:	2300      	movs	r3, #0
 80061bc:	60bb      	str	r3, [r7, #8]
 80061be:	4b7d      	ldr	r3, [pc, #500]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	4a7c      	ldr	r2, [pc, #496]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 80061c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061c8:	6413      	str	r3, [r2, #64]	; 0x40
 80061ca:	4b7a      	ldr	r3, [pc, #488]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d2:	60bb      	str	r3, [r7, #8]
 80061d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061d6:	2301      	movs	r3, #1
 80061d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061da:	4b77      	ldr	r3, [pc, #476]	; (80063b8 <HAL_RCC_OscConfig+0x474>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d118      	bne.n	8006218 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061e6:	4b74      	ldr	r3, [pc, #464]	; (80063b8 <HAL_RCC_OscConfig+0x474>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a73      	ldr	r2, [pc, #460]	; (80063b8 <HAL_RCC_OscConfig+0x474>)
 80061ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061f2:	f7fe fa83 	bl	80046fc <HAL_GetTick>
 80061f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061f8:	e008      	b.n	800620c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061fa:	f7fe fa7f 	bl	80046fc <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b02      	cmp	r3, #2
 8006206:	d901      	bls.n	800620c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e10c      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800620c:	4b6a      	ldr	r3, [pc, #424]	; (80063b8 <HAL_RCC_OscConfig+0x474>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0f0      	beq.n	80061fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d106      	bne.n	800622e <HAL_RCC_OscConfig+0x2ea>
 8006220:	4b64      	ldr	r3, [pc, #400]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006224:	4a63      	ldr	r2, [pc, #396]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006226:	f043 0301 	orr.w	r3, r3, #1
 800622a:	6713      	str	r3, [r2, #112]	; 0x70
 800622c:	e01c      	b.n	8006268 <HAL_RCC_OscConfig+0x324>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	2b05      	cmp	r3, #5
 8006234:	d10c      	bne.n	8006250 <HAL_RCC_OscConfig+0x30c>
 8006236:	4b5f      	ldr	r3, [pc, #380]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623a:	4a5e      	ldr	r2, [pc, #376]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 800623c:	f043 0304 	orr.w	r3, r3, #4
 8006240:	6713      	str	r3, [r2, #112]	; 0x70
 8006242:	4b5c      	ldr	r3, [pc, #368]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006246:	4a5b      	ldr	r2, [pc, #364]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006248:	f043 0301 	orr.w	r3, r3, #1
 800624c:	6713      	str	r3, [r2, #112]	; 0x70
 800624e:	e00b      	b.n	8006268 <HAL_RCC_OscConfig+0x324>
 8006250:	4b58      	ldr	r3, [pc, #352]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006254:	4a57      	ldr	r2, [pc, #348]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006256:	f023 0301 	bic.w	r3, r3, #1
 800625a:	6713      	str	r3, [r2, #112]	; 0x70
 800625c:	4b55      	ldr	r3, [pc, #340]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 800625e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006260:	4a54      	ldr	r2, [pc, #336]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006262:	f023 0304 	bic.w	r3, r3, #4
 8006266:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d015      	beq.n	800629c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006270:	f7fe fa44 	bl	80046fc <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006276:	e00a      	b.n	800628e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006278:	f7fe fa40 	bl	80046fc <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	f241 3288 	movw	r2, #5000	; 0x1388
 8006286:	4293      	cmp	r3, r2
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e0cb      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800628e:	4b49      	ldr	r3, [pc, #292]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0ee      	beq.n	8006278 <HAL_RCC_OscConfig+0x334>
 800629a:	e014      	b.n	80062c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800629c:	f7fe fa2e 	bl	80046fc <HAL_GetTick>
 80062a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062a2:	e00a      	b.n	80062ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062a4:	f7fe fa2a 	bl	80046fc <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e0b5      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ba:	4b3e      	ldr	r3, [pc, #248]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 80062bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1ee      	bne.n	80062a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062c6:	7dfb      	ldrb	r3, [r7, #23]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d105      	bne.n	80062d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062cc:	4b39      	ldr	r3, [pc, #228]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 80062ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d0:	4a38      	ldr	r2, [pc, #224]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 80062d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 80a1 	beq.w	8006424 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062e2:	4b34      	ldr	r3, [pc, #208]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 030c 	and.w	r3, r3, #12
 80062ea:	2b08      	cmp	r3, #8
 80062ec:	d05c      	beq.n	80063a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d141      	bne.n	800637a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062f6:	4b31      	ldr	r3, [pc, #196]	; (80063bc <HAL_RCC_OscConfig+0x478>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062fc:	f7fe f9fe 	bl	80046fc <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006304:	f7fe f9fa 	bl	80046fc <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e087      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006316:	4b27      	ldr	r3, [pc, #156]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1f0      	bne.n	8006304 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69da      	ldr	r2, [r3, #28]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	019b      	lsls	r3, r3, #6
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006338:	085b      	lsrs	r3, r3, #1
 800633a:	3b01      	subs	r3, #1
 800633c:	041b      	lsls	r3, r3, #16
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	061b      	lsls	r3, r3, #24
 8006346:	491b      	ldr	r1, [pc, #108]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 8006348:	4313      	orrs	r3, r2
 800634a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800634c:	4b1b      	ldr	r3, [pc, #108]	; (80063bc <HAL_RCC_OscConfig+0x478>)
 800634e:	2201      	movs	r2, #1
 8006350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006352:	f7fe f9d3 	bl	80046fc <HAL_GetTick>
 8006356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006358:	e008      	b.n	800636c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800635a:	f7fe f9cf 	bl	80046fc <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b02      	cmp	r3, #2
 8006366:	d901      	bls.n	800636c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e05c      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800636c:	4b11      	ldr	r3, [pc, #68]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0f0      	beq.n	800635a <HAL_RCC_OscConfig+0x416>
 8006378:	e054      	b.n	8006424 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800637a:	4b10      	ldr	r3, [pc, #64]	; (80063bc <HAL_RCC_OscConfig+0x478>)
 800637c:	2200      	movs	r2, #0
 800637e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006380:	f7fe f9bc 	bl	80046fc <HAL_GetTick>
 8006384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006388:	f7fe f9b8 	bl	80046fc <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e045      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800639a:	4b06      	ldr	r3, [pc, #24]	; (80063b4 <HAL_RCC_OscConfig+0x470>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1f0      	bne.n	8006388 <HAL_RCC_OscConfig+0x444>
 80063a6:	e03d      	b.n	8006424 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d107      	bne.n	80063c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e038      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
 80063b4:	40023800 	.word	0x40023800
 80063b8:	40007000 	.word	0x40007000
 80063bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063c0:	4b1b      	ldr	r3, [pc, #108]	; (8006430 <HAL_RCC_OscConfig+0x4ec>)
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d028      	beq.n	8006420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063d8:	429a      	cmp	r2, r3
 80063da:	d121      	bne.n	8006420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d11a      	bne.n	8006420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80063f0:	4013      	ands	r3, r2
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d111      	bne.n	8006420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006406:	085b      	lsrs	r3, r3, #1
 8006408:	3b01      	subs	r3, #1
 800640a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800640c:	429a      	cmp	r2, r3
 800640e:	d107      	bne.n	8006420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800641c:	429a      	cmp	r2, r3
 800641e:	d001      	beq.n	8006424 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e000      	b.n	8006426 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	40023800 	.word	0x40023800

08006434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e0cc      	b.n	80065e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006448:	4b68      	ldr	r3, [pc, #416]	; (80065ec <HAL_RCC_ClockConfig+0x1b8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d90c      	bls.n	8006470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006456:	4b65      	ldr	r3, [pc, #404]	; (80065ec <HAL_RCC_ClockConfig+0x1b8>)
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800645e:	4b63      	ldr	r3, [pc, #396]	; (80065ec <HAL_RCC_ClockConfig+0x1b8>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0307 	and.w	r3, r3, #7
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d001      	beq.n	8006470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e0b8      	b.n	80065e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d020      	beq.n	80064be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006488:	4b59      	ldr	r3, [pc, #356]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	4a58      	ldr	r2, [pc, #352]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 800648e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006492:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0308 	and.w	r3, r3, #8
 800649c:	2b00      	cmp	r3, #0
 800649e:	d005      	beq.n	80064ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064a0:	4b53      	ldr	r3, [pc, #332]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	4a52      	ldr	r2, [pc, #328]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064ac:	4b50      	ldr	r3, [pc, #320]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	494d      	ldr	r1, [pc, #308]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d044      	beq.n	8006554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d107      	bne.n	80064e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064d2:	4b47      	ldr	r3, [pc, #284]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d119      	bne.n	8006512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e07f      	b.n	80065e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d003      	beq.n	80064f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d107      	bne.n	8006502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064f2:	4b3f      	ldr	r3, [pc, #252]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d109      	bne.n	8006512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e06f      	b.n	80065e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006502:	4b3b      	ldr	r3, [pc, #236]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e067      	b.n	80065e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006512:	4b37      	ldr	r3, [pc, #220]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f023 0203 	bic.w	r2, r3, #3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	4934      	ldr	r1, [pc, #208]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006520:	4313      	orrs	r3, r2
 8006522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006524:	f7fe f8ea 	bl	80046fc <HAL_GetTick>
 8006528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800652a:	e00a      	b.n	8006542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800652c:	f7fe f8e6 	bl	80046fc <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	f241 3288 	movw	r2, #5000	; 0x1388
 800653a:	4293      	cmp	r3, r2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e04f      	b.n	80065e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006542:	4b2b      	ldr	r3, [pc, #172]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 020c 	and.w	r2, r3, #12
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	429a      	cmp	r2, r3
 8006552:	d1eb      	bne.n	800652c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006554:	4b25      	ldr	r3, [pc, #148]	; (80065ec <HAL_RCC_ClockConfig+0x1b8>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d20c      	bcs.n	800657c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006562:	4b22      	ldr	r3, [pc, #136]	; (80065ec <HAL_RCC_ClockConfig+0x1b8>)
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800656a:	4b20      	ldr	r3, [pc, #128]	; (80065ec <HAL_RCC_ClockConfig+0x1b8>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0307 	and.w	r3, r3, #7
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d001      	beq.n	800657c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e032      	b.n	80065e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b00      	cmp	r3, #0
 8006586:	d008      	beq.n	800659a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006588:	4b19      	ldr	r3, [pc, #100]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	4916      	ldr	r1, [pc, #88]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006596:	4313      	orrs	r3, r2
 8006598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d009      	beq.n	80065ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065a6:	4b12      	ldr	r3, [pc, #72]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	490e      	ldr	r1, [pc, #56]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065ba:	f000 f821 	bl	8006600 <HAL_RCC_GetSysClockFreq>
 80065be:	4602      	mov	r2, r0
 80065c0:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <HAL_RCC_ClockConfig+0x1bc>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	091b      	lsrs	r3, r3, #4
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	490a      	ldr	r1, [pc, #40]	; (80065f4 <HAL_RCC_ClockConfig+0x1c0>)
 80065cc:	5ccb      	ldrb	r3, [r1, r3]
 80065ce:	fa22 f303 	lsr.w	r3, r2, r3
 80065d2:	4a09      	ldr	r2, [pc, #36]	; (80065f8 <HAL_RCC_ClockConfig+0x1c4>)
 80065d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80065d6:	4b09      	ldr	r3, [pc, #36]	; (80065fc <HAL_RCC_ClockConfig+0x1c8>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fe f84a 	bl	8004674 <HAL_InitTick>

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	40023c00 	.word	0x40023c00
 80065f0:	40023800 	.word	0x40023800
 80065f4:	0800d334 	.word	0x0800d334
 80065f8:	200000b0 	.word	0x200000b0
 80065fc:	200000b4 	.word	0x200000b4

08006600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006604:	b090      	sub	sp, #64	; 0x40
 8006606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006608:	2300      	movs	r3, #0
 800660a:	637b      	str	r3, [r7, #52]	; 0x34
 800660c:	2300      	movs	r3, #0
 800660e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006610:	2300      	movs	r3, #0
 8006612:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006618:	4b59      	ldr	r3, [pc, #356]	; (8006780 <HAL_RCC_GetSysClockFreq+0x180>)
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f003 030c 	and.w	r3, r3, #12
 8006620:	2b08      	cmp	r3, #8
 8006622:	d00d      	beq.n	8006640 <HAL_RCC_GetSysClockFreq+0x40>
 8006624:	2b08      	cmp	r3, #8
 8006626:	f200 80a1 	bhi.w	800676c <HAL_RCC_GetSysClockFreq+0x16c>
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <HAL_RCC_GetSysClockFreq+0x34>
 800662e:	2b04      	cmp	r3, #4
 8006630:	d003      	beq.n	800663a <HAL_RCC_GetSysClockFreq+0x3a>
 8006632:	e09b      	b.n	800676c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006634:	4b53      	ldr	r3, [pc, #332]	; (8006784 <HAL_RCC_GetSysClockFreq+0x184>)
 8006636:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006638:	e09b      	b.n	8006772 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800663a:	4b53      	ldr	r3, [pc, #332]	; (8006788 <HAL_RCC_GetSysClockFreq+0x188>)
 800663c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800663e:	e098      	b.n	8006772 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006640:	4b4f      	ldr	r3, [pc, #316]	; (8006780 <HAL_RCC_GetSysClockFreq+0x180>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006648:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800664a:	4b4d      	ldr	r3, [pc, #308]	; (8006780 <HAL_RCC_GetSysClockFreq+0x180>)
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d028      	beq.n	80066a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006656:	4b4a      	ldr	r3, [pc, #296]	; (8006780 <HAL_RCC_GetSysClockFreq+0x180>)
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	099b      	lsrs	r3, r3, #6
 800665c:	2200      	movs	r2, #0
 800665e:	623b      	str	r3, [r7, #32]
 8006660:	627a      	str	r2, [r7, #36]	; 0x24
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006668:	2100      	movs	r1, #0
 800666a:	4b47      	ldr	r3, [pc, #284]	; (8006788 <HAL_RCC_GetSysClockFreq+0x188>)
 800666c:	fb03 f201 	mul.w	r2, r3, r1
 8006670:	2300      	movs	r3, #0
 8006672:	fb00 f303 	mul.w	r3, r0, r3
 8006676:	4413      	add	r3, r2
 8006678:	4a43      	ldr	r2, [pc, #268]	; (8006788 <HAL_RCC_GetSysClockFreq+0x188>)
 800667a:	fba0 1202 	umull	r1, r2, r0, r2
 800667e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006680:	460a      	mov	r2, r1
 8006682:	62ba      	str	r2, [r7, #40]	; 0x28
 8006684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006686:	4413      	add	r3, r2
 8006688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800668a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668c:	2200      	movs	r2, #0
 800668e:	61bb      	str	r3, [r7, #24]
 8006690:	61fa      	str	r2, [r7, #28]
 8006692:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006696:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800669a:	f7fa fa5d 	bl	8000b58 <__aeabi_uldivmod>
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	4613      	mov	r3, r2
 80066a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066a6:	e053      	b.n	8006750 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066a8:	4b35      	ldr	r3, [pc, #212]	; (8006780 <HAL_RCC_GetSysClockFreq+0x180>)
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	099b      	lsrs	r3, r3, #6
 80066ae:	2200      	movs	r2, #0
 80066b0:	613b      	str	r3, [r7, #16]
 80066b2:	617a      	str	r2, [r7, #20]
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80066ba:	f04f 0b00 	mov.w	fp, #0
 80066be:	4652      	mov	r2, sl
 80066c0:	465b      	mov	r3, fp
 80066c2:	f04f 0000 	mov.w	r0, #0
 80066c6:	f04f 0100 	mov.w	r1, #0
 80066ca:	0159      	lsls	r1, r3, #5
 80066cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066d0:	0150      	lsls	r0, r2, #5
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	ebb2 080a 	subs.w	r8, r2, sl
 80066da:	eb63 090b 	sbc.w	r9, r3, fp
 80066de:	f04f 0200 	mov.w	r2, #0
 80066e2:	f04f 0300 	mov.w	r3, #0
 80066e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80066ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80066ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80066f2:	ebb2 0408 	subs.w	r4, r2, r8
 80066f6:	eb63 0509 	sbc.w	r5, r3, r9
 80066fa:	f04f 0200 	mov.w	r2, #0
 80066fe:	f04f 0300 	mov.w	r3, #0
 8006702:	00eb      	lsls	r3, r5, #3
 8006704:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006708:	00e2      	lsls	r2, r4, #3
 800670a:	4614      	mov	r4, r2
 800670c:	461d      	mov	r5, r3
 800670e:	eb14 030a 	adds.w	r3, r4, sl
 8006712:	603b      	str	r3, [r7, #0]
 8006714:	eb45 030b 	adc.w	r3, r5, fp
 8006718:	607b      	str	r3, [r7, #4]
 800671a:	f04f 0200 	mov.w	r2, #0
 800671e:	f04f 0300 	mov.w	r3, #0
 8006722:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006726:	4629      	mov	r1, r5
 8006728:	028b      	lsls	r3, r1, #10
 800672a:	4621      	mov	r1, r4
 800672c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006730:	4621      	mov	r1, r4
 8006732:	028a      	lsls	r2, r1, #10
 8006734:	4610      	mov	r0, r2
 8006736:	4619      	mov	r1, r3
 8006738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673a:	2200      	movs	r2, #0
 800673c:	60bb      	str	r3, [r7, #8]
 800673e:	60fa      	str	r2, [r7, #12]
 8006740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006744:	f7fa fa08 	bl	8000b58 <__aeabi_uldivmod>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	4613      	mov	r3, r2
 800674e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006750:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <HAL_RCC_GetSysClockFreq+0x180>)
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	0c1b      	lsrs	r3, r3, #16
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	3301      	adds	r3, #1
 800675c:	005b      	lsls	r3, r3, #1
 800675e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006760:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006764:	fbb2 f3f3 	udiv	r3, r2, r3
 8006768:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800676a:	e002      	b.n	8006772 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800676c:	4b05      	ldr	r3, [pc, #20]	; (8006784 <HAL_RCC_GetSysClockFreq+0x184>)
 800676e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006774:	4618      	mov	r0, r3
 8006776:	3740      	adds	r7, #64	; 0x40
 8006778:	46bd      	mov	sp, r7
 800677a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800677e:	bf00      	nop
 8006780:	40023800 	.word	0x40023800
 8006784:	00f42400 	.word	0x00f42400
 8006788:	017d7840 	.word	0x017d7840

0800678c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800678c:	b480      	push	{r7}
 800678e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006790:	4b03      	ldr	r3, [pc, #12]	; (80067a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006792:	681b      	ldr	r3, [r3, #0]
}
 8006794:	4618      	mov	r0, r3
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	200000b0 	.word	0x200000b0

080067a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067a8:	f7ff fff0 	bl	800678c <HAL_RCC_GetHCLKFreq>
 80067ac:	4602      	mov	r2, r0
 80067ae:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	0a9b      	lsrs	r3, r3, #10
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	4903      	ldr	r1, [pc, #12]	; (80067c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067ba:	5ccb      	ldrb	r3, [r1, r3]
 80067bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	40023800 	.word	0x40023800
 80067c8:	0800d344 	.word	0x0800d344

080067cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80067d0:	f7ff ffdc 	bl	800678c <HAL_RCC_GetHCLKFreq>
 80067d4:	4602      	mov	r2, r0
 80067d6:	4b05      	ldr	r3, [pc, #20]	; (80067ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	0b5b      	lsrs	r3, r3, #13
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	4903      	ldr	r1, [pc, #12]	; (80067f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067e2:	5ccb      	ldrb	r3, [r1, r3]
 80067e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	40023800 	.word	0x40023800
 80067f0:	0800d344 	.word	0x0800d344

080067f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e041      	b.n	800688a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d106      	bne.n	8006820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7fb fee8 	bl	80025f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3304      	adds	r3, #4
 8006830:	4619      	mov	r1, r3
 8006832:	4610      	mov	r0, r2
 8006834:	f000 fe24 	bl	8007480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
	...

08006894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d001      	beq.n	80068ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e044      	b.n	8006936 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f042 0201 	orr.w	r2, r2, #1
 80068c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a1e      	ldr	r2, [pc, #120]	; (8006944 <HAL_TIM_Base_Start_IT+0xb0>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d018      	beq.n	8006900 <HAL_TIM_Base_Start_IT+0x6c>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d6:	d013      	beq.n	8006900 <HAL_TIM_Base_Start_IT+0x6c>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a1a      	ldr	r2, [pc, #104]	; (8006948 <HAL_TIM_Base_Start_IT+0xb4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00e      	beq.n	8006900 <HAL_TIM_Base_Start_IT+0x6c>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a19      	ldr	r2, [pc, #100]	; (800694c <HAL_TIM_Base_Start_IT+0xb8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d009      	beq.n	8006900 <HAL_TIM_Base_Start_IT+0x6c>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a17      	ldr	r2, [pc, #92]	; (8006950 <HAL_TIM_Base_Start_IT+0xbc>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d004      	beq.n	8006900 <HAL_TIM_Base_Start_IT+0x6c>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a16      	ldr	r2, [pc, #88]	; (8006954 <HAL_TIM_Base_Start_IT+0xc0>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d111      	bne.n	8006924 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 0307 	and.w	r3, r3, #7
 800690a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b06      	cmp	r3, #6
 8006910:	d010      	beq.n	8006934 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f042 0201 	orr.w	r2, r2, #1
 8006920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006922:	e007      	b.n	8006934 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f042 0201 	orr.w	r2, r2, #1
 8006932:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	40010000 	.word	0x40010000
 8006948:	40000400 	.word	0x40000400
 800694c:	40000800 	.word	0x40000800
 8006950:	40000c00 	.word	0x40000c00
 8006954:	40014000 	.word	0x40014000

08006958 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f022 0201 	bic.w	r2, r2, #1
 800696e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6a1a      	ldr	r2, [r3, #32]
 8006976:	f241 1311 	movw	r3, #4369	; 0x1111
 800697a:	4013      	ands	r3, r2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10f      	bne.n	80069a0 <HAL_TIM_Base_Stop_IT+0x48>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6a1a      	ldr	r2, [r3, #32]
 8006986:	f240 4344 	movw	r3, #1092	; 0x444
 800698a:	4013      	ands	r3, r2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d107      	bne.n	80069a0 <HAL_TIM_Base_Stop_IT+0x48>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 0201 	bic.w	r2, r2, #1
 800699e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b082      	sub	sp, #8
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e041      	b.n	8006a4c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d106      	bne.n	80069e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f839 	bl	8006a54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2202      	movs	r2, #2
 80069e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	3304      	adds	r3, #4
 80069f2:	4619      	mov	r1, r3
 80069f4:	4610      	mov	r0, r2
 80069f6:	f000 fd43 	bl	8007480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d109      	bne.n	8006a8c <HAL_TIM_PWM_Start+0x24>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	bf14      	ite	ne
 8006a84:	2301      	movne	r3, #1
 8006a86:	2300      	moveq	r3, #0
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	e022      	b.n	8006ad2 <HAL_TIM_PWM_Start+0x6a>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d109      	bne.n	8006aa6 <HAL_TIM_PWM_Start+0x3e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	bf14      	ite	ne
 8006a9e:	2301      	movne	r3, #1
 8006aa0:	2300      	moveq	r3, #0
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	e015      	b.n	8006ad2 <HAL_TIM_PWM_Start+0x6a>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d109      	bne.n	8006ac0 <HAL_TIM_PWM_Start+0x58>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	bf14      	ite	ne
 8006ab8:	2301      	movne	r3, #1
 8006aba:	2300      	moveq	r3, #0
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	e008      	b.n	8006ad2 <HAL_TIM_PWM_Start+0x6a>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	bf14      	ite	ne
 8006acc:	2301      	movne	r3, #1
 8006ace:	2300      	moveq	r3, #0
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e068      	b.n	8006bac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d104      	bne.n	8006aea <HAL_TIM_PWM_Start+0x82>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ae8:	e013      	b.n	8006b12 <HAL_TIM_PWM_Start+0xaa>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d104      	bne.n	8006afa <HAL_TIM_PWM_Start+0x92>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2202      	movs	r2, #2
 8006af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006af8:	e00b      	b.n	8006b12 <HAL_TIM_PWM_Start+0xaa>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d104      	bne.n	8006b0a <HAL_TIM_PWM_Start+0xa2>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b08:	e003      	b.n	8006b12 <HAL_TIM_PWM_Start+0xaa>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2201      	movs	r2, #1
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 ff56 	bl	80079cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a23      	ldr	r2, [pc, #140]	; (8006bb4 <HAL_TIM_PWM_Start+0x14c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d107      	bne.n	8006b3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a1d      	ldr	r2, [pc, #116]	; (8006bb4 <HAL_TIM_PWM_Start+0x14c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d018      	beq.n	8006b76 <HAL_TIM_PWM_Start+0x10e>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4c:	d013      	beq.n	8006b76 <HAL_TIM_PWM_Start+0x10e>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a19      	ldr	r2, [pc, #100]	; (8006bb8 <HAL_TIM_PWM_Start+0x150>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00e      	beq.n	8006b76 <HAL_TIM_PWM_Start+0x10e>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a17      	ldr	r2, [pc, #92]	; (8006bbc <HAL_TIM_PWM_Start+0x154>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d009      	beq.n	8006b76 <HAL_TIM_PWM_Start+0x10e>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a16      	ldr	r2, [pc, #88]	; (8006bc0 <HAL_TIM_PWM_Start+0x158>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d004      	beq.n	8006b76 <HAL_TIM_PWM_Start+0x10e>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a14      	ldr	r2, [pc, #80]	; (8006bc4 <HAL_TIM_PWM_Start+0x15c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d111      	bne.n	8006b9a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2b06      	cmp	r3, #6
 8006b86:	d010      	beq.n	8006baa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0201 	orr.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b98:	e007      	b.n	8006baa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f042 0201 	orr.w	r2, r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	40010000 	.word	0x40010000
 8006bb8:	40000400 	.word	0x40000400
 8006bbc:	40000800 	.word	0x40000800
 8006bc0:	40000c00 	.word	0x40000c00
 8006bc4:	40014000 	.word	0x40014000

08006bc8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fef6 	bl	80079cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a29      	ldr	r2, [pc, #164]	; (8006c8c <HAL_TIM_PWM_Stop+0xc4>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d117      	bne.n	8006c1a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6a1a      	ldr	r2, [r3, #32]
 8006bf0:	f241 1311 	movw	r3, #4369	; 0x1111
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10f      	bne.n	8006c1a <HAL_TIM_PWM_Stop+0x52>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6a1a      	ldr	r2, [r3, #32]
 8006c00:	f240 4344 	movw	r3, #1092	; 0x444
 8006c04:	4013      	ands	r3, r2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d107      	bne.n	8006c1a <HAL_TIM_PWM_Stop+0x52>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6a1a      	ldr	r2, [r3, #32]
 8006c20:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c24:	4013      	ands	r3, r2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10f      	bne.n	8006c4a <HAL_TIM_PWM_Stop+0x82>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6a1a      	ldr	r2, [r3, #32]
 8006c30:	f240 4344 	movw	r3, #1092	; 0x444
 8006c34:	4013      	ands	r3, r2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d107      	bne.n	8006c4a <HAL_TIM_PWM_Stop+0x82>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f022 0201 	bic.w	r2, r2, #1
 8006c48:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d104      	bne.n	8006c5a <HAL_TIM_PWM_Stop+0x92>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c58:	e013      	b.n	8006c82 <HAL_TIM_PWM_Stop+0xba>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d104      	bne.n	8006c6a <HAL_TIM_PWM_Stop+0xa2>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c68:	e00b      	b.n	8006c82 <HAL_TIM_PWM_Stop+0xba>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d104      	bne.n	8006c7a <HAL_TIM_PWM_Stop+0xb2>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c78:	e003      	b.n	8006c82 <HAL_TIM_PWM_Stop+0xba>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	40010000 	.word	0x40010000

08006c90 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e097      	b.n	8006dd4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d106      	bne.n	8006cbe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7fb fcfd 	bl	80026b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	6812      	ldr	r2, [r2, #0]
 8006cd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cd4:	f023 0307 	bic.w	r3, r3, #7
 8006cd8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	f000 fbcb 	bl	8007480 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d12:	f023 0303 	bic.w	r3, r3, #3
 8006d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	021b      	lsls	r3, r3, #8
 8006d22:	4313      	orrs	r3, r2
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006d30:	f023 030c 	bic.w	r3, r3, #12
 8006d34:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	021b      	lsls	r3, r3, #8
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	011a      	lsls	r2, r3, #4
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	031b      	lsls	r3, r3, #12
 8006d60:	4313      	orrs	r3, r2
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006d6e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006d76:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	011b      	lsls	r3, r3, #4
 8006d82:	4313      	orrs	r3, r2
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3718      	adds	r7, #24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006df4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dfc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006e04:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d110      	bne.n	8006e2e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d102      	bne.n	8006e18 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e12:	7b7b      	ldrb	r3, [r7, #13]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d001      	beq.n	8006e1c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e069      	b.n	8006ef0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2202      	movs	r2, #2
 8006e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e2c:	e031      	b.n	8006e92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b04      	cmp	r3, #4
 8006e32:	d110      	bne.n	8006e56 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e34:	7bbb      	ldrb	r3, [r7, #14]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d102      	bne.n	8006e40 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e3a:	7b3b      	ldrb	r3, [r7, #12]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d001      	beq.n	8006e44 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e055      	b.n	8006ef0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2202      	movs	r2, #2
 8006e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e54:	e01d      	b.n	8006e92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d108      	bne.n	8006e6e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e5c:	7bbb      	ldrb	r3, [r7, #14]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d105      	bne.n	8006e6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e62:	7b7b      	ldrb	r3, [r7, #13]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d102      	bne.n	8006e6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e68:	7b3b      	ldrb	r3, [r7, #12]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d001      	beq.n	8006e72 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e03e      	b.n	8006ef0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2202      	movs	r2, #2
 8006e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2202      	movs	r2, #2
 8006e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d003      	beq.n	8006ea0 <HAL_TIM_Encoder_Start+0xc4>
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b04      	cmp	r3, #4
 8006e9c:	d008      	beq.n	8006eb0 <HAL_TIM_Encoder_Start+0xd4>
 8006e9e:	e00f      	b.n	8006ec0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fd8f 	bl	80079cc <TIM_CCxChannelCmd>
      break;
 8006eae:	e016      	b.n	8006ede <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	2104      	movs	r1, #4
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fd87 	bl	80079cc <TIM_CCxChannelCmd>
      break;
 8006ebe:	e00e      	b.n	8006ede <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f000 fd7f 	bl	80079cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	2104      	movs	r1, #4
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 fd78 	bl	80079cc <TIM_CCxChannelCmd>
      break;
 8006edc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f042 0201 	orr.w	r2, r2, #1
 8006eec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d122      	bne.n	8006f54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d11b      	bne.n	8006f54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f06f 0202 	mvn.w	r2, #2
 8006f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	f003 0303 	and.w	r3, r3, #3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fa81 	bl	8007442 <HAL_TIM_IC_CaptureCallback>
 8006f40:	e005      	b.n	8006f4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fa73 	bl	800742e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fa84 	bl	8007456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	f003 0304 	and.w	r3, r3, #4
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	d122      	bne.n	8006fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f003 0304 	and.w	r3, r3, #4
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d11b      	bne.n	8006fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f06f 0204 	mvn.w	r2, #4
 8006f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fa57 	bl	8007442 <HAL_TIM_IC_CaptureCallback>
 8006f94:	e005      	b.n	8006fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fa49 	bl	800742e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fa5a 	bl	8007456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	f003 0308 	and.w	r3, r3, #8
 8006fb2:	2b08      	cmp	r3, #8
 8006fb4:	d122      	bne.n	8006ffc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	f003 0308 	and.w	r3, r3, #8
 8006fc0:	2b08      	cmp	r3, #8
 8006fc2:	d11b      	bne.n	8006ffc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f06f 0208 	mvn.w	r2, #8
 8006fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2204      	movs	r2, #4
 8006fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	69db      	ldr	r3, [r3, #28]
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fa2d 	bl	8007442 <HAL_TIM_IC_CaptureCallback>
 8006fe8:	e005      	b.n	8006ff6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fa1f 	bl	800742e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fa30 	bl	8007456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	f003 0310 	and.w	r3, r3, #16
 8007006:	2b10      	cmp	r3, #16
 8007008:	d122      	bne.n	8007050 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f003 0310 	and.w	r3, r3, #16
 8007014:	2b10      	cmp	r3, #16
 8007016:	d11b      	bne.n	8007050 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f06f 0210 	mvn.w	r2, #16
 8007020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2208      	movs	r2, #8
 8007026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fa03 	bl	8007442 <HAL_TIM_IC_CaptureCallback>
 800703c:	e005      	b.n	800704a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f9f5 	bl	800742e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fa06 	bl	8007456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b01      	cmp	r3, #1
 800705c:	d10e      	bne.n	800707c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b01      	cmp	r3, #1
 800706a:	d107      	bne.n	800707c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f06f 0201 	mvn.w	r2, #1
 8007074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f9cf 	bl	800741a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007086:	2b80      	cmp	r3, #128	; 0x80
 8007088:	d10e      	bne.n	80070a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007094:	2b80      	cmp	r3, #128	; 0x80
 8007096:	d107      	bne.n	80070a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fd82 	bl	8007bac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b2:	2b40      	cmp	r3, #64	; 0x40
 80070b4:	d10e      	bne.n	80070d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c0:	2b40      	cmp	r3, #64	; 0x40
 80070c2:	d107      	bne.n	80070d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f9cb 	bl	800746a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b20      	cmp	r3, #32
 80070e0:	d10e      	bne.n	8007100 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f003 0320 	and.w	r3, r3, #32
 80070ec:	2b20      	cmp	r3, #32
 80070ee:	d107      	bne.n	8007100 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f06f 0220 	mvn.w	r2, #32
 80070f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fd4c 	bl	8007b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007114:	2300      	movs	r3, #0
 8007116:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800711e:	2b01      	cmp	r3, #1
 8007120:	d101      	bne.n	8007126 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007122:	2302      	movs	r3, #2
 8007124:	e0ae      	b.n	8007284 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b0c      	cmp	r3, #12
 8007132:	f200 809f 	bhi.w	8007274 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007136:	a201      	add	r2, pc, #4	; (adr r2, 800713c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713c:	08007171 	.word	0x08007171
 8007140:	08007275 	.word	0x08007275
 8007144:	08007275 	.word	0x08007275
 8007148:	08007275 	.word	0x08007275
 800714c:	080071b1 	.word	0x080071b1
 8007150:	08007275 	.word	0x08007275
 8007154:	08007275 	.word	0x08007275
 8007158:	08007275 	.word	0x08007275
 800715c:	080071f3 	.word	0x080071f3
 8007160:	08007275 	.word	0x08007275
 8007164:	08007275 	.word	0x08007275
 8007168:	08007275 	.word	0x08007275
 800716c:	08007233 	.word	0x08007233
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68b9      	ldr	r1, [r7, #8]
 8007176:	4618      	mov	r0, r3
 8007178:	f000 fa02 	bl	8007580 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f042 0208 	orr.w	r2, r2, #8
 800718a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	699a      	ldr	r2, [r3, #24]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 0204 	bic.w	r2, r2, #4
 800719a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6999      	ldr	r1, [r3, #24]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	691a      	ldr	r2, [r3, #16]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	619a      	str	r2, [r3, #24]
      break;
 80071ae:	e064      	b.n	800727a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68b9      	ldr	r1, [r7, #8]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 fa48 	bl	800764c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699a      	ldr	r2, [r3, #24]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	699a      	ldr	r2, [r3, #24]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6999      	ldr	r1, [r3, #24]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	021a      	lsls	r2, r3, #8
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	619a      	str	r2, [r3, #24]
      break;
 80071f0:	e043      	b.n	800727a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68b9      	ldr	r1, [r7, #8]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 fa93 	bl	8007724 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69da      	ldr	r2, [r3, #28]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f042 0208 	orr.w	r2, r2, #8
 800720c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69da      	ldr	r2, [r3, #28]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f022 0204 	bic.w	r2, r2, #4
 800721c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	69d9      	ldr	r1, [r3, #28]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	691a      	ldr	r2, [r3, #16]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	430a      	orrs	r2, r1
 800722e:	61da      	str	r2, [r3, #28]
      break;
 8007230:	e023      	b.n	800727a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68b9      	ldr	r1, [r7, #8]
 8007238:	4618      	mov	r0, r3
 800723a:	f000 fadd 	bl	80077f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	69da      	ldr	r2, [r3, #28]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800724c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	69da      	ldr	r2, [r3, #28]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800725c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	69d9      	ldr	r1, [r3, #28]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	021a      	lsls	r2, r3, #8
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	61da      	str	r2, [r3, #28]
      break;
 8007272:	e002      	b.n	800727a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	75fb      	strb	r3, [r7, #23]
      break;
 8007278:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007282:	7dfb      	ldrb	r3, [r7, #23]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3718      	adds	r7, #24
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d101      	bne.n	80072a8 <HAL_TIM_ConfigClockSource+0x1c>
 80072a4:	2302      	movs	r3, #2
 80072a6:	e0b4      	b.n	8007412 <HAL_TIM_ConfigClockSource+0x186>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072e0:	d03e      	beq.n	8007360 <HAL_TIM_ConfigClockSource+0xd4>
 80072e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072e6:	f200 8087 	bhi.w	80073f8 <HAL_TIM_ConfigClockSource+0x16c>
 80072ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ee:	f000 8086 	beq.w	80073fe <HAL_TIM_ConfigClockSource+0x172>
 80072f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f6:	d87f      	bhi.n	80073f8 <HAL_TIM_ConfigClockSource+0x16c>
 80072f8:	2b70      	cmp	r3, #112	; 0x70
 80072fa:	d01a      	beq.n	8007332 <HAL_TIM_ConfigClockSource+0xa6>
 80072fc:	2b70      	cmp	r3, #112	; 0x70
 80072fe:	d87b      	bhi.n	80073f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007300:	2b60      	cmp	r3, #96	; 0x60
 8007302:	d050      	beq.n	80073a6 <HAL_TIM_ConfigClockSource+0x11a>
 8007304:	2b60      	cmp	r3, #96	; 0x60
 8007306:	d877      	bhi.n	80073f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007308:	2b50      	cmp	r3, #80	; 0x50
 800730a:	d03c      	beq.n	8007386 <HAL_TIM_ConfigClockSource+0xfa>
 800730c:	2b50      	cmp	r3, #80	; 0x50
 800730e:	d873      	bhi.n	80073f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007310:	2b40      	cmp	r3, #64	; 0x40
 8007312:	d058      	beq.n	80073c6 <HAL_TIM_ConfigClockSource+0x13a>
 8007314:	2b40      	cmp	r3, #64	; 0x40
 8007316:	d86f      	bhi.n	80073f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007318:	2b30      	cmp	r3, #48	; 0x30
 800731a:	d064      	beq.n	80073e6 <HAL_TIM_ConfigClockSource+0x15a>
 800731c:	2b30      	cmp	r3, #48	; 0x30
 800731e:	d86b      	bhi.n	80073f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007320:	2b20      	cmp	r3, #32
 8007322:	d060      	beq.n	80073e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007324:	2b20      	cmp	r3, #32
 8007326:	d867      	bhi.n	80073f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007328:	2b00      	cmp	r3, #0
 800732a:	d05c      	beq.n	80073e6 <HAL_TIM_ConfigClockSource+0x15a>
 800732c:	2b10      	cmp	r3, #16
 800732e:	d05a      	beq.n	80073e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007330:	e062      	b.n	80073f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6818      	ldr	r0, [r3, #0]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	6899      	ldr	r1, [r3, #8]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	685a      	ldr	r2, [r3, #4]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f000 fb23 	bl	800798c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007354:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	609a      	str	r2, [r3, #8]
      break;
 800735e:	e04f      	b.n	8007400 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6818      	ldr	r0, [r3, #0]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	6899      	ldr	r1, [r3, #8]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	f000 fb0c 	bl	800798c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007382:	609a      	str	r2, [r3, #8]
      break;
 8007384:	e03c      	b.n	8007400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6818      	ldr	r0, [r3, #0]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	6859      	ldr	r1, [r3, #4]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	461a      	mov	r2, r3
 8007394:	f000 fa80 	bl	8007898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2150      	movs	r1, #80	; 0x50
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 fad9 	bl	8007956 <TIM_ITRx_SetConfig>
      break;
 80073a4:	e02c      	b.n	8007400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6818      	ldr	r0, [r3, #0]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	6859      	ldr	r1, [r3, #4]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	461a      	mov	r2, r3
 80073b4:	f000 fa9f 	bl	80078f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2160      	movs	r1, #96	; 0x60
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 fac9 	bl	8007956 <TIM_ITRx_SetConfig>
      break;
 80073c4:	e01c      	b.n	8007400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6818      	ldr	r0, [r3, #0]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	6859      	ldr	r1, [r3, #4]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	461a      	mov	r2, r3
 80073d4:	f000 fa60 	bl	8007898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2140      	movs	r1, #64	; 0x40
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 fab9 	bl	8007956 <TIM_ITRx_SetConfig>
      break;
 80073e4:	e00c      	b.n	8007400 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4619      	mov	r1, r3
 80073f0:	4610      	mov	r0, r2
 80073f2:	f000 fab0 	bl	8007956 <TIM_ITRx_SetConfig>
      break;
 80073f6:	e003      	b.n	8007400 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	73fb      	strb	r3, [r7, #15]
      break;
 80073fc:	e000      	b.n	8007400 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007410:	7bfb      	ldrb	r3, [r7, #15]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007422:	bf00      	nop
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007456:	b480      	push	{r7}
 8007458:	b083      	sub	sp, #12
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800745e:	bf00      	nop
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007472:	bf00      	nop
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
	...

08007480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a34      	ldr	r2, [pc, #208]	; (8007564 <TIM_Base_SetConfig+0xe4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00f      	beq.n	80074b8 <TIM_Base_SetConfig+0x38>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800749e:	d00b      	beq.n	80074b8 <TIM_Base_SetConfig+0x38>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a31      	ldr	r2, [pc, #196]	; (8007568 <TIM_Base_SetConfig+0xe8>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d007      	beq.n	80074b8 <TIM_Base_SetConfig+0x38>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a30      	ldr	r2, [pc, #192]	; (800756c <TIM_Base_SetConfig+0xec>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d003      	beq.n	80074b8 <TIM_Base_SetConfig+0x38>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a2f      	ldr	r2, [pc, #188]	; (8007570 <TIM_Base_SetConfig+0xf0>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d108      	bne.n	80074ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a25      	ldr	r2, [pc, #148]	; (8007564 <TIM_Base_SetConfig+0xe4>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d01b      	beq.n	800750a <TIM_Base_SetConfig+0x8a>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d8:	d017      	beq.n	800750a <TIM_Base_SetConfig+0x8a>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a22      	ldr	r2, [pc, #136]	; (8007568 <TIM_Base_SetConfig+0xe8>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d013      	beq.n	800750a <TIM_Base_SetConfig+0x8a>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a21      	ldr	r2, [pc, #132]	; (800756c <TIM_Base_SetConfig+0xec>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d00f      	beq.n	800750a <TIM_Base_SetConfig+0x8a>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a20      	ldr	r2, [pc, #128]	; (8007570 <TIM_Base_SetConfig+0xf0>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d00b      	beq.n	800750a <TIM_Base_SetConfig+0x8a>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a1f      	ldr	r2, [pc, #124]	; (8007574 <TIM_Base_SetConfig+0xf4>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d007      	beq.n	800750a <TIM_Base_SetConfig+0x8a>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a1e      	ldr	r2, [pc, #120]	; (8007578 <TIM_Base_SetConfig+0xf8>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d003      	beq.n	800750a <TIM_Base_SetConfig+0x8a>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a1d      	ldr	r2, [pc, #116]	; (800757c <TIM_Base_SetConfig+0xfc>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d108      	bne.n	800751c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	4313      	orrs	r3, r2
 800751a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	4313      	orrs	r3, r2
 8007528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	689a      	ldr	r2, [r3, #8]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a08      	ldr	r2, [pc, #32]	; (8007564 <TIM_Base_SetConfig+0xe4>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d103      	bne.n	8007550 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	691a      	ldr	r2, [r3, #16]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	615a      	str	r2, [r3, #20]
}
 8007556:	bf00      	nop
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	40010000 	.word	0x40010000
 8007568:	40000400 	.word	0x40000400
 800756c:	40000800 	.word	0x40000800
 8007570:	40000c00 	.word	0x40000c00
 8007574:	40014000 	.word	0x40014000
 8007578:	40014400 	.word	0x40014400
 800757c:	40014800 	.word	0x40014800

08007580 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	f023 0201 	bic.w	r2, r3, #1
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 0303 	bic.w	r3, r3, #3
 80075b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	4313      	orrs	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f023 0302 	bic.w	r3, r3, #2
 80075c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a1c      	ldr	r2, [pc, #112]	; (8007648 <TIM_OC1_SetConfig+0xc8>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d10c      	bne.n	80075f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f023 0308 	bic.w	r3, r3, #8
 80075e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f023 0304 	bic.w	r3, r3, #4
 80075f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a13      	ldr	r2, [pc, #76]	; (8007648 <TIM_OC1_SetConfig+0xc8>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d111      	bne.n	8007622 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800760c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	4313      	orrs	r3, r2
 8007616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	4313      	orrs	r3, r2
 8007620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	621a      	str	r2, [r3, #32]
}
 800763c:	bf00      	nop
 800763e:	371c      	adds	r7, #28
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	40010000 	.word	0x40010000

0800764c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	f023 0210 	bic.w	r2, r3, #16
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800767a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	021b      	lsls	r3, r3, #8
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	4313      	orrs	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f023 0320 	bic.w	r3, r3, #32
 8007696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	011b      	lsls	r3, r3, #4
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a1e      	ldr	r2, [pc, #120]	; (8007720 <TIM_OC2_SetConfig+0xd4>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d10d      	bne.n	80076c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	011b      	lsls	r3, r3, #4
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	4313      	orrs	r3, r2
 80076be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a15      	ldr	r2, [pc, #84]	; (8007720 <TIM_OC2_SetConfig+0xd4>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d113      	bne.n	80076f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	621a      	str	r2, [r3, #32]
}
 8007712:	bf00      	nop
 8007714:	371c      	adds	r7, #28
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	40010000 	.word	0x40010000

08007724 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 0303 	bic.w	r3, r3, #3
 800775a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	4313      	orrs	r3, r2
 8007764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800776c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	021b      	lsls	r3, r3, #8
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	4313      	orrs	r3, r2
 8007778:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a1d      	ldr	r2, [pc, #116]	; (80077f4 <TIM_OC3_SetConfig+0xd0>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d10d      	bne.n	800779e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007788:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	021b      	lsls	r3, r3, #8
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	4313      	orrs	r3, r2
 8007794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800779c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a14      	ldr	r2, [pc, #80]	; (80077f4 <TIM_OC3_SetConfig+0xd0>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d113      	bne.n	80077ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	011b      	lsls	r3, r3, #4
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	4313      	orrs	r3, r2
 80077c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	011b      	lsls	r3, r3, #4
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	621a      	str	r2, [r3, #32]
}
 80077e8:	bf00      	nop
 80077ea:	371c      	adds	r7, #28
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr
 80077f4:	40010000 	.word	0x40010000

080077f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b087      	sub	sp, #28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800782e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	021b      	lsls	r3, r3, #8
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	4313      	orrs	r3, r2
 800783a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	031b      	lsls	r3, r3, #12
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	4313      	orrs	r3, r2
 800784e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a10      	ldr	r2, [pc, #64]	; (8007894 <TIM_OC4_SetConfig+0x9c>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d109      	bne.n	800786c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800785e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	019b      	lsls	r3, r3, #6
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	4313      	orrs	r3, r2
 800786a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	693a      	ldr	r2, [r7, #16]
 8007884:	621a      	str	r2, [r3, #32]
}
 8007886:	bf00      	nop
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	40010000 	.word	0x40010000

08007898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007898:	b480      	push	{r7}
 800789a:	b087      	sub	sp, #28
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6a1b      	ldr	r3, [r3, #32]
 80078a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	f023 0201 	bic.w	r2, r3, #1
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	011b      	lsls	r3, r3, #4
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f023 030a 	bic.w	r3, r3, #10
 80078d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	4313      	orrs	r3, r2
 80078dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	621a      	str	r2, [r3, #32]
}
 80078ea:	bf00      	nop
 80078ec:	371c      	adds	r7, #28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b087      	sub	sp, #28
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	60f8      	str	r0, [r7, #12]
 80078fe:	60b9      	str	r1, [r7, #8]
 8007900:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	f023 0210 	bic.w	r2, r3, #16
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007920:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	031b      	lsls	r3, r3, #12
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	4313      	orrs	r3, r2
 800792a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007932:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	4313      	orrs	r3, r2
 800793c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	621a      	str	r2, [r3, #32]
}
 800794a:	bf00      	nop
 800794c:	371c      	adds	r7, #28
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007956:	b480      	push	{r7}
 8007958:	b085      	sub	sp, #20
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4313      	orrs	r3, r2
 8007974:	f043 0307 	orr.w	r3, r3, #7
 8007978:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	609a      	str	r2, [r3, #8]
}
 8007980:	bf00      	nop
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800798c:	b480      	push	{r7}
 800798e:	b087      	sub	sp, #28
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
 8007998:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	021a      	lsls	r2, r3, #8
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	431a      	orrs	r2, r3
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	609a      	str	r2, [r3, #8]
}
 80079c0:	bf00      	nop
 80079c2:	371c      	adds	r7, #28
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	f003 031f 	and.w	r3, r3, #31
 80079de:	2201      	movs	r2, #1
 80079e0:	fa02 f303 	lsl.w	r3, r2, r3
 80079e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6a1a      	ldr	r2, [r3, #32]
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	43db      	mvns	r3, r3
 80079ee:	401a      	ands	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6a1a      	ldr	r2, [r3, #32]
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	f003 031f 	and.w	r3, r3, #31
 80079fe:	6879      	ldr	r1, [r7, #4]
 8007a00:	fa01 f303 	lsl.w	r3, r1, r3
 8007a04:	431a      	orrs	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	621a      	str	r2, [r3, #32]
}
 8007a0a:	bf00      	nop
 8007a0c:	371c      	adds	r7, #28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
	...

08007a18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d101      	bne.n	8007a30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	e050      	b.n	8007ad2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a1c      	ldr	r2, [pc, #112]	; (8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d018      	beq.n	8007aa6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a7c:	d013      	beq.n	8007aa6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a18      	ldr	r2, [pc, #96]	; (8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d00e      	beq.n	8007aa6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a16      	ldr	r2, [pc, #88]	; (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d009      	beq.n	8007aa6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a15      	ldr	r2, [pc, #84]	; (8007aec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d004      	beq.n	8007aa6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a13      	ldr	r2, [pc, #76]	; (8007af0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d10c      	bne.n	8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	40010000 	.word	0x40010000
 8007ae4:	40000400 	.word	0x40000400
 8007ae8:	40000800 	.word	0x40000800
 8007aec:	40000c00 	.word	0x40000c00
 8007af0:	40014000 	.word	0x40014000

08007af4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d101      	bne.n	8007b10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	e03d      	b.n	8007b8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	695b      	ldr	r3, [r3, #20]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3714      	adds	r7, #20
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e03f      	b.n	8007c52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d106      	bne.n	8007bec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7fa fde6 	bl	80027b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2224      	movs	r2, #36	; 0x24
 8007bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68da      	ldr	r2, [r3, #12]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f001 f8cb 	bl	8008da0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	691a      	ldr	r2, [r3, #16]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	695a      	ldr	r2, [r3, #20]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68da      	ldr	r2, [r3, #12]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2220      	movs	r2, #32
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b082      	sub	sp, #8
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e021      	b.n	8007cb0 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2224      	movs	r2, #36	; 0x24
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c82:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7fa feef 	bl	8002a68 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b08a      	sub	sp, #40	; 0x28
 8007cbc:	af02      	add	r7, sp, #8
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	603b      	str	r3, [r7, #0]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b20      	cmp	r3, #32
 8007cd6:	d17c      	bne.n	8007dd2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <HAL_UART_Transmit+0x2c>
 8007cde:	88fb      	ldrh	r3, [r7, #6]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e075      	b.n	8007dd4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d101      	bne.n	8007cf6 <HAL_UART_Transmit+0x3e>
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	e06e      	b.n	8007dd4 <HAL_UART_Transmit+0x11c>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2221      	movs	r2, #33	; 0x21
 8007d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d0c:	f7fc fcf6 	bl	80046fc <HAL_GetTick>
 8007d10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	88fa      	ldrh	r2, [r7, #6]
 8007d16:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	88fa      	ldrh	r2, [r7, #6]
 8007d1c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d26:	d108      	bne.n	8007d3a <HAL_UART_Transmit+0x82>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d104      	bne.n	8007d3a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007d30:	2300      	movs	r3, #0
 8007d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	61bb      	str	r3, [r7, #24]
 8007d38:	e003      	b.n	8007d42 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007d4a:	e02a      	b.n	8007da2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	2200      	movs	r2, #0
 8007d54:	2180      	movs	r1, #128	; 0x80
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f000 fd53 	bl	8008802 <UART_WaitOnFlagUntilTimeout>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e036      	b.n	8007dd4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10b      	bne.n	8007d84 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	881b      	ldrh	r3, [r3, #0]
 8007d70:	461a      	mov	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d7a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	3302      	adds	r3, #2
 8007d80:	61bb      	str	r3, [r7, #24]
 8007d82:	e007      	b.n	8007d94 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	781a      	ldrb	r2, [r3, #0]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	3301      	adds	r3, #1
 8007d92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1cf      	bne.n	8007d4c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	2200      	movs	r2, #0
 8007db4:	2140      	movs	r1, #64	; 0x40
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 fd23 	bl	8008802 <UART_WaitOnFlagUntilTimeout>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e006      	b.n	8007dd4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2220      	movs	r2, #32
 8007dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	e000      	b.n	8007dd4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007dd2:	2302      	movs	r3, #2
  }
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3720      	adds	r7, #32
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b08c      	sub	sp, #48	; 0x30
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	4613      	mov	r3, r2
 8007de8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b20      	cmp	r3, #32
 8007df4:	d165      	bne.n	8007ec2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <HAL_UART_Transmit_DMA+0x26>
 8007dfc:	88fb      	ldrh	r3, [r7, #6]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e05e      	b.n	8007ec4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d101      	bne.n	8007e14 <HAL_UART_Transmit_DMA+0x38>
 8007e10:	2302      	movs	r3, #2
 8007e12:	e057      	b.n	8007ec4 <HAL_UART_Transmit_DMA+0xe8>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	88fa      	ldrh	r2, [r7, #6]
 8007e26:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	88fa      	ldrh	r2, [r7, #6]
 8007e2c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2221      	movs	r2, #33	; 0x21
 8007e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e40:	4a22      	ldr	r2, [pc, #136]	; (8007ecc <HAL_UART_Transmit_DMA+0xf0>)
 8007e42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e48:	4a21      	ldr	r2, [pc, #132]	; (8007ed0 <HAL_UART_Transmit_DMA+0xf4>)
 8007e4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e50:	4a20      	ldr	r2, [pc, #128]	; (8007ed4 <HAL_UART_Transmit_DMA+0xf8>)
 8007e52:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e58:	2200      	movs	r2, #0
 8007e5a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007e5c:	f107 0308 	add.w	r3, r7, #8
 8007e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e68:	6819      	ldr	r1, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	3304      	adds	r3, #4
 8007e70:	461a      	mov	r2, r3
 8007e72:	88fb      	ldrh	r3, [r7, #6]
 8007e74:	f7fd fa90 	bl	8005398 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e80:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	3314      	adds	r3, #20
 8007e90:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	e853 3f00 	ldrex	r3, [r3]
 8007e98:	617b      	str	r3, [r7, #20]
   return(result);
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	3314      	adds	r3, #20
 8007ea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eaa:	627a      	str	r2, [r7, #36]	; 0x24
 8007eac:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eae:	6a39      	ldr	r1, [r7, #32]
 8007eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb2:	e841 2300 	strex	r3, r2, [r1]
 8007eb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1e5      	bne.n	8007e8a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	e000      	b.n	8007ec4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007ec2:	2302      	movs	r3, #2
  }
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3730      	adds	r7, #48	; 0x30
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	0800855d 	.word	0x0800855d
 8007ed0:	080085f7 	.word	0x080085f7
 8007ed4:	0800876f 	.word	0x0800876f

08007ed8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b20      	cmp	r3, #32
 8007ef0:	d11d      	bne.n	8007f2e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d002      	beq.n	8007efe <HAL_UART_Receive_DMA+0x26>
 8007ef8:	88fb      	ldrh	r3, [r7, #6]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e016      	b.n	8007f30 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d101      	bne.n	8007f10 <HAL_UART_Receive_DMA+0x38>
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	e00f      	b.n	8007f30 <HAL_UART_Receive_DMA+0x58>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007f1e:	88fb      	ldrh	r3, [r7, #6]
 8007f20:	461a      	mov	r2, r3
 8007f22:	68b9      	ldr	r1, [r7, #8]
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f000 fcdb 	bl	80088e0 <UART_Start_Receive_DMA>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	e000      	b.n	8007f30 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007f2e:	2302      	movs	r3, #2
  }
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b08c      	sub	sp, #48	; 0x30
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	4613      	mov	r3, r2
 8007f44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b20      	cmp	r3, #32
 8007f50:	d152      	bne.n	8007ff8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007f58:	88fb      	ldrh	r3, [r7, #6]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e04b      	b.n	8007ffa <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d101      	bne.n	8007f70 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	e044      	b.n	8007ffa <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007f7e:	88fb      	ldrh	r3, [r7, #6]
 8007f80:	461a      	mov	r2, r3
 8007f82:	68b9      	ldr	r1, [r7, #8]
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 fcab 	bl	80088e0 <UART_Start_Receive_DMA>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007f90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d12c      	bne.n	8007ff2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d125      	bne.n	8007fec <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	613b      	str	r3, [r7, #16]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	613b      	str	r3, [r7, #16]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	613b      	str	r3, [r7, #16]
 8007fb4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	330c      	adds	r3, #12
 8007fbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	e853 3f00 	ldrex	r3, [r3]
 8007fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f043 0310 	orr.w	r3, r3, #16
 8007fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	330c      	adds	r3, #12
 8007fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fd6:	627a      	str	r2, [r7, #36]	; 0x24
 8007fd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fda:	6a39      	ldr	r1, [r7, #32]
 8007fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fde:	e841 2300 	strex	r3, r2, [r1]
 8007fe2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1e5      	bne.n	8007fb6 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8007fea:	e002      	b.n	8007ff2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007ff2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ff6:	e000      	b.n	8007ffa <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8007ff8:	2302      	movs	r3, #2
  }
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3730      	adds	r7, #48	; 0x30
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
	...

08008004 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b0ba      	sub	sp, #232	; 0xe8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800802a:	2300      	movs	r3, #0
 800802c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008030:	2300      	movs	r3, #0
 8008032:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800803a:	f003 030f 	and.w	r3, r3, #15
 800803e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008042:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10f      	bne.n	800806a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800804a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800804e:	f003 0320 	and.w	r3, r3, #32
 8008052:	2b00      	cmp	r3, #0
 8008054:	d009      	beq.n	800806a <HAL_UART_IRQHandler+0x66>
 8008056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800805a:	f003 0320 	and.w	r3, r3, #32
 800805e:	2b00      	cmp	r3, #0
 8008060:	d003      	beq.n	800806a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fde1 	bl	8008c2a <UART_Receive_IT>
      return;
 8008068:	e256      	b.n	8008518 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800806a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800806e:	2b00      	cmp	r3, #0
 8008070:	f000 80de 	beq.w	8008230 <HAL_UART_IRQHandler+0x22c>
 8008074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	2b00      	cmp	r3, #0
 800807e:	d106      	bne.n	800808e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008084:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 80d1 	beq.w	8008230 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800808e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008092:	f003 0301 	and.w	r3, r3, #1
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00b      	beq.n	80080b2 <HAL_UART_IRQHandler+0xae>
 800809a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800809e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d005      	beq.n	80080b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080aa:	f043 0201 	orr.w	r2, r3, #1
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080b6:	f003 0304 	and.w	r3, r3, #4
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00b      	beq.n	80080d6 <HAL_UART_IRQHandler+0xd2>
 80080be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d005      	beq.n	80080d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ce:	f043 0202 	orr.w	r2, r3, #2
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080da:	f003 0302 	and.w	r3, r3, #2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00b      	beq.n	80080fa <HAL_UART_IRQHandler+0xf6>
 80080e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d005      	beq.n	80080fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f2:	f043 0204 	orr.w	r2, r3, #4
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80080fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080fe:	f003 0308 	and.w	r3, r3, #8
 8008102:	2b00      	cmp	r3, #0
 8008104:	d011      	beq.n	800812a <HAL_UART_IRQHandler+0x126>
 8008106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800810a:	f003 0320 	and.w	r3, r3, #32
 800810e:	2b00      	cmp	r3, #0
 8008110:	d105      	bne.n	800811e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	2b00      	cmp	r3, #0
 800811c:	d005      	beq.n	800812a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008122:	f043 0208 	orr.w	r2, r3, #8
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 81ed 	beq.w	800850e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008138:	f003 0320 	and.w	r3, r3, #32
 800813c:	2b00      	cmp	r3, #0
 800813e:	d008      	beq.n	8008152 <HAL_UART_IRQHandler+0x14e>
 8008140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008144:	f003 0320 	and.w	r3, r3, #32
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fd6c 	bl	8008c2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815c:	2b40      	cmp	r3, #64	; 0x40
 800815e:	bf0c      	ite	eq
 8008160:	2301      	moveq	r3, #1
 8008162:	2300      	movne	r3, #0
 8008164:	b2db      	uxtb	r3, r3
 8008166:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816e:	f003 0308 	and.w	r3, r3, #8
 8008172:	2b00      	cmp	r3, #0
 8008174:	d103      	bne.n	800817e <HAL_UART_IRQHandler+0x17a>
 8008176:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800817a:	2b00      	cmp	r3, #0
 800817c:	d04f      	beq.n	800821e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fc74 	bl	8008a6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800818e:	2b40      	cmp	r3, #64	; 0x40
 8008190:	d141      	bne.n	8008216 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	3314      	adds	r3, #20
 8008198:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081a0:	e853 3f00 	ldrex	r3, [r3]
 80081a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80081a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3314      	adds	r3, #20
 80081ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80081be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80081c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80081ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80081ce:	e841 2300 	strex	r3, r2, [r1]
 80081d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80081d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1d9      	bne.n	8008192 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d013      	beq.n	800820e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ea:	4a7d      	ldr	r2, [pc, #500]	; (80083e0 <HAL_UART_IRQHandler+0x3dc>)
 80081ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fd f998 	bl	8005528 <HAL_DMA_Abort_IT>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d016      	beq.n	800822c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008208:	4610      	mov	r0, r2
 800820a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800820c:	e00e      	b.n	800822c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7f9 fef6 	bl	8002000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008214:	e00a      	b.n	800822c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7f9 fef2 	bl	8002000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800821c:	e006      	b.n	800822c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7f9 feee 	bl	8002000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800822a:	e170      	b.n	800850e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800822c:	bf00      	nop
    return;
 800822e:	e16e      	b.n	800850e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008234:	2b01      	cmp	r3, #1
 8008236:	f040 814a 	bne.w	80084ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800823a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800823e:	f003 0310 	and.w	r3, r3, #16
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 8143 	beq.w	80084ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800824c:	f003 0310 	and.w	r3, r3, #16
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 813c 	beq.w	80084ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008256:	2300      	movs	r3, #0
 8008258:	60bb      	str	r3, [r7, #8]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	60bb      	str	r3, [r7, #8]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	60bb      	str	r3, [r7, #8]
 800826a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008276:	2b40      	cmp	r3, #64	; 0x40
 8008278:	f040 80b4 	bne.w	80083e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008288:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 8140 	beq.w	8008512 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008296:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800829a:	429a      	cmp	r2, r3
 800829c:	f080 8139 	bcs.w	8008512 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082b2:	f000 8088 	beq.w	80083c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	330c      	adds	r3, #12
 80082bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80082c4:	e853 3f00 	ldrex	r3, [r3]
 80082c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80082cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	330c      	adds	r3, #12
 80082de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80082e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80082e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80082ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80082f2:	e841 2300 	strex	r3, r2, [r1]
 80082f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80082fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1d9      	bne.n	80082b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3314      	adds	r3, #20
 8008308:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800830c:	e853 3f00 	ldrex	r3, [r3]
 8008310:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008312:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008314:	f023 0301 	bic.w	r3, r3, #1
 8008318:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3314      	adds	r3, #20
 8008322:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008326:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800832a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800832e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008332:	e841 2300 	strex	r3, r2, [r1]
 8008336:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1e1      	bne.n	8008302 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3314      	adds	r3, #20
 8008344:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008346:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008348:	e853 3f00 	ldrex	r3, [r3]
 800834c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800834e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	3314      	adds	r3, #20
 800835e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008362:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008364:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008366:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008368:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800836a:	e841 2300 	strex	r3, r2, [r1]
 800836e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1e3      	bne.n	800833e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2220      	movs	r2, #32
 800837a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	330c      	adds	r3, #12
 800838a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800838e:	e853 3f00 	ldrex	r3, [r3]
 8008392:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008396:	f023 0310 	bic.w	r3, r3, #16
 800839a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	330c      	adds	r3, #12
 80083a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80083a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80083aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083b0:	e841 2300 	strex	r3, r2, [r1]
 80083b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80083b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1e3      	bne.n	8008384 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fd f841 	bl	8005448 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7f9 fe00 	bl	8001fdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80083dc:	e099      	b.n	8008512 <HAL_UART_IRQHandler+0x50e>
 80083de:	bf00      	nop
 80083e0:	08008b33 	.word	0x08008b33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	1ad3      	subs	r3, r2, r3
 80083f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f000 808b 	beq.w	8008516 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008400:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008404:	2b00      	cmp	r3, #0
 8008406:	f000 8086 	beq.w	8008516 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	330c      	adds	r3, #12
 8008410:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008414:	e853 3f00 	ldrex	r3, [r3]
 8008418:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800841a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008420:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	330c      	adds	r3, #12
 800842a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800842e:	647a      	str	r2, [r7, #68]	; 0x44
 8008430:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008432:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008434:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008436:	e841 2300 	strex	r3, r2, [r1]
 800843a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800843c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1e3      	bne.n	800840a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3314      	adds	r3, #20
 8008448:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	e853 3f00 	ldrex	r3, [r3]
 8008450:	623b      	str	r3, [r7, #32]
   return(result);
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	f023 0301 	bic.w	r3, r3, #1
 8008458:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3314      	adds	r3, #20
 8008462:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008466:	633a      	str	r2, [r7, #48]	; 0x30
 8008468:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800846c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800846e:	e841 2300 	strex	r3, r2, [r1]
 8008472:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e3      	bne.n	8008442 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2220      	movs	r2, #32
 800847e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	330c      	adds	r3, #12
 800848e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	e853 3f00 	ldrex	r3, [r3]
 8008496:	60fb      	str	r3, [r7, #12]
   return(result);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f023 0310 	bic.w	r3, r3, #16
 800849e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	330c      	adds	r3, #12
 80084a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80084ac:	61fa      	str	r2, [r7, #28]
 80084ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b0:	69b9      	ldr	r1, [r7, #24]
 80084b2:	69fa      	ldr	r2, [r7, #28]
 80084b4:	e841 2300 	strex	r3, r2, [r1]
 80084b8:	617b      	str	r3, [r7, #20]
   return(result);
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1e3      	bne.n	8008488 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084c4:	4619      	mov	r1, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f7f9 fd88 	bl	8001fdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80084cc:	e023      	b.n	8008516 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80084ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d009      	beq.n	80084ee <HAL_UART_IRQHandler+0x4ea>
 80084da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d003      	beq.n	80084ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fb37 	bl	8008b5a <UART_Transmit_IT>
    return;
 80084ec:	e014      	b.n	8008518 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80084ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00e      	beq.n	8008518 <HAL_UART_IRQHandler+0x514>
 80084fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008502:	2b00      	cmp	r3, #0
 8008504:	d008      	beq.n	8008518 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fb77 	bl	8008bfa <UART_EndTransmit_IT>
    return;
 800850c:	e004      	b.n	8008518 <HAL_UART_IRQHandler+0x514>
    return;
 800850e:	bf00      	nop
 8008510:	e002      	b.n	8008518 <HAL_UART_IRQHandler+0x514>
      return;
 8008512:	bf00      	nop
 8008514:	e000      	b.n	8008518 <HAL_UART_IRQHandler+0x514>
      return;
 8008516:	bf00      	nop
  }
}
 8008518:	37e8      	adds	r7, #232	; 0xe8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop

08008520 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b090      	sub	sp, #64	; 0x40
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008568:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008574:	2b00      	cmp	r3, #0
 8008576:	d137      	bne.n	80085e8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800857a:	2200      	movs	r2, #0
 800857c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800857e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3314      	adds	r3, #20
 8008584:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008588:	e853 3f00 	ldrex	r3, [r3]
 800858c:	623b      	str	r3, [r7, #32]
   return(result);
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008594:	63bb      	str	r3, [r7, #56]	; 0x38
 8008596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3314      	adds	r3, #20
 800859c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800859e:	633a      	str	r2, [r7, #48]	; 0x30
 80085a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085a6:	e841 2300 	strex	r3, r2, [r1]
 80085aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1e5      	bne.n	800857e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	330c      	adds	r3, #12
 80085b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	e853 3f00 	ldrex	r3, [r3]
 80085c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085c8:	637b      	str	r3, [r7, #52]	; 0x34
 80085ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	330c      	adds	r3, #12
 80085d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085d2:	61fa      	str	r2, [r7, #28]
 80085d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d6:	69b9      	ldr	r1, [r7, #24]
 80085d8:	69fa      	ldr	r2, [r7, #28]
 80085da:	e841 2300 	strex	r3, r2, [r1]
 80085de:	617b      	str	r3, [r7, #20]
   return(result);
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1e5      	bne.n	80085b2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80085e6:	e002      	b.n	80085ee <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80085e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80085ea:	f7f9 fd1d 	bl	8002028 <HAL_UART_TxCpltCallback>
}
 80085ee:	bf00      	nop
 80085f0:	3740      	adds	r7, #64	; 0x40
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b084      	sub	sp, #16
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008602:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f7ff ff8b 	bl	8008520 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800860a:	bf00      	nop
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b09c      	sub	sp, #112	; 0x70
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800862a:	2b00      	cmp	r3, #0
 800862c:	d172      	bne.n	8008714 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800862e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008630:	2200      	movs	r2, #0
 8008632:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	330c      	adds	r3, #12
 800863a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800863e:	e853 3f00 	ldrex	r3, [r3]
 8008642:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008646:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800864a:	66bb      	str	r3, [r7, #104]	; 0x68
 800864c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	330c      	adds	r3, #12
 8008652:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008654:	65ba      	str	r2, [r7, #88]	; 0x58
 8008656:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008658:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800865a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800865c:	e841 2300 	strex	r3, r2, [r1]
 8008660:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1e5      	bne.n	8008634 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	3314      	adds	r3, #20
 800866e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008672:	e853 3f00 	ldrex	r3, [r3]
 8008676:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800867a:	f023 0301 	bic.w	r3, r3, #1
 800867e:	667b      	str	r3, [r7, #100]	; 0x64
 8008680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3314      	adds	r3, #20
 8008686:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008688:	647a      	str	r2, [r7, #68]	; 0x44
 800868a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800868e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008690:	e841 2300 	strex	r3, r2, [r1]
 8008694:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1e5      	bne.n	8008668 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800869c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	3314      	adds	r3, #20
 80086a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	e853 3f00 	ldrex	r3, [r3]
 80086aa:	623b      	str	r3, [r7, #32]
   return(result);
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086b2:	663b      	str	r3, [r7, #96]	; 0x60
 80086b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3314      	adds	r3, #20
 80086ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086bc:	633a      	str	r2, [r7, #48]	; 0x30
 80086be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086c4:	e841 2300 	strex	r3, r2, [r1]
 80086c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1e5      	bne.n	800869c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80086d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086d2:	2220      	movs	r2, #32
 80086d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d119      	bne.n	8008714 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	330c      	adds	r3, #12
 80086e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	e853 3f00 	ldrex	r3, [r3]
 80086ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f023 0310 	bic.w	r3, r3, #16
 80086f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	330c      	adds	r3, #12
 80086fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008700:	61fa      	str	r2, [r7, #28]
 8008702:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008704:	69b9      	ldr	r1, [r7, #24]
 8008706:	69fa      	ldr	r2, [r7, #28]
 8008708:	e841 2300 	strex	r3, r2, [r1]
 800870c:	617b      	str	r3, [r7, #20]
   return(result);
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1e5      	bne.n	80086e0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008718:	2b01      	cmp	r3, #1
 800871a:	d106      	bne.n	800872a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800871c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800871e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008720:	4619      	mov	r1, r3
 8008722:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008724:	f7f9 fc5a 	bl	8001fdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008728:	e002      	b.n	8008730 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800872a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800872c:	f7ff ff02 	bl	8008534 <HAL_UART_RxCpltCallback>
}
 8008730:	bf00      	nop
 8008732:	3770      	adds	r7, #112	; 0x70
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008744:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800874a:	2b01      	cmp	r3, #1
 800874c:	d108      	bne.n	8008760 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008752:	085b      	lsrs	r3, r3, #1
 8008754:	b29b      	uxth	r3, r3
 8008756:	4619      	mov	r1, r3
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f7f9 fc3f 	bl	8001fdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800875e:	e002      	b.n	8008766 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f7ff fef1 	bl	8008548 <HAL_UART_RxHalfCpltCallback>
}
 8008766:	bf00      	nop
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b084      	sub	sp, #16
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008776:	2300      	movs	r3, #0
 8008778:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800878a:	2b80      	cmp	r3, #128	; 0x80
 800878c:	bf0c      	ite	eq
 800878e:	2301      	moveq	r3, #1
 8008790:	2300      	movne	r3, #0
 8008792:	b2db      	uxtb	r3, r3
 8008794:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b21      	cmp	r3, #33	; 0x21
 80087a0:	d108      	bne.n	80087b4 <UART_DMAError+0x46>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d005      	beq.n	80087b4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	2200      	movs	r2, #0
 80087ac:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80087ae:	68b8      	ldr	r0, [r7, #8]
 80087b0:	f000 f934 	bl	8008a1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087be:	2b40      	cmp	r3, #64	; 0x40
 80087c0:	bf0c      	ite	eq
 80087c2:	2301      	moveq	r3, #1
 80087c4:	2300      	movne	r3, #0
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b22      	cmp	r3, #34	; 0x22
 80087d4:	d108      	bne.n	80087e8 <UART_DMAError+0x7a>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d005      	beq.n	80087e8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2200      	movs	r2, #0
 80087e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80087e2:	68b8      	ldr	r0, [r7, #8]
 80087e4:	f000 f942 	bl	8008a6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ec:	f043 0210 	orr.w	r2, r3, #16
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087f4:	68b8      	ldr	r0, [r7, #8]
 80087f6:	f7f9 fc03 	bl	8002000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087fa:	bf00      	nop
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b090      	sub	sp, #64	; 0x40
 8008806:	af00      	add	r7, sp, #0
 8008808:	60f8      	str	r0, [r7, #12]
 800880a:	60b9      	str	r1, [r7, #8]
 800880c:	603b      	str	r3, [r7, #0]
 800880e:	4613      	mov	r3, r2
 8008810:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008812:	e050      	b.n	80088b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881a:	d04c      	beq.n	80088b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800881c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800881e:	2b00      	cmp	r3, #0
 8008820:	d007      	beq.n	8008832 <UART_WaitOnFlagUntilTimeout+0x30>
 8008822:	f7fb ff6b 	bl	80046fc <HAL_GetTick>
 8008826:	4602      	mov	r2, r0
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800882e:	429a      	cmp	r2, r3
 8008830:	d241      	bcs.n	80088b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	330c      	adds	r3, #12
 8008838:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883c:	e853 3f00 	ldrex	r3, [r3]
 8008840:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	330c      	adds	r3, #12
 8008850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008852:	637a      	str	r2, [r7, #52]	; 0x34
 8008854:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008856:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800885a:	e841 2300 	strex	r3, r2, [r1]
 800885e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1e5      	bne.n	8008832 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	3314      	adds	r3, #20
 800886c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	e853 3f00 	ldrex	r3, [r3]
 8008874:	613b      	str	r3, [r7, #16]
   return(result);
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	f023 0301 	bic.w	r3, r3, #1
 800887c:	63bb      	str	r3, [r7, #56]	; 0x38
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	3314      	adds	r3, #20
 8008884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008886:	623a      	str	r2, [r7, #32]
 8008888:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888a:	69f9      	ldr	r1, [r7, #28]
 800888c:	6a3a      	ldr	r2, [r7, #32]
 800888e:	e841 2300 	strex	r3, r2, [r1]
 8008892:	61bb      	str	r3, [r7, #24]
   return(result);
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1e5      	bne.n	8008866 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2220      	movs	r2, #32
 800889e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2220      	movs	r2, #32
 80088a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e00f      	b.n	80088d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	4013      	ands	r3, r2
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	bf0c      	ite	eq
 80088c6:	2301      	moveq	r3, #1
 80088c8:	2300      	movne	r3, #0
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	461a      	mov	r2, r3
 80088ce:	79fb      	ldrb	r3, [r7, #7]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d09f      	beq.n	8008814 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3740      	adds	r7, #64	; 0x40
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
	...

080088e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b098      	sub	sp, #96	; 0x60
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	4613      	mov	r3, r2
 80088ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	88fa      	ldrh	r2, [r7, #6]
 80088f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2222      	movs	r2, #34	; 0x22
 8008904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890c:	4a40      	ldr	r2, [pc, #256]	; (8008a10 <UART_Start_Receive_DMA+0x130>)
 800890e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008914:	4a3f      	ldr	r2, [pc, #252]	; (8008a14 <UART_Start_Receive_DMA+0x134>)
 8008916:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891c:	4a3e      	ldr	r2, [pc, #248]	; (8008a18 <UART_Start_Receive_DMA+0x138>)
 800891e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008924:	2200      	movs	r2, #0
 8008926:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008928:	f107 0308 	add.w	r3, r7, #8
 800892c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	3304      	adds	r3, #4
 8008938:	4619      	mov	r1, r3
 800893a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	88fb      	ldrh	r3, [r7, #6]
 8008940:	f7fc fd2a 	bl	8005398 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008944:	2300      	movs	r3, #0
 8008946:	613b      	str	r3, [r7, #16]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	613b      	str	r3, [r7, #16]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	613b      	str	r3, [r7, #16]
 8008958:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d019      	beq.n	800899e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	330c      	adds	r3, #12
 8008970:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008974:	e853 3f00 	ldrex	r3, [r3]
 8008978:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800897a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800897c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008980:	65bb      	str	r3, [r7, #88]	; 0x58
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	330c      	adds	r3, #12
 8008988:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800898a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800898c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008990:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008992:	e841 2300 	strex	r3, r2, [r1]
 8008996:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1e5      	bne.n	800896a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	3314      	adds	r3, #20
 80089a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a8:	e853 3f00 	ldrex	r3, [r3]
 80089ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80089ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b0:	f043 0301 	orr.w	r3, r3, #1
 80089b4:	657b      	str	r3, [r7, #84]	; 0x54
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	3314      	adds	r3, #20
 80089bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089be:	63ba      	str	r2, [r7, #56]	; 0x38
 80089c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80089c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089c6:	e841 2300 	strex	r3, r2, [r1]
 80089ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1e5      	bne.n	800899e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	3314      	adds	r3, #20
 80089d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	e853 3f00 	ldrex	r3, [r3]
 80089e0:	617b      	str	r3, [r7, #20]
   return(result);
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089e8:	653b      	str	r3, [r7, #80]	; 0x50
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	3314      	adds	r3, #20
 80089f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089f2:	627a      	str	r2, [r7, #36]	; 0x24
 80089f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f6:	6a39      	ldr	r1, [r7, #32]
 80089f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089fa:	e841 2300 	strex	r3, r2, [r1]
 80089fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1e5      	bne.n	80089d2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3760      	adds	r7, #96	; 0x60
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	08008613 	.word	0x08008613
 8008a14:	08008739 	.word	0x08008739
 8008a18:	0800876f 	.word	0x0800876f

08008a1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b089      	sub	sp, #36	; 0x24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	330c      	adds	r3, #12
 8008a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	e853 3f00 	ldrex	r3, [r3]
 8008a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a3a:	61fb      	str	r3, [r7, #28]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	330c      	adds	r3, #12
 8008a42:	69fa      	ldr	r2, [r7, #28]
 8008a44:	61ba      	str	r2, [r7, #24]
 8008a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a48:	6979      	ldr	r1, [r7, #20]
 8008a4a:	69ba      	ldr	r2, [r7, #24]
 8008a4c:	e841 2300 	strex	r3, r2, [r1]
 8008a50:	613b      	str	r3, [r7, #16]
   return(result);
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1e5      	bne.n	8008a24 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2220      	movs	r2, #32
 8008a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008a60:	bf00      	nop
 8008a62:	3724      	adds	r7, #36	; 0x24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b095      	sub	sp, #84	; 0x54
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	330c      	adds	r3, #12
 8008a7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7e:	e853 3f00 	ldrex	r3, [r3]
 8008a82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	330c      	adds	r3, #12
 8008a92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a94:	643a      	str	r2, [r7, #64]	; 0x40
 8008a96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a9c:	e841 2300 	strex	r3, r2, [r1]
 8008aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1e5      	bne.n	8008a74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	3314      	adds	r3, #20
 8008aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	e853 3f00 	ldrex	r3, [r3]
 8008ab6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	f023 0301 	bic.w	r3, r3, #1
 8008abe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	3314      	adds	r3, #20
 8008ac6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ac8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008aca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ad0:	e841 2300 	strex	r3, r2, [r1]
 8008ad4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1e5      	bne.n	8008aa8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d119      	bne.n	8008b18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	330c      	adds	r3, #12
 8008aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	e853 3f00 	ldrex	r3, [r3]
 8008af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	f023 0310 	bic.w	r3, r3, #16
 8008afa:	647b      	str	r3, [r7, #68]	; 0x44
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	330c      	adds	r3, #12
 8008b02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b04:	61ba      	str	r2, [r7, #24]
 8008b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b08:	6979      	ldr	r1, [r7, #20]
 8008b0a:	69ba      	ldr	r2, [r7, #24]
 8008b0c:	e841 2300 	strex	r3, r2, [r1]
 8008b10:	613b      	str	r3, [r7, #16]
   return(result);
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1e5      	bne.n	8008ae4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2220      	movs	r2, #32
 8008b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008b26:	bf00      	nop
 8008b28:	3754      	adds	r7, #84	; 0x54
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f7f9 fa57 	bl	8002000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b52:	bf00      	nop
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b085      	sub	sp, #20
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	2b21      	cmp	r3, #33	; 0x21
 8008b6c:	d13e      	bne.n	8008bec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b76:	d114      	bne.n	8008ba2 <UART_Transmit_IT+0x48>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d110      	bne.n	8008ba2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a1b      	ldr	r3, [r3, #32]
 8008b84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	881b      	ldrh	r3, [r3, #0]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	1c9a      	adds	r2, r3, #2
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	621a      	str	r2, [r3, #32]
 8008ba0:	e008      	b.n	8008bb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	1c59      	adds	r1, r3, #1
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	6211      	str	r1, [r2, #32]
 8008bac:	781a      	ldrb	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10f      	bne.n	8008be8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68da      	ldr	r2, [r3, #12]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68da      	ldr	r2, [r3, #12]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008be6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	e000      	b.n	8008bee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008bec:	2302      	movs	r3, #2
  }
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3714      	adds	r7, #20
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b082      	sub	sp, #8
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68da      	ldr	r2, [r3, #12]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2220      	movs	r2, #32
 8008c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7f9 fa04 	bl	8002028 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b08c      	sub	sp, #48	; 0x30
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b22      	cmp	r3, #34	; 0x22
 8008c3c:	f040 80ab 	bne.w	8008d96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c48:	d117      	bne.n	8008c7a <UART_Receive_IT+0x50>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d113      	bne.n	8008c7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c52:	2300      	movs	r3, #0
 8008c54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c72:	1c9a      	adds	r2, r3, #2
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	629a      	str	r2, [r3, #40]	; 0x28
 8008c78:	e026      	b.n	8008cc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008c80:	2300      	movs	r3, #0
 8008c82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c8c:	d007      	beq.n	8008c9e <UART_Receive_IT+0x74>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d10a      	bne.n	8008cac <UART_Receive_IT+0x82>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d106      	bne.n	8008cac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca8:	701a      	strb	r2, [r3, #0]
 8008caa:	e008      	b.n	8008cbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc2:	1c5a      	adds	r2, r3, #1
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d15a      	bne.n	8008d92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68da      	ldr	r2, [r3, #12]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f022 0220 	bic.w	r2, r2, #32
 8008cea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68da      	ldr	r2, [r3, #12]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	695a      	ldr	r2, [r3, #20]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f022 0201 	bic.w	r2, r2, #1
 8008d0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2220      	movs	r2, #32
 8008d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d135      	bne.n	8008d88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	330c      	adds	r3, #12
 8008d28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	e853 3f00 	ldrex	r3, [r3]
 8008d30:	613b      	str	r3, [r7, #16]
   return(result);
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	f023 0310 	bic.w	r3, r3, #16
 8008d38:	627b      	str	r3, [r7, #36]	; 0x24
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	330c      	adds	r3, #12
 8008d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d42:	623a      	str	r2, [r7, #32]
 8008d44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d46:	69f9      	ldr	r1, [r7, #28]
 8008d48:	6a3a      	ldr	r2, [r7, #32]
 8008d4a:	e841 2300 	strex	r3, r2, [r1]
 8008d4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1e5      	bne.n	8008d22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 0310 	and.w	r3, r3, #16
 8008d60:	2b10      	cmp	r3, #16
 8008d62:	d10a      	bne.n	8008d7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d64:	2300      	movs	r3, #0
 8008d66:	60fb      	str	r3, [r7, #12]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	60fb      	str	r3, [r7, #12]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	60fb      	str	r3, [r7, #12]
 8008d78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d7e:	4619      	mov	r1, r3
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f7f9 f92b 	bl	8001fdc <HAL_UARTEx_RxEventCallback>
 8008d86:	e002      	b.n	8008d8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f7ff fbd3 	bl	8008534 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	e002      	b.n	8008d98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	e000      	b.n	8008d98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008d96:	2302      	movs	r3, #2
  }
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3730      	adds	r7, #48	; 0x30
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008da4:	b0c0      	sub	sp, #256	; 0x100
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	691b      	ldr	r3, [r3, #16]
 8008db4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dbc:	68d9      	ldr	r1, [r3, #12]
 8008dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	ea40 0301 	orr.w	r3, r0, r1
 8008dc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dce:	689a      	ldr	r2, [r3, #8]
 8008dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	431a      	orrs	r2, r3
 8008dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	431a      	orrs	r2, r3
 8008de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008de4:	69db      	ldr	r3, [r3, #28]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008df8:	f021 010c 	bic.w	r1, r1, #12
 8008dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e06:	430b      	orrs	r3, r1
 8008e08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	695b      	ldr	r3, [r3, #20]
 8008e12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e1a:	6999      	ldr	r1, [r3, #24]
 8008e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	ea40 0301 	orr.w	r3, r0, r1
 8008e26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	4b8f      	ldr	r3, [pc, #572]	; (800906c <UART_SetConfig+0x2cc>)
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d005      	beq.n	8008e40 <UART_SetConfig+0xa0>
 8008e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	4b8d      	ldr	r3, [pc, #564]	; (8009070 <UART_SetConfig+0x2d0>)
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d104      	bne.n	8008e4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e40:	f7fd fcc4 	bl	80067cc <HAL_RCC_GetPCLK2Freq>
 8008e44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008e48:	e003      	b.n	8008e52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e4a:	f7fd fcab 	bl	80067a4 <HAL_RCC_GetPCLK1Freq>
 8008e4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e56:	69db      	ldr	r3, [r3, #28]
 8008e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e5c:	f040 810c 	bne.w	8009078 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e64:	2200      	movs	r2, #0
 8008e66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008e6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008e6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008e72:	4622      	mov	r2, r4
 8008e74:	462b      	mov	r3, r5
 8008e76:	1891      	adds	r1, r2, r2
 8008e78:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e7a:	415b      	adcs	r3, r3
 8008e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e82:	4621      	mov	r1, r4
 8008e84:	eb12 0801 	adds.w	r8, r2, r1
 8008e88:	4629      	mov	r1, r5
 8008e8a:	eb43 0901 	adc.w	r9, r3, r1
 8008e8e:	f04f 0200 	mov.w	r2, #0
 8008e92:	f04f 0300 	mov.w	r3, #0
 8008e96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ea2:	4690      	mov	r8, r2
 8008ea4:	4699      	mov	r9, r3
 8008ea6:	4623      	mov	r3, r4
 8008ea8:	eb18 0303 	adds.w	r3, r8, r3
 8008eac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008eb0:	462b      	mov	r3, r5
 8008eb2:	eb49 0303 	adc.w	r3, r9, r3
 8008eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ec6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008eca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008ece:	460b      	mov	r3, r1
 8008ed0:	18db      	adds	r3, r3, r3
 8008ed2:	653b      	str	r3, [r7, #80]	; 0x50
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	eb42 0303 	adc.w	r3, r2, r3
 8008eda:	657b      	str	r3, [r7, #84]	; 0x54
 8008edc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008ee0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008ee4:	f7f7 fe38 	bl	8000b58 <__aeabi_uldivmod>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	460b      	mov	r3, r1
 8008eec:	4b61      	ldr	r3, [pc, #388]	; (8009074 <UART_SetConfig+0x2d4>)
 8008eee:	fba3 2302 	umull	r2, r3, r3, r2
 8008ef2:	095b      	lsrs	r3, r3, #5
 8008ef4:	011c      	lsls	r4, r3, #4
 8008ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008efa:	2200      	movs	r2, #0
 8008efc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008f04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008f08:	4642      	mov	r2, r8
 8008f0a:	464b      	mov	r3, r9
 8008f0c:	1891      	adds	r1, r2, r2
 8008f0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008f10:	415b      	adcs	r3, r3
 8008f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008f18:	4641      	mov	r1, r8
 8008f1a:	eb12 0a01 	adds.w	sl, r2, r1
 8008f1e:	4649      	mov	r1, r9
 8008f20:	eb43 0b01 	adc.w	fp, r3, r1
 8008f24:	f04f 0200 	mov.w	r2, #0
 8008f28:	f04f 0300 	mov.w	r3, #0
 8008f2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f38:	4692      	mov	sl, r2
 8008f3a:	469b      	mov	fp, r3
 8008f3c:	4643      	mov	r3, r8
 8008f3e:	eb1a 0303 	adds.w	r3, sl, r3
 8008f42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f46:	464b      	mov	r3, r9
 8008f48:	eb4b 0303 	adc.w	r3, fp, r3
 8008f4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008f60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008f64:	460b      	mov	r3, r1
 8008f66:	18db      	adds	r3, r3, r3
 8008f68:	643b      	str	r3, [r7, #64]	; 0x40
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	eb42 0303 	adc.w	r3, r2, r3
 8008f70:	647b      	str	r3, [r7, #68]	; 0x44
 8008f72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008f76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008f7a:	f7f7 fded 	bl	8000b58 <__aeabi_uldivmod>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	460b      	mov	r3, r1
 8008f82:	4611      	mov	r1, r2
 8008f84:	4b3b      	ldr	r3, [pc, #236]	; (8009074 <UART_SetConfig+0x2d4>)
 8008f86:	fba3 2301 	umull	r2, r3, r3, r1
 8008f8a:	095b      	lsrs	r3, r3, #5
 8008f8c:	2264      	movs	r2, #100	; 0x64
 8008f8e:	fb02 f303 	mul.w	r3, r2, r3
 8008f92:	1acb      	subs	r3, r1, r3
 8008f94:	00db      	lsls	r3, r3, #3
 8008f96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008f9a:	4b36      	ldr	r3, [pc, #216]	; (8009074 <UART_SetConfig+0x2d4>)
 8008f9c:	fba3 2302 	umull	r2, r3, r3, r2
 8008fa0:	095b      	lsrs	r3, r3, #5
 8008fa2:	005b      	lsls	r3, r3, #1
 8008fa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008fa8:	441c      	add	r4, r3
 8008faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008fb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008fb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008fbc:	4642      	mov	r2, r8
 8008fbe:	464b      	mov	r3, r9
 8008fc0:	1891      	adds	r1, r2, r2
 8008fc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8008fc4:	415b      	adcs	r3, r3
 8008fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008fcc:	4641      	mov	r1, r8
 8008fce:	1851      	adds	r1, r2, r1
 8008fd0:	6339      	str	r1, [r7, #48]	; 0x30
 8008fd2:	4649      	mov	r1, r9
 8008fd4:	414b      	adcs	r3, r1
 8008fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8008fd8:	f04f 0200 	mov.w	r2, #0
 8008fdc:	f04f 0300 	mov.w	r3, #0
 8008fe0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008fe4:	4659      	mov	r1, fp
 8008fe6:	00cb      	lsls	r3, r1, #3
 8008fe8:	4651      	mov	r1, sl
 8008fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fee:	4651      	mov	r1, sl
 8008ff0:	00ca      	lsls	r2, r1, #3
 8008ff2:	4610      	mov	r0, r2
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	4642      	mov	r2, r8
 8008ffa:	189b      	adds	r3, r3, r2
 8008ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009000:	464b      	mov	r3, r9
 8009002:	460a      	mov	r2, r1
 8009004:	eb42 0303 	adc.w	r3, r2, r3
 8009008:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800900c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009018:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800901c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009020:	460b      	mov	r3, r1
 8009022:	18db      	adds	r3, r3, r3
 8009024:	62bb      	str	r3, [r7, #40]	; 0x28
 8009026:	4613      	mov	r3, r2
 8009028:	eb42 0303 	adc.w	r3, r2, r3
 800902c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800902e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009032:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009036:	f7f7 fd8f 	bl	8000b58 <__aeabi_uldivmod>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	4b0d      	ldr	r3, [pc, #52]	; (8009074 <UART_SetConfig+0x2d4>)
 8009040:	fba3 1302 	umull	r1, r3, r3, r2
 8009044:	095b      	lsrs	r3, r3, #5
 8009046:	2164      	movs	r1, #100	; 0x64
 8009048:	fb01 f303 	mul.w	r3, r1, r3
 800904c:	1ad3      	subs	r3, r2, r3
 800904e:	00db      	lsls	r3, r3, #3
 8009050:	3332      	adds	r3, #50	; 0x32
 8009052:	4a08      	ldr	r2, [pc, #32]	; (8009074 <UART_SetConfig+0x2d4>)
 8009054:	fba2 2303 	umull	r2, r3, r2, r3
 8009058:	095b      	lsrs	r3, r3, #5
 800905a:	f003 0207 	and.w	r2, r3, #7
 800905e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4422      	add	r2, r4
 8009066:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009068:	e105      	b.n	8009276 <UART_SetConfig+0x4d6>
 800906a:	bf00      	nop
 800906c:	40011000 	.word	0x40011000
 8009070:	40011400 	.word	0x40011400
 8009074:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800907c:	2200      	movs	r2, #0
 800907e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009082:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009086:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800908a:	4642      	mov	r2, r8
 800908c:	464b      	mov	r3, r9
 800908e:	1891      	adds	r1, r2, r2
 8009090:	6239      	str	r1, [r7, #32]
 8009092:	415b      	adcs	r3, r3
 8009094:	627b      	str	r3, [r7, #36]	; 0x24
 8009096:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800909a:	4641      	mov	r1, r8
 800909c:	1854      	adds	r4, r2, r1
 800909e:	4649      	mov	r1, r9
 80090a0:	eb43 0501 	adc.w	r5, r3, r1
 80090a4:	f04f 0200 	mov.w	r2, #0
 80090a8:	f04f 0300 	mov.w	r3, #0
 80090ac:	00eb      	lsls	r3, r5, #3
 80090ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090b2:	00e2      	lsls	r2, r4, #3
 80090b4:	4614      	mov	r4, r2
 80090b6:	461d      	mov	r5, r3
 80090b8:	4643      	mov	r3, r8
 80090ba:	18e3      	adds	r3, r4, r3
 80090bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80090c0:	464b      	mov	r3, r9
 80090c2:	eb45 0303 	adc.w	r3, r5, r3
 80090c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80090ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80090da:	f04f 0200 	mov.w	r2, #0
 80090de:	f04f 0300 	mov.w	r3, #0
 80090e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80090e6:	4629      	mov	r1, r5
 80090e8:	008b      	lsls	r3, r1, #2
 80090ea:	4621      	mov	r1, r4
 80090ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090f0:	4621      	mov	r1, r4
 80090f2:	008a      	lsls	r2, r1, #2
 80090f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80090f8:	f7f7 fd2e 	bl	8000b58 <__aeabi_uldivmod>
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	4b60      	ldr	r3, [pc, #384]	; (8009284 <UART_SetConfig+0x4e4>)
 8009102:	fba3 2302 	umull	r2, r3, r3, r2
 8009106:	095b      	lsrs	r3, r3, #5
 8009108:	011c      	lsls	r4, r3, #4
 800910a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800910e:	2200      	movs	r2, #0
 8009110:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009114:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009118:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800911c:	4642      	mov	r2, r8
 800911e:	464b      	mov	r3, r9
 8009120:	1891      	adds	r1, r2, r2
 8009122:	61b9      	str	r1, [r7, #24]
 8009124:	415b      	adcs	r3, r3
 8009126:	61fb      	str	r3, [r7, #28]
 8009128:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800912c:	4641      	mov	r1, r8
 800912e:	1851      	adds	r1, r2, r1
 8009130:	6139      	str	r1, [r7, #16]
 8009132:	4649      	mov	r1, r9
 8009134:	414b      	adcs	r3, r1
 8009136:	617b      	str	r3, [r7, #20]
 8009138:	f04f 0200 	mov.w	r2, #0
 800913c:	f04f 0300 	mov.w	r3, #0
 8009140:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009144:	4659      	mov	r1, fp
 8009146:	00cb      	lsls	r3, r1, #3
 8009148:	4651      	mov	r1, sl
 800914a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800914e:	4651      	mov	r1, sl
 8009150:	00ca      	lsls	r2, r1, #3
 8009152:	4610      	mov	r0, r2
 8009154:	4619      	mov	r1, r3
 8009156:	4603      	mov	r3, r0
 8009158:	4642      	mov	r2, r8
 800915a:	189b      	adds	r3, r3, r2
 800915c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009160:	464b      	mov	r3, r9
 8009162:	460a      	mov	r2, r1
 8009164:	eb42 0303 	adc.w	r3, r2, r3
 8009168:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800916c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	67bb      	str	r3, [r7, #120]	; 0x78
 8009176:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009178:	f04f 0200 	mov.w	r2, #0
 800917c:	f04f 0300 	mov.w	r3, #0
 8009180:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009184:	4649      	mov	r1, r9
 8009186:	008b      	lsls	r3, r1, #2
 8009188:	4641      	mov	r1, r8
 800918a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800918e:	4641      	mov	r1, r8
 8009190:	008a      	lsls	r2, r1, #2
 8009192:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009196:	f7f7 fcdf 	bl	8000b58 <__aeabi_uldivmod>
 800919a:	4602      	mov	r2, r0
 800919c:	460b      	mov	r3, r1
 800919e:	4b39      	ldr	r3, [pc, #228]	; (8009284 <UART_SetConfig+0x4e4>)
 80091a0:	fba3 1302 	umull	r1, r3, r3, r2
 80091a4:	095b      	lsrs	r3, r3, #5
 80091a6:	2164      	movs	r1, #100	; 0x64
 80091a8:	fb01 f303 	mul.w	r3, r1, r3
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	011b      	lsls	r3, r3, #4
 80091b0:	3332      	adds	r3, #50	; 0x32
 80091b2:	4a34      	ldr	r2, [pc, #208]	; (8009284 <UART_SetConfig+0x4e4>)
 80091b4:	fba2 2303 	umull	r2, r3, r2, r3
 80091b8:	095b      	lsrs	r3, r3, #5
 80091ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091be:	441c      	add	r4, r3
 80091c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091c4:	2200      	movs	r2, #0
 80091c6:	673b      	str	r3, [r7, #112]	; 0x70
 80091c8:	677a      	str	r2, [r7, #116]	; 0x74
 80091ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80091ce:	4642      	mov	r2, r8
 80091d0:	464b      	mov	r3, r9
 80091d2:	1891      	adds	r1, r2, r2
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	415b      	adcs	r3, r3
 80091d8:	60fb      	str	r3, [r7, #12]
 80091da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091de:	4641      	mov	r1, r8
 80091e0:	1851      	adds	r1, r2, r1
 80091e2:	6039      	str	r1, [r7, #0]
 80091e4:	4649      	mov	r1, r9
 80091e6:	414b      	adcs	r3, r1
 80091e8:	607b      	str	r3, [r7, #4]
 80091ea:	f04f 0200 	mov.w	r2, #0
 80091ee:	f04f 0300 	mov.w	r3, #0
 80091f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80091f6:	4659      	mov	r1, fp
 80091f8:	00cb      	lsls	r3, r1, #3
 80091fa:	4651      	mov	r1, sl
 80091fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009200:	4651      	mov	r1, sl
 8009202:	00ca      	lsls	r2, r1, #3
 8009204:	4610      	mov	r0, r2
 8009206:	4619      	mov	r1, r3
 8009208:	4603      	mov	r3, r0
 800920a:	4642      	mov	r2, r8
 800920c:	189b      	adds	r3, r3, r2
 800920e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009210:	464b      	mov	r3, r9
 8009212:	460a      	mov	r2, r1
 8009214:	eb42 0303 	adc.w	r3, r2, r3
 8009218:	66fb      	str	r3, [r7, #108]	; 0x6c
 800921a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	663b      	str	r3, [r7, #96]	; 0x60
 8009224:	667a      	str	r2, [r7, #100]	; 0x64
 8009226:	f04f 0200 	mov.w	r2, #0
 800922a:	f04f 0300 	mov.w	r3, #0
 800922e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009232:	4649      	mov	r1, r9
 8009234:	008b      	lsls	r3, r1, #2
 8009236:	4641      	mov	r1, r8
 8009238:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800923c:	4641      	mov	r1, r8
 800923e:	008a      	lsls	r2, r1, #2
 8009240:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009244:	f7f7 fc88 	bl	8000b58 <__aeabi_uldivmod>
 8009248:	4602      	mov	r2, r0
 800924a:	460b      	mov	r3, r1
 800924c:	4b0d      	ldr	r3, [pc, #52]	; (8009284 <UART_SetConfig+0x4e4>)
 800924e:	fba3 1302 	umull	r1, r3, r3, r2
 8009252:	095b      	lsrs	r3, r3, #5
 8009254:	2164      	movs	r1, #100	; 0x64
 8009256:	fb01 f303 	mul.w	r3, r1, r3
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	011b      	lsls	r3, r3, #4
 800925e:	3332      	adds	r3, #50	; 0x32
 8009260:	4a08      	ldr	r2, [pc, #32]	; (8009284 <UART_SetConfig+0x4e4>)
 8009262:	fba2 2303 	umull	r2, r3, r2, r3
 8009266:	095b      	lsrs	r3, r3, #5
 8009268:	f003 020f 	and.w	r2, r3, #15
 800926c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4422      	add	r2, r4
 8009274:	609a      	str	r2, [r3, #8]
}
 8009276:	bf00      	nop
 8009278:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800927c:	46bd      	mov	sp, r7
 800927e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009282:	bf00      	nop
 8009284:	51eb851f 	.word	0x51eb851f

08009288 <__NVIC_SetPriority>:
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	4603      	mov	r3, r0
 8009290:	6039      	str	r1, [r7, #0]
 8009292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009298:	2b00      	cmp	r3, #0
 800929a:	db0a      	blt.n	80092b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	b2da      	uxtb	r2, r3
 80092a0:	490c      	ldr	r1, [pc, #48]	; (80092d4 <__NVIC_SetPriority+0x4c>)
 80092a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092a6:	0112      	lsls	r2, r2, #4
 80092a8:	b2d2      	uxtb	r2, r2
 80092aa:	440b      	add	r3, r1
 80092ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80092b0:	e00a      	b.n	80092c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	4908      	ldr	r1, [pc, #32]	; (80092d8 <__NVIC_SetPriority+0x50>)
 80092b8:	79fb      	ldrb	r3, [r7, #7]
 80092ba:	f003 030f 	and.w	r3, r3, #15
 80092be:	3b04      	subs	r3, #4
 80092c0:	0112      	lsls	r2, r2, #4
 80092c2:	b2d2      	uxtb	r2, r2
 80092c4:	440b      	add	r3, r1
 80092c6:	761a      	strb	r2, [r3, #24]
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr
 80092d4:	e000e100 	.word	0xe000e100
 80092d8:	e000ed00 	.word	0xe000ed00

080092dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80092dc:	b580      	push	{r7, lr}
 80092de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80092e0:	2100      	movs	r1, #0
 80092e2:	f06f 0004 	mvn.w	r0, #4
 80092e6:	f7ff ffcf 	bl	8009288 <__NVIC_SetPriority>
#endif
}
 80092ea:	bf00      	nop
 80092ec:	bd80      	pop	{r7, pc}
	...

080092f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092f6:	f3ef 8305 	mrs	r3, IPSR
 80092fa:	603b      	str	r3, [r7, #0]
  return(result);
 80092fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d003      	beq.n	800930a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009302:	f06f 0305 	mvn.w	r3, #5
 8009306:	607b      	str	r3, [r7, #4]
 8009308:	e00c      	b.n	8009324 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800930a:	4b0a      	ldr	r3, [pc, #40]	; (8009334 <osKernelInitialize+0x44>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d105      	bne.n	800931e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009312:	4b08      	ldr	r3, [pc, #32]	; (8009334 <osKernelInitialize+0x44>)
 8009314:	2201      	movs	r2, #1
 8009316:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009318:	2300      	movs	r3, #0
 800931a:	607b      	str	r3, [r7, #4]
 800931c:	e002      	b.n	8009324 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800931e:	f04f 33ff 	mov.w	r3, #4294967295
 8009322:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009324:	687b      	ldr	r3, [r7, #4]
}
 8009326:	4618      	mov	r0, r3
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	20000a4c 	.word	0x20000a4c

08009338 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800933e:	f3ef 8305 	mrs	r3, IPSR
 8009342:	603b      	str	r3, [r7, #0]
  return(result);
 8009344:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009346:	2b00      	cmp	r3, #0
 8009348:	d003      	beq.n	8009352 <osKernelStart+0x1a>
    stat = osErrorISR;
 800934a:	f06f 0305 	mvn.w	r3, #5
 800934e:	607b      	str	r3, [r7, #4]
 8009350:	e010      	b.n	8009374 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009352:	4b0b      	ldr	r3, [pc, #44]	; (8009380 <osKernelStart+0x48>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d109      	bne.n	800936e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800935a:	f7ff ffbf 	bl	80092dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800935e:	4b08      	ldr	r3, [pc, #32]	; (8009380 <osKernelStart+0x48>)
 8009360:	2202      	movs	r2, #2
 8009362:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009364:	f001 f87c 	bl	800a460 <vTaskStartScheduler>
      stat = osOK;
 8009368:	2300      	movs	r3, #0
 800936a:	607b      	str	r3, [r7, #4]
 800936c:	e002      	b.n	8009374 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800936e:	f04f 33ff 	mov.w	r3, #4294967295
 8009372:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009374:	687b      	ldr	r3, [r7, #4]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	20000a4c 	.word	0x20000a4c

08009384 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009384:	b580      	push	{r7, lr}
 8009386:	b08e      	sub	sp, #56	; 0x38
 8009388:	af04      	add	r7, sp, #16
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009390:	2300      	movs	r3, #0
 8009392:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009394:	f3ef 8305 	mrs	r3, IPSR
 8009398:	617b      	str	r3, [r7, #20]
  return(result);
 800939a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800939c:	2b00      	cmp	r3, #0
 800939e:	d17e      	bne.n	800949e <osThreadNew+0x11a>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d07b      	beq.n	800949e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80093a6:	2380      	movs	r3, #128	; 0x80
 80093a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80093aa:	2318      	movs	r3, #24
 80093ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80093b2:	f04f 33ff 	mov.w	r3, #4294967295
 80093b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d045      	beq.n	800944a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d002      	beq.n	80093cc <osThreadNew+0x48>
        name = attr->name;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d002      	beq.n	80093da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d008      	beq.n	80093f2 <osThreadNew+0x6e>
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	2b38      	cmp	r3, #56	; 0x38
 80093e4:	d805      	bhi.n	80093f2 <osThreadNew+0x6e>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <osThreadNew+0x72>
        return (NULL);
 80093f2:	2300      	movs	r3, #0
 80093f4:	e054      	b.n	80094a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	695b      	ldr	r3, [r3, #20]
 8009402:	089b      	lsrs	r3, r3, #2
 8009404:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00e      	beq.n	800942c <osThreadNew+0xa8>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	2bbb      	cmp	r3, #187	; 0xbb
 8009414:	d90a      	bls.n	800942c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800941a:	2b00      	cmp	r3, #0
 800941c:	d006      	beq.n	800942c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d002      	beq.n	800942c <osThreadNew+0xa8>
        mem = 1;
 8009426:	2301      	movs	r3, #1
 8009428:	61bb      	str	r3, [r7, #24]
 800942a:	e010      	b.n	800944e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d10c      	bne.n	800944e <osThreadNew+0xca>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d108      	bne.n	800944e <osThreadNew+0xca>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d104      	bne.n	800944e <osThreadNew+0xca>
          mem = 0;
 8009444:	2300      	movs	r3, #0
 8009446:	61bb      	str	r3, [r7, #24]
 8009448:	e001      	b.n	800944e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d110      	bne.n	8009476 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800945c:	9202      	str	r2, [sp, #8]
 800945e:	9301      	str	r3, [sp, #4]
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	6a3a      	ldr	r2, [r7, #32]
 8009468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f000 fe0c 	bl	800a088 <xTaskCreateStatic>
 8009470:	4603      	mov	r3, r0
 8009472:	613b      	str	r3, [r7, #16]
 8009474:	e013      	b.n	800949e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d110      	bne.n	800949e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	b29a      	uxth	r2, r3
 8009480:	f107 0310 	add.w	r3, r7, #16
 8009484:	9301      	str	r3, [sp, #4]
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f000 fe57 	bl	800a142 <xTaskCreate>
 8009494:	4603      	mov	r3, r0
 8009496:	2b01      	cmp	r3, #1
 8009498:	d001      	beq.n	800949e <osThreadNew+0x11a>
            hTask = NULL;
 800949a:	2300      	movs	r3, #0
 800949c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800949e:	693b      	ldr	r3, [r7, #16]
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3728      	adds	r7, #40	; 0x28
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094b0:	f3ef 8305 	mrs	r3, IPSR
 80094b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80094b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d003      	beq.n	80094c4 <osDelay+0x1c>
    stat = osErrorISR;
 80094bc:	f06f 0305 	mvn.w	r3, #5
 80094c0:	60fb      	str	r3, [r7, #12]
 80094c2:	e007      	b.n	80094d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d002      	beq.n	80094d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 ff92 	bl	800a3f8 <vTaskDelay>
    }
  }

  return (stat);
 80094d4:	68fb      	ldr	r3, [r7, #12]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
	...

080094e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	4a07      	ldr	r2, [pc, #28]	; (800950c <vApplicationGetIdleTaskMemory+0x2c>)
 80094f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	4a06      	ldr	r2, [pc, #24]	; (8009510 <vApplicationGetIdleTaskMemory+0x30>)
 80094f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2280      	movs	r2, #128	; 0x80
 80094fc:	601a      	str	r2, [r3, #0]
}
 80094fe:	bf00      	nop
 8009500:	3714      	adds	r7, #20
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	20000a50 	.word	0x20000a50
 8009510:	20000b0c 	.word	0x20000b0c

08009514 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4a07      	ldr	r2, [pc, #28]	; (8009540 <vApplicationGetTimerTaskMemory+0x2c>)
 8009524:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	4a06      	ldr	r2, [pc, #24]	; (8009544 <vApplicationGetTimerTaskMemory+0x30>)
 800952a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009532:	601a      	str	r2, [r3, #0]
}
 8009534:	bf00      	nop
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr
 8009540:	20000d0c 	.word	0x20000d0c
 8009544:	20000dc8 	.word	0x20000dc8

08009548 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f103 0208 	add.w	r2, r3, #8
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f04f 32ff 	mov.w	r2, #4294967295
 8009560:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f103 0208 	add.w	r2, r3, #8
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f103 0208 	add.w	r2, r3, #8
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009596:	bf00      	nop
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr

080095a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80095a2:	b480      	push	{r7}
 80095a4:	b085      	sub	sp, #20
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	689a      	ldr	r2, [r3, #8]
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	683a      	ldr	r2, [r7, #0]
 80095c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	1c5a      	adds	r2, r3, #1
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	601a      	str	r2, [r3, #0]
}
 80095de:	bf00      	nop
 80095e0:	3714      	adds	r7, #20
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80095ea:	b480      	push	{r7}
 80095ec:	b085      	sub	sp, #20
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009600:	d103      	bne.n	800960a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	691b      	ldr	r3, [r3, #16]
 8009606:	60fb      	str	r3, [r7, #12]
 8009608:	e00c      	b.n	8009624 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	3308      	adds	r3, #8
 800960e:	60fb      	str	r3, [r7, #12]
 8009610:	e002      	b.n	8009618 <vListInsert+0x2e>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	60fb      	str	r3, [r7, #12]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	429a      	cmp	r2, r3
 8009622:	d2f6      	bcs.n	8009612 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	685a      	ldr	r2, [r3, #4]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	683a      	ldr	r2, [r7, #0]
 8009632:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	683a      	ldr	r2, [r7, #0]
 800963e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	1c5a      	adds	r2, r3, #1
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	601a      	str	r2, [r3, #0]
}
 8009650:	bf00      	nop
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	6892      	ldr	r2, [r2, #8]
 8009672:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	6852      	ldr	r2, [r2, #4]
 800967c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	429a      	cmp	r2, r3
 8009686:	d103      	bne.n	8009690 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	689a      	ldr	r2, [r3, #8]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	1e5a      	subs	r2, r3, #1
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3714      	adds	r7, #20
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10a      	bne.n	80096da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80096c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c8:	f383 8811 	msr	BASEPRI, r3
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80096d6:	bf00      	nop
 80096d8:	e7fe      	b.n	80096d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80096da:	f002 f87b 	bl	800b7d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e6:	68f9      	ldr	r1, [r7, #12]
 80096e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80096ea:	fb01 f303 	mul.w	r3, r1, r3
 80096ee:	441a      	add	r2, r3
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2200      	movs	r2, #0
 80096f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800970a:	3b01      	subs	r3, #1
 800970c:	68f9      	ldr	r1, [r7, #12]
 800970e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009710:	fb01 f303 	mul.w	r3, r1, r3
 8009714:	441a      	add	r2, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	22ff      	movs	r2, #255	; 0xff
 800971e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	22ff      	movs	r2, #255	; 0xff
 8009726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d114      	bne.n	800975a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d01a      	beq.n	800976e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	3310      	adds	r3, #16
 800973c:	4618      	mov	r0, r3
 800973e:	f001 f929 	bl	800a994 <xTaskRemoveFromEventList>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d012      	beq.n	800976e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009748:	4b0c      	ldr	r3, [pc, #48]	; (800977c <xQueueGenericReset+0xcc>)
 800974a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800974e:	601a      	str	r2, [r3, #0]
 8009750:	f3bf 8f4f 	dsb	sy
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	e009      	b.n	800976e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	3310      	adds	r3, #16
 800975e:	4618      	mov	r0, r3
 8009760:	f7ff fef2 	bl	8009548 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	3324      	adds	r3, #36	; 0x24
 8009768:	4618      	mov	r0, r3
 800976a:	f7ff feed 	bl	8009548 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800976e:	f002 f861 	bl	800b834 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009772:	2301      	movs	r3, #1
}
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}
 800977c:	e000ed04 	.word	0xe000ed04

08009780 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009780:	b580      	push	{r7, lr}
 8009782:	b08e      	sub	sp, #56	; 0x38
 8009784:	af02      	add	r7, sp, #8
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
 800978c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d10a      	bne.n	80097aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009798:	f383 8811 	msr	BASEPRI, r3
 800979c:	f3bf 8f6f 	isb	sy
 80097a0:	f3bf 8f4f 	dsb	sy
 80097a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80097a6:	bf00      	nop
 80097a8:	e7fe      	b.n	80097a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d10a      	bne.n	80097c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80097c2:	bf00      	nop
 80097c4:	e7fe      	b.n	80097c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <xQueueGenericCreateStatic+0x52>
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <xQueueGenericCreateStatic+0x56>
 80097d2:	2301      	movs	r3, #1
 80097d4:	e000      	b.n	80097d8 <xQueueGenericCreateStatic+0x58>
 80097d6:	2300      	movs	r3, #0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10a      	bne.n	80097f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80097dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	623b      	str	r3, [r7, #32]
}
 80097ee:	bf00      	nop
 80097f0:	e7fe      	b.n	80097f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d102      	bne.n	80097fe <xQueueGenericCreateStatic+0x7e>
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d101      	bne.n	8009802 <xQueueGenericCreateStatic+0x82>
 80097fe:	2301      	movs	r3, #1
 8009800:	e000      	b.n	8009804 <xQueueGenericCreateStatic+0x84>
 8009802:	2300      	movs	r3, #0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10a      	bne.n	800981e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980c:	f383 8811 	msr	BASEPRI, r3
 8009810:	f3bf 8f6f 	isb	sy
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	61fb      	str	r3, [r7, #28]
}
 800981a:	bf00      	nop
 800981c:	e7fe      	b.n	800981c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800981e:	2350      	movs	r3, #80	; 0x50
 8009820:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	2b50      	cmp	r3, #80	; 0x50
 8009826:	d00a      	beq.n	800983e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	61bb      	str	r3, [r7, #24]
}
 800983a:	bf00      	nop
 800983c:	e7fe      	b.n	800983c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800983e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00d      	beq.n	8009866 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800984a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984c:	2201      	movs	r2, #1
 800984e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009852:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	4613      	mov	r3, r2
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	68b9      	ldr	r1, [r7, #8]
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f000 f805 	bl	8009870 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009868:	4618      	mov	r0, r3
 800986a:	3730      	adds	r7, #48	; 0x30
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
 800987c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d103      	bne.n	800988c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	69ba      	ldr	r2, [r7, #24]
 8009888:	601a      	str	r2, [r3, #0]
 800988a:	e002      	b.n	8009892 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800989e:	2101      	movs	r1, #1
 80098a0:	69b8      	ldr	r0, [r7, #24]
 80098a2:	f7ff ff05 	bl	80096b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	78fa      	ldrb	r2, [r7, #3]
 80098aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80098ae:	bf00      	nop
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
	...

080098b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b08e      	sub	sp, #56	; 0x38
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
 80098c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80098c6:	2300      	movs	r3, #0
 80098c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80098ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10a      	bne.n	80098ea <xQueueGenericSend+0x32>
	__asm volatile
 80098d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d8:	f383 8811 	msr	BASEPRI, r3
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80098e6:	bf00      	nop
 80098e8:	e7fe      	b.n	80098e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d103      	bne.n	80098f8 <xQueueGenericSend+0x40>
 80098f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d101      	bne.n	80098fc <xQueueGenericSend+0x44>
 80098f8:	2301      	movs	r3, #1
 80098fa:	e000      	b.n	80098fe <xQueueGenericSend+0x46>
 80098fc:	2300      	movs	r3, #0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10a      	bne.n	8009918 <xQueueGenericSend+0x60>
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009914:	bf00      	nop
 8009916:	e7fe      	b.n	8009916 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	2b02      	cmp	r3, #2
 800991c:	d103      	bne.n	8009926 <xQueueGenericSend+0x6e>
 800991e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009922:	2b01      	cmp	r3, #1
 8009924:	d101      	bne.n	800992a <xQueueGenericSend+0x72>
 8009926:	2301      	movs	r3, #1
 8009928:	e000      	b.n	800992c <xQueueGenericSend+0x74>
 800992a:	2300      	movs	r3, #0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d10a      	bne.n	8009946 <xQueueGenericSend+0x8e>
	__asm volatile
 8009930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009934:	f383 8811 	msr	BASEPRI, r3
 8009938:	f3bf 8f6f 	isb	sy
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	623b      	str	r3, [r7, #32]
}
 8009942:	bf00      	nop
 8009944:	e7fe      	b.n	8009944 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009946:	f001 f9e7 	bl	800ad18 <xTaskGetSchedulerState>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d102      	bne.n	8009956 <xQueueGenericSend+0x9e>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d101      	bne.n	800995a <xQueueGenericSend+0xa2>
 8009956:	2301      	movs	r3, #1
 8009958:	e000      	b.n	800995c <xQueueGenericSend+0xa4>
 800995a:	2300      	movs	r3, #0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10a      	bne.n	8009976 <xQueueGenericSend+0xbe>
	__asm volatile
 8009960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009964:	f383 8811 	msr	BASEPRI, r3
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	61fb      	str	r3, [r7, #28]
}
 8009972:	bf00      	nop
 8009974:	e7fe      	b.n	8009974 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009976:	f001 ff2d 	bl	800b7d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800997a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800997e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009982:	429a      	cmp	r2, r3
 8009984:	d302      	bcc.n	800998c <xQueueGenericSend+0xd4>
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	2b02      	cmp	r3, #2
 800998a:	d129      	bne.n	80099e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	68b9      	ldr	r1, [r7, #8]
 8009990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009992:	f000 fa0b 	bl	8009dac <prvCopyDataToQueue>
 8009996:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999c:	2b00      	cmp	r3, #0
 800999e:	d010      	beq.n	80099c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a2:	3324      	adds	r3, #36	; 0x24
 80099a4:	4618      	mov	r0, r3
 80099a6:	f000 fff5 	bl	800a994 <xTaskRemoveFromEventList>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d013      	beq.n	80099d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80099b0:	4b3f      	ldr	r3, [pc, #252]	; (8009ab0 <xQueueGenericSend+0x1f8>)
 80099b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099b6:	601a      	str	r2, [r3, #0]
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	e00a      	b.n	80099d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80099c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d007      	beq.n	80099d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80099c8:	4b39      	ldr	r3, [pc, #228]	; (8009ab0 <xQueueGenericSend+0x1f8>)
 80099ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099ce:	601a      	str	r2, [r3, #0]
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80099d8:	f001 ff2c 	bl	800b834 <vPortExitCritical>
				return pdPASS;
 80099dc:	2301      	movs	r3, #1
 80099de:	e063      	b.n	8009aa8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d103      	bne.n	80099ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099e6:	f001 ff25 	bl	800b834 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80099ea:	2300      	movs	r3, #0
 80099ec:	e05c      	b.n	8009aa8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d106      	bne.n	8009a02 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099f4:	f107 0314 	add.w	r3, r7, #20
 80099f8:	4618      	mov	r0, r3
 80099fa:	f001 f82f 	bl	800aa5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099fe:	2301      	movs	r3, #1
 8009a00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a02:	f001 ff17 	bl	800b834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a06:	f000 fd9b 	bl	800a540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a0a:	f001 fee3 	bl	800b7d4 <vPortEnterCritical>
 8009a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a14:	b25b      	sxtb	r3, r3
 8009a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a1a:	d103      	bne.n	8009a24 <xQueueGenericSend+0x16c>
 8009a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a2a:	b25b      	sxtb	r3, r3
 8009a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a30:	d103      	bne.n	8009a3a <xQueueGenericSend+0x182>
 8009a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a34:	2200      	movs	r2, #0
 8009a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a3a:	f001 fefb 	bl	800b834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a3e:	1d3a      	adds	r2, r7, #4
 8009a40:	f107 0314 	add.w	r3, r7, #20
 8009a44:	4611      	mov	r1, r2
 8009a46:	4618      	mov	r0, r3
 8009a48:	f001 f81e 	bl	800aa88 <xTaskCheckForTimeOut>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d124      	bne.n	8009a9c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009a52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a54:	f000 faa2 	bl	8009f9c <prvIsQueueFull>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d018      	beq.n	8009a90 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a60:	3310      	adds	r3, #16
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	4611      	mov	r1, r2
 8009a66:	4618      	mov	r0, r3
 8009a68:	f000 ff44 	bl	800a8f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a6e:	f000 fa2d 	bl	8009ecc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009a72:	f000 fd73 	bl	800a55c <xTaskResumeAll>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f47f af7c 	bne.w	8009976 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009a7e:	4b0c      	ldr	r3, [pc, #48]	; (8009ab0 <xQueueGenericSend+0x1f8>)
 8009a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a84:	601a      	str	r2, [r3, #0]
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	e772      	b.n	8009976 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a92:	f000 fa1b 	bl	8009ecc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a96:	f000 fd61 	bl	800a55c <xTaskResumeAll>
 8009a9a:	e76c      	b.n	8009976 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a9e:	f000 fa15 	bl	8009ecc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009aa2:	f000 fd5b 	bl	800a55c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009aa6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3738      	adds	r7, #56	; 0x38
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	e000ed04 	.word	0xe000ed04

08009ab4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b090      	sub	sp, #64	; 0x40
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	607a      	str	r2, [r7, #4]
 8009ac0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10a      	bne.n	8009ae2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad0:	f383 8811 	msr	BASEPRI, r3
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ade:	bf00      	nop
 8009ae0:	e7fe      	b.n	8009ae0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d103      	bne.n	8009af0 <xQueueGenericSendFromISR+0x3c>
 8009ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d101      	bne.n	8009af4 <xQueueGenericSendFromISR+0x40>
 8009af0:	2301      	movs	r3, #1
 8009af2:	e000      	b.n	8009af6 <xQueueGenericSendFromISR+0x42>
 8009af4:	2300      	movs	r3, #0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10a      	bne.n	8009b10 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afe:	f383 8811 	msr	BASEPRI, r3
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	f3bf 8f4f 	dsb	sy
 8009b0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b0c:	bf00      	nop
 8009b0e:	e7fe      	b.n	8009b0e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d103      	bne.n	8009b1e <xQueueGenericSendFromISR+0x6a>
 8009b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d101      	bne.n	8009b22 <xQueueGenericSendFromISR+0x6e>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e000      	b.n	8009b24 <xQueueGenericSendFromISR+0x70>
 8009b22:	2300      	movs	r3, #0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10a      	bne.n	8009b3e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2c:	f383 8811 	msr	BASEPRI, r3
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	f3bf 8f4f 	dsb	sy
 8009b38:	623b      	str	r3, [r7, #32]
}
 8009b3a:	bf00      	nop
 8009b3c:	e7fe      	b.n	8009b3c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b3e:	f001 ff2b 	bl	800b998 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009b42:	f3ef 8211 	mrs	r2, BASEPRI
 8009b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4a:	f383 8811 	msr	BASEPRI, r3
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	61fa      	str	r2, [r7, #28]
 8009b58:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009b5a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b5c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d302      	bcc.n	8009b70 <xQueueGenericSendFromISR+0xbc>
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d12f      	bne.n	8009bd0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b80:	683a      	ldr	r2, [r7, #0]
 8009b82:	68b9      	ldr	r1, [r7, #8]
 8009b84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009b86:	f000 f911 	bl	8009dac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009b8a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b92:	d112      	bne.n	8009bba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d016      	beq.n	8009bca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b9e:	3324      	adds	r3, #36	; 0x24
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f000 fef7 	bl	800a994 <xTaskRemoveFromEventList>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00e      	beq.n	8009bca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00b      	beq.n	8009bca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	601a      	str	r2, [r3, #0]
 8009bb8:	e007      	b.n	8009bca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009bba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	b25a      	sxtb	r2, r3
 8009bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009bce:	e001      	b.n	8009bd4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009bde:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3740      	adds	r7, #64	; 0x40
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
	...

08009bec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b08c      	sub	sp, #48	; 0x30
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10a      	bne.n	8009c1c <xQueueReceive+0x30>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	623b      	str	r3, [r7, #32]
}
 8009c18:	bf00      	nop
 8009c1a:	e7fe      	b.n	8009c1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d103      	bne.n	8009c2a <xQueueReceive+0x3e>
 8009c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d101      	bne.n	8009c2e <xQueueReceive+0x42>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e000      	b.n	8009c30 <xQueueReceive+0x44>
 8009c2e:	2300      	movs	r3, #0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10a      	bne.n	8009c4a <xQueueReceive+0x5e>
	__asm volatile
 8009c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c38:	f383 8811 	msr	BASEPRI, r3
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f3bf 8f4f 	dsb	sy
 8009c44:	61fb      	str	r3, [r7, #28]
}
 8009c46:	bf00      	nop
 8009c48:	e7fe      	b.n	8009c48 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c4a:	f001 f865 	bl	800ad18 <xTaskGetSchedulerState>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d102      	bne.n	8009c5a <xQueueReceive+0x6e>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d101      	bne.n	8009c5e <xQueueReceive+0x72>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e000      	b.n	8009c60 <xQueueReceive+0x74>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d10a      	bne.n	8009c7a <xQueueReceive+0x8e>
	__asm volatile
 8009c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c68:	f383 8811 	msr	BASEPRI, r3
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	61bb      	str	r3, [r7, #24]
}
 8009c76:	bf00      	nop
 8009c78:	e7fe      	b.n	8009c78 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c7a:	f001 fdab 	bl	800b7d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c82:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d01f      	beq.n	8009cca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c8a:	68b9      	ldr	r1, [r7, #8]
 8009c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c8e:	f000 f8f7 	bl	8009e80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c94:	1e5a      	subs	r2, r3, #1
 8009c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00f      	beq.n	8009cc2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca4:	3310      	adds	r3, #16
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f000 fe74 	bl	800a994 <xTaskRemoveFromEventList>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d007      	beq.n	8009cc2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009cb2:	4b3d      	ldr	r3, [pc, #244]	; (8009da8 <xQueueReceive+0x1bc>)
 8009cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cb8:	601a      	str	r2, [r3, #0]
 8009cba:	f3bf 8f4f 	dsb	sy
 8009cbe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009cc2:	f001 fdb7 	bl	800b834 <vPortExitCritical>
				return pdPASS;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e069      	b.n	8009d9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d103      	bne.n	8009cd8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009cd0:	f001 fdb0 	bl	800b834 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	e062      	b.n	8009d9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d106      	bne.n	8009cec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cde:	f107 0310 	add.w	r3, r7, #16
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f000 feba 	bl	800aa5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009cec:	f001 fda2 	bl	800b834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009cf0:	f000 fc26 	bl	800a540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cf4:	f001 fd6e 	bl	800b7d4 <vPortEnterCritical>
 8009cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cfe:	b25b      	sxtb	r3, r3
 8009d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d04:	d103      	bne.n	8009d0e <xQueueReceive+0x122>
 8009d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d14:	b25b      	sxtb	r3, r3
 8009d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d1a:	d103      	bne.n	8009d24 <xQueueReceive+0x138>
 8009d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d24:	f001 fd86 	bl	800b834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d28:	1d3a      	adds	r2, r7, #4
 8009d2a:	f107 0310 	add.w	r3, r7, #16
 8009d2e:	4611      	mov	r1, r2
 8009d30:	4618      	mov	r0, r3
 8009d32:	f000 fea9 	bl	800aa88 <xTaskCheckForTimeOut>
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d123      	bne.n	8009d84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d3e:	f000 f917 	bl	8009f70 <prvIsQueueEmpty>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d017      	beq.n	8009d78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4a:	3324      	adds	r3, #36	; 0x24
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	4611      	mov	r1, r2
 8009d50:	4618      	mov	r0, r3
 8009d52:	f000 fdcf 	bl	800a8f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d58:	f000 f8b8 	bl	8009ecc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d5c:	f000 fbfe 	bl	800a55c <xTaskResumeAll>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d189      	bne.n	8009c7a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009d66:	4b10      	ldr	r3, [pc, #64]	; (8009da8 <xQueueReceive+0x1bc>)
 8009d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d6c:	601a      	str	r2, [r3, #0]
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	e780      	b.n	8009c7a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d7a:	f000 f8a7 	bl	8009ecc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d7e:	f000 fbed 	bl	800a55c <xTaskResumeAll>
 8009d82:	e77a      	b.n	8009c7a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d86:	f000 f8a1 	bl	8009ecc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d8a:	f000 fbe7 	bl	800a55c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d90:	f000 f8ee 	bl	8009f70 <prvIsQueueEmpty>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f43f af6f 	beq.w	8009c7a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3730      	adds	r7, #48	; 0x30
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	e000ed04 	.word	0xe000ed04

08009dac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009db8:	2300      	movs	r3, #0
 8009dba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d10d      	bne.n	8009de6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d14d      	bne.n	8009e6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f000 ffbc 	bl	800ad54 <xTaskPriorityDisinherit>
 8009ddc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2200      	movs	r2, #0
 8009de2:	609a      	str	r2, [r3, #8]
 8009de4:	e043      	b.n	8009e6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d119      	bne.n	8009e20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6858      	ldr	r0, [r3, #4]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df4:	461a      	mov	r2, r3
 8009df6:	68b9      	ldr	r1, [r7, #8]
 8009df8:	f002 f824 	bl	800be44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	685a      	ldr	r2, [r3, #4]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e04:	441a      	add	r2, r3
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	685a      	ldr	r2, [r3, #4]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d32b      	bcc.n	8009e6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	605a      	str	r2, [r3, #4]
 8009e1e:	e026      	b.n	8009e6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	68d8      	ldr	r0, [r3, #12]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e28:	461a      	mov	r2, r3
 8009e2a:	68b9      	ldr	r1, [r7, #8]
 8009e2c:	f002 f80a 	bl	800be44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	68da      	ldr	r2, [r3, #12]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e38:	425b      	negs	r3, r3
 8009e3a:	441a      	add	r2, r3
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	68da      	ldr	r2, [r3, #12]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d207      	bcs.n	8009e5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	689a      	ldr	r2, [r3, #8]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e54:	425b      	negs	r3, r3
 8009e56:	441a      	add	r2, r3
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d105      	bne.n	8009e6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d002      	beq.n	8009e6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	1c5a      	adds	r2, r3, #1
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009e76:	697b      	ldr	r3, [r7, #20]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3718      	adds	r7, #24
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d018      	beq.n	8009ec4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	68da      	ldr	r2, [r3, #12]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e9a:	441a      	add	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	68da      	ldr	r2, [r3, #12]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d303      	bcc.n	8009eb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	68d9      	ldr	r1, [r3, #12]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	6838      	ldr	r0, [r7, #0]
 8009ec0:	f001 ffc0 	bl	800be44 <memcpy>
	}
}
 8009ec4:	bf00      	nop
 8009ec6:	3708      	adds	r7, #8
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ed4:	f001 fc7e 	bl	800b7d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ede:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ee0:	e011      	b.n	8009f06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d012      	beq.n	8009f10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	3324      	adds	r3, #36	; 0x24
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f000 fd50 	bl	800a994 <xTaskRemoveFromEventList>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d001      	beq.n	8009efe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009efa:	f000 fe27 	bl	800ab4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009efe:	7bfb      	ldrb	r3, [r7, #15]
 8009f00:	3b01      	subs	r3, #1
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	dce9      	bgt.n	8009ee2 <prvUnlockQueue+0x16>
 8009f0e:	e000      	b.n	8009f12 <prvUnlockQueue+0x46>
					break;
 8009f10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	22ff      	movs	r2, #255	; 0xff
 8009f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009f1a:	f001 fc8b 	bl	800b834 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009f1e:	f001 fc59 	bl	800b7d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f2a:	e011      	b.n	8009f50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d012      	beq.n	8009f5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	3310      	adds	r3, #16
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f000 fd2b 	bl	800a994 <xTaskRemoveFromEventList>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d001      	beq.n	8009f48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009f44:	f000 fe02 	bl	800ab4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009f48:	7bbb      	ldrb	r3, [r7, #14]
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	dce9      	bgt.n	8009f2c <prvUnlockQueue+0x60>
 8009f58:	e000      	b.n	8009f5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009f5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	22ff      	movs	r2, #255	; 0xff
 8009f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009f64:	f001 fc66 	bl	800b834 <vPortExitCritical>
}
 8009f68:	bf00      	nop
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f78:	f001 fc2c 	bl	800b7d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d102      	bne.n	8009f8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009f84:	2301      	movs	r3, #1
 8009f86:	60fb      	str	r3, [r7, #12]
 8009f88:	e001      	b.n	8009f8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009f8e:	f001 fc51 	bl	800b834 <vPortExitCritical>

	return xReturn;
 8009f92:	68fb      	ldr	r3, [r7, #12]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009fa4:	f001 fc16 	bl	800b7d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d102      	bne.n	8009fba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	60fb      	str	r3, [r7, #12]
 8009fb8:	e001      	b.n	8009fbe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009fbe:	f001 fc39 	bl	800b834 <vPortExitCritical>

	return xReturn;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3710      	adds	r7, #16
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	60fb      	str	r3, [r7, #12]
 8009fda:	e014      	b.n	800a006 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009fdc:	4a0f      	ldr	r2, [pc, #60]	; (800a01c <vQueueAddToRegistry+0x50>)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10b      	bne.n	800a000 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009fe8:	490c      	ldr	r1, [pc, #48]	; (800a01c <vQueueAddToRegistry+0x50>)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	683a      	ldr	r2, [r7, #0]
 8009fee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009ff2:	4a0a      	ldr	r2, [pc, #40]	; (800a01c <vQueueAddToRegistry+0x50>)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	00db      	lsls	r3, r3, #3
 8009ff8:	4413      	add	r3, r2
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009ffe:	e006      	b.n	800a00e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	3301      	adds	r3, #1
 800a004:	60fb      	str	r3, [r7, #12]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2b07      	cmp	r3, #7
 800a00a:	d9e7      	bls.n	8009fdc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a00c:	bf00      	nop
 800a00e:	bf00      	nop
 800a010:	3714      	adds	r7, #20
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	200011c8 	.word	0x200011c8

0800a020 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a030:	f001 fbd0 	bl	800b7d4 <vPortEnterCritical>
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a03a:	b25b      	sxtb	r3, r3
 800a03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a040:	d103      	bne.n	800a04a <vQueueWaitForMessageRestricted+0x2a>
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	2200      	movs	r2, #0
 800a046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a050:	b25b      	sxtb	r3, r3
 800a052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a056:	d103      	bne.n	800a060 <vQueueWaitForMessageRestricted+0x40>
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a060:	f001 fbe8 	bl	800b834 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d106      	bne.n	800a07a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	3324      	adds	r3, #36	; 0x24
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	68b9      	ldr	r1, [r7, #8]
 800a074:	4618      	mov	r0, r3
 800a076:	f000 fc61 	bl	800a93c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a07a:	6978      	ldr	r0, [r7, #20]
 800a07c:	f7ff ff26 	bl	8009ecc <prvUnlockQueue>
	}
 800a080:	bf00      	nop
 800a082:	3718      	adds	r7, #24
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b08e      	sub	sp, #56	; 0x38
 800a08c:	af04      	add	r7, sp, #16
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	607a      	str	r2, [r7, #4]
 800a094:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10a      	bne.n	800a0b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a0:	f383 8811 	msr	BASEPRI, r3
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	623b      	str	r3, [r7, #32]
}
 800a0ae:	bf00      	nop
 800a0b0:	e7fe      	b.n	800a0b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10a      	bne.n	800a0ce <xTaskCreateStatic+0x46>
	__asm volatile
 800a0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	61fb      	str	r3, [r7, #28]
}
 800a0ca:	bf00      	nop
 800a0cc:	e7fe      	b.n	800a0cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a0ce:	23bc      	movs	r3, #188	; 0xbc
 800a0d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	2bbc      	cmp	r3, #188	; 0xbc
 800a0d6:	d00a      	beq.n	800a0ee <xTaskCreateStatic+0x66>
	__asm volatile
 800a0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0dc:	f383 8811 	msr	BASEPRI, r3
 800a0e0:	f3bf 8f6f 	isb	sy
 800a0e4:	f3bf 8f4f 	dsb	sy
 800a0e8:	61bb      	str	r3, [r7, #24]
}
 800a0ea:	bf00      	nop
 800a0ec:	e7fe      	b.n	800a0ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a0ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d01e      	beq.n	800a134 <xTaskCreateStatic+0xac>
 800a0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d01b      	beq.n	800a134 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a104:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a108:	2202      	movs	r2, #2
 800a10a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a10e:	2300      	movs	r3, #0
 800a110:	9303      	str	r3, [sp, #12]
 800a112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a114:	9302      	str	r3, [sp, #8]
 800a116:	f107 0314 	add.w	r3, r7, #20
 800a11a:	9301      	str	r3, [sp, #4]
 800a11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	68b9      	ldr	r1, [r7, #8]
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f000 f850 	bl	800a1cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a12c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a12e:	f000 f8f3 	bl	800a318 <prvAddNewTaskToReadyList>
 800a132:	e001      	b.n	800a138 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a134:	2300      	movs	r3, #0
 800a136:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a138:	697b      	ldr	r3, [r7, #20]
	}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3728      	adds	r7, #40	; 0x28
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a142:	b580      	push	{r7, lr}
 800a144:	b08c      	sub	sp, #48	; 0x30
 800a146:	af04      	add	r7, sp, #16
 800a148:	60f8      	str	r0, [r7, #12]
 800a14a:	60b9      	str	r1, [r7, #8]
 800a14c:	603b      	str	r3, [r7, #0]
 800a14e:	4613      	mov	r3, r2
 800a150:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a152:	88fb      	ldrh	r3, [r7, #6]
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	4618      	mov	r0, r3
 800a158:	f001 fc5e 	bl	800ba18 <pvPortMalloc>
 800a15c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00e      	beq.n	800a182 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a164:	20bc      	movs	r0, #188	; 0xbc
 800a166:	f001 fc57 	bl	800ba18 <pvPortMalloc>
 800a16a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d003      	beq.n	800a17a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	697a      	ldr	r2, [r7, #20]
 800a176:	631a      	str	r2, [r3, #48]	; 0x30
 800a178:	e005      	b.n	800a186 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a17a:	6978      	ldr	r0, [r7, #20]
 800a17c:	f001 fd18 	bl	800bbb0 <vPortFree>
 800a180:	e001      	b.n	800a186 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a182:	2300      	movs	r3, #0
 800a184:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d017      	beq.n	800a1bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a194:	88fa      	ldrh	r2, [r7, #6]
 800a196:	2300      	movs	r3, #0
 800a198:	9303      	str	r3, [sp, #12]
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	9302      	str	r3, [sp, #8]
 800a19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a0:	9301      	str	r3, [sp, #4]
 800a1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	68b9      	ldr	r1, [r7, #8]
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f000 f80e 	bl	800a1cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1b0:	69f8      	ldr	r0, [r7, #28]
 800a1b2:	f000 f8b1 	bl	800a318 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	61bb      	str	r3, [r7, #24]
 800a1ba:	e002      	b.n	800a1c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a1c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a1c2:	69bb      	ldr	r3, [r7, #24]
	}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3720      	adds	r7, #32
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b088      	sub	sp, #32
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	607a      	str	r2, [r7, #4]
 800a1d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	21a5      	movs	r1, #165	; 0xa5
 800a1e6:	f001 fe3b 	bl	800be60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4413      	add	r3, r2
 800a1fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	f023 0307 	bic.w	r3, r3, #7
 800a202:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	f003 0307 	and.w	r3, r3, #7
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00a      	beq.n	800a224 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	617b      	str	r3, [r7, #20]
}
 800a220:	bf00      	nop
 800a222:	e7fe      	b.n	800a222 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d01f      	beq.n	800a26a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a22a:	2300      	movs	r3, #0
 800a22c:	61fb      	str	r3, [r7, #28]
 800a22e:	e012      	b.n	800a256 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	4413      	add	r3, r2
 800a236:	7819      	ldrb	r1, [r3, #0]
 800a238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	4413      	add	r3, r2
 800a23e:	3334      	adds	r3, #52	; 0x34
 800a240:	460a      	mov	r2, r1
 800a242:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	4413      	add	r3, r2
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d006      	beq.n	800a25e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	3301      	adds	r3, #1
 800a254:	61fb      	str	r3, [r7, #28]
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	2b0f      	cmp	r3, #15
 800a25a:	d9e9      	bls.n	800a230 <prvInitialiseNewTask+0x64>
 800a25c:	e000      	b.n	800a260 <prvInitialiseNewTask+0x94>
			{
				break;
 800a25e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a262:	2200      	movs	r2, #0
 800a264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a268:	e003      	b.n	800a272 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26c:	2200      	movs	r2, #0
 800a26e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a274:	2b37      	cmp	r3, #55	; 0x37
 800a276:	d901      	bls.n	800a27c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a278:	2337      	movs	r3, #55	; 0x37
 800a27a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a280:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a286:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28a:	2200      	movs	r2, #0
 800a28c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a290:	3304      	adds	r3, #4
 800a292:	4618      	mov	r0, r3
 800a294:	f7ff f978 	bl	8009588 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29a:	3318      	adds	r3, #24
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7ff f973 	bl	8009588 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ca:	3354      	adds	r3, #84	; 0x54
 800a2cc:	2260      	movs	r2, #96	; 0x60
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f001 fdc5 	bl	800be60 <memset>
 800a2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d8:	4a0c      	ldr	r2, [pc, #48]	; (800a30c <prvInitialiseNewTask+0x140>)
 800a2da:	659a      	str	r2, [r3, #88]	; 0x58
 800a2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2de:	4a0c      	ldr	r2, [pc, #48]	; (800a310 <prvInitialiseNewTask+0x144>)
 800a2e0:	65da      	str	r2, [r3, #92]	; 0x5c
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e4:	4a0b      	ldr	r2, [pc, #44]	; (800a314 <prvInitialiseNewTask+0x148>)
 800a2e6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a2e8:	683a      	ldr	r2, [r7, #0]
 800a2ea:	68f9      	ldr	r1, [r7, #12]
 800a2ec:	69b8      	ldr	r0, [r7, #24]
 800a2ee:	f001 f941 	bl	800b574 <pxPortInitialiseStack>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d002      	beq.n	800a304 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a302:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a304:	bf00      	nop
 800a306:	3720      	adds	r7, #32
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	0800d574 	.word	0x0800d574
 800a310:	0800d594 	.word	0x0800d594
 800a314:	0800d554 	.word	0x0800d554

0800a318 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a320:	f001 fa58 	bl	800b7d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a324:	4b2d      	ldr	r3, [pc, #180]	; (800a3dc <prvAddNewTaskToReadyList+0xc4>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	3301      	adds	r3, #1
 800a32a:	4a2c      	ldr	r2, [pc, #176]	; (800a3dc <prvAddNewTaskToReadyList+0xc4>)
 800a32c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a32e:	4b2c      	ldr	r3, [pc, #176]	; (800a3e0 <prvAddNewTaskToReadyList+0xc8>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d109      	bne.n	800a34a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a336:	4a2a      	ldr	r2, [pc, #168]	; (800a3e0 <prvAddNewTaskToReadyList+0xc8>)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a33c:	4b27      	ldr	r3, [pc, #156]	; (800a3dc <prvAddNewTaskToReadyList+0xc4>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2b01      	cmp	r3, #1
 800a342:	d110      	bne.n	800a366 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a344:	f000 fc26 	bl	800ab94 <prvInitialiseTaskLists>
 800a348:	e00d      	b.n	800a366 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a34a:	4b26      	ldr	r3, [pc, #152]	; (800a3e4 <prvAddNewTaskToReadyList+0xcc>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d109      	bne.n	800a366 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a352:	4b23      	ldr	r3, [pc, #140]	; (800a3e0 <prvAddNewTaskToReadyList+0xc8>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d802      	bhi.n	800a366 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a360:	4a1f      	ldr	r2, [pc, #124]	; (800a3e0 <prvAddNewTaskToReadyList+0xc8>)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a366:	4b20      	ldr	r3, [pc, #128]	; (800a3e8 <prvAddNewTaskToReadyList+0xd0>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	3301      	adds	r3, #1
 800a36c:	4a1e      	ldr	r2, [pc, #120]	; (800a3e8 <prvAddNewTaskToReadyList+0xd0>)
 800a36e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a370:	4b1d      	ldr	r3, [pc, #116]	; (800a3e8 <prvAddNewTaskToReadyList+0xd0>)
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a37c:	4b1b      	ldr	r3, [pc, #108]	; (800a3ec <prvAddNewTaskToReadyList+0xd4>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	429a      	cmp	r2, r3
 800a382:	d903      	bls.n	800a38c <prvAddNewTaskToReadyList+0x74>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a388:	4a18      	ldr	r2, [pc, #96]	; (800a3ec <prvAddNewTaskToReadyList+0xd4>)
 800a38a:	6013      	str	r3, [r2, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a390:	4613      	mov	r3, r2
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	4413      	add	r3, r2
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	4a15      	ldr	r2, [pc, #84]	; (800a3f0 <prvAddNewTaskToReadyList+0xd8>)
 800a39a:	441a      	add	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	3304      	adds	r3, #4
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	4610      	mov	r0, r2
 800a3a4:	f7ff f8fd 	bl	80095a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a3a8:	f001 fa44 	bl	800b834 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a3ac:	4b0d      	ldr	r3, [pc, #52]	; (800a3e4 <prvAddNewTaskToReadyList+0xcc>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d00e      	beq.n	800a3d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a3b4:	4b0a      	ldr	r3, [pc, #40]	; (800a3e0 <prvAddNewTaskToReadyList+0xc8>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d207      	bcs.n	800a3d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a3c2:	4b0c      	ldr	r3, [pc, #48]	; (800a3f4 <prvAddNewTaskToReadyList+0xdc>)
 800a3c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3c8:	601a      	str	r2, [r3, #0]
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3d2:	bf00      	nop
 800a3d4:	3708      	adds	r7, #8
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	200016dc 	.word	0x200016dc
 800a3e0:	20001208 	.word	0x20001208
 800a3e4:	200016e8 	.word	0x200016e8
 800a3e8:	200016f8 	.word	0x200016f8
 800a3ec:	200016e4 	.word	0x200016e4
 800a3f0:	2000120c 	.word	0x2000120c
 800a3f4:	e000ed04 	.word	0xe000ed04

0800a3f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a400:	2300      	movs	r3, #0
 800a402:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d017      	beq.n	800a43a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a40a:	4b13      	ldr	r3, [pc, #76]	; (800a458 <vTaskDelay+0x60>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00a      	beq.n	800a428 <vTaskDelay+0x30>
	__asm volatile
 800a412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a416:	f383 8811 	msr	BASEPRI, r3
 800a41a:	f3bf 8f6f 	isb	sy
 800a41e:	f3bf 8f4f 	dsb	sy
 800a422:	60bb      	str	r3, [r7, #8]
}
 800a424:	bf00      	nop
 800a426:	e7fe      	b.n	800a426 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a428:	f000 f88a 	bl	800a540 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a42c:	2100      	movs	r1, #0
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fcfe 	bl	800ae30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a434:	f000 f892 	bl	800a55c <xTaskResumeAll>
 800a438:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d107      	bne.n	800a450 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a440:	4b06      	ldr	r3, [pc, #24]	; (800a45c <vTaskDelay+0x64>)
 800a442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a446:	601a      	str	r2, [r3, #0]
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a450:	bf00      	nop
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	20001704 	.word	0x20001704
 800a45c:	e000ed04 	.word	0xe000ed04

0800a460 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b08a      	sub	sp, #40	; 0x28
 800a464:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a466:	2300      	movs	r3, #0
 800a468:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a46a:	2300      	movs	r3, #0
 800a46c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a46e:	463a      	mov	r2, r7
 800a470:	1d39      	adds	r1, r7, #4
 800a472:	f107 0308 	add.w	r3, r7, #8
 800a476:	4618      	mov	r0, r3
 800a478:	f7ff f832 	bl	80094e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a47c:	6839      	ldr	r1, [r7, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	9202      	str	r2, [sp, #8]
 800a484:	9301      	str	r3, [sp, #4]
 800a486:	2300      	movs	r3, #0
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	2300      	movs	r3, #0
 800a48c:	460a      	mov	r2, r1
 800a48e:	4924      	ldr	r1, [pc, #144]	; (800a520 <vTaskStartScheduler+0xc0>)
 800a490:	4824      	ldr	r0, [pc, #144]	; (800a524 <vTaskStartScheduler+0xc4>)
 800a492:	f7ff fdf9 	bl	800a088 <xTaskCreateStatic>
 800a496:	4603      	mov	r3, r0
 800a498:	4a23      	ldr	r2, [pc, #140]	; (800a528 <vTaskStartScheduler+0xc8>)
 800a49a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a49c:	4b22      	ldr	r3, [pc, #136]	; (800a528 <vTaskStartScheduler+0xc8>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d002      	beq.n	800a4aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	617b      	str	r3, [r7, #20]
 800a4a8:	e001      	b.n	800a4ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d102      	bne.n	800a4ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a4b4:	f000 fd10 	bl	800aed8 <xTimerCreateTimerTask>
 800a4b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d11b      	bne.n	800a4f8 <vTaskStartScheduler+0x98>
	__asm volatile
 800a4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	613b      	str	r3, [r7, #16]
}
 800a4d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a4d4:	4b15      	ldr	r3, [pc, #84]	; (800a52c <vTaskStartScheduler+0xcc>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	3354      	adds	r3, #84	; 0x54
 800a4da:	4a15      	ldr	r2, [pc, #84]	; (800a530 <vTaskStartScheduler+0xd0>)
 800a4dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a4de:	4b15      	ldr	r3, [pc, #84]	; (800a534 <vTaskStartScheduler+0xd4>)
 800a4e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a4e6:	4b14      	ldr	r3, [pc, #80]	; (800a538 <vTaskStartScheduler+0xd8>)
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a4ec:	4b13      	ldr	r3, [pc, #76]	; (800a53c <vTaskStartScheduler+0xdc>)
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a4f2:	f001 f8cd 	bl	800b690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a4f6:	e00e      	b.n	800a516 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4fe:	d10a      	bne.n	800a516 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a504:	f383 8811 	msr	BASEPRI, r3
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	60fb      	str	r3, [r7, #12]
}
 800a512:	bf00      	nop
 800a514:	e7fe      	b.n	800a514 <vTaskStartScheduler+0xb4>
}
 800a516:	bf00      	nop
 800a518:	3718      	adds	r7, #24
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	0800d188 	.word	0x0800d188
 800a524:	0800ab65 	.word	0x0800ab65
 800a528:	20001700 	.word	0x20001700
 800a52c:	20001208 	.word	0x20001208
 800a530:	200000c0 	.word	0x200000c0
 800a534:	200016fc 	.word	0x200016fc
 800a538:	200016e8 	.word	0x200016e8
 800a53c:	200016e0 	.word	0x200016e0

0800a540 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a540:	b480      	push	{r7}
 800a542:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a544:	4b04      	ldr	r3, [pc, #16]	; (800a558 <vTaskSuspendAll+0x18>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	3301      	adds	r3, #1
 800a54a:	4a03      	ldr	r2, [pc, #12]	; (800a558 <vTaskSuspendAll+0x18>)
 800a54c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a54e:	bf00      	nop
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr
 800a558:	20001704 	.word	0x20001704

0800a55c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a562:	2300      	movs	r3, #0
 800a564:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a566:	2300      	movs	r3, #0
 800a568:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a56a:	4b42      	ldr	r3, [pc, #264]	; (800a674 <xTaskResumeAll+0x118>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10a      	bne.n	800a588 <xTaskResumeAll+0x2c>
	__asm volatile
 800a572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	603b      	str	r3, [r7, #0]
}
 800a584:	bf00      	nop
 800a586:	e7fe      	b.n	800a586 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a588:	f001 f924 	bl	800b7d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a58c:	4b39      	ldr	r3, [pc, #228]	; (800a674 <xTaskResumeAll+0x118>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	3b01      	subs	r3, #1
 800a592:	4a38      	ldr	r2, [pc, #224]	; (800a674 <xTaskResumeAll+0x118>)
 800a594:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a596:	4b37      	ldr	r3, [pc, #220]	; (800a674 <xTaskResumeAll+0x118>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d162      	bne.n	800a664 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a59e:	4b36      	ldr	r3, [pc, #216]	; (800a678 <xTaskResumeAll+0x11c>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d05e      	beq.n	800a664 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a5a6:	e02f      	b.n	800a608 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5a8:	4b34      	ldr	r3, [pc, #208]	; (800a67c <xTaskResumeAll+0x120>)
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	3318      	adds	r3, #24
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7ff f851 	bl	800965c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3304      	adds	r3, #4
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7ff f84c 	bl	800965c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c8:	4b2d      	ldr	r3, [pc, #180]	; (800a680 <xTaskResumeAll+0x124>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d903      	bls.n	800a5d8 <xTaskResumeAll+0x7c>
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d4:	4a2a      	ldr	r2, [pc, #168]	; (800a680 <xTaskResumeAll+0x124>)
 800a5d6:	6013      	str	r3, [r2, #0]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5dc:	4613      	mov	r3, r2
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	4413      	add	r3, r2
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	4a27      	ldr	r2, [pc, #156]	; (800a684 <xTaskResumeAll+0x128>)
 800a5e6:	441a      	add	r2, r3
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	3304      	adds	r3, #4
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	f7fe ffd7 	bl	80095a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f8:	4b23      	ldr	r3, [pc, #140]	; (800a688 <xTaskResumeAll+0x12c>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d302      	bcc.n	800a608 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a602:	4b22      	ldr	r3, [pc, #136]	; (800a68c <xTaskResumeAll+0x130>)
 800a604:	2201      	movs	r2, #1
 800a606:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a608:	4b1c      	ldr	r3, [pc, #112]	; (800a67c <xTaskResumeAll+0x120>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d1cb      	bne.n	800a5a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d001      	beq.n	800a61a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a616:	f000 fb5f 	bl	800acd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a61a:	4b1d      	ldr	r3, [pc, #116]	; (800a690 <xTaskResumeAll+0x134>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d010      	beq.n	800a648 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a626:	f000 f847 	bl	800a6b8 <xTaskIncrementTick>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d002      	beq.n	800a636 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a630:	4b16      	ldr	r3, [pc, #88]	; (800a68c <xTaskResumeAll+0x130>)
 800a632:	2201      	movs	r2, #1
 800a634:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	3b01      	subs	r3, #1
 800a63a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1f1      	bne.n	800a626 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a642:	4b13      	ldr	r3, [pc, #76]	; (800a690 <xTaskResumeAll+0x134>)
 800a644:	2200      	movs	r2, #0
 800a646:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a648:	4b10      	ldr	r3, [pc, #64]	; (800a68c <xTaskResumeAll+0x130>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d009      	beq.n	800a664 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a650:	2301      	movs	r3, #1
 800a652:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a654:	4b0f      	ldr	r3, [pc, #60]	; (800a694 <xTaskResumeAll+0x138>)
 800a656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a65a:	601a      	str	r2, [r3, #0]
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a664:	f001 f8e6 	bl	800b834 <vPortExitCritical>

	return xAlreadyYielded;
 800a668:	68bb      	ldr	r3, [r7, #8]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	20001704 	.word	0x20001704
 800a678:	200016dc 	.word	0x200016dc
 800a67c:	2000169c 	.word	0x2000169c
 800a680:	200016e4 	.word	0x200016e4
 800a684:	2000120c 	.word	0x2000120c
 800a688:	20001208 	.word	0x20001208
 800a68c:	200016f0 	.word	0x200016f0
 800a690:	200016ec 	.word	0x200016ec
 800a694:	e000ed04 	.word	0xe000ed04

0800a698 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a69e:	4b05      	ldr	r3, [pc, #20]	; (800a6b4 <xTaskGetTickCount+0x1c>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a6a4:	687b      	ldr	r3, [r7, #4]
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	370c      	adds	r7, #12
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	200016e0 	.word	0x200016e0

0800a6b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6c2:	4b4f      	ldr	r3, [pc, #316]	; (800a800 <xTaskIncrementTick+0x148>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	f040 808f 	bne.w	800a7ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a6cc:	4b4d      	ldr	r3, [pc, #308]	; (800a804 <xTaskIncrementTick+0x14c>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a6d4:	4a4b      	ldr	r2, [pc, #300]	; (800a804 <xTaskIncrementTick+0x14c>)
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d120      	bne.n	800a722 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a6e0:	4b49      	ldr	r3, [pc, #292]	; (800a808 <xTaskIncrementTick+0x150>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d00a      	beq.n	800a700 <xTaskIncrementTick+0x48>
	__asm volatile
 800a6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ee:	f383 8811 	msr	BASEPRI, r3
 800a6f2:	f3bf 8f6f 	isb	sy
 800a6f6:	f3bf 8f4f 	dsb	sy
 800a6fa:	603b      	str	r3, [r7, #0]
}
 800a6fc:	bf00      	nop
 800a6fe:	e7fe      	b.n	800a6fe <xTaskIncrementTick+0x46>
 800a700:	4b41      	ldr	r3, [pc, #260]	; (800a808 <xTaskIncrementTick+0x150>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	60fb      	str	r3, [r7, #12]
 800a706:	4b41      	ldr	r3, [pc, #260]	; (800a80c <xTaskIncrementTick+0x154>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a3f      	ldr	r2, [pc, #252]	; (800a808 <xTaskIncrementTick+0x150>)
 800a70c:	6013      	str	r3, [r2, #0]
 800a70e:	4a3f      	ldr	r2, [pc, #252]	; (800a80c <xTaskIncrementTick+0x154>)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	6013      	str	r3, [r2, #0]
 800a714:	4b3e      	ldr	r3, [pc, #248]	; (800a810 <xTaskIncrementTick+0x158>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	3301      	adds	r3, #1
 800a71a:	4a3d      	ldr	r2, [pc, #244]	; (800a810 <xTaskIncrementTick+0x158>)
 800a71c:	6013      	str	r3, [r2, #0]
 800a71e:	f000 fadb 	bl	800acd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a722:	4b3c      	ldr	r3, [pc, #240]	; (800a814 <xTaskIncrementTick+0x15c>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	693a      	ldr	r2, [r7, #16]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d349      	bcc.n	800a7c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a72c:	4b36      	ldr	r3, [pc, #216]	; (800a808 <xTaskIncrementTick+0x150>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d104      	bne.n	800a740 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a736:	4b37      	ldr	r3, [pc, #220]	; (800a814 <xTaskIncrementTick+0x15c>)
 800a738:	f04f 32ff 	mov.w	r2, #4294967295
 800a73c:	601a      	str	r2, [r3, #0]
					break;
 800a73e:	e03f      	b.n	800a7c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a740:	4b31      	ldr	r3, [pc, #196]	; (800a808 <xTaskIncrementTick+0x150>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a750:	693a      	ldr	r2, [r7, #16]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	429a      	cmp	r2, r3
 800a756:	d203      	bcs.n	800a760 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a758:	4a2e      	ldr	r2, [pc, #184]	; (800a814 <xTaskIncrementTick+0x15c>)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a75e:	e02f      	b.n	800a7c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	3304      	adds	r3, #4
 800a764:	4618      	mov	r0, r3
 800a766:	f7fe ff79 	bl	800965c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d004      	beq.n	800a77c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	3318      	adds	r3, #24
 800a776:	4618      	mov	r0, r3
 800a778:	f7fe ff70 	bl	800965c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a780:	4b25      	ldr	r3, [pc, #148]	; (800a818 <xTaskIncrementTick+0x160>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	429a      	cmp	r2, r3
 800a786:	d903      	bls.n	800a790 <xTaskIncrementTick+0xd8>
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78c:	4a22      	ldr	r2, [pc, #136]	; (800a818 <xTaskIncrementTick+0x160>)
 800a78e:	6013      	str	r3, [r2, #0]
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a794:	4613      	mov	r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	4413      	add	r3, r2
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	4a1f      	ldr	r2, [pc, #124]	; (800a81c <xTaskIncrementTick+0x164>)
 800a79e:	441a      	add	r2, r3
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	f7fe fefb 	bl	80095a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b0:	4b1b      	ldr	r3, [pc, #108]	; (800a820 <xTaskIncrementTick+0x168>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d3b8      	bcc.n	800a72c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7be:	e7b5      	b.n	800a72c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a7c0:	4b17      	ldr	r3, [pc, #92]	; (800a820 <xTaskIncrementTick+0x168>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c6:	4915      	ldr	r1, [pc, #84]	; (800a81c <xTaskIncrementTick+0x164>)
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	4413      	add	r3, r2
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	440b      	add	r3, r1
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d901      	bls.n	800a7dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a7dc:	4b11      	ldr	r3, [pc, #68]	; (800a824 <xTaskIncrementTick+0x16c>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d007      	beq.n	800a7f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	617b      	str	r3, [r7, #20]
 800a7e8:	e004      	b.n	800a7f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a7ea:	4b0f      	ldr	r3, [pc, #60]	; (800a828 <xTaskIncrementTick+0x170>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	4a0d      	ldr	r2, [pc, #52]	; (800a828 <xTaskIncrementTick+0x170>)
 800a7f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a7f4:	697b      	ldr	r3, [r7, #20]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3718      	adds	r7, #24
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	20001704 	.word	0x20001704
 800a804:	200016e0 	.word	0x200016e0
 800a808:	20001694 	.word	0x20001694
 800a80c:	20001698 	.word	0x20001698
 800a810:	200016f4 	.word	0x200016f4
 800a814:	200016fc 	.word	0x200016fc
 800a818:	200016e4 	.word	0x200016e4
 800a81c:	2000120c 	.word	0x2000120c
 800a820:	20001208 	.word	0x20001208
 800a824:	200016f0 	.word	0x200016f0
 800a828:	200016ec 	.word	0x200016ec

0800a82c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a832:	4b2a      	ldr	r3, [pc, #168]	; (800a8dc <vTaskSwitchContext+0xb0>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d003      	beq.n	800a842 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a83a:	4b29      	ldr	r3, [pc, #164]	; (800a8e0 <vTaskSwitchContext+0xb4>)
 800a83c:	2201      	movs	r2, #1
 800a83e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a840:	e046      	b.n	800a8d0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a842:	4b27      	ldr	r3, [pc, #156]	; (800a8e0 <vTaskSwitchContext+0xb4>)
 800a844:	2200      	movs	r2, #0
 800a846:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a848:	4b26      	ldr	r3, [pc, #152]	; (800a8e4 <vTaskSwitchContext+0xb8>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	60fb      	str	r3, [r7, #12]
 800a84e:	e010      	b.n	800a872 <vTaskSwitchContext+0x46>
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d10a      	bne.n	800a86c <vTaskSwitchContext+0x40>
	__asm volatile
 800a856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85a:	f383 8811 	msr	BASEPRI, r3
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	607b      	str	r3, [r7, #4]
}
 800a868:	bf00      	nop
 800a86a:	e7fe      	b.n	800a86a <vTaskSwitchContext+0x3e>
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	3b01      	subs	r3, #1
 800a870:	60fb      	str	r3, [r7, #12]
 800a872:	491d      	ldr	r1, [pc, #116]	; (800a8e8 <vTaskSwitchContext+0xbc>)
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	4613      	mov	r3, r2
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	4413      	add	r3, r2
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	440b      	add	r3, r1
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d0e4      	beq.n	800a850 <vTaskSwitchContext+0x24>
 800a886:	68fa      	ldr	r2, [r7, #12]
 800a888:	4613      	mov	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	4a15      	ldr	r2, [pc, #84]	; (800a8e8 <vTaskSwitchContext+0xbc>)
 800a892:	4413      	add	r3, r2
 800a894:	60bb      	str	r3, [r7, #8]
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	685a      	ldr	r2, [r3, #4]
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	605a      	str	r2, [r3, #4]
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	685a      	ldr	r2, [r3, #4]
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	3308      	adds	r3, #8
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d104      	bne.n	800a8b6 <vTaskSwitchContext+0x8a>
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	685a      	ldr	r2, [r3, #4]
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	605a      	str	r2, [r3, #4]
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	4a0b      	ldr	r2, [pc, #44]	; (800a8ec <vTaskSwitchContext+0xc0>)
 800a8be:	6013      	str	r3, [r2, #0]
 800a8c0:	4a08      	ldr	r2, [pc, #32]	; (800a8e4 <vTaskSwitchContext+0xb8>)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a8c6:	4b09      	ldr	r3, [pc, #36]	; (800a8ec <vTaskSwitchContext+0xc0>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	3354      	adds	r3, #84	; 0x54
 800a8cc:	4a08      	ldr	r2, [pc, #32]	; (800a8f0 <vTaskSwitchContext+0xc4>)
 800a8ce:	6013      	str	r3, [r2, #0]
}
 800a8d0:	bf00      	nop
 800a8d2:	3714      	adds	r7, #20
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	20001704 	.word	0x20001704
 800a8e0:	200016f0 	.word	0x200016f0
 800a8e4:	200016e4 	.word	0x200016e4
 800a8e8:	2000120c 	.word	0x2000120c
 800a8ec:	20001208 	.word	0x20001208
 800a8f0:	200000c0 	.word	0x200000c0

0800a8f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10a      	bne.n	800a91a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a908:	f383 8811 	msr	BASEPRI, r3
 800a90c:	f3bf 8f6f 	isb	sy
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	60fb      	str	r3, [r7, #12]
}
 800a916:	bf00      	nop
 800a918:	e7fe      	b.n	800a918 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a91a:	4b07      	ldr	r3, [pc, #28]	; (800a938 <vTaskPlaceOnEventList+0x44>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	3318      	adds	r3, #24
 800a920:	4619      	mov	r1, r3
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f7fe fe61 	bl	80095ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a928:	2101      	movs	r1, #1
 800a92a:	6838      	ldr	r0, [r7, #0]
 800a92c:	f000 fa80 	bl	800ae30 <prvAddCurrentTaskToDelayedList>
}
 800a930:	bf00      	nop
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	20001208 	.word	0x20001208

0800a93c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d10a      	bne.n	800a964 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	617b      	str	r3, [r7, #20]
}
 800a960:	bf00      	nop
 800a962:	e7fe      	b.n	800a962 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a964:	4b0a      	ldr	r3, [pc, #40]	; (800a990 <vTaskPlaceOnEventListRestricted+0x54>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	3318      	adds	r3, #24
 800a96a:	4619      	mov	r1, r3
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f7fe fe18 	bl	80095a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d002      	beq.n	800a97e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a978:	f04f 33ff 	mov.w	r3, #4294967295
 800a97c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a97e:	6879      	ldr	r1, [r7, #4]
 800a980:	68b8      	ldr	r0, [r7, #8]
 800a982:	f000 fa55 	bl	800ae30 <prvAddCurrentTaskToDelayedList>
	}
 800a986:	bf00      	nop
 800a988:	3718      	adds	r7, #24
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	20001208 	.word	0x20001208

0800a994 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b086      	sub	sp, #24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d10a      	bne.n	800a9c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ae:	f383 8811 	msr	BASEPRI, r3
 800a9b2:	f3bf 8f6f 	isb	sy
 800a9b6:	f3bf 8f4f 	dsb	sy
 800a9ba:	60fb      	str	r3, [r7, #12]
}
 800a9bc:	bf00      	nop
 800a9be:	e7fe      	b.n	800a9be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	3318      	adds	r3, #24
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7fe fe49 	bl	800965c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9ca:	4b1e      	ldr	r3, [pc, #120]	; (800aa44 <xTaskRemoveFromEventList+0xb0>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d11d      	bne.n	800aa0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fe fe40 	bl	800965c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e0:	4b19      	ldr	r3, [pc, #100]	; (800aa48 <xTaskRemoveFromEventList+0xb4>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d903      	bls.n	800a9f0 <xTaskRemoveFromEventList+0x5c>
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ec:	4a16      	ldr	r2, [pc, #88]	; (800aa48 <xTaskRemoveFromEventList+0xb4>)
 800a9ee:	6013      	str	r3, [r2, #0]
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	4413      	add	r3, r2
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	4a13      	ldr	r2, [pc, #76]	; (800aa4c <xTaskRemoveFromEventList+0xb8>)
 800a9fe:	441a      	add	r2, r3
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	3304      	adds	r3, #4
 800aa04:	4619      	mov	r1, r3
 800aa06:	4610      	mov	r0, r2
 800aa08:	f7fe fdcb 	bl	80095a2 <vListInsertEnd>
 800aa0c:	e005      	b.n	800aa1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	3318      	adds	r3, #24
 800aa12:	4619      	mov	r1, r3
 800aa14:	480e      	ldr	r0, [pc, #56]	; (800aa50 <xTaskRemoveFromEventList+0xbc>)
 800aa16:	f7fe fdc4 	bl	80095a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa1e:	4b0d      	ldr	r3, [pc, #52]	; (800aa54 <xTaskRemoveFromEventList+0xc0>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d905      	bls.n	800aa34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aa2c:	4b0a      	ldr	r3, [pc, #40]	; (800aa58 <xTaskRemoveFromEventList+0xc4>)
 800aa2e:	2201      	movs	r2, #1
 800aa30:	601a      	str	r2, [r3, #0]
 800aa32:	e001      	b.n	800aa38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800aa34:	2300      	movs	r3, #0
 800aa36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aa38:	697b      	ldr	r3, [r7, #20]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3718      	adds	r7, #24
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	20001704 	.word	0x20001704
 800aa48:	200016e4 	.word	0x200016e4
 800aa4c:	2000120c 	.word	0x2000120c
 800aa50:	2000169c 	.word	0x2000169c
 800aa54:	20001208 	.word	0x20001208
 800aa58:	200016f0 	.word	0x200016f0

0800aa5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aa64:	4b06      	ldr	r3, [pc, #24]	; (800aa80 <vTaskInternalSetTimeOutState+0x24>)
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aa6c:	4b05      	ldr	r3, [pc, #20]	; (800aa84 <vTaskInternalSetTimeOutState+0x28>)
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	605a      	str	r2, [r3, #4]
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr
 800aa80:	200016f4 	.word	0x200016f4
 800aa84:	200016e0 	.word	0x200016e0

0800aa88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b088      	sub	sp, #32
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d10a      	bne.n	800aaae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800aa98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9c:	f383 8811 	msr	BASEPRI, r3
 800aaa0:	f3bf 8f6f 	isb	sy
 800aaa4:	f3bf 8f4f 	dsb	sy
 800aaa8:	613b      	str	r3, [r7, #16]
}
 800aaaa:	bf00      	nop
 800aaac:	e7fe      	b.n	800aaac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10a      	bne.n	800aaca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800aab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	60fb      	str	r3, [r7, #12]
}
 800aac6:	bf00      	nop
 800aac8:	e7fe      	b.n	800aac8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800aaca:	f000 fe83 	bl	800b7d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aace:	4b1d      	ldr	r3, [pc, #116]	; (800ab44 <xTaskCheckForTimeOut+0xbc>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	69ba      	ldr	r2, [r7, #24]
 800aada:	1ad3      	subs	r3, r2, r3
 800aadc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae6:	d102      	bne.n	800aaee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aae8:	2300      	movs	r3, #0
 800aaea:	61fb      	str	r3, [r7, #28]
 800aaec:	e023      	b.n	800ab36 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	4b15      	ldr	r3, [pc, #84]	; (800ab48 <xTaskCheckForTimeOut+0xc0>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d007      	beq.n	800ab0a <xTaskCheckForTimeOut+0x82>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	69ba      	ldr	r2, [r7, #24]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d302      	bcc.n	800ab0a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ab04:	2301      	movs	r3, #1
 800ab06:	61fb      	str	r3, [r7, #28]
 800ab08:	e015      	b.n	800ab36 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	697a      	ldr	r2, [r7, #20]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d20b      	bcs.n	800ab2c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	1ad2      	subs	r2, r2, r3
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f7ff ff9b 	bl	800aa5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ab26:	2300      	movs	r3, #0
 800ab28:	61fb      	str	r3, [r7, #28]
 800ab2a:	e004      	b.n	800ab36 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ab32:	2301      	movs	r3, #1
 800ab34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ab36:	f000 fe7d 	bl	800b834 <vPortExitCritical>

	return xReturn;
 800ab3a:	69fb      	ldr	r3, [r7, #28]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3720      	adds	r7, #32
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	200016e0 	.word	0x200016e0
 800ab48:	200016f4 	.word	0x200016f4

0800ab4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ab50:	4b03      	ldr	r3, [pc, #12]	; (800ab60 <vTaskMissedYield+0x14>)
 800ab52:	2201      	movs	r2, #1
 800ab54:	601a      	str	r2, [r3, #0]
}
 800ab56:	bf00      	nop
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr
 800ab60:	200016f0 	.word	0x200016f0

0800ab64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ab6c:	f000 f852 	bl	800ac14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ab70:	4b06      	ldr	r3, [pc, #24]	; (800ab8c <prvIdleTask+0x28>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d9f9      	bls.n	800ab6c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ab78:	4b05      	ldr	r3, [pc, #20]	; (800ab90 <prvIdleTask+0x2c>)
 800ab7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab7e:	601a      	str	r2, [r3, #0]
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ab88:	e7f0      	b.n	800ab6c <prvIdleTask+0x8>
 800ab8a:	bf00      	nop
 800ab8c:	2000120c 	.word	0x2000120c
 800ab90:	e000ed04 	.word	0xe000ed04

0800ab94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	607b      	str	r3, [r7, #4]
 800ab9e:	e00c      	b.n	800abba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	4613      	mov	r3, r2
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4413      	add	r3, r2
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	4a12      	ldr	r2, [pc, #72]	; (800abf4 <prvInitialiseTaskLists+0x60>)
 800abac:	4413      	add	r3, r2
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fe fcca 	bl	8009548 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	3301      	adds	r3, #1
 800abb8:	607b      	str	r3, [r7, #4]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2b37      	cmp	r3, #55	; 0x37
 800abbe:	d9ef      	bls.n	800aba0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800abc0:	480d      	ldr	r0, [pc, #52]	; (800abf8 <prvInitialiseTaskLists+0x64>)
 800abc2:	f7fe fcc1 	bl	8009548 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800abc6:	480d      	ldr	r0, [pc, #52]	; (800abfc <prvInitialiseTaskLists+0x68>)
 800abc8:	f7fe fcbe 	bl	8009548 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800abcc:	480c      	ldr	r0, [pc, #48]	; (800ac00 <prvInitialiseTaskLists+0x6c>)
 800abce:	f7fe fcbb 	bl	8009548 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800abd2:	480c      	ldr	r0, [pc, #48]	; (800ac04 <prvInitialiseTaskLists+0x70>)
 800abd4:	f7fe fcb8 	bl	8009548 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800abd8:	480b      	ldr	r0, [pc, #44]	; (800ac08 <prvInitialiseTaskLists+0x74>)
 800abda:	f7fe fcb5 	bl	8009548 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800abde:	4b0b      	ldr	r3, [pc, #44]	; (800ac0c <prvInitialiseTaskLists+0x78>)
 800abe0:	4a05      	ldr	r2, [pc, #20]	; (800abf8 <prvInitialiseTaskLists+0x64>)
 800abe2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800abe4:	4b0a      	ldr	r3, [pc, #40]	; (800ac10 <prvInitialiseTaskLists+0x7c>)
 800abe6:	4a05      	ldr	r2, [pc, #20]	; (800abfc <prvInitialiseTaskLists+0x68>)
 800abe8:	601a      	str	r2, [r3, #0]
}
 800abea:	bf00      	nop
 800abec:	3708      	adds	r7, #8
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	2000120c 	.word	0x2000120c
 800abf8:	2000166c 	.word	0x2000166c
 800abfc:	20001680 	.word	0x20001680
 800ac00:	2000169c 	.word	0x2000169c
 800ac04:	200016b0 	.word	0x200016b0
 800ac08:	200016c8 	.word	0x200016c8
 800ac0c:	20001694 	.word	0x20001694
 800ac10:	20001698 	.word	0x20001698

0800ac14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac1a:	e019      	b.n	800ac50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ac1c:	f000 fdda 	bl	800b7d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac20:	4b10      	ldr	r3, [pc, #64]	; (800ac64 <prvCheckTasksWaitingTermination+0x50>)
 800ac22:	68db      	ldr	r3, [r3, #12]
 800ac24:	68db      	ldr	r3, [r3, #12]
 800ac26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	3304      	adds	r3, #4
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7fe fd15 	bl	800965c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ac32:	4b0d      	ldr	r3, [pc, #52]	; (800ac68 <prvCheckTasksWaitingTermination+0x54>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	3b01      	subs	r3, #1
 800ac38:	4a0b      	ldr	r2, [pc, #44]	; (800ac68 <prvCheckTasksWaitingTermination+0x54>)
 800ac3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ac3c:	4b0b      	ldr	r3, [pc, #44]	; (800ac6c <prvCheckTasksWaitingTermination+0x58>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	3b01      	subs	r3, #1
 800ac42:	4a0a      	ldr	r2, [pc, #40]	; (800ac6c <prvCheckTasksWaitingTermination+0x58>)
 800ac44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ac46:	f000 fdf5 	bl	800b834 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 f810 	bl	800ac70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac50:	4b06      	ldr	r3, [pc, #24]	; (800ac6c <prvCheckTasksWaitingTermination+0x58>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d1e1      	bne.n	800ac1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ac58:	bf00      	nop
 800ac5a:	bf00      	nop
 800ac5c:	3708      	adds	r7, #8
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	200016b0 	.word	0x200016b0
 800ac68:	200016dc 	.word	0x200016dc
 800ac6c:	200016c4 	.word	0x200016c4

0800ac70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	3354      	adds	r3, #84	; 0x54
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f001 f905 	bl	800be8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d108      	bne.n	800ac9e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac90:	4618      	mov	r0, r3
 800ac92:	f000 ff8d 	bl	800bbb0 <vPortFree>
				vPortFree( pxTCB );
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 ff8a 	bl	800bbb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ac9c:	e018      	b.n	800acd0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d103      	bne.n	800acb0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 ff81 	bl	800bbb0 <vPortFree>
	}
 800acae:	e00f      	b.n	800acd0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800acb6:	2b02      	cmp	r3, #2
 800acb8:	d00a      	beq.n	800acd0 <prvDeleteTCB+0x60>
	__asm volatile
 800acba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	60fb      	str	r3, [r7, #12]
}
 800accc:	bf00      	nop
 800acce:	e7fe      	b.n	800acce <prvDeleteTCB+0x5e>
	}
 800acd0:	bf00      	nop
 800acd2:	3710      	adds	r7, #16
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acde:	4b0c      	ldr	r3, [pc, #48]	; (800ad10 <prvResetNextTaskUnblockTime+0x38>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d104      	bne.n	800acf2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ace8:	4b0a      	ldr	r3, [pc, #40]	; (800ad14 <prvResetNextTaskUnblockTime+0x3c>)
 800acea:	f04f 32ff 	mov.w	r2, #4294967295
 800acee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800acf0:	e008      	b.n	800ad04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acf2:	4b07      	ldr	r3, [pc, #28]	; (800ad10 <prvResetNextTaskUnblockTime+0x38>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	4a04      	ldr	r2, [pc, #16]	; (800ad14 <prvResetNextTaskUnblockTime+0x3c>)
 800ad02:	6013      	str	r3, [r2, #0]
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr
 800ad10:	20001694 	.word	0x20001694
 800ad14:	200016fc 	.word	0x200016fc

0800ad18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ad1e:	4b0b      	ldr	r3, [pc, #44]	; (800ad4c <xTaskGetSchedulerState+0x34>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d102      	bne.n	800ad2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ad26:	2301      	movs	r3, #1
 800ad28:	607b      	str	r3, [r7, #4]
 800ad2a:	e008      	b.n	800ad3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad2c:	4b08      	ldr	r3, [pc, #32]	; (800ad50 <xTaskGetSchedulerState+0x38>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d102      	bne.n	800ad3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ad34:	2302      	movs	r3, #2
 800ad36:	607b      	str	r3, [r7, #4]
 800ad38:	e001      	b.n	800ad3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ad3e:	687b      	ldr	r3, [r7, #4]
	}
 800ad40:	4618      	mov	r0, r3
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr
 800ad4c:	200016e8 	.word	0x200016e8
 800ad50:	20001704 	.word	0x20001704

0800ad54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b086      	sub	sp, #24
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ad60:	2300      	movs	r3, #0
 800ad62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d056      	beq.n	800ae18 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ad6a:	4b2e      	ldr	r3, [pc, #184]	; (800ae24 <xTaskPriorityDisinherit+0xd0>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	693a      	ldr	r2, [r7, #16]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d00a      	beq.n	800ad8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ad74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad78:	f383 8811 	msr	BASEPRI, r3
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	60fb      	str	r3, [r7, #12]
}
 800ad86:	bf00      	nop
 800ad88:	e7fe      	b.n	800ad88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d10a      	bne.n	800ada8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ad92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad96:	f383 8811 	msr	BASEPRI, r3
 800ad9a:	f3bf 8f6f 	isb	sy
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	60bb      	str	r3, [r7, #8]
}
 800ada4:	bf00      	nop
 800ada6:	e7fe      	b.n	800ada6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adac:	1e5a      	subs	r2, r3, #1
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adba:	429a      	cmp	r2, r3
 800adbc:	d02c      	beq.n	800ae18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d128      	bne.n	800ae18 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	3304      	adds	r3, #4
 800adca:	4618      	mov	r0, r3
 800adcc:	f7fe fc46 	bl	800965c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800addc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade8:	4b0f      	ldr	r3, [pc, #60]	; (800ae28 <xTaskPriorityDisinherit+0xd4>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	429a      	cmp	r2, r3
 800adee:	d903      	bls.n	800adf8 <xTaskPriorityDisinherit+0xa4>
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf4:	4a0c      	ldr	r2, [pc, #48]	; (800ae28 <xTaskPriorityDisinherit+0xd4>)
 800adf6:	6013      	str	r3, [r2, #0]
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adfc:	4613      	mov	r3, r2
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	4413      	add	r3, r2
 800ae02:	009b      	lsls	r3, r3, #2
 800ae04:	4a09      	ldr	r2, [pc, #36]	; (800ae2c <xTaskPriorityDisinherit+0xd8>)
 800ae06:	441a      	add	r2, r3
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	3304      	adds	r3, #4
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	4610      	mov	r0, r2
 800ae10:	f7fe fbc7 	bl	80095a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ae14:	2301      	movs	r3, #1
 800ae16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae18:	697b      	ldr	r3, [r7, #20]
	}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3718      	adds	r7, #24
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	20001208 	.word	0x20001208
 800ae28:	200016e4 	.word	0x200016e4
 800ae2c:	2000120c 	.word	0x2000120c

0800ae30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae3a:	4b21      	ldr	r3, [pc, #132]	; (800aec0 <prvAddCurrentTaskToDelayedList+0x90>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae40:	4b20      	ldr	r3, [pc, #128]	; (800aec4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	3304      	adds	r3, #4
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7fe fc08 	bl	800965c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae52:	d10a      	bne.n	800ae6a <prvAddCurrentTaskToDelayedList+0x3a>
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d007      	beq.n	800ae6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae5a:	4b1a      	ldr	r3, [pc, #104]	; (800aec4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	3304      	adds	r3, #4
 800ae60:	4619      	mov	r1, r3
 800ae62:	4819      	ldr	r0, [pc, #100]	; (800aec8 <prvAddCurrentTaskToDelayedList+0x98>)
 800ae64:	f7fe fb9d 	bl	80095a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ae68:	e026      	b.n	800aeb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ae6a:	68fa      	ldr	r2, [r7, #12]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4413      	add	r3, r2
 800ae70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ae72:	4b14      	ldr	r3, [pc, #80]	; (800aec4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	68ba      	ldr	r2, [r7, #8]
 800ae78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d209      	bcs.n	800ae96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae82:	4b12      	ldr	r3, [pc, #72]	; (800aecc <prvAddCurrentTaskToDelayedList+0x9c>)
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	4b0f      	ldr	r3, [pc, #60]	; (800aec4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	4610      	mov	r0, r2
 800ae90:	f7fe fbab 	bl	80095ea <vListInsert>
}
 800ae94:	e010      	b.n	800aeb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae96:	4b0e      	ldr	r3, [pc, #56]	; (800aed0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	4b0a      	ldr	r3, [pc, #40]	; (800aec4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	3304      	adds	r3, #4
 800aea0:	4619      	mov	r1, r3
 800aea2:	4610      	mov	r0, r2
 800aea4:	f7fe fba1 	bl	80095ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aea8:	4b0a      	ldr	r3, [pc, #40]	; (800aed4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	68ba      	ldr	r2, [r7, #8]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d202      	bcs.n	800aeb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aeb2:	4a08      	ldr	r2, [pc, #32]	; (800aed4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	6013      	str	r3, [r2, #0]
}
 800aeb8:	bf00      	nop
 800aeba:	3710      	adds	r7, #16
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	200016e0 	.word	0x200016e0
 800aec4:	20001208 	.word	0x20001208
 800aec8:	200016c8 	.word	0x200016c8
 800aecc:	20001698 	.word	0x20001698
 800aed0:	20001694 	.word	0x20001694
 800aed4:	200016fc 	.word	0x200016fc

0800aed8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b08a      	sub	sp, #40	; 0x28
 800aedc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aede:	2300      	movs	r3, #0
 800aee0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aee2:	f000 fb07 	bl	800b4f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aee6:	4b1c      	ldr	r3, [pc, #112]	; (800af58 <xTimerCreateTimerTask+0x80>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d021      	beq.n	800af32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aeee:	2300      	movs	r3, #0
 800aef0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aef2:	2300      	movs	r3, #0
 800aef4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aef6:	1d3a      	adds	r2, r7, #4
 800aef8:	f107 0108 	add.w	r1, r7, #8
 800aefc:	f107 030c 	add.w	r3, r7, #12
 800af00:	4618      	mov	r0, r3
 800af02:	f7fe fb07 	bl	8009514 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800af06:	6879      	ldr	r1, [r7, #4]
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	9202      	str	r2, [sp, #8]
 800af0e:	9301      	str	r3, [sp, #4]
 800af10:	2302      	movs	r3, #2
 800af12:	9300      	str	r3, [sp, #0]
 800af14:	2300      	movs	r3, #0
 800af16:	460a      	mov	r2, r1
 800af18:	4910      	ldr	r1, [pc, #64]	; (800af5c <xTimerCreateTimerTask+0x84>)
 800af1a:	4811      	ldr	r0, [pc, #68]	; (800af60 <xTimerCreateTimerTask+0x88>)
 800af1c:	f7ff f8b4 	bl	800a088 <xTaskCreateStatic>
 800af20:	4603      	mov	r3, r0
 800af22:	4a10      	ldr	r2, [pc, #64]	; (800af64 <xTimerCreateTimerTask+0x8c>)
 800af24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800af26:	4b0f      	ldr	r3, [pc, #60]	; (800af64 <xTimerCreateTimerTask+0x8c>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d001      	beq.n	800af32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800af2e:	2301      	movs	r3, #1
 800af30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d10a      	bne.n	800af4e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800af38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3c:	f383 8811 	msr	BASEPRI, r3
 800af40:	f3bf 8f6f 	isb	sy
 800af44:	f3bf 8f4f 	dsb	sy
 800af48:	613b      	str	r3, [r7, #16]
}
 800af4a:	bf00      	nop
 800af4c:	e7fe      	b.n	800af4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800af4e:	697b      	ldr	r3, [r7, #20]
}
 800af50:	4618      	mov	r0, r3
 800af52:	3718      	adds	r7, #24
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	20001738 	.word	0x20001738
 800af5c:	0800d190 	.word	0x0800d190
 800af60:	0800b09d 	.word	0x0800b09d
 800af64:	2000173c 	.word	0x2000173c

0800af68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b08a      	sub	sp, #40	; 0x28
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	607a      	str	r2, [r7, #4]
 800af74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800af76:	2300      	movs	r3, #0
 800af78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d10a      	bne.n	800af96 <xTimerGenericCommand+0x2e>
	__asm volatile
 800af80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af84:	f383 8811 	msr	BASEPRI, r3
 800af88:	f3bf 8f6f 	isb	sy
 800af8c:	f3bf 8f4f 	dsb	sy
 800af90:	623b      	str	r3, [r7, #32]
}
 800af92:	bf00      	nop
 800af94:	e7fe      	b.n	800af94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800af96:	4b1a      	ldr	r3, [pc, #104]	; (800b000 <xTimerGenericCommand+0x98>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d02a      	beq.n	800aff4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	2b05      	cmp	r3, #5
 800afae:	dc18      	bgt.n	800afe2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800afb0:	f7ff feb2 	bl	800ad18 <xTaskGetSchedulerState>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b02      	cmp	r3, #2
 800afb8:	d109      	bne.n	800afce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800afba:	4b11      	ldr	r3, [pc, #68]	; (800b000 <xTimerGenericCommand+0x98>)
 800afbc:	6818      	ldr	r0, [r3, #0]
 800afbe:	f107 0110 	add.w	r1, r7, #16
 800afc2:	2300      	movs	r3, #0
 800afc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afc6:	f7fe fc77 	bl	80098b8 <xQueueGenericSend>
 800afca:	6278      	str	r0, [r7, #36]	; 0x24
 800afcc:	e012      	b.n	800aff4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800afce:	4b0c      	ldr	r3, [pc, #48]	; (800b000 <xTimerGenericCommand+0x98>)
 800afd0:	6818      	ldr	r0, [r3, #0]
 800afd2:	f107 0110 	add.w	r1, r7, #16
 800afd6:	2300      	movs	r3, #0
 800afd8:	2200      	movs	r2, #0
 800afda:	f7fe fc6d 	bl	80098b8 <xQueueGenericSend>
 800afde:	6278      	str	r0, [r7, #36]	; 0x24
 800afe0:	e008      	b.n	800aff4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800afe2:	4b07      	ldr	r3, [pc, #28]	; (800b000 <xTimerGenericCommand+0x98>)
 800afe4:	6818      	ldr	r0, [r3, #0]
 800afe6:	f107 0110 	add.w	r1, r7, #16
 800afea:	2300      	movs	r3, #0
 800afec:	683a      	ldr	r2, [r7, #0]
 800afee:	f7fe fd61 	bl	8009ab4 <xQueueGenericSendFromISR>
 800aff2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3728      	adds	r7, #40	; 0x28
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	20001738 	.word	0x20001738

0800b004 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b088      	sub	sp, #32
 800b008:	af02      	add	r7, sp, #8
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b00e:	4b22      	ldr	r3, [pc, #136]	; (800b098 <prvProcessExpiredTimer+0x94>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	3304      	adds	r3, #4
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7fe fb1d 	bl	800965c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b028:	f003 0304 	and.w	r3, r3, #4
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d022      	beq.n	800b076 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	699a      	ldr	r2, [r3, #24]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	18d1      	adds	r1, r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	6978      	ldr	r0, [r7, #20]
 800b03e:	f000 f8d1 	bl	800b1e4 <prvInsertTimerInActiveList>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d01f      	beq.n	800b088 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b048:	2300      	movs	r3, #0
 800b04a:	9300      	str	r3, [sp, #0]
 800b04c:	2300      	movs	r3, #0
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	2100      	movs	r1, #0
 800b052:	6978      	ldr	r0, [r7, #20]
 800b054:	f7ff ff88 	bl	800af68 <xTimerGenericCommand>
 800b058:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d113      	bne.n	800b088 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b064:	f383 8811 	msr	BASEPRI, r3
 800b068:	f3bf 8f6f 	isb	sy
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	60fb      	str	r3, [r7, #12]
}
 800b072:	bf00      	nop
 800b074:	e7fe      	b.n	800b074 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b07c:	f023 0301 	bic.w	r3, r3, #1
 800b080:	b2da      	uxtb	r2, r3
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	6a1b      	ldr	r3, [r3, #32]
 800b08c:	6978      	ldr	r0, [r7, #20]
 800b08e:	4798      	blx	r3
}
 800b090:	bf00      	nop
 800b092:	3718      	adds	r7, #24
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	20001730 	.word	0x20001730

0800b09c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b0a4:	f107 0308 	add.w	r3, r7, #8
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f000 f857 	bl	800b15c <prvGetNextExpireTime>
 800b0ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f000 f803 	bl	800b0c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b0ba:	f000 f8d5 	bl	800b268 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b0be:	e7f1      	b.n	800b0a4 <prvTimerTask+0x8>

0800b0c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b0ca:	f7ff fa39 	bl	800a540 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b0ce:	f107 0308 	add.w	r3, r7, #8
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 f866 	bl	800b1a4 <prvSampleTimeNow>
 800b0d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d130      	bne.n	800b142 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d10a      	bne.n	800b0fc <prvProcessTimerOrBlockTask+0x3c>
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d806      	bhi.n	800b0fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b0ee:	f7ff fa35 	bl	800a55c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b0f2:	68f9      	ldr	r1, [r7, #12]
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f7ff ff85 	bl	800b004 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b0fa:	e024      	b.n	800b146 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d008      	beq.n	800b114 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b102:	4b13      	ldr	r3, [pc, #76]	; (800b150 <prvProcessTimerOrBlockTask+0x90>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d101      	bne.n	800b110 <prvProcessTimerOrBlockTask+0x50>
 800b10c:	2301      	movs	r3, #1
 800b10e:	e000      	b.n	800b112 <prvProcessTimerOrBlockTask+0x52>
 800b110:	2300      	movs	r3, #0
 800b112:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b114:	4b0f      	ldr	r3, [pc, #60]	; (800b154 <prvProcessTimerOrBlockTask+0x94>)
 800b116:	6818      	ldr	r0, [r3, #0]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	1ad3      	subs	r3, r2, r3
 800b11e:	683a      	ldr	r2, [r7, #0]
 800b120:	4619      	mov	r1, r3
 800b122:	f7fe ff7d 	bl	800a020 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b126:	f7ff fa19 	bl	800a55c <xTaskResumeAll>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d10a      	bne.n	800b146 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b130:	4b09      	ldr	r3, [pc, #36]	; (800b158 <prvProcessTimerOrBlockTask+0x98>)
 800b132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b136:	601a      	str	r2, [r3, #0]
 800b138:	f3bf 8f4f 	dsb	sy
 800b13c:	f3bf 8f6f 	isb	sy
}
 800b140:	e001      	b.n	800b146 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b142:	f7ff fa0b 	bl	800a55c <xTaskResumeAll>
}
 800b146:	bf00      	nop
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	20001734 	.word	0x20001734
 800b154:	20001738 	.word	0x20001738
 800b158:	e000ed04 	.word	0xe000ed04

0800b15c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b164:	4b0e      	ldr	r3, [pc, #56]	; (800b1a0 <prvGetNextExpireTime+0x44>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d101      	bne.n	800b172 <prvGetNextExpireTime+0x16>
 800b16e:	2201      	movs	r2, #1
 800b170:	e000      	b.n	800b174 <prvGetNextExpireTime+0x18>
 800b172:	2200      	movs	r2, #0
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d105      	bne.n	800b18c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b180:	4b07      	ldr	r3, [pc, #28]	; (800b1a0 <prvGetNextExpireTime+0x44>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	60fb      	str	r3, [r7, #12]
 800b18a:	e001      	b.n	800b190 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b18c:	2300      	movs	r3, #0
 800b18e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b190:	68fb      	ldr	r3, [r7, #12]
}
 800b192:	4618      	mov	r0, r3
 800b194:	3714      	adds	r7, #20
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr
 800b19e:	bf00      	nop
 800b1a0:	20001730 	.word	0x20001730

0800b1a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b1ac:	f7ff fa74 	bl	800a698 <xTaskGetTickCount>
 800b1b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b1b2:	4b0b      	ldr	r3, [pc, #44]	; (800b1e0 <prvSampleTimeNow+0x3c>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	68fa      	ldr	r2, [r7, #12]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d205      	bcs.n	800b1c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b1bc:	f000 f936 	bl	800b42c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	601a      	str	r2, [r3, #0]
 800b1c6:	e002      	b.n	800b1ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b1ce:	4a04      	ldr	r2, [pc, #16]	; (800b1e0 <prvSampleTimeNow+0x3c>)
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	20001740 	.word	0x20001740

0800b1e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
 800b1f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	68ba      	ldr	r2, [r7, #8]
 800b1fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b202:	68ba      	ldr	r2, [r7, #8]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	429a      	cmp	r2, r3
 800b208:	d812      	bhi.n	800b230 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	1ad2      	subs	r2, r2, r3
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	699b      	ldr	r3, [r3, #24]
 800b214:	429a      	cmp	r2, r3
 800b216:	d302      	bcc.n	800b21e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b218:	2301      	movs	r3, #1
 800b21a:	617b      	str	r3, [r7, #20]
 800b21c:	e01b      	b.n	800b256 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b21e:	4b10      	ldr	r3, [pc, #64]	; (800b260 <prvInsertTimerInActiveList+0x7c>)
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	3304      	adds	r3, #4
 800b226:	4619      	mov	r1, r3
 800b228:	4610      	mov	r0, r2
 800b22a:	f7fe f9de 	bl	80095ea <vListInsert>
 800b22e:	e012      	b.n	800b256 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	429a      	cmp	r2, r3
 800b236:	d206      	bcs.n	800b246 <prvInsertTimerInActiveList+0x62>
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d302      	bcc.n	800b246 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b240:	2301      	movs	r3, #1
 800b242:	617b      	str	r3, [r7, #20]
 800b244:	e007      	b.n	800b256 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b246:	4b07      	ldr	r3, [pc, #28]	; (800b264 <prvInsertTimerInActiveList+0x80>)
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	3304      	adds	r3, #4
 800b24e:	4619      	mov	r1, r3
 800b250:	4610      	mov	r0, r2
 800b252:	f7fe f9ca 	bl	80095ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b256:	697b      	ldr	r3, [r7, #20]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3718      	adds	r7, #24
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	20001734 	.word	0x20001734
 800b264:	20001730 	.word	0x20001730

0800b268 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b08e      	sub	sp, #56	; 0x38
 800b26c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b26e:	e0ca      	b.n	800b406 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2b00      	cmp	r3, #0
 800b274:	da18      	bge.n	800b2a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b276:	1d3b      	adds	r3, r7, #4
 800b278:	3304      	adds	r3, #4
 800b27a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10a      	bne.n	800b298 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	61fb      	str	r3, [r7, #28]
}
 800b294:	bf00      	nop
 800b296:	e7fe      	b.n	800b296 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b29e:	6850      	ldr	r0, [r2, #4]
 800b2a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2a2:	6892      	ldr	r2, [r2, #8]
 800b2a4:	4611      	mov	r1, r2
 800b2a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f2c0 80aa 	blt.w	800b404 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b6:	695b      	ldr	r3, [r3, #20]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d004      	beq.n	800b2c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2be:	3304      	adds	r3, #4
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7fe f9cb 	bl	800965c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b2c6:	463b      	mov	r3, r7
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7ff ff6b 	bl	800b1a4 <prvSampleTimeNow>
 800b2ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2b09      	cmp	r3, #9
 800b2d4:	f200 8097 	bhi.w	800b406 <prvProcessReceivedCommands+0x19e>
 800b2d8:	a201      	add	r2, pc, #4	; (adr r2, 800b2e0 <prvProcessReceivedCommands+0x78>)
 800b2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2de:	bf00      	nop
 800b2e0:	0800b309 	.word	0x0800b309
 800b2e4:	0800b309 	.word	0x0800b309
 800b2e8:	0800b309 	.word	0x0800b309
 800b2ec:	0800b37d 	.word	0x0800b37d
 800b2f0:	0800b391 	.word	0x0800b391
 800b2f4:	0800b3db 	.word	0x0800b3db
 800b2f8:	0800b309 	.word	0x0800b309
 800b2fc:	0800b309 	.word	0x0800b309
 800b300:	0800b37d 	.word	0x0800b37d
 800b304:	0800b391 	.word	0x0800b391
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b30e:	f043 0301 	orr.w	r3, r3, #1
 800b312:	b2da      	uxtb	r2, r3
 800b314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b316:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31e:	699b      	ldr	r3, [r3, #24]
 800b320:	18d1      	adds	r1, r2, r3
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b328:	f7ff ff5c 	bl	800b1e4 <prvInsertTimerInActiveList>
 800b32c:	4603      	mov	r3, r0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d069      	beq.n	800b406 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b334:	6a1b      	ldr	r3, [r3, #32]
 800b336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b338:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b340:	f003 0304 	and.w	r3, r3, #4
 800b344:	2b00      	cmp	r3, #0
 800b346:	d05e      	beq.n	800b406 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b348:	68ba      	ldr	r2, [r7, #8]
 800b34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34c:	699b      	ldr	r3, [r3, #24]
 800b34e:	441a      	add	r2, r3
 800b350:	2300      	movs	r3, #0
 800b352:	9300      	str	r3, [sp, #0]
 800b354:	2300      	movs	r3, #0
 800b356:	2100      	movs	r1, #0
 800b358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b35a:	f7ff fe05 	bl	800af68 <xTimerGenericCommand>
 800b35e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b360:	6a3b      	ldr	r3, [r7, #32]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d14f      	bne.n	800b406 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36a:	f383 8811 	msr	BASEPRI, r3
 800b36e:	f3bf 8f6f 	isb	sy
 800b372:	f3bf 8f4f 	dsb	sy
 800b376:	61bb      	str	r3, [r7, #24]
}
 800b378:	bf00      	nop
 800b37a:	e7fe      	b.n	800b37a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b382:	f023 0301 	bic.w	r3, r3, #1
 800b386:	b2da      	uxtb	r2, r3
 800b388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b38e:	e03a      	b.n	800b406 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b392:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b396:	f043 0301 	orr.w	r3, r3, #1
 800b39a:	b2da      	uxtb	r2, r3
 800b39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b3a2:	68ba      	ldr	r2, [r7, #8]
 800b3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3aa:	699b      	ldr	r3, [r3, #24]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d10a      	bne.n	800b3c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b4:	f383 8811 	msr	BASEPRI, r3
 800b3b8:	f3bf 8f6f 	isb	sy
 800b3bc:	f3bf 8f4f 	dsb	sy
 800b3c0:	617b      	str	r3, [r7, #20]
}
 800b3c2:	bf00      	nop
 800b3c4:	e7fe      	b.n	800b3c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c8:	699a      	ldr	r2, [r3, #24]
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3cc:	18d1      	adds	r1, r2, r3
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3d4:	f7ff ff06 	bl	800b1e4 <prvInsertTimerInActiveList>
					break;
 800b3d8:	e015      	b.n	800b406 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3e0:	f003 0302 	and.w	r3, r3, #2
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d103      	bne.n	800b3f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b3e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3ea:	f000 fbe1 	bl	800bbb0 <vPortFree>
 800b3ee:	e00a      	b.n	800b406 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3f6:	f023 0301 	bic.w	r3, r3, #1
 800b3fa:	b2da      	uxtb	r2, r3
 800b3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b402:	e000      	b.n	800b406 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b404:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b406:	4b08      	ldr	r3, [pc, #32]	; (800b428 <prvProcessReceivedCommands+0x1c0>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	1d39      	adds	r1, r7, #4
 800b40c:	2200      	movs	r2, #0
 800b40e:	4618      	mov	r0, r3
 800b410:	f7fe fbec 	bl	8009bec <xQueueReceive>
 800b414:	4603      	mov	r3, r0
 800b416:	2b00      	cmp	r3, #0
 800b418:	f47f af2a 	bne.w	800b270 <prvProcessReceivedCommands+0x8>
	}
}
 800b41c:	bf00      	nop
 800b41e:	bf00      	nop
 800b420:	3730      	adds	r7, #48	; 0x30
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	20001738 	.word	0x20001738

0800b42c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b088      	sub	sp, #32
 800b430:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b432:	e048      	b.n	800b4c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b434:	4b2d      	ldr	r3, [pc, #180]	; (800b4ec <prvSwitchTimerLists+0xc0>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b43e:	4b2b      	ldr	r3, [pc, #172]	; (800b4ec <prvSwitchTimerLists+0xc0>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	68db      	ldr	r3, [r3, #12]
 800b446:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3304      	adds	r3, #4
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7fe f905 	bl	800965c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6a1b      	ldr	r3, [r3, #32]
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b460:	f003 0304 	and.w	r3, r3, #4
 800b464:	2b00      	cmp	r3, #0
 800b466:	d02e      	beq.n	800b4c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	699b      	ldr	r3, [r3, #24]
 800b46c:	693a      	ldr	r2, [r7, #16]
 800b46e:	4413      	add	r3, r2
 800b470:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b472:	68ba      	ldr	r2, [r7, #8]
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	429a      	cmp	r2, r3
 800b478:	d90e      	bls.n	800b498 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	68ba      	ldr	r2, [r7, #8]
 800b47e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b486:	4b19      	ldr	r3, [pc, #100]	; (800b4ec <prvSwitchTimerLists+0xc0>)
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	3304      	adds	r3, #4
 800b48e:	4619      	mov	r1, r3
 800b490:	4610      	mov	r0, r2
 800b492:	f7fe f8aa 	bl	80095ea <vListInsert>
 800b496:	e016      	b.n	800b4c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b498:	2300      	movs	r3, #0
 800b49a:	9300      	str	r3, [sp, #0]
 800b49c:	2300      	movs	r3, #0
 800b49e:	693a      	ldr	r2, [r7, #16]
 800b4a0:	2100      	movs	r1, #0
 800b4a2:	68f8      	ldr	r0, [r7, #12]
 800b4a4:	f7ff fd60 	bl	800af68 <xTimerGenericCommand>
 800b4a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d10a      	bne.n	800b4c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b4:	f383 8811 	msr	BASEPRI, r3
 800b4b8:	f3bf 8f6f 	isb	sy
 800b4bc:	f3bf 8f4f 	dsb	sy
 800b4c0:	603b      	str	r3, [r7, #0]
}
 800b4c2:	bf00      	nop
 800b4c4:	e7fe      	b.n	800b4c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b4c6:	4b09      	ldr	r3, [pc, #36]	; (800b4ec <prvSwitchTimerLists+0xc0>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1b1      	bne.n	800b434 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b4d0:	4b06      	ldr	r3, [pc, #24]	; (800b4ec <prvSwitchTimerLists+0xc0>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b4d6:	4b06      	ldr	r3, [pc, #24]	; (800b4f0 <prvSwitchTimerLists+0xc4>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a04      	ldr	r2, [pc, #16]	; (800b4ec <prvSwitchTimerLists+0xc0>)
 800b4dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b4de:	4a04      	ldr	r2, [pc, #16]	; (800b4f0 <prvSwitchTimerLists+0xc4>)
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	6013      	str	r3, [r2, #0]
}
 800b4e4:	bf00      	nop
 800b4e6:	3718      	adds	r7, #24
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	20001730 	.word	0x20001730
 800b4f0:	20001734 	.word	0x20001734

0800b4f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b4fa:	f000 f96b 	bl	800b7d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b4fe:	4b15      	ldr	r3, [pc, #84]	; (800b554 <prvCheckForValidListAndQueue+0x60>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d120      	bne.n	800b548 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b506:	4814      	ldr	r0, [pc, #80]	; (800b558 <prvCheckForValidListAndQueue+0x64>)
 800b508:	f7fe f81e 	bl	8009548 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b50c:	4813      	ldr	r0, [pc, #76]	; (800b55c <prvCheckForValidListAndQueue+0x68>)
 800b50e:	f7fe f81b 	bl	8009548 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b512:	4b13      	ldr	r3, [pc, #76]	; (800b560 <prvCheckForValidListAndQueue+0x6c>)
 800b514:	4a10      	ldr	r2, [pc, #64]	; (800b558 <prvCheckForValidListAndQueue+0x64>)
 800b516:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b518:	4b12      	ldr	r3, [pc, #72]	; (800b564 <prvCheckForValidListAndQueue+0x70>)
 800b51a:	4a10      	ldr	r2, [pc, #64]	; (800b55c <prvCheckForValidListAndQueue+0x68>)
 800b51c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b51e:	2300      	movs	r3, #0
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	4b11      	ldr	r3, [pc, #68]	; (800b568 <prvCheckForValidListAndQueue+0x74>)
 800b524:	4a11      	ldr	r2, [pc, #68]	; (800b56c <prvCheckForValidListAndQueue+0x78>)
 800b526:	2110      	movs	r1, #16
 800b528:	200a      	movs	r0, #10
 800b52a:	f7fe f929 	bl	8009780 <xQueueGenericCreateStatic>
 800b52e:	4603      	mov	r3, r0
 800b530:	4a08      	ldr	r2, [pc, #32]	; (800b554 <prvCheckForValidListAndQueue+0x60>)
 800b532:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b534:	4b07      	ldr	r3, [pc, #28]	; (800b554 <prvCheckForValidListAndQueue+0x60>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d005      	beq.n	800b548 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b53c:	4b05      	ldr	r3, [pc, #20]	; (800b554 <prvCheckForValidListAndQueue+0x60>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	490b      	ldr	r1, [pc, #44]	; (800b570 <prvCheckForValidListAndQueue+0x7c>)
 800b542:	4618      	mov	r0, r3
 800b544:	f7fe fd42 	bl	8009fcc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b548:	f000 f974 	bl	800b834 <vPortExitCritical>
}
 800b54c:	bf00      	nop
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	20001738 	.word	0x20001738
 800b558:	20001708 	.word	0x20001708
 800b55c:	2000171c 	.word	0x2000171c
 800b560:	20001730 	.word	0x20001730
 800b564:	20001734 	.word	0x20001734
 800b568:	200017e4 	.word	0x200017e4
 800b56c:	20001744 	.word	0x20001744
 800b570:	0800d198 	.word	0x0800d198

0800b574 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b574:	b480      	push	{r7}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	3b04      	subs	r3, #4
 800b584:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b58c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	3b04      	subs	r3, #4
 800b592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	f023 0201 	bic.w	r2, r3, #1
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	3b04      	subs	r3, #4
 800b5a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b5a4:	4a0c      	ldr	r2, [pc, #48]	; (800b5d8 <pxPortInitialiseStack+0x64>)
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	3b14      	subs	r3, #20
 800b5ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	3b04      	subs	r3, #4
 800b5ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f06f 0202 	mvn.w	r2, #2
 800b5c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	3b20      	subs	r3, #32
 800b5c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3714      	adds	r7, #20
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr
 800b5d8:	0800b5dd 	.word	0x0800b5dd

0800b5dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b5e6:	4b12      	ldr	r3, [pc, #72]	; (800b630 <prvTaskExitError+0x54>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ee:	d00a      	beq.n	800b606 <prvTaskExitError+0x2a>
	__asm volatile
 800b5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	60fb      	str	r3, [r7, #12]
}
 800b602:	bf00      	nop
 800b604:	e7fe      	b.n	800b604 <prvTaskExitError+0x28>
	__asm volatile
 800b606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60a:	f383 8811 	msr	BASEPRI, r3
 800b60e:	f3bf 8f6f 	isb	sy
 800b612:	f3bf 8f4f 	dsb	sy
 800b616:	60bb      	str	r3, [r7, #8]
}
 800b618:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b61a:	bf00      	nop
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d0fc      	beq.n	800b61c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b622:	bf00      	nop
 800b624:	bf00      	nop
 800b626:	3714      	adds	r7, #20
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr
 800b630:	200000bc 	.word	0x200000bc
	...

0800b640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b640:	4b07      	ldr	r3, [pc, #28]	; (800b660 <pxCurrentTCBConst2>)
 800b642:	6819      	ldr	r1, [r3, #0]
 800b644:	6808      	ldr	r0, [r1, #0]
 800b646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b64a:	f380 8809 	msr	PSP, r0
 800b64e:	f3bf 8f6f 	isb	sy
 800b652:	f04f 0000 	mov.w	r0, #0
 800b656:	f380 8811 	msr	BASEPRI, r0
 800b65a:	4770      	bx	lr
 800b65c:	f3af 8000 	nop.w

0800b660 <pxCurrentTCBConst2>:
 800b660:	20001208 	.word	0x20001208
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b664:	bf00      	nop
 800b666:	bf00      	nop

0800b668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b668:	4808      	ldr	r0, [pc, #32]	; (800b68c <prvPortStartFirstTask+0x24>)
 800b66a:	6800      	ldr	r0, [r0, #0]
 800b66c:	6800      	ldr	r0, [r0, #0]
 800b66e:	f380 8808 	msr	MSP, r0
 800b672:	f04f 0000 	mov.w	r0, #0
 800b676:	f380 8814 	msr	CONTROL, r0
 800b67a:	b662      	cpsie	i
 800b67c:	b661      	cpsie	f
 800b67e:	f3bf 8f4f 	dsb	sy
 800b682:	f3bf 8f6f 	isb	sy
 800b686:	df00      	svc	0
 800b688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b68a:	bf00      	nop
 800b68c:	e000ed08 	.word	0xe000ed08

0800b690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b086      	sub	sp, #24
 800b694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b696:	4b46      	ldr	r3, [pc, #280]	; (800b7b0 <xPortStartScheduler+0x120>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a46      	ldr	r2, [pc, #280]	; (800b7b4 <xPortStartScheduler+0x124>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d10a      	bne.n	800b6b6 <xPortStartScheduler+0x26>
	__asm volatile
 800b6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a4:	f383 8811 	msr	BASEPRI, r3
 800b6a8:	f3bf 8f6f 	isb	sy
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	613b      	str	r3, [r7, #16]
}
 800b6b2:	bf00      	nop
 800b6b4:	e7fe      	b.n	800b6b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b6b6:	4b3e      	ldr	r3, [pc, #248]	; (800b7b0 <xPortStartScheduler+0x120>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4a3f      	ldr	r2, [pc, #252]	; (800b7b8 <xPortStartScheduler+0x128>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d10a      	bne.n	800b6d6 <xPortStartScheduler+0x46>
	__asm volatile
 800b6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c4:	f383 8811 	msr	BASEPRI, r3
 800b6c8:	f3bf 8f6f 	isb	sy
 800b6cc:	f3bf 8f4f 	dsb	sy
 800b6d0:	60fb      	str	r3, [r7, #12]
}
 800b6d2:	bf00      	nop
 800b6d4:	e7fe      	b.n	800b6d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b6d6:	4b39      	ldr	r3, [pc, #228]	; (800b7bc <xPortStartScheduler+0x12c>)
 800b6d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	22ff      	movs	r2, #255	; 0xff
 800b6e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b6f0:	78fb      	ldrb	r3, [r7, #3]
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b6f8:	b2da      	uxtb	r2, r3
 800b6fa:	4b31      	ldr	r3, [pc, #196]	; (800b7c0 <xPortStartScheduler+0x130>)
 800b6fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b6fe:	4b31      	ldr	r3, [pc, #196]	; (800b7c4 <xPortStartScheduler+0x134>)
 800b700:	2207      	movs	r2, #7
 800b702:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b704:	e009      	b.n	800b71a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b706:	4b2f      	ldr	r3, [pc, #188]	; (800b7c4 <xPortStartScheduler+0x134>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	3b01      	subs	r3, #1
 800b70c:	4a2d      	ldr	r2, [pc, #180]	; (800b7c4 <xPortStartScheduler+0x134>)
 800b70e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b710:	78fb      	ldrb	r3, [r7, #3]
 800b712:	b2db      	uxtb	r3, r3
 800b714:	005b      	lsls	r3, r3, #1
 800b716:	b2db      	uxtb	r3, r3
 800b718:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b71a:	78fb      	ldrb	r3, [r7, #3]
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b722:	2b80      	cmp	r3, #128	; 0x80
 800b724:	d0ef      	beq.n	800b706 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b726:	4b27      	ldr	r3, [pc, #156]	; (800b7c4 <xPortStartScheduler+0x134>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f1c3 0307 	rsb	r3, r3, #7
 800b72e:	2b04      	cmp	r3, #4
 800b730:	d00a      	beq.n	800b748 <xPortStartScheduler+0xb8>
	__asm volatile
 800b732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b736:	f383 8811 	msr	BASEPRI, r3
 800b73a:	f3bf 8f6f 	isb	sy
 800b73e:	f3bf 8f4f 	dsb	sy
 800b742:	60bb      	str	r3, [r7, #8]
}
 800b744:	bf00      	nop
 800b746:	e7fe      	b.n	800b746 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b748:	4b1e      	ldr	r3, [pc, #120]	; (800b7c4 <xPortStartScheduler+0x134>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	021b      	lsls	r3, r3, #8
 800b74e:	4a1d      	ldr	r2, [pc, #116]	; (800b7c4 <xPortStartScheduler+0x134>)
 800b750:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b752:	4b1c      	ldr	r3, [pc, #112]	; (800b7c4 <xPortStartScheduler+0x134>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b75a:	4a1a      	ldr	r2, [pc, #104]	; (800b7c4 <xPortStartScheduler+0x134>)
 800b75c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	b2da      	uxtb	r2, r3
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b766:	4b18      	ldr	r3, [pc, #96]	; (800b7c8 <xPortStartScheduler+0x138>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a17      	ldr	r2, [pc, #92]	; (800b7c8 <xPortStartScheduler+0x138>)
 800b76c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b770:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b772:	4b15      	ldr	r3, [pc, #84]	; (800b7c8 <xPortStartScheduler+0x138>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a14      	ldr	r2, [pc, #80]	; (800b7c8 <xPortStartScheduler+0x138>)
 800b778:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b77c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b77e:	f000 f8dd 	bl	800b93c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b782:	4b12      	ldr	r3, [pc, #72]	; (800b7cc <xPortStartScheduler+0x13c>)
 800b784:	2200      	movs	r2, #0
 800b786:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b788:	f000 f8fc 	bl	800b984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b78c:	4b10      	ldr	r3, [pc, #64]	; (800b7d0 <xPortStartScheduler+0x140>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a0f      	ldr	r2, [pc, #60]	; (800b7d0 <xPortStartScheduler+0x140>)
 800b792:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b796:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b798:	f7ff ff66 	bl	800b668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b79c:	f7ff f846 	bl	800a82c <vTaskSwitchContext>
	prvTaskExitError();
 800b7a0:	f7ff ff1c 	bl	800b5dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b7a4:	2300      	movs	r3, #0
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3718      	adds	r7, #24
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	e000ed00 	.word	0xe000ed00
 800b7b4:	410fc271 	.word	0x410fc271
 800b7b8:	410fc270 	.word	0x410fc270
 800b7bc:	e000e400 	.word	0xe000e400
 800b7c0:	20001834 	.word	0x20001834
 800b7c4:	20001838 	.word	0x20001838
 800b7c8:	e000ed20 	.word	0xe000ed20
 800b7cc:	200000bc 	.word	0x200000bc
 800b7d0:	e000ef34 	.word	0xe000ef34

0800b7d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
	__asm volatile
 800b7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7de:	f383 8811 	msr	BASEPRI, r3
 800b7e2:	f3bf 8f6f 	isb	sy
 800b7e6:	f3bf 8f4f 	dsb	sy
 800b7ea:	607b      	str	r3, [r7, #4]
}
 800b7ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b7ee:	4b0f      	ldr	r3, [pc, #60]	; (800b82c <vPortEnterCritical+0x58>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	4a0d      	ldr	r2, [pc, #52]	; (800b82c <vPortEnterCritical+0x58>)
 800b7f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b7f8:	4b0c      	ldr	r3, [pc, #48]	; (800b82c <vPortEnterCritical+0x58>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d10f      	bne.n	800b820 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b800:	4b0b      	ldr	r3, [pc, #44]	; (800b830 <vPortEnterCritical+0x5c>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	b2db      	uxtb	r3, r3
 800b806:	2b00      	cmp	r3, #0
 800b808:	d00a      	beq.n	800b820 <vPortEnterCritical+0x4c>
	__asm volatile
 800b80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80e:	f383 8811 	msr	BASEPRI, r3
 800b812:	f3bf 8f6f 	isb	sy
 800b816:	f3bf 8f4f 	dsb	sy
 800b81a:	603b      	str	r3, [r7, #0]
}
 800b81c:	bf00      	nop
 800b81e:	e7fe      	b.n	800b81e <vPortEnterCritical+0x4a>
	}
}
 800b820:	bf00      	nop
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr
 800b82c:	200000bc 	.word	0x200000bc
 800b830:	e000ed04 	.word	0xe000ed04

0800b834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b83a:	4b12      	ldr	r3, [pc, #72]	; (800b884 <vPortExitCritical+0x50>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d10a      	bne.n	800b858 <vPortExitCritical+0x24>
	__asm volatile
 800b842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b846:	f383 8811 	msr	BASEPRI, r3
 800b84a:	f3bf 8f6f 	isb	sy
 800b84e:	f3bf 8f4f 	dsb	sy
 800b852:	607b      	str	r3, [r7, #4]
}
 800b854:	bf00      	nop
 800b856:	e7fe      	b.n	800b856 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b858:	4b0a      	ldr	r3, [pc, #40]	; (800b884 <vPortExitCritical+0x50>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	3b01      	subs	r3, #1
 800b85e:	4a09      	ldr	r2, [pc, #36]	; (800b884 <vPortExitCritical+0x50>)
 800b860:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b862:	4b08      	ldr	r3, [pc, #32]	; (800b884 <vPortExitCritical+0x50>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d105      	bne.n	800b876 <vPortExitCritical+0x42>
 800b86a:	2300      	movs	r3, #0
 800b86c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	f383 8811 	msr	BASEPRI, r3
}
 800b874:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b876:	bf00      	nop
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	200000bc 	.word	0x200000bc
	...

0800b890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b890:	f3ef 8009 	mrs	r0, PSP
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	4b15      	ldr	r3, [pc, #84]	; (800b8f0 <pxCurrentTCBConst>)
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	f01e 0f10 	tst.w	lr, #16
 800b8a0:	bf08      	it	eq
 800b8a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b8a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8aa:	6010      	str	r0, [r2, #0]
 800b8ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b8b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b8b4:	f380 8811 	msr	BASEPRI, r0
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	f7fe ffb4 	bl	800a82c <vTaskSwitchContext>
 800b8c4:	f04f 0000 	mov.w	r0, #0
 800b8c8:	f380 8811 	msr	BASEPRI, r0
 800b8cc:	bc09      	pop	{r0, r3}
 800b8ce:	6819      	ldr	r1, [r3, #0]
 800b8d0:	6808      	ldr	r0, [r1, #0]
 800b8d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d6:	f01e 0f10 	tst.w	lr, #16
 800b8da:	bf08      	it	eq
 800b8dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b8e0:	f380 8809 	msr	PSP, r0
 800b8e4:	f3bf 8f6f 	isb	sy
 800b8e8:	4770      	bx	lr
 800b8ea:	bf00      	nop
 800b8ec:	f3af 8000 	nop.w

0800b8f0 <pxCurrentTCBConst>:
 800b8f0:	20001208 	.word	0x20001208
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b8f4:	bf00      	nop
 800b8f6:	bf00      	nop

0800b8f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
	__asm volatile
 800b8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b902:	f383 8811 	msr	BASEPRI, r3
 800b906:	f3bf 8f6f 	isb	sy
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	607b      	str	r3, [r7, #4]
}
 800b910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b912:	f7fe fed1 	bl	800a6b8 <xTaskIncrementTick>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d003      	beq.n	800b924 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b91c:	4b06      	ldr	r3, [pc, #24]	; (800b938 <xPortSysTickHandler+0x40>)
 800b91e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b922:	601a      	str	r2, [r3, #0]
 800b924:	2300      	movs	r3, #0
 800b926:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	f383 8811 	msr	BASEPRI, r3
}
 800b92e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b930:	bf00      	nop
 800b932:	3708      	adds	r7, #8
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	e000ed04 	.word	0xe000ed04

0800b93c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b93c:	b480      	push	{r7}
 800b93e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b940:	4b0b      	ldr	r3, [pc, #44]	; (800b970 <vPortSetupTimerInterrupt+0x34>)
 800b942:	2200      	movs	r2, #0
 800b944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b946:	4b0b      	ldr	r3, [pc, #44]	; (800b974 <vPortSetupTimerInterrupt+0x38>)
 800b948:	2200      	movs	r2, #0
 800b94a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b94c:	4b0a      	ldr	r3, [pc, #40]	; (800b978 <vPortSetupTimerInterrupt+0x3c>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a0a      	ldr	r2, [pc, #40]	; (800b97c <vPortSetupTimerInterrupt+0x40>)
 800b952:	fba2 2303 	umull	r2, r3, r2, r3
 800b956:	099b      	lsrs	r3, r3, #6
 800b958:	4a09      	ldr	r2, [pc, #36]	; (800b980 <vPortSetupTimerInterrupt+0x44>)
 800b95a:	3b01      	subs	r3, #1
 800b95c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b95e:	4b04      	ldr	r3, [pc, #16]	; (800b970 <vPortSetupTimerInterrupt+0x34>)
 800b960:	2207      	movs	r2, #7
 800b962:	601a      	str	r2, [r3, #0]
}
 800b964:	bf00      	nop
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	e000e010 	.word	0xe000e010
 800b974:	e000e018 	.word	0xe000e018
 800b978:	200000b0 	.word	0x200000b0
 800b97c:	10624dd3 	.word	0x10624dd3
 800b980:	e000e014 	.word	0xe000e014

0800b984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b984:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b994 <vPortEnableVFP+0x10>
 800b988:	6801      	ldr	r1, [r0, #0]
 800b98a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b98e:	6001      	str	r1, [r0, #0]
 800b990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b992:	bf00      	nop
 800b994:	e000ed88 	.word	0xe000ed88

0800b998 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b998:	b480      	push	{r7}
 800b99a:	b085      	sub	sp, #20
 800b99c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b99e:	f3ef 8305 	mrs	r3, IPSR
 800b9a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2b0f      	cmp	r3, #15
 800b9a8:	d914      	bls.n	800b9d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b9aa:	4a17      	ldr	r2, [pc, #92]	; (800ba08 <vPortValidateInterruptPriority+0x70>)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b9b4:	4b15      	ldr	r3, [pc, #84]	; (800ba0c <vPortValidateInterruptPriority+0x74>)
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	7afa      	ldrb	r2, [r7, #11]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d20a      	bcs.n	800b9d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	607b      	str	r3, [r7, #4]
}
 800b9d0:	bf00      	nop
 800b9d2:	e7fe      	b.n	800b9d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b9d4:	4b0e      	ldr	r3, [pc, #56]	; (800ba10 <vPortValidateInterruptPriority+0x78>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b9dc:	4b0d      	ldr	r3, [pc, #52]	; (800ba14 <vPortValidateInterruptPriority+0x7c>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d90a      	bls.n	800b9fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e8:	f383 8811 	msr	BASEPRI, r3
 800b9ec:	f3bf 8f6f 	isb	sy
 800b9f0:	f3bf 8f4f 	dsb	sy
 800b9f4:	603b      	str	r3, [r7, #0]
}
 800b9f6:	bf00      	nop
 800b9f8:	e7fe      	b.n	800b9f8 <vPortValidateInterruptPriority+0x60>
	}
 800b9fa:	bf00      	nop
 800b9fc:	3714      	adds	r7, #20
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr
 800ba06:	bf00      	nop
 800ba08:	e000e3f0 	.word	0xe000e3f0
 800ba0c:	20001834 	.word	0x20001834
 800ba10:	e000ed0c 	.word	0xe000ed0c
 800ba14:	20001838 	.word	0x20001838

0800ba18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b08a      	sub	sp, #40	; 0x28
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ba20:	2300      	movs	r3, #0
 800ba22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ba24:	f7fe fd8c 	bl	800a540 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ba28:	4b5b      	ldr	r3, [pc, #364]	; (800bb98 <pvPortMalloc+0x180>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d101      	bne.n	800ba34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ba30:	f000 f920 	bl	800bc74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ba34:	4b59      	ldr	r3, [pc, #356]	; (800bb9c <pvPortMalloc+0x184>)
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	4013      	ands	r3, r2
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f040 8093 	bne.w	800bb68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d01d      	beq.n	800ba84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ba48:	2208      	movs	r2, #8
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f003 0307 	and.w	r3, r3, #7
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d014      	beq.n	800ba84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f023 0307 	bic.w	r3, r3, #7
 800ba60:	3308      	adds	r3, #8
 800ba62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f003 0307 	and.w	r3, r3, #7
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00a      	beq.n	800ba84 <pvPortMalloc+0x6c>
	__asm volatile
 800ba6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba72:	f383 8811 	msr	BASEPRI, r3
 800ba76:	f3bf 8f6f 	isb	sy
 800ba7a:	f3bf 8f4f 	dsb	sy
 800ba7e:	617b      	str	r3, [r7, #20]
}
 800ba80:	bf00      	nop
 800ba82:	e7fe      	b.n	800ba82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d06e      	beq.n	800bb68 <pvPortMalloc+0x150>
 800ba8a:	4b45      	ldr	r3, [pc, #276]	; (800bba0 <pvPortMalloc+0x188>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d869      	bhi.n	800bb68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ba94:	4b43      	ldr	r3, [pc, #268]	; (800bba4 <pvPortMalloc+0x18c>)
 800ba96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ba98:	4b42      	ldr	r3, [pc, #264]	; (800bba4 <pvPortMalloc+0x18c>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba9e:	e004      	b.n	800baaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800baa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800baa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d903      	bls.n	800babc <pvPortMalloc+0xa4>
 800bab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d1f1      	bne.n	800baa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800babc:	4b36      	ldr	r3, [pc, #216]	; (800bb98 <pvPortMalloc+0x180>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d050      	beq.n	800bb68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bac6:	6a3b      	ldr	r3, [r7, #32]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2208      	movs	r2, #8
 800bacc:	4413      	add	r3, r2
 800bace:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	6a3b      	ldr	r3, [r7, #32]
 800bad6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bada:	685a      	ldr	r2, [r3, #4]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	1ad2      	subs	r2, r2, r3
 800bae0:	2308      	movs	r3, #8
 800bae2:	005b      	lsls	r3, r3, #1
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d91f      	bls.n	800bb28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4413      	add	r3, r2
 800baee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800baf0:	69bb      	ldr	r3, [r7, #24]
 800baf2:	f003 0307 	and.w	r3, r3, #7
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00a      	beq.n	800bb10 <pvPortMalloc+0xf8>
	__asm volatile
 800bafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafe:	f383 8811 	msr	BASEPRI, r3
 800bb02:	f3bf 8f6f 	isb	sy
 800bb06:	f3bf 8f4f 	dsb	sy
 800bb0a:	613b      	str	r3, [r7, #16]
}
 800bb0c:	bf00      	nop
 800bb0e:	e7fe      	b.n	800bb0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb12:	685a      	ldr	r2, [r3, #4]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	1ad2      	subs	r2, r2, r3
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bb22:	69b8      	ldr	r0, [r7, #24]
 800bb24:	f000 f908 	bl	800bd38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bb28:	4b1d      	ldr	r3, [pc, #116]	; (800bba0 <pvPortMalloc+0x188>)
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	1ad3      	subs	r3, r2, r3
 800bb32:	4a1b      	ldr	r2, [pc, #108]	; (800bba0 <pvPortMalloc+0x188>)
 800bb34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bb36:	4b1a      	ldr	r3, [pc, #104]	; (800bba0 <pvPortMalloc+0x188>)
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	4b1b      	ldr	r3, [pc, #108]	; (800bba8 <pvPortMalloc+0x190>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d203      	bcs.n	800bb4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bb42:	4b17      	ldr	r3, [pc, #92]	; (800bba0 <pvPortMalloc+0x188>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a18      	ldr	r2, [pc, #96]	; (800bba8 <pvPortMalloc+0x190>)
 800bb48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4c:	685a      	ldr	r2, [r3, #4]
 800bb4e:	4b13      	ldr	r3, [pc, #76]	; (800bb9c <pvPortMalloc+0x184>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	431a      	orrs	r2, r3
 800bb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bb5e:	4b13      	ldr	r3, [pc, #76]	; (800bbac <pvPortMalloc+0x194>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	3301      	adds	r3, #1
 800bb64:	4a11      	ldr	r2, [pc, #68]	; (800bbac <pvPortMalloc+0x194>)
 800bb66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bb68:	f7fe fcf8 	bl	800a55c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb6c:	69fb      	ldr	r3, [r7, #28]
 800bb6e:	f003 0307 	and.w	r3, r3, #7
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d00a      	beq.n	800bb8c <pvPortMalloc+0x174>
	__asm volatile
 800bb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	60fb      	str	r3, [r7, #12]
}
 800bb88:	bf00      	nop
 800bb8a:	e7fe      	b.n	800bb8a <pvPortMalloc+0x172>
	return pvReturn;
 800bb8c:	69fb      	ldr	r3, [r7, #28]
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3728      	adds	r7, #40	; 0x28
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	20005444 	.word	0x20005444
 800bb9c:	20005458 	.word	0x20005458
 800bba0:	20005448 	.word	0x20005448
 800bba4:	2000543c 	.word	0x2000543c
 800bba8:	2000544c 	.word	0x2000544c
 800bbac:	20005450 	.word	0x20005450

0800bbb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d04d      	beq.n	800bc5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bbc2:	2308      	movs	r3, #8
 800bbc4:	425b      	negs	r3, r3
 800bbc6:	697a      	ldr	r2, [r7, #20]
 800bbc8:	4413      	add	r3, r2
 800bbca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	685a      	ldr	r2, [r3, #4]
 800bbd4:	4b24      	ldr	r3, [pc, #144]	; (800bc68 <vPortFree+0xb8>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4013      	ands	r3, r2
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d10a      	bne.n	800bbf4 <vPortFree+0x44>
	__asm volatile
 800bbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe2:	f383 8811 	msr	BASEPRI, r3
 800bbe6:	f3bf 8f6f 	isb	sy
 800bbea:	f3bf 8f4f 	dsb	sy
 800bbee:	60fb      	str	r3, [r7, #12]
}
 800bbf0:	bf00      	nop
 800bbf2:	e7fe      	b.n	800bbf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00a      	beq.n	800bc12 <vPortFree+0x62>
	__asm volatile
 800bbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	60bb      	str	r3, [r7, #8]
}
 800bc0e:	bf00      	nop
 800bc10:	e7fe      	b.n	800bc10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	685a      	ldr	r2, [r3, #4]
 800bc16:	4b14      	ldr	r3, [pc, #80]	; (800bc68 <vPortFree+0xb8>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4013      	ands	r3, r2
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d01e      	beq.n	800bc5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d11a      	bne.n	800bc5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	685a      	ldr	r2, [r3, #4]
 800bc2c:	4b0e      	ldr	r3, [pc, #56]	; (800bc68 <vPortFree+0xb8>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	43db      	mvns	r3, r3
 800bc32:	401a      	ands	r2, r3
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bc38:	f7fe fc82 	bl	800a540 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	685a      	ldr	r2, [r3, #4]
 800bc40:	4b0a      	ldr	r3, [pc, #40]	; (800bc6c <vPortFree+0xbc>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4413      	add	r3, r2
 800bc46:	4a09      	ldr	r2, [pc, #36]	; (800bc6c <vPortFree+0xbc>)
 800bc48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bc4a:	6938      	ldr	r0, [r7, #16]
 800bc4c:	f000 f874 	bl	800bd38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bc50:	4b07      	ldr	r3, [pc, #28]	; (800bc70 <vPortFree+0xc0>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	3301      	adds	r3, #1
 800bc56:	4a06      	ldr	r2, [pc, #24]	; (800bc70 <vPortFree+0xc0>)
 800bc58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bc5a:	f7fe fc7f 	bl	800a55c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bc5e:	bf00      	nop
 800bc60:	3718      	adds	r7, #24
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	20005458 	.word	0x20005458
 800bc6c:	20005448 	.word	0x20005448
 800bc70:	20005454 	.word	0x20005454

0800bc74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bc74:	b480      	push	{r7}
 800bc76:	b085      	sub	sp, #20
 800bc78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bc7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bc7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bc80:	4b27      	ldr	r3, [pc, #156]	; (800bd20 <prvHeapInit+0xac>)
 800bc82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f003 0307 	and.w	r3, r3, #7
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d00c      	beq.n	800bca8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	3307      	adds	r3, #7
 800bc92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f023 0307 	bic.w	r3, r3, #7
 800bc9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bc9c:	68ba      	ldr	r2, [r7, #8]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	1ad3      	subs	r3, r2, r3
 800bca2:	4a1f      	ldr	r2, [pc, #124]	; (800bd20 <prvHeapInit+0xac>)
 800bca4:	4413      	add	r3, r2
 800bca6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bcac:	4a1d      	ldr	r2, [pc, #116]	; (800bd24 <prvHeapInit+0xb0>)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bcb2:	4b1c      	ldr	r3, [pc, #112]	; (800bd24 <prvHeapInit+0xb0>)
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	68ba      	ldr	r2, [r7, #8]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bcc0:	2208      	movs	r2, #8
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	1a9b      	subs	r3, r3, r2
 800bcc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f023 0307 	bic.w	r3, r3, #7
 800bcce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	4a15      	ldr	r2, [pc, #84]	; (800bd28 <prvHeapInit+0xb4>)
 800bcd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bcd6:	4b14      	ldr	r3, [pc, #80]	; (800bd28 <prvHeapInit+0xb4>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bcde:	4b12      	ldr	r3, [pc, #72]	; (800bd28 <prvHeapInit+0xb4>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	2200      	movs	r2, #0
 800bce4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	68fa      	ldr	r2, [r7, #12]
 800bcee:	1ad2      	subs	r2, r2, r3
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bcf4:	4b0c      	ldr	r3, [pc, #48]	; (800bd28 <prvHeapInit+0xb4>)
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	4a0a      	ldr	r2, [pc, #40]	; (800bd2c <prvHeapInit+0xb8>)
 800bd02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	4a09      	ldr	r2, [pc, #36]	; (800bd30 <prvHeapInit+0xbc>)
 800bd0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd0c:	4b09      	ldr	r3, [pc, #36]	; (800bd34 <prvHeapInit+0xc0>)
 800bd0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bd12:	601a      	str	r2, [r3, #0]
}
 800bd14:	bf00      	nop
 800bd16:	3714      	adds	r7, #20
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr
 800bd20:	2000183c 	.word	0x2000183c
 800bd24:	2000543c 	.word	0x2000543c
 800bd28:	20005444 	.word	0x20005444
 800bd2c:	2000544c 	.word	0x2000544c
 800bd30:	20005448 	.word	0x20005448
 800bd34:	20005458 	.word	0x20005458

0800bd38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b085      	sub	sp, #20
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bd40:	4b28      	ldr	r3, [pc, #160]	; (800bde4 <prvInsertBlockIntoFreeList+0xac>)
 800bd42:	60fb      	str	r3, [r7, #12]
 800bd44:	e002      	b.n	800bd4c <prvInsertBlockIntoFreeList+0x14>
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	60fb      	str	r3, [r7, #12]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d8f7      	bhi.n	800bd46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	68ba      	ldr	r2, [r7, #8]
 800bd60:	4413      	add	r3, r2
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d108      	bne.n	800bd7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	685a      	ldr	r2, [r3, #4]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	441a      	add	r2, r3
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	441a      	add	r2, r3
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d118      	bne.n	800bdc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	4b15      	ldr	r3, [pc, #84]	; (800bde8 <prvInsertBlockIntoFreeList+0xb0>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d00d      	beq.n	800bdb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	685a      	ldr	r2, [r3, #4]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	441a      	add	r2, r3
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	601a      	str	r2, [r3, #0]
 800bdb4:	e008      	b.n	800bdc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bdb6:	4b0c      	ldr	r3, [pc, #48]	; (800bde8 <prvInsertBlockIntoFreeList+0xb0>)
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	601a      	str	r2, [r3, #0]
 800bdbe:	e003      	b.n	800bdc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681a      	ldr	r2, [r3, #0]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d002      	beq.n	800bdd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bdd6:	bf00      	nop
 800bdd8:	3714      	adds	r7, #20
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	2000543c 	.word	0x2000543c
 800bde8:	20005444 	.word	0x20005444

0800bdec <__errno>:
 800bdec:	4b01      	ldr	r3, [pc, #4]	; (800bdf4 <__errno+0x8>)
 800bdee:	6818      	ldr	r0, [r3, #0]
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	200000c0 	.word	0x200000c0

0800bdf8 <__libc_init_array>:
 800bdf8:	b570      	push	{r4, r5, r6, lr}
 800bdfa:	4d0d      	ldr	r5, [pc, #52]	; (800be30 <__libc_init_array+0x38>)
 800bdfc:	4c0d      	ldr	r4, [pc, #52]	; (800be34 <__libc_init_array+0x3c>)
 800bdfe:	1b64      	subs	r4, r4, r5
 800be00:	10a4      	asrs	r4, r4, #2
 800be02:	2600      	movs	r6, #0
 800be04:	42a6      	cmp	r6, r4
 800be06:	d109      	bne.n	800be1c <__libc_init_array+0x24>
 800be08:	4d0b      	ldr	r5, [pc, #44]	; (800be38 <__libc_init_array+0x40>)
 800be0a:	4c0c      	ldr	r4, [pc, #48]	; (800be3c <__libc_init_array+0x44>)
 800be0c:	f001 f9aa 	bl	800d164 <_init>
 800be10:	1b64      	subs	r4, r4, r5
 800be12:	10a4      	asrs	r4, r4, #2
 800be14:	2600      	movs	r6, #0
 800be16:	42a6      	cmp	r6, r4
 800be18:	d105      	bne.n	800be26 <__libc_init_array+0x2e>
 800be1a:	bd70      	pop	{r4, r5, r6, pc}
 800be1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800be20:	4798      	blx	r3
 800be22:	3601      	adds	r6, #1
 800be24:	e7ee      	b.n	800be04 <__libc_init_array+0xc>
 800be26:	f855 3b04 	ldr.w	r3, [r5], #4
 800be2a:	4798      	blx	r3
 800be2c:	3601      	adds	r6, #1
 800be2e:	e7f2      	b.n	800be16 <__libc_init_array+0x1e>
 800be30:	0800d9cc 	.word	0x0800d9cc
 800be34:	0800d9cc 	.word	0x0800d9cc
 800be38:	0800d9cc 	.word	0x0800d9cc
 800be3c:	0800d9d0 	.word	0x0800d9d0

0800be40 <__retarget_lock_acquire_recursive>:
 800be40:	4770      	bx	lr

0800be42 <__retarget_lock_release_recursive>:
 800be42:	4770      	bx	lr

0800be44 <memcpy>:
 800be44:	440a      	add	r2, r1
 800be46:	4291      	cmp	r1, r2
 800be48:	f100 33ff 	add.w	r3, r0, #4294967295
 800be4c:	d100      	bne.n	800be50 <memcpy+0xc>
 800be4e:	4770      	bx	lr
 800be50:	b510      	push	{r4, lr}
 800be52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be5a:	4291      	cmp	r1, r2
 800be5c:	d1f9      	bne.n	800be52 <memcpy+0xe>
 800be5e:	bd10      	pop	{r4, pc}

0800be60 <memset>:
 800be60:	4402      	add	r2, r0
 800be62:	4603      	mov	r3, r0
 800be64:	4293      	cmp	r3, r2
 800be66:	d100      	bne.n	800be6a <memset+0xa>
 800be68:	4770      	bx	lr
 800be6a:	f803 1b01 	strb.w	r1, [r3], #1
 800be6e:	e7f9      	b.n	800be64 <memset+0x4>

0800be70 <cleanup_glue>:
 800be70:	b538      	push	{r3, r4, r5, lr}
 800be72:	460c      	mov	r4, r1
 800be74:	6809      	ldr	r1, [r1, #0]
 800be76:	4605      	mov	r5, r0
 800be78:	b109      	cbz	r1, 800be7e <cleanup_glue+0xe>
 800be7a:	f7ff fff9 	bl	800be70 <cleanup_glue>
 800be7e:	4621      	mov	r1, r4
 800be80:	4628      	mov	r0, r5
 800be82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be86:	f000 b869 	b.w	800bf5c <_free_r>
	...

0800be8c <_reclaim_reent>:
 800be8c:	4b2c      	ldr	r3, [pc, #176]	; (800bf40 <_reclaim_reent+0xb4>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4283      	cmp	r3, r0
 800be92:	b570      	push	{r4, r5, r6, lr}
 800be94:	4604      	mov	r4, r0
 800be96:	d051      	beq.n	800bf3c <_reclaim_reent+0xb0>
 800be98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800be9a:	b143      	cbz	r3, 800beae <_reclaim_reent+0x22>
 800be9c:	68db      	ldr	r3, [r3, #12]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d14a      	bne.n	800bf38 <_reclaim_reent+0xac>
 800bea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bea4:	6819      	ldr	r1, [r3, #0]
 800bea6:	b111      	cbz	r1, 800beae <_reclaim_reent+0x22>
 800bea8:	4620      	mov	r0, r4
 800beaa:	f000 f857 	bl	800bf5c <_free_r>
 800beae:	6961      	ldr	r1, [r4, #20]
 800beb0:	b111      	cbz	r1, 800beb8 <_reclaim_reent+0x2c>
 800beb2:	4620      	mov	r0, r4
 800beb4:	f000 f852 	bl	800bf5c <_free_r>
 800beb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800beba:	b111      	cbz	r1, 800bec2 <_reclaim_reent+0x36>
 800bebc:	4620      	mov	r0, r4
 800bebe:	f000 f84d 	bl	800bf5c <_free_r>
 800bec2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bec4:	b111      	cbz	r1, 800becc <_reclaim_reent+0x40>
 800bec6:	4620      	mov	r0, r4
 800bec8:	f000 f848 	bl	800bf5c <_free_r>
 800becc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bece:	b111      	cbz	r1, 800bed6 <_reclaim_reent+0x4a>
 800bed0:	4620      	mov	r0, r4
 800bed2:	f000 f843 	bl	800bf5c <_free_r>
 800bed6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bed8:	b111      	cbz	r1, 800bee0 <_reclaim_reent+0x54>
 800beda:	4620      	mov	r0, r4
 800bedc:	f000 f83e 	bl	800bf5c <_free_r>
 800bee0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bee2:	b111      	cbz	r1, 800beea <_reclaim_reent+0x5e>
 800bee4:	4620      	mov	r0, r4
 800bee6:	f000 f839 	bl	800bf5c <_free_r>
 800beea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800beec:	b111      	cbz	r1, 800bef4 <_reclaim_reent+0x68>
 800beee:	4620      	mov	r0, r4
 800bef0:	f000 f834 	bl	800bf5c <_free_r>
 800bef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bef6:	b111      	cbz	r1, 800befe <_reclaim_reent+0x72>
 800bef8:	4620      	mov	r0, r4
 800befa:	f000 f82f 	bl	800bf5c <_free_r>
 800befe:	69a3      	ldr	r3, [r4, #24]
 800bf00:	b1e3      	cbz	r3, 800bf3c <_reclaim_reent+0xb0>
 800bf02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bf04:	4620      	mov	r0, r4
 800bf06:	4798      	blx	r3
 800bf08:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bf0a:	b1b9      	cbz	r1, 800bf3c <_reclaim_reent+0xb0>
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf12:	f7ff bfad 	b.w	800be70 <cleanup_glue>
 800bf16:	5949      	ldr	r1, [r1, r5]
 800bf18:	b941      	cbnz	r1, 800bf2c <_reclaim_reent+0xa0>
 800bf1a:	3504      	adds	r5, #4
 800bf1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf1e:	2d80      	cmp	r5, #128	; 0x80
 800bf20:	68d9      	ldr	r1, [r3, #12]
 800bf22:	d1f8      	bne.n	800bf16 <_reclaim_reent+0x8a>
 800bf24:	4620      	mov	r0, r4
 800bf26:	f000 f819 	bl	800bf5c <_free_r>
 800bf2a:	e7ba      	b.n	800bea2 <_reclaim_reent+0x16>
 800bf2c:	680e      	ldr	r6, [r1, #0]
 800bf2e:	4620      	mov	r0, r4
 800bf30:	f000 f814 	bl	800bf5c <_free_r>
 800bf34:	4631      	mov	r1, r6
 800bf36:	e7ef      	b.n	800bf18 <_reclaim_reent+0x8c>
 800bf38:	2500      	movs	r5, #0
 800bf3a:	e7ef      	b.n	800bf1c <_reclaim_reent+0x90>
 800bf3c:	bd70      	pop	{r4, r5, r6, pc}
 800bf3e:	bf00      	nop
 800bf40:	200000c0 	.word	0x200000c0

0800bf44 <__malloc_lock>:
 800bf44:	4801      	ldr	r0, [pc, #4]	; (800bf4c <__malloc_lock+0x8>)
 800bf46:	f7ff bf7b 	b.w	800be40 <__retarget_lock_acquire_recursive>
 800bf4a:	bf00      	nop
 800bf4c:	2000545c 	.word	0x2000545c

0800bf50 <__malloc_unlock>:
 800bf50:	4801      	ldr	r0, [pc, #4]	; (800bf58 <__malloc_unlock+0x8>)
 800bf52:	f7ff bf76 	b.w	800be42 <__retarget_lock_release_recursive>
 800bf56:	bf00      	nop
 800bf58:	2000545c 	.word	0x2000545c

0800bf5c <_free_r>:
 800bf5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf5e:	2900      	cmp	r1, #0
 800bf60:	d044      	beq.n	800bfec <_free_r+0x90>
 800bf62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf66:	9001      	str	r0, [sp, #4]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f1a1 0404 	sub.w	r4, r1, #4
 800bf6e:	bfb8      	it	lt
 800bf70:	18e4      	addlt	r4, r4, r3
 800bf72:	f7ff ffe7 	bl	800bf44 <__malloc_lock>
 800bf76:	4a1e      	ldr	r2, [pc, #120]	; (800bff0 <_free_r+0x94>)
 800bf78:	9801      	ldr	r0, [sp, #4]
 800bf7a:	6813      	ldr	r3, [r2, #0]
 800bf7c:	b933      	cbnz	r3, 800bf8c <_free_r+0x30>
 800bf7e:	6063      	str	r3, [r4, #4]
 800bf80:	6014      	str	r4, [r2, #0]
 800bf82:	b003      	add	sp, #12
 800bf84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf88:	f7ff bfe2 	b.w	800bf50 <__malloc_unlock>
 800bf8c:	42a3      	cmp	r3, r4
 800bf8e:	d908      	bls.n	800bfa2 <_free_r+0x46>
 800bf90:	6825      	ldr	r5, [r4, #0]
 800bf92:	1961      	adds	r1, r4, r5
 800bf94:	428b      	cmp	r3, r1
 800bf96:	bf01      	itttt	eq
 800bf98:	6819      	ldreq	r1, [r3, #0]
 800bf9a:	685b      	ldreq	r3, [r3, #4]
 800bf9c:	1949      	addeq	r1, r1, r5
 800bf9e:	6021      	streq	r1, [r4, #0]
 800bfa0:	e7ed      	b.n	800bf7e <_free_r+0x22>
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	b10b      	cbz	r3, 800bfac <_free_r+0x50>
 800bfa8:	42a3      	cmp	r3, r4
 800bfaa:	d9fa      	bls.n	800bfa2 <_free_r+0x46>
 800bfac:	6811      	ldr	r1, [r2, #0]
 800bfae:	1855      	adds	r5, r2, r1
 800bfb0:	42a5      	cmp	r5, r4
 800bfb2:	d10b      	bne.n	800bfcc <_free_r+0x70>
 800bfb4:	6824      	ldr	r4, [r4, #0]
 800bfb6:	4421      	add	r1, r4
 800bfb8:	1854      	adds	r4, r2, r1
 800bfba:	42a3      	cmp	r3, r4
 800bfbc:	6011      	str	r1, [r2, #0]
 800bfbe:	d1e0      	bne.n	800bf82 <_free_r+0x26>
 800bfc0:	681c      	ldr	r4, [r3, #0]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	6053      	str	r3, [r2, #4]
 800bfc6:	4421      	add	r1, r4
 800bfc8:	6011      	str	r1, [r2, #0]
 800bfca:	e7da      	b.n	800bf82 <_free_r+0x26>
 800bfcc:	d902      	bls.n	800bfd4 <_free_r+0x78>
 800bfce:	230c      	movs	r3, #12
 800bfd0:	6003      	str	r3, [r0, #0]
 800bfd2:	e7d6      	b.n	800bf82 <_free_r+0x26>
 800bfd4:	6825      	ldr	r5, [r4, #0]
 800bfd6:	1961      	adds	r1, r4, r5
 800bfd8:	428b      	cmp	r3, r1
 800bfda:	bf04      	itt	eq
 800bfdc:	6819      	ldreq	r1, [r3, #0]
 800bfde:	685b      	ldreq	r3, [r3, #4]
 800bfe0:	6063      	str	r3, [r4, #4]
 800bfe2:	bf04      	itt	eq
 800bfe4:	1949      	addeq	r1, r1, r5
 800bfe6:	6021      	streq	r1, [r4, #0]
 800bfe8:	6054      	str	r4, [r2, #4]
 800bfea:	e7ca      	b.n	800bf82 <_free_r+0x26>
 800bfec:	b003      	add	sp, #12
 800bfee:	bd30      	pop	{r4, r5, pc}
 800bff0:	20005460 	.word	0x20005460

0800bff4 <cosf>:
 800bff4:	ee10 3a10 	vmov	r3, s0
 800bff8:	b507      	push	{r0, r1, r2, lr}
 800bffa:	4a1e      	ldr	r2, [pc, #120]	; (800c074 <cosf+0x80>)
 800bffc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c000:	4293      	cmp	r3, r2
 800c002:	dc06      	bgt.n	800c012 <cosf+0x1e>
 800c004:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800c078 <cosf+0x84>
 800c008:	b003      	add	sp, #12
 800c00a:	f85d eb04 	ldr.w	lr, [sp], #4
 800c00e:	f000 bbfb 	b.w	800c808 <__kernel_cosf>
 800c012:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c016:	db04      	blt.n	800c022 <cosf+0x2e>
 800c018:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c01c:	b003      	add	sp, #12
 800c01e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c022:	4668      	mov	r0, sp
 800c024:	f000 fab0 	bl	800c588 <__ieee754_rem_pio2f>
 800c028:	f000 0003 	and.w	r0, r0, #3
 800c02c:	2801      	cmp	r0, #1
 800c02e:	d009      	beq.n	800c044 <cosf+0x50>
 800c030:	2802      	cmp	r0, #2
 800c032:	d010      	beq.n	800c056 <cosf+0x62>
 800c034:	b9b0      	cbnz	r0, 800c064 <cosf+0x70>
 800c036:	eddd 0a01 	vldr	s1, [sp, #4]
 800c03a:	ed9d 0a00 	vldr	s0, [sp]
 800c03e:	f000 fbe3 	bl	800c808 <__kernel_cosf>
 800c042:	e7eb      	b.n	800c01c <cosf+0x28>
 800c044:	eddd 0a01 	vldr	s1, [sp, #4]
 800c048:	ed9d 0a00 	vldr	s0, [sp]
 800c04c:	f000 feb2 	bl	800cdb4 <__kernel_sinf>
 800c050:	eeb1 0a40 	vneg.f32	s0, s0
 800c054:	e7e2      	b.n	800c01c <cosf+0x28>
 800c056:	eddd 0a01 	vldr	s1, [sp, #4]
 800c05a:	ed9d 0a00 	vldr	s0, [sp]
 800c05e:	f000 fbd3 	bl	800c808 <__kernel_cosf>
 800c062:	e7f5      	b.n	800c050 <cosf+0x5c>
 800c064:	eddd 0a01 	vldr	s1, [sp, #4]
 800c068:	ed9d 0a00 	vldr	s0, [sp]
 800c06c:	2001      	movs	r0, #1
 800c06e:	f000 fea1 	bl	800cdb4 <__kernel_sinf>
 800c072:	e7d3      	b.n	800c01c <cosf+0x28>
 800c074:	3f490fd8 	.word	0x3f490fd8
 800c078:	00000000 	.word	0x00000000

0800c07c <sinf>:
 800c07c:	ee10 3a10 	vmov	r3, s0
 800c080:	b507      	push	{r0, r1, r2, lr}
 800c082:	4a1f      	ldr	r2, [pc, #124]	; (800c100 <sinf+0x84>)
 800c084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c088:	4293      	cmp	r3, r2
 800c08a:	dc07      	bgt.n	800c09c <sinf+0x20>
 800c08c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800c104 <sinf+0x88>
 800c090:	2000      	movs	r0, #0
 800c092:	b003      	add	sp, #12
 800c094:	f85d eb04 	ldr.w	lr, [sp], #4
 800c098:	f000 be8c 	b.w	800cdb4 <__kernel_sinf>
 800c09c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c0a0:	db04      	blt.n	800c0ac <sinf+0x30>
 800c0a2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c0a6:	b003      	add	sp, #12
 800c0a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800c0ac:	4668      	mov	r0, sp
 800c0ae:	f000 fa6b 	bl	800c588 <__ieee754_rem_pio2f>
 800c0b2:	f000 0003 	and.w	r0, r0, #3
 800c0b6:	2801      	cmp	r0, #1
 800c0b8:	d00a      	beq.n	800c0d0 <sinf+0x54>
 800c0ba:	2802      	cmp	r0, #2
 800c0bc:	d00f      	beq.n	800c0de <sinf+0x62>
 800c0be:	b9c0      	cbnz	r0, 800c0f2 <sinf+0x76>
 800c0c0:	eddd 0a01 	vldr	s1, [sp, #4]
 800c0c4:	ed9d 0a00 	vldr	s0, [sp]
 800c0c8:	2001      	movs	r0, #1
 800c0ca:	f000 fe73 	bl	800cdb4 <__kernel_sinf>
 800c0ce:	e7ea      	b.n	800c0a6 <sinf+0x2a>
 800c0d0:	eddd 0a01 	vldr	s1, [sp, #4]
 800c0d4:	ed9d 0a00 	vldr	s0, [sp]
 800c0d8:	f000 fb96 	bl	800c808 <__kernel_cosf>
 800c0dc:	e7e3      	b.n	800c0a6 <sinf+0x2a>
 800c0de:	eddd 0a01 	vldr	s1, [sp, #4]
 800c0e2:	ed9d 0a00 	vldr	s0, [sp]
 800c0e6:	2001      	movs	r0, #1
 800c0e8:	f000 fe64 	bl	800cdb4 <__kernel_sinf>
 800c0ec:	eeb1 0a40 	vneg.f32	s0, s0
 800c0f0:	e7d9      	b.n	800c0a6 <sinf+0x2a>
 800c0f2:	eddd 0a01 	vldr	s1, [sp, #4]
 800c0f6:	ed9d 0a00 	vldr	s0, [sp]
 800c0fa:	f000 fb85 	bl	800c808 <__kernel_cosf>
 800c0fe:	e7f5      	b.n	800c0ec <sinf+0x70>
 800c100:	3f490fd8 	.word	0x3f490fd8
 800c104:	00000000 	.word	0x00000000

0800c108 <sqrt>:
 800c108:	b538      	push	{r3, r4, r5, lr}
 800c10a:	ed2d 8b02 	vpush	{d8}
 800c10e:	ec55 4b10 	vmov	r4, r5, d0
 800c112:	f000 f865 	bl	800c1e0 <__ieee754_sqrt>
 800c116:	4622      	mov	r2, r4
 800c118:	462b      	mov	r3, r5
 800c11a:	4620      	mov	r0, r4
 800c11c:	4629      	mov	r1, r5
 800c11e:	eeb0 8a40 	vmov.f32	s16, s0
 800c122:	eef0 8a60 	vmov.f32	s17, s1
 800c126:	f7f4 fcb1 	bl	8000a8c <__aeabi_dcmpun>
 800c12a:	b990      	cbnz	r0, 800c152 <sqrt+0x4a>
 800c12c:	2200      	movs	r2, #0
 800c12e:	2300      	movs	r3, #0
 800c130:	4620      	mov	r0, r4
 800c132:	4629      	mov	r1, r5
 800c134:	f7f4 fc82 	bl	8000a3c <__aeabi_dcmplt>
 800c138:	b158      	cbz	r0, 800c152 <sqrt+0x4a>
 800c13a:	f7ff fe57 	bl	800bdec <__errno>
 800c13e:	2321      	movs	r3, #33	; 0x21
 800c140:	6003      	str	r3, [r0, #0]
 800c142:	2200      	movs	r2, #0
 800c144:	2300      	movs	r3, #0
 800c146:	4610      	mov	r0, r2
 800c148:	4619      	mov	r1, r3
 800c14a:	f7f4 fb2f 	bl	80007ac <__aeabi_ddiv>
 800c14e:	ec41 0b18 	vmov	d8, r0, r1
 800c152:	eeb0 0a48 	vmov.f32	s0, s16
 800c156:	eef0 0a68 	vmov.f32	s1, s17
 800c15a:	ecbd 8b02 	vpop	{d8}
 800c15e:	bd38      	pop	{r3, r4, r5, pc}

0800c160 <atan2f>:
 800c160:	f000 b8f0 	b.w	800c344 <__ieee754_atan2f>

0800c164 <fmodf>:
 800c164:	b508      	push	{r3, lr}
 800c166:	ed2d 8b02 	vpush	{d8}
 800c16a:	eef0 8a40 	vmov.f32	s17, s0
 800c16e:	eeb0 8a60 	vmov.f32	s16, s1
 800c172:	f000 f987 	bl	800c484 <__ieee754_fmodf>
 800c176:	eef4 8a48 	vcmp.f32	s17, s16
 800c17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c17e:	d60c      	bvs.n	800c19a <fmodf+0x36>
 800c180:	eddf 8a07 	vldr	s17, [pc, #28]	; 800c1a0 <fmodf+0x3c>
 800c184:	eeb4 8a68 	vcmp.f32	s16, s17
 800c188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c18c:	d105      	bne.n	800c19a <fmodf+0x36>
 800c18e:	f7ff fe2d 	bl	800bdec <__errno>
 800c192:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c196:	2321      	movs	r3, #33	; 0x21
 800c198:	6003      	str	r3, [r0, #0]
 800c19a:	ecbd 8b02 	vpop	{d8}
 800c19e:	bd08      	pop	{r3, pc}
 800c1a0:	00000000 	.word	0x00000000

0800c1a4 <sqrtf>:
 800c1a4:	b508      	push	{r3, lr}
 800c1a6:	ed2d 8b02 	vpush	{d8}
 800c1aa:	eeb0 8a40 	vmov.f32	s16, s0
 800c1ae:	f000 fb27 	bl	800c800 <__ieee754_sqrtf>
 800c1b2:	eeb4 8a48 	vcmp.f32	s16, s16
 800c1b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ba:	d60c      	bvs.n	800c1d6 <sqrtf+0x32>
 800c1bc:	eddf 8a07 	vldr	s17, [pc, #28]	; 800c1dc <sqrtf+0x38>
 800c1c0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c1c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1c8:	d505      	bpl.n	800c1d6 <sqrtf+0x32>
 800c1ca:	f7ff fe0f 	bl	800bdec <__errno>
 800c1ce:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c1d2:	2321      	movs	r3, #33	; 0x21
 800c1d4:	6003      	str	r3, [r0, #0]
 800c1d6:	ecbd 8b02 	vpop	{d8}
 800c1da:	bd08      	pop	{r3, pc}
 800c1dc:	00000000 	.word	0x00000000

0800c1e0 <__ieee754_sqrt>:
 800c1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e4:	ec55 4b10 	vmov	r4, r5, d0
 800c1e8:	4e55      	ldr	r6, [pc, #340]	; (800c340 <__ieee754_sqrt+0x160>)
 800c1ea:	43ae      	bics	r6, r5
 800c1ec:	ee10 0a10 	vmov	r0, s0
 800c1f0:	ee10 3a10 	vmov	r3, s0
 800c1f4:	462a      	mov	r2, r5
 800c1f6:	4629      	mov	r1, r5
 800c1f8:	d110      	bne.n	800c21c <__ieee754_sqrt+0x3c>
 800c1fa:	ee10 2a10 	vmov	r2, s0
 800c1fe:	462b      	mov	r3, r5
 800c200:	f7f4 f9aa 	bl	8000558 <__aeabi_dmul>
 800c204:	4602      	mov	r2, r0
 800c206:	460b      	mov	r3, r1
 800c208:	4620      	mov	r0, r4
 800c20a:	4629      	mov	r1, r5
 800c20c:	f7f3 ffee 	bl	80001ec <__adddf3>
 800c210:	4604      	mov	r4, r0
 800c212:	460d      	mov	r5, r1
 800c214:	ec45 4b10 	vmov	d0, r4, r5
 800c218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c21c:	2d00      	cmp	r5, #0
 800c21e:	dc10      	bgt.n	800c242 <__ieee754_sqrt+0x62>
 800c220:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c224:	4330      	orrs	r0, r6
 800c226:	d0f5      	beq.n	800c214 <__ieee754_sqrt+0x34>
 800c228:	b15d      	cbz	r5, 800c242 <__ieee754_sqrt+0x62>
 800c22a:	ee10 2a10 	vmov	r2, s0
 800c22e:	462b      	mov	r3, r5
 800c230:	ee10 0a10 	vmov	r0, s0
 800c234:	f7f3 ffd8 	bl	80001e8 <__aeabi_dsub>
 800c238:	4602      	mov	r2, r0
 800c23a:	460b      	mov	r3, r1
 800c23c:	f7f4 fab6 	bl	80007ac <__aeabi_ddiv>
 800c240:	e7e6      	b.n	800c210 <__ieee754_sqrt+0x30>
 800c242:	1512      	asrs	r2, r2, #20
 800c244:	d074      	beq.n	800c330 <__ieee754_sqrt+0x150>
 800c246:	07d4      	lsls	r4, r2, #31
 800c248:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c24c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c254:	bf5e      	ittt	pl
 800c256:	0fda      	lsrpl	r2, r3, #31
 800c258:	005b      	lslpl	r3, r3, #1
 800c25a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c25e:	2400      	movs	r4, #0
 800c260:	0fda      	lsrs	r2, r3, #31
 800c262:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c266:	107f      	asrs	r7, r7, #1
 800c268:	005b      	lsls	r3, r3, #1
 800c26a:	2516      	movs	r5, #22
 800c26c:	4620      	mov	r0, r4
 800c26e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c272:	1886      	adds	r6, r0, r2
 800c274:	428e      	cmp	r6, r1
 800c276:	bfde      	ittt	le
 800c278:	1b89      	suble	r1, r1, r6
 800c27a:	18b0      	addle	r0, r6, r2
 800c27c:	18a4      	addle	r4, r4, r2
 800c27e:	0049      	lsls	r1, r1, #1
 800c280:	3d01      	subs	r5, #1
 800c282:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c286:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c28a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c28e:	d1f0      	bne.n	800c272 <__ieee754_sqrt+0x92>
 800c290:	462a      	mov	r2, r5
 800c292:	f04f 0e20 	mov.w	lr, #32
 800c296:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c29a:	4281      	cmp	r1, r0
 800c29c:	eb06 0c05 	add.w	ip, r6, r5
 800c2a0:	dc02      	bgt.n	800c2a8 <__ieee754_sqrt+0xc8>
 800c2a2:	d113      	bne.n	800c2cc <__ieee754_sqrt+0xec>
 800c2a4:	459c      	cmp	ip, r3
 800c2a6:	d811      	bhi.n	800c2cc <__ieee754_sqrt+0xec>
 800c2a8:	f1bc 0f00 	cmp.w	ip, #0
 800c2ac:	eb0c 0506 	add.w	r5, ip, r6
 800c2b0:	da43      	bge.n	800c33a <__ieee754_sqrt+0x15a>
 800c2b2:	2d00      	cmp	r5, #0
 800c2b4:	db41      	blt.n	800c33a <__ieee754_sqrt+0x15a>
 800c2b6:	f100 0801 	add.w	r8, r0, #1
 800c2ba:	1a09      	subs	r1, r1, r0
 800c2bc:	459c      	cmp	ip, r3
 800c2be:	bf88      	it	hi
 800c2c0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c2c4:	eba3 030c 	sub.w	r3, r3, ip
 800c2c8:	4432      	add	r2, r6
 800c2ca:	4640      	mov	r0, r8
 800c2cc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c2d0:	f1be 0e01 	subs.w	lr, lr, #1
 800c2d4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c2d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c2dc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c2e0:	d1db      	bne.n	800c29a <__ieee754_sqrt+0xba>
 800c2e2:	430b      	orrs	r3, r1
 800c2e4:	d006      	beq.n	800c2f4 <__ieee754_sqrt+0x114>
 800c2e6:	1c50      	adds	r0, r2, #1
 800c2e8:	bf13      	iteet	ne
 800c2ea:	3201      	addne	r2, #1
 800c2ec:	3401      	addeq	r4, #1
 800c2ee:	4672      	moveq	r2, lr
 800c2f0:	f022 0201 	bicne.w	r2, r2, #1
 800c2f4:	1063      	asrs	r3, r4, #1
 800c2f6:	0852      	lsrs	r2, r2, #1
 800c2f8:	07e1      	lsls	r1, r4, #31
 800c2fa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c2fe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c302:	bf48      	it	mi
 800c304:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c308:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c30c:	4614      	mov	r4, r2
 800c30e:	e781      	b.n	800c214 <__ieee754_sqrt+0x34>
 800c310:	0ad9      	lsrs	r1, r3, #11
 800c312:	3815      	subs	r0, #21
 800c314:	055b      	lsls	r3, r3, #21
 800c316:	2900      	cmp	r1, #0
 800c318:	d0fa      	beq.n	800c310 <__ieee754_sqrt+0x130>
 800c31a:	02cd      	lsls	r5, r1, #11
 800c31c:	d50a      	bpl.n	800c334 <__ieee754_sqrt+0x154>
 800c31e:	f1c2 0420 	rsb	r4, r2, #32
 800c322:	fa23 f404 	lsr.w	r4, r3, r4
 800c326:	1e55      	subs	r5, r2, #1
 800c328:	4093      	lsls	r3, r2
 800c32a:	4321      	orrs	r1, r4
 800c32c:	1b42      	subs	r2, r0, r5
 800c32e:	e78a      	b.n	800c246 <__ieee754_sqrt+0x66>
 800c330:	4610      	mov	r0, r2
 800c332:	e7f0      	b.n	800c316 <__ieee754_sqrt+0x136>
 800c334:	0049      	lsls	r1, r1, #1
 800c336:	3201      	adds	r2, #1
 800c338:	e7ef      	b.n	800c31a <__ieee754_sqrt+0x13a>
 800c33a:	4680      	mov	r8, r0
 800c33c:	e7bd      	b.n	800c2ba <__ieee754_sqrt+0xda>
 800c33e:	bf00      	nop
 800c340:	7ff00000 	.word	0x7ff00000

0800c344 <__ieee754_atan2f>:
 800c344:	ee10 2a90 	vmov	r2, s1
 800c348:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800c34c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c350:	b510      	push	{r4, lr}
 800c352:	eef0 7a40 	vmov.f32	s15, s0
 800c356:	dc06      	bgt.n	800c366 <__ieee754_atan2f+0x22>
 800c358:	ee10 0a10 	vmov	r0, s0
 800c35c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800c360:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c364:	dd04      	ble.n	800c370 <__ieee754_atan2f+0x2c>
 800c366:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c36a:	eeb0 0a67 	vmov.f32	s0, s15
 800c36e:	bd10      	pop	{r4, pc}
 800c370:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800c374:	d103      	bne.n	800c37e <__ieee754_atan2f+0x3a>
 800c376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c37a:	f000 bd63 	b.w	800ce44 <atanf>
 800c37e:	1794      	asrs	r4, r2, #30
 800c380:	f004 0402 	and.w	r4, r4, #2
 800c384:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c388:	b943      	cbnz	r3, 800c39c <__ieee754_atan2f+0x58>
 800c38a:	2c02      	cmp	r4, #2
 800c38c:	d05e      	beq.n	800c44c <__ieee754_atan2f+0x108>
 800c38e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800c460 <__ieee754_atan2f+0x11c>
 800c392:	2c03      	cmp	r4, #3
 800c394:	bf08      	it	eq
 800c396:	eef0 7a47 	vmoveq.f32	s15, s14
 800c39a:	e7e6      	b.n	800c36a <__ieee754_atan2f+0x26>
 800c39c:	b941      	cbnz	r1, 800c3b0 <__ieee754_atan2f+0x6c>
 800c39e:	eddf 7a31 	vldr	s15, [pc, #196]	; 800c464 <__ieee754_atan2f+0x120>
 800c3a2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800c468 <__ieee754_atan2f+0x124>
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	bfb8      	it	lt
 800c3aa:	eef0 7a40 	vmovlt.f32	s15, s0
 800c3ae:	e7dc      	b.n	800c36a <__ieee754_atan2f+0x26>
 800c3b0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c3b4:	d110      	bne.n	800c3d8 <__ieee754_atan2f+0x94>
 800c3b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c3ba:	f104 34ff 	add.w	r4, r4, #4294967295
 800c3be:	d107      	bne.n	800c3d0 <__ieee754_atan2f+0x8c>
 800c3c0:	2c02      	cmp	r4, #2
 800c3c2:	d846      	bhi.n	800c452 <__ieee754_atan2f+0x10e>
 800c3c4:	4b29      	ldr	r3, [pc, #164]	; (800c46c <__ieee754_atan2f+0x128>)
 800c3c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c3ca:	edd4 7a00 	vldr	s15, [r4]
 800c3ce:	e7cc      	b.n	800c36a <__ieee754_atan2f+0x26>
 800c3d0:	2c02      	cmp	r4, #2
 800c3d2:	d841      	bhi.n	800c458 <__ieee754_atan2f+0x114>
 800c3d4:	4b26      	ldr	r3, [pc, #152]	; (800c470 <__ieee754_atan2f+0x12c>)
 800c3d6:	e7f6      	b.n	800c3c6 <__ieee754_atan2f+0x82>
 800c3d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c3dc:	d0df      	beq.n	800c39e <__ieee754_atan2f+0x5a>
 800c3de:	1a5b      	subs	r3, r3, r1
 800c3e0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800c3e4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c3e8:	da1a      	bge.n	800c420 <__ieee754_atan2f+0xdc>
 800c3ea:	2a00      	cmp	r2, #0
 800c3ec:	da01      	bge.n	800c3f2 <__ieee754_atan2f+0xae>
 800c3ee:	313c      	adds	r1, #60	; 0x3c
 800c3f0:	db19      	blt.n	800c426 <__ieee754_atan2f+0xe2>
 800c3f2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c3f6:	f000 fdf9 	bl	800cfec <fabsf>
 800c3fa:	f000 fd23 	bl	800ce44 <atanf>
 800c3fe:	eef0 7a40 	vmov.f32	s15, s0
 800c402:	2c01      	cmp	r4, #1
 800c404:	d012      	beq.n	800c42c <__ieee754_atan2f+0xe8>
 800c406:	2c02      	cmp	r4, #2
 800c408:	d017      	beq.n	800c43a <__ieee754_atan2f+0xf6>
 800c40a:	2c00      	cmp	r4, #0
 800c40c:	d0ad      	beq.n	800c36a <__ieee754_atan2f+0x26>
 800c40e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800c474 <__ieee754_atan2f+0x130>
 800c412:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c416:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800c478 <__ieee754_atan2f+0x134>
 800c41a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c41e:	e7a4      	b.n	800c36a <__ieee754_atan2f+0x26>
 800c420:	eddf 7a10 	vldr	s15, [pc, #64]	; 800c464 <__ieee754_atan2f+0x120>
 800c424:	e7ed      	b.n	800c402 <__ieee754_atan2f+0xbe>
 800c426:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c47c <__ieee754_atan2f+0x138>
 800c42a:	e7ea      	b.n	800c402 <__ieee754_atan2f+0xbe>
 800c42c:	ee17 3a90 	vmov	r3, s15
 800c430:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c434:	ee07 3a90 	vmov	s15, r3
 800c438:	e797      	b.n	800c36a <__ieee754_atan2f+0x26>
 800c43a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800c474 <__ieee754_atan2f+0x130>
 800c43e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c442:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800c478 <__ieee754_atan2f+0x134>
 800c446:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c44a:	e78e      	b.n	800c36a <__ieee754_atan2f+0x26>
 800c44c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800c478 <__ieee754_atan2f+0x134>
 800c450:	e78b      	b.n	800c36a <__ieee754_atan2f+0x26>
 800c452:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800c480 <__ieee754_atan2f+0x13c>
 800c456:	e788      	b.n	800c36a <__ieee754_atan2f+0x26>
 800c458:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c47c <__ieee754_atan2f+0x138>
 800c45c:	e785      	b.n	800c36a <__ieee754_atan2f+0x26>
 800c45e:	bf00      	nop
 800c460:	c0490fdb 	.word	0xc0490fdb
 800c464:	3fc90fdb 	.word	0x3fc90fdb
 800c468:	bfc90fdb 	.word	0xbfc90fdb
 800c46c:	0800d5b4 	.word	0x0800d5b4
 800c470:	0800d5c0 	.word	0x0800d5c0
 800c474:	33bbbd2e 	.word	0x33bbbd2e
 800c478:	40490fdb 	.word	0x40490fdb
 800c47c:	00000000 	.word	0x00000000
 800c480:	3f490fdb 	.word	0x3f490fdb

0800c484 <__ieee754_fmodf>:
 800c484:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c486:	ee10 5a90 	vmov	r5, s1
 800c48a:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800c48e:	d009      	beq.n	800c4a4 <__ieee754_fmodf+0x20>
 800c490:	ee10 2a10 	vmov	r2, s0
 800c494:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800c498:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c49c:	da02      	bge.n	800c4a4 <__ieee754_fmodf+0x20>
 800c49e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c4a2:	dd04      	ble.n	800c4ae <__ieee754_fmodf+0x2a>
 800c4a4:	ee60 0a20 	vmul.f32	s1, s0, s1
 800c4a8:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800c4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4ae:	42a3      	cmp	r3, r4
 800c4b0:	dbfc      	blt.n	800c4ac <__ieee754_fmodf+0x28>
 800c4b2:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800c4b6:	d105      	bne.n	800c4c4 <__ieee754_fmodf+0x40>
 800c4b8:	4b32      	ldr	r3, [pc, #200]	; (800c584 <__ieee754_fmodf+0x100>)
 800c4ba:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800c4be:	ed93 0a00 	vldr	s0, [r3]
 800c4c2:	e7f3      	b.n	800c4ac <__ieee754_fmodf+0x28>
 800c4c4:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800c4c8:	d13f      	bne.n	800c54a <__ieee754_fmodf+0xc6>
 800c4ca:	0219      	lsls	r1, r3, #8
 800c4cc:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800c4d0:	2900      	cmp	r1, #0
 800c4d2:	dc37      	bgt.n	800c544 <__ieee754_fmodf+0xc0>
 800c4d4:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800c4d8:	d13d      	bne.n	800c556 <__ieee754_fmodf+0xd2>
 800c4da:	0227      	lsls	r7, r4, #8
 800c4dc:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800c4e0:	2f00      	cmp	r7, #0
 800c4e2:	da35      	bge.n	800c550 <__ieee754_fmodf+0xcc>
 800c4e4:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800c4e8:	bfbb      	ittet	lt
 800c4ea:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800c4ee:	1a12      	sublt	r2, r2, r0
 800c4f0:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800c4f4:	4093      	lsllt	r3, r2
 800c4f6:	bfa8      	it	ge
 800c4f8:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800c4fc:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800c500:	bfb5      	itete	lt
 800c502:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800c506:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800c50a:	1a52      	sublt	r2, r2, r1
 800c50c:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 800c510:	bfb8      	it	lt
 800c512:	4094      	lsllt	r4, r2
 800c514:	1a40      	subs	r0, r0, r1
 800c516:	1b1a      	subs	r2, r3, r4
 800c518:	bb00      	cbnz	r0, 800c55c <__ieee754_fmodf+0xd8>
 800c51a:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800c51e:	bf38      	it	cc
 800c520:	4613      	movcc	r3, r2
 800c522:	2b00      	cmp	r3, #0
 800c524:	d0c8      	beq.n	800c4b8 <__ieee754_fmodf+0x34>
 800c526:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c52a:	db1f      	blt.n	800c56c <__ieee754_fmodf+0xe8>
 800c52c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800c530:	db1f      	blt.n	800c572 <__ieee754_fmodf+0xee>
 800c532:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800c536:	317f      	adds	r1, #127	; 0x7f
 800c538:	4333      	orrs	r3, r6
 800c53a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800c53e:	ee00 3a10 	vmov	s0, r3
 800c542:	e7b3      	b.n	800c4ac <__ieee754_fmodf+0x28>
 800c544:	3801      	subs	r0, #1
 800c546:	0049      	lsls	r1, r1, #1
 800c548:	e7c2      	b.n	800c4d0 <__ieee754_fmodf+0x4c>
 800c54a:	15d8      	asrs	r0, r3, #23
 800c54c:	387f      	subs	r0, #127	; 0x7f
 800c54e:	e7c1      	b.n	800c4d4 <__ieee754_fmodf+0x50>
 800c550:	3901      	subs	r1, #1
 800c552:	007f      	lsls	r7, r7, #1
 800c554:	e7c4      	b.n	800c4e0 <__ieee754_fmodf+0x5c>
 800c556:	15e1      	asrs	r1, r4, #23
 800c558:	397f      	subs	r1, #127	; 0x7f
 800c55a:	e7c3      	b.n	800c4e4 <__ieee754_fmodf+0x60>
 800c55c:	2a00      	cmp	r2, #0
 800c55e:	da02      	bge.n	800c566 <__ieee754_fmodf+0xe2>
 800c560:	005b      	lsls	r3, r3, #1
 800c562:	3801      	subs	r0, #1
 800c564:	e7d7      	b.n	800c516 <__ieee754_fmodf+0x92>
 800c566:	d0a7      	beq.n	800c4b8 <__ieee754_fmodf+0x34>
 800c568:	0053      	lsls	r3, r2, #1
 800c56a:	e7fa      	b.n	800c562 <__ieee754_fmodf+0xde>
 800c56c:	005b      	lsls	r3, r3, #1
 800c56e:	3901      	subs	r1, #1
 800c570:	e7d9      	b.n	800c526 <__ieee754_fmodf+0xa2>
 800c572:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800c576:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800c57a:	3182      	adds	r1, #130	; 0x82
 800c57c:	410b      	asrs	r3, r1
 800c57e:	4333      	orrs	r3, r6
 800c580:	e7dd      	b.n	800c53e <__ieee754_fmodf+0xba>
 800c582:	bf00      	nop
 800c584:	0800d5cc 	.word	0x0800d5cc

0800c588 <__ieee754_rem_pio2f>:
 800c588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c58a:	ee10 6a10 	vmov	r6, s0
 800c58e:	4b8e      	ldr	r3, [pc, #568]	; (800c7c8 <__ieee754_rem_pio2f+0x240>)
 800c590:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800c594:	429d      	cmp	r5, r3
 800c596:	b087      	sub	sp, #28
 800c598:	eef0 7a40 	vmov.f32	s15, s0
 800c59c:	4604      	mov	r4, r0
 800c59e:	dc05      	bgt.n	800c5ac <__ieee754_rem_pio2f+0x24>
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	ed80 0a00 	vstr	s0, [r0]
 800c5a6:	6043      	str	r3, [r0, #4]
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	e01a      	b.n	800c5e2 <__ieee754_rem_pio2f+0x5a>
 800c5ac:	4b87      	ldr	r3, [pc, #540]	; (800c7cc <__ieee754_rem_pio2f+0x244>)
 800c5ae:	429d      	cmp	r5, r3
 800c5b0:	dc46      	bgt.n	800c640 <__ieee754_rem_pio2f+0xb8>
 800c5b2:	2e00      	cmp	r6, #0
 800c5b4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800c7d0 <__ieee754_rem_pio2f+0x248>
 800c5b8:	4b86      	ldr	r3, [pc, #536]	; (800c7d4 <__ieee754_rem_pio2f+0x24c>)
 800c5ba:	f025 050f 	bic.w	r5, r5, #15
 800c5be:	dd1f      	ble.n	800c600 <__ieee754_rem_pio2f+0x78>
 800c5c0:	429d      	cmp	r5, r3
 800c5c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c5c6:	d00e      	beq.n	800c5e6 <__ieee754_rem_pio2f+0x5e>
 800c5c8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800c7d8 <__ieee754_rem_pio2f+0x250>
 800c5cc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800c5d0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c5d4:	ed80 0a00 	vstr	s0, [r0]
 800c5d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5dc:	2001      	movs	r0, #1
 800c5de:	edc4 7a01 	vstr	s15, [r4, #4]
 800c5e2:	b007      	add	sp, #28
 800c5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5e6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800c7dc <__ieee754_rem_pio2f+0x254>
 800c5ea:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800c7e0 <__ieee754_rem_pio2f+0x258>
 800c5ee:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c5f2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c5f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c5fa:	edc0 6a00 	vstr	s13, [r0]
 800c5fe:	e7eb      	b.n	800c5d8 <__ieee754_rem_pio2f+0x50>
 800c600:	429d      	cmp	r5, r3
 800c602:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c606:	d00e      	beq.n	800c626 <__ieee754_rem_pio2f+0x9e>
 800c608:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800c7d8 <__ieee754_rem_pio2f+0x250>
 800c60c:	ee37 0a87 	vadd.f32	s0, s15, s14
 800c610:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c614:	ed80 0a00 	vstr	s0, [r0]
 800c618:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c61c:	f04f 30ff 	mov.w	r0, #4294967295
 800c620:	edc4 7a01 	vstr	s15, [r4, #4]
 800c624:	e7dd      	b.n	800c5e2 <__ieee754_rem_pio2f+0x5a>
 800c626:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800c7dc <__ieee754_rem_pio2f+0x254>
 800c62a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800c7e0 <__ieee754_rem_pio2f+0x258>
 800c62e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c632:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c636:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c63a:	edc0 6a00 	vstr	s13, [r0]
 800c63e:	e7eb      	b.n	800c618 <__ieee754_rem_pio2f+0x90>
 800c640:	4b68      	ldr	r3, [pc, #416]	; (800c7e4 <__ieee754_rem_pio2f+0x25c>)
 800c642:	429d      	cmp	r5, r3
 800c644:	dc72      	bgt.n	800c72c <__ieee754_rem_pio2f+0x1a4>
 800c646:	f000 fcd1 	bl	800cfec <fabsf>
 800c64a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800c7e8 <__ieee754_rem_pio2f+0x260>
 800c64e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c652:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c656:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c65a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c65e:	ee17 0a90 	vmov	r0, s15
 800c662:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c7d0 <__ieee754_rem_pio2f+0x248>
 800c666:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c66a:	281f      	cmp	r0, #31
 800c66c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800c7d8 <__ieee754_rem_pio2f+0x250>
 800c670:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c674:	eeb1 6a47 	vneg.f32	s12, s14
 800c678:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c67c:	ee16 2a90 	vmov	r2, s13
 800c680:	dc1c      	bgt.n	800c6bc <__ieee754_rem_pio2f+0x134>
 800c682:	495a      	ldr	r1, [pc, #360]	; (800c7ec <__ieee754_rem_pio2f+0x264>)
 800c684:	1e47      	subs	r7, r0, #1
 800c686:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800c68a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800c68e:	428b      	cmp	r3, r1
 800c690:	d014      	beq.n	800c6bc <__ieee754_rem_pio2f+0x134>
 800c692:	6022      	str	r2, [r4, #0]
 800c694:	ed94 7a00 	vldr	s14, [r4]
 800c698:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c69c:	2e00      	cmp	r6, #0
 800c69e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c6a2:	ed84 0a01 	vstr	s0, [r4, #4]
 800c6a6:	da9c      	bge.n	800c5e2 <__ieee754_rem_pio2f+0x5a>
 800c6a8:	eeb1 7a47 	vneg.f32	s14, s14
 800c6ac:	eeb1 0a40 	vneg.f32	s0, s0
 800c6b0:	ed84 7a00 	vstr	s14, [r4]
 800c6b4:	ed84 0a01 	vstr	s0, [r4, #4]
 800c6b8:	4240      	negs	r0, r0
 800c6ba:	e792      	b.n	800c5e2 <__ieee754_rem_pio2f+0x5a>
 800c6bc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c6c0:	15eb      	asrs	r3, r5, #23
 800c6c2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800c6c6:	2d08      	cmp	r5, #8
 800c6c8:	dde3      	ble.n	800c692 <__ieee754_rem_pio2f+0x10a>
 800c6ca:	eddf 7a44 	vldr	s15, [pc, #272]	; 800c7dc <__ieee754_rem_pio2f+0x254>
 800c6ce:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c7e0 <__ieee754_rem_pio2f+0x258>
 800c6d2:	eef0 6a40 	vmov.f32	s13, s0
 800c6d6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c6da:	ee30 0a66 	vsub.f32	s0, s0, s13
 800c6de:	eea6 0a27 	vfma.f32	s0, s12, s15
 800c6e2:	eef0 7a40 	vmov.f32	s15, s0
 800c6e6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c6ea:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c6ee:	ee15 2a90 	vmov	r2, s11
 800c6f2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c6f6:	1a5b      	subs	r3, r3, r1
 800c6f8:	2b19      	cmp	r3, #25
 800c6fa:	dc04      	bgt.n	800c706 <__ieee754_rem_pio2f+0x17e>
 800c6fc:	edc4 5a00 	vstr	s11, [r4]
 800c700:	eeb0 0a66 	vmov.f32	s0, s13
 800c704:	e7c6      	b.n	800c694 <__ieee754_rem_pio2f+0x10c>
 800c706:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800c7f0 <__ieee754_rem_pio2f+0x268>
 800c70a:	eeb0 0a66 	vmov.f32	s0, s13
 800c70e:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c712:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c716:	eddf 6a37 	vldr	s13, [pc, #220]	; 800c7f4 <__ieee754_rem_pio2f+0x26c>
 800c71a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c71e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c722:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c726:	ed84 7a00 	vstr	s14, [r4]
 800c72a:	e7b3      	b.n	800c694 <__ieee754_rem_pio2f+0x10c>
 800c72c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c730:	db06      	blt.n	800c740 <__ieee754_rem_pio2f+0x1b8>
 800c732:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c736:	edc0 7a01 	vstr	s15, [r0, #4]
 800c73a:	edc0 7a00 	vstr	s15, [r0]
 800c73e:	e733      	b.n	800c5a8 <__ieee754_rem_pio2f+0x20>
 800c740:	15ea      	asrs	r2, r5, #23
 800c742:	3a86      	subs	r2, #134	; 0x86
 800c744:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c748:	ee07 3a90 	vmov	s15, r3
 800c74c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c750:	eddf 6a29 	vldr	s13, [pc, #164]	; 800c7f8 <__ieee754_rem_pio2f+0x270>
 800c754:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c758:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c75c:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c760:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c764:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c768:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c76c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c770:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c774:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c778:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c780:	edcd 7a05 	vstr	s15, [sp, #20]
 800c784:	d11e      	bne.n	800c7c4 <__ieee754_rem_pio2f+0x23c>
 800c786:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c78e:	bf14      	ite	ne
 800c790:	2302      	movne	r3, #2
 800c792:	2301      	moveq	r3, #1
 800c794:	4919      	ldr	r1, [pc, #100]	; (800c7fc <__ieee754_rem_pio2f+0x274>)
 800c796:	9101      	str	r1, [sp, #4]
 800c798:	2102      	movs	r1, #2
 800c79a:	9100      	str	r1, [sp, #0]
 800c79c:	a803      	add	r0, sp, #12
 800c79e:	4621      	mov	r1, r4
 800c7a0:	f000 f892 	bl	800c8c8 <__kernel_rem_pio2f>
 800c7a4:	2e00      	cmp	r6, #0
 800c7a6:	f6bf af1c 	bge.w	800c5e2 <__ieee754_rem_pio2f+0x5a>
 800c7aa:	edd4 7a00 	vldr	s15, [r4]
 800c7ae:	eef1 7a67 	vneg.f32	s15, s15
 800c7b2:	edc4 7a00 	vstr	s15, [r4]
 800c7b6:	edd4 7a01 	vldr	s15, [r4, #4]
 800c7ba:	eef1 7a67 	vneg.f32	s15, s15
 800c7be:	edc4 7a01 	vstr	s15, [r4, #4]
 800c7c2:	e779      	b.n	800c6b8 <__ieee754_rem_pio2f+0x130>
 800c7c4:	2303      	movs	r3, #3
 800c7c6:	e7e5      	b.n	800c794 <__ieee754_rem_pio2f+0x20c>
 800c7c8:	3f490fd8 	.word	0x3f490fd8
 800c7cc:	4016cbe3 	.word	0x4016cbe3
 800c7d0:	3fc90f80 	.word	0x3fc90f80
 800c7d4:	3fc90fd0 	.word	0x3fc90fd0
 800c7d8:	37354443 	.word	0x37354443
 800c7dc:	37354400 	.word	0x37354400
 800c7e0:	2e85a308 	.word	0x2e85a308
 800c7e4:	43490f80 	.word	0x43490f80
 800c7e8:	3f22f984 	.word	0x3f22f984
 800c7ec:	0800d5d4 	.word	0x0800d5d4
 800c7f0:	2e85a300 	.word	0x2e85a300
 800c7f4:	248d3132 	.word	0x248d3132
 800c7f8:	43800000 	.word	0x43800000
 800c7fc:	0800d654 	.word	0x0800d654

0800c800 <__ieee754_sqrtf>:
 800c800:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c804:	4770      	bx	lr
	...

0800c808 <__kernel_cosf>:
 800c808:	ee10 3a10 	vmov	r3, s0
 800c80c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c810:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c814:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c818:	da05      	bge.n	800c826 <__kernel_cosf+0x1e>
 800c81a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c81e:	ee17 2a90 	vmov	r2, s15
 800c822:	2a00      	cmp	r2, #0
 800c824:	d03d      	beq.n	800c8a2 <__kernel_cosf+0x9a>
 800c826:	ee60 5a00 	vmul.f32	s11, s0, s0
 800c82a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c8a8 <__kernel_cosf+0xa0>
 800c82e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c8ac <__kernel_cosf+0xa4>
 800c832:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800c8b0 <__kernel_cosf+0xa8>
 800c836:	4a1f      	ldr	r2, [pc, #124]	; (800c8b4 <__kernel_cosf+0xac>)
 800c838:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c83c:	4293      	cmp	r3, r2
 800c83e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800c8b8 <__kernel_cosf+0xb0>
 800c842:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c846:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800c8bc <__kernel_cosf+0xb4>
 800c84a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c84e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800c8c0 <__kernel_cosf+0xb8>
 800c852:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c856:	eeb0 7a66 	vmov.f32	s14, s13
 800c85a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c85e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c862:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800c866:	ee67 6a25 	vmul.f32	s13, s14, s11
 800c86a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800c86e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c872:	dc04      	bgt.n	800c87e <__kernel_cosf+0x76>
 800c874:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c878:	ee36 0a47 	vsub.f32	s0, s12, s14
 800c87c:	4770      	bx	lr
 800c87e:	4a11      	ldr	r2, [pc, #68]	; (800c8c4 <__kernel_cosf+0xbc>)
 800c880:	4293      	cmp	r3, r2
 800c882:	bfda      	itte	le
 800c884:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800c888:	ee06 3a90 	vmovle	s13, r3
 800c88c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800c890:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c894:	ee36 0a66 	vsub.f32	s0, s12, s13
 800c898:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c89c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c8a0:	4770      	bx	lr
 800c8a2:	eeb0 0a46 	vmov.f32	s0, s12
 800c8a6:	4770      	bx	lr
 800c8a8:	ad47d74e 	.word	0xad47d74e
 800c8ac:	310f74f6 	.word	0x310f74f6
 800c8b0:	3d2aaaab 	.word	0x3d2aaaab
 800c8b4:	3e999999 	.word	0x3e999999
 800c8b8:	b493f27c 	.word	0xb493f27c
 800c8bc:	37d00d01 	.word	0x37d00d01
 800c8c0:	bab60b61 	.word	0xbab60b61
 800c8c4:	3f480000 	.word	0x3f480000

0800c8c8 <__kernel_rem_pio2f>:
 800c8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8cc:	ed2d 8b04 	vpush	{d8-d9}
 800c8d0:	b0d9      	sub	sp, #356	; 0x164
 800c8d2:	4688      	mov	r8, r1
 800c8d4:	9002      	str	r0, [sp, #8]
 800c8d6:	49bb      	ldr	r1, [pc, #748]	; (800cbc4 <__kernel_rem_pio2f+0x2fc>)
 800c8d8:	9866      	ldr	r0, [sp, #408]	; 0x198
 800c8da:	9301      	str	r3, [sp, #4]
 800c8dc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800c8e0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800c8e4:	1e59      	subs	r1, r3, #1
 800c8e6:	1d13      	adds	r3, r2, #4
 800c8e8:	db27      	blt.n	800c93a <__kernel_rem_pio2f+0x72>
 800c8ea:	f1b2 0b03 	subs.w	fp, r2, #3
 800c8ee:	bf48      	it	mi
 800c8f0:	f102 0b04 	addmi.w	fp, r2, #4
 800c8f4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800c8f8:	1c45      	adds	r5, r0, #1
 800c8fa:	00ec      	lsls	r4, r5, #3
 800c8fc:	1a47      	subs	r7, r0, r1
 800c8fe:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800cbd4 <__kernel_rem_pio2f+0x30c>
 800c902:	9403      	str	r4, [sp, #12]
 800c904:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800c908:	eb0a 0c01 	add.w	ip, sl, r1
 800c90c:	ae1c      	add	r6, sp, #112	; 0x70
 800c90e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800c912:	2400      	movs	r4, #0
 800c914:	4564      	cmp	r4, ip
 800c916:	dd12      	ble.n	800c93e <__kernel_rem_pio2f+0x76>
 800c918:	9b01      	ldr	r3, [sp, #4]
 800c91a:	ac1c      	add	r4, sp, #112	; 0x70
 800c91c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800c920:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800c924:	f04f 0c00 	mov.w	ip, #0
 800c928:	45d4      	cmp	ip, sl
 800c92a:	dc27      	bgt.n	800c97c <__kernel_rem_pio2f+0xb4>
 800c92c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c930:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800cbd4 <__kernel_rem_pio2f+0x30c>
 800c934:	4627      	mov	r7, r4
 800c936:	2600      	movs	r6, #0
 800c938:	e016      	b.n	800c968 <__kernel_rem_pio2f+0xa0>
 800c93a:	2000      	movs	r0, #0
 800c93c:	e7dc      	b.n	800c8f8 <__kernel_rem_pio2f+0x30>
 800c93e:	42e7      	cmn	r7, r4
 800c940:	bf5d      	ittte	pl
 800c942:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800c946:	ee07 3a90 	vmovpl	s15, r3
 800c94a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c94e:	eef0 7a47 	vmovmi.f32	s15, s14
 800c952:	ece6 7a01 	vstmia	r6!, {s15}
 800c956:	3401      	adds	r4, #1
 800c958:	e7dc      	b.n	800c914 <__kernel_rem_pio2f+0x4c>
 800c95a:	ecf9 6a01 	vldmia	r9!, {s13}
 800c95e:	ed97 7a00 	vldr	s14, [r7]
 800c962:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c966:	3601      	adds	r6, #1
 800c968:	428e      	cmp	r6, r1
 800c96a:	f1a7 0704 	sub.w	r7, r7, #4
 800c96e:	ddf4      	ble.n	800c95a <__kernel_rem_pio2f+0x92>
 800c970:	eceb 7a01 	vstmia	fp!, {s15}
 800c974:	f10c 0c01 	add.w	ip, ip, #1
 800c978:	3404      	adds	r4, #4
 800c97a:	e7d5      	b.n	800c928 <__kernel_rem_pio2f+0x60>
 800c97c:	ab08      	add	r3, sp, #32
 800c97e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800c982:	eddf 8a93 	vldr	s17, [pc, #588]	; 800cbd0 <__kernel_rem_pio2f+0x308>
 800c986:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800cbcc <__kernel_rem_pio2f+0x304>
 800c98a:	9304      	str	r3, [sp, #16]
 800c98c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800c990:	4656      	mov	r6, sl
 800c992:	00b3      	lsls	r3, r6, #2
 800c994:	9305      	str	r3, [sp, #20]
 800c996:	ab58      	add	r3, sp, #352	; 0x160
 800c998:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800c99c:	ac08      	add	r4, sp, #32
 800c99e:	ab44      	add	r3, sp, #272	; 0x110
 800c9a0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800c9a4:	46a4      	mov	ip, r4
 800c9a6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800c9aa:	4637      	mov	r7, r6
 800c9ac:	2f00      	cmp	r7, #0
 800c9ae:	f1a0 0004 	sub.w	r0, r0, #4
 800c9b2:	dc4f      	bgt.n	800ca54 <__kernel_rem_pio2f+0x18c>
 800c9b4:	4628      	mov	r0, r5
 800c9b6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800c9ba:	f000 fb61 	bl	800d080 <scalbnf>
 800c9be:	eeb0 8a40 	vmov.f32	s16, s0
 800c9c2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800c9c6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c9ca:	f000 fb17 	bl	800cffc <floorf>
 800c9ce:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800c9d2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c9d6:	2d00      	cmp	r5, #0
 800c9d8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800c9dc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c9e0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800c9e4:	ee17 9a90 	vmov	r9, s15
 800c9e8:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c9ec:	dd44      	ble.n	800ca78 <__kernel_rem_pio2f+0x1b0>
 800c9ee:	f106 3cff 	add.w	ip, r6, #4294967295
 800c9f2:	ab08      	add	r3, sp, #32
 800c9f4:	f1c5 0e08 	rsb	lr, r5, #8
 800c9f8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800c9fc:	fa47 f00e 	asr.w	r0, r7, lr
 800ca00:	4481      	add	r9, r0
 800ca02:	fa00 f00e 	lsl.w	r0, r0, lr
 800ca06:	1a3f      	subs	r7, r7, r0
 800ca08:	f1c5 0007 	rsb	r0, r5, #7
 800ca0c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800ca10:	4107      	asrs	r7, r0
 800ca12:	2f00      	cmp	r7, #0
 800ca14:	dd3f      	ble.n	800ca96 <__kernel_rem_pio2f+0x1ce>
 800ca16:	f04f 0e00 	mov.w	lr, #0
 800ca1a:	f109 0901 	add.w	r9, r9, #1
 800ca1e:	4673      	mov	r3, lr
 800ca20:	4576      	cmp	r6, lr
 800ca22:	dc6b      	bgt.n	800cafc <__kernel_rem_pio2f+0x234>
 800ca24:	2d00      	cmp	r5, #0
 800ca26:	dd04      	ble.n	800ca32 <__kernel_rem_pio2f+0x16a>
 800ca28:	2d01      	cmp	r5, #1
 800ca2a:	d078      	beq.n	800cb1e <__kernel_rem_pio2f+0x256>
 800ca2c:	2d02      	cmp	r5, #2
 800ca2e:	f000 8081 	beq.w	800cb34 <__kernel_rem_pio2f+0x26c>
 800ca32:	2f02      	cmp	r7, #2
 800ca34:	d12f      	bne.n	800ca96 <__kernel_rem_pio2f+0x1ce>
 800ca36:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ca3a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ca3e:	b353      	cbz	r3, 800ca96 <__kernel_rem_pio2f+0x1ce>
 800ca40:	4628      	mov	r0, r5
 800ca42:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800ca46:	f000 fb1b 	bl	800d080 <scalbnf>
 800ca4a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800ca4e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ca52:	e020      	b.n	800ca96 <__kernel_rem_pio2f+0x1ce>
 800ca54:	ee60 7a28 	vmul.f32	s15, s0, s17
 800ca58:	3f01      	subs	r7, #1
 800ca5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ca5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca62:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800ca66:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ca6a:	ecac 0a01 	vstmia	ip!, {s0}
 800ca6e:	ed90 0a00 	vldr	s0, [r0]
 800ca72:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ca76:	e799      	b.n	800c9ac <__kernel_rem_pio2f+0xe4>
 800ca78:	d105      	bne.n	800ca86 <__kernel_rem_pio2f+0x1be>
 800ca7a:	1e70      	subs	r0, r6, #1
 800ca7c:	ab08      	add	r3, sp, #32
 800ca7e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800ca82:	11ff      	asrs	r7, r7, #7
 800ca84:	e7c5      	b.n	800ca12 <__kernel_rem_pio2f+0x14a>
 800ca86:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ca8a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ca8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca92:	da31      	bge.n	800caf8 <__kernel_rem_pio2f+0x230>
 800ca94:	2700      	movs	r7, #0
 800ca96:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ca9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca9e:	f040 809b 	bne.w	800cbd8 <__kernel_rem_pio2f+0x310>
 800caa2:	1e74      	subs	r4, r6, #1
 800caa4:	46a4      	mov	ip, r4
 800caa6:	2000      	movs	r0, #0
 800caa8:	45d4      	cmp	ip, sl
 800caaa:	da4a      	bge.n	800cb42 <__kernel_rem_pio2f+0x27a>
 800caac:	2800      	cmp	r0, #0
 800caae:	d07a      	beq.n	800cba6 <__kernel_rem_pio2f+0x2de>
 800cab0:	ab08      	add	r3, sp, #32
 800cab2:	3d08      	subs	r5, #8
 800cab4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	f000 8081 	beq.w	800cbc0 <__kernel_rem_pio2f+0x2f8>
 800cabe:	4628      	mov	r0, r5
 800cac0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cac4:	00a5      	lsls	r5, r4, #2
 800cac6:	f000 fadb 	bl	800d080 <scalbnf>
 800caca:	aa44      	add	r2, sp, #272	; 0x110
 800cacc:	1d2b      	adds	r3, r5, #4
 800cace:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800cbd0 <__kernel_rem_pio2f+0x308>
 800cad2:	18d1      	adds	r1, r2, r3
 800cad4:	4622      	mov	r2, r4
 800cad6:	2a00      	cmp	r2, #0
 800cad8:	f280 80ae 	bge.w	800cc38 <__kernel_rem_pio2f+0x370>
 800cadc:	4622      	mov	r2, r4
 800cade:	2a00      	cmp	r2, #0
 800cae0:	f2c0 80cc 	blt.w	800cc7c <__kernel_rem_pio2f+0x3b4>
 800cae4:	a944      	add	r1, sp, #272	; 0x110
 800cae6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800caea:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800cbc8 <__kernel_rem_pio2f+0x300>
 800caee:	eddf 7a39 	vldr	s15, [pc, #228]	; 800cbd4 <__kernel_rem_pio2f+0x30c>
 800caf2:	2000      	movs	r0, #0
 800caf4:	1aa1      	subs	r1, r4, r2
 800caf6:	e0b6      	b.n	800cc66 <__kernel_rem_pio2f+0x39e>
 800caf8:	2702      	movs	r7, #2
 800cafa:	e78c      	b.n	800ca16 <__kernel_rem_pio2f+0x14e>
 800cafc:	6820      	ldr	r0, [r4, #0]
 800cafe:	b94b      	cbnz	r3, 800cb14 <__kernel_rem_pio2f+0x24c>
 800cb00:	b118      	cbz	r0, 800cb0a <__kernel_rem_pio2f+0x242>
 800cb02:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800cb06:	6020      	str	r0, [r4, #0]
 800cb08:	2001      	movs	r0, #1
 800cb0a:	f10e 0e01 	add.w	lr, lr, #1
 800cb0e:	3404      	adds	r4, #4
 800cb10:	4603      	mov	r3, r0
 800cb12:	e785      	b.n	800ca20 <__kernel_rem_pio2f+0x158>
 800cb14:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800cb18:	6020      	str	r0, [r4, #0]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	e7f5      	b.n	800cb0a <__kernel_rem_pio2f+0x242>
 800cb1e:	1e74      	subs	r4, r6, #1
 800cb20:	a808      	add	r0, sp, #32
 800cb22:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800cb26:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800cb2a:	f10d 0c20 	add.w	ip, sp, #32
 800cb2e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800cb32:	e77e      	b.n	800ca32 <__kernel_rem_pio2f+0x16a>
 800cb34:	1e74      	subs	r4, r6, #1
 800cb36:	a808      	add	r0, sp, #32
 800cb38:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800cb3c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800cb40:	e7f3      	b.n	800cb2a <__kernel_rem_pio2f+0x262>
 800cb42:	ab08      	add	r3, sp, #32
 800cb44:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800cb48:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cb4c:	4318      	orrs	r0, r3
 800cb4e:	e7ab      	b.n	800caa8 <__kernel_rem_pio2f+0x1e0>
 800cb50:	f10c 0c01 	add.w	ip, ip, #1
 800cb54:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800cb58:	2c00      	cmp	r4, #0
 800cb5a:	d0f9      	beq.n	800cb50 <__kernel_rem_pio2f+0x288>
 800cb5c:	9b05      	ldr	r3, [sp, #20]
 800cb5e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800cb62:	eb0d 0003 	add.w	r0, sp, r3
 800cb66:	9b01      	ldr	r3, [sp, #4]
 800cb68:	18f4      	adds	r4, r6, r3
 800cb6a:	ab1c      	add	r3, sp, #112	; 0x70
 800cb6c:	1c77      	adds	r7, r6, #1
 800cb6e:	384c      	subs	r0, #76	; 0x4c
 800cb70:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cb74:	4466      	add	r6, ip
 800cb76:	42be      	cmp	r6, r7
 800cb78:	f6ff af0b 	blt.w	800c992 <__kernel_rem_pio2f+0xca>
 800cb7c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800cb80:	f8dd e008 	ldr.w	lr, [sp, #8]
 800cb84:	ee07 3a90 	vmov	s15, r3
 800cb88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb8c:	f04f 0c00 	mov.w	ip, #0
 800cb90:	ece4 7a01 	vstmia	r4!, {s15}
 800cb94:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800cbd4 <__kernel_rem_pio2f+0x30c>
 800cb98:	46a1      	mov	r9, r4
 800cb9a:	458c      	cmp	ip, r1
 800cb9c:	dd07      	ble.n	800cbae <__kernel_rem_pio2f+0x2e6>
 800cb9e:	ece0 7a01 	vstmia	r0!, {s15}
 800cba2:	3701      	adds	r7, #1
 800cba4:	e7e7      	b.n	800cb76 <__kernel_rem_pio2f+0x2ae>
 800cba6:	9804      	ldr	r0, [sp, #16]
 800cba8:	f04f 0c01 	mov.w	ip, #1
 800cbac:	e7d2      	b.n	800cb54 <__kernel_rem_pio2f+0x28c>
 800cbae:	ecfe 6a01 	vldmia	lr!, {s13}
 800cbb2:	ed39 7a01 	vldmdb	r9!, {s14}
 800cbb6:	f10c 0c01 	add.w	ip, ip, #1
 800cbba:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cbbe:	e7ec      	b.n	800cb9a <__kernel_rem_pio2f+0x2d2>
 800cbc0:	3c01      	subs	r4, #1
 800cbc2:	e775      	b.n	800cab0 <__kernel_rem_pio2f+0x1e8>
 800cbc4:	0800d998 	.word	0x0800d998
 800cbc8:	0800d96c 	.word	0x0800d96c
 800cbcc:	43800000 	.word	0x43800000
 800cbd0:	3b800000 	.word	0x3b800000
 800cbd4:	00000000 	.word	0x00000000
 800cbd8:	9b03      	ldr	r3, [sp, #12]
 800cbda:	eeb0 0a48 	vmov.f32	s0, s16
 800cbde:	1a98      	subs	r0, r3, r2
 800cbe0:	f000 fa4e 	bl	800d080 <scalbnf>
 800cbe4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800cbcc <__kernel_rem_pio2f+0x304>
 800cbe8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800cbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbf0:	db19      	blt.n	800cc26 <__kernel_rem_pio2f+0x35e>
 800cbf2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800cbd0 <__kernel_rem_pio2f+0x308>
 800cbf6:	ee60 7a27 	vmul.f32	s15, s0, s15
 800cbfa:	aa08      	add	r2, sp, #32
 800cbfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc00:	1c74      	adds	r4, r6, #1
 800cc02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc06:	3508      	adds	r5, #8
 800cc08:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800cc0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc10:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cc14:	ee10 3a10 	vmov	r3, s0
 800cc18:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800cc1c:	ee17 3a90 	vmov	r3, s15
 800cc20:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800cc24:	e74b      	b.n	800cabe <__kernel_rem_pio2f+0x1f6>
 800cc26:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cc2a:	aa08      	add	r2, sp, #32
 800cc2c:	ee10 3a10 	vmov	r3, s0
 800cc30:	4634      	mov	r4, r6
 800cc32:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800cc36:	e742      	b.n	800cabe <__kernel_rem_pio2f+0x1f6>
 800cc38:	a808      	add	r0, sp, #32
 800cc3a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800cc3e:	9001      	str	r0, [sp, #4]
 800cc40:	ee07 0a90 	vmov	s15, r0
 800cc44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc48:	3a01      	subs	r2, #1
 800cc4a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800cc4e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800cc52:	ed61 7a01 	vstmdb	r1!, {s15}
 800cc56:	e73e      	b.n	800cad6 <__kernel_rem_pio2f+0x20e>
 800cc58:	ecfc 6a01 	vldmia	ip!, {s13}
 800cc5c:	ecb6 7a01 	vldmia	r6!, {s14}
 800cc60:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cc64:	3001      	adds	r0, #1
 800cc66:	4550      	cmp	r0, sl
 800cc68:	dc01      	bgt.n	800cc6e <__kernel_rem_pio2f+0x3a6>
 800cc6a:	4288      	cmp	r0, r1
 800cc6c:	ddf4      	ble.n	800cc58 <__kernel_rem_pio2f+0x390>
 800cc6e:	a858      	add	r0, sp, #352	; 0x160
 800cc70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cc74:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800cc78:	3a01      	subs	r2, #1
 800cc7a:	e730      	b.n	800cade <__kernel_rem_pio2f+0x216>
 800cc7c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800cc7e:	2a02      	cmp	r2, #2
 800cc80:	dc09      	bgt.n	800cc96 <__kernel_rem_pio2f+0x3ce>
 800cc82:	2a00      	cmp	r2, #0
 800cc84:	dc2a      	bgt.n	800ccdc <__kernel_rem_pio2f+0x414>
 800cc86:	d043      	beq.n	800cd10 <__kernel_rem_pio2f+0x448>
 800cc88:	f009 0007 	and.w	r0, r9, #7
 800cc8c:	b059      	add	sp, #356	; 0x164
 800cc8e:	ecbd 8b04 	vpop	{d8-d9}
 800cc92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc96:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800cc98:	2b03      	cmp	r3, #3
 800cc9a:	d1f5      	bne.n	800cc88 <__kernel_rem_pio2f+0x3c0>
 800cc9c:	ab30      	add	r3, sp, #192	; 0xc0
 800cc9e:	442b      	add	r3, r5
 800cca0:	461a      	mov	r2, r3
 800cca2:	4619      	mov	r1, r3
 800cca4:	4620      	mov	r0, r4
 800cca6:	2800      	cmp	r0, #0
 800cca8:	f1a1 0104 	sub.w	r1, r1, #4
 800ccac:	dc51      	bgt.n	800cd52 <__kernel_rem_pio2f+0x48a>
 800ccae:	4621      	mov	r1, r4
 800ccb0:	2901      	cmp	r1, #1
 800ccb2:	f1a2 0204 	sub.w	r2, r2, #4
 800ccb6:	dc5c      	bgt.n	800cd72 <__kernel_rem_pio2f+0x4aa>
 800ccb8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800cbd4 <__kernel_rem_pio2f+0x30c>
 800ccbc:	3304      	adds	r3, #4
 800ccbe:	2c01      	cmp	r4, #1
 800ccc0:	dc67      	bgt.n	800cd92 <__kernel_rem_pio2f+0x4ca>
 800ccc2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800ccc6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800ccca:	2f00      	cmp	r7, #0
 800cccc:	d167      	bne.n	800cd9e <__kernel_rem_pio2f+0x4d6>
 800ccce:	edc8 6a00 	vstr	s13, [r8]
 800ccd2:	ed88 7a01 	vstr	s14, [r8, #4]
 800ccd6:	edc8 7a02 	vstr	s15, [r8, #8]
 800ccda:	e7d5      	b.n	800cc88 <__kernel_rem_pio2f+0x3c0>
 800ccdc:	aa30      	add	r2, sp, #192	; 0xc0
 800ccde:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800cbd4 <__kernel_rem_pio2f+0x30c>
 800cce2:	4413      	add	r3, r2
 800cce4:	4622      	mov	r2, r4
 800cce6:	2a00      	cmp	r2, #0
 800cce8:	da24      	bge.n	800cd34 <__kernel_rem_pio2f+0x46c>
 800ccea:	b34f      	cbz	r7, 800cd40 <__kernel_rem_pio2f+0x478>
 800ccec:	eef1 7a47 	vneg.f32	s15, s14
 800ccf0:	edc8 7a00 	vstr	s15, [r8]
 800ccf4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800ccf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ccfc:	aa31      	add	r2, sp, #196	; 0xc4
 800ccfe:	2301      	movs	r3, #1
 800cd00:	429c      	cmp	r4, r3
 800cd02:	da20      	bge.n	800cd46 <__kernel_rem_pio2f+0x47e>
 800cd04:	b10f      	cbz	r7, 800cd0a <__kernel_rem_pio2f+0x442>
 800cd06:	eef1 7a67 	vneg.f32	s15, s15
 800cd0a:	edc8 7a01 	vstr	s15, [r8, #4]
 800cd0e:	e7bb      	b.n	800cc88 <__kernel_rem_pio2f+0x3c0>
 800cd10:	aa30      	add	r2, sp, #192	; 0xc0
 800cd12:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800cbd4 <__kernel_rem_pio2f+0x30c>
 800cd16:	4413      	add	r3, r2
 800cd18:	2c00      	cmp	r4, #0
 800cd1a:	da05      	bge.n	800cd28 <__kernel_rem_pio2f+0x460>
 800cd1c:	b10f      	cbz	r7, 800cd22 <__kernel_rem_pio2f+0x45a>
 800cd1e:	eef1 7a67 	vneg.f32	s15, s15
 800cd22:	edc8 7a00 	vstr	s15, [r8]
 800cd26:	e7af      	b.n	800cc88 <__kernel_rem_pio2f+0x3c0>
 800cd28:	ed33 7a01 	vldmdb	r3!, {s14}
 800cd2c:	3c01      	subs	r4, #1
 800cd2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd32:	e7f1      	b.n	800cd18 <__kernel_rem_pio2f+0x450>
 800cd34:	ed73 7a01 	vldmdb	r3!, {s15}
 800cd38:	3a01      	subs	r2, #1
 800cd3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cd3e:	e7d2      	b.n	800cce6 <__kernel_rem_pio2f+0x41e>
 800cd40:	eef0 7a47 	vmov.f32	s15, s14
 800cd44:	e7d4      	b.n	800ccf0 <__kernel_rem_pio2f+0x428>
 800cd46:	ecb2 7a01 	vldmia	r2!, {s14}
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd50:	e7d6      	b.n	800cd00 <__kernel_rem_pio2f+0x438>
 800cd52:	edd1 7a00 	vldr	s15, [r1]
 800cd56:	edd1 6a01 	vldr	s13, [r1, #4]
 800cd5a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cd5e:	3801      	subs	r0, #1
 800cd60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cd64:	ed81 7a00 	vstr	s14, [r1]
 800cd68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd6c:	edc1 7a01 	vstr	s15, [r1, #4]
 800cd70:	e799      	b.n	800cca6 <__kernel_rem_pio2f+0x3de>
 800cd72:	edd2 7a00 	vldr	s15, [r2]
 800cd76:	edd2 6a01 	vldr	s13, [r2, #4]
 800cd7a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cd7e:	3901      	subs	r1, #1
 800cd80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cd84:	ed82 7a00 	vstr	s14, [r2]
 800cd88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd8c:	edc2 7a01 	vstr	s15, [r2, #4]
 800cd90:	e78e      	b.n	800ccb0 <__kernel_rem_pio2f+0x3e8>
 800cd92:	ed33 7a01 	vldmdb	r3!, {s14}
 800cd96:	3c01      	subs	r4, #1
 800cd98:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd9c:	e78f      	b.n	800ccbe <__kernel_rem_pio2f+0x3f6>
 800cd9e:	eef1 6a66 	vneg.f32	s13, s13
 800cda2:	eeb1 7a47 	vneg.f32	s14, s14
 800cda6:	edc8 6a00 	vstr	s13, [r8]
 800cdaa:	ed88 7a01 	vstr	s14, [r8, #4]
 800cdae:	eef1 7a67 	vneg.f32	s15, s15
 800cdb2:	e790      	b.n	800ccd6 <__kernel_rem_pio2f+0x40e>

0800cdb4 <__kernel_sinf>:
 800cdb4:	ee10 3a10 	vmov	r3, s0
 800cdb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cdbc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800cdc0:	da04      	bge.n	800cdcc <__kernel_sinf+0x18>
 800cdc2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800cdc6:	ee17 3a90 	vmov	r3, s15
 800cdca:	b35b      	cbz	r3, 800ce24 <__kernel_sinf+0x70>
 800cdcc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cdd0:	eddf 7a15 	vldr	s15, [pc, #84]	; 800ce28 <__kernel_sinf+0x74>
 800cdd4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800ce2c <__kernel_sinf+0x78>
 800cdd8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cddc:	eddf 7a14 	vldr	s15, [pc, #80]	; 800ce30 <__kernel_sinf+0x7c>
 800cde0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cde4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800ce34 <__kernel_sinf+0x80>
 800cde8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800cdec:	eddf 7a12 	vldr	s15, [pc, #72]	; 800ce38 <__kernel_sinf+0x84>
 800cdf0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800cdf4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cdf8:	b930      	cbnz	r0, 800ce08 <__kernel_sinf+0x54>
 800cdfa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800ce3c <__kernel_sinf+0x88>
 800cdfe:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ce02:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ce06:	4770      	bx	lr
 800ce08:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ce0c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800ce10:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ce14:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ce18:	eddf 7a09 	vldr	s15, [pc, #36]	; 800ce40 <__kernel_sinf+0x8c>
 800ce1c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ce20:	ee30 0a60 	vsub.f32	s0, s0, s1
 800ce24:	4770      	bx	lr
 800ce26:	bf00      	nop
 800ce28:	2f2ec9d3 	.word	0x2f2ec9d3
 800ce2c:	b2d72f34 	.word	0xb2d72f34
 800ce30:	3638ef1b 	.word	0x3638ef1b
 800ce34:	b9500d01 	.word	0xb9500d01
 800ce38:	3c088889 	.word	0x3c088889
 800ce3c:	be2aaaab 	.word	0xbe2aaaab
 800ce40:	3e2aaaab 	.word	0x3e2aaaab

0800ce44 <atanf>:
 800ce44:	b538      	push	{r3, r4, r5, lr}
 800ce46:	ee10 5a10 	vmov	r5, s0
 800ce4a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800ce4e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800ce52:	eef0 7a40 	vmov.f32	s15, s0
 800ce56:	db10      	blt.n	800ce7a <atanf+0x36>
 800ce58:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ce5c:	dd04      	ble.n	800ce68 <atanf+0x24>
 800ce5e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ce62:	eeb0 0a67 	vmov.f32	s0, s15
 800ce66:	bd38      	pop	{r3, r4, r5, pc}
 800ce68:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800cfa0 <atanf+0x15c>
 800ce6c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800cfa4 <atanf+0x160>
 800ce70:	2d00      	cmp	r5, #0
 800ce72:	bfd8      	it	le
 800ce74:	eef0 7a40 	vmovle.f32	s15, s0
 800ce78:	e7f3      	b.n	800ce62 <atanf+0x1e>
 800ce7a:	4b4b      	ldr	r3, [pc, #300]	; (800cfa8 <atanf+0x164>)
 800ce7c:	429c      	cmp	r4, r3
 800ce7e:	dc10      	bgt.n	800cea2 <atanf+0x5e>
 800ce80:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800ce84:	da0a      	bge.n	800ce9c <atanf+0x58>
 800ce86:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800cfac <atanf+0x168>
 800ce8a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ce8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce92:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ce96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce9a:	dce2      	bgt.n	800ce62 <atanf+0x1e>
 800ce9c:	f04f 33ff 	mov.w	r3, #4294967295
 800cea0:	e013      	b.n	800ceca <atanf+0x86>
 800cea2:	f000 f8a3 	bl	800cfec <fabsf>
 800cea6:	4b42      	ldr	r3, [pc, #264]	; (800cfb0 <atanf+0x16c>)
 800cea8:	429c      	cmp	r4, r3
 800ceaa:	dc4f      	bgt.n	800cf4c <atanf+0x108>
 800ceac:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800ceb0:	429c      	cmp	r4, r3
 800ceb2:	dc41      	bgt.n	800cf38 <atanf+0xf4>
 800ceb4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800ceb8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800cebc:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cec0:	2300      	movs	r3, #0
 800cec2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cec6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ceca:	1c5a      	adds	r2, r3, #1
 800cecc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ced0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800cfb4 <atanf+0x170>
 800ced4:	eddf 5a38 	vldr	s11, [pc, #224]	; 800cfb8 <atanf+0x174>
 800ced8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800cfbc <atanf+0x178>
 800cedc:	ee66 6a06 	vmul.f32	s13, s12, s12
 800cee0:	eee6 5a87 	vfma.f32	s11, s13, s14
 800cee4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800cfc0 <atanf+0x17c>
 800cee8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ceec:	eddf 5a35 	vldr	s11, [pc, #212]	; 800cfc4 <atanf+0x180>
 800cef0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cef4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800cfc8 <atanf+0x184>
 800cef8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cefc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cfcc <atanf+0x188>
 800cf00:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cf04:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800cfd0 <atanf+0x18c>
 800cf08:	eea6 5a87 	vfma.f32	s10, s13, s14
 800cf0c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800cfd4 <atanf+0x190>
 800cf10:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cf14:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800cfd8 <atanf+0x194>
 800cf18:	eea7 5a26 	vfma.f32	s10, s14, s13
 800cf1c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800cfdc <atanf+0x198>
 800cf20:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cf24:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cf28:	eea5 7a86 	vfma.f32	s14, s11, s12
 800cf2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cf30:	d121      	bne.n	800cf76 <atanf+0x132>
 800cf32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf36:	e794      	b.n	800ce62 <atanf+0x1e>
 800cf38:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cf3c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800cf40:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cf44:	2301      	movs	r3, #1
 800cf46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cf4a:	e7be      	b.n	800ceca <atanf+0x86>
 800cf4c:	4b24      	ldr	r3, [pc, #144]	; (800cfe0 <atanf+0x19c>)
 800cf4e:	429c      	cmp	r4, r3
 800cf50:	dc0b      	bgt.n	800cf6a <atanf+0x126>
 800cf52:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800cf56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf5a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cf5e:	2302      	movs	r3, #2
 800cf60:	ee70 6a67 	vsub.f32	s13, s0, s15
 800cf64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf68:	e7af      	b.n	800ceca <atanf+0x86>
 800cf6a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800cf6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cf72:	2303      	movs	r3, #3
 800cf74:	e7a9      	b.n	800ceca <atanf+0x86>
 800cf76:	4a1b      	ldr	r2, [pc, #108]	; (800cfe4 <atanf+0x1a0>)
 800cf78:	491b      	ldr	r1, [pc, #108]	; (800cfe8 <atanf+0x1a4>)
 800cf7a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cf7e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800cf82:	ed93 0a00 	vldr	s0, [r3]
 800cf86:	ee37 7a40 	vsub.f32	s14, s14, s0
 800cf8a:	ed92 0a00 	vldr	s0, [r2]
 800cf8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf92:	2d00      	cmp	r5, #0
 800cf94:	ee70 7a67 	vsub.f32	s15, s0, s15
 800cf98:	bfb8      	it	lt
 800cf9a:	eef1 7a67 	vneglt.f32	s15, s15
 800cf9e:	e760      	b.n	800ce62 <atanf+0x1e>
 800cfa0:	3fc90fdb 	.word	0x3fc90fdb
 800cfa4:	bfc90fdb 	.word	0xbfc90fdb
 800cfa8:	3edfffff 	.word	0x3edfffff
 800cfac:	7149f2ca 	.word	0x7149f2ca
 800cfb0:	3f97ffff 	.word	0x3f97ffff
 800cfb4:	3c8569d7 	.word	0x3c8569d7
 800cfb8:	3d4bda59 	.word	0x3d4bda59
 800cfbc:	bd6ef16b 	.word	0xbd6ef16b
 800cfc0:	3d886b35 	.word	0x3d886b35
 800cfc4:	3dba2e6e 	.word	0x3dba2e6e
 800cfc8:	3e124925 	.word	0x3e124925
 800cfcc:	3eaaaaab 	.word	0x3eaaaaab
 800cfd0:	bd15a221 	.word	0xbd15a221
 800cfd4:	bd9d8795 	.word	0xbd9d8795
 800cfd8:	bde38e38 	.word	0xbde38e38
 800cfdc:	be4ccccd 	.word	0xbe4ccccd
 800cfe0:	401bffff 	.word	0x401bffff
 800cfe4:	0800d9a4 	.word	0x0800d9a4
 800cfe8:	0800d9b4 	.word	0x0800d9b4

0800cfec <fabsf>:
 800cfec:	ee10 3a10 	vmov	r3, s0
 800cff0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cff4:	ee00 3a10 	vmov	s0, r3
 800cff8:	4770      	bx	lr
	...

0800cffc <floorf>:
 800cffc:	ee10 3a10 	vmov	r3, s0
 800d000:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d004:	3a7f      	subs	r2, #127	; 0x7f
 800d006:	2a16      	cmp	r2, #22
 800d008:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d00c:	dc2a      	bgt.n	800d064 <floorf+0x68>
 800d00e:	2a00      	cmp	r2, #0
 800d010:	da11      	bge.n	800d036 <floorf+0x3a>
 800d012:	eddf 7a18 	vldr	s15, [pc, #96]	; 800d074 <floorf+0x78>
 800d016:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d01a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d01e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d022:	dd05      	ble.n	800d030 <floorf+0x34>
 800d024:	2b00      	cmp	r3, #0
 800d026:	da23      	bge.n	800d070 <floorf+0x74>
 800d028:	4a13      	ldr	r2, [pc, #76]	; (800d078 <floorf+0x7c>)
 800d02a:	2900      	cmp	r1, #0
 800d02c:	bf18      	it	ne
 800d02e:	4613      	movne	r3, r2
 800d030:	ee00 3a10 	vmov	s0, r3
 800d034:	4770      	bx	lr
 800d036:	4911      	ldr	r1, [pc, #68]	; (800d07c <floorf+0x80>)
 800d038:	4111      	asrs	r1, r2
 800d03a:	420b      	tst	r3, r1
 800d03c:	d0fa      	beq.n	800d034 <floorf+0x38>
 800d03e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800d074 <floorf+0x78>
 800d042:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d046:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d04a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d04e:	ddef      	ble.n	800d030 <floorf+0x34>
 800d050:	2b00      	cmp	r3, #0
 800d052:	bfbe      	ittt	lt
 800d054:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800d058:	fa40 f202 	asrlt.w	r2, r0, r2
 800d05c:	189b      	addlt	r3, r3, r2
 800d05e:	ea23 0301 	bic.w	r3, r3, r1
 800d062:	e7e5      	b.n	800d030 <floorf+0x34>
 800d064:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d068:	d3e4      	bcc.n	800d034 <floorf+0x38>
 800d06a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d06e:	4770      	bx	lr
 800d070:	2300      	movs	r3, #0
 800d072:	e7dd      	b.n	800d030 <floorf+0x34>
 800d074:	7149f2ca 	.word	0x7149f2ca
 800d078:	bf800000 	.word	0xbf800000
 800d07c:	007fffff 	.word	0x007fffff

0800d080 <scalbnf>:
 800d080:	ee10 3a10 	vmov	r3, s0
 800d084:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800d088:	d025      	beq.n	800d0d6 <scalbnf+0x56>
 800d08a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d08e:	d302      	bcc.n	800d096 <scalbnf+0x16>
 800d090:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d094:	4770      	bx	lr
 800d096:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800d09a:	d122      	bne.n	800d0e2 <scalbnf+0x62>
 800d09c:	4b2a      	ldr	r3, [pc, #168]	; (800d148 <scalbnf+0xc8>)
 800d09e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d14c <scalbnf+0xcc>
 800d0a2:	4298      	cmp	r0, r3
 800d0a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d0a8:	db16      	blt.n	800d0d8 <scalbnf+0x58>
 800d0aa:	ee10 3a10 	vmov	r3, s0
 800d0ae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d0b2:	3a19      	subs	r2, #25
 800d0b4:	4402      	add	r2, r0
 800d0b6:	2afe      	cmp	r2, #254	; 0xfe
 800d0b8:	dd15      	ble.n	800d0e6 <scalbnf+0x66>
 800d0ba:	ee10 3a10 	vmov	r3, s0
 800d0be:	eddf 7a24 	vldr	s15, [pc, #144]	; 800d150 <scalbnf+0xd0>
 800d0c2:	eddf 6a24 	vldr	s13, [pc, #144]	; 800d154 <scalbnf+0xd4>
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	eeb0 7a67 	vmov.f32	s14, s15
 800d0cc:	bfb8      	it	lt
 800d0ce:	eef0 7a66 	vmovlt.f32	s15, s13
 800d0d2:	ee27 0a27 	vmul.f32	s0, s14, s15
 800d0d6:	4770      	bx	lr
 800d0d8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d158 <scalbnf+0xd8>
 800d0dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d0e0:	4770      	bx	lr
 800d0e2:	0dd2      	lsrs	r2, r2, #23
 800d0e4:	e7e6      	b.n	800d0b4 <scalbnf+0x34>
 800d0e6:	2a00      	cmp	r2, #0
 800d0e8:	dd06      	ble.n	800d0f8 <scalbnf+0x78>
 800d0ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d0ee:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d0f2:	ee00 3a10 	vmov	s0, r3
 800d0f6:	4770      	bx	lr
 800d0f8:	f112 0f16 	cmn.w	r2, #22
 800d0fc:	da1a      	bge.n	800d134 <scalbnf+0xb4>
 800d0fe:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d102:	4298      	cmp	r0, r3
 800d104:	ee10 3a10 	vmov	r3, s0
 800d108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d10c:	dd0a      	ble.n	800d124 <scalbnf+0xa4>
 800d10e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800d150 <scalbnf+0xd0>
 800d112:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800d154 <scalbnf+0xd4>
 800d116:	eef0 7a40 	vmov.f32	s15, s0
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	bf18      	it	ne
 800d11e:	eeb0 0a47 	vmovne.f32	s0, s14
 800d122:	e7db      	b.n	800d0dc <scalbnf+0x5c>
 800d124:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800d158 <scalbnf+0xd8>
 800d128:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d15c <scalbnf+0xdc>
 800d12c:	eef0 7a40 	vmov.f32	s15, s0
 800d130:	2b00      	cmp	r3, #0
 800d132:	e7f3      	b.n	800d11c <scalbnf+0x9c>
 800d134:	3219      	adds	r2, #25
 800d136:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d13a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d13e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d160 <scalbnf+0xe0>
 800d142:	ee07 3a10 	vmov	s14, r3
 800d146:	e7c4      	b.n	800d0d2 <scalbnf+0x52>
 800d148:	ffff3cb0 	.word	0xffff3cb0
 800d14c:	4c000000 	.word	0x4c000000
 800d150:	7149f2ca 	.word	0x7149f2ca
 800d154:	f149f2ca 	.word	0xf149f2ca
 800d158:	0da24260 	.word	0x0da24260
 800d15c:	8da24260 	.word	0x8da24260
 800d160:	33000000 	.word	0x33000000

0800d164 <_init>:
 800d164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d166:	bf00      	nop
 800d168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d16a:	bc08      	pop	{r3}
 800d16c:	469e      	mov	lr, r3
 800d16e:	4770      	bx	lr

0800d170 <_fini>:
 800d170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d172:	bf00      	nop
 800d174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d176:	bc08      	pop	{r3}
 800d178:	469e      	mov	lr, r3
 800d17a:	4770      	bx	lr
