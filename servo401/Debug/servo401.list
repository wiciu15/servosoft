
servo401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c740  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006dc  0800c8e0  0800c8e0  0001c8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfbc  0800cfbc  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800cfbc  0800cfbc  0001cfbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cfc4  0800cfc4  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfc4  0800cfc4  0001cfc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cfc8  0800cfc8  0001cfc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800cfcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005364  20000168  0800d134  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200054cc  0800d134  000254cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f204  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040d0  00000000  00000000  0003f39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001760  00000000  00000000  00043470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f0  00000000  00000000  00044bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a586  00000000  00000000  000461c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be87  00000000  00000000  00060746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5efa  00000000  00000000  0007c5cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001224c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006784  00000000  00000000  00122518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000168 	.word	0x20000168
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c8c8 	.word	0x0800c8c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000016c 	.word	0x2000016c
 80001dc:	0800c8c8 	.word	0x0800c8c8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <modbus_protocol_read>:
uint16_t modbus_registers_buffer[30] = {0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}; //modbus holding registers

extern UART_HandleTypeDef huart1;
extern DMA_HandleTypeDef hdma_usart1_rx;

uint16_t modbus_protocol_read(uint32_t la){
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]

	if(la>=40001 && la<=40030)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f649 4240 	movw	r2, #40000	; 0x9c40
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d90c      	bls.n	8000510 <modbus_protocol_read+0x2c>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f649 425e 	movw	r2, #40030	; 0x9c5e
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d807      	bhi.n	8000510 <modbus_protocol_read+0x2c>
	{return modbus_registers_buffer[la-40001];}else{
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8000506:	3b41      	subs	r3, #65	; 0x41
 8000508:	4a05      	ldr	r2, [pc, #20]	; (8000520 <modbus_protocol_read+0x3c>)
 800050a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800050e:	e001      	b.n	8000514 <modbus_protocol_read+0x30>
		return 0xFFFF;
 8000510:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 8000514:	4618      	mov	r0, r3
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	20000000 	.word	0x20000000

08000524 <modbus_protocol_write>:

uint16_t modbus_protocol_write(uint32_t la, uint16_t value)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	460b      	mov	r3, r1
 800052e:	807b      	strh	r3, [r7, #2]
	uint8_t local_address=la-40001;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	b2db      	uxtb	r3, r3
 8000534:	3b41      	subs	r3, #65	; 0x41
 8000536:	73fb      	strb	r3, [r7, #15]
	switch (local_address){
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	3b02      	subs	r3, #2
 800053c:	2b06      	cmp	r3, #6
 800053e:	f200 80df 	bhi.w	8000700 <modbus_protocol_write+0x1dc>
 8000542:	a201      	add	r2, pc, #4	; (adr r2, 8000548 <modbus_protocol_write+0x24>)
 8000544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000548:	08000565 	.word	0x08000565
 800054c:	08000581 	.word	0x08000581
 8000550:	08000701 	.word	0x08000701
 8000554:	080005b9 	.word	0x080005b9
 8000558:	080005d7 	.word	0x080005d7
 800055c:	08000645 	.word	0x08000645
 8000560:	080006e9 	.word	0x080006e9
	case 2://error register
		if(value==0){inverter_error = no_error;inverter_state=stop;modbus_registers_buffer[2]=value;}break; //acknowledge error
 8000564:	887b      	ldrh	r3, [r7, #2]
 8000566:	2b00      	cmp	r3, #0
 8000568:	f040 80cc 	bne.w	8000704 <modbus_protocol_write+0x1e0>
 800056c:	4b6b      	ldr	r3, [pc, #428]	; (800071c <modbus_protocol_write+0x1f8>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
 8000572:	4b6b      	ldr	r3, [pc, #428]	; (8000720 <modbus_protocol_write+0x1fc>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
 8000578:	4a6a      	ldr	r2, [pc, #424]	; (8000724 <modbus_protocol_write+0x200>)
 800057a:	887b      	ldrh	r3, [r7, #2]
 800057c:	8093      	strh	r3, [r2, #4]
 800057e:	e0c1      	b.n	8000704 <modbus_protocol_write+0x1e0>
	case 3: //control register
		switch(value){
 8000580:	887b      	ldrh	r3, [r7, #2]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d002      	beq.n	800058c <modbus_protocol_write+0x68>
 8000586:	2b01      	cmp	r3, #1
 8000588:	d009      	beq.n	800059e <modbus_protocol_write+0x7a>
 800058a:	e011      	b.n	80005b0 <modbus_protocol_write+0x8c>
		case 0:
			modbus_registers_buffer[3] = value;inverter_disable();inverter_state=stop;break;
 800058c:	4a65      	ldr	r2, [pc, #404]	; (8000724 <modbus_protocol_write+0x200>)
 800058e:	887b      	ldrh	r3, [r7, #2]
 8000590:	80d3      	strh	r3, [r2, #6]
 8000592:	f000 fa27 	bl	80009e4 <inverter_disable>
 8000596:	4b62      	ldr	r3, [pc, #392]	; (8000720 <modbus_protocol_write+0x1fc>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
 800059c:	e00b      	b.n	80005b6 <modbus_protocol_write+0x92>
		case 1:
			modbus_registers_buffer[3] = value;inverter_state=run;inverter_enable();break;
 800059e:	4a61      	ldr	r2, [pc, #388]	; (8000724 <modbus_protocol_write+0x200>)
 80005a0:	887b      	ldrh	r3, [r7, #2]
 80005a2:	80d3      	strh	r3, [r2, #6]
 80005a4:	4b5e      	ldr	r3, [pc, #376]	; (8000720 <modbus_protocol_write+0x1fc>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	701a      	strb	r2, [r3, #0]
 80005aa:	f000 f9cf 	bl	800094c <inverter_enable>
 80005ae:	e002      	b.n	80005b6 <modbus_protocol_write+0x92>
		default:
			inverter_disable();break;
 80005b0:	f000 fa18 	bl	80009e4 <inverter_disable>
 80005b4:	bf00      	nop
		}
		break;
 80005b6:	e0ac      	b.n	8000712 <modbus_protocol_write+0x1ee>
		case 5: //operation mode register
			if(value<=2){control_mode=value;
 80005b8:	887b      	ldrh	r3, [r7, #2]
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	f200 80a4 	bhi.w	8000708 <modbus_protocol_write+0x1e4>
 80005c0:	887b      	ldrh	r3, [r7, #2]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	4b58      	ldr	r3, [pc, #352]	; (8000728 <modbus_protocol_write+0x204>)
 80005c6:	701a      	strb	r2, [r3, #0]
			modbus_registers_buffer[5]=control_mode;}
 80005c8:	4b57      	ldr	r3, [pc, #348]	; (8000728 <modbus_protocol_write+0x204>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	4b54      	ldr	r3, [pc, #336]	; (8000724 <modbus_protocol_write+0x200>)
 80005d2:	815a      	strh	r2, [r3, #10]
			break;
 80005d4:	e098      	b.n	8000708 <modbus_protocol_write+0x1e4>
		case 6: //speed setpoint in rpm
		{int16_t received_speed=value;
 80005d6:	887b      	ldrh	r3, [r7, #2]
 80005d8:	817b      	strh	r3, [r7, #10]
		if(control_mode==manual){
 80005da:	4b53      	ldr	r3, [pc, #332]	; (8000728 <modbus_protocol_write+0x204>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d119      	bne.n	8000618 <modbus_protocol_write+0xf4>
			if((received_speed)<=1000 && (received_speed)>=(-1000) ){speed_setpoint_deg_s = (float)received_speed*6.0f;}
 80005e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005ec:	dc11      	bgt.n	8000612 <modbus_protocol_write+0xee>
 80005ee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005f2:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80005f6:	db0c      	blt.n	8000612 <modbus_protocol_write+0xee>
 80005f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005fc:	ee07 3a90 	vmov	s15, r3
 8000600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000604:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000608:	ee67 7a87 	vmul.f32	s15, s15, s14
 800060c:	4b47      	ldr	r3, [pc, #284]	; (800072c <modbus_protocol_write+0x208>)
 800060e:	edc3 7a00 	vstr	s15, [r3]
			modbus_registers_buffer[6]=(uint16_t)received_speed;
 8000612:	897a      	ldrh	r2, [r7, #10]
 8000614:	4b43      	ldr	r3, [pc, #268]	; (8000724 <modbus_protocol_write+0x200>)
 8000616:	819a      	strh	r2, [r3, #12]
		}
		if(control_mode==foc){
 8000618:	4b43      	ldr	r3, [pc, #268]	; (8000728 <modbus_protocol_write+0x204>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b02      	cmp	r3, #2
 8000620:	d174      	bne.n	800070c <modbus_protocol_write+0x1e8>
			if((received_speed)<=1000 && (received_speed)>=(-1000) ){speed_setpoint_rpm = received_speed;}
 8000622:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000626:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800062a:	dc07      	bgt.n	800063c <modbus_protocol_write+0x118>
 800062c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000630:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000634:	db02      	blt.n	800063c <modbus_protocol_write+0x118>
 8000636:	4a3e      	ldr	r2, [pc, #248]	; (8000730 <modbus_protocol_write+0x20c>)
 8000638:	897b      	ldrh	r3, [r7, #10]
 800063a:	8013      	strh	r3, [r2, #0]
			modbus_registers_buffer[6]=(uint16_t)received_speed;
 800063c:	897a      	ldrh	r2, [r7, #10]
 800063e:	4b39      	ldr	r3, [pc, #228]	; (8000724 <modbus_protocol_write+0x200>)
 8000640:	819a      	strh	r2, [r3, #12]
		}
		break;}
 8000642:	e063      	b.n	800070c <modbus_protocol_write+0x1e8>
		case 7: //set output voltage in manual/torque in foc
		{if(control_mode==manual){
 8000644:	4b38      	ldr	r3, [pc, #224]	; (8000728 <modbus_protocol_write+0x204>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d122      	bne.n	8000694 <modbus_protocol_write+0x170>
			uint8_t received_duty_cycle_percent=value;
 800064e:	887b      	ldrh	r3, [r7, #2]
 8000650:	73bb      	strb	r3, [r7, #14]
			if(value<=100 && value>=0){duty_cycle = ((float)received_duty_cycle_percent/100.0f)*(float)duty_cycle_limit;}
 8000652:	887b      	ldrh	r3, [r7, #2]
 8000654:	2b64      	cmp	r3, #100	; 0x64
 8000656:	d813      	bhi.n	8000680 <modbus_protocol_write+0x15c>
 8000658:	7bbb      	ldrb	r3, [r7, #14]
 800065a:	ee07 3a90 	vmov	s15, r3
 800065e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000662:	eddf 6a34 	vldr	s13, [pc, #208]	; 8000734 <modbus_protocol_write+0x210>
 8000666:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800066a:	4b33      	ldr	r3, [pc, #204]	; (8000738 <modbus_protocol_write+0x214>)
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	ee07 3a90 	vmov	s15, r3
 8000672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800067a:	4b30      	ldr	r3, [pc, #192]	; (800073c <modbus_protocol_write+0x218>)
 800067c:	edc3 7a00 	vstr	s15, [r3]
			modbus_registers_buffer[7]=duty_cycle;
 8000680:	4b2e      	ldr	r3, [pc, #184]	; (800073c <modbus_protocol_write+0x218>)
 8000682:	edd3 7a00 	vldr	s15, [r3]
 8000686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800068a:	ee17 3a90 	vmov	r3, s15
 800068e:	b29a      	uxth	r2, r3
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <modbus_protocol_write+0x200>)
 8000692:	81da      	strh	r2, [r3, #14]
		}
		if(control_mode==foc){
 8000694:	4b24      	ldr	r3, [pc, #144]	; (8000728 <modbus_protocol_write+0x204>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b02      	cmp	r3, #2
 800069c:	d138      	bne.n	8000710 <modbus_protocol_write+0x1ec>
			int8_t received_torque_setpoint = (int16_t)value;
 800069e:	887b      	ldrh	r3, [r7, #2]
 80006a0:	737b      	strb	r3, [r7, #13]
			if(received_torque_setpoint>=-100 && received_torque_setpoint<=100){
 80006a2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80006a6:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80006aa:	db31      	blt.n	8000710 <modbus_protocol_write+0x1ec>
 80006ac:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80006b0:	2b64      	cmp	r3, #100	; 0x64
 80006b2:	dc2d      	bgt.n	8000710 <modbus_protocol_write+0x1ec>
				if(speed_setpoint_rpm==0){
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <modbus_protocol_write+0x20c>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	b21b      	sxth	r3, r3
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d128      	bne.n	8000710 <modbus_protocol_write+0x1ec>
					torque_setpoint=received_torque_setpoint;
 80006be:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80006c2:	ee07 3a90 	vmov	s15, r3
 80006c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ca:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <modbus_protocol_write+0x21c>)
 80006cc:	edc3 7a00 	vstr	s15, [r3]
					modbus_registers_buffer[7]=(int16_t)torque_setpoint;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <modbus_protocol_write+0x21c>)
 80006d2:	edd3 7a00 	vldr	s15, [r3]
 80006d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006da:	ee17 3a90 	vmov	r3, s15
 80006de:	b21b      	sxth	r3, r3
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <modbus_protocol_write+0x200>)
 80006e4:	81da      	strh	r2, [r3, #14]
				}
			}
		}

		break;
 80006e6:	e013      	b.n	8000710 <modbus_protocol_write+0x1ec>
	case 8:
		if(value<=3){
 80006e8:	887b      	ldrh	r3, [r7, #2]
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d808      	bhi.n	8000700 <modbus_protocol_write+0x1dc>
			motor_feedback_type=value;
 80006ee:	887b      	ldrh	r3, [r7, #2]
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <modbus_protocol_write+0x220>)
 80006f4:	701a      	strb	r2, [r3, #0]
		modbus_registers_buffer[8]=motor_feedback_type;}
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <modbus_protocol_write+0x220>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <modbus_protocol_write+0x200>)
 80006fe:	821a      	strh	r2, [r3, #16]
		}
	default:
		//if not handled inside switch, then read-only parameter
		break;
 8000700:	bf00      	nop
 8000702:	e006      	b.n	8000712 <modbus_protocol_write+0x1ee>
		if(value==0){inverter_error = no_error;inverter_state=stop;modbus_registers_buffer[2]=value;}break; //acknowledge error
 8000704:	bf00      	nop
 8000706:	e004      	b.n	8000712 <modbus_protocol_write+0x1ee>
			break;
 8000708:	bf00      	nop
 800070a:	e002      	b.n	8000712 <modbus_protocol_write+0x1ee>
		break;}
 800070c:	bf00      	nop
 800070e:	e000      	b.n	8000712 <modbus_protocol_write+0x1ee>
		break;
 8000710:	bf00      	nop
	}
	return value;
 8000712:	887b      	ldrh	r3, [r7, #2]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2000053c 	.word	0x2000053c
 8000720:	2000094d 	.word	0x2000094d
 8000724:	20000000 	.word	0x20000000
 8000728:	2000094c 	.word	0x2000094c
 800072c:	20000950 	.word	0x20000950
 8000730:	20000954 	.word	0x20000954
 8000734:	42c80000 	.word	0x42c80000
 8000738:	0800c928 	.word	0x0800c928
 800073c:	2000095c 	.word	0x2000095c
 8000740:	20000970 	.word	0x20000970
 8000744:	200000ee 	.word	0x200000ee

08000748 <mbus_send>:

int mbus_send(const mbus_t context,const uint8_t* data, const uint16_t size){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
 8000754:	4613      	mov	r3, r2
 8000756:	80bb      	strh	r3, [r7, #4]
	UNUSED(context);
	HAL_GPIO_WritePin(MODBUS_DE_GPIO_Port,MODBUS_DE_Pin, 1);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075e:	480a      	ldr	r0, [pc, #40]	; (8000788 <mbus_send+0x40>)
 8000760:	f005 f86a 	bl	8005838 <HAL_GPIO_WritePin>
	if(HAL_UART_Transmit_DMA( &huart1, (uint8_t*) data,size)==HAL_OK){
 8000764:	88bb      	ldrh	r3, [r7, #4]
 8000766:	461a      	mov	r2, r3
 8000768:	6839      	ldr	r1, [r7, #0]
 800076a:	4808      	ldr	r0, [pc, #32]	; (800078c <mbus_send+0x44>)
 800076c:	f006 ffca 	bl	8007704 <HAL_UART_Transmit_DMA>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d101      	bne.n	800077a <mbus_send+0x32>
		return MBUS_OK;
 8000776:	2300      	movs	r3, #0
 8000778:	e001      	b.n	800077e <mbus_send+0x36>
	}else{return MBUS_ERROR;}
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40020400 	.word	0x40020400
 800078c:	20000708 	.word	0x20000708

08000790 <Modbus_init>:

void Modbus_init(){
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
	/* Device slave address */
	mb_config.devaddr = 0x01;
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <Modbus_init+0x68>)
 8000798:	2201      	movs	r2, #1
 800079a:	701a      	strb	r2, [r3, #0]

	/* Just ptr on any external object, you can get it by context */
	mb_config.device = (void*) 0;
 800079c:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <Modbus_init+0x68>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]

	uint8_t * pmodbusSendBuffer;
	pmodbusSendBuffer=&modbusSendBufer;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <Modbus_init+0x6c>)
 80007a4:	60fb      	str	r3, [r7, #12]
	mb_config.sendbuf = pmodbusSendBuffer;
 80007a6:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <Modbus_init+0x68>)
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	6193      	str	r3, [r2, #24]
	mb_config.sendbuf_sz = sizeof(modbusSendBufer);
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <Modbus_init+0x68>)
 80007ae:	2264      	movs	r2, #100	; 0x64
 80007b0:	839a      	strh	r2, [r3, #28]

	uint8_t * pmodbusRecvBuffer;
	pmodbusRecvBuffer=&modbusReceiveBufer;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <Modbus_init+0x70>)
 80007b4:	60bb      	str	r3, [r7, #8]
	mb_config.recvbuf = pmodbusRecvBuffer;
 80007b6:	4a10      	ldr	r2, [pc, #64]	; (80007f8 <Modbus_init+0x68>)
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	6213      	str	r3, [r2, #32]
	mb_config.recvbuf_sz = sizeof(modbusReceiveBufer);
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <Modbus_init+0x68>)
 80007be:	2264      	movs	r2, #100	; 0x64
 80007c0:	849a      	strh	r2, [r3, #36]	; 0x24

	/* This that function for sending some data (use sendbuf for buf) */
	mb_config.send = &mbus_send;
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <Modbus_init+0x68>)
 80007c4:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <Modbus_init+0x74>)
 80007c6:	60da      	str	r2, [r3, #12]

	Modbus_Conf_t * pconf;
	pconf=&mb_config;
 80007c8:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <Modbus_init+0x68>)
 80007ca:	607b      	str	r3, [r7, #4]
	//User Read callback function ( read by logical address)
	pconf->read = modbus_protocol_read;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <Modbus_init+0x78>)
 80007d0:	611a      	str	r2, [r3, #16]

	//Write callback function
	pconf->write = modbus_protocol_write;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a0d      	ldr	r2, [pc, #52]	; (800080c <Modbus_init+0x7c>)
 80007d6:	615a      	str	r2, [r3, #20]

	//Open modbus contex
	modbus = mbus_open(pconf);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f002 fe5d 	bl	8003498 <mbus_open>
 80007de:	4603      	mov	r3, r0
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <Modbus_init+0x80>)
 80007e4:	701a      	strb	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, UART_RX_buf, sizeof(UART_RX_buf));
 80007e6:	22c8      	movs	r2, #200	; 0xc8
 80007e8:	490a      	ldr	r1, [pc, #40]	; (8000814 <Modbus_init+0x84>)
 80007ea:	480b      	ldr	r0, [pc, #44]	; (8000818 <Modbus_init+0x88>)
 80007ec:	f007 f838 	bl	8007860 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000188 	.word	0x20000188
 80007fc:	20000474 	.word	0x20000474
 8000800:	200004d8 	.word	0x200004d8
 8000804:	08000749 	.word	0x08000749
 8000808:	080004e5 	.word	0x080004e5
 800080c:	08000525 	.word	0x08000525
 8000810:	20000184 	.word	0x20000184
 8000814:	200001b0 	.word	0x200001b0
 8000818:	20000708 	.word	0x20000708

0800081c <modbus_process_new_data_to_fifo>:

void modbus_process_new_data_to_fifo(UART_HandleTypeDef *huart, uint16_t Size){
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a29      	ldr	r2, [pc, #164]	; (80008d4 <modbus_process_new_data_to_fifo+0xb8>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d14c      	bne.n	80008cc <modbus_process_new_data_to_fifo+0xb0>
	{
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) UART_RX_buf, sizeof(UART_RX_buf));
 8000832:	22c8      	movs	r2, #200	; 0xc8
 8000834:	4928      	ldr	r1, [pc, #160]	; (80008d8 <modbus_process_new_data_to_fifo+0xbc>)
 8000836:	4829      	ldr	r0, [pc, #164]	; (80008dc <modbus_process_new_data_to_fifo+0xc0>)
 8000838:	f007 f812 	bl	8007860 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800083c:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <modbus_process_new_data_to_fifo+0xc4>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	4b27      	ldr	r3, [pc, #156]	; (80008e0 <modbus_process_new_data_to_fifo+0xc4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f022 0208 	bic.w	r2, r2, #8
 800084a:	601a      	str	r2, [r3, #0]

		fifo_oldpos = fifo_newpos;  // Update the last position before copying new data
 800084c:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <modbus_process_new_data_to_fifo+0xc8>)
 800084e:	881a      	ldrh	r2, [r3, #0]
 8000850:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <modbus_process_new_data_to_fifo+0xcc>)
 8000852:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (fifo_oldpos+Size > sizeof(UART_RX_FIFO)-1)  // If the current position + new data size is greater than the main buffer
 8000854:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <modbus_process_new_data_to_fifo+0xcc>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	887b      	ldrh	r3, [r7, #2]
 800085c:	4413      	add	r3, r2
 800085e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000862:	d322      	bcc.n	80008aa <modbus_process_new_data_to_fifo+0x8e>
		{
			uint16_t datatocopy = sizeof(UART_RX_FIFO)-fifo_oldpos;  // find out how much space is left in the main buffer
 8000864:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <modbus_process_new_data_to_fifo+0xcc>)
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800086c:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)UART_RX_FIFO+fifo_oldpos, UART_RX_buf, datatocopy);  // copy data in that remaining space
 800086e:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <modbus_process_new_data_to_fifo+0xcc>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	461a      	mov	r2, r3
 8000874:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <modbus_process_new_data_to_fifo+0xd0>)
 8000876:	4413      	add	r3, r2
 8000878:	89fa      	ldrh	r2, [r7, #14]
 800087a:	4917      	ldr	r1, [pc, #92]	; (80008d8 <modbus_process_new_data_to_fifo+0xbc>)
 800087c:	4618      	mov	r0, r3
 800087e:	f00a ff71 	bl	800b764 <memcpy>

			fifo_oldpos = 0;  // point to the start of the buffer
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <modbus_process_new_data_to_fifo+0xcc>)
 8000884:	2200      	movs	r2, #0
 8000886:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)UART_RX_FIFO, (uint8_t *)UART_RX_buf+datatocopy, (Size-datatocopy));  // copy the remaining data
 8000888:	89fb      	ldrh	r3, [r7, #14]
 800088a:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <modbus_process_new_data_to_fifo+0xbc>)
 800088c:	1899      	adds	r1, r3, r2
 800088e:	887a      	ldrh	r2, [r7, #2]
 8000890:	89fb      	ldrh	r3, [r7, #14]
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	461a      	mov	r2, r3
 8000896:	4815      	ldr	r0, [pc, #84]	; (80008ec <modbus_process_new_data_to_fifo+0xd0>)
 8000898:	f00a ff64 	bl	800b764 <memcpy>
			fifo_newpos = (Size-datatocopy);  // update the position
 800089c:	887a      	ldrh	r2, [r7, #2]
 800089e:	89fb      	ldrh	r3, [r7, #14]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <modbus_process_new_data_to_fifo+0xc8>)
 80008a6:	801a      	strh	r2, [r3, #0]
		}



	}
}
 80008a8:	e010      	b.n	80008cc <modbus_process_new_data_to_fifo+0xb0>
			memcpy ((uint8_t *)UART_RX_FIFO+fifo_oldpos, UART_RX_buf, Size);
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <modbus_process_new_data_to_fifo+0xcc>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	461a      	mov	r2, r3
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <modbus_process_new_data_to_fifo+0xd0>)
 80008b2:	4413      	add	r3, r2
 80008b4:	887a      	ldrh	r2, [r7, #2]
 80008b6:	4908      	ldr	r1, [pc, #32]	; (80008d8 <modbus_process_new_data_to_fifo+0xbc>)
 80008b8:	4618      	mov	r0, r3
 80008ba:	f00a ff53 	bl	800b764 <memcpy>
			fifo_newpos = Size+fifo_oldpos;
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <modbus_process_new_data_to_fifo+0xcc>)
 80008c0:	881a      	ldrh	r2, [r3, #0]
 80008c2:	887b      	ldrh	r3, [r7, #2]
 80008c4:	4413      	add	r3, r2
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <modbus_process_new_data_to_fifo+0xc8>)
 80008ca:	801a      	strh	r2, [r3, #0]
}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40011000 	.word	0x40011000
 80008d8:	200001b0 	.word	0x200001b0
 80008dc:	20000708 	.word	0x20000708
 80008e0:	20000790 	.word	0x20000790
 80008e4:	2000046e 	.word	0x2000046e
 80008e8:	2000046c 	.word	0x2000046c
 80008ec:	20000278 	.word	0x20000278

080008f0 <process_modbus_command>:

void process_modbus_command(){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	while(fifo_read_pos!=fifo_newpos){
 80008f4:	e019      	b.n	800092a <process_modbus_command+0x3a>
		mbus_poll(modbus, UART_RX_FIFO[fifo_read_pos] );
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <process_modbus_command+0x4c>)
 80008f8:	f993 3000 	ldrsb.w	r3, [r3]
 80008fc:	4a10      	ldr	r2, [pc, #64]	; (8000940 <process_modbus_command+0x50>)
 80008fe:	8812      	ldrh	r2, [r2, #0]
 8000900:	4611      	mov	r1, r2
 8000902:	4a10      	ldr	r2, [pc, #64]	; (8000944 <process_modbus_command+0x54>)
 8000904:	5c52      	ldrb	r2, [r2, r1]
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f003 f81d 	bl	8003948 <mbus_poll>
		fifo_read_pos++;
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <process_modbus_command+0x50>)
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	3301      	adds	r3, #1
 8000914:	b29a      	uxth	r2, r3
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <process_modbus_command+0x50>)
 8000918:	801a      	strh	r2, [r3, #0]
		if(fifo_read_pos>=sizeof(UART_RX_FIFO)){
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <process_modbus_command+0x50>)
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000922:	d302      	bcc.n	800092a <process_modbus_command+0x3a>
			fifo_read_pos=0;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <process_modbus_command+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	801a      	strh	r2, [r3, #0]
	while(fifo_read_pos!=fifo_newpos){
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <process_modbus_command+0x50>)
 800092c:	881a      	ldrh	r2, [r3, #0]
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <process_modbus_command+0x58>)
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	429a      	cmp	r2, r3
 8000934:	d1df      	bne.n	80008f6 <process_modbus_command+0x6>
		}
	}

}
 8000936:	bf00      	nop
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000184 	.word	0x20000184
 8000940:	20000470 	.word	0x20000470
 8000944:	20000278 	.word	0x20000278
 8000948:	2000046e 	.word	0x2000046e

0800094c <inverter_enable>:
extern TIM_HandleTypeDef htim1;
extern UART_HandleTypeDef huart1;
volatile inverter_error_t inverter_error=no_error;


void inverter_enable(){
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	if(inverter_error==0){
 8000950:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <inverter_enable+0x78>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	d131      	bne.n	80009be <inverter_enable+0x72>
		inverter_state=run;
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <inverter_enable+0x7c>)
 800095c:	2201      	movs	r2, #1
 800095e:	701a      	strb	r2, [r3, #0]
		speed_setpoint_deg_s=0.0f;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <inverter_enable+0x80>)
 8000962:	f04f 0200 	mov.w	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
		duty_cycle=0.0f;
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <inverter_enable+0x84>)
 800096a:	f04f 0200 	mov.w	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
		TIM1->CCR1=0;
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <inverter_enable+0x88>)
 8000972:	2200      	movs	r2, #0
 8000974:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=0;
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <inverter_enable+0x88>)
 8000978:	2200      	movs	r2, #0
 800097a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=0;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <inverter_enable+0x88>)
 800097e:	2200      	movs	r2, #0
 8000980:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(INV_ENABLE_GPIO_Port, INV_ENABLE_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000988:	4813      	ldr	r0, [pc, #76]	; (80009d8 <inverter_enable+0x8c>)
 800098a:	f004 ff55 	bl	8005838 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INV_ENABLE_GPIO_Port, INV_ENABLE_Pin, GPIO_PIN_SET);
 800098e:	2201      	movs	r2, #1
 8000990:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000994:	4810      	ldr	r0, [pc, #64]	; (80009d8 <inverter_enable+0x8c>)
 8000996:	f004 ff4f 	bl	8005838 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SOFTSTART_GPIO_Port, SOFTSTART_Pin, 1);
 800099a:	2201      	movs	r2, #1
 800099c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a0:	480e      	ldr	r0, [pc, #56]	; (80009dc <inverter_enable+0x90>)
 80009a2:	f004 ff49 	bl	8005838 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80009a6:	2100      	movs	r1, #0
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <inverter_enable+0x94>)
 80009aa:	f005 fcf1 	bl	8006390 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80009ae:	2104      	movs	r1, #4
 80009b0:	480b      	ldr	r0, [pc, #44]	; (80009e0 <inverter_enable+0x94>)
 80009b2:	f005 fced 	bl	8006390 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 80009b6:	2108      	movs	r1, #8
 80009b8:	4809      	ldr	r0, [pc, #36]	; (80009e0 <inverter_enable+0x94>)
 80009ba:	f005 fce9 	bl	8006390 <HAL_TIM_PWM_Start>
	}
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2000053c 	.word	0x2000053c
 80009c8:	2000094d 	.word	0x2000094d
 80009cc:	20000950 	.word	0x20000950
 80009d0:	2000095c 	.word	0x2000095c
 80009d4:	40010000 	.word	0x40010000
 80009d8:	40020400 	.word	0x40020400
 80009dc:	40020800 	.word	0x40020800
 80009e0:	200005e8 	.word	0x200005e8

080009e4 <inverter_disable>:

void inverter_disable(){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	speed_setpoint_deg_s=0.0f;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <inverter_disable+0x68>)
 80009ea:	f04f 0200 	mov.w	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
	duty_cycle=0.0f;
 80009f0:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <inverter_disable+0x6c>)
 80009f2:	f04f 0200 	mov.w	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
	inverter_state=stop;
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <inverter_disable+0x70>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
	//TIM1->CCR1=0;TIM1->CCR2=0;TIM1->CCR3=0;
	HAL_GPIO_WritePin(INV_DISABLE_GPIO_Port, INV_DISABLE_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a04:	4814      	ldr	r0, [pc, #80]	; (8000a58 <inverter_disable+0x74>)
 8000a06:	f004 ff17 	bl	8005838 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INV_DISABLE_GPIO_Port, INV_DISABLE_Pin, GPIO_PIN_SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a10:	4811      	ldr	r0, [pc, #68]	; (8000a58 <inverter_disable+0x74>)
 8000a12:	f004 ff11 	bl	8005838 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SOFTSTART_GPIO_Port, SOFTSTART_Pin, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a1c:	480f      	ldr	r0, [pc, #60]	; (8000a5c <inverter_disable+0x78>)
 8000a1e:	f004 ff0b 	bl	8005838 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8000a22:	2100      	movs	r1, #0
 8000a24:	480e      	ldr	r0, [pc, #56]	; (8000a60 <inverter_disable+0x7c>)
 8000a26:	f005 fd63 	bl	80064f0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2);
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <inverter_disable+0x7c>)
 8000a2e:	f005 fd5f 	bl	80064f0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_3);
 8000a32:	2108      	movs	r1, #8
 8000a34:	480a      	ldr	r0, [pc, #40]	; (8000a60 <inverter_disable+0x7c>)
 8000a36:	f005 fd5b 	bl	80064f0 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 8000a3a:	4809      	ldr	r0, [pc, #36]	; (8000a60 <inverter_disable+0x7c>)
 8000a3c:	f005 fc20 	bl	8006280 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim1); //restart base timer to keep 16khz tim1_update ISR active for reading current and encoder data when inverter not working
 8000a40:	4807      	ldr	r0, [pc, #28]	; (8000a60 <inverter_disable+0x7c>)
 8000a42:	f005 fbbb 	bl	80061bc <HAL_TIM_Base_Start_IT>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000950 	.word	0x20000950
 8000a50:	2000095c 	.word	0x2000095c
 8000a54:	2000094d 	.word	0x2000094d
 8000a58:	40020400 	.word	0x40020400
 8000a5c:	40020800 	.word	0x40020800
 8000a60:	200005e8 	.word	0x200005e8

08000a64 <inverter_error_trip>:

void inverter_error_trip(inverter_error_t error){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
	inverter_disable();
 8000a6e:	f7ff ffb9 	bl	80009e4 <inverter_disable>
	inverter_state=trip;
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <inverter_error_trip+0x2c>)
 8000a74:	2203      	movs	r2, #3
 8000a76:	701a      	strb	r2, [r3, #0]
	inverter_error=error;
 8000a78:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <inverter_error_trip+0x30>)
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	7013      	strb	r3, [r2, #0]
	modbus_registers_buffer[2]=error;
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <inverter_error_trip+0x34>)
 8000a84:	809a      	strh	r2, [r3, #4]
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000094d 	.word	0x2000094d
 8000a94:	2000053c 	.word	0x2000053c
 8000a98:	20000000 	.word	0x20000000

08000a9c <park_transform>:

void park_transform(float I_U,float I_V,float motor_angle,float * I_d,float * I_q){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	ed2d 8b02 	vpush	{d8}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	ed87 0a05 	vstr	s0, [r7, #20]
 8000aaa:	edc7 0a04 	vstr	s1, [r7, #16]
 8000aae:	ed87 1a03 	vstr	s2, [r7, #12]
 8000ab2:	60b8      	str	r0, [r7, #8]
 8000ab4:	6079      	str	r1, [r7, #4]
	float Ialfa=I_U;
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
	float Ibeta=(0.5773502f * I_U) + (1.1547005f * I_V);
 8000aba:	edd7 7a05 	vldr	s15, [r7, #20]
 8000abe:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000b64 <park_transform+0xc8>
 8000ac2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ac6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000aca:	eddf 6a27 	vldr	s13, [pc, #156]	; 8000b68 <park_transform+0xcc>
 8000ace:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ad6:	edc7 7a08 	vstr	s15, [r7, #32]
	float motor_angle_rad = (motor_angle/180.0f)*3.141592f;
 8000ada:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ade:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000b6c <park_transform+0xd0>
 8000ae2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ae6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000b70 <park_transform+0xd4>
 8000aea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aee:	edc7 7a07 	vstr	s15, [r7, #28]
	*I_q = (Ialfa * cosf(motor_angle_rad)) + (Ibeta * sinf(motor_angle_rad));
 8000af2:	ed97 0a07 	vldr	s0, [r7, #28]
 8000af6:	f00a ff0d 	bl	800b914 <cosf>
 8000afa:	eeb0 7a40 	vmov.f32	s14, s0
 8000afe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000b02:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000b06:	ed97 0a07 	vldr	s0, [r7, #28]
 8000b0a:	f00a ff47 	bl	800b99c <sinf>
 8000b0e:	eeb0 7a40 	vmov.f32	s14, s0
 8000b12:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b1a:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	edc3 7a00 	vstr	s15, [r3]
	*I_d = (Ialfa * sinf(motor_angle_rad)*(-1)) + (Ibeta * cosf(motor_angle_rad));
 8000b24:	ed97 0a07 	vldr	s0, [r7, #28]
 8000b28:	f00a fef4 	bl	800b914 <cosf>
 8000b2c:	eeb0 7a40 	vmov.f32	s14, s0
 8000b30:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b34:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000b38:	ed97 0a07 	vldr	s0, [r7, #28]
 8000b3c:	f00a ff2e 	bl	800b99c <sinf>
 8000b40:	eeb0 7a40 	vmov.f32	s14, s0
 8000b44:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b4c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	edc3 7a00 	vstr	s15, [r3]
}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	; 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	ecbd 8b02 	vpop	{d8}
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	3f13cd39 	.word	0x3f13cd39
 8000b68:	3f93cd3a 	.word	0x3f93cd3a
 8000b6c:	43340000 	.word	0x43340000
 8000b70:	40490fd8 	.word	0x40490fd8

08000b74 <inv_park_transform>:


void inv_park_transform(float U_d,float U_q, float motor_angle, float * U_alpha, float * U_beta){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	ed2d 8b02 	vpush	{d8}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000b82:	edc7 0a04 	vstr	s1, [r7, #16]
 8000b86:	ed87 1a03 	vstr	s2, [r7, #12]
 8000b8a:	60b8      	str	r0, [r7, #8]
 8000b8c:	6079      	str	r1, [r7, #4]
	float motor_angle_rad = (motor_angle/180.0f)*3.141592f;
 8000b8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b92:	eddf 6a21 	vldr	s13, [pc, #132]	; 8000c18 <inv_park_transform+0xa4>
 8000b96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b9a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000c1c <inv_park_transform+0xa8>
 8000b9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ba2:	edc7 7a07 	vstr	s15, [r7, #28]
	*U_alpha= (U_d * cosf(motor_angle_rad)) - (U_q * sinf(motor_angle_rad));
 8000ba6:	ed97 0a07 	vldr	s0, [r7, #28]
 8000baa:	f00a feb3 	bl	800b914 <cosf>
 8000bae:	eeb0 7a40 	vmov.f32	s14, s0
 8000bb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bb6:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000bba:	ed97 0a07 	vldr	s0, [r7, #28]
 8000bbe:	f00a feed 	bl	800b99c <sinf>
 8000bc2:	eeb0 7a40 	vmov.f32	s14, s0
 8000bc6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bce:	ee78 7a67 	vsub.f32	s15, s16, s15
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	edc3 7a00 	vstr	s15, [r3]
	*U_beta = (U_d * sinf(motor_angle_rad)) + (U_q * cosf(motor_angle_rad));
 8000bd8:	ed97 0a07 	vldr	s0, [r7, #28]
 8000bdc:	f00a fede 	bl	800b99c <sinf>
 8000be0:	eeb0 7a40 	vmov.f32	s14, s0
 8000be4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000be8:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000bec:	ed97 0a07 	vldr	s0, [r7, #28]
 8000bf0:	f00a fe90 	bl	800b914 <cosf>
 8000bf4:	eeb0 7a40 	vmov.f32	s14, s0
 8000bf8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c00:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	edc3 7a00 	vstr	s15, [r3]
}
 8000c0a:	bf00      	nop
 8000c0c:	3720      	adds	r7, #32
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	ecbd 8b02 	vpop	{d8}
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	43340000 	.word	0x43340000
 8000c1c:	40490fd8 	.word	0x40490fd8

08000c20 <LowPassFilter>:

//Tf - filter time constant in seconds
float LowPassFilter(float Tf,float actual_measurement, float * last_filtered_value){
 8000c20:	b480      	push	{r7}
 8000c22:	b087      	sub	sp, #28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	ed87 0a03 	vstr	s0, [r7, #12]
 8000c2a:	edc7 0a02 	vstr	s1, [r7, #8]
 8000c2e:	6078      	str	r0, [r7, #4]
	float alpha = Tf/(Tf + 0.0002f); //0.0002 = 1/5kHz - pwm interrupt frequency and sampling
 8000c30:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c34:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000c8c <LowPassFilter+0x6c>
 8000c38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000c3c:	edd7 6a03 	vldr	s13, [r7, #12]
 8000c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c44:	edc7 7a05 	vstr	s15, [r7, #20]
	float filtered_value = (alpha*(*last_filtered_value)) + ((1.0f - alpha)*actual_measurement);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	ed93 7a00 	vldr	s14, [r3]
 8000c4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000c5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c5e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000c62:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c6e:	edc7 7a04 	vstr	s15, [r7, #16]
	*last_filtered_value = filtered_value;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	601a      	str	r2, [r3, #0]
	return filtered_value;
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	ee07 3a90 	vmov	s15, r3
}
 8000c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c82:	371c      	adds	r7, #28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	3951b717 	.word	0x3951b717

08000c90 <output_sine_pwm>:
		sine=0;
	}
	return sine;
}

void output_sine_pwm(float angle,uint16_t max_duty_cycle){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	ed87 0a01 	vstr	s0, [r7, #4]
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	807b      	strh	r3, [r7, #2]
	float angle_rad = (angle/180.0f)*3.141592f;
 8000c9e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ca2:	eddf 6a46 	vldr	s13, [pc, #280]	; 8000dbc <output_sine_pwm+0x12c>
 8000ca6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000caa:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8000dc0 <output_sine_pwm+0x130>
 8000cae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb2:	edc7 7a05 	vstr	s15, [r7, #20]
	float sin_u = 0;
 8000cb6:	f04f 0300 	mov.w	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
	float sin_v = 0;
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
	float sin_w = 0;
 8000cc2:	f04f 0300 	mov.w	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
	if(angle>=360){ //fault
 8000cc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ccc:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8000dc4 <output_sine_pwm+0x134>
 8000cd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd8:	db09      	blt.n	8000cee <output_sine_pwm+0x5e>
		TIM1->CCR1=0;
 8000cda:	4b3b      	ldr	r3, [pc, #236]	; (8000dc8 <output_sine_pwm+0x138>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=0;
 8000ce0:	4b39      	ldr	r3, [pc, #228]	; (8000dc8 <output_sine_pwm+0x138>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=0;
 8000ce6:	4b38      	ldr	r3, [pc, #224]	; (8000dc8 <output_sine_pwm+0x138>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	63da      	str	r2, [r3, #60]	; 0x3c
		sin_w=sinf(angle_rad+4.1887902f);
		TIM1->CCR1=(DUTY_CYCLE_LIMIT/2.0f)+sin_u*(max_duty_cycle/2.0f);
		TIM1->CCR2=(DUTY_CYCLE_LIMIT/2.0f)+sin_v*(max_duty_cycle/2.0f);
		TIM1->CCR3=(DUTY_CYCLE_LIMIT/2.0f)+sin_w*(max_duty_cycle/2.0f);
	}
}
 8000cec:	e062      	b.n	8000db4 <output_sine_pwm+0x124>
		sin_u=sinf(angle_rad);
 8000cee:	ed97 0a05 	vldr	s0, [r7, #20]
 8000cf2:	f00a fe53 	bl	800b99c <sinf>
 8000cf6:	ed87 0a04 	vstr	s0, [r7, #16]
		sin_v=sinf(angle_rad+2.094395f);
 8000cfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cfe:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000dcc <output_sine_pwm+0x13c>
 8000d02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d06:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0a:	f00a fe47 	bl	800b99c <sinf>
 8000d0e:	ed87 0a03 	vstr	s0, [r7, #12]
		sin_w=sinf(angle_rad+4.1887902f);
 8000d12:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d16:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000dd0 <output_sine_pwm+0x140>
 8000d1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d22:	f00a fe3b 	bl	800b99c <sinf>
 8000d26:	ed87 0a02 	vstr	s0, [r7, #8]
		TIM1->CCR1=(DUTY_CYCLE_LIMIT/2.0f)+sin_u*(max_duty_cycle/2.0f);
 8000d2a:	887b      	ldrh	r3, [r7, #2]
 8000d2c:	ee07 3a90 	vmov	s15, r3
 8000d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d34:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000d38:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000d3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d44:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000dd4 <output_sine_pwm+0x144>
 8000d48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <output_sine_pwm+0x138>)
 8000d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d52:	ee17 2a90 	vmov	r2, s15
 8000d56:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=(DUTY_CYCLE_LIMIT/2.0f)+sin_v*(max_duty_cycle/2.0f);
 8000d58:	887b      	ldrh	r3, [r7, #2]
 8000d5a:	ee07 3a90 	vmov	s15, r3
 8000d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d62:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000d66:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000d6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d72:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000dd4 <output_sine_pwm+0x144>
 8000d76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <output_sine_pwm+0x138>)
 8000d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d80:	ee17 2a90 	vmov	r2, s15
 8000d84:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=(DUTY_CYCLE_LIMIT/2.0f)+sin_w*(max_duty_cycle/2.0f);
 8000d86:	887b      	ldrh	r3, [r7, #2]
 8000d88:	ee07 3a90 	vmov	s15, r3
 8000d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d90:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000d94:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000d98:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000dd4 <output_sine_pwm+0x144>
 8000da4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <output_sine_pwm+0x138>)
 8000daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dae:	ee17 2a90 	vmov	r2, s15
 8000db2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000db4:	bf00      	nop
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	43340000 	.word	0x43340000
 8000dc0:	40490fd8 	.word	0x40490fd8
 8000dc4:	43b40000 	.word	0x43b40000
 8000dc8:	40010000 	.word	0x40010000
 8000dcc:	40060a91 	.word	0x40060a91
 8000dd0:	40860a92 	.word	0x40860a92
 8000dd4:	451c3800 	.word	0x451c3800

08000dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ddc:	f003 f8bc 	bl	8003f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de0:	f000 f826 	bl	8000e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();MX_DMA_Init();
 8000de4:	f000 fb64 	bl	80014b0 <MX_GPIO_Init>
 8000de8:	f000 fb14 	bl	8001414 <MX_DMA_Init>
  MX_ADC1_Init();
 8000dec:	f000 f88a 	bl	8000f04 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000df0:	f000 f904 	bl	8000ffc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000df4:	f000 f9bc 	bl	8001170 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000df8:	f000 fae2 	bl	80013c0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000dfc:	f000 faa8 	bl	8001350 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000e00:	f000 fa0a 	bl	8001218 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e04:	f000 fa56 	bl	80012b4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e08:	f007 ff06 	bl	8008c18 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e0c:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <main+0x4c>)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4805      	ldr	r0, [pc, #20]	; (8000e28 <main+0x50>)
 8000e12:	f007 ff4b 	bl	8008cac <osThreadNew>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <main+0x54>)
 8000e1a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e1c:	f007 ff20 	bl	8008c60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <main+0x48>
 8000e22:	bf00      	nop
 8000e24:	0800c904 	.word	0x0800c904
 8000e28:	080016a1 	.word	0x080016a1
 8000e2c:	20000910 	.word	0x20000910

08000e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b094      	sub	sp, #80	; 0x50
 8000e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e36:	f107 0320 	add.w	r3, r7, #32
 8000e3a:	2230      	movs	r2, #48	; 0x30
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f00a fc9e 	bl	800b780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e54:	2300      	movs	r3, #0
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	4b28      	ldr	r3, [pc, #160]	; (8000efc <SystemClock_Config+0xcc>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	4a27      	ldr	r2, [pc, #156]	; (8000efc <SystemClock_Config+0xcc>)
 8000e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e62:	6413      	str	r3, [r2, #64]	; 0x40
 8000e64:	4b25      	ldr	r3, [pc, #148]	; (8000efc <SystemClock_Config+0xcc>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e70:	2300      	movs	r3, #0
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <SystemClock_Config+0xd0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e7c:	4a20      	ldr	r2, [pc, #128]	; (8000f00 <SystemClock_Config+0xd0>)
 8000e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <SystemClock_Config+0xd0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e90:	2301      	movs	r3, #1
 8000e92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000ea8:	2360      	movs	r3, #96	; 0x60
 8000eaa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eac:	2302      	movs	r3, #2
 8000eae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb4:	f107 0320 	add.w	r3, r7, #32
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f004 fcd7 	bl	800586c <HAL_RCC_OscConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ec4:	f000 fc12 	bl	80016ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec8:	230f      	movs	r3, #15
 8000eca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f004 ff39 	bl	8005d5c <HAL_RCC_ClockConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ef0:	f000 fbfc 	bl	80016ec <Error_Handler>
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	3750      	adds	r7, #80	; 0x50
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40007000 	.word	0x40007000

08000f04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f16:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f18:	4a36      	ldr	r2, [pc, #216]	; (8000ff4 <MX_ADC1_Init+0xf0>)
 8000f1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f1c:	4b34      	ldr	r3, [pc, #208]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f24:	4b32      	ldr	r3, [pc, #200]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f2a:	4b31      	ldr	r3, [pc, #196]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f30:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f36:	4b2e      	ldr	r3, [pc, #184]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f3e:	4b2c      	ldr	r3, [pc, #176]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f44:	4b2a      	ldr	r3, [pc, #168]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f46:	4a2c      	ldr	r2, [pc, #176]	; (8000ff8 <MX_ADC1_Init+0xf4>)
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f4a:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000f50:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f52:	2204      	movs	r2, #4
 8000f54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f56:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f5e:	4b24      	ldr	r3, [pc, #144]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f64:	4822      	ldr	r0, [pc, #136]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f66:	f003 f869 	bl	800403c <HAL_ADC_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f70:	f000 fbbc 	bl	80016ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f74:	2304      	movs	r3, #4
 8000f76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f80:	463b      	mov	r3, r7
 8000f82:	4619      	mov	r1, r3
 8000f84:	481a      	ldr	r0, [pc, #104]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f86:	f003 f9ab 	bl	80042e0 <HAL_ADC_ConfigChannel>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f90:	f000 fbac 	bl	80016ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f94:	2305      	movs	r3, #5
 8000f96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4813      	ldr	r0, [pc, #76]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000fa2:	f003 f99d 	bl	80042e0 <HAL_ADC_ConfigChannel>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fac:	f000 fb9e 	bl	80016ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fb0:	2306      	movs	r3, #6
 8000fb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000fbe:	f003 f98f 	bl	80042e0 <HAL_ADC_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000fc8:	f000 fb90 	bl	80016ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000fcc:	2307      	movs	r3, #7
 8000fce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000fda:	f003 f981 	bl	80042e0 <HAL_ADC_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000fe4:	f000 fb82 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000540 	.word	0x20000540
 8000ff4:	40012000 	.word	0x40012000
 8000ff8:	0f000001 	.word	0x0f000001

08000ffc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b096      	sub	sp, #88	; 0x58
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001002:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001010:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800101a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]
 800102a:	615a      	str	r2, [r3, #20]
 800102c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2220      	movs	r2, #32
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f00a fba3 	bl	800b780 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800103a:	4b4b      	ldr	r3, [pc, #300]	; (8001168 <MX_TIM1_Init+0x16c>)
 800103c:	4a4b      	ldr	r2, [pc, #300]	; (800116c <MX_TIM1_Init+0x170>)
 800103e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001040:	4b49      	ldr	r3, [pc, #292]	; (8001168 <MX_TIM1_Init+0x16c>)
 8001042:	2200      	movs	r2, #0
 8001044:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001046:	4b48      	ldr	r3, [pc, #288]	; (8001168 <MX_TIM1_Init+0x16c>)
 8001048:	2220      	movs	r2, #32
 800104a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 800104c:	4b46      	ldr	r3, [pc, #280]	; (8001168 <MX_TIM1_Init+0x16c>)
 800104e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001052:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001054:	4b44      	ldr	r3, [pc, #272]	; (8001168 <MX_TIM1_Init+0x16c>)
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800105a:	4b43      	ldr	r3, [pc, #268]	; (8001168 <MX_TIM1_Init+0x16c>)
 800105c:	2200      	movs	r2, #0
 800105e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001060:	4b41      	ldr	r3, [pc, #260]	; (8001168 <MX_TIM1_Init+0x16c>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001066:	4840      	ldr	r0, [pc, #256]	; (8001168 <MX_TIM1_Init+0x16c>)
 8001068:	f005 f858 	bl	800611c <HAL_TIM_Base_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001072:	f000 fb3b 	bl	80016ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800107c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001080:	4619      	mov	r1, r3
 8001082:	4839      	ldr	r0, [pc, #228]	; (8001168 <MX_TIM1_Init+0x16c>)
 8001084:	f005 fd96 	bl	8006bb4 <HAL_TIM_ConfigClockSource>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800108e:	f000 fb2d 	bl	80016ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001092:	4835      	ldr	r0, [pc, #212]	; (8001168 <MX_TIM1_Init+0x16c>)
 8001094:	f005 f923 	bl	80062de <HAL_TIM_PWM_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800109e:	f000 fb25 	bl	80016ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010ae:	4619      	mov	r1, r3
 80010b0:	482d      	ldr	r0, [pc, #180]	; (8001168 <MX_TIM1_Init+0x16c>)
 80010b2:	f006 f945 	bl	8007340 <HAL_TIMEx_MasterConfigSynchronization>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010bc:	f000 fb16 	bl	80016ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c0:	2360      	movs	r3, #96	; 0x60
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80010c8:	2302      	movs	r3, #2
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010cc:	2300      	movs	r3, #0
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80010d0:	2304      	movs	r3, #4
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80010d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e2:	2200      	movs	r2, #0
 80010e4:	4619      	mov	r1, r3
 80010e6:	4820      	ldr	r0, [pc, #128]	; (8001168 <MX_TIM1_Init+0x16c>)
 80010e8:	f005 fca2 	bl	8006a30 <HAL_TIM_PWM_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80010f2:	f000 fafb 	bl	80016ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	2204      	movs	r2, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	481a      	ldr	r0, [pc, #104]	; (8001168 <MX_TIM1_Init+0x16c>)
 8001100:	f005 fc96 	bl	8006a30 <HAL_TIM_PWM_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800110a:	f000 faef 	bl	80016ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800110e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001112:	2208      	movs	r2, #8
 8001114:	4619      	mov	r1, r3
 8001116:	4814      	ldr	r0, [pc, #80]	; (8001168 <MX_TIM1_Init+0x16c>)
 8001118:	f005 fc8a 	bl	8006a30 <HAL_TIM_PWM_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001122:	f000 fae3 	bl	80016ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800113a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800113e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	4619      	mov	r1, r3
 8001148:	4807      	ldr	r0, [pc, #28]	; (8001168 <MX_TIM1_Init+0x16c>)
 800114a:	f006 f967 	bl	800741c <HAL_TIMEx_ConfigBreakDeadTime>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001154:	f000 faca 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <MX_TIM1_Init+0x16c>)
 800115a:	f000 fd29 	bl	8001bb0 <HAL_TIM_MspPostInit>

}
 800115e:	bf00      	nop
 8001160:	3758      	adds	r7, #88	; 0x58
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200005e8 	.word	0x200005e8
 800116c:	40010000 	.word	0x40010000

08001170 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	2224      	movs	r2, #36	; 0x24
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f00a fafe 	bl	800b780 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800118c:	4b21      	ldr	r3, [pc, #132]	; (8001214 <MX_TIM2_Init+0xa4>)
 800118e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001192:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <MX_TIM2_Init+0xa4>)
 8001196:	2200      	movs	r2, #0
 8001198:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <MX_TIM2_Init+0xa4>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <MX_TIM2_Init+0xa4>)
 80011a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_TIM2_Init+0xa4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ae:	4b19      	ldr	r3, [pc, #100]	; (8001214 <MX_TIM2_Init+0xa4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011b8:	2300      	movs	r3, #0
 80011ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011bc:	2301      	movs	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80011c4:	230a      	movs	r3, #10
 80011c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011cc:	2301      	movs	r3, #1
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80011d4:	230a      	movs	r3, #10
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	4619      	mov	r1, r3
 80011de:	480d      	ldr	r0, [pc, #52]	; (8001214 <MX_TIM2_Init+0xa4>)
 80011e0:	f005 f9ea 	bl	80065b8 <HAL_TIM_Encoder_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80011ea:	f000 fa7f 	bl	80016ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	4619      	mov	r1, r3
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <MX_TIM2_Init+0xa4>)
 80011fc:	f006 f8a0 	bl	8007340 <HAL_TIMEx_MasterConfigSynchronization>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001206:	f000 fa71 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	3730      	adds	r7, #48	; 0x30
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000630 	.word	0x20000630

08001218 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121e:	f107 0308 	add.w	r3, r7, #8
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122c:	463b      	mov	r3, r7
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <MX_TIM3_Init+0x94>)
 8001236:	4a1e      	ldr	r2, [pc, #120]	; (80012b0 <MX_TIM3_Init+0x98>)
 8001238:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_TIM3_Init+0x94>)
 800123c:	2200      	movs	r2, #0
 800123e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_TIM3_Init+0x94>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15999;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <MX_TIM3_Init+0x94>)
 8001248:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800124c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_TIM3_Init+0x94>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_TIM3_Init+0x94>)
 8001256:	2280      	movs	r2, #128	; 0x80
 8001258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800125a:	4814      	ldr	r0, [pc, #80]	; (80012ac <MX_TIM3_Init+0x94>)
 800125c:	f004 ff5e 	bl	800611c <HAL_TIM_Base_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001266:	f000 fa41 	bl	80016ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001270:	f107 0308 	add.w	r3, r7, #8
 8001274:	4619      	mov	r1, r3
 8001276:	480d      	ldr	r0, [pc, #52]	; (80012ac <MX_TIM3_Init+0x94>)
 8001278:	f005 fc9c 	bl	8006bb4 <HAL_TIM_ConfigClockSource>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001282:	f000 fa33 	bl	80016ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800128e:	463b      	mov	r3, r7
 8001290:	4619      	mov	r1, r3
 8001292:	4806      	ldr	r0, [pc, #24]	; (80012ac <MX_TIM3_Init+0x94>)
 8001294:	f006 f854 	bl	8007340 <HAL_TIMEx_MasterConfigSynchronization>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800129e:	f000 fa25 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000678 	.word	0x20000678
 80012b0:	40000400 	.word	0x40000400

080012b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <MX_TIM4_Init+0x94>)
 80012d2:	4a1e      	ldr	r2, [pc, #120]	; (800134c <MX_TIM4_Init+0x98>)
 80012d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <MX_TIM4_Init+0x94>)
 80012d8:	2201      	movs	r2, #1
 80012da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <MX_TIM4_Init+0x94>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 63999;
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <MX_TIM4_Init+0x94>)
 80012e4:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80012e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <MX_TIM4_Init+0x94>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <MX_TIM4_Init+0x94>)
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012f6:	4814      	ldr	r0, [pc, #80]	; (8001348 <MX_TIM4_Init+0x94>)
 80012f8:	f004 ff10 	bl	800611c <HAL_TIM_Base_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001302:	f000 f9f3 	bl	80016ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800130c:	f107 0308 	add.w	r3, r7, #8
 8001310:	4619      	mov	r1, r3
 8001312:	480d      	ldr	r0, [pc, #52]	; (8001348 <MX_TIM4_Init+0x94>)
 8001314:	f005 fc4e 	bl	8006bb4 <HAL_TIM_ConfigClockSource>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800131e:	f000 f9e5 	bl	80016ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800132a:	463b      	mov	r3, r7
 800132c:	4619      	mov	r1, r3
 800132e:	4806      	ldr	r0, [pc, #24]	; (8001348 <MX_TIM4_Init+0x94>)
 8001330:	f006 f806 	bl	8007340 <HAL_TIMEx_MasterConfigSynchronization>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800133a:	f000 f9d7 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200006c0 	.word	0x200006c0
 800134c:	40000800 	.word	0x40000800

08001350 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <MX_USART1_UART_Init+0x64>)
 8001356:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <MX_USART1_UART_Init+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <MX_USART1_UART_Init+0x64>)
 800135c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001360:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_USART1_UART_Init+0x64>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <MX_USART1_UART_Init+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_USART1_UART_Init+0x64>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <MX_USART1_UART_Init+0x64>)
 8001376:	220c      	movs	r2, #12
 8001378:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_USART1_UART_Init+0x64>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_USART1_UART_Init+0x64>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001386:	480b      	ldr	r0, [pc, #44]	; (80013b4 <MX_USART1_UART_Init+0x64>)
 8001388:	f006 f8ae 	bl	80074e8 <HAL_UART_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001392:	f000 f9ab 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <MX_USART1_UART_Init+0x64>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68da      	ldr	r2, [r3, #12]
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <MX_USART1_UART_Init+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 0210 	orr.w	r2, r2, #16
 80013a4:	60da      	str	r2, [r3, #12]
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) UART_RX_buf, sizeof(UART_RX_buf));
 80013a6:	22c8      	movs	r2, #200	; 0xc8
 80013a8:	4904      	ldr	r1, [pc, #16]	; (80013bc <MX_USART1_UART_Init+0x6c>)
 80013aa:	4802      	ldr	r0, [pc, #8]	; (80013b4 <MX_USART1_UART_Init+0x64>)
 80013ac:	f006 fa58 	bl	8007860 <HAL_UARTEx_ReceiveToIdle_DMA>
  /* USER CODE END USART1_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000708 	.word	0x20000708
 80013b8:	40011000 	.word	0x40011000
 80013bc:	200001b0 	.word	0x200001b0

080013c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <MX_USART2_UART_Init+0x48>)
 80013c6:	4a11      	ldr	r2, [pc, #68]	; (800140c <MX_USART2_UART_Init+0x4c>)
 80013c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2500000;
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <MX_USART2_UART_Init+0x48>)
 80013cc:	4a10      	ldr	r2, [pc, #64]	; (8001410 <MX_USART2_UART_Init+0x50>)
 80013ce:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013d0:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <MX_USART2_UART_Init+0x48>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_USART2_UART_Init+0x48>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <MX_USART2_UART_Init+0x48>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_USART2_UART_Init+0x48>)
 80013e4:	220c      	movs	r2, #12
 80013e6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <MX_USART2_UART_Init+0x48>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MX_USART2_UART_Init+0x48>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013f4:	4804      	ldr	r0, [pc, #16]	; (8001408 <MX_USART2_UART_Init+0x48>)
 80013f6:	f006 f877 	bl	80074e8 <HAL_UART_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8001400:	f000 f974 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	2000074c 	.word	0x2000074c
 800140c:	40004400 	.word	0x40004400
 8001410:	002625a0 	.word	0x002625a0

08001414 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b23      	ldr	r3, [pc, #140]	; (80014ac <MX_DMA_Init+0x98>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a22      	ldr	r2, [pc, #136]	; (80014ac <MX_DMA_Init+0x98>)
 8001424:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b20      	ldr	r3, [pc, #128]	; (80014ac <MX_DMA_Init+0x98>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_DMA_Init+0x98>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a1b      	ldr	r2, [pc, #108]	; (80014ac <MX_DMA_Init+0x98>)
 8001440:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <MX_DMA_Init+0x98>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2105      	movs	r1, #5
 8001456:	2010      	movs	r0, #16
 8001458:	f003 fae1 	bl	8004a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800145c:	2010      	movs	r0, #16
 800145e:	f003 fafa 	bl	8004a56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2105      	movs	r1, #5
 8001466:	2011      	movs	r0, #17
 8001468:	f003 fad9 	bl	8004a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800146c:	2011      	movs	r0, #17
 800146e:	f003 faf2 	bl	8004a56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2105      	movs	r1, #5
 8001476:	2038      	movs	r0, #56	; 0x38
 8001478:	f003 fad1 	bl	8004a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800147c:	2038      	movs	r0, #56	; 0x38
 800147e:	f003 faea 	bl	8004a56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2105      	movs	r1, #5
 8001486:	203a      	movs	r0, #58	; 0x3a
 8001488:	f003 fac9 	bl	8004a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800148c:	203a      	movs	r0, #58	; 0x3a
 800148e:	f003 fae2 	bl	8004a56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2105      	movs	r1, #5
 8001496:	2046      	movs	r0, #70	; 0x46
 8001498:	f003 fac1 	bl	8004a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800149c:	2046      	movs	r0, #70	; 0x46
 800149e:	f003 fada 	bl	8004a56 <HAL_NVIC_EnableIRQ>

}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b4b      	ldr	r3, [pc, #300]	; (80015f8 <MX_GPIO_Init+0x148>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a4a      	ldr	r2, [pc, #296]	; (80015f8 <MX_GPIO_Init+0x148>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b48      	ldr	r3, [pc, #288]	; (80015f8 <MX_GPIO_Init+0x148>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b44      	ldr	r3, [pc, #272]	; (80015f8 <MX_GPIO_Init+0x148>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a43      	ldr	r2, [pc, #268]	; (80015f8 <MX_GPIO_Init+0x148>)
 80014ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <MX_GPIO_Init+0x148>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <MX_GPIO_Init+0x148>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a3c      	ldr	r2, [pc, #240]	; (80015f8 <MX_GPIO_Init+0x148>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <MX_GPIO_Init+0x148>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <MX_GPIO_Init+0x148>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a35      	ldr	r2, [pc, #212]	; (80015f8 <MX_GPIO_Init+0x148>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b33      	ldr	r3, [pc, #204]	; (80015f8 <MX_GPIO_Init+0x148>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|SOFTSTART_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800153c:	482f      	ldr	r0, [pc, #188]	; (80015fc <MX_GPIO_Init+0x14c>)
 800153e:	f004 f97b 	bl	8005838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INPUTS_LOAD_Pin|INPUTS_CS_Pin|DISP_LATCH_Pin|DISP_EN_Pin
 8001542:	2200      	movs	r2, #0
 8001544:	f240 3117 	movw	r1, #791	; 0x317
 8001548:	482d      	ldr	r0, [pc, #180]	; (8001600 <MX_GPIO_Init+0x150>)
 800154a:	f004 f975 	bl	8005838 <HAL_GPIO_WritePin>
                          |MODBUS_DE_Pin|ADC_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INV_ENABLE_Pin|INV_DISABLE_Pin, GPIO_PIN_SET);
 800154e:	2201      	movs	r2, #1
 8001550:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001554:	482a      	ldr	r0, [pc, #168]	; (8001600 <MX_GPIO_Init+0x150>)
 8001556:	f004 f96f 	bl	8005838 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 SOFTSTART_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|SOFTSTART_Pin;
 800155a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2301      	movs	r3, #1
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	4822      	ldr	r0, [pc, #136]	; (80015fc <MX_GPIO_Init+0x14c>)
 8001574:	f003 fef8 	bl	8005368 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUTS_LOAD_Pin INPUTS_CS_Pin DISP_LATCH_Pin INV_ENABLE_Pin
                           INV_DISABLE_Pin DISP_EN_Pin MODBUS_DE_Pin ADC_CS_Pin */
  GPIO_InitStruct.Pin = INPUTS_LOAD_Pin|INPUTS_CS_Pin|DISP_LATCH_Pin|INV_ENABLE_Pin
 8001578:	f243 3317 	movw	r3, #13079	; 0x3317
 800157c:	617b      	str	r3, [r7, #20]
                          |INV_DISABLE_Pin|DISP_EN_Pin|MODBUS_DE_Pin|ADC_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	481b      	ldr	r0, [pc, #108]	; (8001600 <MX_GPIO_Init+0x150>)
 8001592:	f003 fee9 	bl	8005368 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CLK_Pin PB14 PB15 */
  GPIO_InitStruct.Pin = SPI_CLK_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8001596:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800159a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015a8:	2305      	movs	r3, #5
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	4813      	ldr	r0, [pc, #76]	; (8001600 <MX_GPIO_Init+0x150>)
 80015b4:	f003 fed8 	bl	8005368 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_Pin DIR_Pin ENC_Z_Pin */
  GPIO_InitStruct.Pin = STEP_Pin|DIR_Pin|ENC_Z_Pin;
 80015b8:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80015bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <MX_GPIO_Init+0x154>)
 80015d0:	f003 feca 	bl	8005368 <HAL_GPIO_Init>

  /*Configure GPIO pin : OC_ALARM_Pin */
  GPIO_InitStruct.Pin = OC_ALARM_Pin;
 80015d4:	2320      	movs	r3, #32
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OC_ALARM_GPIO_Port, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_GPIO_Init+0x150>)
 80015ea:	f003 febd 	bl	8005368 <HAL_GPIO_Init>

}
 80015ee:	bf00      	nop
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020800 	.word	0x40020800
 8001600:	40020400 	.word	0x40020400
 8001604:	40020000 	.word	0x40020000

08001608 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	807b      	strh	r3, [r7, #2]
	modbus_process_new_data_to_fifo(huart,Size);
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	4619      	mov	r1, r3
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff f8ff 	bl	800081c <modbus_process_new_data_to_fifo>
	process_modbus_command();
 800161e:	f7ff f967 	bl	80008f0 <process_modbus_command>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
     if(huart == &huart1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a06      	ldr	r2, [pc, #24]	; (8001650 <HAL_UART_ErrorCallback+0x24>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d104      	bne.n	8001646 <HAL_UART_ErrorCallback+0x1a>
     {
         HAL_UART_DeInit(&huart1);
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <HAL_UART_ErrorCallback+0x24>)
 800163e:	f005 ffa0 	bl	8007582 <HAL_UART_DeInit>
         MX_USART1_UART_Init();
 8001642:	f7ff fe85 	bl	8001350 <MX_USART1_UART_Init>
     }
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000708 	.word	0x20000708

08001654 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <HAL_UART_TxCpltCallback+0x3c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d105      	bne.n	8001672 <HAL_UART_TxCpltCallback+0x1e>
		HAL_GPIO_WritePin(MODBUS_DE_GPIO_Port,MODBUS_DE_Pin, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800166c:	4809      	ldr	r0, [pc, #36]	; (8001694 <HAL_UART_TxCpltCallback+0x40>)
 800166e:	f004 f8e3 	bl	8005838 <HAL_GPIO_WritePin>
	}
	if(huart->Instance == USART2){
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a08      	ldr	r2, [pc, #32]	; (8001698 <HAL_UART_TxCpltCallback+0x44>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d105      	bne.n	8001688 <HAL_UART_TxCpltCallback+0x34>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001682:	4806      	ldr	r0, [pc, #24]	; (800169c <HAL_UART_TxCpltCallback+0x48>)
 8001684:	f004 f8d8 	bl	8005838 <HAL_GPIO_WritePin>
	}

}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40011000 	.word	0x40011000
 8001694:	40020400 	.word	0x40020400
 8001698:	40004400 	.word	0x40004400
 800169c:	40020800 	.word	0x40020800

080016a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//HAL_ADC_Start_DMA(&hadc1, ADC_rawdata, 4);
	Modbus_init();
 80016a8:	f7ff f872 	bl	8000790 <Modbus_init>
	osDelay(300);
 80016ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016b0:	f007 fb8e 	bl	8008dd0 <osDelay>
	motor_identification();
 80016b4:	f000 f820 	bl	80016f8 <motor_identification>
	HAL_TIM_Base_Start_IT(&htim3);
 80016b8:	4808      	ldr	r0, [pc, #32]	; (80016dc <StartDefaultTask+0x3c>)
 80016ba:	f004 fd7f 	bl	80061bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 80016be:	4808      	ldr	r0, [pc, #32]	; (80016e0 <StartDefaultTask+0x40>)
 80016c0:	f004 fd7c 	bl	80061bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1); //16 khz ISR synchronized with PWM
 80016c4:	4807      	ldr	r0, [pc, #28]	; (80016e4 <StartDefaultTask+0x44>)
 80016c6:	f004 fd79 	bl	80061bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80016ca:	213c      	movs	r1, #60	; 0x3c
 80016cc:	4806      	ldr	r0, [pc, #24]	; (80016e8 <StartDefaultTask+0x48>)
 80016ce:	f005 f819 	bl	8006704 <HAL_TIM_Encoder_Start>
	/* Infinite loop */
	for(;;)
	{
    osDelay(1);
 80016d2:	2001      	movs	r0, #1
 80016d4:	f007 fb7c 	bl	8008dd0 <osDelay>
 80016d8:	e7fb      	b.n	80016d2 <StartDefaultTask+0x32>
 80016da:	bf00      	nop
 80016dc:	20000678 	.word	0x20000678
 80016e0:	200006c0 	.word	0x200006c0
 80016e4:	200005e8 	.word	0x200005e8
 80016e8:	20000630 	.word	0x20000630

080016ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f0:	b672      	cpsid	i
}
 80016f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <Error_Handler+0x8>
	...

080016f8 <motor_identification>:

extern UART_HandleTypeDef huart2;
uint8_t UART2_RX_raw[9];
ssi_encoder_data_t ssi_encoder_data;

void motor_identification(void){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
	//first send 2 packets with 0x92 command, then 8 with 0x7A command (motor data read)
	uint8_t command = 0x92;
 80016fe:	2392      	movs	r3, #146	; 0x92
 8001700:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i=0;i<10;i++){
 8001702:	2300      	movs	r3, #0
 8001704:	71fb      	strb	r3, [r7, #7]
 8001706:	e018      	b.n	800173a <motor_identification+0x42>
		if(i>2){command=0x7A;}
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <motor_identification+0x1a>
 800170e:	237a      	movs	r3, #122	; 0x7a
 8001710:	71bb      	strb	r3, [r7, #6]
		HAL_UART_Transmit(&huart2, &command, 1, 100);
 8001712:	1db9      	adds	r1, r7, #6
 8001714:	2364      	movs	r3, #100	; 0x64
 8001716:	2201      	movs	r2, #1
 8001718:	4838      	ldr	r0, [pc, #224]	; (80017fc <motor_identification+0x104>)
 800171a:	f005 ff61 	bl	80075e0 <HAL_UART_Transmit>
		osDelay(1);
 800171e:	2001      	movs	r0, #1
 8001720:	f007 fb56 	bl	8008dd0 <osDelay>
		HAL_UART_Receive_DMA(&huart2, UART2_RX_raw, 9);
 8001724:	2209      	movs	r2, #9
 8001726:	4936      	ldr	r1, [pc, #216]	; (8001800 <motor_identification+0x108>)
 8001728:	4834      	ldr	r0, [pc, #208]	; (80017fc <motor_identification+0x104>)
 800172a:	f006 f869 	bl	8007800 <HAL_UART_Receive_DMA>
		osDelay(1);
 800172e:	2001      	movs	r0, #1
 8001730:	f007 fb4e 	bl	8008dd0 <osDelay>
	for(uint8_t i=0;i<10;i++){
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	3301      	adds	r3, #1
 8001738:	71fb      	strb	r3, [r7, #7]
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	2b09      	cmp	r3, #9
 800173e:	d9e3      	bls.n	8001708 <motor_identification+0x10>
	}
	//check if encoder sent data back ok
	if(UART2_RX_raw[1]!=0x21){ssi_encoder_data.encoder_state=encoder_error_no_communication;}
 8001740:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <motor_identification+0x108>)
 8001742:	785b      	ldrb	r3, [r3, #1]
 8001744:	2b21      	cmp	r3, #33	; 0x21
 8001746:	d003      	beq.n	8001750 <motor_identification+0x58>
 8001748:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <motor_identification+0x10c>)
 800174a:	2203      	movs	r2, #3
 800174c:	701a      	strb	r2, [r3, #0]
		}
		//determine speed and power
		ssi_encoder_data.motor_power=(UART2_RX_raw[4] >> 4)*100;
		ssi_encoder_data.motor_speed=(UART2_RX_raw[4] & 0x0F)*1000;
	}
}
 800174e:	e050      	b.n	80017f2 <motor_identification+0xfa>
		ssi_encoder_data.encoder_state=encoder_ok;
 8001750:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <motor_identification+0x10c>)
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
		if(UART2_RX_raw[2]==0x41){ssi_encoder_data.encoder_resolution=p131072ppr;ssi_encoder_data.motor_family=j2super;}
 8001756:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <motor_identification+0x108>)
 8001758:	789b      	ldrb	r3, [r3, #2]
 800175a:	2b41      	cmp	r3, #65	; 0x41
 800175c:	d106      	bne.n	800176c <motor_identification+0x74>
 800175e:	4b29      	ldr	r3, [pc, #164]	; (8001804 <motor_identification+0x10c>)
 8001760:	2202      	movs	r2, #2
 8001762:	771a      	strb	r2, [r3, #28]
 8001764:	4b27      	ldr	r3, [pc, #156]	; (8001804 <motor_identification+0x10c>)
 8001766:	2202      	movs	r2, #2
 8001768:	775a      	strb	r2, [r3, #29]
 800176a:	e010      	b.n	800178e <motor_identification+0x96>
		else if(UART2_RX_raw[2]==0x3D){ssi_encoder_data.encoder_resolution=p8192ppr;ssi_encoder_data.motor_family=j2;}
 800176c:	4b24      	ldr	r3, [pc, #144]	; (8001800 <motor_identification+0x108>)
 800176e:	789b      	ldrb	r3, [r3, #2]
 8001770:	2b3d      	cmp	r3, #61	; 0x3d
 8001772:	d106      	bne.n	8001782 <motor_identification+0x8a>
 8001774:	4b23      	ldr	r3, [pc, #140]	; (8001804 <motor_identification+0x10c>)
 8001776:	2201      	movs	r2, #1
 8001778:	771a      	strb	r2, [r3, #28]
 800177a:	4b22      	ldr	r3, [pc, #136]	; (8001804 <motor_identification+0x10c>)
 800177c:	2201      	movs	r2, #1
 800177e:	775a      	strb	r2, [r3, #29]
 8001780:	e005      	b.n	800178e <motor_identification+0x96>
		else{ssi_encoder_data.encoder_resolution=unknown_resolution;ssi_encoder_data.motor_family=unknown_family;}
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <motor_identification+0x10c>)
 8001784:	2200      	movs	r2, #0
 8001786:	771a      	strb	r2, [r3, #28]
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <motor_identification+0x10c>)
 800178a:	2200      	movs	r2, #0
 800178c:	775a      	strb	r2, [r3, #29]
		switch(UART2_RX_raw[3]){
 800178e:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <motor_identification+0x108>)
 8001790:	78db      	ldrb	r3, [r3, #3]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d005      	beq.n	80017a2 <motor_identification+0xaa>
 8001796:	2b12      	cmp	r3, #18
 8001798:	d107      	bne.n	80017aa <motor_identification+0xb2>
			ssi_encoder_data.motor_formfactor=kf;break;
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <motor_identification+0x10c>)
 800179c:	2202      	movs	r2, #2
 800179e:	779a      	strb	r2, [r3, #30]
 80017a0:	e007      	b.n	80017b2 <motor_identification+0xba>
			ssi_encoder_data.motor_formfactor=mf;break;
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <motor_identification+0x10c>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	779a      	strb	r2, [r3, #30]
 80017a8:	e003      	b.n	80017b2 <motor_identification+0xba>
			ssi_encoder_data.motor_formfactor=unknown_formfactor;break;
 80017aa:	4b16      	ldr	r3, [pc, #88]	; (8001804 <motor_identification+0x10c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	779a      	strb	r2, [r3, #30]
 80017b0:	bf00      	nop
		ssi_encoder_data.motor_power=(UART2_RX_raw[4] >> 4)*100;
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <motor_identification+0x108>)
 80017b4:	791b      	ldrb	r3, [r3, #4]
 80017b6:	091b      	lsrs	r3, r3, #4
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	461a      	mov	r2, r3
 80017be:	0092      	lsls	r2, r2, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	461a      	mov	r2, r3
 80017c4:	0091      	lsls	r1, r2, #2
 80017c6:	461a      	mov	r2, r3
 80017c8:	460b      	mov	r3, r1
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <motor_identification+0x10c>)
 80017d2:	841a      	strh	r2, [r3, #32]
		ssi_encoder_data.motor_speed=(UART2_RX_raw[4] & 0x0F)*1000;
 80017d4:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <motor_identification+0x108>)
 80017d6:	791b      	ldrb	r3, [r3, #4]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	b29b      	uxth	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	0152      	lsls	r2, r2, #5
 80017e4:	1ad2      	subs	r2, r2, r3
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <motor_identification+0x10c>)
 80017f0:	845a      	strh	r2, [r3, #34]	; 0x22
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	2000074c 	.word	0x2000074c
 8001800:	20000914 	.word	0x20000914
 8001804:	20000920 	.word	0x20000920

08001808 <PI_control>:
 *  Created on: Apr 9, 2022
 *      Author: Wiktor
 */
#include "pid.h"

float PI_control(PID_t  *pid_data, float error){
 8001808:	b480      	push	{r7}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	ed87 0a00 	vstr	s0, [r7]
	float proportional = pid_data->proportional_gain * error;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	edd3 7a00 	vldr	s15, [r3]
 800181a:	ed97 7a00 	vldr	s14, [r7]
 800181e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001822:	edc7 7a03 	vstr	s15, [r7, #12]
	float integral = pid_data->last_integral + (pid_data->integral_gain*pid_data->sampling_time*0.5f*(error+pid_data->last_error));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	ed93 7a06 	vldr	s14, [r3, #24]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	edd3 7a04 	vldr	s15, [r3, #16]
 8001838:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800183c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001840:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	ed93 6a07 	vldr	s12, [r3, #28]
 800184a:	edd7 7a00 	vldr	s15, [r7]
 800184e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185a:	edc7 7a05 	vstr	s15, [r7, #20]
	//antiwindup
	if(integral>pid_data->antiwindup_limit){integral=pid_data->antiwindup_limit;}
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	edd3 7a02 	vldr	s15, [r3, #8]
 8001864:	ed97 7a05 	vldr	s14, [r7, #20]
 8001868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	dd02      	ble.n	8001878 <PI_control+0x70>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	617b      	str	r3, [r7, #20]
	if(integral<(pid_data->antiwindup_limit*-1)){integral=(pid_data->antiwindup_limit)*(-1.0f);}
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	edd3 7a02 	vldr	s15, [r3, #8]
 800187e:	eef1 7a67 	vneg.f32	s15, s15
 8001882:	ed97 7a05 	vldr	s14, [r7, #20]
 8001886:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800188a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188e:	d506      	bpl.n	800189e <PI_control+0x96>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	edd3 7a02 	vldr	s15, [r3, #8]
 8001896:	eef1 7a67 	vneg.f32	s15, s15
 800189a:	edc7 7a05 	vstr	s15, [r7, #20]

	float output = proportional+integral;
 800189e:	ed97 7a03 	vldr	s14, [r7, #12]
 80018a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80018a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018aa:	edc7 7a04 	vstr	s15, [r7, #16]
	if(output>pid_data->output_limit){output=pid_data->output_limit;}
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80018b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80018b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c0:	dd02      	ble.n	80018c8 <PI_control+0xc0>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	613b      	str	r3, [r7, #16]
	if(output<((pid_data->output_limit)*(-1.0f))){output=(pid_data->output_limit)*(-1.0f);}
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80018ce:	eef1 7a67 	vneg.f32	s15, s15
 80018d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80018d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018de:	d506      	bpl.n	80018ee <PI_control+0xe6>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80018e6:	eef1 7a67 	vneg.f32	s15, s15
 80018ea:	edc7 7a04 	vstr	s15, [r7, #16]

	pid_data->last_error=error;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	61da      	str	r2, [r3, #28]
	pid_data->last_integral=integral;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	619a      	str	r2, [r3, #24]
	pid_data->last_output=output;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	621a      	str	r2, [r3, #32]
	return output;
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	ee07 3a90 	vmov	s15, r3
}
 8001906:	eeb0 0a67 	vmov.f32	s0, s15
 800190a:	371c      	adds	r7, #28
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_MspInit+0x54>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	4a11      	ldr	r2, [pc, #68]	; (8001968 <HAL_MspInit+0x54>)
 8001924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001928:	6453      	str	r3, [r2, #68]	; 0x44
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_MspInit+0x54>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_MspInit+0x54>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <HAL_MspInit+0x54>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001944:	6413      	str	r3, [r2, #64]	; 0x40
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <HAL_MspInit+0x54>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	210f      	movs	r1, #15
 8001956:	f06f 0001 	mvn.w	r0, #1
 800195a:	f003 f860 	bl	8004a1e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800

0800196c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a2f      	ldr	r2, [pc, #188]	; (8001a48 <HAL_ADC_MspInit+0xdc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d157      	bne.n	8001a3e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <HAL_ADC_MspInit+0xe0>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	4a2d      	ldr	r2, [pc, #180]	; (8001a4c <HAL_ADC_MspInit+0xe0>)
 8001998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199c:	6453      	str	r3, [r2, #68]	; 0x44
 800199e:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <HAL_ADC_MspInit+0xe0>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <HAL_ADC_MspInit+0xe0>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a26      	ldr	r2, [pc, #152]	; (8001a4c <HAL_ADC_MspInit+0xe0>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <HAL_ADC_MspInit+0xe0>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = I_U_Pin|I_V_Pin|DC_VOLTAGE_Pin|HEATSINK_TEMP_Pin;
 80019c6:	23f0      	movs	r3, #240	; 0xf0
 80019c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ca:	2303      	movs	r3, #3
 80019cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	481d      	ldr	r0, [pc, #116]	; (8001a50 <HAL_ADC_MspInit+0xe4>)
 80019da:	f003 fcc5 	bl	8005368 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80019de:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <HAL_ADC_MspInit+0xe8>)
 80019e0:	4a1d      	ldr	r2, [pc, #116]	; (8001a58 <HAL_ADC_MspInit+0xec>)
 80019e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <HAL_ADC_MspInit+0xe8>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <HAL_ADC_MspInit+0xe8>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f0:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_ADC_MspInit+0xe8>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019f6:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <HAL_ADC_MspInit+0xe8>)
 80019f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_ADC_MspInit+0xe8>)
 8001a00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <HAL_ADC_MspInit+0xe8>)
 8001a08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_ADC_MspInit+0xe8>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_ADC_MspInit+0xe8>)
 8001a16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a1a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_ADC_MspInit+0xe8>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a22:	480c      	ldr	r0, [pc, #48]	; (8001a54 <HAL_ADC_MspInit+0xe8>)
 8001a24:	f003 f840 	bl	8004aa8 <HAL_DMA_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001a2e:	f7ff fe5d 	bl	80016ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <HAL_ADC_MspInit+0xe8>)
 8001a36:	639a      	str	r2, [r3, #56]	; 0x38
 8001a38:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <HAL_ADC_MspInit+0xe8>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a3e:	bf00      	nop
 8001a40:	3728      	adds	r7, #40	; 0x28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40012000 	.word	0x40012000
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020000 	.word	0x40020000
 8001a54:	20000588 	.word	0x20000588
 8001a58:	40026410 	.word	0x40026410

08001a5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a2a      	ldr	r2, [pc, #168]	; (8001b14 <HAL_TIM_Base_MspInit+0xb8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d116      	bne.n	8001a9c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <HAL_TIM_Base_MspInit+0xbc>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a28      	ldr	r2, [pc, #160]	; (8001b18 <HAL_TIM_Base_MspInit+0xbc>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b26      	ldr	r3, [pc, #152]	; (8001b18 <HAL_TIM_Base_MspInit+0xbc>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2105      	movs	r1, #5
 8001a8e:	2019      	movs	r0, #25
 8001a90:	f002 ffc5 	bl	8004a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a94:	2019      	movs	r0, #25
 8001a96:	f002 ffde 	bl	8004a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a9a:	e036      	b.n	8001b0a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a1e      	ldr	r2, [pc, #120]	; (8001b1c <HAL_TIM_Base_MspInit+0xc0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d116      	bne.n	8001ad4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <HAL_TIM_Base_MspInit+0xbc>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a1a      	ldr	r2, [pc, #104]	; (8001b18 <HAL_TIM_Base_MspInit+0xbc>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <HAL_TIM_Base_MspInit+0xbc>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2105      	movs	r1, #5
 8001ac6:	201d      	movs	r0, #29
 8001ac8:	f002 ffa9 	bl	8004a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001acc:	201d      	movs	r0, #29
 8001ace:	f002 ffc2 	bl	8004a56 <HAL_NVIC_EnableIRQ>
}
 8001ad2:	e01a      	b.n	8001b0a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a11      	ldr	r2, [pc, #68]	; (8001b20 <HAL_TIM_Base_MspInit+0xc4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d115      	bne.n	8001b0a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <HAL_TIM_Base_MspInit+0xbc>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	4a0c      	ldr	r2, [pc, #48]	; (8001b18 <HAL_TIM_Base_MspInit+0xbc>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	6413      	str	r3, [r2, #64]	; 0x40
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_TIM_Base_MspInit+0xbc>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2105      	movs	r1, #5
 8001afe:	201e      	movs	r0, #30
 8001b00:	f002 ff8d 	bl	8004a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b04:	201e      	movs	r0, #30
 8001b06:	f002 ffa6 	bl	8004a56 <HAL_NVIC_EnableIRQ>
}
 8001b0a:	bf00      	nop
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40010000 	.word	0x40010000
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40000400 	.word	0x40000400
 8001b20:	40000800 	.word	0x40000800

08001b24 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b44:	d12b      	bne.n	8001b9e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	4a16      	ldr	r2, [pc, #88]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6413      	str	r3, [r2, #64]	; 0x40
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	4804      	ldr	r0, [pc, #16]	; (8001bac <HAL_TIM_Encoder_MspInit+0x88>)
 8001b9a:	f003 fbe5 	bl	8005368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b9e:	bf00      	nop
 8001ba0:	3728      	adds	r7, #40	; 0x28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020000 	.word	0x40020000

08001bb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <HAL_TIM_MspPostInit+0x68>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d11e      	bne.n	8001c10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <HAL_TIM_MspPostInit+0x6c>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a10      	ldr	r2, [pc, #64]	; (8001c1c <HAL_TIM_MspPostInit+0x6c>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <HAL_TIM_MspPostInit+0x6c>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_Pin|V_PWM_Pin|W_PWM_Pin;
 8001bee:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001bf2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c00:	2301      	movs	r3, #1
 8001c02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c04:	f107 030c 	add.w	r3, r7, #12
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <HAL_TIM_MspPostInit+0x70>)
 8001c0c:	f003 fbac 	bl	8005368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c10:	bf00      	nop
 8001c12:	3720      	adds	r7, #32
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40010000 	.word	0x40010000
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40020000 	.word	0x40020000

08001c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08c      	sub	sp, #48	; 0x30
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 031c 	add.w	r3, r7, #28
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a97      	ldr	r2, [pc, #604]	; (8001ea0 <HAL_UART_MspInit+0x27c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	f040 8092 	bne.w	8001d6c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
 8001c4c:	4b95      	ldr	r3, [pc, #596]	; (8001ea4 <HAL_UART_MspInit+0x280>)
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c50:	4a94      	ldr	r2, [pc, #592]	; (8001ea4 <HAL_UART_MspInit+0x280>)
 8001c52:	f043 0310 	orr.w	r3, r3, #16
 8001c56:	6453      	str	r3, [r2, #68]	; 0x44
 8001c58:	4b92      	ldr	r3, [pc, #584]	; (8001ea4 <HAL_UART_MspInit+0x280>)
 8001c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5c:	f003 0310 	and.w	r3, r3, #16
 8001c60:	61bb      	str	r3, [r7, #24]
 8001c62:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	4b8e      	ldr	r3, [pc, #568]	; (8001ea4 <HAL_UART_MspInit+0x280>)
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	4a8d      	ldr	r2, [pc, #564]	; (8001ea4 <HAL_UART_MspInit+0x280>)
 8001c6e:	f043 0302 	orr.w	r3, r3, #2
 8001c72:	6313      	str	r3, [r2, #48]	; 0x30
 8001c74:	4b8b      	ldr	r3, [pc, #556]	; (8001ea4 <HAL_UART_MspInit+0x280>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MODBUS_TX_Pin|MODBUS_RX_Pin;
 8001c80:	23c0      	movs	r3, #192	; 0xc0
 8001c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c90:	2307      	movs	r3, #7
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4883      	ldr	r0, [pc, #524]	; (8001ea8 <HAL_UART_MspInit+0x284>)
 8001c9c:	f003 fb64 	bl	8005368 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001ca0:	4b82      	ldr	r3, [pc, #520]	; (8001eac <HAL_UART_MspInit+0x288>)
 8001ca2:	4a83      	ldr	r2, [pc, #524]	; (8001eb0 <HAL_UART_MspInit+0x28c>)
 8001ca4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001ca6:	4b81      	ldr	r3, [pc, #516]	; (8001eac <HAL_UART_MspInit+0x288>)
 8001ca8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cac:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cae:	4b7f      	ldr	r3, [pc, #508]	; (8001eac <HAL_UART_MspInit+0x288>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb4:	4b7d      	ldr	r3, [pc, #500]	; (8001eac <HAL_UART_MspInit+0x288>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cba:	4b7c      	ldr	r3, [pc, #496]	; (8001eac <HAL_UART_MspInit+0x288>)
 8001cbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cc0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cc2:	4b7a      	ldr	r3, [pc, #488]	; (8001eac <HAL_UART_MspInit+0x288>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cc8:	4b78      	ldr	r3, [pc, #480]	; (8001eac <HAL_UART_MspInit+0x288>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001cce:	4b77      	ldr	r3, [pc, #476]	; (8001eac <HAL_UART_MspInit+0x288>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cd4:	4b75      	ldr	r3, [pc, #468]	; (8001eac <HAL_UART_MspInit+0x288>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cda:	4b74      	ldr	r3, [pc, #464]	; (8001eac <HAL_UART_MspInit+0x288>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ce0:	4872      	ldr	r0, [pc, #456]	; (8001eac <HAL_UART_MspInit+0x288>)
 8001ce2:	f002 fee1 	bl	8004aa8 <HAL_DMA_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001cec:	f7ff fcfe 	bl	80016ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a6e      	ldr	r2, [pc, #440]	; (8001eac <HAL_UART_MspInit+0x288>)
 8001cf4:	639a      	str	r2, [r3, #56]	; 0x38
 8001cf6:	4a6d      	ldr	r2, [pc, #436]	; (8001eac <HAL_UART_MspInit+0x288>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001cfc:	4b6d      	ldr	r3, [pc, #436]	; (8001eb4 <HAL_UART_MspInit+0x290>)
 8001cfe:	4a6e      	ldr	r2, [pc, #440]	; (8001eb8 <HAL_UART_MspInit+0x294>)
 8001d00:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001d02:	4b6c      	ldr	r3, [pc, #432]	; (8001eb4 <HAL_UART_MspInit+0x290>)
 8001d04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d08:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d0a:	4b6a      	ldr	r3, [pc, #424]	; (8001eb4 <HAL_UART_MspInit+0x290>)
 8001d0c:	2240      	movs	r2, #64	; 0x40
 8001d0e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d10:	4b68      	ldr	r3, [pc, #416]	; (8001eb4 <HAL_UART_MspInit+0x290>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d16:	4b67      	ldr	r3, [pc, #412]	; (8001eb4 <HAL_UART_MspInit+0x290>)
 8001d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d1c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d1e:	4b65      	ldr	r3, [pc, #404]	; (8001eb4 <HAL_UART_MspInit+0x290>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d24:	4b63      	ldr	r3, [pc, #396]	; (8001eb4 <HAL_UART_MspInit+0x290>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001d2a:	4b62      	ldr	r3, [pc, #392]	; (8001eb4 <HAL_UART_MspInit+0x290>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001d30:	4b60      	ldr	r3, [pc, #384]	; (8001eb4 <HAL_UART_MspInit+0x290>)
 8001d32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d36:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d38:	4b5e      	ldr	r3, [pc, #376]	; (8001eb4 <HAL_UART_MspInit+0x290>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001d3e:	485d      	ldr	r0, [pc, #372]	; (8001eb4 <HAL_UART_MspInit+0x290>)
 8001d40:	f002 feb2 	bl	8004aa8 <HAL_DMA_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001d4a:	f7ff fccf 	bl	80016ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a58      	ldr	r2, [pc, #352]	; (8001eb4 <HAL_UART_MspInit+0x290>)
 8001d52:	635a      	str	r2, [r3, #52]	; 0x34
 8001d54:	4a57      	ldr	r2, [pc, #348]	; (8001eb4 <HAL_UART_MspInit+0x290>)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2105      	movs	r1, #5
 8001d5e:	2025      	movs	r0, #37	; 0x25
 8001d60:	f002 fe5d 	bl	8004a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d64:	2025      	movs	r0, #37	; 0x25
 8001d66:	f002 fe76 	bl	8004a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d6a:	e095      	b.n	8001e98 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a52      	ldr	r2, [pc, #328]	; (8001ebc <HAL_UART_MspInit+0x298>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	f040 8090 	bne.w	8001e98 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	4b49      	ldr	r3, [pc, #292]	; (8001ea4 <HAL_UART_MspInit+0x280>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	4a48      	ldr	r2, [pc, #288]	; (8001ea4 <HAL_UART_MspInit+0x280>)
 8001d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d86:	6413      	str	r3, [r2, #64]	; 0x40
 8001d88:	4b46      	ldr	r3, [pc, #280]	; (8001ea4 <HAL_UART_MspInit+0x280>)
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	4b42      	ldr	r3, [pc, #264]	; (8001ea4 <HAL_UART_MspInit+0x280>)
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	4a41      	ldr	r2, [pc, #260]	; (8001ea4 <HAL_UART_MspInit+0x280>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6313      	str	r3, [r2, #48]	; 0x30
 8001da4:	4b3f      	ldr	r3, [pc, #252]	; (8001ea4 <HAL_UART_MspInit+0x280>)
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SSI_TX_Pin|SSI_RX_Pin;
 8001db0:	230c      	movs	r3, #12
 8001db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dc0:	2307      	movs	r3, #7
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc4:	f107 031c 	add.w	r3, r7, #28
 8001dc8:	4619      	mov	r1, r3
 8001dca:	483d      	ldr	r0, [pc, #244]	; (8001ec0 <HAL_UART_MspInit+0x29c>)
 8001dcc:	f003 facc 	bl	8005368 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001dd0:	4b3c      	ldr	r3, [pc, #240]	; (8001ec4 <HAL_UART_MspInit+0x2a0>)
 8001dd2:	4a3d      	ldr	r2, [pc, #244]	; (8001ec8 <HAL_UART_MspInit+0x2a4>)
 8001dd4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <HAL_UART_MspInit+0x2a0>)
 8001dd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ddc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_UART_MspInit+0x2a0>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de4:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <HAL_UART_MspInit+0x2a0>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dea:	4b36      	ldr	r3, [pc, #216]	; (8001ec4 <HAL_UART_MspInit+0x2a0>)
 8001dec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001df0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001df2:	4b34      	ldr	r3, [pc, #208]	; (8001ec4 <HAL_UART_MspInit+0x2a0>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001df8:	4b32      	ldr	r3, [pc, #200]	; (8001ec4 <HAL_UART_MspInit+0x2a0>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001dfe:	4b31      	ldr	r3, [pc, #196]	; (8001ec4 <HAL_UART_MspInit+0x2a0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_UART_MspInit+0x2a0>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <HAL_UART_MspInit+0x2a0>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e10:	482c      	ldr	r0, [pc, #176]	; (8001ec4 <HAL_UART_MspInit+0x2a0>)
 8001e12:	f002 fe49 	bl	8004aa8 <HAL_DMA_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8001e1c:	f7ff fc66 	bl	80016ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a28      	ldr	r2, [pc, #160]	; (8001ec4 <HAL_UART_MspInit+0x2a0>)
 8001e24:	639a      	str	r2, [r3, #56]	; 0x38
 8001e26:	4a27      	ldr	r2, [pc, #156]	; (8001ec4 <HAL_UART_MspInit+0x2a0>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001e2c:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <HAL_UART_MspInit+0x2a8>)
 8001e2e:	4a28      	ldr	r2, [pc, #160]	; (8001ed0 <HAL_UART_MspInit+0x2ac>)
 8001e30:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001e32:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <HAL_UART_MspInit+0x2a8>)
 8001e34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e38:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e3a:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <HAL_UART_MspInit+0x2a8>)
 8001e3c:	2240      	movs	r2, #64	; 0x40
 8001e3e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e40:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <HAL_UART_MspInit+0x2a8>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e46:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <HAL_UART_MspInit+0x2a8>)
 8001e48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e4c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <HAL_UART_MspInit+0x2a8>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e54:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <HAL_UART_MspInit+0x2a8>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <HAL_UART_MspInit+0x2a8>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e60:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <HAL_UART_MspInit+0x2a8>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e66:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_UART_MspInit+0x2a8>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e6c:	4817      	ldr	r0, [pc, #92]	; (8001ecc <HAL_UART_MspInit+0x2a8>)
 8001e6e:	f002 fe1b 	bl	8004aa8 <HAL_DMA_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <HAL_UART_MspInit+0x258>
      Error_Handler();
 8001e78:	f7ff fc38 	bl	80016ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <HAL_UART_MspInit+0x2a8>)
 8001e80:	635a      	str	r2, [r3, #52]	; 0x34
 8001e82:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <HAL_UART_MspInit+0x2a8>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2105      	movs	r1, #5
 8001e8c:	2026      	movs	r0, #38	; 0x26
 8001e8e:	f002 fdc6 	bl	8004a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e92:	2026      	movs	r0, #38	; 0x26
 8001e94:	f002 fddf 	bl	8004a56 <HAL_NVIC_EnableIRQ>
}
 8001e98:	bf00      	nop
 8001e9a:	3730      	adds	r7, #48	; 0x30
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40011000 	.word	0x40011000
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020400 	.word	0x40020400
 8001eac:	20000790 	.word	0x20000790
 8001eb0:	40026440 	.word	0x40026440
 8001eb4:	200007f0 	.word	0x200007f0
 8001eb8:	400264b8 	.word	0x400264b8
 8001ebc:	40004400 	.word	0x40004400
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	20000850 	.word	0x20000850
 8001ec8:	40026088 	.word	0x40026088
 8001ecc:	200008b0 	.word	0x200008b0
 8001ed0:	400260a0 	.word	0x400260a0

08001ed4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <HAL_UART_MspDeInit+0x84>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d117      	bne.n	8001f16 <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <HAL_UART_MspDeInit+0x88>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <HAL_UART_MspDeInit+0x88>)
 8001eec:	f023 0310 	bic.w	r3, r3, #16
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, MODBUS_TX_Pin|MODBUS_RX_Pin);
 8001ef2:	21c0      	movs	r1, #192	; 0xc0
 8001ef4:	481a      	ldr	r0, [pc, #104]	; (8001f60 <HAL_UART_MspDeInit+0x8c>)
 8001ef6:	f003 fbbb 	bl	8005670 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efe:	4618      	mov	r0, r3
 8001f00:	f002 fe80 	bl	8004c04 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f002 fe7b 	bl	8004c04 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001f0e:	2025      	movs	r0, #37	; 0x25
 8001f10:	f002 fdaf 	bl	8004a72 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001f14:	e01b      	b.n	8001f4e <HAL_UART_MspDeInit+0x7a>
  else if(huart->Instance==USART2)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <HAL_UART_MspDeInit+0x90>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d116      	bne.n	8001f4e <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_UART_MspDeInit+0x88>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	4a0d      	ldr	r2, [pc, #52]	; (8001f5c <HAL_UART_MspDeInit+0x88>)
 8001f26:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001f2a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, SSI_TX_Pin|SSI_RX_Pin);
 8001f2c:	210c      	movs	r1, #12
 8001f2e:	480e      	ldr	r0, [pc, #56]	; (8001f68 <HAL_UART_MspDeInit+0x94>)
 8001f30:	f003 fb9e 	bl	8005670 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f002 fe63 	bl	8004c04 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f42:	4618      	mov	r0, r3
 8001f44:	f002 fe5e 	bl	8004c04 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001f48:	2026      	movs	r0, #38	; 0x26
 8001f4a:	f002 fd92 	bl	8004a72 <HAL_NVIC_DisableIRQ>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40011000 	.word	0x40011000
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40020400 	.word	0x40020400
 8001f64:	40004400 	.word	0x40004400
 8001f68:	40020000 	.word	0x40020000

08001f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <NMI_Handler+0x4>

08001f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <HardFault_Handler+0x4>

08001f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <MemManage_Handler+0x4>

08001f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f82:	e7fe      	b.n	8001f82 <BusFault_Handler+0x4>

08001f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <UsageFault_Handler+0x4>

08001f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f9c:	f002 f82e 	bl	8003ffc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001fa0:	f008 fb4e 	bl	800a640 <xTaskGetSchedulerState>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d001      	beq.n	8001fae <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001faa:	f009 f935 	bl	800b218 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <DMA1_Stream5_IRQHandler+0x10>)
 8001fba:	f002 ff6b 	bl	8004e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000850 	.word	0x20000850

08001fc8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <DMA1_Stream6_IRQHandler+0x10>)
 8001fce:	f002 ff61 	bl	8004e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200008b0 	.word	0x200008b0

08001fdc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001fe2:	f004 fc1d 	bl	8006820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200005e8 	.word	0x200005e8

08001ff0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_ADC_Start_DMA(&hadc1, ADC_rawdata, 4);
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	490a      	ldr	r1, [pc, #40]	; (8002020 <TIM3_IRQHandler+0x30>)
 8001ff8:	480a      	ldr	r0, [pc, #40]	; (8002024 <TIM3_IRQHandler+0x34>)
 8001ffa:	f002 f863 	bl	80040c4 <HAL_ADC_Start_DMA>
	if(parameter_set.motor_feedback_type==tamagawa_encoder){tamagawa_encoder_read_position();}
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <TIM3_IRQHandler+0x38>)
 8002000:	7e9b      	ldrb	r3, [r3, #26]
 8002002:	2b03      	cmp	r3, #3
 8002004:	d101      	bne.n	800200a <TIM3_IRQHandler+0x1a>
 8002006:	f001 f9af 	bl	8003368 <tamagawa_encoder_read_position>
	HAL_GPIO_WritePin(DISP_LATCH_GPIO_Port, DISP_LATCH_Pin, 1);
 800200a:	2201      	movs	r2, #1
 800200c:	2104      	movs	r1, #4
 800200e:	4807      	ldr	r0, [pc, #28]	; (800202c <TIM3_IRQHandler+0x3c>)
 8002010:	f003 fc12 	bl	8005838 <HAL_GPIO_WritePin>

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002014:	4806      	ldr	r0, [pc, #24]	; (8002030 <TIM3_IRQHandler+0x40>)
 8002016:	f004 fc03 	bl	8006820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000944 	.word	0x20000944
 8002024:	20000540 	.word	0x20000540
 8002028:	2000003c 	.word	0x2000003c
 800202c:	40020400 	.word	0x40020400
 8002030:	20000678 	.word	0x20000678

08002034 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
if(speed_setpoint_rpm!=0){
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <TIM4_IRQHandler+0x44>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	b21b      	sxth	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d015      	beq.n	800206e <TIM4_IRQHandler+0x3a>
	torque_setpoint = PI_control(&speed_controller_data, speed_setpoint_rpm-filtered_speed);
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <TIM4_IRQHandler+0x44>)
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	b21b      	sxth	r3, r3
 8002048:	ee07 3a90 	vmov	s15, r3
 800204c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002050:	4b0a      	ldr	r3, [pc, #40]	; (800207c <TIM4_IRQHandler+0x48>)
 8002052:	edd3 7a00 	vldr	s15, [r3]
 8002056:	ee77 7a67 	vsub.f32	s15, s14, s15
 800205a:	eeb0 0a67 	vmov.f32	s0, s15
 800205e:	4808      	ldr	r0, [pc, #32]	; (8002080 <TIM4_IRQHandler+0x4c>)
 8002060:	f7ff fbd2 	bl	8001808 <PI_control>
 8002064:	eef0 7a40 	vmov.f32	s15, s0
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <TIM4_IRQHandler+0x50>)
 800206a:	edc3 7a00 	vstr	s15, [r3]
}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800206e:	4806      	ldr	r0, [pc, #24]	; (8002088 <TIM4_IRQHandler+0x54>)
 8002070:	f004 fbd6 	bl	8006820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000954 	.word	0x20000954
 800207c:	200009f0 	.word	0x200009f0
 8002080:	200000c8 	.word	0x200000c8
 8002084:	20000970 	.word	0x20000970
 8002088:	200006c0 	.word	0x200006c0

0800208c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <USART1_IRQHandler+0x10>)
 8002092:	f005 fc4b 	bl	800792c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000708 	.word	0x20000708

080020a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <USART2_IRQHandler+0x10>)
 80020a6:	f005 fc41 	bl	800792c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	2000074c 	.word	0x2000074c

080020b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	//update pi controllers parameters from parameter set
	id_current_controller_data.proportional_gain=parameter_set.field_current_ctrl_proportional_gain;
 80020ba:	4b67      	ldr	r3, [pc, #412]	; (8002258 <DMA2_Stream0_IRQHandler+0x1a4>)
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	4a67      	ldr	r2, [pc, #412]	; (800225c <DMA2_Stream0_IRQHandler+0x1a8>)
 80020c0:	6013      	str	r3, [r2, #0]
	id_current_controller_data.integral_gain=parameter_set.field_current_ctrl_integral_gain;
 80020c2:	4b65      	ldr	r3, [pc, #404]	; (8002258 <DMA2_Stream0_IRQHandler+0x1a4>)
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c6:	4a65      	ldr	r2, [pc, #404]	; (800225c <DMA2_Stream0_IRQHandler+0x1a8>)
 80020c8:	6053      	str	r3, [r2, #4]
	iq_current_controller_data.proportional_gain=parameter_set.torque_current_ctrl_proportional_gain;
 80020ca:	4b63      	ldr	r3, [pc, #396]	; (8002258 <DMA2_Stream0_IRQHandler+0x1a4>)
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	4a64      	ldr	r2, [pc, #400]	; (8002260 <DMA2_Stream0_IRQHandler+0x1ac>)
 80020d0:	6013      	str	r3, [r2, #0]
	speed_controller_data.proportional_gain=parameter_set.speed_controller_proportional_gain;
 80020d2:	4b61      	ldr	r3, [pc, #388]	; (8002258 <DMA2_Stream0_IRQHandler+0x1a4>)
 80020d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d6:	4a63      	ldr	r2, [pc, #396]	; (8002264 <DMA2_Stream0_IRQHandler+0x1b0>)
 80020d8:	6013      	str	r3, [r2, #0]
	speed_controller_data.integral_gain=parameter_set.speed_controller_integral_gain;
 80020da:	4b5f      	ldr	r3, [pc, #380]	; (8002258 <DMA2_Stream0_IRQHandler+0x1a4>)
 80020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020de:	4a61      	ldr	r2, [pc, #388]	; (8002264 <DMA2_Stream0_IRQHandler+0x1b0>)
 80020e0:	6053      	str	r3, [r2, #4]
	speed_controller_data.antiwindup_limit=parameter_set.speed_controller_integral_limit;
 80020e2:	4b5d      	ldr	r3, [pc, #372]	; (8002258 <DMA2_Stream0_IRQHandler+0x1a4>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a5f      	ldr	r2, [pc, #380]	; (8002264 <DMA2_Stream0_IRQHandler+0x1b0>)
 80020e8:	6093      	str	r3, [r2, #8]
	speed_controller_data.output_limit=parameter_set.speed_controller_output_torque_limit;
 80020ea:	4b5b      	ldr	r3, [pc, #364]	; (8002258 <DMA2_Stream0_IRQHandler+0x1a4>)
 80020ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ee:	4a5d      	ldr	r2, [pc, #372]	; (8002264 <DMA2_Stream0_IRQHandler+0x1b0>)
 80020f0:	60d3      	str	r3, [r2, #12]

	if(zerocurrent_reading_loop_i<15){ //after starting servo read ADC samples when output current is zero to minimize current transducers, opamps and ADC offset
 80020f2:	4b5d      	ldr	r3, [pc, #372]	; (8002268 <DMA2_Stream0_IRQHandler+0x1b4>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b0e      	cmp	r3, #14
 80020f8:	d82f      	bhi.n	800215a <DMA2_Stream0_IRQHandler+0xa6>
				I_U_zerocurrentreading+=ADC_rawdata[0];
 80020fa:	4b5c      	ldr	r3, [pc, #368]	; (800226c <DMA2_Stream0_IRQHandler+0x1b8>)
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	b29a      	uxth	r2, r3
 8002100:	4b5b      	ldr	r3, [pc, #364]	; (8002270 <DMA2_Stream0_IRQHandler+0x1bc>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	4413      	add	r3, r2
 8002106:	b29a      	uxth	r2, r3
 8002108:	4b59      	ldr	r3, [pc, #356]	; (8002270 <DMA2_Stream0_IRQHandler+0x1bc>)
 800210a:	801a      	strh	r2, [r3, #0]
				I_V_zerocurrentreading+=ADC_rawdata[1];
 800210c:	4b57      	ldr	r3, [pc, #348]	; (800226c <DMA2_Stream0_IRQHandler+0x1b8>)
 800210e:	885b      	ldrh	r3, [r3, #2]
 8002110:	b29a      	uxth	r2, r3
 8002112:	4b58      	ldr	r3, [pc, #352]	; (8002274 <DMA2_Stream0_IRQHandler+0x1c0>)
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	4413      	add	r3, r2
 8002118:	b29a      	uxth	r2, r3
 800211a:	4b56      	ldr	r3, [pc, #344]	; (8002274 <DMA2_Stream0_IRQHandler+0x1c0>)
 800211c:	801a      	strh	r2, [r3, #0]
				if(zerocurrent_reading_loop_i==14){I_U_zerocurrentreading/=15;I_V_zerocurrentreading/=15;}
 800211e:	4b52      	ldr	r3, [pc, #328]	; (8002268 <DMA2_Stream0_IRQHandler+0x1b4>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b0e      	cmp	r3, #14
 8002124:	d111      	bne.n	800214a <DMA2_Stream0_IRQHandler+0x96>
 8002126:	4b52      	ldr	r3, [pc, #328]	; (8002270 <DMA2_Stream0_IRQHandler+0x1bc>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	4a53      	ldr	r2, [pc, #332]	; (8002278 <DMA2_Stream0_IRQHandler+0x1c4>)
 800212c:	fba2 2303 	umull	r2, r3, r2, r3
 8002130:	08db      	lsrs	r3, r3, #3
 8002132:	b29a      	uxth	r2, r3
 8002134:	4b4e      	ldr	r3, [pc, #312]	; (8002270 <DMA2_Stream0_IRQHandler+0x1bc>)
 8002136:	801a      	strh	r2, [r3, #0]
 8002138:	4b4e      	ldr	r3, [pc, #312]	; (8002274 <DMA2_Stream0_IRQHandler+0x1c0>)
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	4a4e      	ldr	r2, [pc, #312]	; (8002278 <DMA2_Stream0_IRQHandler+0x1c4>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	08db      	lsrs	r3, r3, #3
 8002144:	b29a      	uxth	r2, r3
 8002146:	4b4b      	ldr	r3, [pc, #300]	; (8002274 <DMA2_Stream0_IRQHandler+0x1c0>)
 8002148:	801a      	strh	r2, [r3, #0]
				zerocurrent_reading_loop_i++;
 800214a:	4b47      	ldr	r3, [pc, #284]	; (8002268 <DMA2_Stream0_IRQHandler+0x1b4>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	3301      	adds	r3, #1
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4b45      	ldr	r3, [pc, #276]	; (8002268 <DMA2_Stream0_IRQHandler+0x1b4>)
 8002154:	701a      	strb	r2, [r3, #0]
 8002156:	f001 b8c4 	b.w	80032e2 <DMA2_Stream0_IRQHandler+0x122e>
			}else{

				if(ADC_rawdata[0]<40 || ADC_rawdata[1]<40 ||ADC_rawdata[0]>4000 || ADC_rawdata[1]>4000){
 800215a:	4b44      	ldr	r3, [pc, #272]	; (800226c <DMA2_Stream0_IRQHandler+0x1b8>)
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	b29b      	uxth	r3, r3
 8002160:	2b27      	cmp	r3, #39	; 0x27
 8002162:	d910      	bls.n	8002186 <DMA2_Stream0_IRQHandler+0xd2>
 8002164:	4b41      	ldr	r3, [pc, #260]	; (800226c <DMA2_Stream0_IRQHandler+0x1b8>)
 8002166:	885b      	ldrh	r3, [r3, #2]
 8002168:	b29b      	uxth	r3, r3
 800216a:	2b27      	cmp	r3, #39	; 0x27
 800216c:	d90b      	bls.n	8002186 <DMA2_Stream0_IRQHandler+0xd2>
 800216e:	4b3f      	ldr	r3, [pc, #252]	; (800226c <DMA2_Stream0_IRQHandler+0x1b8>)
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002178:	d805      	bhi.n	8002186 <DMA2_Stream0_IRQHandler+0xd2>
 800217a:	4b3c      	ldr	r3, [pc, #240]	; (800226c <DMA2_Stream0_IRQHandler+0x1b8>)
 800217c:	885b      	ldrh	r3, [r3, #2]
 800217e:	b29b      	uxth	r3, r3
 8002180:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002184:	d90d      	bls.n	80021a2 <DMA2_Stream0_IRQHandler+0xee>
					if(measurement_error_counter==1)inverter_error_trip(shortcircuit);
 8002186:	4b3d      	ldr	r3, [pc, #244]	; (800227c <DMA2_Stream0_IRQHandler+0x1c8>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d102      	bne.n	8002194 <DMA2_Stream0_IRQHandler+0xe0>
 800218e:	2003      	movs	r0, #3
 8002190:	f7fe fc68 	bl	8000a64 <inverter_error_trip>
					measurement_error_counter++;
 8002194:	4b39      	ldr	r3, [pc, #228]	; (800227c <DMA2_Stream0_IRQHandler+0x1c8>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	3301      	adds	r3, #1
 800219a:	b2da      	uxtb	r2, r3
 800219c:	4b37      	ldr	r3, [pc, #220]	; (800227c <DMA2_Stream0_IRQHandler+0x1c8>)
 800219e:	701a      	strb	r2, [r3, #0]
 80021a0:	e002      	b.n	80021a8 <DMA2_Stream0_IRQHandler+0xf4>
				}else{measurement_error_counter=0;}
 80021a2:	4b36      	ldr	r3, [pc, #216]	; (800227c <DMA2_Stream0_IRQHandler+0x1c8>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]

				//DC link voltage
				U_DClink = (float)ADC_rawdata[2]*0.0250945f;
 80021a8:	4b30      	ldr	r3, [pc, #192]	; (800226c <DMA2_Stream0_IRQHandler+0x1b8>)
 80021aa:	889b      	ldrh	r3, [r3, #4]
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021b6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002280 <DMA2_Stream0_IRQHandler+0x1cc>
 80021ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021be:	4b31      	ldr	r3, [pc, #196]	; (8002284 <DMA2_Stream0_IRQHandler+0x1d0>)
 80021c0:	edc3 7a00 	vstr	s15, [r3]
				U_DClink_filtered = LowPassFilter(0.01f, U_DClink, &U_DClink_last);
 80021c4:	4b2f      	ldr	r3, [pc, #188]	; (8002284 <DMA2_Stream0_IRQHandler+0x1d0>)
 80021c6:	edd3 7a00 	vldr	s15, [r3]
 80021ca:	482f      	ldr	r0, [pc, #188]	; (8002288 <DMA2_Stream0_IRQHandler+0x1d4>)
 80021cc:	eef0 0a67 	vmov.f32	s1, s15
 80021d0:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800228c <DMA2_Stream0_IRQHandler+0x1d8>
 80021d4:	f7fe fd24 	bl	8000c20 <LowPassFilter>
 80021d8:	eef0 7a40 	vmov.f32	s15, s0
 80021dc:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <DMA2_Stream0_IRQHandler+0x1dc>)
 80021de:	edc3 7a00 	vstr	s15, [r3]
				if(U_DClink_filtered>INVERTER_OVERVOLTAGE_LEVEL && OV_measurement_error_counter<2){if(OV_measurement_error_counter==1){inverter_error_trip(overvoltage);}OV_measurement_error_counter++;}else{OV_measurement_error_counter=0;}
 80021e2:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <DMA2_Stream0_IRQHandler+0x1dc>)
 80021e4:	edd3 7a00 	vldr	s15, [r3]
 80021e8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002294 <DMA2_Stream0_IRQHandler+0x1e0>
 80021ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f4:	dd11      	ble.n	800221a <DMA2_Stream0_IRQHandler+0x166>
 80021f6:	4b28      	ldr	r3, [pc, #160]	; (8002298 <DMA2_Stream0_IRQHandler+0x1e4>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d80d      	bhi.n	800221a <DMA2_Stream0_IRQHandler+0x166>
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <DMA2_Stream0_IRQHandler+0x1e4>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d102      	bne.n	800220c <DMA2_Stream0_IRQHandler+0x158>
 8002206:	2002      	movs	r0, #2
 8002208:	f7fe fc2c 	bl	8000a64 <inverter_error_trip>
 800220c:	4b22      	ldr	r3, [pc, #136]	; (8002298 <DMA2_Stream0_IRQHandler+0x1e4>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	3301      	adds	r3, #1
 8002212:	b2da      	uxtb	r2, r3
 8002214:	4b20      	ldr	r3, [pc, #128]	; (8002298 <DMA2_Stream0_IRQHandler+0x1e4>)
 8002216:	701a      	strb	r2, [r3, #0]
 8002218:	e002      	b.n	8002220 <DMA2_Stream0_IRQHandler+0x16c>
 800221a:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <DMA2_Stream0_IRQHandler+0x1e4>)
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
				if(U_DClink_filtered<INVERTER_UNDERVOLTAGE_LEVEL && UV_measurement_error_counter<2){if(UV_measurement_error_counter==1){inverter_error_trip(undervoltage);}UV_measurement_error_counter++;}else{UV_measurement_error_counter=0;} //2 measurements under a treshold must happen in a row
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <DMA2_Stream0_IRQHandler+0x1dc>)
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800222a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800222e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002232:	d535      	bpl.n	80022a0 <DMA2_Stream0_IRQHandler+0x1ec>
 8002234:	4b19      	ldr	r3, [pc, #100]	; (800229c <DMA2_Stream0_IRQHandler+0x1e8>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d831      	bhi.n	80022a0 <DMA2_Stream0_IRQHandler+0x1ec>
 800223c:	4b17      	ldr	r3, [pc, #92]	; (800229c <DMA2_Stream0_IRQHandler+0x1e8>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d102      	bne.n	800224a <DMA2_Stream0_IRQHandler+0x196>
 8002244:	2001      	movs	r0, #1
 8002246:	f7fe fc0d 	bl	8000a64 <inverter_error_trip>
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <DMA2_Stream0_IRQHandler+0x1e8>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	3301      	adds	r3, #1
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4b12      	ldr	r3, [pc, #72]	; (800229c <DMA2_Stream0_IRQHandler+0x1e8>)
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	e026      	b.n	80022a6 <DMA2_Stream0_IRQHandler+0x1f2>
 8002258:	2000003c 	.word	0x2000003c
 800225c:	20000080 	.word	0x20000080
 8002260:	200000a4 	.word	0x200000a4
 8002264:	200000c8 	.word	0x200000c8
 8002268:	20000978 	.word	0x20000978
 800226c:	20000944 	.word	0x20000944
 8002270:	2000097a 	.word	0x2000097a
 8002274:	2000097c 	.word	0x2000097c
 8002278:	88888889 	.word	0x88888889
 800227c:	2000096c 	.word	0x2000096c
 8002280:	3ccd92fb 	.word	0x3ccd92fb
 8002284:	20000960 	.word	0x20000960
 8002288:	20000964 	.word	0x20000964
 800228c:	3c23d70a 	.word	0x3c23d70a
 8002290:	20000968 	.word	0x20000968
 8002294:	42b40000 	.word	0x42b40000
 8002298:	2000096f 	.word	0x2000096f
 800229c:	2000096e 	.word	0x2000096e
 80022a0:	4ba4      	ldr	r3, [pc, #656]	; (8002534 <DMA2_Stream0_IRQHandler+0x480>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]
				modbus_registers_buffer[14] = (uint16_t)(U_DClink_filtered*10.0f);
 80022a6:	4ba4      	ldr	r3, [pc, #656]	; (8002538 <DMA2_Stream0_IRQHandler+0x484>)
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80022b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022b8:	ee17 3a90 	vmov	r3, s15
 80022bc:	b29a      	uxth	r2, r3
 80022be:	4b9f      	ldr	r3, [pc, #636]	; (800253c <DMA2_Stream0_IRQHandler+0x488>)
 80022c0:	839a      	strh	r2, [r3, #28]
				//current calculation
				I_U_raw=ADC_rawdata[0]-I_U_zerocurrentreading;
 80022c2:	4b9f      	ldr	r3, [pc, #636]	; (8002540 <DMA2_Stream0_IRQHandler+0x48c>)
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	4b9e      	ldr	r3, [pc, #632]	; (8002544 <DMA2_Stream0_IRQHandler+0x490>)
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	b21a      	sxth	r2, r3
 80022d2:	4b9d      	ldr	r3, [pc, #628]	; (8002548 <DMA2_Stream0_IRQHandler+0x494>)
 80022d4:	801a      	strh	r2, [r3, #0]
				I_V_raw=ADC_rawdata[1]-I_V_zerocurrentreading;
 80022d6:	4b9a      	ldr	r3, [pc, #616]	; (8002540 <DMA2_Stream0_IRQHandler+0x48c>)
 80022d8:	885b      	ldrh	r3, [r3, #2]
 80022da:	b29a      	uxth	r2, r3
 80022dc:	4b9b      	ldr	r3, [pc, #620]	; (800254c <DMA2_Stream0_IRQHandler+0x498>)
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	b21a      	sxth	r2, r3
 80022e6:	4b9a      	ldr	r3, [pc, #616]	; (8002550 <DMA2_Stream0_IRQHandler+0x49c>)
 80022e8:	801a      	strh	r2, [r3, #0]
				I_U=(float)I_U_raw*CURRENT_SENSE_RATIO;
 80022ea:	4b97      	ldr	r3, [pc, #604]	; (8002548 <DMA2_Stream0_IRQHandler+0x494>)
 80022ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022f0:	ee07 3a90 	vmov	s15, r3
 80022f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022f8:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002554 <DMA2_Stream0_IRQHandler+0x4a0>
 80022fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002300:	4b95      	ldr	r3, [pc, #596]	; (8002558 <DMA2_Stream0_IRQHandler+0x4a4>)
 8002302:	edc3 7a00 	vstr	s15, [r3]
				I_V=(float)I_V_raw*CURRENT_SENSE_RATIO;
 8002306:	4b92      	ldr	r3, [pc, #584]	; (8002550 <DMA2_Stream0_IRQHandler+0x49c>)
 8002308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800230c:	ee07 3a90 	vmov	s15, r3
 8002310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002314:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8002554 <DMA2_Stream0_IRQHandler+0x4a0>
 8002318:	ee67 7a87 	vmul.f32	s15, s15, s14
 800231c:	4b8f      	ldr	r3, [pc, #572]	; (800255c <DMA2_Stream0_IRQHandler+0x4a8>)
 800231e:	edc3 7a00 	vstr	s15, [r3]
				I_W=-I_U-I_V;
 8002322:	4b8d      	ldr	r3, [pc, #564]	; (8002558 <DMA2_Stream0_IRQHandler+0x4a4>)
 8002324:	edd3 7a00 	vldr	s15, [r3]
 8002328:	eeb1 7a67 	vneg.f32	s14, s15
 800232c:	4b8b      	ldr	r3, [pc, #556]	; (800255c <DMA2_Stream0_IRQHandler+0x4a8>)
 800232e:	edd3 7a00 	vldr	s15, [r3]
 8002332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002336:	4b8a      	ldr	r3, [pc, #552]	; (8002560 <DMA2_Stream0_IRQHandler+0x4ac>)
 8002338:	edc3 7a00 	vstr	s15, [r3]
				//RMS current calculation loop

				rms_count++;
 800233c:	4b89      	ldr	r3, [pc, #548]	; (8002564 <DMA2_Stream0_IRQHandler+0x4b0>)
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	b29b      	uxth	r3, r3
 8002342:	3301      	adds	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	4b87      	ldr	r3, [pc, #540]	; (8002564 <DMA2_Stream0_IRQHandler+0x4b0>)
 8002348:	801a      	strh	r2, [r3, #0]
				I_U_square_sum+=(I_U*I_U);
 800234a:	4b83      	ldr	r3, [pc, #524]	; (8002558 <DMA2_Stream0_IRQHandler+0x4a4>)
 800234c:	ed93 7a00 	vldr	s14, [r3]
 8002350:	4b81      	ldr	r3, [pc, #516]	; (8002558 <DMA2_Stream0_IRQHandler+0x4a4>)
 8002352:	edd3 7a00 	vldr	s15, [r3]
 8002356:	ee27 7a27 	vmul.f32	s14, s14, s15
 800235a:	4b83      	ldr	r3, [pc, #524]	; (8002568 <DMA2_Stream0_IRQHandler+0x4b4>)
 800235c:	edd3 7a00 	vldr	s15, [r3]
 8002360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002364:	4b80      	ldr	r3, [pc, #512]	; (8002568 <DMA2_Stream0_IRQHandler+0x4b4>)
 8002366:	edc3 7a00 	vstr	s15, [r3]
				I_V_square_sum+=(I_V*I_V);
 800236a:	4b7c      	ldr	r3, [pc, #496]	; (800255c <DMA2_Stream0_IRQHandler+0x4a8>)
 800236c:	ed93 7a00 	vldr	s14, [r3]
 8002370:	4b7a      	ldr	r3, [pc, #488]	; (800255c <DMA2_Stream0_IRQHandler+0x4a8>)
 8002372:	edd3 7a00 	vldr	s15, [r3]
 8002376:	ee27 7a27 	vmul.f32	s14, s14, s15
 800237a:	4b7c      	ldr	r3, [pc, #496]	; (800256c <DMA2_Stream0_IRQHandler+0x4b8>)
 800237c:	edd3 7a00 	vldr	s15, [r3]
 8002380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002384:	4b79      	ldr	r3, [pc, #484]	; (800256c <DMA2_Stream0_IRQHandler+0x4b8>)
 8002386:	edc3 7a00 	vstr	s15, [r3]
				I_W_square_sum+=(I_W*I_W);
 800238a:	4b75      	ldr	r3, [pc, #468]	; (8002560 <DMA2_Stream0_IRQHandler+0x4ac>)
 800238c:	ed93 7a00 	vldr	s14, [r3]
 8002390:	4b73      	ldr	r3, [pc, #460]	; (8002560 <DMA2_Stream0_IRQHandler+0x4ac>)
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	ee27 7a27 	vmul.f32	s14, s14, s15
 800239a:	4b75      	ldr	r3, [pc, #468]	; (8002570 <DMA2_Stream0_IRQHandler+0x4bc>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a4:	4b72      	ldr	r3, [pc, #456]	; (8002570 <DMA2_Stream0_IRQHandler+0x4bc>)
 80023a6:	edc3 7a00 	vstr	s15, [r3]

				if(rms_count>CURRENT_RMS_SAMPLING_COUNT){
 80023aa:	4b6e      	ldr	r3, [pc, #440]	; (8002564 <DMA2_Stream0_IRQHandler+0x4b0>)
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023b4:	d96f      	bls.n	8002496 <DMA2_Stream0_IRQHandler+0x3e2>
					I_U_RMS=sqrtf(I_U_square_sum/(float)rms_count);
 80023b6:	4b6c      	ldr	r3, [pc, #432]	; (8002568 <DMA2_Stream0_IRQHandler+0x4b4>)
 80023b8:	ed93 7a00 	vldr	s14, [r3]
 80023bc:	4b69      	ldr	r3, [pc, #420]	; (8002564 <DMA2_Stream0_IRQHandler+0x4b0>)
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	ee07 3a90 	vmov	s15, r3
 80023c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023ce:	eeb0 0a66 	vmov.f32	s0, s13
 80023d2:	f009 fb4b 	bl	800ba6c <sqrtf>
 80023d6:	eef0 7a40 	vmov.f32	s15, s0
 80023da:	4b66      	ldr	r3, [pc, #408]	; (8002574 <DMA2_Stream0_IRQHandler+0x4c0>)
 80023dc:	edc3 7a00 	vstr	s15, [r3]
					I_V_RMS=sqrtf(I_V_square_sum/(float)rms_count);
 80023e0:	4b62      	ldr	r3, [pc, #392]	; (800256c <DMA2_Stream0_IRQHandler+0x4b8>)
 80023e2:	ed93 7a00 	vldr	s14, [r3]
 80023e6:	4b5f      	ldr	r3, [pc, #380]	; (8002564 <DMA2_Stream0_IRQHandler+0x4b0>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	ee07 3a90 	vmov	s15, r3
 80023f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023f8:	eeb0 0a66 	vmov.f32	s0, s13
 80023fc:	f009 fb36 	bl	800ba6c <sqrtf>
 8002400:	eef0 7a40 	vmov.f32	s15, s0
 8002404:	4b5c      	ldr	r3, [pc, #368]	; (8002578 <DMA2_Stream0_IRQHandler+0x4c4>)
 8002406:	edc3 7a00 	vstr	s15, [r3]
					I_W_RMS=sqrtf(I_W_square_sum/(float)rms_count);
 800240a:	4b59      	ldr	r3, [pc, #356]	; (8002570 <DMA2_Stream0_IRQHandler+0x4bc>)
 800240c:	ed93 7a00 	vldr	s14, [r3]
 8002410:	4b54      	ldr	r3, [pc, #336]	; (8002564 <DMA2_Stream0_IRQHandler+0x4b0>)
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	ee07 3a90 	vmov	s15, r3
 800241a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800241e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002422:	eeb0 0a66 	vmov.f32	s0, s13
 8002426:	f009 fb21 	bl	800ba6c <sqrtf>
 800242a:	eef0 7a40 	vmov.f32	s15, s0
 800242e:	4b53      	ldr	r3, [pc, #332]	; (800257c <DMA2_Stream0_IRQHandler+0x4c8>)
 8002430:	edc3 7a00 	vstr	s15, [r3]
					I_out=(I_U_RMS+I_V_RMS+I_W_RMS)/3.0f;
 8002434:	4b4f      	ldr	r3, [pc, #316]	; (8002574 <DMA2_Stream0_IRQHandler+0x4c0>)
 8002436:	ed93 7a00 	vldr	s14, [r3]
 800243a:	4b4f      	ldr	r3, [pc, #316]	; (8002578 <DMA2_Stream0_IRQHandler+0x4c4>)
 800243c:	edd3 7a00 	vldr	s15, [r3]
 8002440:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002444:	4b4d      	ldr	r3, [pc, #308]	; (800257c <DMA2_Stream0_IRQHandler+0x4c8>)
 8002446:	edd3 7a00 	vldr	s15, [r3]
 800244a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800244e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002452:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002456:	4b4a      	ldr	r3, [pc, #296]	; (8002580 <DMA2_Stream0_IRQHandler+0x4cc>)
 8002458:	edc3 7a00 	vstr	s15, [r3]
					modbus_registers_buffer[10]=(uint16_t)(I_out*100.0f);
 800245c:	4b48      	ldr	r3, [pc, #288]	; (8002580 <DMA2_Stream0_IRQHandler+0x4cc>)
 800245e:	edd3 7a00 	vldr	s15, [r3]
 8002462:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002584 <DMA2_Stream0_IRQHandler+0x4d0>
 8002466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800246e:	ee17 3a90 	vmov	r3, s15
 8002472:	b29a      	uxth	r2, r3
 8002474:	4b31      	ldr	r3, [pc, #196]	; (800253c <DMA2_Stream0_IRQHandler+0x488>)
 8002476:	829a      	strh	r2, [r3, #20]
					rms_count=0;I_U_square_sum=0.0f;I_V_square_sum=0.0f;I_W_square_sum=0.0f;}
 8002478:	4b3a      	ldr	r3, [pc, #232]	; (8002564 <DMA2_Stream0_IRQHandler+0x4b0>)
 800247a:	2200      	movs	r2, #0
 800247c:	801a      	strh	r2, [r3, #0]
 800247e:	4b3a      	ldr	r3, [pc, #232]	; (8002568 <DMA2_Stream0_IRQHandler+0x4b4>)
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	4b39      	ldr	r3, [pc, #228]	; (800256c <DMA2_Stream0_IRQHandler+0x4b8>)
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	4b38      	ldr	r3, [pc, #224]	; (8002570 <DMA2_Stream0_IRQHandler+0x4bc>)
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	601a      	str	r2, [r3, #0]

				if((I_U>INVERTER_OVERCURRENT_TRIP_LEVEL || I_U < (-INVERTER_OVERCURRENT_TRIP_LEVEL) || I_V>INVERTER_OVERCURRENT_TRIP_LEVEL || I_V < (-INVERTER_OVERCURRENT_TRIP_LEVEL) || I_W > INVERTER_OVERCURRENT_TRIP_LEVEL || I_W <(-INVERTER_OVERCURRENT_TRIP_LEVEL)) && OC_measurement_error_counter<3){
 8002496:	4b30      	ldr	r3, [pc, #192]	; (8002558 <DMA2_Stream0_IRQHandler+0x4a4>)
 8002498:	edd3 7a00 	vldr	s15, [r3]
 800249c:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 80024a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a8:	dc31      	bgt.n	800250e <DMA2_Stream0_IRQHandler+0x45a>
 80024aa:	4b2b      	ldr	r3, [pc, #172]	; (8002558 <DMA2_Stream0_IRQHandler+0x4a4>)
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	eeba 7a06 	vmov.f32	s14, #166	; 0xc1300000 -11.0
 80024b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024bc:	d427      	bmi.n	800250e <DMA2_Stream0_IRQHandler+0x45a>
 80024be:	4b27      	ldr	r3, [pc, #156]	; (800255c <DMA2_Stream0_IRQHandler+0x4a8>)
 80024c0:	edd3 7a00 	vldr	s15, [r3]
 80024c4:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 80024c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d0:	dc1d      	bgt.n	800250e <DMA2_Stream0_IRQHandler+0x45a>
 80024d2:	4b22      	ldr	r3, [pc, #136]	; (800255c <DMA2_Stream0_IRQHandler+0x4a8>)
 80024d4:	edd3 7a00 	vldr	s15, [r3]
 80024d8:	eeba 7a06 	vmov.f32	s14, #166	; 0xc1300000 -11.0
 80024dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e4:	d413      	bmi.n	800250e <DMA2_Stream0_IRQHandler+0x45a>
 80024e6:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <DMA2_Stream0_IRQHandler+0x4ac>)
 80024e8:	edd3 7a00 	vldr	s15, [r3]
 80024ec:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 80024f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f8:	dc09      	bgt.n	800250e <DMA2_Stream0_IRQHandler+0x45a>
 80024fa:	4b19      	ldr	r3, [pc, #100]	; (8002560 <DMA2_Stream0_IRQHandler+0x4ac>)
 80024fc:	edd3 7a00 	vldr	s15, [r3]
 8002500:	eeba 7a06 	vmov.f32	s14, #166	; 0xc1300000 -11.0
 8002504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	d53e      	bpl.n	800258c <DMA2_Stream0_IRQHandler+0x4d8>
 800250e:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <DMA2_Stream0_IRQHandler+0x4d4>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d83a      	bhi.n	800258c <DMA2_Stream0_IRQHandler+0x4d8>
					OC_measurement_error_counter++;
 8002516:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <DMA2_Stream0_IRQHandler+0x4d4>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	3301      	adds	r3, #1
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <DMA2_Stream0_IRQHandler+0x4d4>)
 8002520:	701a      	strb	r2, [r3, #0]
					if(OC_measurement_error_counter==2){inverter_error_trip(inverter_overcurrent);}
 8002522:	4b19      	ldr	r3, [pc, #100]	; (8002588 <DMA2_Stream0_IRQHandler+0x4d4>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d133      	bne.n	8002592 <DMA2_Stream0_IRQHandler+0x4de>
 800252a:	2004      	movs	r0, #4
 800252c:	f7fe fa9a 	bl	8000a64 <inverter_error_trip>
 8002530:	e02f      	b.n	8002592 <DMA2_Stream0_IRQHandler+0x4de>
 8002532:	bf00      	nop
 8002534:	2000096e 	.word	0x2000096e
 8002538:	20000968 	.word	0x20000968
 800253c:	20000000 	.word	0x20000000
 8002540:	20000944 	.word	0x20000944
 8002544:	2000097a 	.word	0x2000097a
 8002548:	2000097e 	.word	0x2000097e
 800254c:	2000097c 	.word	0x2000097c
 8002550:	20000980 	.word	0x20000980
 8002554:	3c88018c 	.word	0x3c88018c
 8002558:	20000984 	.word	0x20000984
 800255c:	20000988 	.word	0x20000988
 8002560:	2000098c 	.word	0x2000098c
 8002564:	20000990 	.word	0x20000990
 8002568:	20000994 	.word	0x20000994
 800256c:	20000998 	.word	0x20000998
 8002570:	2000099c 	.word	0x2000099c
 8002574:	200009a0 	.word	0x200009a0
 8002578:	200009a4 	.word	0x200009a4
 800257c:	200009a8 	.word	0x200009a8
 8002580:	200009ac 	.word	0x200009ac
 8002584:	42c80000 	.word	0x42c80000
 8002588:	2000096d 	.word	0x2000096d
				}else{OC_measurement_error_counter=0;}
 800258c:	4b7b      	ldr	r3, [pc, #492]	; (800277c <DMA2_Stream0_IRQHandler+0x6c8>)
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]

				if((I_U>parameter_set.motor_max_current || I_U < (-parameter_set.motor_max_current) || I_V>parameter_set.motor_max_current || I_V < (-parameter_set.motor_max_current) || I_W > parameter_set.motor_max_current || I_W <(-parameter_set.motor_max_current)) && OC_measurement_error_counter<3){
 8002592:	4b7b      	ldr	r3, [pc, #492]	; (8002780 <DMA2_Stream0_IRQHandler+0x6cc>)
 8002594:	ed93 7a00 	vldr	s14, [r3]
 8002598:	4b7a      	ldr	r3, [pc, #488]	; (8002784 <DMA2_Stream0_IRQHandler+0x6d0>)
 800259a:	edd3 7a00 	vldr	s15, [r3]
 800259e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a6:	d43c      	bmi.n	8002622 <DMA2_Stream0_IRQHandler+0x56e>
 80025a8:	4b75      	ldr	r3, [pc, #468]	; (8002780 <DMA2_Stream0_IRQHandler+0x6cc>)
 80025aa:	edd3 7a00 	vldr	s15, [r3]
 80025ae:	eeb1 7a67 	vneg.f32	s14, s15
 80025b2:	4b74      	ldr	r3, [pc, #464]	; (8002784 <DMA2_Stream0_IRQHandler+0x6d0>)
 80025b4:	edd3 7a00 	vldr	s15, [r3]
 80025b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c0:	dc2f      	bgt.n	8002622 <DMA2_Stream0_IRQHandler+0x56e>
 80025c2:	4b6f      	ldr	r3, [pc, #444]	; (8002780 <DMA2_Stream0_IRQHandler+0x6cc>)
 80025c4:	ed93 7a00 	vldr	s14, [r3]
 80025c8:	4b6f      	ldr	r3, [pc, #444]	; (8002788 <DMA2_Stream0_IRQHandler+0x6d4>)
 80025ca:	edd3 7a00 	vldr	s15, [r3]
 80025ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d6:	d424      	bmi.n	8002622 <DMA2_Stream0_IRQHandler+0x56e>
 80025d8:	4b69      	ldr	r3, [pc, #420]	; (8002780 <DMA2_Stream0_IRQHandler+0x6cc>)
 80025da:	edd3 7a00 	vldr	s15, [r3]
 80025de:	eeb1 7a67 	vneg.f32	s14, s15
 80025e2:	4b69      	ldr	r3, [pc, #420]	; (8002788 <DMA2_Stream0_IRQHandler+0x6d4>)
 80025e4:	edd3 7a00 	vldr	s15, [r3]
 80025e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f0:	dc17      	bgt.n	8002622 <DMA2_Stream0_IRQHandler+0x56e>
 80025f2:	4b63      	ldr	r3, [pc, #396]	; (8002780 <DMA2_Stream0_IRQHandler+0x6cc>)
 80025f4:	ed93 7a00 	vldr	s14, [r3]
 80025f8:	4b64      	ldr	r3, [pc, #400]	; (800278c <DMA2_Stream0_IRQHandler+0x6d8>)
 80025fa:	edd3 7a00 	vldr	s15, [r3]
 80025fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002606:	d40c      	bmi.n	8002622 <DMA2_Stream0_IRQHandler+0x56e>
 8002608:	4b5d      	ldr	r3, [pc, #372]	; (8002780 <DMA2_Stream0_IRQHandler+0x6cc>)
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	eeb1 7a67 	vneg.f32	s14, s15
 8002612:	4b5e      	ldr	r3, [pc, #376]	; (800278c <DMA2_Stream0_IRQHandler+0x6d8>)
 8002614:	edd3 7a00 	vldr	s15, [r3]
 8002618:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800261c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002620:	dd11      	ble.n	8002646 <DMA2_Stream0_IRQHandler+0x592>
 8002622:	4b56      	ldr	r3, [pc, #344]	; (800277c <DMA2_Stream0_IRQHandler+0x6c8>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d80d      	bhi.n	8002646 <DMA2_Stream0_IRQHandler+0x592>
					OC_measurement_error_counter++;
 800262a:	4b54      	ldr	r3, [pc, #336]	; (800277c <DMA2_Stream0_IRQHandler+0x6c8>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	3301      	adds	r3, #1
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4b52      	ldr	r3, [pc, #328]	; (800277c <DMA2_Stream0_IRQHandler+0x6c8>)
 8002634:	701a      	strb	r2, [r3, #0]
					if(OC_measurement_error_counter==2){inverter_error_trip(motor_overcurrent);}
 8002636:	4b51      	ldr	r3, [pc, #324]	; (800277c <DMA2_Stream0_IRQHandler+0x6c8>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d106      	bne.n	800264c <DMA2_Stream0_IRQHandler+0x598>
 800263e:	2005      	movs	r0, #5
 8002640:	f7fe fa10 	bl	8000a64 <inverter_error_trip>
 8002644:	e002      	b.n	800264c <DMA2_Stream0_IRQHandler+0x598>
				}else{OC_measurement_error_counter=0;}
 8002646:	4b4d      	ldr	r3, [pc, #308]	; (800277c <DMA2_Stream0_IRQHandler+0x6c8>)
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]

				if(parameter_set.motor_feedback_type==abz_encoder){
 800264c:	4b4c      	ldr	r3, [pc, #304]	; (8002780 <DMA2_Stream0_IRQHandler+0x6cc>)
 800264e:	7e9b      	ldrb	r3, [r3, #26]
 8002650:	2b01      	cmp	r3, #1
 8002652:	f040 8129 	bne.w	80028a8 <DMA2_Stream0_IRQHandler+0x7f4>
					if(encoder_positioned){
 8002656:	4b4e      	ldr	r3, [pc, #312]	; (8002790 <DMA2_Stream0_IRQHandler+0x6dc>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8124 	beq.w	80028a8 <DMA2_Stream0_IRQHandler+0x7f4>
						if(TIM2->CNT <5000){encoder_actual_position=5000-TIM2->CNT;}
 8002660:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	f241 3287 	movw	r2, #4999	; 0x1387
 800266a:	4293      	cmp	r3, r2
 800266c:	d80b      	bhi.n	8002686 <DMA2_Stream0_IRQHandler+0x5d2>
 800266e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	b29b      	uxth	r3, r3
 8002676:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 800267a:	3308      	adds	r3, #8
 800267c:	b29b      	uxth	r3, r3
 800267e:	b21a      	sxth	r2, r3
 8002680:	4b44      	ldr	r3, [pc, #272]	; (8002794 <DMA2_Stream0_IRQHandler+0x6e0>)
 8002682:	801a      	strh	r2, [r3, #0]
 8002684:	e00a      	b.n	800269c <DMA2_Stream0_IRQHandler+0x5e8>
						else{encoder_actual_position=10000-TIM2->CNT;}
 8002686:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	b29b      	uxth	r3, r3
 800268e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8002692:	3310      	adds	r3, #16
 8002694:	b29b      	uxth	r3, r3
 8002696:	b21a      	sxth	r2, r3
 8002698:	4b3e      	ldr	r3, [pc, #248]	; (8002794 <DMA2_Stream0_IRQHandler+0x6e0>)
 800269a:	801a      	strh	r2, [r3, #0]
						modbus_registers_buffer[11]=encoder_actual_position;
 800269c:	4b3d      	ldr	r3, [pc, #244]	; (8002794 <DMA2_Stream0_IRQHandler+0x6e0>)
 800269e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	4b3c      	ldr	r3, [pc, #240]	; (8002798 <DMA2_Stream0_IRQHandler+0x6e4>)
 80026a6:	82da      	strh	r2, [r3, #22]
						int16_t corrected_encoder_position=((encoder_actual_position % 1000) - encoder_correction_abz);
 80026a8:	4b3a      	ldr	r3, [pc, #232]	; (8002794 <DMA2_Stream0_IRQHandler+0x6e0>)
 80026aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ae:	4a3b      	ldr	r2, [pc, #236]	; (800279c <DMA2_Stream0_IRQHandler+0x6e8>)
 80026b0:	fb82 1203 	smull	r1, r2, r2, r3
 80026b4:	1191      	asrs	r1, r2, #6
 80026b6:	17da      	asrs	r2, r3, #31
 80026b8:	1a8a      	subs	r2, r1, r2
 80026ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026be:	fb01 f202 	mul.w	r2, r1, r2
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	b21b      	sxth	r3, r3
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	4b35      	ldr	r3, [pc, #212]	; (80027a0 <DMA2_Stream0_IRQHandler+0x6ec>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	80fb      	strh	r3, [r7, #6]
						if(corrected_encoder_position<0){corrected_encoder_position+=1000;}
 80026d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	da04      	bge.n	80026e4 <DMA2_Stream0_IRQHandler+0x630>
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	80fb      	strh	r3, [r7, #6]
						actual_electric_angle=(float)(corrected_encoder_position)*0.36f;
 80026e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026e8:	ee07 3a90 	vmov	s15, r3
 80026ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026f0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80027a4 <DMA2_Stream0_IRQHandler+0x6f0>
 80026f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f8:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <DMA2_Stream0_IRQHandler+0x6f4>)
 80026fa:	edc3 7a00 	vstr	s15, [r3]
						if(actual_electric_angle-electric_angle>180.0f){actual_torque_angle=(actual_electric_angle-electric_angle) - 360.0f;}
 80026fe:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <DMA2_Stream0_IRQHandler+0x6f4>)
 8002700:	ed93 7a00 	vldr	s14, [r3]
 8002704:	4b29      	ldr	r3, [pc, #164]	; (80027ac <DMA2_Stream0_IRQHandler+0x6f8>)
 8002706:	edd3 7a00 	vldr	s15, [r3]
 800270a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800270e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80027b0 <DMA2_Stream0_IRQHandler+0x6fc>
 8002712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271a:	dd0f      	ble.n	800273c <DMA2_Stream0_IRQHandler+0x688>
 800271c:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <DMA2_Stream0_IRQHandler+0x6f4>)
 800271e:	ed93 7a00 	vldr	s14, [r3]
 8002722:	4b22      	ldr	r3, [pc, #136]	; (80027ac <DMA2_Stream0_IRQHandler+0x6f8>)
 8002724:	edd3 7a00 	vldr	s15, [r3]
 8002728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80027b4 <DMA2_Stream0_IRQHandler+0x700>
 8002730:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002734:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <DMA2_Stream0_IRQHandler+0x704>)
 8002736:	edc3 7a00 	vstr	s15, [r3]
 800273a:	e04c      	b.n	80027d6 <DMA2_Stream0_IRQHandler+0x722>
						else if(actual_electric_angle-electric_angle<(-180.0f)){actual_torque_angle=actual_electric_angle-electric_angle + 360.0f;}
 800273c:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <DMA2_Stream0_IRQHandler+0x6f4>)
 800273e:	ed93 7a00 	vldr	s14, [r3]
 8002742:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <DMA2_Stream0_IRQHandler+0x6f8>)
 8002744:	edd3 7a00 	vldr	s15, [r3]
 8002748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800274c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80027bc <DMA2_Stream0_IRQHandler+0x708>
 8002750:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002758:	d532      	bpl.n	80027c0 <DMA2_Stream0_IRQHandler+0x70c>
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <DMA2_Stream0_IRQHandler+0x6f4>)
 800275c:	ed93 7a00 	vldr	s14, [r3]
 8002760:	4b12      	ldr	r3, [pc, #72]	; (80027ac <DMA2_Stream0_IRQHandler+0x6f8>)
 8002762:	edd3 7a00 	vldr	s15, [r3]
 8002766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800276a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80027b4 <DMA2_Stream0_IRQHandler+0x700>
 800276e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <DMA2_Stream0_IRQHandler+0x704>)
 8002774:	edc3 7a00 	vstr	s15, [r3]
 8002778:	e02d      	b.n	80027d6 <DMA2_Stream0_IRQHandler+0x722>
 800277a:	bf00      	nop
 800277c:	2000096d 	.word	0x2000096d
 8002780:	2000003c 	.word	0x2000003c
 8002784:	20000984 	.word	0x20000984
 8002788:	20000988 	.word	0x20000988
 800278c:	2000098c 	.word	0x2000098c
 8002790:	200009d8 	.word	0x200009d8
 8002794:	200009da 	.word	0x200009da
 8002798:	20000000 	.word	0x20000000
 800279c:	10624dd3 	.word	0x10624dd3
 80027a0:	200000ec 	.word	0x200000ec
 80027a4:	3eb851ec 	.word	0x3eb851ec
 80027a8:	200009dc 	.word	0x200009dc
 80027ac:	20000958 	.word	0x20000958
 80027b0:	43340000 	.word	0x43340000
 80027b4:	43b40000 	.word	0x43b40000
 80027b8:	200009e4 	.word	0x200009e4
 80027bc:	c3340000 	.word	0xc3340000
						else{actual_torque_angle=actual_electric_angle-electric_angle;}
 80027c0:	4bbf      	ldr	r3, [pc, #764]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 80027c2:	ed93 7a00 	vldr	s14, [r3]
 80027c6:	4bbf      	ldr	r3, [pc, #764]	; (8002ac4 <DMA2_Stream0_IRQHandler+0xa10>)
 80027c8:	edd3 7a00 	vldr	s15, [r3]
 80027cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d0:	4bbd      	ldr	r3, [pc, #756]	; (8002ac8 <DMA2_Stream0_IRQHandler+0xa14>)
 80027d2:	edc3 7a00 	vstr	s15, [r3]
						modbus_registers_buffer[12]=(int16_t)actual_torque_angle;//write calculated value to modbus array
 80027d6:	4bbc      	ldr	r3, [pc, #752]	; (8002ac8 <DMA2_Stream0_IRQHandler+0xa14>)
 80027d8:	edd3 7a00 	vldr	s15, [r3]
 80027dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027e0:	ee17 3a90 	vmov	r3, s15
 80027e4:	b21b      	sxth	r3, r3
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	4bb8      	ldr	r3, [pc, #736]	; (8002acc <DMA2_Stream0_IRQHandler+0xa18>)
 80027ea:	831a      	strh	r2, [r3, #24]
						speed_measurement_loop_i++;
 80027ec:	4bb8      	ldr	r3, [pc, #736]	; (8002ad0 <DMA2_Stream0_IRQHandler+0xa1c>)
 80027ee:	edd3 7a00 	vldr	s15, [r3]
 80027f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027fa:	4bb5      	ldr	r3, [pc, #724]	; (8002ad0 <DMA2_Stream0_IRQHandler+0xa1c>)
 80027fc:	edc3 7a00 	vstr	s15, [r3]
						if(speed_measurement_loop_i>=30){
 8002800:	4bb3      	ldr	r3, [pc, #716]	; (8002ad0 <DMA2_Stream0_IRQHandler+0xa1c>)
 8002802:	edd3 7a00 	vldr	s15, [r3]
 8002806:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800280a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800280e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002812:	db49      	blt.n	80028a8 <DMA2_Stream0_IRQHandler+0x7f4>
							speed=(actual_electric_angle-last_actual_electric_angle)*17.77777f; //speed(rpm) = ((x(deg)/polepairs)/360deg)/(0,001875(s)/60s)
 8002814:	4baa      	ldr	r3, [pc, #680]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 8002816:	ed93 7a00 	vldr	s14, [r3]
 800281a:	4bae      	ldr	r3, [pc, #696]	; (8002ad4 <DMA2_Stream0_IRQHandler+0xa20>)
 800281c:	edd3 7a00 	vldr	s15, [r3]
 8002820:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002824:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8002ad8 <DMA2_Stream0_IRQHandler+0xa24>
 8002828:	ee67 7a87 	vmul.f32	s15, s15, s14
 800282c:	4bab      	ldr	r3, [pc, #684]	; (8002adc <DMA2_Stream0_IRQHandler+0xa28>)
 800282e:	edc3 7a00 	vstr	s15, [r3]
							if(speed>3200){speed-=6400;}if(speed<(-3200)){speed+=6400;}
 8002832:	4baa      	ldr	r3, [pc, #680]	; (8002adc <DMA2_Stream0_IRQHandler+0xa28>)
 8002834:	edd3 7a00 	vldr	s15, [r3]
 8002838:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002ae0 <DMA2_Stream0_IRQHandler+0xa2c>
 800283c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002844:	dd09      	ble.n	800285a <DMA2_Stream0_IRQHandler+0x7a6>
 8002846:	4ba5      	ldr	r3, [pc, #660]	; (8002adc <DMA2_Stream0_IRQHandler+0xa28>)
 8002848:	edd3 7a00 	vldr	s15, [r3]
 800284c:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002ae4 <DMA2_Stream0_IRQHandler+0xa30>
 8002850:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002854:	4ba1      	ldr	r3, [pc, #644]	; (8002adc <DMA2_Stream0_IRQHandler+0xa28>)
 8002856:	edc3 7a00 	vstr	s15, [r3]
 800285a:	4ba0      	ldr	r3, [pc, #640]	; (8002adc <DMA2_Stream0_IRQHandler+0xa28>)
 800285c:	edd3 7a00 	vldr	s15, [r3]
 8002860:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8002ae8 <DMA2_Stream0_IRQHandler+0xa34>
 8002864:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286c:	d509      	bpl.n	8002882 <DMA2_Stream0_IRQHandler+0x7ce>
 800286e:	4b9b      	ldr	r3, [pc, #620]	; (8002adc <DMA2_Stream0_IRQHandler+0xa28>)
 8002870:	edd3 7a00 	vldr	s15, [r3]
 8002874:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002ae4 <DMA2_Stream0_IRQHandler+0xa30>
 8002878:	ee77 7a87 	vadd.f32	s15, s15, s14
 800287c:	4b97      	ldr	r3, [pc, #604]	; (8002adc <DMA2_Stream0_IRQHandler+0xa28>)
 800287e:	edc3 7a00 	vstr	s15, [r3]
							modbus_registers_buffer[13]=(int16_t)(filtered_speed);
 8002882:	4b9a      	ldr	r3, [pc, #616]	; (8002aec <DMA2_Stream0_IRQHandler+0xa38>)
 8002884:	edd3 7a00 	vldr	s15, [r3]
 8002888:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800288c:	ee17 3a90 	vmov	r3, s15
 8002890:	b21b      	sxth	r3, r3
 8002892:	b29a      	uxth	r2, r3
 8002894:	4b8d      	ldr	r3, [pc, #564]	; (8002acc <DMA2_Stream0_IRQHandler+0xa18>)
 8002896:	835a      	strh	r2, [r3, #26]
							last_actual_electric_angle = actual_electric_angle;
 8002898:	4b89      	ldr	r3, [pc, #548]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a8d      	ldr	r2, [pc, #564]	; (8002ad4 <DMA2_Stream0_IRQHandler+0xa20>)
 800289e:	6013      	str	r3, [r2, #0]
							speed_measurement_loop_i=0;
 80028a0:	4b8b      	ldr	r3, [pc, #556]	; (8002ad0 <DMA2_Stream0_IRQHandler+0xa1c>)
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
						}
					}
				}
				if(parameter_set.motor_feedback_type==ssi_encoder){
 80028a8:	4b91      	ldr	r3, [pc, #580]	; (8002af0 <DMA2_Stream0_IRQHandler+0xa3c>)
 80028aa:	7e9b      	ldrb	r3, [r3, #26]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	f040 81bd 	bne.w	8002c2c <DMA2_Stream0_IRQHandler+0xb78>
					modbus_registers_buffer[11]=ssi_encoder_data.encoder_position;
 80028b2:	4b90      	ldr	r3, [pc, #576]	; (8002af4 <DMA2_Stream0_IRQHandler+0xa40>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	4b84      	ldr	r3, [pc, #528]	; (8002acc <DMA2_Stream0_IRQHandler+0xa18>)
 80028ba:	82da      	strh	r2, [r3, #22]
					if(ssi_encoder_data.encoder_resolution==p8192ppr){
 80028bc:	4b8d      	ldr	r3, [pc, #564]	; (8002af4 <DMA2_Stream0_IRQHandler+0xa40>)
 80028be:	7f1b      	ldrb	r3, [r3, #28]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d159      	bne.n	8002978 <DMA2_Stream0_IRQHandler+0x8c4>
						actual_electric_angle=(((fmodf(ssi_encoder_data.encoder_position, 8192.0f/(float)parameter_set.motor_pole_pairs))/(8192.0f/(float)parameter_set.motor_pole_pairs))*360.0f)+parameter_set.encoder_electric_angle_correction;
 80028c4:	4b8b      	ldr	r3, [pc, #556]	; (8002af4 <DMA2_Stream0_IRQHandler+0xa40>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	ee07 3a90 	vmov	s15, r3
 80028cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028d0:	4b87      	ldr	r3, [pc, #540]	; (8002af0 <DMA2_Stream0_IRQHandler+0xa3c>)
 80028d2:	7a1b      	ldrb	r3, [r3, #8]
 80028d4:	ee07 3a90 	vmov	s15, r3
 80028d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028dc:	ed9f 6a86 	vldr	s12, [pc, #536]	; 8002af8 <DMA2_Stream0_IRQHandler+0xa44>
 80028e0:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80028e4:	eef0 0a66 	vmov.f32	s1, s13
 80028e8:	eeb0 0a47 	vmov.f32	s0, s14
 80028ec:	f009 f89e 	bl	800ba2c <fmodf>
 80028f0:	eef0 6a40 	vmov.f32	s13, s0
 80028f4:	4b7e      	ldr	r3, [pc, #504]	; (8002af0 <DMA2_Stream0_IRQHandler+0xa3c>)
 80028f6:	7a1b      	ldrb	r3, [r3, #8]
 80028f8:	ee07 3a90 	vmov	s15, r3
 80028fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002900:	ed9f 6a7d 	vldr	s12, [pc, #500]	; 8002af8 <DMA2_Stream0_IRQHandler+0xa44>
 8002904:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8002908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800290c:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8002afc <DMA2_Stream0_IRQHandler+0xa48>
 8002910:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002914:	4b76      	ldr	r3, [pc, #472]	; (8002af0 <DMA2_Stream0_IRQHandler+0xa3c>)
 8002916:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800291a:	ee07 3a90 	vmov	s15, r3
 800291e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002926:	4b66      	ldr	r3, [pc, #408]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 8002928:	edc3 7a00 	vstr	s15, [r3]
						if(actual_electric_angle>=360.0f){actual_electric_angle-=360.0f;}
 800292c:	4b64      	ldr	r3, [pc, #400]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 800292e:	edd3 7a00 	vldr	s15, [r3]
 8002932:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002afc <DMA2_Stream0_IRQHandler+0xa48>
 8002936:	eef4 7ac7 	vcmpe.f32	s15, s14
 800293a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293e:	db09      	blt.n	8002954 <DMA2_Stream0_IRQHandler+0x8a0>
 8002940:	4b5f      	ldr	r3, [pc, #380]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 8002942:	edd3 7a00 	vldr	s15, [r3]
 8002946:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8002afc <DMA2_Stream0_IRQHandler+0xa48>
 800294a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800294e:	4b5c      	ldr	r3, [pc, #368]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 8002950:	edc3 7a00 	vstr	s15, [r3]
						if(actual_electric_angle<0){actual_electric_angle+=360.0f;}
 8002954:	4b5a      	ldr	r3, [pc, #360]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 8002956:	edd3 7a00 	vldr	s15, [r3]
 800295a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800295e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002962:	d509      	bpl.n	8002978 <DMA2_Stream0_IRQHandler+0x8c4>
 8002964:	4b56      	ldr	r3, [pc, #344]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 8002966:	edd3 7a00 	vldr	s15, [r3]
 800296a:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8002afc <DMA2_Stream0_IRQHandler+0xa48>
 800296e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002972:	4b53      	ldr	r3, [pc, #332]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 8002974:	edc3 7a00 	vstr	s15, [r3]
					}
					if(ssi_encoder_data.encoder_resolution==p131072ppr){
 8002978:	4b5e      	ldr	r3, [pc, #376]	; (8002af4 <DMA2_Stream0_IRQHandler+0xa40>)
 800297a:	7f1b      	ldrb	r3, [r3, #28]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d159      	bne.n	8002a34 <DMA2_Stream0_IRQHandler+0x980>
						//not verified if working with 17bit, no compatible motor to test :(
						actual_electric_angle=(((fmodf(ssi_encoder_data.encoder_position,8192.0f/(float)parameter_set.motor_pole_pairs))/(131072.0f/(float)parameter_set.motor_pole_pairs))*360.0f)+parameter_set.encoder_electric_angle_correction;
 8002980:	4b5c      	ldr	r3, [pc, #368]	; (8002af4 <DMA2_Stream0_IRQHandler+0xa40>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	ee07 3a90 	vmov	s15, r3
 8002988:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800298c:	4b58      	ldr	r3, [pc, #352]	; (8002af0 <DMA2_Stream0_IRQHandler+0xa3c>)
 800298e:	7a1b      	ldrb	r3, [r3, #8]
 8002990:	ee07 3a90 	vmov	s15, r3
 8002994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002998:	ed9f 6a57 	vldr	s12, [pc, #348]	; 8002af8 <DMA2_Stream0_IRQHandler+0xa44>
 800299c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80029a0:	eef0 0a66 	vmov.f32	s1, s13
 80029a4:	eeb0 0a47 	vmov.f32	s0, s14
 80029a8:	f009 f840 	bl	800ba2c <fmodf>
 80029ac:	eef0 6a40 	vmov.f32	s13, s0
 80029b0:	4b4f      	ldr	r3, [pc, #316]	; (8002af0 <DMA2_Stream0_IRQHandler+0xa3c>)
 80029b2:	7a1b      	ldrb	r3, [r3, #8]
 80029b4:	ee07 3a90 	vmov	s15, r3
 80029b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029bc:	ed9f 6a50 	vldr	s12, [pc, #320]	; 8002b00 <DMA2_Stream0_IRQHandler+0xa4c>
 80029c0:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80029c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029c8:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002afc <DMA2_Stream0_IRQHandler+0xa48>
 80029cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029d0:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <DMA2_Stream0_IRQHandler+0xa3c>)
 80029d2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80029d6:	ee07 3a90 	vmov	s15, r3
 80029da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e2:	4b37      	ldr	r3, [pc, #220]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 80029e4:	edc3 7a00 	vstr	s15, [r3]
						if(actual_electric_angle>=360.0f){actual_electric_angle-=360.0f;}
 80029e8:	4b35      	ldr	r3, [pc, #212]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002afc <DMA2_Stream0_IRQHandler+0xa48>
 80029f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fa:	db09      	blt.n	8002a10 <DMA2_Stream0_IRQHandler+0x95c>
 80029fc:	4b30      	ldr	r3, [pc, #192]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 80029fe:	edd3 7a00 	vldr	s15, [r3]
 8002a02:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002afc <DMA2_Stream0_IRQHandler+0xa48>
 8002a06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a0a:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 8002a0c:	edc3 7a00 	vstr	s15, [r3]
						if(actual_electric_angle<0){actual_electric_angle+=360.0f;}
 8002a10:	4b2b      	ldr	r3, [pc, #172]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 8002a12:	edd3 7a00 	vldr	s15, [r3]
 8002a16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1e:	d509      	bpl.n	8002a34 <DMA2_Stream0_IRQHandler+0x980>
 8002a20:	4b27      	ldr	r3, [pc, #156]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 8002a22:	edd3 7a00 	vldr	s15, [r3]
 8002a26:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002afc <DMA2_Stream0_IRQHandler+0xa48>
 8002a2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a2e:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 8002a30:	edc3 7a00 	vstr	s15, [r3]
					}
					if(ssi_encoder_data.encoder_resolution==unknown_resolution){actual_electric_angle=0;}//@TODO: encoder error trip
 8002a34:	4b2f      	ldr	r3, [pc, #188]	; (8002af4 <DMA2_Stream0_IRQHandler+0xa40>)
 8002a36:	7f1b      	ldrb	r3, [r3, #28]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d103      	bne.n	8002a44 <DMA2_Stream0_IRQHandler+0x990>
 8002a3c:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
					if(actual_electric_angle-electric_angle>180.0f){actual_torque_angle=(actual_electric_angle-electric_angle) - 360.0f;}
 8002a44:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 8002a46:	ed93 7a00 	vldr	s14, [r3]
 8002a4a:	4b1e      	ldr	r3, [pc, #120]	; (8002ac4 <DMA2_Stream0_IRQHandler+0xa10>)
 8002a4c:	edd3 7a00 	vldr	s15, [r3]
 8002a50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a54:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002b04 <DMA2_Stream0_IRQHandler+0xa50>
 8002a58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a60:	dd0f      	ble.n	8002a82 <DMA2_Stream0_IRQHandler+0x9ce>
 8002a62:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 8002a64:	ed93 7a00 	vldr	s14, [r3]
 8002a68:	4b16      	ldr	r3, [pc, #88]	; (8002ac4 <DMA2_Stream0_IRQHandler+0xa10>)
 8002a6a:	edd3 7a00 	vldr	s15, [r3]
 8002a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a72:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002afc <DMA2_Stream0_IRQHandler+0xa48>
 8002a76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a7a:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <DMA2_Stream0_IRQHandler+0xa14>)
 8002a7c:	edc3 7a00 	vstr	s15, [r3]
 8002a80:	e04f      	b.n	8002b22 <DMA2_Stream0_IRQHandler+0xa6e>
					else if(actual_electric_angle-electric_angle<(-180.0f)){actual_torque_angle=actual_electric_angle-electric_angle + 360.0f;}
 8002a82:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 8002a84:	ed93 7a00 	vldr	s14, [r3]
 8002a88:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <DMA2_Stream0_IRQHandler+0xa10>)
 8002a8a:	edd3 7a00 	vldr	s15, [r3]
 8002a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a92:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002b08 <DMA2_Stream0_IRQHandler+0xa54>
 8002a96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9e:	d535      	bpl.n	8002b0c <DMA2_Stream0_IRQHandler+0xa58>
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <DMA2_Stream0_IRQHandler+0xa0c>)
 8002aa2:	ed93 7a00 	vldr	s14, [r3]
 8002aa6:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <DMA2_Stream0_IRQHandler+0xa10>)
 8002aa8:	edd3 7a00 	vldr	s15, [r3]
 8002aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab0:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002afc <DMA2_Stream0_IRQHandler+0xa48>
 8002ab4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ab8:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <DMA2_Stream0_IRQHandler+0xa14>)
 8002aba:	edc3 7a00 	vstr	s15, [r3]
 8002abe:	e030      	b.n	8002b22 <DMA2_Stream0_IRQHandler+0xa6e>
 8002ac0:	200009dc 	.word	0x200009dc
 8002ac4:	20000958 	.word	0x20000958
 8002ac8:	200009e4 	.word	0x200009e4
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	200009e8 	.word	0x200009e8
 8002ad4:	200009e0 	.word	0x200009e0
 8002ad8:	418e38df 	.word	0x418e38df
 8002adc:	200009ec 	.word	0x200009ec
 8002ae0:	45480000 	.word	0x45480000
 8002ae4:	45c80000 	.word	0x45c80000
 8002ae8:	c5480000 	.word	0xc5480000
 8002aec:	200009f0 	.word	0x200009f0
 8002af0:	2000003c 	.word	0x2000003c
 8002af4:	20000920 	.word	0x20000920
 8002af8:	46000000 	.word	0x46000000
 8002afc:	43b40000 	.word	0x43b40000
 8002b00:	48000000 	.word	0x48000000
 8002b04:	43340000 	.word	0x43340000
 8002b08:	c3340000 	.word	0xc3340000
					else{actual_torque_angle=actual_electric_angle-electric_angle;}
 8002b0c:	4b99      	ldr	r3, [pc, #612]	; (8002d74 <DMA2_Stream0_IRQHandler+0xcc0>)
 8002b0e:	ed93 7a00 	vldr	s14, [r3]
 8002b12:	4b99      	ldr	r3, [pc, #612]	; (8002d78 <DMA2_Stream0_IRQHandler+0xcc4>)
 8002b14:	edd3 7a00 	vldr	s15, [r3]
 8002b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b1c:	4b97      	ldr	r3, [pc, #604]	; (8002d7c <DMA2_Stream0_IRQHandler+0xcc8>)
 8002b1e:	edc3 7a00 	vstr	s15, [r3]
					modbus_registers_buffer[12]=(int16_t)actual_torque_angle;//write calculated value to modbus array
 8002b22:	4b96      	ldr	r3, [pc, #600]	; (8002d7c <DMA2_Stream0_IRQHandler+0xcc8>)
 8002b24:	edd3 7a00 	vldr	s15, [r3]
 8002b28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b2c:	ee17 3a90 	vmov	r3, s15
 8002b30:	b21b      	sxth	r3, r3
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	4b92      	ldr	r3, [pc, #584]	; (8002d80 <DMA2_Stream0_IRQHandler+0xccc>)
 8002b36:	831a      	strh	r2, [r3, #24]
					speed_measurement_loop_i++;
 8002b38:	4b92      	ldr	r3, [pc, #584]	; (8002d84 <DMA2_Stream0_IRQHandler+0xcd0>)
 8002b3a:	edd3 7a00 	vldr	s15, [r3]
 8002b3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b46:	4b8f      	ldr	r3, [pc, #572]	; (8002d84 <DMA2_Stream0_IRQHandler+0xcd0>)
 8002b48:	edc3 7a00 	vstr	s15, [r3]
					if(speed_measurement_loop_i>=30){
 8002b4c:	4b8d      	ldr	r3, [pc, #564]	; (8002d84 <DMA2_Stream0_IRQHandler+0xcd0>)
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002b56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5e:	db48      	blt.n	8002bf2 <DMA2_Stream0_IRQHandler+0xb3e>
						if(ssi_encoder_data.encoder_resolution==p8192ppr){
 8002b60:	4b89      	ldr	r3, [pc, #548]	; (8002d88 <DMA2_Stream0_IRQHandler+0xcd4>)
 8002b62:	7f1b      	ldrb	r3, [r3, #28]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d13c      	bne.n	8002be2 <DMA2_Stream0_IRQHandler+0xb2e>
							//speed(rpm)=(position pulse delta/enc resolution)*(60s/sample time(s))
							//speed=(delta/8192)*(60/0,006)
							speed=((float)ssi_encoder_data.encoder_position-(float)ssi_encoder_data.last_encoder_position_speed_loop)*0.66f;
 8002b68:	4b87      	ldr	r3, [pc, #540]	; (8002d88 <DMA2_Stream0_IRQHandler+0xcd4>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	ee07 3a90 	vmov	s15, r3
 8002b70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b74:	4b84      	ldr	r3, [pc, #528]	; (8002d88 <DMA2_Stream0_IRQHandler+0xcd4>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	ee07 3a90 	vmov	s15, r3
 8002b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b84:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002d8c <DMA2_Stream0_IRQHandler+0xcd8>
 8002b88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b8c:	4b80      	ldr	r3, [pc, #512]	; (8002d90 <DMA2_Stream0_IRQHandler+0xcdc>)
 8002b8e:	edc3 7a00 	vstr	s15, [r3]
							if(speed>5000.0f){speed-=10000.0f;}if(speed<-5000.0f){speed+=10000.0f;}
 8002b92:	4b7f      	ldr	r3, [pc, #508]	; (8002d90 <DMA2_Stream0_IRQHandler+0xcdc>)
 8002b94:	edd3 7a00 	vldr	s15, [r3]
 8002b98:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002d94 <DMA2_Stream0_IRQHandler+0xce0>
 8002b9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba4:	dd09      	ble.n	8002bba <DMA2_Stream0_IRQHandler+0xb06>
 8002ba6:	4b7a      	ldr	r3, [pc, #488]	; (8002d90 <DMA2_Stream0_IRQHandler+0xcdc>)
 8002ba8:	edd3 7a00 	vldr	s15, [r3]
 8002bac:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8002d98 <DMA2_Stream0_IRQHandler+0xce4>
 8002bb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bb4:	4b76      	ldr	r3, [pc, #472]	; (8002d90 <DMA2_Stream0_IRQHandler+0xcdc>)
 8002bb6:	edc3 7a00 	vstr	s15, [r3]
 8002bba:	4b75      	ldr	r3, [pc, #468]	; (8002d90 <DMA2_Stream0_IRQHandler+0xcdc>)
 8002bbc:	edd3 7a00 	vldr	s15, [r3]
 8002bc0:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002d9c <DMA2_Stream0_IRQHandler+0xce8>
 8002bc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bcc:	d509      	bpl.n	8002be2 <DMA2_Stream0_IRQHandler+0xb2e>
 8002bce:	4b70      	ldr	r3, [pc, #448]	; (8002d90 <DMA2_Stream0_IRQHandler+0xcdc>)
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8002d98 <DMA2_Stream0_IRQHandler+0xce4>
 8002bd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bdc:	4b6c      	ldr	r3, [pc, #432]	; (8002d90 <DMA2_Stream0_IRQHandler+0xcdc>)
 8002bde:	edc3 7a00 	vstr	s15, [r3]
						}
						//@TODO: add speed measurement for 19bit encoders
						ssi_encoder_data.last_encoder_position_speed_loop=ssi_encoder_data.encoder_position;
 8002be2:	4b69      	ldr	r3, [pc, #420]	; (8002d88 <DMA2_Stream0_IRQHandler+0xcd4>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4a68      	ldr	r2, [pc, #416]	; (8002d88 <DMA2_Stream0_IRQHandler+0xcd4>)
 8002be8:	60d3      	str	r3, [r2, #12]
						speed_measurement_loop_i=0;
 8002bea:	4b66      	ldr	r3, [pc, #408]	; (8002d84 <DMA2_Stream0_IRQHandler+0xcd0>)
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
					}
					filtered_speed=LowPassFilter(speed_filter_ts,speed, &last_filtered_actual_speed);
 8002bf2:	4b6b      	ldr	r3, [pc, #428]	; (8002da0 <DMA2_Stream0_IRQHandler+0xcec>)
 8002bf4:	edd3 7a00 	vldr	s15, [r3]
 8002bf8:	4b65      	ldr	r3, [pc, #404]	; (8002d90 <DMA2_Stream0_IRQHandler+0xcdc>)
 8002bfa:	ed93 7a00 	vldr	s14, [r3]
 8002bfe:	4869      	ldr	r0, [pc, #420]	; (8002da4 <DMA2_Stream0_IRQHandler+0xcf0>)
 8002c00:	eef0 0a47 	vmov.f32	s1, s14
 8002c04:	eeb0 0a67 	vmov.f32	s0, s15
 8002c08:	f7fe f80a 	bl	8000c20 <LowPassFilter>
 8002c0c:	eef0 7a40 	vmov.f32	s15, s0
 8002c10:	4b65      	ldr	r3, [pc, #404]	; (8002da8 <DMA2_Stream0_IRQHandler+0xcf4>)
 8002c12:	edc3 7a00 	vstr	s15, [r3]
					modbus_registers_buffer[13]=(int16_t)(speed);
 8002c16:	4b5e      	ldr	r3, [pc, #376]	; (8002d90 <DMA2_Stream0_IRQHandler+0xcdc>)
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c20:	ee17 3a90 	vmov	r3, s15
 8002c24:	b21b      	sxth	r3, r3
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	4b55      	ldr	r3, [pc, #340]	; (8002d80 <DMA2_Stream0_IRQHandler+0xccc>)
 8002c2a:	835a      	strh	r2, [r3, #26]

				}
				if(parameter_set.motor_feedback_type==tamagawa_encoder){
 8002c2c:	4b5f      	ldr	r3, [pc, #380]	; (8002dac <DMA2_Stream0_IRQHandler+0xcf8>)
 8002c2e:	7e9b      	ldrb	r3, [r3, #26]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	f040 8153 	bne.w	8002edc <DMA2_Stream0_IRQHandler+0xe28>
					modbus_registers_buffer[11]=tamagawa_encoder_data.encoder_position/2; //encoder output is 17-bit but modbus register can hold only 16-bit
 8002c36:	4b5e      	ldr	r3, [pc, #376]	; (8002db0 <DMA2_Stream0_IRQHandler+0xcfc>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	085b      	lsrs	r3, r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	4b50      	ldr	r3, [pc, #320]	; (8002d80 <DMA2_Stream0_IRQHandler+0xccc>)
 8002c40:	82da      	strh	r2, [r3, #22]
					actual_electric_angle=(((fmodf(tamagawa_encoder_data.encoder_position, 131072.0f/(float)parameter_set.motor_pole_pairs))/(131072.0f/(float)parameter_set.motor_pole_pairs))*360.0f)+parameter_set.encoder_electric_angle_correction;
 8002c42:	4b5b      	ldr	r3, [pc, #364]	; (8002db0 <DMA2_Stream0_IRQHandler+0xcfc>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c4e:	4b57      	ldr	r3, [pc, #348]	; (8002dac <DMA2_Stream0_IRQHandler+0xcf8>)
 8002c50:	7a1b      	ldrb	r3, [r3, #8]
 8002c52:	ee07 3a90 	vmov	s15, r3
 8002c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c5a:	ed9f 6a56 	vldr	s12, [pc, #344]	; 8002db4 <DMA2_Stream0_IRQHandler+0xd00>
 8002c5e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002c62:	eef0 0a66 	vmov.f32	s1, s13
 8002c66:	eeb0 0a47 	vmov.f32	s0, s14
 8002c6a:	f008 fedf 	bl	800ba2c <fmodf>
 8002c6e:	eef0 6a40 	vmov.f32	s13, s0
 8002c72:	4b4e      	ldr	r3, [pc, #312]	; (8002dac <DMA2_Stream0_IRQHandler+0xcf8>)
 8002c74:	7a1b      	ldrb	r3, [r3, #8]
 8002c76:	ee07 3a90 	vmov	s15, r3
 8002c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7e:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 8002db4 <DMA2_Stream0_IRQHandler+0xd00>
 8002c82:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8002c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c8a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002db8 <DMA2_Stream0_IRQHandler+0xd04>
 8002c8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c92:	4b46      	ldr	r3, [pc, #280]	; (8002dac <DMA2_Stream0_IRQHandler+0xcf8>)
 8002c94:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002c98:	ee07 3a90 	vmov	s15, r3
 8002c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca4:	4b33      	ldr	r3, [pc, #204]	; (8002d74 <DMA2_Stream0_IRQHandler+0xcc0>)
 8002ca6:	edc3 7a00 	vstr	s15, [r3]
					if(actual_electric_angle>=360.0f){actual_electric_angle-=360.0f;}
 8002caa:	4b32      	ldr	r3, [pc, #200]	; (8002d74 <DMA2_Stream0_IRQHandler+0xcc0>)
 8002cac:	edd3 7a00 	vldr	s15, [r3]
 8002cb0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002db8 <DMA2_Stream0_IRQHandler+0xd04>
 8002cb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cbc:	db09      	blt.n	8002cd2 <DMA2_Stream0_IRQHandler+0xc1e>
 8002cbe:	4b2d      	ldr	r3, [pc, #180]	; (8002d74 <DMA2_Stream0_IRQHandler+0xcc0>)
 8002cc0:	edd3 7a00 	vldr	s15, [r3]
 8002cc4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002db8 <DMA2_Stream0_IRQHandler+0xd04>
 8002cc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ccc:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <DMA2_Stream0_IRQHandler+0xcc0>)
 8002cce:	edc3 7a00 	vstr	s15, [r3]
					if(actual_electric_angle<0){actual_electric_angle+=360.0f;}
 8002cd2:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <DMA2_Stream0_IRQHandler+0xcc0>)
 8002cd4:	edd3 7a00 	vldr	s15, [r3]
 8002cd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce0:	d509      	bpl.n	8002cf6 <DMA2_Stream0_IRQHandler+0xc42>
 8002ce2:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <DMA2_Stream0_IRQHandler+0xcc0>)
 8002ce4:	edd3 7a00 	vldr	s15, [r3]
 8002ce8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002db8 <DMA2_Stream0_IRQHandler+0xd04>
 8002cec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cf0:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <DMA2_Stream0_IRQHandler+0xcc0>)
 8002cf2:	edc3 7a00 	vstr	s15, [r3]

					if(actual_electric_angle-electric_angle>180.0f){actual_torque_angle=(actual_electric_angle-electric_angle) - 360.0f;}
 8002cf6:	4b1f      	ldr	r3, [pc, #124]	; (8002d74 <DMA2_Stream0_IRQHandler+0xcc0>)
 8002cf8:	ed93 7a00 	vldr	s14, [r3]
 8002cfc:	4b1e      	ldr	r3, [pc, #120]	; (8002d78 <DMA2_Stream0_IRQHandler+0xcc4>)
 8002cfe:	edd3 7a00 	vldr	s15, [r3]
 8002d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d06:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002dbc <DMA2_Stream0_IRQHandler+0xd08>
 8002d0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d12:	dd0f      	ble.n	8002d34 <DMA2_Stream0_IRQHandler+0xc80>
 8002d14:	4b17      	ldr	r3, [pc, #92]	; (8002d74 <DMA2_Stream0_IRQHandler+0xcc0>)
 8002d16:	ed93 7a00 	vldr	s14, [r3]
 8002d1a:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <DMA2_Stream0_IRQHandler+0xcc4>)
 8002d1c:	edd3 7a00 	vldr	s15, [r3]
 8002d20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d24:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002db8 <DMA2_Stream0_IRQHandler+0xd04>
 8002d28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d2c:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <DMA2_Stream0_IRQHandler+0xcc8>)
 8002d2e:	edc3 7a00 	vstr	s15, [r3]
 8002d32:	e052      	b.n	8002dda <DMA2_Stream0_IRQHandler+0xd26>
					else if(actual_electric_angle-electric_angle<(-180.0f)){actual_torque_angle=actual_electric_angle-electric_angle + 360.0f;}
 8002d34:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <DMA2_Stream0_IRQHandler+0xcc0>)
 8002d36:	ed93 7a00 	vldr	s14, [r3]
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <DMA2_Stream0_IRQHandler+0xcc4>)
 8002d3c:	edd3 7a00 	vldr	s15, [r3]
 8002d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d44:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002dc0 <DMA2_Stream0_IRQHandler+0xd0c>
 8002d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d50:	d538      	bpl.n	8002dc4 <DMA2_Stream0_IRQHandler+0xd10>
 8002d52:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <DMA2_Stream0_IRQHandler+0xcc0>)
 8002d54:	ed93 7a00 	vldr	s14, [r3]
 8002d58:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <DMA2_Stream0_IRQHandler+0xcc4>)
 8002d5a:	edd3 7a00 	vldr	s15, [r3]
 8002d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d62:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002db8 <DMA2_Stream0_IRQHandler+0xd04>
 8002d66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d6a:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <DMA2_Stream0_IRQHandler+0xcc8>)
 8002d6c:	edc3 7a00 	vstr	s15, [r3]
 8002d70:	e033      	b.n	8002dda <DMA2_Stream0_IRQHandler+0xd26>
 8002d72:	bf00      	nop
 8002d74:	200009dc 	.word	0x200009dc
 8002d78:	20000958 	.word	0x20000958
 8002d7c:	200009e4 	.word	0x200009e4
 8002d80:	20000000 	.word	0x20000000
 8002d84:	200009e8 	.word	0x200009e8
 8002d88:	20000920 	.word	0x20000920
 8002d8c:	3f28f5c3 	.word	0x3f28f5c3
 8002d90:	200009ec 	.word	0x200009ec
 8002d94:	459c4000 	.word	0x459c4000
 8002d98:	461c4000 	.word	0x461c4000
 8002d9c:	c59c4000 	.word	0xc59c4000
 8002da0:	200000f0 	.word	0x200000f0
 8002da4:	200009f4 	.word	0x200009f4
 8002da8:	200009f0 	.word	0x200009f0
 8002dac:	2000003c 	.word	0x2000003c
 8002db0:	200009f8 	.word	0x200009f8
 8002db4:	48000000 	.word	0x48000000
 8002db8:	43b40000 	.word	0x43b40000
 8002dbc:	43340000 	.word	0x43340000
 8002dc0:	c3340000 	.word	0xc3340000
					else{actual_torque_angle=actual_electric_angle-electric_angle;}
 8002dc4:	4bc4      	ldr	r3, [pc, #784]	; (80030d8 <DMA2_Stream0_IRQHandler+0x1024>)
 8002dc6:	ed93 7a00 	vldr	s14, [r3]
 8002dca:	4bc4      	ldr	r3, [pc, #784]	; (80030dc <DMA2_Stream0_IRQHandler+0x1028>)
 8002dcc:	edd3 7a00 	vldr	s15, [r3]
 8002dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd4:	4bc2      	ldr	r3, [pc, #776]	; (80030e0 <DMA2_Stream0_IRQHandler+0x102c>)
 8002dd6:	edc3 7a00 	vstr	s15, [r3]
					modbus_registers_buffer[12]=(int16_t)actual_torque_angle;//write calculated value to modbus array
 8002dda:	4bc1      	ldr	r3, [pc, #772]	; (80030e0 <DMA2_Stream0_IRQHandler+0x102c>)
 8002ddc:	edd3 7a00 	vldr	s15, [r3]
 8002de0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002de4:	ee17 3a90 	vmov	r3, s15
 8002de8:	b21b      	sxth	r3, r3
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	4bbd      	ldr	r3, [pc, #756]	; (80030e4 <DMA2_Stream0_IRQHandler+0x1030>)
 8002dee:	831a      	strh	r2, [r3, #24]
					speed_measurement_loop_i++;
 8002df0:	4bbd      	ldr	r3, [pc, #756]	; (80030e8 <DMA2_Stream0_IRQHandler+0x1034>)
 8002df2:	edd3 7a00 	vldr	s15, [r3]
 8002df6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dfe:	4bba      	ldr	r3, [pc, #744]	; (80030e8 <DMA2_Stream0_IRQHandler+0x1034>)
 8002e00:	edc3 7a00 	vstr	s15, [r3]
					if(speed_measurement_loop_i>=10){
 8002e04:	4bb8      	ldr	r3, [pc, #736]	; (80030e8 <DMA2_Stream0_IRQHandler+0x1034>)
 8002e06:	edd3 7a00 	vldr	s15, [r3]
 8002e0a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e16:	db44      	blt.n	8002ea2 <DMA2_Stream0_IRQHandler+0xdee>

						//speed(rpm)=(position pulse delta/enc resolution)*(60s/sample time(s))
						//speed=(delta/131072)*(60/0,006)
						speed=((float)tamagawa_encoder_data.encoder_position-(float)tamagawa_encoder_data.last_encoder_position_speed_loop)*0.228879f;
 8002e18:	4bb4      	ldr	r3, [pc, #720]	; (80030ec <DMA2_Stream0_IRQHandler+0x1038>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	ee07 3a90 	vmov	s15, r3
 8002e20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e24:	4bb1      	ldr	r3, [pc, #708]	; (80030ec <DMA2_Stream0_IRQHandler+0x1038>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	ee07 3a90 	vmov	s15, r3
 8002e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e34:	ed9f 7aae 	vldr	s14, [pc, #696]	; 80030f0 <DMA2_Stream0_IRQHandler+0x103c>
 8002e38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e3c:	4bad      	ldr	r3, [pc, #692]	; (80030f4 <DMA2_Stream0_IRQHandler+0x1040>)
 8002e3e:	edc3 7a00 	vstr	s15, [r3]
						if(speed>15000.0f){speed-=30000.0f;}if(speed<-15000.0f){speed+=30000.0f;}
 8002e42:	4bac      	ldr	r3, [pc, #688]	; (80030f4 <DMA2_Stream0_IRQHandler+0x1040>)
 8002e44:	edd3 7a00 	vldr	s15, [r3]
 8002e48:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80030f8 <DMA2_Stream0_IRQHandler+0x1044>
 8002e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e54:	dd09      	ble.n	8002e6a <DMA2_Stream0_IRQHandler+0xdb6>
 8002e56:	4ba7      	ldr	r3, [pc, #668]	; (80030f4 <DMA2_Stream0_IRQHandler+0x1040>)
 8002e58:	edd3 7a00 	vldr	s15, [r3]
 8002e5c:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80030fc <DMA2_Stream0_IRQHandler+0x1048>
 8002e60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e64:	4ba3      	ldr	r3, [pc, #652]	; (80030f4 <DMA2_Stream0_IRQHandler+0x1040>)
 8002e66:	edc3 7a00 	vstr	s15, [r3]
 8002e6a:	4ba2      	ldr	r3, [pc, #648]	; (80030f4 <DMA2_Stream0_IRQHandler+0x1040>)
 8002e6c:	edd3 7a00 	vldr	s15, [r3]
 8002e70:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8003100 <DMA2_Stream0_IRQHandler+0x104c>
 8002e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7c:	d509      	bpl.n	8002e92 <DMA2_Stream0_IRQHandler+0xdde>
 8002e7e:	4b9d      	ldr	r3, [pc, #628]	; (80030f4 <DMA2_Stream0_IRQHandler+0x1040>)
 8002e80:	edd3 7a00 	vldr	s15, [r3]
 8002e84:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 80030fc <DMA2_Stream0_IRQHandler+0x1048>
 8002e88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e8c:	4b99      	ldr	r3, [pc, #612]	; (80030f4 <DMA2_Stream0_IRQHandler+0x1040>)
 8002e8e:	edc3 7a00 	vstr	s15, [r3]

						tamagawa_encoder_data.last_encoder_position_speed_loop=tamagawa_encoder_data.encoder_position;
 8002e92:	4b96      	ldr	r3, [pc, #600]	; (80030ec <DMA2_Stream0_IRQHandler+0x1038>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4a95      	ldr	r2, [pc, #596]	; (80030ec <DMA2_Stream0_IRQHandler+0x1038>)
 8002e98:	60d3      	str	r3, [r2, #12]
						speed_measurement_loop_i=0;
 8002e9a:	4b93      	ldr	r3, [pc, #588]	; (80030e8 <DMA2_Stream0_IRQHandler+0x1034>)
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
					}
					filtered_speed=LowPassFilter(parameter_set.speed_filter_ts,speed, &last_filtered_actual_speed);
 8002ea2:	4b98      	ldr	r3, [pc, #608]	; (8003104 <DMA2_Stream0_IRQHandler+0x1050>)
 8002ea4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002ea8:	4b92      	ldr	r3, [pc, #584]	; (80030f4 <DMA2_Stream0_IRQHandler+0x1040>)
 8002eaa:	ed93 7a00 	vldr	s14, [r3]
 8002eae:	4896      	ldr	r0, [pc, #600]	; (8003108 <DMA2_Stream0_IRQHandler+0x1054>)
 8002eb0:	eef0 0a47 	vmov.f32	s1, s14
 8002eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb8:	f7fd feb2 	bl	8000c20 <LowPassFilter>
 8002ebc:	eef0 7a40 	vmov.f32	s15, s0
 8002ec0:	4b92      	ldr	r3, [pc, #584]	; (800310c <DMA2_Stream0_IRQHandler+0x1058>)
 8002ec2:	edc3 7a00 	vstr	s15, [r3]
					modbus_registers_buffer[13]=(int16_t)(filtered_speed);
 8002ec6:	4b91      	ldr	r3, [pc, #580]	; (800310c <DMA2_Stream0_IRQHandler+0x1058>)
 8002ec8:	edd3 7a00 	vldr	s15, [r3]
 8002ecc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ed0:	ee17 3a90 	vmov	r3, s15
 8002ed4:	b21b      	sxth	r3, r3
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	4b82      	ldr	r3, [pc, #520]	; (80030e4 <DMA2_Stream0_IRQHandler+0x1030>)
 8002eda:	835a      	strh	r2, [r3, #26]
				}

				park_transform(I_U, I_V, 360.0f-actual_electric_angle, &I_d, &I_q); //360-electric angle is needed because for some reasons all encoders are going reverse direction than my electric angle generator
 8002edc:	4b8c      	ldr	r3, [pc, #560]	; (8003110 <DMA2_Stream0_IRQHandler+0x105c>)
 8002ede:	ed93 7a00 	vldr	s14, [r3]
 8002ee2:	4b8c      	ldr	r3, [pc, #560]	; (8003114 <DMA2_Stream0_IRQHandler+0x1060>)
 8002ee4:	edd3 6a00 	vldr	s13, [r3]
 8002ee8:	4b7b      	ldr	r3, [pc, #492]	; (80030d8 <DMA2_Stream0_IRQHandler+0x1024>)
 8002eea:	edd3 7a00 	vldr	s15, [r3]
 8002eee:	ed9f 6a8a 	vldr	s12, [pc, #552]	; 8003118 <DMA2_Stream0_IRQHandler+0x1064>
 8002ef2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002ef6:	4989      	ldr	r1, [pc, #548]	; (800311c <DMA2_Stream0_IRQHandler+0x1068>)
 8002ef8:	4889      	ldr	r0, [pc, #548]	; (8003120 <DMA2_Stream0_IRQHandler+0x106c>)
 8002efa:	eeb0 1a67 	vmov.f32	s2, s15
 8002efe:	eef0 0a66 	vmov.f32	s1, s13
 8002f02:	eeb0 0a47 	vmov.f32	s0, s14
 8002f06:	f7fd fdc9 	bl	8000a9c <park_transform>
				I_d_filtered = LowPassFilter(parameter_set.current_filter_ts, I_d, &I_d_last);
 8002f0a:	4b7e      	ldr	r3, [pc, #504]	; (8003104 <DMA2_Stream0_IRQHandler+0x1050>)
 8002f0c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f10:	4b83      	ldr	r3, [pc, #524]	; (8003120 <DMA2_Stream0_IRQHandler+0x106c>)
 8002f12:	ed93 7a00 	vldr	s14, [r3]
 8002f16:	4883      	ldr	r0, [pc, #524]	; (8003124 <DMA2_Stream0_IRQHandler+0x1070>)
 8002f18:	eef0 0a47 	vmov.f32	s1, s14
 8002f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f20:	f7fd fe7e 	bl	8000c20 <LowPassFilter>
 8002f24:	eef0 7a40 	vmov.f32	s15, s0
 8002f28:	4b7f      	ldr	r3, [pc, #508]	; (8003128 <DMA2_Stream0_IRQHandler+0x1074>)
 8002f2a:	edc3 7a00 	vstr	s15, [r3]
				I_q_filtered = LowPassFilter(parameter_set.current_filter_ts, I_q, &I_q_last);
 8002f2e:	4b75      	ldr	r3, [pc, #468]	; (8003104 <DMA2_Stream0_IRQHandler+0x1050>)
 8002f30:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f34:	4b79      	ldr	r3, [pc, #484]	; (800311c <DMA2_Stream0_IRQHandler+0x1068>)
 8002f36:	ed93 7a00 	vldr	s14, [r3]
 8002f3a:	487c      	ldr	r0, [pc, #496]	; (800312c <DMA2_Stream0_IRQHandler+0x1078>)
 8002f3c:	eef0 0a47 	vmov.f32	s1, s14
 8002f40:	eeb0 0a67 	vmov.f32	s0, s15
 8002f44:	f7fd fe6c 	bl	8000c20 <LowPassFilter>
 8002f48:	eef0 7a40 	vmov.f32	s15, s0
 8002f4c:	4b78      	ldr	r3, [pc, #480]	; (8003130 <DMA2_Stream0_IRQHandler+0x107c>)
 8002f4e:	edc3 7a00 	vstr	s15, [r3]
				modbus_registers_buffer[15]=(int16_t)(I_d_filtered*100);
 8002f52:	4b75      	ldr	r3, [pc, #468]	; (8003128 <DMA2_Stream0_IRQHandler+0x1074>)
 8002f54:	edd3 7a00 	vldr	s15, [r3]
 8002f58:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8003134 <DMA2_Stream0_IRQHandler+0x1080>
 8002f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f64:	ee17 3a90 	vmov	r3, s15
 8002f68:	b21b      	sxth	r3, r3
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	4b5d      	ldr	r3, [pc, #372]	; (80030e4 <DMA2_Stream0_IRQHandler+0x1030>)
 8002f6e:	83da      	strh	r2, [r3, #30]
				modbus_registers_buffer[16]=(int16_t)(I_q_filtered*100);
 8002f70:	4b6f      	ldr	r3, [pc, #444]	; (8003130 <DMA2_Stream0_IRQHandler+0x107c>)
 8002f72:	edd3 7a00 	vldr	s15, [r3]
 8002f76:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8003134 <DMA2_Stream0_IRQHandler+0x1080>
 8002f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f82:	ee17 3a90 	vmov	r3, s15
 8002f86:	b21b      	sxth	r3, r3
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	4b56      	ldr	r3, [pc, #344]	; (80030e4 <DMA2_Stream0_IRQHandler+0x1030>)
 8002f8c:	841a      	strh	r2, [r3, #32]

				if(control_mode==manual){
 8002f8e:	4b6a      	ldr	r3, [pc, #424]	; (8003138 <DMA2_Stream0_IRQHandler+0x1084>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d12f      	bne.n	8002ff8 <DMA2_Stream0_IRQHandler+0xf44>
					electric_angle+=(speed_setpoint_deg_s*(float)parameter_set.motor_pole_pairs)/5000.0f;  //5000hz control/sampling loop
 8002f98:	4b5a      	ldr	r3, [pc, #360]	; (8003104 <DMA2_Stream0_IRQHandler+0x1050>)
 8002f9a:	7a1b      	ldrb	r3, [r3, #8]
 8002f9c:	ee07 3a90 	vmov	s15, r3
 8002fa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fa4:	4b65      	ldr	r3, [pc, #404]	; (800313c <DMA2_Stream0_IRQHandler+0x1088>)
 8002fa6:	edd3 7a00 	vldr	s15, [r3]
 8002faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fae:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003140 <DMA2_Stream0_IRQHandler+0x108c>
 8002fb2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002fb6:	4b49      	ldr	r3, [pc, #292]	; (80030dc <DMA2_Stream0_IRQHandler+0x1028>)
 8002fb8:	edd3 7a00 	vldr	s15, [r3]
 8002fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc0:	4b46      	ldr	r3, [pc, #280]	; (80030dc <DMA2_Stream0_IRQHandler+0x1028>)
 8002fc2:	edc3 7a00 	vstr	s15, [r3]
					if(electric_angle>=360.0f){	electric_angle=0.0f;}
 8002fc6:	4b45      	ldr	r3, [pc, #276]	; (80030dc <DMA2_Stream0_IRQHandler+0x1028>)
 8002fc8:	edd3 7a00 	vldr	s15, [r3]
 8002fcc:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8003118 <DMA2_Stream0_IRQHandler+0x1064>
 8002fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd8:	db03      	blt.n	8002fe2 <DMA2_Stream0_IRQHandler+0xf2e>
 8002fda:	4b40      	ldr	r3, [pc, #256]	; (80030dc <DMA2_Stream0_IRQHandler+0x1028>)
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
					if(electric_angle<0.0f){electric_angle=359.0f;}
 8002fe2:	4b3e      	ldr	r3, [pc, #248]	; (80030dc <DMA2_Stream0_IRQHandler+0x1028>)
 8002fe4:	edd3 7a00 	vldr	s15, [r3]
 8002fe8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff0:	d502      	bpl.n	8002ff8 <DMA2_Stream0_IRQHandler+0xf44>
 8002ff2:	4b3a      	ldr	r3, [pc, #232]	; (80030dc <DMA2_Stream0_IRQHandler+0x1028>)
 8002ff4:	4a53      	ldr	r2, [pc, #332]	; (8003144 <DMA2_Stream0_IRQHandler+0x1090>)
 8002ff6:	601a      	str	r2, [r3, #0]
				}
				if(control_mode==foc && modbus_registers_buffer[3] ==1){
 8002ff8:	4b4f      	ldr	r3, [pc, #316]	; (8003138 <DMA2_Stream0_IRQHandler+0x1084>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	f040 8150 	bne.w	80032a4 <DMA2_Stream0_IRQHandler+0x11f0>
 8003004:	4b37      	ldr	r3, [pc, #220]	; (80030e4 <DMA2_Stream0_IRQHandler+0x1030>)
 8003006:	88db      	ldrh	r3, [r3, #6]
 8003008:	2b01      	cmp	r3, #1
 800300a:	f040 814b 	bne.w	80032a4 <DMA2_Stream0_IRQHandler+0x11f0>
					U_d = PI_control(&id_current_controller_data, id_setpoint-I_d_filtered);
 800300e:	4b4e      	ldr	r3, [pc, #312]	; (8003148 <DMA2_Stream0_IRQHandler+0x1094>)
 8003010:	ed93 7a00 	vldr	s14, [r3]
 8003014:	4b44      	ldr	r3, [pc, #272]	; (8003128 <DMA2_Stream0_IRQHandler+0x1074>)
 8003016:	edd3 7a00 	vldr	s15, [r3]
 800301a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800301e:	eeb0 0a67 	vmov.f32	s0, s15
 8003022:	484a      	ldr	r0, [pc, #296]	; (800314c <DMA2_Stream0_IRQHandler+0x1098>)
 8003024:	f7fe fbf0 	bl	8001808 <PI_control>
 8003028:	eef0 7a40 	vmov.f32	s15, s0
 800302c:	4b48      	ldr	r3, [pc, #288]	; (8003150 <DMA2_Stream0_IRQHandler+0x109c>)
 800302e:	edc3 7a00 	vstr	s15, [r3]
					U_q = PI_control(&iq_current_controller_data,(torque_setpoint/10.0f)-I_q_filtered);
 8003032:	4b48      	ldr	r3, [pc, #288]	; (8003154 <DMA2_Stream0_IRQHandler+0x10a0>)
 8003034:	edd3 7a00 	vldr	s15, [r3]
 8003038:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800303c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003040:	4b3b      	ldr	r3, [pc, #236]	; (8003130 <DMA2_Stream0_IRQHandler+0x107c>)
 8003042:	edd3 7a00 	vldr	s15, [r3]
 8003046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800304a:	eeb0 0a67 	vmov.f32	s0, s15
 800304e:	4842      	ldr	r0, [pc, #264]	; (8003158 <DMA2_Stream0_IRQHandler+0x10a4>)
 8003050:	f7fe fbda 	bl	8001808 <PI_control>
 8003054:	eef0 7a40 	vmov.f32	s15, s0
 8003058:	4b40      	ldr	r3, [pc, #256]	; (800315c <DMA2_Stream0_IRQHandler+0x10a8>)
 800305a:	edc3 7a00 	vstr	s15, [r3]
					inv_park_transform(U_d, U_q, actual_electric_angle, &U_alpha, &U_beta);
 800305e:	4b3c      	ldr	r3, [pc, #240]	; (8003150 <DMA2_Stream0_IRQHandler+0x109c>)
 8003060:	edd3 7a00 	vldr	s15, [r3]
 8003064:	4b3d      	ldr	r3, [pc, #244]	; (800315c <DMA2_Stream0_IRQHandler+0x10a8>)
 8003066:	ed93 7a00 	vldr	s14, [r3]
 800306a:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <DMA2_Stream0_IRQHandler+0x1024>)
 800306c:	edd3 6a00 	vldr	s13, [r3]
 8003070:	493b      	ldr	r1, [pc, #236]	; (8003160 <DMA2_Stream0_IRQHandler+0x10ac>)
 8003072:	483c      	ldr	r0, [pc, #240]	; (8003164 <DMA2_Stream0_IRQHandler+0x10b0>)
 8003074:	eeb0 1a66 	vmov.f32	s2, s13
 8003078:	eef0 0a47 	vmov.f32	s1, s14
 800307c:	eeb0 0a67 	vmov.f32	s0, s15
 8003080:	f7fd fd78 	bl	8000b74 <inv_park_transform>
					duty_cycle=sqrtf(U_alpha*U_alpha+U_beta*U_beta);
 8003084:	4b37      	ldr	r3, [pc, #220]	; (8003164 <DMA2_Stream0_IRQHandler+0x10b0>)
 8003086:	ed93 7a00 	vldr	s14, [r3]
 800308a:	4b36      	ldr	r3, [pc, #216]	; (8003164 <DMA2_Stream0_IRQHandler+0x10b0>)
 800308c:	edd3 7a00 	vldr	s15, [r3]
 8003090:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003094:	4b32      	ldr	r3, [pc, #200]	; (8003160 <DMA2_Stream0_IRQHandler+0x10ac>)
 8003096:	edd3 6a00 	vldr	s13, [r3]
 800309a:	4b31      	ldr	r3, [pc, #196]	; (8003160 <DMA2_Stream0_IRQHandler+0x10ac>)
 800309c:	edd3 7a00 	vldr	s15, [r3]
 80030a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a8:	eeb0 0a67 	vmov.f32	s0, s15
 80030ac:	f008 fcde 	bl	800ba6c <sqrtf>
 80030b0:	eef0 7a40 	vmov.f32	s15, s0
 80030b4:	4b2c      	ldr	r3, [pc, #176]	; (8003168 <DMA2_Stream0_IRQHandler+0x10b4>)
 80030b6:	edc3 7a00 	vstr	s15, [r3]

					float electric_angle_rad=0.0f;
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	603b      	str	r3, [r7, #0]
					if(U_alpha>=0 && U_beta >=0){electric_angle_rad=atan2f(fabs(U_beta),fabs(U_alpha));}
 80030c0:	4b28      	ldr	r3, [pc, #160]	; (8003164 <DMA2_Stream0_IRQHandler+0x10b0>)
 80030c2:	edd3 7a00 	vldr	s15, [r3]
 80030c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ce:	db64      	blt.n	800319a <DMA2_Stream0_IRQHandler+0x10e6>
 80030d0:	4b23      	ldr	r3, [pc, #140]	; (8003160 <DMA2_Stream0_IRQHandler+0x10ac>)
 80030d2:	edd3 7a00 	vldr	s15, [r3]
 80030d6:	e049      	b.n	800316c <DMA2_Stream0_IRQHandler+0x10b8>
 80030d8:	200009dc 	.word	0x200009dc
 80030dc:	20000958 	.word	0x20000958
 80030e0:	200009e4 	.word	0x200009e4
 80030e4:	20000000 	.word	0x20000000
 80030e8:	200009e8 	.word	0x200009e8
 80030ec:	200009f8 	.word	0x200009f8
 80030f0:	3e6a5f42 	.word	0x3e6a5f42
 80030f4:	200009ec 	.word	0x200009ec
 80030f8:	466a6000 	.word	0x466a6000
 80030fc:	46ea6000 	.word	0x46ea6000
 8003100:	c66a6000 	.word	0xc66a6000
 8003104:	2000003c 	.word	0x2000003c
 8003108:	200009f4 	.word	0x200009f4
 800310c:	200009f0 	.word	0x200009f0
 8003110:	20000984 	.word	0x20000984
 8003114:	20000988 	.word	0x20000988
 8003118:	43b40000 	.word	0x43b40000
 800311c:	200009bc 	.word	0x200009bc
 8003120:	200009b0 	.word	0x200009b0
 8003124:	200009b4 	.word	0x200009b4
 8003128:	200009b8 	.word	0x200009b8
 800312c:	200009c0 	.word	0x200009c0
 8003130:	200009c4 	.word	0x200009c4
 8003134:	42c80000 	.word	0x42c80000
 8003138:	2000094c 	.word	0x2000094c
 800313c:	20000950 	.word	0x20000950
 8003140:	459c4000 	.word	0x459c4000
 8003144:	43b38000 	.word	0x43b38000
 8003148:	20000974 	.word	0x20000974
 800314c:	20000080 	.word	0x20000080
 8003150:	200009c8 	.word	0x200009c8
 8003154:	20000970 	.word	0x20000970
 8003158:	200000a4 	.word	0x200000a4
 800315c:	200009cc 	.word	0x200009cc
 8003160:	200009d4 	.word	0x200009d4
 8003164:	200009d0 	.word	0x200009d0
 8003168:	2000095c 	.word	0x2000095c
 800316c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003174:	db11      	blt.n	800319a <DMA2_Stream0_IRQHandler+0x10e6>
 8003176:	4b5e      	ldr	r3, [pc, #376]	; (80032f0 <DMA2_Stream0_IRQHandler+0x123c>)
 8003178:	edd3 7a00 	vldr	s15, [r3]
 800317c:	eeb0 7ae7 	vabs.f32	s14, s15
 8003180:	4b5c      	ldr	r3, [pc, #368]	; (80032f4 <DMA2_Stream0_IRQHandler+0x1240>)
 8003182:	edd3 7a00 	vldr	s15, [r3]
 8003186:	eef0 7ae7 	vabs.f32	s15, s15
 800318a:	eef0 0a67 	vmov.f32	s1, s15
 800318e:	eeb0 0a47 	vmov.f32	s0, s14
 8003192:	f008 fc49 	bl	800ba28 <atan2f>
 8003196:	ed87 0a00 	vstr	s0, [r7]
					if(U_alpha<0 && U_beta >=0){electric_angle_rad=atan2f(fabs(U_alpha),fabs(U_beta)) + (3.141592f/2.0f);}
 800319a:	4b56      	ldr	r3, [pc, #344]	; (80032f4 <DMA2_Stream0_IRQHandler+0x1240>)
 800319c:	edd3 7a00 	vldr	s15, [r3]
 80031a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a8:	d51f      	bpl.n	80031ea <DMA2_Stream0_IRQHandler+0x1136>
 80031aa:	4b51      	ldr	r3, [pc, #324]	; (80032f0 <DMA2_Stream0_IRQHandler+0x123c>)
 80031ac:	edd3 7a00 	vldr	s15, [r3]
 80031b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b8:	db17      	blt.n	80031ea <DMA2_Stream0_IRQHandler+0x1136>
 80031ba:	4b4e      	ldr	r3, [pc, #312]	; (80032f4 <DMA2_Stream0_IRQHandler+0x1240>)
 80031bc:	edd3 7a00 	vldr	s15, [r3]
 80031c0:	eeb0 7ae7 	vabs.f32	s14, s15
 80031c4:	4b4a      	ldr	r3, [pc, #296]	; (80032f0 <DMA2_Stream0_IRQHandler+0x123c>)
 80031c6:	edd3 7a00 	vldr	s15, [r3]
 80031ca:	eef0 7ae7 	vabs.f32	s15, s15
 80031ce:	eef0 0a67 	vmov.f32	s1, s15
 80031d2:	eeb0 0a47 	vmov.f32	s0, s14
 80031d6:	f008 fc27 	bl	800ba28 <atan2f>
 80031da:	eef0 7a40 	vmov.f32	s15, s0
 80031de:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80032f8 <DMA2_Stream0_IRQHandler+0x1244>
 80031e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031e6:	edc7 7a00 	vstr	s15, [r7]
					if(U_alpha<0 && U_beta <0){electric_angle_rad=atan2f(fabs(U_beta),fabs(U_alpha)) + 3.141592f;}
 80031ea:	4b42      	ldr	r3, [pc, #264]	; (80032f4 <DMA2_Stream0_IRQHandler+0x1240>)
 80031ec:	edd3 7a00 	vldr	s15, [r3]
 80031f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f8:	d51f      	bpl.n	800323a <DMA2_Stream0_IRQHandler+0x1186>
 80031fa:	4b3d      	ldr	r3, [pc, #244]	; (80032f0 <DMA2_Stream0_IRQHandler+0x123c>)
 80031fc:	edd3 7a00 	vldr	s15, [r3]
 8003200:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003208:	d517      	bpl.n	800323a <DMA2_Stream0_IRQHandler+0x1186>
 800320a:	4b39      	ldr	r3, [pc, #228]	; (80032f0 <DMA2_Stream0_IRQHandler+0x123c>)
 800320c:	edd3 7a00 	vldr	s15, [r3]
 8003210:	eeb0 7ae7 	vabs.f32	s14, s15
 8003214:	4b37      	ldr	r3, [pc, #220]	; (80032f4 <DMA2_Stream0_IRQHandler+0x1240>)
 8003216:	edd3 7a00 	vldr	s15, [r3]
 800321a:	eef0 7ae7 	vabs.f32	s15, s15
 800321e:	eef0 0a67 	vmov.f32	s1, s15
 8003222:	eeb0 0a47 	vmov.f32	s0, s14
 8003226:	f008 fbff 	bl	800ba28 <atan2f>
 800322a:	eef0 7a40 	vmov.f32	s15, s0
 800322e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80032fc <DMA2_Stream0_IRQHandler+0x1248>
 8003232:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003236:	edc7 7a00 	vstr	s15, [r7]
					if(U_alpha>=0 && U_beta <0){electric_angle_rad=atan2f(fabs(U_alpha),fabs(U_beta)) + (3.141592f*1.5f);}
 800323a:	4b2e      	ldr	r3, [pc, #184]	; (80032f4 <DMA2_Stream0_IRQHandler+0x1240>)
 800323c:	edd3 7a00 	vldr	s15, [r3]
 8003240:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003248:	db1f      	blt.n	800328a <DMA2_Stream0_IRQHandler+0x11d6>
 800324a:	4b29      	ldr	r3, [pc, #164]	; (80032f0 <DMA2_Stream0_IRQHandler+0x123c>)
 800324c:	edd3 7a00 	vldr	s15, [r3]
 8003250:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003258:	d517      	bpl.n	800328a <DMA2_Stream0_IRQHandler+0x11d6>
 800325a:	4b26      	ldr	r3, [pc, #152]	; (80032f4 <DMA2_Stream0_IRQHandler+0x1240>)
 800325c:	edd3 7a00 	vldr	s15, [r3]
 8003260:	eeb0 7ae7 	vabs.f32	s14, s15
 8003264:	4b22      	ldr	r3, [pc, #136]	; (80032f0 <DMA2_Stream0_IRQHandler+0x123c>)
 8003266:	edd3 7a00 	vldr	s15, [r3]
 800326a:	eef0 7ae7 	vabs.f32	s15, s15
 800326e:	eef0 0a67 	vmov.f32	s1, s15
 8003272:	eeb0 0a47 	vmov.f32	s0, s14
 8003276:	f008 fbd7 	bl	800ba28 <atan2f>
 800327a:	eef0 7a40 	vmov.f32	s15, s0
 800327e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003300 <DMA2_Stream0_IRQHandler+0x124c>
 8003282:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003286:	edc7 7a00 	vstr	s15, [r7]

					electric_angle=(electric_angle_rad/3.141592f)*180.0f;
 800328a:	ed97 7a00 	vldr	s14, [r7]
 800328e:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80032fc <DMA2_Stream0_IRQHandler+0x1248>
 8003292:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003296:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003304 <DMA2_Stream0_IRQHandler+0x1250>
 800329a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800329e:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <DMA2_Stream0_IRQHandler+0x1254>)
 80032a0:	edc3 7a00 	vstr	s15, [r3]
				}

				if(inverter_state==run){
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <DMA2_Stream0_IRQHandler+0x1258>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d110      	bne.n	80032d0 <DMA2_Stream0_IRQHandler+0x121c>
					//output_svpwm((uint16_t)electric_angle, (uint16_t)duty_cycle);
					output_sine_pwm(electric_angle, (uint16_t)duty_cycle);
 80032ae:	4b16      	ldr	r3, [pc, #88]	; (8003308 <DMA2_Stream0_IRQHandler+0x1254>)
 80032b0:	ed93 7a00 	vldr	s14, [r3]
 80032b4:	4b16      	ldr	r3, [pc, #88]	; (8003310 <DMA2_Stream0_IRQHandler+0x125c>)
 80032b6:	edd3 7a00 	vldr	s15, [r3]
 80032ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032be:	ee17 3a90 	vmov	r3, s15
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	4618      	mov	r0, r3
 80032c6:	eeb0 0a47 	vmov.f32	s0, s14
 80032ca:	f7fd fce1 	bl	8000c90 <output_sine_pwm>
 80032ce:	e008      	b.n	80032e2 <DMA2_Stream0_IRQHandler+0x122e>
				}
				else{TIM1->CCR1=0;TIM1->CCR2=0;TIM1->CCR3=0;}//if inverter in stop mode stop producing PWM signal while timer1 is still active to keep this interrupt alive for measurements on switched off inverter
 80032d0:	4b10      	ldr	r3, [pc, #64]	; (8003314 <DMA2_Stream0_IRQHandler+0x1260>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	635a      	str	r2, [r3, #52]	; 0x34
 80032d6:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <DMA2_Stream0_IRQHandler+0x1260>)
 80032d8:	2200      	movs	r2, #0
 80032da:	639a      	str	r2, [r3, #56]	; 0x38
 80032dc:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <DMA2_Stream0_IRQHandler+0x1260>)
 80032de:	2200      	movs	r2, #0
 80032e0:	63da      	str	r2, [r3, #60]	; 0x3c

			}
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80032e2:	480d      	ldr	r0, [pc, #52]	; (8003318 <DMA2_Stream0_IRQHandler+0x1264>)
 80032e4:	f001 fdd6 	bl	8004e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	200009d4 	.word	0x200009d4
 80032f4:	200009d0 	.word	0x200009d0
 80032f8:	3fc90fd8 	.word	0x3fc90fd8
 80032fc:	40490fd8 	.word	0x40490fd8
 8003300:	4096cbe2 	.word	0x4096cbe2
 8003304:	43340000 	.word	0x43340000
 8003308:	20000958 	.word	0x20000958
 800330c:	2000094d 	.word	0x2000094d
 8003310:	2000095c 	.word	0x2000095c
 8003314:	40010000 	.word	0x40010000
 8003318:	20000588 	.word	0x20000588

0800331c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003320:	4802      	ldr	r0, [pc, #8]	; (800332c <DMA2_Stream2_IRQHandler+0x10>)
 8003322:	f001 fdb7 	bl	8004e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20000790 	.word	0x20000790

08003330 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003334:	4802      	ldr	r0, [pc, #8]	; (8003340 <DMA2_Stream7_IRQHandler+0x10>)
 8003336:	f001 fdad 	bl	8004e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	200007f0 	.word	0x200007f0

08003344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003348:	4b06      	ldr	r3, [pc, #24]	; (8003364 <SystemInit+0x20>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334e:	4a05      	ldr	r2, [pc, #20]	; (8003364 <SystemInit+0x20>)
 8003350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003358:	bf00      	nop
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	e000ed00 	.word	0xe000ed00

08003368 <tamagawa_encoder_read_position>:

extern UART_HandleTypeDef huart2;
//uint8_t UART2_RX_raw[10];
tamagawa_encoder_data_t tamagawa_encoder_data;

void tamagawa_encoder_read_position(void){
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
		if(ssi_encoder_data.checksum_error_count>3 && ssi_encoder_data.encoder_state!=encoder_error_no_communication){ssi_encoder_data.encoder_state=encoder_error_cheksum;}
		if(ssi_encoder_data.checksum_error_count>100){ssi_encoder_data.encoder_state=encoder_error_no_communication;}
	}
	else{*/ //calculate position and speed from received earlier data

	tamagawa_encoder_data.last_encoder_position=ssi_encoder_data.encoder_position;
 800336e:	4b2d      	ldr	r3, [pc, #180]	; (8003424 <tamagawa_encoder_read_position+0xbc>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4a2d      	ldr	r2, [pc, #180]	; (8003428 <tamagawa_encoder_read_position+0xc0>)
 8003374:	6093      	str	r3, [r2, #8]
	tamagawa_encoder_data.encoder_position=tamagawa_encoder_data.motor_data_response_packet[2] | tamagawa_encoder_data.motor_data_response_packet[3]<<8 | tamagawa_encoder_data.motor_data_response_packet[4]<<16;
 8003376:	4b2c      	ldr	r3, [pc, #176]	; (8003428 <tamagawa_encoder_read_position+0xc0>)
 8003378:	7d1b      	ldrb	r3, [r3, #20]
 800337a:	461a      	mov	r2, r3
 800337c:	4b2a      	ldr	r3, [pc, #168]	; (8003428 <tamagawa_encoder_read_position+0xc0>)
 800337e:	7d5b      	ldrb	r3, [r3, #21]
 8003380:	021b      	lsls	r3, r3, #8
 8003382:	431a      	orrs	r2, r3
 8003384:	4b28      	ldr	r3, [pc, #160]	; (8003428 <tamagawa_encoder_read_position+0xc0>)
 8003386:	7d9b      	ldrb	r3, [r3, #22]
 8003388:	041b      	lsls	r3, r3, #16
 800338a:	4313      	orrs	r3, r2
 800338c:	461a      	mov	r2, r3
 800338e:	4b26      	ldr	r3, [pc, #152]	; (8003428 <tamagawa_encoder_read_position+0xc0>)
 8003390:	605a      	str	r2, [r3, #4]
	//if(ssi_encoder_data.encoder_position>262143){ssi_encoder_data.encoder_position=ssi_encoder_data.last_encoder_position;}//@TODO:encoder error handling
	int32_t speed = tamagawa_encoder_data.last_encoder_position-tamagawa_encoder_data.encoder_position;
 8003392:	4b25      	ldr	r3, [pc, #148]	; (8003428 <tamagawa_encoder_read_position+0xc0>)
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	4b24      	ldr	r3, [pc, #144]	; (8003428 <tamagawa_encoder_read_position+0xc0>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	607b      	str	r3, [r7, #4]
	if(((speed>2000) && (speed<129000))||
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80033a4:	dd03      	ble.n	80033ae <tamagawa_encoder_read_position+0x46>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a20      	ldr	r2, [pc, #128]	; (800342c <tamagawa_encoder_read_position+0xc4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	dd07      	ble.n	80033be <tamagawa_encoder_read_position+0x56>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 80033b4:	da10      	bge.n	80033d8 <tamagawa_encoder_read_position+0x70>
			((speed<(-2000)) && (speed>(-129000)))){
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a1d      	ldr	r2, [pc, #116]	; (8003430 <tamagawa_encoder_read_position+0xc8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	db0c      	blt.n	80033d8 <tamagawa_encoder_read_position+0x70>
		tamagawa_encoder_data.excessive_acceleration_error_count++;
 80033be:	4b1a      	ldr	r3, [pc, #104]	; (8003428 <tamagawa_encoder_read_position+0xc0>)
 80033c0:	7c5b      	ldrb	r3, [r3, #17]
 80033c2:	3301      	adds	r3, #1
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	4b18      	ldr	r3, [pc, #96]	; (8003428 <tamagawa_encoder_read_position+0xc0>)
 80033c8:	745a      	strb	r2, [r3, #17]
		if(tamagawa_encoder_data.excessive_acceleration_error_count>2){tamagawa_encoder_data.encoder_state=encoder_error_acceleration;}
 80033ca:	4b17      	ldr	r3, [pc, #92]	; (8003428 <tamagawa_encoder_read_position+0xc0>)
 80033cc:	7c5b      	ldrb	r3, [r3, #17]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d902      	bls.n	80033d8 <tamagawa_encoder_read_position+0x70>
 80033d2:	4b15      	ldr	r3, [pc, #84]	; (8003428 <tamagawa_encoder_read_position+0xc0>)
 80033d4:	2202      	movs	r2, #2
 80033d6:	701a      	strb	r2, [r3, #0]
}
	tamagawa_encoder_data.encoder_command=0xA2;
 80033d8:	4b13      	ldr	r3, [pc, #76]	; (8003428 <tamagawa_encoder_read_position+0xc0>)
 80033da:	22a2      	movs	r2, #162	; 0xa2
 80033dc:	771a      	strb	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13, 1);//toggle driver enable pin in half-duplex rs485
 80033de:	2201      	movs	r2, #1
 80033e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033e4:	4813      	ldr	r0, [pc, #76]	; (8003434 <tamagawa_encoder_read_position+0xcc>)
 80033e6:	f002 fa27 	bl	8005838 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err_code = HAL_UART_Transmit(&huart2, &tamagawa_encoder_data.encoder_command, 1,1); //using blocking mode TX because DE pin has to be toggled reaaly fast to not break first byte of received data
 80033ea:	2301      	movs	r3, #1
 80033ec:	2201      	movs	r2, #1
 80033ee:	4912      	ldr	r1, [pc, #72]	; (8003438 <tamagawa_encoder_read_position+0xd0>)
 80033f0:	4812      	ldr	r0, [pc, #72]	; (800343c <tamagawa_encoder_read_position+0xd4>)
 80033f2:	f004 f8f5 	bl	80075e0 <HAL_UART_Transmit>
 80033f6:	4603      	mov	r3, r0
 80033f8:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13, 0);
 80033fa:	2200      	movs	r2, #0
 80033fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003400:	480c      	ldr	r0, [pc, #48]	; (8003434 <tamagawa_encoder_read_position+0xcc>)
 8003402:	f002 fa19 	bl	8005838 <HAL_GPIO_WritePin>
	if(err_code!=HAL_OK){
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <tamagawa_encoder_read_position+0xaa>
		ssi_encoder_data.encoder_state=encoder_error_uart_busy;
 800340c:	4b05      	ldr	r3, [pc, #20]	; (8003424 <tamagawa_encoder_read_position+0xbc>)
 800340e:	2204      	movs	r2, #4
 8003410:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_DMA(&huart2, &tamagawa_encoder_data.motor_data_response_packet, 10);//start listening for response, it will be automatically copied by DMA after reception
 8003412:	220a      	movs	r2, #10
 8003414:	490a      	ldr	r1, [pc, #40]	; (8003440 <tamagawa_encoder_read_position+0xd8>)
 8003416:	4809      	ldr	r0, [pc, #36]	; (800343c <tamagawa_encoder_read_position+0xd4>)
 8003418:	f004 f9f2 	bl	8007800 <HAL_UART_Receive_DMA>
}
 800341c:	bf00      	nop
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	20000920 	.word	0x20000920
 8003428:	200009f8 	.word	0x200009f8
 800342c:	0001f7e7 	.word	0x0001f7e7
 8003430:	fffe0819 	.word	0xfffe0819
 8003434:	40020800 	.word	0x40020800
 8003438:	20000a14 	.word	0x20000a14
 800343c:	2000074c 	.word	0x2000074c
 8003440:	20000a0a 	.word	0x20000a0a

08003444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800347c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003448:	480d      	ldr	r0, [pc, #52]	; (8003480 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800344a:	490e      	ldr	r1, [pc, #56]	; (8003484 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800344c:	4a0e      	ldr	r2, [pc, #56]	; (8003488 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800344e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003450:	e002      	b.n	8003458 <LoopCopyDataInit>

08003452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003456:	3304      	adds	r3, #4

08003458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800345a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800345c:	d3f9      	bcc.n	8003452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800345e:	4a0b      	ldr	r2, [pc, #44]	; (800348c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003460:	4c0b      	ldr	r4, [pc, #44]	; (8003490 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003464:	e001      	b.n	800346a <LoopFillZerobss>

08003466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003468:	3204      	adds	r2, #4

0800346a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800346a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800346c:	d3fb      	bcc.n	8003466 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800346e:	f7ff ff69 	bl	8003344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003472:	f008 f951 	bl	800b718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003476:	f7fd fcaf 	bl	8000dd8 <main>
  bx  lr    
 800347a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800347c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003484:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8003488:	0800cfcc 	.word	0x0800cfcc
  ldr r2, =_sbss
 800348c:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8003490:	200054cc 	.word	0x200054cc

08003494 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003494:	e7fe      	b.n	8003494 <ADC_IRQHandler>
	...

08003498 <mbus_open>:
/*
 * function mbus_open()
 * open new modbus context for new port
 * return: MODBUS_ERROR - if can't open context
 */
mbus_t mbus_open(Modbus_Conf_t *pconf) {
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  mbus_t context;
  for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++) {
 80034a0:	2300      	movs	r3, #0
 80034a2:	73fb      	strb	r3, [r7, #15]
 80034a4:	e010      	b.n	80034c8 <mbus_open+0x30>
    if (g_mbusContext[context].open == 0) {
 80034a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034aa:	4a22      	ldr	r2, [pc, #136]	; (8003534 <mbus_open+0x9c>)
 80034ac:	2194      	movs	r1, #148	; 0x94
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	3328      	adds	r3, #40	; 0x28
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <mbus_open+0x3a>
  for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++) {
 80034bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	3301      	adds	r3, #1
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	73fb      	strb	r3, [r7, #15]
 80034c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	ddea      	ble.n	80034a6 <mbus_open+0xe>
 80034d0:	e000      	b.n	80034d4 <mbus_open+0x3c>
      break;
 80034d2:	bf00      	nop
    }
  }
  if (context == STMODBUS_COUNT_CONTEXT)
 80034d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d102      	bne.n	80034e2 <mbus_open+0x4a>
    return (mbus_t)MBUS_ERROR;
 80034dc:	f04f 33ff 	mov.w	r3, #4294967295
 80034e0:	e023      	b.n	800352a <mbus_open+0x92>
  // Clear context
  memset(&g_mbusContext[context], 0, sizeof(_stmodbus_context_t));
 80034e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e6:	2294      	movs	r2, #148	; 0x94
 80034e8:	fb02 f303 	mul.w	r3, r2, r3
 80034ec:	4a11      	ldr	r2, [pc, #68]	; (8003534 <mbus_open+0x9c>)
 80034ee:	4413      	add	r3, r2
 80034f0:	2294      	movs	r2, #148	; 0x94
 80034f2:	2100      	movs	r1, #0
 80034f4:	4618      	mov	r0, r3
 80034f6:	f008 f943 	bl	800b780 <memset>
  // Copy config to context
  memcpy((void *)&g_mbusContext[context].conf, (void *)pconf,
 80034fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fe:	2294      	movs	r2, #148	; 0x94
 8003500:	fb02 f303 	mul.w	r3, r2, r3
 8003504:	4a0b      	ldr	r2, [pc, #44]	; (8003534 <mbus_open+0x9c>)
 8003506:	4413      	add	r3, r2
 8003508:	2228      	movs	r2, #40	; 0x28
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4618      	mov	r0, r3
 800350e:	f008 f929 	bl	800b764 <memcpy>
         sizeof(Modbus_Conf_t));

  g_mbusContext[context].open = 1;
 8003512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003516:	4a07      	ldr	r2, [pc, #28]	; (8003534 <mbus_open+0x9c>)
 8003518:	2194      	movs	r1, #148	; 0x94
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4413      	add	r3, r2
 8003520:	3328      	adds	r3, #40	; 0x28
 8003522:	2201      	movs	r2, #1
 8003524:	701a      	strb	r2, [r3, #0]
  return context;
 8003526:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20000a18 	.word	0x20000a18

08003538 <mbus_flush>:

mbus_status_t mbus_flush(const mbus_t context) {
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	71fb      	strb	r3, [r7, #7]
  g_mbusContext[context].crc16 = 0xFFFF;
 8003542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003546:	4a0d      	ldr	r2, [pc, #52]	; (800357c <mbus_flush+0x44>)
 8003548:	2194      	movs	r1, #148	; 0x94
 800354a:	fb01 f303 	mul.w	r3, r1, r3
 800354e:	4413      	add	r3, r2
 8003550:	332a      	adds	r3, #42	; 0x2a
 8003552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003556:	801a      	strh	r2, [r3, #0]
  g_mbusContext[context].state = MBUS_STATE_IDLE;
 8003558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355c:	4a07      	ldr	r2, [pc, #28]	; (800357c <mbus_flush+0x44>)
 800355e:	2194      	movs	r1, #148	; 0x94
 8003560:	fb01 f303 	mul.w	r3, r1, r3
 8003564:	4413      	add	r3, r2
 8003566:	3329      	adds	r3, #41	; 0x29
 8003568:	2200      	movs	r2, #0
 800356a:	701a      	strb	r2, [r3, #0]
  return MBUS_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	20000a18 	.word	0x20000a18

08003580 <mbus_response>:

mbus_status_t mbus_response(mbus_t mb_context, Modbus_ResponseType response) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	460a      	mov	r2, r1
 800358a:	71fb      	strb	r3, [r7, #7]
 800358c:	4613      	mov	r3, r2
 800358e:	71bb      	strb	r3, [r7, #6]

  if (response != MBUS_RESPONSE_OK) {
 8003590:	79bb      	ldrb	r3, [r7, #6]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d008      	beq.n	80035a8 <mbus_response+0x28>
    return mbus_send_error(mb_context, response);
 8003596:	79ba      	ldrb	r2, [r7, #6]
 8003598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359c:	4611      	mov	r1, r2
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fbba 	bl	8003d18 <mbus_send_error>
 80035a4:	4603      	mov	r3, r0
 80035a6:	e001      	b.n	80035ac <mbus_response+0x2c>
  } else {
  }
  return MBUS_ERROR;
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <mbus_poll_response>:
uint16_t mbus_error(Modbus_ResponseType error) {
    g_userError = error;
    return 0;
}

inline mbus_status_t mbus_poll_response(mbus_t mb_context) {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08c      	sub	sp, #48	; 0x30
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	71fb      	strb	r3, [r7, #7]
  stmbCallBackFunc func = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	2294      	movs	r2, #148	; 0x94
 80035c8:	fb02 f303 	mul.w	r3, r2, r3
 80035cc:	4a93      	ldr	r2, [pc, #588]	; (800381c <mbus_poll_response+0x268>)
 80035ce:	4413      	add	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
  int read = 1, la;
 80035d2:	2301      	movs	r3, #1
 80035d4:	60fb      	str	r3, [r7, #12]
  uint16_t d;

  if (ctx->header.func == 0x04) {
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d101      	bne.n	80035e4 <mbus_poll_response+0x30>
    la = 10;
 80035e0:	230a      	movs	r3, #10
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28
  }

#if STMODBUS_COUNT_FUNC > 0
  for (int i = 0; i < STMODBUS_COUNT_FUNC; i++) {
 80035e4:	2300      	movs	r3, #0
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
 80035e8:	e014      	b.n	8003614 <mbus_poll_response+0x60>
    if ((ctx->func[i].code == ctx->response.func)) {
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ee:	3206      	adds	r2, #6
 80035f0:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d107      	bne.n	800360e <mbus_poll_response+0x5a>
      func = ctx->func[i].func;
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	3306      	adds	r3, #6
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4413      	add	r3, r2
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800360c:	e005      	b.n	800361a <mbus_poll_response+0x66>
  for (int i = 0; i < STMODBUS_COUNT_FUNC; i++) {
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	3301      	adds	r3, #1
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	2b09      	cmp	r3, #9
 8003618:	dde7      	ble.n	80035ea <mbus_poll_response+0x36>
    }
  }
#endif
  switch (ctx->header.func) {
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003620:	2b0f      	cmp	r3, #15
 8003622:	d006      	beq.n	8003632 <mbus_poll_response+0x7e>
 8003624:	2b0f      	cmp	r3, #15
 8003626:	dc52      	bgt.n	80036ce <mbus_poll_response+0x11a>
 8003628:	2b01      	cmp	r3, #1
 800362a:	d002      	beq.n	8003632 <mbus_poll_response+0x7e>
 800362c:	2b02      	cmp	r3, #2
 800362e:	d027      	beq.n	8003680 <mbus_poll_response+0xcc>
    if ((ctx->header.addr + ctx->header.num) > ctx->conf.discrete) {
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
    }
    break;
  default:
    break;
 8003630:	e04d      	b.n	80036ce <mbus_poll_response+0x11a>
    if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0)) {
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <mbus_poll_response+0x94>
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003642:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003646:	d907      	bls.n	8003658 <mbus_poll_response+0xa4>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 8003648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364c:	2103      	movs	r1, #3
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff ff96 	bl	8003580 <mbus_response>
 8003654:	4603      	mov	r3, r0
 8003656:	e173      	b.n	8003940 <mbus_poll_response+0x38c>
    if ((ctx->header.addr + ctx->header.num) >= ctx->conf.coils) {
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800365e:	461a      	mov	r2, r3
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003666:	4413      	add	r3, r2
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	8852      	ldrh	r2, [r2, #2]
 800366c:	4293      	cmp	r3, r2
 800366e:	db30      	blt.n	80036d2 <mbus_poll_response+0x11e>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 8003670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003674:	2102      	movs	r1, #2
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff ff82 	bl	8003580 <mbus_response>
 800367c:	4603      	mov	r3, r0
 800367e:	e15f      	b.n	8003940 <mbus_poll_response+0x38c>
    if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0)) {
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <mbus_poll_response+0xe2>
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003690:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003694:	d907      	bls.n	80036a6 <mbus_poll_response+0xf2>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 8003696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369a:	2103      	movs	r1, #3
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff ff6f 	bl	8003580 <mbus_response>
 80036a2:	4603      	mov	r3, r0
 80036a4:	e14c      	b.n	8003940 <mbus_poll_response+0x38c>
    if ((ctx->header.addr + ctx->header.num) > ctx->conf.discrete) {
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80036ac:	461a      	mov	r2, r3
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80036b4:	4413      	add	r3, r2
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	8892      	ldrh	r2, [r2, #4]
 80036ba:	4293      	cmp	r3, r2
 80036bc:	dd0b      	ble.n	80036d6 <mbus_poll_response+0x122>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 80036be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c2:	2102      	movs	r1, #2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff ff5b 	bl	8003580 <mbus_response>
 80036ca:	4603      	mov	r3, r0
 80036cc:	e138      	b.n	8003940 <mbus_poll_response+0x38c>
    break;
 80036ce:	bf00      	nop
 80036d0:	e002      	b.n	80036d8 <mbus_poll_response+0x124>
    break;
 80036d2:	bf00      	nop
 80036d4:	e000      	b.n	80036d8 <mbus_poll_response+0x124>
    break;
 80036d6:	bf00      	nop
  }

  if (func != 0) {
 80036d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d006      	beq.n	80036ec <mbus_poll_response+0x138>
    return func(mb_context);
 80036de:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80036e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e4:	4610      	mov	r0, r2
 80036e6:	4798      	blx	r3
 80036e8:	4603      	mov	r3, r0
 80036ea:	e129      	b.n	8003940 <mbus_poll_response+0x38c>
  }

  la = mbus_proto_address((Modbus_ConnectFuncType)ctx->header.func, (int*)&read);
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80036f2:	f107 020c 	add.w	r2, r7, #12
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fb9b 	bl	8003e34 <mbus_proto_address>
 80036fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if (la > 0) {
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003702:	2b00      	cmp	r3, #0
 8003704:	dd06      	ble.n	8003714 <mbus_poll_response+0x160>
    la += ctx->header.addr;
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800370c:	461a      	mov	r2, r3
 800370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003710:	4413      	add	r3, r2
 8003712:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  if (la < 50001) {
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	f24c 3250 	movw	r2, #50000	; 0xc350
 800371a:	4293      	cmp	r3, r2
 800371c:	f300 8109 	bgt.w	8003932 <mbus_poll_response+0x37e>
    ctx->conf.sendbuf[0] = ctx->header.devaddr;
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800372a:	701a      	strb	r2, [r3, #0]
    ctx->conf.sendbuf[1] = ctx->header.func;
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	3301      	adds	r3, #1
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 8003738:	701a      	strb	r2, [r3, #0]
    ctx->conf.sendbuf[2] = ctx->header.num * 2;
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003740:	b2da      	uxtb	r2, r3
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	3302      	adds	r3, #2
 8003748:	0052      	lsls	r2, r2, #1
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]
    if (read && ctx->conf.read) {
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d04d      	beq.n	80037f0 <mbus_poll_response+0x23c>
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d049      	beq.n	80037f0 <mbus_poll_response+0x23c>
      g_userError = MBUS_RESPONSE_OK;
 800375c:	4b30      	ldr	r3, [pc, #192]	; (8003820 <mbus_poll_response+0x26c>)
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ctx->header.num; i++) {
 8003762:	2300      	movs	r3, #0
 8003764:	623b      	str	r3, [r7, #32]
 8003766:	e01f      	b.n	80037a8 <mbus_poll_response+0x1f4>
        
        d = ctx->conf.read(la + i);
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800376e:	6a3a      	ldr	r2, [r7, #32]
 8003770:	440a      	add	r2, r1
 8003772:	4610      	mov	r0, r2
 8003774:	4798      	blx	r3
 8003776:	4603      	mov	r3, r0
 8003778:	82fb      	strh	r3, [r7, #22]
        ctx->conf.sendbuf[3 + (i << 1)] = d >> 8;
 800377a:	8afb      	ldrh	r3, [r7, #22]
 800377c:	0a1b      	lsrs	r3, r3, #8
 800377e:	b299      	uxth	r1, r3
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	6a3a      	ldr	r2, [r7, #32]
 8003786:	0052      	lsls	r2, r2, #1
 8003788:	3203      	adds	r2, #3
 800378a:	4413      	add	r3, r2
 800378c:	b2ca      	uxtb	r2, r1
 800378e:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[3 + (i << 1) + 1] = d & 0xFF;
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	699a      	ldr	r2, [r3, #24]
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	3304      	adds	r3, #4
 800379a:	4413      	add	r3, r2
 800379c:	8afa      	ldrh	r2, [r7, #22]
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ctx->header.num; i++) {
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	3301      	adds	r3, #1
 80037a6:	623b      	str	r3, [r7, #32]
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80037ae:	461a      	mov	r2, r3
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	4293      	cmp	r3, r2
 80037b4:	dbd8      	blt.n	8003768 <mbus_poll_response+0x1b4>
      }
      if (g_userError == MBUS_RESPONSE_OK) {
 80037b6:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <mbus_poll_response+0x26c>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10e      	bne.n	80037dc <mbus_poll_response+0x228>
          return mbus_send_data(mb_context, 3 + ctx->conf.sendbuf[2]);
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	3302      	adds	r3, #2
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3303      	adds	r3, #3
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d0:	4611      	mov	r1, r2
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 faca 	bl	8003d6c <mbus_send_data>
 80037d8:	4603      	mov	r3, r0
 80037da:	e0b1      	b.n	8003940 <mbus_poll_response+0x38c>
      }else {
          return mbus_response(mb_context, g_userError);
 80037dc:	4b10      	ldr	r3, [pc, #64]	; (8003820 <mbus_poll_response+0x26c>)
 80037de:	781a      	ldrb	r2, [r3, #0]
 80037e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e4:	4611      	mov	r1, r2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff feca 	bl	8003580 <mbus_response>
 80037ec:	4603      	mov	r3, r0
 80037ee:	e0a7      	b.n	8003940 <mbus_poll_response+0x38c>
      }
    } else if (ctx->conf.write) {
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 809c 	beq.w	8003932 <mbus_poll_response+0x37e>
      uint16_t *value;
      ctx->conf.sendbuf[2] = 0;
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	3302      	adds	r3, #2
 8003800:	2200      	movs	r2, #0
 8003802:	701a      	strb	r2, [r3, #0]
      switch (ctx->header.func) {
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800380a:	2b06      	cmp	r3, #6
 800380c:	dc02      	bgt.n	8003814 <mbus_poll_response+0x260>
 800380e:	2b05      	cmp	r3, #5
 8003810:	da08      	bge.n	8003824 <mbus_poll_response+0x270>
 8003812:	e08e      	b.n	8003932 <mbus_poll_response+0x37e>
 8003814:	2b10      	cmp	r3, #16
 8003816:	d037      	beq.n	8003888 <mbus_poll_response+0x2d4>
 8003818:	e08b      	b.n	8003932 <mbus_poll_response+0x37e>
 800381a:	bf00      	nop
 800381c:	20000a18 	.word	0x20000a18
 8003820:	20000aac 	.word	0x20000aac
      case MBUS_FUNC_WRITE_REG:
      case MBUS_FUNC_WRITE_COIL:
        // in both these cases, we should return the same packet that we
        // received. in both cases, the packes have 6 bytes of data + 2 CRC
        // bytes = 8 bytes
        value = (uint16_t *)ctx->conf.recvbuf;
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	613b      	str	r3, [r7, #16]
        ctx->conf.write(la, *value);
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	8812      	ldrh	r2, [r2, #0]
 8003834:	4611      	mov	r1, r2
 8003836:	4798      	blx	r3
        ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800383e:	0a1b      	lsrs	r3, r3, #8
 8003840:	b29a      	uxth	r2, r3
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	3302      	adds	r3, #2
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	3303      	adds	r3, #3
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[4] = ctx->conf.recvbuf[1];
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	6a1a      	ldr	r2, [r3, #32]
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	3304      	adds	r3, #4
 8003866:	7852      	ldrb	r2, [r2, #1]
 8003868:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[5] = ctx->conf.recvbuf[0];
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	6a1a      	ldr	r2, [r3, #32]
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	3305      	adds	r3, #5
 8003874:	7812      	ldrb	r2, [r2, #0]
 8003876:	701a      	strb	r2, [r3, #0]
        return mbus_send_data(mb_context, 6);
 8003878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387c:	2106      	movs	r1, #6
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fa74 	bl	8003d6c <mbus_send_data>
 8003884:	4603      	mov	r3, r0
 8003886:	e05b      	b.n	8003940 <mbus_poll_response+0x38c>

      case MBUS_FUNC_WRITE_REGS:
    	  for (int i = 0; i < ctx->header.num; i++) {
 8003888:	2300      	movs	r3, #0
 800388a:	61fb      	str	r3, [r7, #28]
 800388c:	e01e      	b.n	80038cc <mbus_poll_response+0x318>
    		  uint16_t regvalue = ((uint16_t)ctx->conf.recvbuf[i*2]<<8)|((uint16_t)ctx->conf.recvbuf[i*2+1]);
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	0052      	lsls	r2, r2, #1
 8003896:	4413      	add	r3, r2
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	021b      	lsls	r3, r3, #8
 800389c:	b21a      	sxth	r2, r3
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	6a19      	ldr	r1, [r3, #32]
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	3301      	adds	r3, #1
 80038a8:	440b      	add	r3, r1
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	b21b      	sxth	r3, r3
 80038ae:	4313      	orrs	r3, r2
 80038b0:	b21b      	sxth	r3, r3
 80038b2:	82bb      	strh	r3, [r7, #20]
    		  ctx->conf.write(la + i, regvalue);
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038ba:	69fa      	ldr	r2, [r7, #28]
 80038bc:	440a      	add	r2, r1
 80038be:	4610      	mov	r0, r2
 80038c0:	8aba      	ldrh	r2, [r7, #20]
 80038c2:	4611      	mov	r1, r2
 80038c4:	4798      	blx	r3
    	  for (int i = 0; i < ctx->header.num; i++) {
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	3301      	adds	r3, #1
 80038ca:	61fb      	str	r3, [r7, #28]
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80038d2:	461a      	mov	r2, r3
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	4293      	cmp	r3, r2
 80038d8:	dbd9      	blt.n	800388e <mbus_poll_response+0x2da>
    	  }
    	  ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80038e0:	0a1b      	lsrs	r3, r3, #8
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	3302      	adds	r3, #2
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]
    	  ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	3303      	adds	r3, #3
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]
    	  ctx->conf.sendbuf[4] = ctx->header.num >> 8;
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003904:	0a1b      	lsrs	r3, r3, #8
 8003906:	b29a      	uxth	r2, r3
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	3304      	adds	r3, #4
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]
    	  ctx->conf.sendbuf[5] = ctx->header.num & 0xFF;
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	3305      	adds	r3, #5
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	701a      	strb	r2, [r3, #0]
    	  return mbus_send_data(mb_context, 6);
 8003922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003926:	2106      	movs	r1, #6
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fa1f 	bl	8003d6c <mbus_send_data>
 800392e:	4603      	mov	r3, r0
 8003930:	e006      	b.n	8003940 <mbus_poll_response+0x38c>
      } // end of switch
    }
  }
  return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_FUNCTION);
 8003932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003936:	2101      	movs	r1, #1
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff fe21 	bl	8003580 <mbus_response>
 800393e:	4603      	mov	r3, r0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3730      	adds	r7, #48	; 0x30
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <mbus_poll>:
/*
 * function mbus_close()
 * close modbus context
 * return: none
 */
mbus_status_t mbus_poll(mbus_t mb_context, uint8_t byte) {
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	460a      	mov	r2, r1
 8003952:	71fb      	strb	r3, [r7, #7]
 8003954:	4613      	mov	r3, r2
 8003956:	71bb      	strb	r3, [r7, #6]
  // State machine
  _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8003958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395c:	2294      	movs	r2, #148	; 0x94
 800395e:	fb02 f303 	mul.w	r3, r2, r3
 8003962:	4abf      	ldr	r2, [pc, #764]	; (8003c60 <mbus_poll+0x318>)
 8003964:	4413      	add	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]

  if (mbus_tickcount() - ctx->timer > 4) {
 8003968:	f000 faee 	bl	8003f48 <mbus_tickcount>
 800396c:	4602      	mov	r2, r0
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b04      	cmp	r3, #4
 8003976:	d904      	bls.n	8003982 <mbus_poll+0x3a>
    mbus_flush(mb_context);
 8003978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff fddb 	bl	8003538 <mbus_flush>
  }
  ctx->timer = mbus_tickcount();
 8003982:	f000 fae1 	bl	8003f48 <mbus_tickcount>
 8003986:	4602      	mov	r2, r0
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	62da      	str	r2, [r3, #44]	; 0x2c

  switch (ctx->state) {
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003992:	2b0e      	cmp	r3, #14
 8003994:	f200 816e 	bhi.w	8003c74 <mbus_poll+0x32c>
 8003998:	a201      	add	r2, pc, #4	; (adr r2, 80039a0 <mbus_poll+0x58>)
 800399a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399e:	bf00      	nop
 80039a0:	080039dd 	.word	0x080039dd
 80039a4:	08003c75 	.word	0x08003c75
 80039a8:	080039f9 	.word	0x080039f9
 80039ac:	08003adf 	.word	0x08003adf
 80039b0:	08003ac7 	.word	0x08003ac7
 80039b4:	08003bfd 	.word	0x08003bfd
 80039b8:	08003be5 	.word	0x08003be5
 80039bc:	08003b43 	.word	0x08003b43
 80039c0:	08003b1b 	.word	0x08003b1b
 80039c4:	08003b8d 	.word	0x08003b8d
 80039c8:	08003ba7 	.word	0x08003ba7
 80039cc:	08003c55 	.word	0x08003c55
 80039d0:	08003c65 	.word	0x08003c65
 80039d4:	08003c75 	.word	0x08003c75
 80039d8:	08003c6f 	.word	0x08003c6f
  case MBUS_STATE_IDLE:
    mbus_flush(mb_context);
 80039dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff fda9 	bl	8003538 <mbus_flush>
    ctx->state = MBUS_STATE_FUNCTION;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2202      	movs	r2, #2
 80039ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.devaddr = byte;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	79ba      	ldrb	r2, [r7, #6]
 80039f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    break;
 80039f6:	e146      	b.n	8003c86 <mbus_poll+0x33e>
  case MBUS_STATE_FUNCTION:
    ctx->header.func = byte;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	79ba      	ldrb	r2, [r7, #6]
 80039fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    switch (byte) {
 8003a00:	79bb      	ldrb	r3, [r7, #6]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	2b0f      	cmp	r3, #15
 8003a06:	d857      	bhi.n	8003ab8 <mbus_poll+0x170>
 8003a08:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <mbus_poll+0xc8>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003a85 	.word	0x08003a85
 8003a14:	08003ab9 	.word	0x08003ab9
 8003a18:	08003a85 	.word	0x08003a85
 8003a1c:	08003a85 	.word	0x08003a85
 8003a20:	08003a9f 	.word	0x08003a9f
 8003a24:	08003a51 	.word	0x08003a51
 8003a28:	08003ab9 	.word	0x08003ab9
 8003a2c:	08003ab9 	.word	0x08003ab9
 8003a30:	08003ab9 	.word	0x08003ab9
 8003a34:	08003ab9 	.word	0x08003ab9
 8003a38:	08003ab9 	.word	0x08003ab9
 8003a3c:	08003ab9 	.word	0x08003ab9
 8003a40:	08003ab9 	.word	0x08003ab9
 8003a44:	08003ab9 	.word	0x08003ab9
 8003a48:	08003a6b 	.word	0x08003a6b
 8003a4c:	08003a6b 	.word	0x08003a6b
    case MBUS_FUNC_WRITE_REG:
      ctx->header.rnum = 1;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->header.num = 1;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      ctx->state = MBUS_STATE_REGADDR_HI;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2204      	movs	r2, #4
 8003a64:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      break;
 8003a68:	e02c      	b.n	8003ac4 <mbus_poll+0x17c>
    case MBUS_FUNC_WRITE_REGS:
    case MBUS_FUNC_WRITE_COILS:
      ctx->header.rnum = 1;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->header.num = 0;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      ctx->state = MBUS_STATE_REGADDR_HI;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      break;
 8003a82:	e01f      	b.n	8003ac4 <mbus_poll+0x17c>
    case MBUS_FUNC_READ_INPUT_REGS:
    case MBUS_FUNC_READ_COILS:
    case MBUS_FUNC_READ_REGS:
      ctx->state = MBUS_STATE_REGADDR_HI;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2204      	movs	r2, #4
 8003a88:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      ctx->header.rnum = 0;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->header.num = 0;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      break;
 8003a9c:	e012      	b.n	8003ac4 <mbus_poll+0x17c>
    case MBUS_FUNC_WRITE_COIL:
      ctx->header.rnum = 1;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->header.num = 1;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      ctx->state = MBUS_STATE_REGADDR_HI;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      break;
 8003ab6:	e005      	b.n	8003ac4 <mbus_poll+0x17c>
    default:
      // ctx->state = MBUS_STATE_IDLE;
      mbus_flush(mb_context);
 8003ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff fd3b 	bl	8003538 <mbus_flush>
      break;
 8003ac2:	bf00      	nop
    }
    break;
 8003ac4:	e0df      	b.n	8003c86 <mbus_poll+0x33e>
  case MBUS_STATE_REGADDR_HI:
    ctx->state = MBUS_STATE_REGADDR_LO;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2203      	movs	r2, #3
 8003aca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.addr = byte << 8;
 8003ace:	79bb      	ldrb	r3, [r7, #6]
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	021b      	lsls	r3, r3, #8
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    break;
 8003adc:	e0d3      	b.n	8003c86 <mbus_poll+0x33e>
  case MBUS_STATE_REGADDR_LO:
    ctx->header.addr |= byte;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8003ae4:	79bb      	ldrb	r3, [r7, #6]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    if (ctx->header.num == 1 && ctx->header.rnum == 1) {
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d109      	bne.n	8003b10 <mbus_poll+0x1c8>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d104      	bne.n	8003b10 <mbus_poll+0x1c8>
      ctx->state = MBUS_STATE_DATA_HI;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2208      	movs	r2, #8
 8003b0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    } else {
      ctx->state = MBUS_STATE_REGNUM_HI;
    }
    break;
 8003b0e:	e0ba      	b.n	8003c86 <mbus_poll+0x33e>
      ctx->state = MBUS_STATE_REGNUM_HI;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2206      	movs	r2, #6
 8003b14:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8003b18:	e0b5      	b.n	8003c86 <mbus_poll+0x33e>
  case MBUS_STATE_DATA_HI:
    ctx->state = MBUS_STATE_DATA_LO;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2207      	movs	r2, #7
 8003b1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum) + 1] = byte;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a1a      	ldr	r2, [r3, #32]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003b34:	1acb      	subs	r3, r1, r3
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	3301      	adds	r3, #1
 8003b3a:	4413      	add	r3, r2
 8003b3c:	79ba      	ldrb	r2, [r7, #6]
 8003b3e:	701a      	strb	r2, [r3, #0]
    break;
 8003b40:	e0a1      	b.n	8003c86 <mbus_poll+0x33e>
  case MBUS_STATE_DATA_LO:
    ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum)] = byte;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	f8b2 2086 	ldrh.w	r2, [r2, #134]	; 0x86
 8003b54:	1a8a      	subs	r2, r1, r2
 8003b56:	0052      	lsls	r2, r2, #1
 8003b58:	4413      	add	r3, r2
 8003b5a:	79ba      	ldrb	r2, [r7, #6]
 8003b5c:	701a      	strb	r2, [r3, #0]
    ctx->header.rnum--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    if (ctx->header.rnum == 0) {
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d104      	bne.n	8003b82 <mbus_poll+0x23a>
      ctx->state = MBUS_STATE_CRC_LO;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	220b      	movs	r2, #11
 8003b7c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    } else {
      ctx->state = MBUS_STATE_DATA_HI;
    }
    break;
 8003b80:	e081      	b.n	8003c86 <mbus_poll+0x33e>
      ctx->state = MBUS_STATE_DATA_HI;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2208      	movs	r2, #8
 8003b86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8003b8a:	e07c      	b.n	8003c86 <mbus_poll+0x33e>
  case MBUS_STATE_DATA_SIZE:
    ctx->state = MBUS_STATE_DATA;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	220a      	movs	r2, #10
 8003b90:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.size = byte;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	79ba      	ldrb	r2, [r7, #6]
 8003b98:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    ctx->header.rsize = byte;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	79ba      	ldrb	r2, [r7, #6]
 8003ba0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    break;
 8003ba4:	e06f      	b.n	8003c86 <mbus_poll+0x33e>
  case MBUS_STATE_DATA:
    ctx->conf.recvbuf[ctx->header.size - ctx->header.rsize] = byte;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	f892 2088 	ldrb.w	r2, [r2, #136]	; 0x88
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	f892 2089 	ldrb.w	r2, [r2, #137]	; 0x89
 8003bb8:	1a8a      	subs	r2, r1, r2
 8003bba:	4413      	add	r3, r2
 8003bbc:	79ba      	ldrb	r2, [r7, #6]
 8003bbe:	701a      	strb	r2, [r3, #0]
    ctx->header.rsize--;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    if (ctx->header.rsize == 0) {
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d152      	bne.n	8003c80 <mbus_poll+0x338>
      ctx->state = MBUS_STATE_CRC_LO;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	220b      	movs	r2, #11
 8003bde:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }
    break;
 8003be2:	e04d      	b.n	8003c80 <mbus_poll+0x338>
  case MBUS_STATE_REGNUM_HI:
    ctx->state = MBUS_STATE_REGNUM_LO;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2205      	movs	r2, #5
 8003be8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.num = byte << 8;
 8003bec:	79bb      	ldrb	r3, [r7, #6]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	021b      	lsls	r3, r3, #8
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    break;
 8003bfa:	e044      	b.n	8003c86 <mbus_poll+0x33e>
  case MBUS_STATE_REGNUM_LO:
    ctx->state = MBUS_STATE_CRC_LO;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	220b      	movs	r2, #11
 8003c00:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.num |= byte;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8003c0a:	79bb      	ldrb	r3, [r7, #6]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    if (ctx->header.rnum == 0) {
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d104      	bne.n	8003c2c <mbus_poll+0x2e4>
      ctx->state = MBUS_STATE_CRC_LO;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	220b      	movs	r2, #11
 8003c26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      if (ctx->header.func == MBUS_FUNC_WRITE_REGS) {
        ctx->state = MBUS_STATE_DATA_SIZE;
      }
    }

    break;
 8003c2a:	e02b      	b.n	8003c84 <mbus_poll+0x33c>
      ctx->header.rnum = ctx->header.num;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->state = MBUS_STATE_DATA_HI;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      if (ctx->header.func == MBUS_FUNC_WRITE_REGS) {
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003c46:	2b10      	cmp	r3, #16
 8003c48:	d11c      	bne.n	8003c84 <mbus_poll+0x33c>
        ctx->state = MBUS_STATE_DATA_SIZE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2209      	movs	r2, #9
 8003c4e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8003c52:	e017      	b.n	8003c84 <mbus_poll+0x33c>
  case MBUS_STATE_CRC_LO:
    ctx->state = MBUS_STATE_CRC_HI;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	220c      	movs	r2, #12
 8003c58:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8003c5c:	e013      	b.n	8003c86 <mbus_poll+0x33e>
 8003c5e:	bf00      	nop
 8003c60:	20000a18 	.word	0x20000a18
  case MBUS_STATE_CRC_HI:
    ctx->state = MBUS_STATE_FINISH;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	220d      	movs	r2, #13
 8003c68:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8003c6c:	e00b      	b.n	8003c86 <mbus_poll+0x33e>
  // We can't processing any more before callback not returned
  case MBUS_STATE_RESPONSE:
    return MBUS_ERROR;
 8003c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c72:	e04c      	b.n	8003d0e <mbus_poll+0x3c6>
  default:
    mbus_flush(mb_context);
 8003c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fc5d 	bl	8003538 <mbus_flush>
    break;
 8003c7e:	e002      	b.n	8003c86 <mbus_poll+0x33e>
    break;
 8003c80:	bf00      	nop
 8003c82:	e000      	b.n	8003c86 <mbus_poll+0x33e>
    break;
 8003c84:	bf00      	nop
  }

  ctx->crc16 = mbus_crc16(ctx->crc16, byte);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8a:	79ba      	ldrb	r2, [r7, #6]
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 f92e 	bl	8003ef0 <mbus_crc16>
 8003c94:	4603      	mov	r3, r0
 8003c96:	461a      	mov	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (ctx->state == MBUS_STATE_FINISH) {
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003ca2:	2b0d      	cmp	r3, #13
 8003ca4:	d132      	bne.n	8003d0c <mbus_poll+0x3c4>
    // CRC error
    if (ctx->crc16 != 0) {
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <mbus_poll+0x376>
      mbus_flush(mb_context);
 8003cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff fc40 	bl	8003538 <mbus_flush>
      return MBUS_ERROR;
 8003cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cbc:	e027      	b.n	8003d0e <mbus_poll+0x3c6>
    }

    // TODO: Add broadcast messages
    if (ctx->header.devaddr == ctx->conf.devaddr) {
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d11a      	bne.n	8003d02 <mbus_poll+0x3ba>
      ctx->state = MBUS_STATE_RESPONSE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	220e      	movs	r2, #14
 8003cd0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      if (mbus_poll_response(mb_context) == MBUS_OK) {
 8003cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff fc6b 	bl	80035b4 <mbus_poll_response>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d106      	bne.n	8003cf2 <mbus_poll+0x3aa>
        mbus_flush(mb_context);
 8003ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fc25 	bl	8003538 <mbus_flush>
        return MBUS_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	e00d      	b.n	8003d0e <mbus_poll+0x3c6>
      }
      mbus_flush(mb_context);
 8003cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff fc1e 	bl	8003538 <mbus_flush>
      return MBUS_ERROR;
 8003cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003d00:	e005      	b.n	8003d0e <mbus_poll+0x3c6>
    }
    mbus_flush(mb_context);
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff fc16 	bl	8003538 <mbus_flush>
  }
  return MBUS_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop

08003d18 <mbus_send_error>:
  if (g_mbusContext[mb_context].open)
    return (mbus_context_t)&g_mbusContext[mb_context];
  return 0;
}

mbus_status_t mbus_send_error(mbus_t mb_context, Modbus_ResponseType response) {
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	460a      	mov	r2, r1
 8003d22:	71fb      	strb	r3, [r7, #7]
 8003d24:	4613      	mov	r3, r2
 8003d26:	71bb      	strb	r3, [r7, #6]
  uint16_t *pbuf = (uint16_t *)(g_mbusContext[mb_context].conf.sendbuf + 2);
 8003d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2c:	4a0d      	ldr	r2, [pc, #52]	; (8003d64 <mbus_send_error+0x4c>)
 8003d2e:	2194      	movs	r1, #148	; 0x94
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	4413      	add	r3, r2
 8003d36:	3318      	adds	r3, #24
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3302      	adds	r3, #2
 8003d3c:	60fb      	str	r3, [r7, #12]
  *pbuf = 0x8300 | (uint8_t)response;
 8003d3e:	79bb      	ldrb	r3, [r7, #6]
 8003d40:	b21a      	sxth	r2, r3
 8003d42:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <mbus_send_error+0x50>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	b21b      	sxth	r3, r3
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	801a      	strh	r2, [r3, #0]
  return mbus_send_data(mb_context, 4);
 8003d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d52:	2104      	movs	r1, #4
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 f809 	bl	8003d6c <mbus_send_data>
 8003d5a:	4603      	mov	r3, r0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20000a18 	.word	0x20000a18
 8003d68:	ffff8300 	.word	0xffff8300

08003d6c <mbus_send_data>:

mbus_status_t mbus_send_data(mbus_t mb_context, uint16_t size) {
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	460a      	mov	r2, r1
 8003d76:	71fb      	strb	r3, [r7, #7]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	80bb      	strh	r3, [r7, #4]
  // if size > ( conf.send_sz-2) error
  uint16_t crc32 = 0xFFFF;
 8003d7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d80:	82fb      	strh	r3, [r7, #22]
  const _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8003d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d86:	2294      	movs	r2, #148	; 0x94
 8003d88:	fb02 f303 	mul.w	r3, r2, r3
 8003d8c:	4a28      	ldr	r2, [pc, #160]	; (8003e30 <mbus_send_data+0xc4>)
 8003d8e:	4413      	add	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
  uint8_t *pbuf = ctx->conf.sendbuf;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	60bb      	str	r3, [r7, #8]
  if (ctx->conf.send == 0 || pbuf == 0 || ctx->conf.sendbuf_sz < (size + 2))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <mbus_send_data+0x46>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d005      	beq.n	8003db2 <mbus_send_data+0x46>
 8003da6:	88bb      	ldrh	r3, [r7, #4]
 8003da8:	3301      	adds	r3, #1
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	8b92      	ldrh	r2, [r2, #28]
 8003dae:	4293      	cmp	r3, r2
 8003db0:	db02      	blt.n	8003db8 <mbus_send_data+0x4c>
    return MBUS_ERROR;
 8003db2:	f04f 33ff 	mov.w	r3, #4294967295
 8003db6:	e037      	b.n	8003e28 <mbus_send_data+0xbc>
  for (int i = 0; i < size; i++) {
 8003db8:	2300      	movs	r3, #0
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	e00d      	b.n	8003dda <mbus_send_data+0x6e>
    crc32 = mbus_crc16(crc32, pbuf[i]);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	781a      	ldrb	r2, [r3, #0]
 8003dc6:	8afb      	ldrh	r3, [r7, #22]
 8003dc8:	4611      	mov	r1, r2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 f890 	bl	8003ef0 <mbus_crc16>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	82fb      	strh	r3, [r7, #22]
  for (int i = 0; i < size; i++) {
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	613b      	str	r3, [r7, #16]
 8003dda:	88bb      	ldrh	r3, [r7, #4]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	dbed      	blt.n	8003dbe <mbus_send_data+0x52>
  }
  pbuf[size++] = crc32 & 0xFF;
 8003de2:	88bb      	ldrh	r3, [r7, #4]
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	80ba      	strh	r2, [r7, #4]
 8003de8:	461a      	mov	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	4413      	add	r3, r2
 8003dee:	8afa      	ldrh	r2, [r7, #22]
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	701a      	strb	r2, [r3, #0]
  pbuf[size++] = (crc32 >> 8);
 8003df4:	8afb      	ldrh	r3, [r7, #22]
 8003df6:	0a1b      	lsrs	r3, r3, #8
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	88bb      	ldrh	r3, [r7, #4]
 8003dfc:	1c59      	adds	r1, r3, #1
 8003dfe:	80b9      	strh	r1, [r7, #4]
 8003e00:	4619      	mov	r1, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	440b      	add	r3, r1
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	701a      	strb	r2, [r3, #0]

  if (ctx->conf.send(mb_context, pbuf, size) != size)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	88ba      	ldrh	r2, [r7, #4]
 8003e10:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8003e14:	68b9      	ldr	r1, [r7, #8]
 8003e16:	4798      	blx	r3
 8003e18:	4602      	mov	r2, r0
 8003e1a:	88bb      	ldrh	r3, [r7, #4]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d002      	beq.n	8003e26 <mbus_send_data+0xba>
    return MBUS_ERROR;
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
 8003e24:	e000      	b.n	8003e28 <mbus_send_data+0xbc>
  return MBUS_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	20000a18 	.word	0x20000a18

08003e34 <mbus_proto_address>:
  }
#endif
  return MBUS_ERROR;
}

int mbus_proto_address( Modbus_ConnectFuncType func, int *r) {
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	6039      	str	r1, [r7, #0]
 8003e3e:	71fb      	strb	r3, [r7, #7]
  int adr = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]
  *r = 1;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2201      	movs	r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
  switch (func) {
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	2b16      	cmp	r3, #22
 8003e50:	d845      	bhi.n	8003ede <mbus_proto_address+0xaa>
 8003e52:	a201      	add	r2, pc, #4	; (adr r2, 8003e58 <mbus_proto_address+0x24>)
 8003e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e58:	08003ed9 	.word	0x08003ed9
 8003e5c:	08003ecb 	.word	0x08003ecb
 8003e60:	08003ebb 	.word	0x08003ebb
 8003e64:	08003ec3 	.word	0x08003ec3
 8003e68:	08003ed3 	.word	0x08003ed3
 8003e6c:	08003eb5 	.word	0x08003eb5
 8003e70:	08003edf 	.word	0x08003edf
 8003e74:	08003edf 	.word	0x08003edf
 8003e78:	08003edf 	.word	0x08003edf
 8003e7c:	08003edf 	.word	0x08003edf
 8003e80:	08003edf 	.word	0x08003edf
 8003e84:	08003edf 	.word	0x08003edf
 8003e88:	08003edf 	.word	0x08003edf
 8003e8c:	08003edf 	.word	0x08003edf
 8003e90:	08003ed3 	.word	0x08003ed3
 8003e94:	08003eb5 	.word	0x08003eb5
 8003e98:	08003edf 	.word	0x08003edf
 8003e9c:	08003edf 	.word	0x08003edf
 8003ea0:	08003edf 	.word	0x08003edf
 8003ea4:	08003edf 	.word	0x08003edf
 8003ea8:	08003edf 	.word	0x08003edf
 8003eac:	08003eb5 	.word	0x08003eb5
 8003eb0:	08003eb5 	.word	0x08003eb5
  case MBUS_FUNC_WRITE_REG:
  case MBUS_FUNC_WRITE_REGS:
  case MBUS_FUNC_READ_WRITE_MASK_REGS:
  case MBUS_FUNC_READ_WRITE_REGS:
    *r = 0;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]
  case MBUS_FUNC_READ_REGS:
    adr = 40001;
 8003eba:	f649 4341 	movw	r3, #40001	; 0x9c41
 8003ebe:	60fb      	str	r3, [r7, #12]
    break;
 8003ec0:	e00e      	b.n	8003ee0 <mbus_proto_address+0xac>
  case MBUS_FUNC_READ_INPUT_REGS:
    adr = 30001;
 8003ec2:	f247 5331 	movw	r3, #30001	; 0x7531
 8003ec6:	60fb      	str	r3, [r7, #12]
    break;
 8003ec8:	e00a      	b.n	8003ee0 <mbus_proto_address+0xac>
  case MBUS_FUNC_READ_DISCRETE:
    adr = 10001;
 8003eca:	f242 7311 	movw	r3, #10001	; 0x2711
 8003ece:	60fb      	str	r3, [r7, #12]
    break;
 8003ed0:	e006      	b.n	8003ee0 <mbus_proto_address+0xac>
  case MBUS_FUNC_WRITE_COILS:
  case MBUS_FUNC_WRITE_COIL:
    *r = 0;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]
  case MBUS_FUNC_READ_COILS:
    adr = 0001;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	60fb      	str	r3, [r7, #12]
    break;
 8003edc:	e000      	b.n	8003ee0 <mbus_proto_address+0xac>
  default:
    break;
 8003ede:	bf00      	nop
  }
  return adr;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop

08003ef0 <mbus_crc16>:
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}

*/

uint16_t mbus_crc16(uint16_t crc16, uint8_t byte) {
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	460a      	mov	r2, r1
 8003efa:	80fb      	strh	r3, [r7, #6]
 8003efc:	4613      	mov	r3, r2
 8003efe:	717b      	strb	r3, [r7, #5]
  const int index = (crc16 & 0xFF) ^ byte;
 8003f00:	88fb      	ldrh	r3, [r7, #6]
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	797b      	ldrb	r3, [r7, #5]
 8003f06:	4053      	eors	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]
  return (aucCRCLo[index] << 8) | ((crc16 >> 8) ^ aucCRCHi[index]);
 8003f0a:	4a0d      	ldr	r2, [pc, #52]	; (8003f40 <mbus_crc16+0x50>)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	b21a      	sxth	r2, r3
 8003f16:	88fb      	ldrh	r3, [r7, #6]
 8003f18:	0a1b      	lsrs	r3, r3, #8
 8003f1a:	b299      	uxth	r1, r3
 8003f1c:	4809      	ldr	r0, [pc, #36]	; (8003f44 <mbus_crc16+0x54>)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4403      	add	r3, r0
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	404b      	eors	r3, r1
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	b21b      	sxth	r3, r3
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	b21b      	sxth	r3, r3
 8003f30:	b29b      	uxth	r3, r3
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	0800ca44 	.word	0x0800ca44
 8003f44:	0800c944 	.word	0x0800c944

08003f48 <mbus_tickcount>:

uint32_t mbus_tickcount() { return 0; }
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	4618      	mov	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f5c:	4b0e      	ldr	r3, [pc, #56]	; (8003f98 <HAL_Init+0x40>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a0d      	ldr	r2, [pc, #52]	; (8003f98 <HAL_Init+0x40>)
 8003f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <HAL_Init+0x40>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <HAL_Init+0x40>)
 8003f6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f74:	4b08      	ldr	r3, [pc, #32]	; (8003f98 <HAL_Init+0x40>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a07      	ldr	r2, [pc, #28]	; (8003f98 <HAL_Init+0x40>)
 8003f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f80:	2003      	movs	r0, #3
 8003f82:	f000 fd41 	bl	8004a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f86:	200f      	movs	r0, #15
 8003f88:	f000 f808 	bl	8003f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f8c:	f7fd fcc2 	bl	8001914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40023c00 	.word	0x40023c00

08003f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fa4:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <HAL_InitTick+0x54>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <HAL_InitTick+0x58>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	4619      	mov	r1, r3
 8003fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fd67 	bl	8004a8e <HAL_SYSTICK_Config>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e00e      	b.n	8003fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b0f      	cmp	r3, #15
 8003fce:	d80a      	bhi.n	8003fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd8:	f000 fd21 	bl	8004a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fdc:	4a06      	ldr	r2, [pc, #24]	; (8003ff8 <HAL_InitTick+0x5c>)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e000      	b.n	8003fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	200000f4 	.word	0x200000f4
 8003ff4:	200000fc 	.word	0x200000fc
 8003ff8:	200000f8 	.word	0x200000f8

08003ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004000:	4b06      	ldr	r3, [pc, #24]	; (800401c <HAL_IncTick+0x20>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	4b06      	ldr	r3, [pc, #24]	; (8004020 <HAL_IncTick+0x24>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4413      	add	r3, r2
 800400c:	4a04      	ldr	r2, [pc, #16]	; (8004020 <HAL_IncTick+0x24>)
 800400e:	6013      	str	r3, [r2, #0]
}
 8004010:	bf00      	nop
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	200000fc 	.word	0x200000fc
 8004020:	20000ab0 	.word	0x20000ab0

08004024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  return uwTick;
 8004028:	4b03      	ldr	r3, [pc, #12]	; (8004038 <HAL_GetTick+0x14>)
 800402a:	681b      	ldr	r3, [r3, #0]
}
 800402c:	4618      	mov	r0, r3
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	20000ab0 	.word	0x20000ab0

0800403c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e033      	b.n	80040ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fd fc86 	bl	800196c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	2b00      	cmp	r3, #0
 8004078:	d118      	bne.n	80040ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004082:	f023 0302 	bic.w	r3, r3, #2
 8004086:	f043 0202 	orr.w	r2, r3, #2
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fa48 	bl	8004524 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f023 0303 	bic.w	r3, r3, #3
 80040a2:	f043 0201 	orr.w	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40
 80040aa:	e001      	b.n	80040b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <HAL_ADC_Start_DMA+0x1e>
 80040de:	2302      	movs	r3, #2
 80040e0:	e0ce      	b.n	8004280 <HAL_ADC_Start_DMA+0x1bc>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d018      	beq.n	800412a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004108:	4b5f      	ldr	r3, [pc, #380]	; (8004288 <HAL_ADC_Start_DMA+0x1c4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a5f      	ldr	r2, [pc, #380]	; (800428c <HAL_ADC_Start_DMA+0x1c8>)
 800410e:	fba2 2303 	umull	r2, r3, r2, r3
 8004112:	0c9a      	lsrs	r2, r3, #18
 8004114:	4613      	mov	r3, r2
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	4413      	add	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800411c:	e002      	b.n	8004124 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	3b01      	subs	r3, #1
 8004122:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f9      	bne.n	800411e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004138:	d107      	bne.n	800414a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004148:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b01      	cmp	r3, #1
 8004156:	f040 8086 	bne.w	8004266 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004162:	f023 0301 	bic.w	r3, r3, #1
 8004166:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004184:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004198:	d106      	bne.n	80041a8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419e:	f023 0206 	bic.w	r2, r3, #6
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	645a      	str	r2, [r3, #68]	; 0x44
 80041a6:	e002      	b.n	80041ae <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041b6:	4b36      	ldr	r3, [pc, #216]	; (8004290 <HAL_ADC_Start_DMA+0x1cc>)
 80041b8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	4a35      	ldr	r2, [pc, #212]	; (8004294 <HAL_ADC_Start_DMA+0x1d0>)
 80041c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c6:	4a34      	ldr	r2, [pc, #208]	; (8004298 <HAL_ADC_Start_DMA+0x1d4>)
 80041c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	4a33      	ldr	r2, [pc, #204]	; (800429c <HAL_ADC_Start_DMA+0x1d8>)
 80041d0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80041da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80041ea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041fa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	334c      	adds	r3, #76	; 0x4c
 8004206:	4619      	mov	r1, r3
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f000 fd58 	bl	8004cc0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10f      	bne.n	800423c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d129      	bne.n	800427e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004238:	609a      	str	r2, [r3, #8]
 800423a:	e020      	b.n	800427e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a17      	ldr	r2, [pc, #92]	; (80042a0 <HAL_ADC_Start_DMA+0x1dc>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d11b      	bne.n	800427e <HAL_ADC_Start_DMA+0x1ba>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d114      	bne.n	800427e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689a      	ldr	r2, [r3, #8]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004262:	609a      	str	r2, [r3, #8]
 8004264:	e00b      	b.n	800427e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	f043 0210 	orr.w	r2, r3, #16
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004276:	f043 0201 	orr.w	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	200000f4 	.word	0x200000f4
 800428c:	431bde83 	.word	0x431bde83
 8004290:	40012300 	.word	0x40012300
 8004294:	0800471d 	.word	0x0800471d
 8004298:	080047d7 	.word	0x080047d7
 800429c:	080047f3 	.word	0x080047f3
 80042a0:	40012000 	.word	0x40012000

080042a4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x1c>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e105      	b.n	8004508 <HAL_ADC_ConfigChannel+0x228>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b09      	cmp	r3, #9
 800430a:	d925      	bls.n	8004358 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68d9      	ldr	r1, [r3, #12]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	b29b      	uxth	r3, r3
 8004318:	461a      	mov	r2, r3
 800431a:	4613      	mov	r3, r2
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	4413      	add	r3, r2
 8004320:	3b1e      	subs	r3, #30
 8004322:	2207      	movs	r2, #7
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	43da      	mvns	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	400a      	ands	r2, r1
 8004330:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68d9      	ldr	r1, [r3, #12]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	b29b      	uxth	r3, r3
 8004342:	4618      	mov	r0, r3
 8004344:	4603      	mov	r3, r0
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	4403      	add	r3, r0
 800434a:	3b1e      	subs	r3, #30
 800434c:	409a      	lsls	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	60da      	str	r2, [r3, #12]
 8004356:	e022      	b.n	800439e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6919      	ldr	r1, [r3, #16]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	b29b      	uxth	r3, r3
 8004364:	461a      	mov	r2, r3
 8004366:	4613      	mov	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4413      	add	r3, r2
 800436c:	2207      	movs	r2, #7
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	43da      	mvns	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	400a      	ands	r2, r1
 800437a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6919      	ldr	r1, [r3, #16]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	b29b      	uxth	r3, r3
 800438c:	4618      	mov	r0, r3
 800438e:	4603      	mov	r3, r0
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	4403      	add	r3, r0
 8004394:	409a      	lsls	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b06      	cmp	r3, #6
 80043a4:	d824      	bhi.n	80043f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	3b05      	subs	r3, #5
 80043b8:	221f      	movs	r2, #31
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	43da      	mvns	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	400a      	ands	r2, r1
 80043c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	4618      	mov	r0, r3
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	3b05      	subs	r3, #5
 80043e2:	fa00 f203 	lsl.w	r2, r0, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	635a      	str	r2, [r3, #52]	; 0x34
 80043ee:	e04c      	b.n	800448a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b0c      	cmp	r3, #12
 80043f6:	d824      	bhi.n	8004442 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	3b23      	subs	r3, #35	; 0x23
 800440a:	221f      	movs	r2, #31
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	43da      	mvns	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	400a      	ands	r2, r1
 8004418:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	b29b      	uxth	r3, r3
 8004426:	4618      	mov	r0, r3
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	3b23      	subs	r3, #35	; 0x23
 8004434:	fa00 f203 	lsl.w	r2, r0, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	631a      	str	r2, [r3, #48]	; 0x30
 8004440:	e023      	b.n	800448a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	3b41      	subs	r3, #65	; 0x41
 8004454:	221f      	movs	r2, #31
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	43da      	mvns	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	400a      	ands	r2, r1
 8004462:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	4618      	mov	r0, r3
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	3b41      	subs	r3, #65	; 0x41
 800447e:	fa00 f203 	lsl.w	r2, r0, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800448a:	4b22      	ldr	r3, [pc, #136]	; (8004514 <HAL_ADC_ConfigChannel+0x234>)
 800448c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a21      	ldr	r2, [pc, #132]	; (8004518 <HAL_ADC_ConfigChannel+0x238>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d109      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x1cc>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b12      	cmp	r3, #18
 800449e:	d105      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a19      	ldr	r2, [pc, #100]	; (8004518 <HAL_ADC_ConfigChannel+0x238>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d123      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x21e>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b10      	cmp	r3, #16
 80044bc:	d003      	beq.n	80044c6 <HAL_ADC_ConfigChannel+0x1e6>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b11      	cmp	r3, #17
 80044c4:	d11b      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b10      	cmp	r3, #16
 80044d8:	d111      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044da:	4b10      	ldr	r3, [pc, #64]	; (800451c <HAL_ADC_ConfigChannel+0x23c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a10      	ldr	r2, [pc, #64]	; (8004520 <HAL_ADC_ConfigChannel+0x240>)
 80044e0:	fba2 2303 	umull	r2, r3, r2, r3
 80044e4:	0c9a      	lsrs	r2, r3, #18
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80044f0:	e002      	b.n	80044f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f9      	bne.n	80044f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	40012300 	.word	0x40012300
 8004518:	40012000 	.word	0x40012000
 800451c:	200000f4 	.word	0x200000f4
 8004520:	431bde83 	.word	0x431bde83

08004524 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800452c:	4b79      	ldr	r3, [pc, #484]	; (8004714 <ADC_Init+0x1f0>)
 800452e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	431a      	orrs	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6859      	ldr	r1, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	021a      	lsls	r2, r3, #8
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800457c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6859      	ldr	r1, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800459e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6899      	ldr	r1, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	4a58      	ldr	r2, [pc, #352]	; (8004718 <ADC_Init+0x1f4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d022      	beq.n	8004602 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6899      	ldr	r1, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80045ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6899      	ldr	r1, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	609a      	str	r2, [r3, #8]
 8004600:	e00f      	b.n	8004622 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004610:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004620:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0202 	bic.w	r2, r2, #2
 8004630:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6899      	ldr	r1, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	7e1b      	ldrb	r3, [r3, #24]
 800463c:	005a      	lsls	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01b      	beq.n	8004688 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800465e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800466e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6859      	ldr	r1, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	3b01      	subs	r3, #1
 800467c:	035a      	lsls	r2, r3, #13
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	605a      	str	r2, [r3, #4]
 8004686:	e007      	b.n	8004698 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004696:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80046a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	051a      	lsls	r2, r3, #20
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6899      	ldr	r1, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046da:	025a      	lsls	r2, r3, #9
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6899      	ldr	r1, [r3, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	029a      	lsls	r2, r3, #10
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	609a      	str	r2, [r3, #8]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	40012300 	.word	0x40012300
 8004718:	0f000001 	.word	0x0f000001

0800471c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004732:	2b00      	cmp	r3, #0
 8004734:	d13c      	bne.n	80047b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d12b      	bne.n	80047a8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004754:	2b00      	cmp	r3, #0
 8004756:	d127      	bne.n	80047a8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004762:	2b00      	cmp	r3, #0
 8004764:	d006      	beq.n	8004774 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004770:	2b00      	cmp	r3, #0
 8004772:	d119      	bne.n	80047a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0220 	bic.w	r2, r2, #32
 8004782:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d105      	bne.n	80047a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	f043 0201 	orr.w	r2, r3, #1
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f7ff fd7b 	bl	80042a4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80047ae:	e00e      	b.n	80047ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f7ff fd85 	bl	80042cc <HAL_ADC_ErrorCallback>
}
 80047c2:	e004      	b.n	80047ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	4798      	blx	r3
}
 80047ce:	bf00      	nop
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f7ff fd67 	bl	80042b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2240      	movs	r2, #64	; 0x40
 8004804:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480a:	f043 0204 	orr.w	r2, r3, #4
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f7ff fd5a 	bl	80042cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004818:	bf00      	nop
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004830:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <__NVIC_SetPriorityGrouping+0x44>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800483c:	4013      	ands	r3, r2
 800483e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800484c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004852:	4a04      	ldr	r2, [pc, #16]	; (8004864 <__NVIC_SetPriorityGrouping+0x44>)
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	60d3      	str	r3, [r2, #12]
}
 8004858:	bf00      	nop
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	e000ed00 	.word	0xe000ed00

08004868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800486c:	4b04      	ldr	r3, [pc, #16]	; (8004880 <__NVIC_GetPriorityGrouping+0x18>)
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	0a1b      	lsrs	r3, r3, #8
 8004872:	f003 0307 	and.w	r3, r3, #7
}
 8004876:	4618      	mov	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	e000ed00 	.word	0xe000ed00

08004884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	4603      	mov	r3, r0
 800488c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800488e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004892:	2b00      	cmp	r3, #0
 8004894:	db0b      	blt.n	80048ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004896:	79fb      	ldrb	r3, [r7, #7]
 8004898:	f003 021f 	and.w	r2, r3, #31
 800489c:	4907      	ldr	r1, [pc, #28]	; (80048bc <__NVIC_EnableIRQ+0x38>)
 800489e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	2001      	movs	r0, #1
 80048a6:	fa00 f202 	lsl.w	r2, r0, r2
 80048aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	e000e100 	.word	0xe000e100

080048c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4603      	mov	r3, r0
 80048c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	db12      	blt.n	80048f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048d2:	79fb      	ldrb	r3, [r7, #7]
 80048d4:	f003 021f 	and.w	r2, r3, #31
 80048d8:	490a      	ldr	r1, [pc, #40]	; (8004904 <__NVIC_DisableIRQ+0x44>)
 80048da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048de:	095b      	lsrs	r3, r3, #5
 80048e0:	2001      	movs	r0, #1
 80048e2:	fa00 f202 	lsl.w	r2, r0, r2
 80048e6:	3320      	adds	r3, #32
 80048e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80048ec:	f3bf 8f4f 	dsb	sy
}
 80048f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80048f2:	f3bf 8f6f 	isb	sy
}
 80048f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	e000e100 	.word	0xe000e100

08004908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	6039      	str	r1, [r7, #0]
 8004912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004918:	2b00      	cmp	r3, #0
 800491a:	db0a      	blt.n	8004932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	b2da      	uxtb	r2, r3
 8004920:	490c      	ldr	r1, [pc, #48]	; (8004954 <__NVIC_SetPriority+0x4c>)
 8004922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004926:	0112      	lsls	r2, r2, #4
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	440b      	add	r3, r1
 800492c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004930:	e00a      	b.n	8004948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	4908      	ldr	r1, [pc, #32]	; (8004958 <__NVIC_SetPriority+0x50>)
 8004938:	79fb      	ldrb	r3, [r7, #7]
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	3b04      	subs	r3, #4
 8004940:	0112      	lsls	r2, r2, #4
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	440b      	add	r3, r1
 8004946:	761a      	strb	r2, [r3, #24]
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	e000e100 	.word	0xe000e100
 8004958:	e000ed00 	.word	0xe000ed00

0800495c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800495c:	b480      	push	{r7}
 800495e:	b089      	sub	sp, #36	; 0x24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f1c3 0307 	rsb	r3, r3, #7
 8004976:	2b04      	cmp	r3, #4
 8004978:	bf28      	it	cs
 800497a:	2304      	movcs	r3, #4
 800497c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	3304      	adds	r3, #4
 8004982:	2b06      	cmp	r3, #6
 8004984:	d902      	bls.n	800498c <NVIC_EncodePriority+0x30>
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	3b03      	subs	r3, #3
 800498a:	e000      	b.n	800498e <NVIC_EncodePriority+0x32>
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004990:	f04f 32ff 	mov.w	r2, #4294967295
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	43da      	mvns	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	401a      	ands	r2, r3
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049a4:	f04f 31ff 	mov.w	r1, #4294967295
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	fa01 f303 	lsl.w	r3, r1, r3
 80049ae:	43d9      	mvns	r1, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049b4:	4313      	orrs	r3, r2
         );
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3724      	adds	r7, #36	; 0x24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049d4:	d301      	bcc.n	80049da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049d6:	2301      	movs	r3, #1
 80049d8:	e00f      	b.n	80049fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049da:	4a0a      	ldr	r2, [pc, #40]	; (8004a04 <SysTick_Config+0x40>)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3b01      	subs	r3, #1
 80049e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049e2:	210f      	movs	r1, #15
 80049e4:	f04f 30ff 	mov.w	r0, #4294967295
 80049e8:	f7ff ff8e 	bl	8004908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049ec:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <SysTick_Config+0x40>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049f2:	4b04      	ldr	r3, [pc, #16]	; (8004a04 <SysTick_Config+0x40>)
 80049f4:	2207      	movs	r2, #7
 80049f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	e000e010 	.word	0xe000e010

08004a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff ff05 	bl	8004820 <__NVIC_SetPriorityGrouping>
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b086      	sub	sp, #24
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	4603      	mov	r3, r0
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	607a      	str	r2, [r7, #4]
 8004a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a30:	f7ff ff1a 	bl	8004868 <__NVIC_GetPriorityGrouping>
 8004a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	68b9      	ldr	r1, [r7, #8]
 8004a3a:	6978      	ldr	r0, [r7, #20]
 8004a3c:	f7ff ff8e 	bl	800495c <NVIC_EncodePriority>
 8004a40:	4602      	mov	r2, r0
 8004a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a46:	4611      	mov	r1, r2
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff ff5d 	bl	8004908 <__NVIC_SetPriority>
}
 8004a4e:	bf00      	nop
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b082      	sub	sp, #8
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7ff ff0d 	bl	8004884 <__NVIC_EnableIRQ>
}
 8004a6a:	bf00      	nop
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b082      	sub	sp, #8
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	4603      	mov	r3, r0
 8004a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7ff ff1d 	bl	80048c0 <__NVIC_DisableIRQ>
}
 8004a86:	bf00      	nop
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b082      	sub	sp, #8
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff ff94 	bl	80049c4 <SysTick_Config>
 8004a9c:	4603      	mov	r3, r0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ab4:	f7ff fab6 	bl	8004024 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e099      	b.n	8004bf8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0201 	bic.w	r2, r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ae4:	e00f      	b.n	8004b06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ae6:	f7ff fa9d 	bl	8004024 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b05      	cmp	r3, #5
 8004af2:	d908      	bls.n	8004b06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2220      	movs	r2, #32
 8004af8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2203      	movs	r2, #3
 8004afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e078      	b.n	8004bf8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e8      	bne.n	8004ae6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	4b38      	ldr	r3, [pc, #224]	; (8004c00 <HAL_DMA_Init+0x158>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d107      	bne.n	8004b70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f023 0307 	bic.w	r3, r3, #7
 8004b86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d117      	bne.n	8004bca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00e      	beq.n	8004bca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fb5f 	bl	8005270 <DMA_CheckFifoParam>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d008      	beq.n	8004bca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2240      	movs	r2, #64	; 0x40
 8004bbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e016      	b.n	8004bf8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fb16 	bl	8005204 <DMA_CalcBaseAndBitshift>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be0:	223f      	movs	r2, #63	; 0x3f
 8004be2:	409a      	lsls	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	f010803f 	.word	0xf010803f

08004c04 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e050      	b.n	8004cb8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d101      	bne.n	8004c26 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004c22:	2302      	movs	r3, #2
 8004c24:	e048      	b.n	8004cb8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0201 	bic.w	r2, r2, #1
 8004c34:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2200      	movs	r2, #0
 8004c44:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2200      	movs	r2, #0
 8004c54:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2221      	movs	r2, #33	; 0x21
 8004c64:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 facc 	bl	8005204 <DMA_CalcBaseAndBitshift>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c98:	223f      	movs	r2, #63	; 0x3f
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d101      	bne.n	8004ce6 <HAL_DMA_Start_IT+0x26>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	e040      	b.n	8004d68 <HAL_DMA_Start_IT+0xa8>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d12f      	bne.n	8004d5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 fa4a 	bl	80051a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d18:	223f      	movs	r2, #63	; 0x3f
 8004d1a:	409a      	lsls	r2, r3
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0216 	orr.w	r2, r2, #22
 8004d2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0208 	orr.w	r2, r2, #8
 8004d46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	e005      	b.n	8004d66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d62:	2302      	movs	r3, #2
 8004d64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004d7e:	f7ff f951 	bl	8004024 <HAL_GetTick>
 8004d82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d008      	beq.n	8004da2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2280      	movs	r2, #128	; 0x80
 8004d94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e052      	b.n	8004e48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0216 	bic.w	r2, r2, #22
 8004db0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695a      	ldr	r2, [r3, #20]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d103      	bne.n	8004dd2 <HAL_DMA_Abort+0x62>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d007      	beq.n	8004de2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0208 	bic.w	r2, r2, #8
 8004de0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0201 	bic.w	r2, r2, #1
 8004df0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004df2:	e013      	b.n	8004e1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004df4:	f7ff f916 	bl	8004024 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b05      	cmp	r3, #5
 8004e00:	d90c      	bls.n	8004e1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2220      	movs	r2, #32
 8004e06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2203      	movs	r2, #3
 8004e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e015      	b.n	8004e48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1e4      	bne.n	8004df4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2e:	223f      	movs	r2, #63	; 0x3f
 8004e30:	409a      	lsls	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d004      	beq.n	8004e6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2280      	movs	r2, #128	; 0x80
 8004e68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e00c      	b.n	8004e88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2205      	movs	r2, #5
 8004e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0201 	bic.w	r2, r2, #1
 8004e84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ea0:	4b8e      	ldr	r3, [pc, #568]	; (80050dc <HAL_DMA_IRQHandler+0x248>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a8e      	ldr	r2, [pc, #568]	; (80050e0 <HAL_DMA_IRQHandler+0x24c>)
 8004ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eaa:	0a9b      	lsrs	r3, r3, #10
 8004eac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ebe:	2208      	movs	r2, #8
 8004ec0:	409a      	lsls	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d01a      	beq.n	8004f00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d013      	beq.n	8004f00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0204 	bic.w	r2, r2, #4
 8004ee6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eec:	2208      	movs	r2, #8
 8004eee:	409a      	lsls	r2, r3
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef8:	f043 0201 	orr.w	r2, r3, #1
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f04:	2201      	movs	r2, #1
 8004f06:	409a      	lsls	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d012      	beq.n	8004f36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00b      	beq.n	8004f36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f22:	2201      	movs	r2, #1
 8004f24:	409a      	lsls	r2, r3
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2e:	f043 0202 	orr.w	r2, r3, #2
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f3a:	2204      	movs	r2, #4
 8004f3c:	409a      	lsls	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4013      	ands	r3, r2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d012      	beq.n	8004f6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00b      	beq.n	8004f6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f58:	2204      	movs	r2, #4
 8004f5a:	409a      	lsls	r2, r3
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f64:	f043 0204 	orr.w	r2, r3, #4
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f70:	2210      	movs	r2, #16
 8004f72:	409a      	lsls	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4013      	ands	r3, r2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d043      	beq.n	8005004 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d03c      	beq.n	8005004 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8e:	2210      	movs	r2, #16
 8004f90:	409a      	lsls	r2, r3
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d018      	beq.n	8004fd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d108      	bne.n	8004fc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d024      	beq.n	8005004 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	4798      	blx	r3
 8004fc2:	e01f      	b.n	8005004 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01b      	beq.n	8005004 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	4798      	blx	r3
 8004fd4:	e016      	b.n	8005004 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d107      	bne.n	8004ff4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0208 	bic.w	r2, r2, #8
 8004ff2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005008:	2220      	movs	r2, #32
 800500a:	409a      	lsls	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4013      	ands	r3, r2
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 808f 	beq.w	8005134 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0310 	and.w	r3, r3, #16
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 8087 	beq.w	8005134 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800502a:	2220      	movs	r2, #32
 800502c:	409a      	lsls	r2, r3
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b05      	cmp	r3, #5
 800503c:	d136      	bne.n	80050ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0216 	bic.w	r2, r2, #22
 800504c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695a      	ldr	r2, [r3, #20]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800505c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d103      	bne.n	800506e <HAL_DMA_IRQHandler+0x1da>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800506a:	2b00      	cmp	r3, #0
 800506c:	d007      	beq.n	800507e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0208 	bic.w	r2, r2, #8
 800507c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005082:	223f      	movs	r2, #63	; 0x3f
 8005084:	409a      	lsls	r2, r3
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d07e      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	4798      	blx	r3
        }
        return;
 80050aa:	e079      	b.n	80051a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d01d      	beq.n	80050f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10d      	bne.n	80050e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d031      	beq.n	8005134 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	4798      	blx	r3
 80050d8:	e02c      	b.n	8005134 <HAL_DMA_IRQHandler+0x2a0>
 80050da:	bf00      	nop
 80050dc:	200000f4 	.word	0x200000f4
 80050e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d023      	beq.n	8005134 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	4798      	blx	r3
 80050f4:	e01e      	b.n	8005134 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10f      	bne.n	8005124 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0210 	bic.w	r2, r2, #16
 8005112:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005138:	2b00      	cmp	r3, #0
 800513a:	d032      	beq.n	80051a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d022      	beq.n	800518e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2205      	movs	r2, #5
 800514c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0201 	bic.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	3301      	adds	r3, #1
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	429a      	cmp	r2, r3
 800516a:	d307      	bcc.n	800517c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f2      	bne.n	8005160 <HAL_DMA_IRQHandler+0x2cc>
 800517a:	e000      	b.n	800517e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800517c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	4798      	blx	r3
 800519e:	e000      	b.n	80051a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80051a0:	bf00      	nop
    }
  }
}
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	2b40      	cmp	r3, #64	; 0x40
 80051d4:	d108      	bne.n	80051e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80051e6:	e007      	b.n	80051f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	60da      	str	r2, [r3, #12]
}
 80051f8:	bf00      	nop
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	b2db      	uxtb	r3, r3
 8005212:	3b10      	subs	r3, #16
 8005214:	4a14      	ldr	r2, [pc, #80]	; (8005268 <DMA_CalcBaseAndBitshift+0x64>)
 8005216:	fba2 2303 	umull	r2, r3, r2, r3
 800521a:	091b      	lsrs	r3, r3, #4
 800521c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800521e:	4a13      	ldr	r2, [pc, #76]	; (800526c <DMA_CalcBaseAndBitshift+0x68>)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b03      	cmp	r3, #3
 8005230:	d909      	bls.n	8005246 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800523a:	f023 0303 	bic.w	r3, r3, #3
 800523e:	1d1a      	adds	r2, r3, #4
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	659a      	str	r2, [r3, #88]	; 0x58
 8005244:	e007      	b.n	8005256 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800524e:	f023 0303 	bic.w	r3, r3, #3
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	aaaaaaab 	.word	0xaaaaaaab
 800526c:	0800cb44 	.word	0x0800cb44

08005270 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005280:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d11f      	bne.n	80052ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b03      	cmp	r3, #3
 800528e:	d856      	bhi.n	800533e <DMA_CheckFifoParam+0xce>
 8005290:	a201      	add	r2, pc, #4	; (adr r2, 8005298 <DMA_CheckFifoParam+0x28>)
 8005292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005296:	bf00      	nop
 8005298:	080052a9 	.word	0x080052a9
 800529c:	080052bb 	.word	0x080052bb
 80052a0:	080052a9 	.word	0x080052a9
 80052a4:	0800533f 	.word	0x0800533f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d046      	beq.n	8005342 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052b8:	e043      	b.n	8005342 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052c2:	d140      	bne.n	8005346 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052c8:	e03d      	b.n	8005346 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052d2:	d121      	bne.n	8005318 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d837      	bhi.n	800534a <DMA_CheckFifoParam+0xda>
 80052da:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <DMA_CheckFifoParam+0x70>)
 80052dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e0:	080052f1 	.word	0x080052f1
 80052e4:	080052f7 	.word	0x080052f7
 80052e8:	080052f1 	.word	0x080052f1
 80052ec:	08005309 	.word	0x08005309
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	73fb      	strb	r3, [r7, #15]
      break;
 80052f4:	e030      	b.n	8005358 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d025      	beq.n	800534e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005306:	e022      	b.n	800534e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005310:	d11f      	bne.n	8005352 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005316:	e01c      	b.n	8005352 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b02      	cmp	r3, #2
 800531c:	d903      	bls.n	8005326 <DMA_CheckFifoParam+0xb6>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2b03      	cmp	r3, #3
 8005322:	d003      	beq.n	800532c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005324:	e018      	b.n	8005358 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	73fb      	strb	r3, [r7, #15]
      break;
 800532a:	e015      	b.n	8005358 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00e      	beq.n	8005356 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	73fb      	strb	r3, [r7, #15]
      break;
 800533c:	e00b      	b.n	8005356 <DMA_CheckFifoParam+0xe6>
      break;
 800533e:	bf00      	nop
 8005340:	e00a      	b.n	8005358 <DMA_CheckFifoParam+0xe8>
      break;
 8005342:	bf00      	nop
 8005344:	e008      	b.n	8005358 <DMA_CheckFifoParam+0xe8>
      break;
 8005346:	bf00      	nop
 8005348:	e006      	b.n	8005358 <DMA_CheckFifoParam+0xe8>
      break;
 800534a:	bf00      	nop
 800534c:	e004      	b.n	8005358 <DMA_CheckFifoParam+0xe8>
      break;
 800534e:	bf00      	nop
 8005350:	e002      	b.n	8005358 <DMA_CheckFifoParam+0xe8>
      break;   
 8005352:	bf00      	nop
 8005354:	e000      	b.n	8005358 <DMA_CheckFifoParam+0xe8>
      break;
 8005356:	bf00      	nop
    }
  } 
  
  return status; 
 8005358:	7bfb      	ldrb	r3, [r7, #15]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop

08005368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005368:	b480      	push	{r7}
 800536a:	b089      	sub	sp, #36	; 0x24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005372:	2300      	movs	r3, #0
 8005374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005376:	2300      	movs	r3, #0
 8005378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800537a:	2300      	movs	r3, #0
 800537c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800537e:	2300      	movs	r3, #0
 8005380:	61fb      	str	r3, [r7, #28]
 8005382:	e159      	b.n	8005638 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005384:	2201      	movs	r2, #1
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	4013      	ands	r3, r2
 8005396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	429a      	cmp	r2, r3
 800539e:	f040 8148 	bne.w	8005632 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f003 0303 	and.w	r3, r3, #3
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d005      	beq.n	80053ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d130      	bne.n	800541c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	2203      	movs	r2, #3
 80053c6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ca:	43db      	mvns	r3, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4013      	ands	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	fa02 f303 	lsl.w	r3, r2, r3
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053f0:	2201      	movs	r2, #1
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	fa02 f303 	lsl.w	r3, r2, r3
 80053f8:	43db      	mvns	r3, r3
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	4013      	ands	r3, r2
 80053fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	091b      	lsrs	r3, r3, #4
 8005406:	f003 0201 	and.w	r2, r3, #1
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	fa02 f303 	lsl.w	r3, r2, r3
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	4313      	orrs	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f003 0303 	and.w	r3, r3, #3
 8005424:	2b03      	cmp	r3, #3
 8005426:	d017      	beq.n	8005458 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	2203      	movs	r2, #3
 8005434:	fa02 f303 	lsl.w	r3, r2, r3
 8005438:	43db      	mvns	r3, r3
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	4013      	ands	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	fa02 f303 	lsl.w	r3, r2, r3
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	4313      	orrs	r3, r2
 8005450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d123      	bne.n	80054ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	08da      	lsrs	r2, r3, #3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3208      	adds	r2, #8
 800546c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	220f      	movs	r2, #15
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	43db      	mvns	r3, r3
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	4013      	ands	r3, r2
 8005486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	691a      	ldr	r2, [r3, #16]
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	fa02 f303 	lsl.w	r3, r2, r3
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	4313      	orrs	r3, r2
 800549c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	08da      	lsrs	r2, r3, #3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3208      	adds	r2, #8
 80054a6:	69b9      	ldr	r1, [r7, #24]
 80054a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	2203      	movs	r2, #3
 80054b8:	fa02 f303 	lsl.w	r3, r2, r3
 80054bc:	43db      	mvns	r3, r3
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	4013      	ands	r3, r2
 80054c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f003 0203 	and.w	r2, r3, #3
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	fa02 f303 	lsl.w	r3, r2, r3
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 80a2 	beq.w	8005632 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	4b57      	ldr	r3, [pc, #348]	; (8005650 <HAL_GPIO_Init+0x2e8>)
 80054f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f6:	4a56      	ldr	r2, [pc, #344]	; (8005650 <HAL_GPIO_Init+0x2e8>)
 80054f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054fc:	6453      	str	r3, [r2, #68]	; 0x44
 80054fe:	4b54      	ldr	r3, [pc, #336]	; (8005650 <HAL_GPIO_Init+0x2e8>)
 8005500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800550a:	4a52      	ldr	r2, [pc, #328]	; (8005654 <HAL_GPIO_Init+0x2ec>)
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	089b      	lsrs	r3, r3, #2
 8005510:	3302      	adds	r3, #2
 8005512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	220f      	movs	r2, #15
 8005522:	fa02 f303 	lsl.w	r3, r2, r3
 8005526:	43db      	mvns	r3, r3
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	4013      	ands	r3, r2
 800552c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a49      	ldr	r2, [pc, #292]	; (8005658 <HAL_GPIO_Init+0x2f0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d019      	beq.n	800556a <HAL_GPIO_Init+0x202>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a48      	ldr	r2, [pc, #288]	; (800565c <HAL_GPIO_Init+0x2f4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d013      	beq.n	8005566 <HAL_GPIO_Init+0x1fe>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a47      	ldr	r2, [pc, #284]	; (8005660 <HAL_GPIO_Init+0x2f8>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00d      	beq.n	8005562 <HAL_GPIO_Init+0x1fa>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a46      	ldr	r2, [pc, #280]	; (8005664 <HAL_GPIO_Init+0x2fc>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d007      	beq.n	800555e <HAL_GPIO_Init+0x1f6>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a45      	ldr	r2, [pc, #276]	; (8005668 <HAL_GPIO_Init+0x300>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d101      	bne.n	800555a <HAL_GPIO_Init+0x1f2>
 8005556:	2304      	movs	r3, #4
 8005558:	e008      	b.n	800556c <HAL_GPIO_Init+0x204>
 800555a:	2307      	movs	r3, #7
 800555c:	e006      	b.n	800556c <HAL_GPIO_Init+0x204>
 800555e:	2303      	movs	r3, #3
 8005560:	e004      	b.n	800556c <HAL_GPIO_Init+0x204>
 8005562:	2302      	movs	r3, #2
 8005564:	e002      	b.n	800556c <HAL_GPIO_Init+0x204>
 8005566:	2301      	movs	r3, #1
 8005568:	e000      	b.n	800556c <HAL_GPIO_Init+0x204>
 800556a:	2300      	movs	r3, #0
 800556c:	69fa      	ldr	r2, [r7, #28]
 800556e:	f002 0203 	and.w	r2, r2, #3
 8005572:	0092      	lsls	r2, r2, #2
 8005574:	4093      	lsls	r3, r2
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	4313      	orrs	r3, r2
 800557a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800557c:	4935      	ldr	r1, [pc, #212]	; (8005654 <HAL_GPIO_Init+0x2ec>)
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	089b      	lsrs	r3, r3, #2
 8005582:	3302      	adds	r3, #2
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800558a:	4b38      	ldr	r3, [pc, #224]	; (800566c <HAL_GPIO_Init+0x304>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	43db      	mvns	r3, r3
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	4013      	ands	r3, r2
 8005598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055ae:	4a2f      	ldr	r2, [pc, #188]	; (800566c <HAL_GPIO_Init+0x304>)
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055b4:	4b2d      	ldr	r3, [pc, #180]	; (800566c <HAL_GPIO_Init+0x304>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	43db      	mvns	r3, r3
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	4013      	ands	r3, r2
 80055c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055d8:	4a24      	ldr	r2, [pc, #144]	; (800566c <HAL_GPIO_Init+0x304>)
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80055de:	4b23      	ldr	r3, [pc, #140]	; (800566c <HAL_GPIO_Init+0x304>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	43db      	mvns	r3, r3
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	4013      	ands	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005602:	4a1a      	ldr	r2, [pc, #104]	; (800566c <HAL_GPIO_Init+0x304>)
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005608:	4b18      	ldr	r3, [pc, #96]	; (800566c <HAL_GPIO_Init+0x304>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	43db      	mvns	r3, r3
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	4013      	ands	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800562c:	4a0f      	ldr	r2, [pc, #60]	; (800566c <HAL_GPIO_Init+0x304>)
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	3301      	adds	r3, #1
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	2b0f      	cmp	r3, #15
 800563c:	f67f aea2 	bls.w	8005384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005640:	bf00      	nop
 8005642:	bf00      	nop
 8005644:	3724      	adds	r7, #36	; 0x24
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40023800 	.word	0x40023800
 8005654:	40013800 	.word	0x40013800
 8005658:	40020000 	.word	0x40020000
 800565c:	40020400 	.word	0x40020400
 8005660:	40020800 	.word	0x40020800
 8005664:	40020c00 	.word	0x40020c00
 8005668:	40021000 	.word	0x40021000
 800566c:	40013c00 	.word	0x40013c00

08005670 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800567a:	2300      	movs	r3, #0
 800567c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005682:	2300      	movs	r3, #0
 8005684:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005686:	2300      	movs	r3, #0
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	e0bb      	b.n	8005804 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800568c:	2201      	movs	r2, #1
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	4013      	ands	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	f040 80ab 	bne.w	80057fe <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80056a8:	4a5c      	ldr	r2, [pc, #368]	; (800581c <HAL_GPIO_DeInit+0x1ac>)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	089b      	lsrs	r3, r3, #2
 80056ae:	3302      	adds	r3, #2
 80056b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f003 0303 	and.w	r3, r3, #3
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	220f      	movs	r2, #15
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	4013      	ands	r3, r2
 80056c8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a54      	ldr	r2, [pc, #336]	; (8005820 <HAL_GPIO_DeInit+0x1b0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d019      	beq.n	8005706 <HAL_GPIO_DeInit+0x96>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a53      	ldr	r2, [pc, #332]	; (8005824 <HAL_GPIO_DeInit+0x1b4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d013      	beq.n	8005702 <HAL_GPIO_DeInit+0x92>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a52      	ldr	r2, [pc, #328]	; (8005828 <HAL_GPIO_DeInit+0x1b8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00d      	beq.n	80056fe <HAL_GPIO_DeInit+0x8e>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a51      	ldr	r2, [pc, #324]	; (800582c <HAL_GPIO_DeInit+0x1bc>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d007      	beq.n	80056fa <HAL_GPIO_DeInit+0x8a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a50      	ldr	r2, [pc, #320]	; (8005830 <HAL_GPIO_DeInit+0x1c0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d101      	bne.n	80056f6 <HAL_GPIO_DeInit+0x86>
 80056f2:	2304      	movs	r3, #4
 80056f4:	e008      	b.n	8005708 <HAL_GPIO_DeInit+0x98>
 80056f6:	2307      	movs	r3, #7
 80056f8:	e006      	b.n	8005708 <HAL_GPIO_DeInit+0x98>
 80056fa:	2303      	movs	r3, #3
 80056fc:	e004      	b.n	8005708 <HAL_GPIO_DeInit+0x98>
 80056fe:	2302      	movs	r3, #2
 8005700:	e002      	b.n	8005708 <HAL_GPIO_DeInit+0x98>
 8005702:	2301      	movs	r3, #1
 8005704:	e000      	b.n	8005708 <HAL_GPIO_DeInit+0x98>
 8005706:	2300      	movs	r3, #0
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	f002 0203 	and.w	r2, r2, #3
 800570e:	0092      	lsls	r2, r2, #2
 8005710:	4093      	lsls	r3, r2
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	429a      	cmp	r2, r3
 8005716:	d132      	bne.n	800577e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005718:	4b46      	ldr	r3, [pc, #280]	; (8005834 <HAL_GPIO_DeInit+0x1c4>)
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	43db      	mvns	r3, r3
 8005720:	4944      	ldr	r1, [pc, #272]	; (8005834 <HAL_GPIO_DeInit+0x1c4>)
 8005722:	4013      	ands	r3, r2
 8005724:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005726:	4b43      	ldr	r3, [pc, #268]	; (8005834 <HAL_GPIO_DeInit+0x1c4>)
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	43db      	mvns	r3, r3
 800572e:	4941      	ldr	r1, [pc, #260]	; (8005834 <HAL_GPIO_DeInit+0x1c4>)
 8005730:	4013      	ands	r3, r2
 8005732:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005734:	4b3f      	ldr	r3, [pc, #252]	; (8005834 <HAL_GPIO_DeInit+0x1c4>)
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	43db      	mvns	r3, r3
 800573c:	493d      	ldr	r1, [pc, #244]	; (8005834 <HAL_GPIO_DeInit+0x1c4>)
 800573e:	4013      	ands	r3, r2
 8005740:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005742:	4b3c      	ldr	r3, [pc, #240]	; (8005834 <HAL_GPIO_DeInit+0x1c4>)
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	43db      	mvns	r3, r3
 800574a:	493a      	ldr	r1, [pc, #232]	; (8005834 <HAL_GPIO_DeInit+0x1c4>)
 800574c:	4013      	ands	r3, r2
 800574e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	220f      	movs	r2, #15
 800575a:	fa02 f303 	lsl.w	r3, r2, r3
 800575e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005760:	4a2e      	ldr	r2, [pc, #184]	; (800581c <HAL_GPIO_DeInit+0x1ac>)
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	089b      	lsrs	r3, r3, #2
 8005766:	3302      	adds	r3, #2
 8005768:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	43da      	mvns	r2, r3
 8005770:	482a      	ldr	r0, [pc, #168]	; (800581c <HAL_GPIO_DeInit+0x1ac>)
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	089b      	lsrs	r3, r3, #2
 8005776:	400a      	ands	r2, r1
 8005778:	3302      	adds	r3, #2
 800577a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	2103      	movs	r1, #3
 8005788:	fa01 f303 	lsl.w	r3, r1, r3
 800578c:	43db      	mvns	r3, r3
 800578e:	401a      	ands	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	08da      	lsrs	r2, r3, #3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3208      	adds	r2, #8
 800579c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	220f      	movs	r2, #15
 80057aa:	fa02 f303 	lsl.w	r3, r2, r3
 80057ae:	43db      	mvns	r3, r3
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	08d2      	lsrs	r2, r2, #3
 80057b4:	4019      	ands	r1, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3208      	adds	r2, #8
 80057ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	2103      	movs	r1, #3
 80057c8:	fa01 f303 	lsl.w	r3, r1, r3
 80057cc:	43db      	mvns	r3, r3
 80057ce:	401a      	ands	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	2101      	movs	r1, #1
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	fa01 f303 	lsl.w	r3, r1, r3
 80057e0:	43db      	mvns	r3, r3
 80057e2:	401a      	ands	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	2103      	movs	r1, #3
 80057f2:	fa01 f303 	lsl.w	r3, r1, r3
 80057f6:	43db      	mvns	r3, r3
 80057f8:	401a      	ands	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	3301      	adds	r3, #1
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2b0f      	cmp	r3, #15
 8005808:	f67f af40 	bls.w	800568c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800580c:	bf00      	nop
 800580e:	bf00      	nop
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	40013800 	.word	0x40013800
 8005820:	40020000 	.word	0x40020000
 8005824:	40020400 	.word	0x40020400
 8005828:	40020800 	.word	0x40020800
 800582c:	40020c00 	.word	0x40020c00
 8005830:	40021000 	.word	0x40021000
 8005834:	40013c00 	.word	0x40013c00

08005838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	460b      	mov	r3, r1
 8005842:	807b      	strh	r3, [r7, #2]
 8005844:	4613      	mov	r3, r2
 8005846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005848:	787b      	ldrb	r3, [r7, #1]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800584e:	887a      	ldrh	r2, [r7, #2]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005854:	e003      	b.n	800585e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005856:	887b      	ldrh	r3, [r7, #2]
 8005858:	041a      	lsls	r2, r3, #16
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	619a      	str	r2, [r3, #24]
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e267      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d075      	beq.n	8005976 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800588a:	4b88      	ldr	r3, [pc, #544]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 030c 	and.w	r3, r3, #12
 8005892:	2b04      	cmp	r3, #4
 8005894:	d00c      	beq.n	80058b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005896:	4b85      	ldr	r3, [pc, #532]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800589e:	2b08      	cmp	r3, #8
 80058a0:	d112      	bne.n	80058c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058a2:	4b82      	ldr	r3, [pc, #520]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058ae:	d10b      	bne.n	80058c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b0:	4b7e      	ldr	r3, [pc, #504]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d05b      	beq.n	8005974 <HAL_RCC_OscConfig+0x108>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d157      	bne.n	8005974 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e242      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d0:	d106      	bne.n	80058e0 <HAL_RCC_OscConfig+0x74>
 80058d2:	4b76      	ldr	r3, [pc, #472]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a75      	ldr	r2, [pc, #468]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80058d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058dc:	6013      	str	r3, [r2, #0]
 80058de:	e01d      	b.n	800591c <HAL_RCC_OscConfig+0xb0>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058e8:	d10c      	bne.n	8005904 <HAL_RCC_OscConfig+0x98>
 80058ea:	4b70      	ldr	r3, [pc, #448]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a6f      	ldr	r2, [pc, #444]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80058f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	4b6d      	ldr	r3, [pc, #436]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a6c      	ldr	r2, [pc, #432]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80058fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	e00b      	b.n	800591c <HAL_RCC_OscConfig+0xb0>
 8005904:	4b69      	ldr	r3, [pc, #420]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a68      	ldr	r2, [pc, #416]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 800590a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	4b66      	ldr	r3, [pc, #408]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a65      	ldr	r2, [pc, #404]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800591a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d013      	beq.n	800594c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005924:	f7fe fb7e 	bl	8004024 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800592c:	f7fe fb7a 	bl	8004024 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b64      	cmp	r3, #100	; 0x64
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e207      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800593e:	4b5b      	ldr	r3, [pc, #364]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0f0      	beq.n	800592c <HAL_RCC_OscConfig+0xc0>
 800594a:	e014      	b.n	8005976 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800594c:	f7fe fb6a 	bl	8004024 <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005954:	f7fe fb66 	bl	8004024 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b64      	cmp	r3, #100	; 0x64
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e1f3      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005966:	4b51      	ldr	r3, [pc, #324]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1f0      	bne.n	8005954 <HAL_RCC_OscConfig+0xe8>
 8005972:	e000      	b.n	8005976 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d063      	beq.n	8005a4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005982:	4b4a      	ldr	r3, [pc, #296]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 030c 	and.w	r3, r3, #12
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00b      	beq.n	80059a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800598e:	4b47      	ldr	r3, [pc, #284]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005996:	2b08      	cmp	r3, #8
 8005998:	d11c      	bne.n	80059d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800599a:	4b44      	ldr	r3, [pc, #272]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d116      	bne.n	80059d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059a6:	4b41      	ldr	r3, [pc, #260]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <HAL_RCC_OscConfig+0x152>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d001      	beq.n	80059be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e1c7      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059be:	4b3b      	ldr	r3, [pc, #236]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	4937      	ldr	r1, [pc, #220]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059d2:	e03a      	b.n	8005a4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d020      	beq.n	8005a1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059dc:	4b34      	ldr	r3, [pc, #208]	; (8005ab0 <HAL_RCC_OscConfig+0x244>)
 80059de:	2201      	movs	r2, #1
 80059e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e2:	f7fe fb1f 	bl	8004024 <HAL_GetTick>
 80059e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059e8:	e008      	b.n	80059fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059ea:	f7fe fb1b 	bl	8004024 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e1a8      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059fc:	4b2b      	ldr	r3, [pc, #172]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d0f0      	beq.n	80059ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a08:	4b28      	ldr	r3, [pc, #160]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	4925      	ldr	r1, [pc, #148]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	600b      	str	r3, [r1, #0]
 8005a1c:	e015      	b.n	8005a4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a1e:	4b24      	ldr	r3, [pc, #144]	; (8005ab0 <HAL_RCC_OscConfig+0x244>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a24:	f7fe fafe 	bl	8004024 <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a2c:	f7fe fafa 	bl	8004024 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e187      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a3e:	4b1b      	ldr	r3, [pc, #108]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1f0      	bne.n	8005a2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0308 	and.w	r3, r3, #8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d036      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d016      	beq.n	8005a8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a5e:	4b15      	ldr	r3, [pc, #84]	; (8005ab4 <HAL_RCC_OscConfig+0x248>)
 8005a60:	2201      	movs	r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a64:	f7fe fade 	bl	8004024 <HAL_GetTick>
 8005a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a6c:	f7fe fada 	bl	8004024 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e167      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a7e:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0f0      	beq.n	8005a6c <HAL_RCC_OscConfig+0x200>
 8005a8a:	e01b      	b.n	8005ac4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a8c:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <HAL_RCC_OscConfig+0x248>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a92:	f7fe fac7 	bl	8004024 <HAL_GetTick>
 8005a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a98:	e00e      	b.n	8005ab8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a9a:	f7fe fac3 	bl	8004024 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d907      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e150      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	42470000 	.word	0x42470000
 8005ab4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ab8:	4b88      	ldr	r3, [pc, #544]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1ea      	bne.n	8005a9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 8097 	beq.w	8005c00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ad6:	4b81      	ldr	r3, [pc, #516]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10f      	bne.n	8005b02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60bb      	str	r3, [r7, #8]
 8005ae6:	4b7d      	ldr	r3, [pc, #500]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	4a7c      	ldr	r2, [pc, #496]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af0:	6413      	str	r3, [r2, #64]	; 0x40
 8005af2:	4b7a      	ldr	r3, [pc, #488]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005afa:	60bb      	str	r3, [r7, #8]
 8005afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005afe:	2301      	movs	r3, #1
 8005b00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b02:	4b77      	ldr	r3, [pc, #476]	; (8005ce0 <HAL_RCC_OscConfig+0x474>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d118      	bne.n	8005b40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b0e:	4b74      	ldr	r3, [pc, #464]	; (8005ce0 <HAL_RCC_OscConfig+0x474>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a73      	ldr	r2, [pc, #460]	; (8005ce0 <HAL_RCC_OscConfig+0x474>)
 8005b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b1a:	f7fe fa83 	bl	8004024 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b22:	f7fe fa7f 	bl	8004024 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e10c      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b34:	4b6a      	ldr	r3, [pc, #424]	; (8005ce0 <HAL_RCC_OscConfig+0x474>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0f0      	beq.n	8005b22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d106      	bne.n	8005b56 <HAL_RCC_OscConfig+0x2ea>
 8005b48:	4b64      	ldr	r3, [pc, #400]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4c:	4a63      	ldr	r2, [pc, #396]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b4e:	f043 0301 	orr.w	r3, r3, #1
 8005b52:	6713      	str	r3, [r2, #112]	; 0x70
 8005b54:	e01c      	b.n	8005b90 <HAL_RCC_OscConfig+0x324>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	2b05      	cmp	r3, #5
 8005b5c:	d10c      	bne.n	8005b78 <HAL_RCC_OscConfig+0x30c>
 8005b5e:	4b5f      	ldr	r3, [pc, #380]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b62:	4a5e      	ldr	r2, [pc, #376]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b64:	f043 0304 	orr.w	r3, r3, #4
 8005b68:	6713      	str	r3, [r2, #112]	; 0x70
 8005b6a:	4b5c      	ldr	r3, [pc, #368]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6e:	4a5b      	ldr	r2, [pc, #364]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b70:	f043 0301 	orr.w	r3, r3, #1
 8005b74:	6713      	str	r3, [r2, #112]	; 0x70
 8005b76:	e00b      	b.n	8005b90 <HAL_RCC_OscConfig+0x324>
 8005b78:	4b58      	ldr	r3, [pc, #352]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7c:	4a57      	ldr	r2, [pc, #348]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b7e:	f023 0301 	bic.w	r3, r3, #1
 8005b82:	6713      	str	r3, [r2, #112]	; 0x70
 8005b84:	4b55      	ldr	r3, [pc, #340]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b88:	4a54      	ldr	r2, [pc, #336]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b8a:	f023 0304 	bic.w	r3, r3, #4
 8005b8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d015      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b98:	f7fe fa44 	bl	8004024 <HAL_GetTick>
 8005b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b9e:	e00a      	b.n	8005bb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ba0:	f7fe fa40 	bl	8004024 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e0cb      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bb6:	4b49      	ldr	r3, [pc, #292]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0ee      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x334>
 8005bc2:	e014      	b.n	8005bee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bc4:	f7fe fa2e 	bl	8004024 <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bca:	e00a      	b.n	8005be2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bcc:	f7fe fa2a 	bl	8004024 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e0b5      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005be2:	4b3e      	ldr	r3, [pc, #248]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1ee      	bne.n	8005bcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d105      	bne.n	8005c00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bf4:	4b39      	ldr	r3, [pc, #228]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	4a38      	ldr	r2, [pc, #224]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bfe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 80a1 	beq.w	8005d4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c0a:	4b34      	ldr	r3, [pc, #208]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 030c 	and.w	r3, r3, #12
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d05c      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d141      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c1e:	4b31      	ldr	r3, [pc, #196]	; (8005ce4 <HAL_RCC_OscConfig+0x478>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c24:	f7fe f9fe 	bl	8004024 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c2c:	f7fe f9fa 	bl	8004024 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e087      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c3e:	4b27      	ldr	r3, [pc, #156]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1f0      	bne.n	8005c2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69da      	ldr	r2, [r3, #28]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	019b      	lsls	r3, r3, #6
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c60:	085b      	lsrs	r3, r3, #1
 8005c62:	3b01      	subs	r3, #1
 8005c64:	041b      	lsls	r3, r3, #16
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	061b      	lsls	r3, r3, #24
 8005c6e:	491b      	ldr	r1, [pc, #108]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c74:	4b1b      	ldr	r3, [pc, #108]	; (8005ce4 <HAL_RCC_OscConfig+0x478>)
 8005c76:	2201      	movs	r2, #1
 8005c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7a:	f7fe f9d3 	bl	8004024 <HAL_GetTick>
 8005c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c80:	e008      	b.n	8005c94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c82:	f7fe f9cf 	bl	8004024 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d901      	bls.n	8005c94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e05c      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c94:	4b11      	ldr	r3, [pc, #68]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0f0      	beq.n	8005c82 <HAL_RCC_OscConfig+0x416>
 8005ca0:	e054      	b.n	8005d4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca2:	4b10      	ldr	r3, [pc, #64]	; (8005ce4 <HAL_RCC_OscConfig+0x478>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca8:	f7fe f9bc 	bl	8004024 <HAL_GetTick>
 8005cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cb0:	f7fe f9b8 	bl	8004024 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e045      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cc2:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1f0      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x444>
 8005cce:	e03d      	b.n	8005d4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d107      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e038      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	40007000 	.word	0x40007000
 8005ce4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ce8:	4b1b      	ldr	r3, [pc, #108]	; (8005d58 <HAL_RCC_OscConfig+0x4ec>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d028      	beq.n	8005d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d121      	bne.n	8005d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d11a      	bne.n	8005d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d18:	4013      	ands	r3, r2
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d111      	bne.n	8005d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2e:	085b      	lsrs	r3, r3, #1
 8005d30:	3b01      	subs	r3, #1
 8005d32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d107      	bne.n	8005d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d001      	beq.n	8005d4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e000      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	40023800 	.word	0x40023800

08005d5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e0cc      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d70:	4b68      	ldr	r3, [pc, #416]	; (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0307 	and.w	r3, r3, #7
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d90c      	bls.n	8005d98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d7e:	4b65      	ldr	r3, [pc, #404]	; (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d86:	4b63      	ldr	r3, [pc, #396]	; (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d001      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e0b8      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d020      	beq.n	8005de6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005db0:	4b59      	ldr	r3, [pc, #356]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	4a58      	ldr	r2, [pc, #352]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005db6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0308 	and.w	r3, r3, #8
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d005      	beq.n	8005dd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dc8:	4b53      	ldr	r3, [pc, #332]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	4a52      	ldr	r2, [pc, #328]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005dd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dd4:	4b50      	ldr	r3, [pc, #320]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	494d      	ldr	r1, [pc, #308]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d044      	beq.n	8005e7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d107      	bne.n	8005e0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dfa:	4b47      	ldr	r3, [pc, #284]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d119      	bne.n	8005e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e07f      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d003      	beq.n	8005e1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d107      	bne.n	8005e2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e1a:	4b3f      	ldr	r3, [pc, #252]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d109      	bne.n	8005e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e06f      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e2a:	4b3b      	ldr	r3, [pc, #236]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e067      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e3a:	4b37      	ldr	r3, [pc, #220]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f023 0203 	bic.w	r2, r3, #3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	4934      	ldr	r1, [pc, #208]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e4c:	f7fe f8ea 	bl	8004024 <HAL_GetTick>
 8005e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e52:	e00a      	b.n	8005e6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e54:	f7fe f8e6 	bl	8004024 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e04f      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e6a:	4b2b      	ldr	r3, [pc, #172]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 020c 	and.w	r2, r3, #12
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d1eb      	bne.n	8005e54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e7c:	4b25      	ldr	r3, [pc, #148]	; (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0307 	and.w	r3, r3, #7
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d20c      	bcs.n	8005ea4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e8a:	4b22      	ldr	r3, [pc, #136]	; (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e92:	4b20      	ldr	r3, [pc, #128]	; (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d001      	beq.n	8005ea4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e032      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d008      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eb0:	4b19      	ldr	r3, [pc, #100]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	4916      	ldr	r1, [pc, #88]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0308 	and.w	r3, r3, #8
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d009      	beq.n	8005ee2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ece:	4b12      	ldr	r3, [pc, #72]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	490e      	ldr	r1, [pc, #56]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ee2:	f000 f821 	bl	8005f28 <HAL_RCC_GetSysClockFreq>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	4b0b      	ldr	r3, [pc, #44]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	091b      	lsrs	r3, r3, #4
 8005eee:	f003 030f 	and.w	r3, r3, #15
 8005ef2:	490a      	ldr	r1, [pc, #40]	; (8005f1c <HAL_RCC_ClockConfig+0x1c0>)
 8005ef4:	5ccb      	ldrb	r3, [r1, r3]
 8005ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8005efa:	4a09      	ldr	r2, [pc, #36]	; (8005f20 <HAL_RCC_ClockConfig+0x1c4>)
 8005efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005efe:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <HAL_RCC_ClockConfig+0x1c8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fe f84a 	bl	8003f9c <HAL_InitTick>

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	40023c00 	.word	0x40023c00
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	0800c92c 	.word	0x0800c92c
 8005f20:	200000f4 	.word	0x200000f4
 8005f24:	200000f8 	.word	0x200000f8

08005f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f2c:	b090      	sub	sp, #64	; 0x40
 8005f2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	637b      	str	r3, [r7, #52]	; 0x34
 8005f34:	2300      	movs	r3, #0
 8005f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f38:	2300      	movs	r3, #0
 8005f3a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f40:	4b59      	ldr	r3, [pc, #356]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f003 030c 	and.w	r3, r3, #12
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d00d      	beq.n	8005f68 <HAL_RCC_GetSysClockFreq+0x40>
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	f200 80a1 	bhi.w	8006094 <HAL_RCC_GetSysClockFreq+0x16c>
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <HAL_RCC_GetSysClockFreq+0x34>
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	d003      	beq.n	8005f62 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f5a:	e09b      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f5c:	4b53      	ldr	r3, [pc, #332]	; (80060ac <HAL_RCC_GetSysClockFreq+0x184>)
 8005f5e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005f60:	e09b      	b.n	800609a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f62:	4b53      	ldr	r3, [pc, #332]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005f66:	e098      	b.n	800609a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f68:	4b4f      	ldr	r3, [pc, #316]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f70:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f72:	4b4d      	ldr	r3, [pc, #308]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d028      	beq.n	8005fd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f7e:	4b4a      	ldr	r3, [pc, #296]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	099b      	lsrs	r3, r3, #6
 8005f84:	2200      	movs	r2, #0
 8005f86:	623b      	str	r3, [r7, #32]
 8005f88:	627a      	str	r2, [r7, #36]	; 0x24
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005f90:	2100      	movs	r1, #0
 8005f92:	4b47      	ldr	r3, [pc, #284]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f94:	fb03 f201 	mul.w	r2, r3, r1
 8005f98:	2300      	movs	r3, #0
 8005f9a:	fb00 f303 	mul.w	r3, r0, r3
 8005f9e:	4413      	add	r3, r2
 8005fa0:	4a43      	ldr	r2, [pc, #268]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005fa2:	fba0 1202 	umull	r1, r2, r0, r2
 8005fa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fa8:	460a      	mov	r2, r1
 8005faa:	62ba      	str	r2, [r7, #40]	; 0x28
 8005fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fae:	4413      	add	r3, r2
 8005fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	61bb      	str	r3, [r7, #24]
 8005fb8:	61fa      	str	r2, [r7, #28]
 8005fba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005fc2:	f7fa f90d 	bl	80001e0 <__aeabi_uldivmod>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4613      	mov	r3, r2
 8005fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fce:	e053      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fd0:	4b35      	ldr	r3, [pc, #212]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	099b      	lsrs	r3, r3, #6
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	613b      	str	r3, [r7, #16]
 8005fda:	617a      	str	r2, [r7, #20]
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005fe2:	f04f 0b00 	mov.w	fp, #0
 8005fe6:	4652      	mov	r2, sl
 8005fe8:	465b      	mov	r3, fp
 8005fea:	f04f 0000 	mov.w	r0, #0
 8005fee:	f04f 0100 	mov.w	r1, #0
 8005ff2:	0159      	lsls	r1, r3, #5
 8005ff4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ff8:	0150      	lsls	r0, r2, #5
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	ebb2 080a 	subs.w	r8, r2, sl
 8006002:	eb63 090b 	sbc.w	r9, r3, fp
 8006006:	f04f 0200 	mov.w	r2, #0
 800600a:	f04f 0300 	mov.w	r3, #0
 800600e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006012:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006016:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800601a:	ebb2 0408 	subs.w	r4, r2, r8
 800601e:	eb63 0509 	sbc.w	r5, r3, r9
 8006022:	f04f 0200 	mov.w	r2, #0
 8006026:	f04f 0300 	mov.w	r3, #0
 800602a:	00eb      	lsls	r3, r5, #3
 800602c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006030:	00e2      	lsls	r2, r4, #3
 8006032:	4614      	mov	r4, r2
 8006034:	461d      	mov	r5, r3
 8006036:	eb14 030a 	adds.w	r3, r4, sl
 800603a:	603b      	str	r3, [r7, #0]
 800603c:	eb45 030b 	adc.w	r3, r5, fp
 8006040:	607b      	str	r3, [r7, #4]
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	f04f 0300 	mov.w	r3, #0
 800604a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800604e:	4629      	mov	r1, r5
 8006050:	028b      	lsls	r3, r1, #10
 8006052:	4621      	mov	r1, r4
 8006054:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006058:	4621      	mov	r1, r4
 800605a:	028a      	lsls	r2, r1, #10
 800605c:	4610      	mov	r0, r2
 800605e:	4619      	mov	r1, r3
 8006060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006062:	2200      	movs	r2, #0
 8006064:	60bb      	str	r3, [r7, #8]
 8006066:	60fa      	str	r2, [r7, #12]
 8006068:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800606c:	f7fa f8b8 	bl	80001e0 <__aeabi_uldivmod>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4613      	mov	r3, r2
 8006076:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006078:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	0c1b      	lsrs	r3, r3, #16
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	3301      	adds	r3, #1
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006088:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006090:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006092:	e002      	b.n	800609a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006094:	4b05      	ldr	r3, [pc, #20]	; (80060ac <HAL_RCC_GetSysClockFreq+0x184>)
 8006096:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800609c:	4618      	mov	r0, r3
 800609e:	3740      	adds	r7, #64	; 0x40
 80060a0:	46bd      	mov	sp, r7
 80060a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060a6:	bf00      	nop
 80060a8:	40023800 	.word	0x40023800
 80060ac:	00f42400 	.word	0x00f42400
 80060b0:	017d7840 	.word	0x017d7840

080060b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060b8:	4b03      	ldr	r3, [pc, #12]	; (80060c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80060ba:	681b      	ldr	r3, [r3, #0]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	200000f4 	.word	0x200000f4

080060cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060d0:	f7ff fff0 	bl	80060b4 <HAL_RCC_GetHCLKFreq>
 80060d4:	4602      	mov	r2, r0
 80060d6:	4b05      	ldr	r3, [pc, #20]	; (80060ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	0a9b      	lsrs	r3, r3, #10
 80060dc:	f003 0307 	and.w	r3, r3, #7
 80060e0:	4903      	ldr	r1, [pc, #12]	; (80060f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060e2:	5ccb      	ldrb	r3, [r1, r3]
 80060e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	40023800 	.word	0x40023800
 80060f0:	0800c93c 	.word	0x0800c93c

080060f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060f8:	f7ff ffdc 	bl	80060b4 <HAL_RCC_GetHCLKFreq>
 80060fc:	4602      	mov	r2, r0
 80060fe:	4b05      	ldr	r3, [pc, #20]	; (8006114 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	0b5b      	lsrs	r3, r3, #13
 8006104:	f003 0307 	and.w	r3, r3, #7
 8006108:	4903      	ldr	r1, [pc, #12]	; (8006118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800610a:	5ccb      	ldrb	r3, [r1, r3]
 800610c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006110:	4618      	mov	r0, r3
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40023800 	.word	0x40023800
 8006118:	0800c93c 	.word	0x0800c93c

0800611c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e041      	b.n	80061b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d106      	bne.n	8006148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7fb fc8a 	bl	8001a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3304      	adds	r3, #4
 8006158:	4619      	mov	r1, r3
 800615a:	4610      	mov	r0, r2
 800615c:	f000 fe24 	bl	8006da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d001      	beq.n	80061d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e044      	b.n	800625e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0201 	orr.w	r2, r2, #1
 80061ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a1e      	ldr	r2, [pc, #120]	; (800626c <HAL_TIM_Base_Start_IT+0xb0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d018      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x6c>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fe:	d013      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x6c>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1a      	ldr	r2, [pc, #104]	; (8006270 <HAL_TIM_Base_Start_IT+0xb4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00e      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x6c>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a19      	ldr	r2, [pc, #100]	; (8006274 <HAL_TIM_Base_Start_IT+0xb8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d009      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x6c>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a17      	ldr	r2, [pc, #92]	; (8006278 <HAL_TIM_Base_Start_IT+0xbc>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x6c>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a16      	ldr	r2, [pc, #88]	; (800627c <HAL_TIM_Base_Start_IT+0xc0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d111      	bne.n	800624c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b06      	cmp	r3, #6
 8006238:	d010      	beq.n	800625c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f042 0201 	orr.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800624a:	e007      	b.n	800625c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0201 	orr.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40010000 	.word	0x40010000
 8006270:	40000400 	.word	0x40000400
 8006274:	40000800 	.word	0x40000800
 8006278:	40000c00 	.word	0x40000c00
 800627c:	40014000 	.word	0x40014000

08006280 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0201 	bic.w	r2, r2, #1
 8006296:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6a1a      	ldr	r2, [r3, #32]
 800629e:	f241 1311 	movw	r3, #4369	; 0x1111
 80062a2:	4013      	ands	r3, r2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10f      	bne.n	80062c8 <HAL_TIM_Base_Stop_IT+0x48>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6a1a      	ldr	r2, [r3, #32]
 80062ae:	f240 4344 	movw	r3, #1092	; 0x444
 80062b2:	4013      	ands	r3, r2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d107      	bne.n	80062c8 <HAL_TIM_Base_Stop_IT+0x48>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0201 	bic.w	r2, r2, #1
 80062c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e041      	b.n	8006374 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d106      	bne.n	800630a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f839 	bl	800637c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2202      	movs	r2, #2
 800630e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	3304      	adds	r3, #4
 800631a:	4619      	mov	r1, r3
 800631c:	4610      	mov	r0, r2
 800631e:	f000 fd43 	bl	8006da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d109      	bne.n	80063b4 <HAL_TIM_PWM_Start+0x24>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	bf14      	ite	ne
 80063ac:	2301      	movne	r3, #1
 80063ae:	2300      	moveq	r3, #0
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	e022      	b.n	80063fa <HAL_TIM_PWM_Start+0x6a>
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2b04      	cmp	r3, #4
 80063b8:	d109      	bne.n	80063ce <HAL_TIM_PWM_Start+0x3e>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	bf14      	ite	ne
 80063c6:	2301      	movne	r3, #1
 80063c8:	2300      	moveq	r3, #0
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	e015      	b.n	80063fa <HAL_TIM_PWM_Start+0x6a>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d109      	bne.n	80063e8 <HAL_TIM_PWM_Start+0x58>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b01      	cmp	r3, #1
 80063de:	bf14      	ite	ne
 80063e0:	2301      	movne	r3, #1
 80063e2:	2300      	moveq	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	e008      	b.n	80063fa <HAL_TIM_PWM_Start+0x6a>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	bf14      	ite	ne
 80063f4:	2301      	movne	r3, #1
 80063f6:	2300      	moveq	r3, #0
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e068      	b.n	80064d4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d104      	bne.n	8006412 <HAL_TIM_PWM_Start+0x82>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006410:	e013      	b.n	800643a <HAL_TIM_PWM_Start+0xaa>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b04      	cmp	r3, #4
 8006416:	d104      	bne.n	8006422 <HAL_TIM_PWM_Start+0x92>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006420:	e00b      	b.n	800643a <HAL_TIM_PWM_Start+0xaa>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b08      	cmp	r3, #8
 8006426:	d104      	bne.n	8006432 <HAL_TIM_PWM_Start+0xa2>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006430:	e003      	b.n	800643a <HAL_TIM_PWM_Start+0xaa>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2202      	movs	r2, #2
 8006436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2201      	movs	r2, #1
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	4618      	mov	r0, r3
 8006444:	f000 ff56 	bl	80072f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a23      	ldr	r2, [pc, #140]	; (80064dc <HAL_TIM_PWM_Start+0x14c>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d107      	bne.n	8006462 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006460:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a1d      	ldr	r2, [pc, #116]	; (80064dc <HAL_TIM_PWM_Start+0x14c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d018      	beq.n	800649e <HAL_TIM_PWM_Start+0x10e>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006474:	d013      	beq.n	800649e <HAL_TIM_PWM_Start+0x10e>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a19      	ldr	r2, [pc, #100]	; (80064e0 <HAL_TIM_PWM_Start+0x150>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00e      	beq.n	800649e <HAL_TIM_PWM_Start+0x10e>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a17      	ldr	r2, [pc, #92]	; (80064e4 <HAL_TIM_PWM_Start+0x154>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d009      	beq.n	800649e <HAL_TIM_PWM_Start+0x10e>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a16      	ldr	r2, [pc, #88]	; (80064e8 <HAL_TIM_PWM_Start+0x158>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d004      	beq.n	800649e <HAL_TIM_PWM_Start+0x10e>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a14      	ldr	r2, [pc, #80]	; (80064ec <HAL_TIM_PWM_Start+0x15c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d111      	bne.n	80064c2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f003 0307 	and.w	r3, r3, #7
 80064a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b06      	cmp	r3, #6
 80064ae:	d010      	beq.n	80064d2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f042 0201 	orr.w	r2, r2, #1
 80064be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c0:	e007      	b.n	80064d2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0201 	orr.w	r2, r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	40010000 	.word	0x40010000
 80064e0:	40000400 	.word	0x40000400
 80064e4:	40000800 	.word	0x40000800
 80064e8:	40000c00 	.word	0x40000c00
 80064ec:	40014000 	.word	0x40014000

080064f0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2200      	movs	r2, #0
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fef6 	bl	80072f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a29      	ldr	r2, [pc, #164]	; (80065b4 <HAL_TIM_PWM_Stop+0xc4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d117      	bne.n	8006542 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6a1a      	ldr	r2, [r3, #32]
 8006518:	f241 1311 	movw	r3, #4369	; 0x1111
 800651c:	4013      	ands	r3, r2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10f      	bne.n	8006542 <HAL_TIM_PWM_Stop+0x52>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6a1a      	ldr	r2, [r3, #32]
 8006528:	f240 4344 	movw	r3, #1092	; 0x444
 800652c:	4013      	ands	r3, r2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d107      	bne.n	8006542 <HAL_TIM_PWM_Stop+0x52>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006540:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6a1a      	ldr	r2, [r3, #32]
 8006548:	f241 1311 	movw	r3, #4369	; 0x1111
 800654c:	4013      	ands	r3, r2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10f      	bne.n	8006572 <HAL_TIM_PWM_Stop+0x82>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6a1a      	ldr	r2, [r3, #32]
 8006558:	f240 4344 	movw	r3, #1092	; 0x444
 800655c:	4013      	ands	r3, r2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d107      	bne.n	8006572 <HAL_TIM_PWM_Stop+0x82>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f022 0201 	bic.w	r2, r2, #1
 8006570:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d104      	bne.n	8006582 <HAL_TIM_PWM_Stop+0x92>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006580:	e013      	b.n	80065aa <HAL_TIM_PWM_Stop+0xba>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b04      	cmp	r3, #4
 8006586:	d104      	bne.n	8006592 <HAL_TIM_PWM_Stop+0xa2>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006590:	e00b      	b.n	80065aa <HAL_TIM_PWM_Stop+0xba>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b08      	cmp	r3, #8
 8006596:	d104      	bne.n	80065a2 <HAL_TIM_PWM_Stop+0xb2>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065a0:	e003      	b.n	80065aa <HAL_TIM_PWM_Stop+0xba>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	40010000 	.word	0x40010000

080065b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e097      	b.n	80066fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d106      	bne.n	80065e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7fb fa9f 	bl	8001b24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2202      	movs	r2, #2
 80065ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	6812      	ldr	r2, [r2, #0]
 80065f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065fc:	f023 0307 	bic.w	r3, r3, #7
 8006600:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	3304      	adds	r3, #4
 800660a:	4619      	mov	r1, r3
 800660c:	4610      	mov	r0, r2
 800660e:	f000 fbcb 	bl	8006da8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6a1b      	ldr	r3, [r3, #32]
 8006628:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	4313      	orrs	r3, r2
 8006632:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800663a:	f023 0303 	bic.w	r3, r3, #3
 800663e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	021b      	lsls	r3, r3, #8
 800664a:	4313      	orrs	r3, r2
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	4313      	orrs	r3, r2
 8006650:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006658:	f023 030c 	bic.w	r3, r3, #12
 800665c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006664:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006668:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	68da      	ldr	r2, [r3, #12]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	4313      	orrs	r3, r2
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	4313      	orrs	r3, r2
 800667a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	011a      	lsls	r2, r3, #4
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	031b      	lsls	r3, r3, #12
 8006688:	4313      	orrs	r3, r2
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	4313      	orrs	r3, r2
 800668e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006696:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800669e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	695b      	ldr	r3, [r3, #20]
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	4313      	orrs	r3, r2
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006714:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800671c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006724:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800672c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d110      	bne.n	8006756 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d102      	bne.n	8006740 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800673a:	7b7b      	ldrb	r3, [r7, #13]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d001      	beq.n	8006744 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e069      	b.n	8006818 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2202      	movs	r2, #2
 8006750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006754:	e031      	b.n	80067ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2b04      	cmp	r3, #4
 800675a:	d110      	bne.n	800677e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800675c:	7bbb      	ldrb	r3, [r7, #14]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d102      	bne.n	8006768 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006762:	7b3b      	ldrb	r3, [r7, #12]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d001      	beq.n	800676c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e055      	b.n	8006818 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2202      	movs	r2, #2
 8006770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800677c:	e01d      	b.n	80067ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800677e:	7bfb      	ldrb	r3, [r7, #15]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d108      	bne.n	8006796 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006784:	7bbb      	ldrb	r3, [r7, #14]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d105      	bne.n	8006796 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800678a:	7b7b      	ldrb	r3, [r7, #13]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d102      	bne.n	8006796 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006790:	7b3b      	ldrb	r3, [r7, #12]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d001      	beq.n	800679a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e03e      	b.n	8006818 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2202      	movs	r2, #2
 800679e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2202      	movs	r2, #2
 80067a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2202      	movs	r2, #2
 80067ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2202      	movs	r2, #2
 80067b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d003      	beq.n	80067c8 <HAL_TIM_Encoder_Start+0xc4>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d008      	beq.n	80067d8 <HAL_TIM_Encoder_Start+0xd4>
 80067c6:	e00f      	b.n	80067e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2201      	movs	r2, #1
 80067ce:	2100      	movs	r1, #0
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fd8f 	bl	80072f4 <TIM_CCxChannelCmd>
      break;
 80067d6:	e016      	b.n	8006806 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2201      	movs	r2, #1
 80067de:	2104      	movs	r1, #4
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 fd87 	bl	80072f4 <TIM_CCxChannelCmd>
      break;
 80067e6:	e00e      	b.n	8006806 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2201      	movs	r2, #1
 80067ee:	2100      	movs	r1, #0
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 fd7f 	bl	80072f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2201      	movs	r2, #1
 80067fc:	2104      	movs	r1, #4
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 fd78 	bl	80072f4 <TIM_CCxChannelCmd>
      break;
 8006804:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f042 0201 	orr.w	r2, r2, #1
 8006814:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b02      	cmp	r3, #2
 8006834:	d122      	bne.n	800687c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b02      	cmp	r3, #2
 8006842:	d11b      	bne.n	800687c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f06f 0202 	mvn.w	r2, #2
 800684c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	f003 0303 	and.w	r3, r3, #3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fa81 	bl	8006d6a <HAL_TIM_IC_CaptureCallback>
 8006868:	e005      	b.n	8006876 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fa73 	bl	8006d56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fa84 	bl	8006d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f003 0304 	and.w	r3, r3, #4
 8006886:	2b04      	cmp	r3, #4
 8006888:	d122      	bne.n	80068d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b04      	cmp	r3, #4
 8006896:	d11b      	bne.n	80068d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f06f 0204 	mvn.w	r2, #4
 80068a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2202      	movs	r2, #2
 80068a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fa57 	bl	8006d6a <HAL_TIM_IC_CaptureCallback>
 80068bc:	e005      	b.n	80068ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fa49 	bl	8006d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fa5a 	bl	8006d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	f003 0308 	and.w	r3, r3, #8
 80068da:	2b08      	cmp	r3, #8
 80068dc:	d122      	bne.n	8006924 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	f003 0308 	and.w	r3, r3, #8
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	d11b      	bne.n	8006924 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f06f 0208 	mvn.w	r2, #8
 80068f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2204      	movs	r2, #4
 80068fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fa2d 	bl	8006d6a <HAL_TIM_IC_CaptureCallback>
 8006910:	e005      	b.n	800691e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fa1f 	bl	8006d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fa30 	bl	8006d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	f003 0310 	and.w	r3, r3, #16
 800692e:	2b10      	cmp	r3, #16
 8006930:	d122      	bne.n	8006978 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f003 0310 	and.w	r3, r3, #16
 800693c:	2b10      	cmp	r3, #16
 800693e:	d11b      	bne.n	8006978 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f06f 0210 	mvn.w	r2, #16
 8006948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2208      	movs	r2, #8
 800694e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fa03 	bl	8006d6a <HAL_TIM_IC_CaptureCallback>
 8006964:	e005      	b.n	8006972 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f9f5 	bl	8006d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fa06 	bl	8006d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b01      	cmp	r3, #1
 8006984:	d10e      	bne.n	80069a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b01      	cmp	r3, #1
 8006992:	d107      	bne.n	80069a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f06f 0201 	mvn.w	r2, #1
 800699c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f9cf 	bl	8006d42 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ae:	2b80      	cmp	r3, #128	; 0x80
 80069b0:	d10e      	bne.n	80069d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069bc:	2b80      	cmp	r3, #128	; 0x80
 80069be:	d107      	bne.n	80069d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fd82 	bl	80074d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069da:	2b40      	cmp	r3, #64	; 0x40
 80069dc:	d10e      	bne.n	80069fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e8:	2b40      	cmp	r3, #64	; 0x40
 80069ea:	d107      	bne.n	80069fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f9cb 	bl	8006d92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	d10e      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f003 0320 	and.w	r3, r3, #32
 8006a14:	2b20      	cmp	r3, #32
 8006a16:	d107      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f06f 0220 	mvn.w	r2, #32
 8006a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fd4c 	bl	80074c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a28:	bf00      	nop
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d101      	bne.n	8006a4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e0ae      	b.n	8006bac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2b0c      	cmp	r3, #12
 8006a5a:	f200 809f 	bhi.w	8006b9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006a5e:	a201      	add	r2, pc, #4	; (adr r2, 8006a64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a64:	08006a99 	.word	0x08006a99
 8006a68:	08006b9d 	.word	0x08006b9d
 8006a6c:	08006b9d 	.word	0x08006b9d
 8006a70:	08006b9d 	.word	0x08006b9d
 8006a74:	08006ad9 	.word	0x08006ad9
 8006a78:	08006b9d 	.word	0x08006b9d
 8006a7c:	08006b9d 	.word	0x08006b9d
 8006a80:	08006b9d 	.word	0x08006b9d
 8006a84:	08006b1b 	.word	0x08006b1b
 8006a88:	08006b9d 	.word	0x08006b9d
 8006a8c:	08006b9d 	.word	0x08006b9d
 8006a90:	08006b9d 	.word	0x08006b9d
 8006a94:	08006b5b 	.word	0x08006b5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fa02 	bl	8006ea8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	699a      	ldr	r2, [r3, #24]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f042 0208 	orr.w	r2, r2, #8
 8006ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 0204 	bic.w	r2, r2, #4
 8006ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6999      	ldr	r1, [r3, #24]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	691a      	ldr	r2, [r3, #16]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	619a      	str	r2, [r3, #24]
      break;
 8006ad6:	e064      	b.n	8006ba2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68b9      	ldr	r1, [r7, #8]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 fa48 	bl	8006f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	699a      	ldr	r2, [r3, #24]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	699a      	ldr	r2, [r3, #24]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6999      	ldr	r1, [r3, #24]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	021a      	lsls	r2, r3, #8
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	619a      	str	r2, [r3, #24]
      break;
 8006b18:	e043      	b.n	8006ba2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68b9      	ldr	r1, [r7, #8]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 fa93 	bl	800704c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69da      	ldr	r2, [r3, #28]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f042 0208 	orr.w	r2, r2, #8
 8006b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	69da      	ldr	r2, [r3, #28]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0204 	bic.w	r2, r2, #4
 8006b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	69d9      	ldr	r1, [r3, #28]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	691a      	ldr	r2, [r3, #16]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	61da      	str	r2, [r3, #28]
      break;
 8006b58:	e023      	b.n	8006ba2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68b9      	ldr	r1, [r7, #8]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f000 fadd 	bl	8007120 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	69da      	ldr	r2, [r3, #28]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	69da      	ldr	r2, [r3, #28]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	69d9      	ldr	r1, [r3, #28]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	021a      	lsls	r2, r3, #8
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	61da      	str	r2, [r3, #28]
      break;
 8006b9a:	e002      	b.n	8006ba2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8006ba0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3718      	adds	r7, #24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d101      	bne.n	8006bd0 <HAL_TIM_ConfigClockSource+0x1c>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e0b4      	b.n	8006d3a <HAL_TIM_ConfigClockSource+0x186>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c08:	d03e      	beq.n	8006c88 <HAL_TIM_ConfigClockSource+0xd4>
 8006c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c0e:	f200 8087 	bhi.w	8006d20 <HAL_TIM_ConfigClockSource+0x16c>
 8006c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c16:	f000 8086 	beq.w	8006d26 <HAL_TIM_ConfigClockSource+0x172>
 8006c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c1e:	d87f      	bhi.n	8006d20 <HAL_TIM_ConfigClockSource+0x16c>
 8006c20:	2b70      	cmp	r3, #112	; 0x70
 8006c22:	d01a      	beq.n	8006c5a <HAL_TIM_ConfigClockSource+0xa6>
 8006c24:	2b70      	cmp	r3, #112	; 0x70
 8006c26:	d87b      	bhi.n	8006d20 <HAL_TIM_ConfigClockSource+0x16c>
 8006c28:	2b60      	cmp	r3, #96	; 0x60
 8006c2a:	d050      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x11a>
 8006c2c:	2b60      	cmp	r3, #96	; 0x60
 8006c2e:	d877      	bhi.n	8006d20 <HAL_TIM_ConfigClockSource+0x16c>
 8006c30:	2b50      	cmp	r3, #80	; 0x50
 8006c32:	d03c      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0xfa>
 8006c34:	2b50      	cmp	r3, #80	; 0x50
 8006c36:	d873      	bhi.n	8006d20 <HAL_TIM_ConfigClockSource+0x16c>
 8006c38:	2b40      	cmp	r3, #64	; 0x40
 8006c3a:	d058      	beq.n	8006cee <HAL_TIM_ConfigClockSource+0x13a>
 8006c3c:	2b40      	cmp	r3, #64	; 0x40
 8006c3e:	d86f      	bhi.n	8006d20 <HAL_TIM_ConfigClockSource+0x16c>
 8006c40:	2b30      	cmp	r3, #48	; 0x30
 8006c42:	d064      	beq.n	8006d0e <HAL_TIM_ConfigClockSource+0x15a>
 8006c44:	2b30      	cmp	r3, #48	; 0x30
 8006c46:	d86b      	bhi.n	8006d20 <HAL_TIM_ConfigClockSource+0x16c>
 8006c48:	2b20      	cmp	r3, #32
 8006c4a:	d060      	beq.n	8006d0e <HAL_TIM_ConfigClockSource+0x15a>
 8006c4c:	2b20      	cmp	r3, #32
 8006c4e:	d867      	bhi.n	8006d20 <HAL_TIM_ConfigClockSource+0x16c>
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d05c      	beq.n	8006d0e <HAL_TIM_ConfigClockSource+0x15a>
 8006c54:	2b10      	cmp	r3, #16
 8006c56:	d05a      	beq.n	8006d0e <HAL_TIM_ConfigClockSource+0x15a>
 8006c58:	e062      	b.n	8006d20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6818      	ldr	r0, [r3, #0]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	6899      	ldr	r1, [r3, #8]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f000 fb23 	bl	80072b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	609a      	str	r2, [r3, #8]
      break;
 8006c86:	e04f      	b.n	8006d28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6818      	ldr	r0, [r3, #0]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	6899      	ldr	r1, [r3, #8]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f000 fb0c 	bl	80072b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689a      	ldr	r2, [r3, #8]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006caa:	609a      	str	r2, [r3, #8]
      break;
 8006cac:	e03c      	b.n	8006d28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	6859      	ldr	r1, [r3, #4]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	f000 fa80 	bl	80071c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2150      	movs	r1, #80	; 0x50
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 fad9 	bl	800727e <TIM_ITRx_SetConfig>
      break;
 8006ccc:	e02c      	b.n	8006d28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6818      	ldr	r0, [r3, #0]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	6859      	ldr	r1, [r3, #4]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f000 fa9f 	bl	800721e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2160      	movs	r1, #96	; 0x60
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 fac9 	bl	800727e <TIM_ITRx_SetConfig>
      break;
 8006cec:	e01c      	b.n	8006d28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6818      	ldr	r0, [r3, #0]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	6859      	ldr	r1, [r3, #4]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f000 fa60 	bl	80071c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2140      	movs	r1, #64	; 0x40
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 fab9 	bl	800727e <TIM_ITRx_SetConfig>
      break;
 8006d0c:	e00c      	b.n	8006d28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4619      	mov	r1, r3
 8006d18:	4610      	mov	r0, r2
 8006d1a:	f000 fab0 	bl	800727e <TIM_ITRx_SetConfig>
      break;
 8006d1e:	e003      	b.n	8006d28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	73fb      	strb	r3, [r7, #15]
      break;
 8006d24:	e000      	b.n	8006d28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d72:	bf00      	nop
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b083      	sub	sp, #12
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
	...

08006da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a34      	ldr	r2, [pc, #208]	; (8006e8c <TIM_Base_SetConfig+0xe4>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00f      	beq.n	8006de0 <TIM_Base_SetConfig+0x38>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc6:	d00b      	beq.n	8006de0 <TIM_Base_SetConfig+0x38>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a31      	ldr	r2, [pc, #196]	; (8006e90 <TIM_Base_SetConfig+0xe8>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d007      	beq.n	8006de0 <TIM_Base_SetConfig+0x38>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a30      	ldr	r2, [pc, #192]	; (8006e94 <TIM_Base_SetConfig+0xec>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d003      	beq.n	8006de0 <TIM_Base_SetConfig+0x38>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a2f      	ldr	r2, [pc, #188]	; (8006e98 <TIM_Base_SetConfig+0xf0>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d108      	bne.n	8006df2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a25      	ldr	r2, [pc, #148]	; (8006e8c <TIM_Base_SetConfig+0xe4>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d01b      	beq.n	8006e32 <TIM_Base_SetConfig+0x8a>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e00:	d017      	beq.n	8006e32 <TIM_Base_SetConfig+0x8a>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a22      	ldr	r2, [pc, #136]	; (8006e90 <TIM_Base_SetConfig+0xe8>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d013      	beq.n	8006e32 <TIM_Base_SetConfig+0x8a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a21      	ldr	r2, [pc, #132]	; (8006e94 <TIM_Base_SetConfig+0xec>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d00f      	beq.n	8006e32 <TIM_Base_SetConfig+0x8a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a20      	ldr	r2, [pc, #128]	; (8006e98 <TIM_Base_SetConfig+0xf0>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d00b      	beq.n	8006e32 <TIM_Base_SetConfig+0x8a>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a1f      	ldr	r2, [pc, #124]	; (8006e9c <TIM_Base_SetConfig+0xf4>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d007      	beq.n	8006e32 <TIM_Base_SetConfig+0x8a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a1e      	ldr	r2, [pc, #120]	; (8006ea0 <TIM_Base_SetConfig+0xf8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d003      	beq.n	8006e32 <TIM_Base_SetConfig+0x8a>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ea4 <TIM_Base_SetConfig+0xfc>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d108      	bne.n	8006e44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a08      	ldr	r2, [pc, #32]	; (8006e8c <TIM_Base_SetConfig+0xe4>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d103      	bne.n	8006e78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	691a      	ldr	r2, [r3, #16]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	615a      	str	r2, [r3, #20]
}
 8006e7e:	bf00      	nop
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	40010000 	.word	0x40010000
 8006e90:	40000400 	.word	0x40000400
 8006e94:	40000800 	.word	0x40000800
 8006e98:	40000c00 	.word	0x40000c00
 8006e9c:	40014000 	.word	0x40014000
 8006ea0:	40014400 	.word	0x40014400
 8006ea4:	40014800 	.word	0x40014800

08006ea8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	f023 0201 	bic.w	r2, r3, #1
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 0303 	bic.w	r3, r3, #3
 8006ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f023 0302 	bic.w	r3, r3, #2
 8006ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a1c      	ldr	r2, [pc, #112]	; (8006f70 <TIM_OC1_SetConfig+0xc8>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d10c      	bne.n	8006f1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f023 0308 	bic.w	r3, r3, #8
 8006f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f023 0304 	bic.w	r3, r3, #4
 8006f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a13      	ldr	r2, [pc, #76]	; (8006f70 <TIM_OC1_SetConfig+0xc8>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d111      	bne.n	8006f4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	621a      	str	r2, [r3, #32]
}
 8006f64:	bf00      	nop
 8006f66:	371c      	adds	r7, #28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	40010000 	.word	0x40010000

08006f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	f023 0210 	bic.w	r2, r3, #16
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f023 0320 	bic.w	r3, r3, #32
 8006fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	011b      	lsls	r3, r3, #4
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a1e      	ldr	r2, [pc, #120]	; (8007048 <TIM_OC2_SetConfig+0xd4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d10d      	bne.n	8006ff0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	011b      	lsls	r3, r3, #4
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a15      	ldr	r2, [pc, #84]	; (8007048 <TIM_OC2_SetConfig+0xd4>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d113      	bne.n	8007020 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ffe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007006:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	4313      	orrs	r3, r2
 8007012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	621a      	str	r2, [r3, #32]
}
 800703a:	bf00      	nop
 800703c:	371c      	adds	r7, #28
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	40010000 	.word	0x40010000

0800704c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f023 0303 	bic.w	r3, r3, #3
 8007082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	4313      	orrs	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	021b      	lsls	r3, r3, #8
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	4313      	orrs	r3, r2
 80070a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a1d      	ldr	r2, [pc, #116]	; (800711c <TIM_OC3_SetConfig+0xd0>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d10d      	bne.n	80070c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	021b      	lsls	r3, r3, #8
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a14      	ldr	r2, [pc, #80]	; (800711c <TIM_OC3_SetConfig+0xd0>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d113      	bne.n	80070f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	011b      	lsls	r3, r3, #4
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	011b      	lsls	r3, r3, #4
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	621a      	str	r2, [r3, #32]
}
 8007110:	bf00      	nop
 8007112:	371c      	adds	r7, #28
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	40010000 	.word	0x40010000

08007120 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800714e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	021b      	lsls	r3, r3, #8
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	4313      	orrs	r3, r2
 8007162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800716a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	031b      	lsls	r3, r3, #12
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	4313      	orrs	r3, r2
 8007176:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a10      	ldr	r2, [pc, #64]	; (80071bc <TIM_OC4_SetConfig+0x9c>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d109      	bne.n	8007194 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007186:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	019b      	lsls	r3, r3, #6
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	4313      	orrs	r3, r2
 8007192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	621a      	str	r2, [r3, #32]
}
 80071ae:	bf00      	nop
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	40010000 	.word	0x40010000

080071c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	f023 0201 	bic.w	r2, r3, #1
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	011b      	lsls	r3, r3, #4
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f023 030a 	bic.w	r3, r3, #10
 80071fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	4313      	orrs	r3, r2
 8007204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	621a      	str	r2, [r3, #32]
}
 8007212:	bf00      	nop
 8007214:	371c      	adds	r7, #28
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800721e:	b480      	push	{r7}
 8007220:	b087      	sub	sp, #28
 8007222:	af00      	add	r7, sp, #0
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	f023 0210 	bic.w	r2, r3, #16
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007248:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	031b      	lsls	r3, r3, #12
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	4313      	orrs	r3, r2
 8007252:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800725a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	011b      	lsls	r3, r3, #4
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	4313      	orrs	r3, r2
 8007264:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	621a      	str	r2, [r3, #32]
}
 8007272:	bf00      	nop
 8007274:	371c      	adds	r7, #28
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800727e:	b480      	push	{r7}
 8007280:	b085      	sub	sp, #20
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007294:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4313      	orrs	r3, r2
 800729c:	f043 0307 	orr.w	r3, r3, #7
 80072a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	609a      	str	r2, [r3, #8]
}
 80072a8:	bf00      	nop
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
 80072c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	021a      	lsls	r2, r3, #8
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	431a      	orrs	r2, r3
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	4313      	orrs	r3, r2
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	4313      	orrs	r3, r2
 80072e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	609a      	str	r2, [r3, #8]
}
 80072e8:	bf00      	nop
 80072ea:	371c      	adds	r7, #28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f003 031f 	and.w	r3, r3, #31
 8007306:	2201      	movs	r2, #1
 8007308:	fa02 f303 	lsl.w	r3, r2, r3
 800730c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6a1a      	ldr	r2, [r3, #32]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	43db      	mvns	r3, r3
 8007316:	401a      	ands	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6a1a      	ldr	r2, [r3, #32]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	f003 031f 	and.w	r3, r3, #31
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	fa01 f303 	lsl.w	r3, r1, r3
 800732c:	431a      	orrs	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	621a      	str	r2, [r3, #32]
}
 8007332:	bf00      	nop
 8007334:	371c      	adds	r7, #28
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
	...

08007340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007350:	2b01      	cmp	r3, #1
 8007352:	d101      	bne.n	8007358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007354:	2302      	movs	r3, #2
 8007356:	e050      	b.n	80073fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2202      	movs	r2, #2
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800737e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	4313      	orrs	r3, r2
 8007388:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a1c      	ldr	r2, [pc, #112]	; (8007408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d018      	beq.n	80073ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a4:	d013      	beq.n	80073ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a18      	ldr	r2, [pc, #96]	; (800740c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d00e      	beq.n	80073ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a16      	ldr	r2, [pc, #88]	; (8007410 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d009      	beq.n	80073ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a15      	ldr	r2, [pc, #84]	; (8007414 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d004      	beq.n	80073ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a13      	ldr	r2, [pc, #76]	; (8007418 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d10c      	bne.n	80073e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	4313      	orrs	r3, r2
 80073de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3714      	adds	r7, #20
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	40010000 	.word	0x40010000
 800740c:	40000400 	.word	0x40000400
 8007410:	40000800 	.word	0x40000800
 8007414:	40000c00 	.word	0x40000c00
 8007418:	40014000 	.word	0x40014000

0800741c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007430:	2b01      	cmp	r3, #1
 8007432:	d101      	bne.n	8007438 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007434:	2302      	movs	r3, #2
 8007436:	e03d      	b.n	80074b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	4313      	orrs	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	4313      	orrs	r3, r2
 800745a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	4313      	orrs	r3, r2
 8007468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4313      	orrs	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	4313      	orrs	r3, r2
 8007492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	69db      	ldr	r3, [r3, #28]
 800749e:	4313      	orrs	r3, r2
 80074a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e03f      	b.n	800757a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d106      	bne.n	8007514 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7fa fb88 	bl	8001c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2224      	movs	r2, #36	; 0x24
 8007518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68da      	ldr	r2, [r3, #12]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800752a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f001 f8cb 	bl	80086c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	691a      	ldr	r2, [r3, #16]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007540:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	695a      	ldr	r2, [r3, #20]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007550:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007560:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2220      	movs	r2, #32
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2220      	movs	r2, #32
 8007574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e021      	b.n	80075d8 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2224      	movs	r2, #36	; 0x24
 8007598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68da      	ldr	r2, [r3, #12]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075aa:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f7fa fc91 	bl	8001ed4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b08a      	sub	sp, #40	; 0x28
 80075e4:	af02      	add	r7, sp, #8
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	603b      	str	r3, [r7, #0]
 80075ec:	4613      	mov	r3, r2
 80075ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b20      	cmp	r3, #32
 80075fe:	d17c      	bne.n	80076fa <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <HAL_UART_Transmit+0x2c>
 8007606:	88fb      	ldrh	r3, [r7, #6]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d101      	bne.n	8007610 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e075      	b.n	80076fc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007616:	2b01      	cmp	r3, #1
 8007618:	d101      	bne.n	800761e <HAL_UART_Transmit+0x3e>
 800761a:	2302      	movs	r3, #2
 800761c:	e06e      	b.n	80076fc <HAL_UART_Transmit+0x11c>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2221      	movs	r2, #33	; 0x21
 8007630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007634:	f7fc fcf6 	bl	8004024 <HAL_GetTick>
 8007638:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	88fa      	ldrh	r2, [r7, #6]
 800763e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	88fa      	ldrh	r2, [r7, #6]
 8007644:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800764e:	d108      	bne.n	8007662 <HAL_UART_Transmit+0x82>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d104      	bne.n	8007662 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007658:	2300      	movs	r3, #0
 800765a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	61bb      	str	r3, [r7, #24]
 8007660:	e003      	b.n	800766a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007666:	2300      	movs	r3, #0
 8007668:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007672:	e02a      	b.n	80076ca <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	2200      	movs	r2, #0
 800767c:	2180      	movs	r1, #128	; 0x80
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 fd53 	bl	800812a <UART_WaitOnFlagUntilTimeout>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e036      	b.n	80076fc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10b      	bne.n	80076ac <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	461a      	mov	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076a2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	3302      	adds	r3, #2
 80076a8:	61bb      	str	r3, [r7, #24]
 80076aa:	e007      	b.n	80076bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	781a      	ldrb	r2, [r3, #0]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	3301      	adds	r3, #1
 80076ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	3b01      	subs	r3, #1
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1cf      	bne.n	8007674 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	2200      	movs	r2, #0
 80076dc:	2140      	movs	r1, #64	; 0x40
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 fd23 	bl	800812a <UART_WaitOnFlagUntilTimeout>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e006      	b.n	80076fc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2220      	movs	r2, #32
 80076f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	e000      	b.n	80076fc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80076fa:	2302      	movs	r3, #2
  }
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3720      	adds	r7, #32
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b08c      	sub	sp, #48	; 0x30
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	4613      	mov	r3, r2
 8007710:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b20      	cmp	r3, #32
 800771c:	d165      	bne.n	80077ea <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <HAL_UART_Transmit_DMA+0x26>
 8007724:	88fb      	ldrh	r3, [r7, #6]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e05e      	b.n	80077ec <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007734:	2b01      	cmp	r3, #1
 8007736:	d101      	bne.n	800773c <HAL_UART_Transmit_DMA+0x38>
 8007738:	2302      	movs	r3, #2
 800773a:	e057      	b.n	80077ec <HAL_UART_Transmit_DMA+0xe8>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	88fa      	ldrh	r2, [r7, #6]
 800774e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	88fa      	ldrh	r2, [r7, #6]
 8007754:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2221      	movs	r2, #33	; 0x21
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007768:	4a22      	ldr	r2, [pc, #136]	; (80077f4 <HAL_UART_Transmit_DMA+0xf0>)
 800776a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007770:	4a21      	ldr	r2, [pc, #132]	; (80077f8 <HAL_UART_Transmit_DMA+0xf4>)
 8007772:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007778:	4a20      	ldr	r2, [pc, #128]	; (80077fc <HAL_UART_Transmit_DMA+0xf8>)
 800777a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007780:	2200      	movs	r2, #0
 8007782:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007784:	f107 0308 	add.w	r3, r7, #8
 8007788:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	6819      	ldr	r1, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3304      	adds	r3, #4
 8007798:	461a      	mov	r2, r3
 800779a:	88fb      	ldrh	r3, [r7, #6]
 800779c:	f7fd fa90 	bl	8004cc0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077a8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3314      	adds	r3, #20
 80077b8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	e853 3f00 	ldrex	r3, [r3]
 80077c0:	617b      	str	r3, [r7, #20]
   return(result);
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3314      	adds	r3, #20
 80077d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077d2:	627a      	str	r2, [r7, #36]	; 0x24
 80077d4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d6:	6a39      	ldr	r1, [r7, #32]
 80077d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077da:	e841 2300 	strex	r3, r2, [r1]
 80077de:	61fb      	str	r3, [r7, #28]
   return(result);
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1e5      	bne.n	80077b2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	e000      	b.n	80077ec <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80077ea:	2302      	movs	r3, #2
  }
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3730      	adds	r7, #48	; 0x30
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	08007e85 	.word	0x08007e85
 80077f8:	08007f1f 	.word	0x08007f1f
 80077fc:	08008097 	.word	0x08008097

08007800 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	4613      	mov	r3, r2
 800780c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b20      	cmp	r3, #32
 8007818:	d11d      	bne.n	8007856 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d002      	beq.n	8007826 <HAL_UART_Receive_DMA+0x26>
 8007820:	88fb      	ldrh	r3, [r7, #6]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e016      	b.n	8007858 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007830:	2b01      	cmp	r3, #1
 8007832:	d101      	bne.n	8007838 <HAL_UART_Receive_DMA+0x38>
 8007834:	2302      	movs	r3, #2
 8007836:	e00f      	b.n	8007858 <HAL_UART_Receive_DMA+0x58>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007846:	88fb      	ldrh	r3, [r7, #6]
 8007848:	461a      	mov	r2, r3
 800784a:	68b9      	ldr	r1, [r7, #8]
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f000 fcdb 	bl	8008208 <UART_Start_Receive_DMA>
 8007852:	4603      	mov	r3, r0
 8007854:	e000      	b.n	8007858 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007856:	2302      	movs	r3, #2
  }
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b08c      	sub	sp, #48	; 0x30
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	4613      	mov	r3, r2
 800786c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b20      	cmp	r3, #32
 8007878:	d152      	bne.n	8007920 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007880:	88fb      	ldrh	r3, [r7, #6]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e04b      	b.n	8007922 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007890:	2b01      	cmp	r3, #1
 8007892:	d101      	bne.n	8007898 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8007894:	2302      	movs	r3, #2
 8007896:	e044      	b.n	8007922 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2201      	movs	r2, #1
 80078a4:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80078a6:	88fb      	ldrh	r3, [r7, #6]
 80078a8:	461a      	mov	r2, r3
 80078aa:	68b9      	ldr	r1, [r7, #8]
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 fcab 	bl	8008208 <UART_Start_Receive_DMA>
 80078b2:	4603      	mov	r3, r0
 80078b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80078b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d12c      	bne.n	800791a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d125      	bne.n	8007914 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078c8:	2300      	movs	r3, #0
 80078ca:	613b      	str	r3, [r7, #16]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	613b      	str	r3, [r7, #16]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	613b      	str	r3, [r7, #16]
 80078dc:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	330c      	adds	r3, #12
 80078e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	e853 3f00 	ldrex	r3, [r3]
 80078ec:	617b      	str	r3, [r7, #20]
   return(result);
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f043 0310 	orr.w	r3, r3, #16
 80078f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	330c      	adds	r3, #12
 80078fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078fe:	627a      	str	r2, [r7, #36]	; 0x24
 8007900:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007902:	6a39      	ldr	r1, [r7, #32]
 8007904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	61fb      	str	r3, [r7, #28]
   return(result);
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e5      	bne.n	80078de <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8007912:	e002      	b.n	800791a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800791a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800791e:	e000      	b.n	8007922 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8007920:	2302      	movs	r3, #2
  }
}
 8007922:	4618      	mov	r0, r3
 8007924:	3730      	adds	r7, #48	; 0x30
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
	...

0800792c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b0ba      	sub	sp, #232	; 0xe8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007952:	2300      	movs	r3, #0
 8007954:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007958:	2300      	movs	r3, #0
 800795a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800795e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007962:	f003 030f 	and.w	r3, r3, #15
 8007966:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800796a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10f      	bne.n	8007992 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007976:	f003 0320 	and.w	r3, r3, #32
 800797a:	2b00      	cmp	r3, #0
 800797c:	d009      	beq.n	8007992 <HAL_UART_IRQHandler+0x66>
 800797e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007982:	f003 0320 	and.w	r3, r3, #32
 8007986:	2b00      	cmp	r3, #0
 8007988:	d003      	beq.n	8007992 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fde1 	bl	8008552 <UART_Receive_IT>
      return;
 8007990:	e256      	b.n	8007e40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007992:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 80de 	beq.w	8007b58 <HAL_UART_IRQHandler+0x22c>
 800799c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d106      	bne.n	80079b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80079a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 80d1 	beq.w	8007b58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80079b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00b      	beq.n	80079da <HAL_UART_IRQHandler+0xae>
 80079c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d005      	beq.n	80079da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	f043 0201 	orr.w	r2, r3, #1
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079de:	f003 0304 	and.w	r3, r3, #4
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00b      	beq.n	80079fe <HAL_UART_IRQHandler+0xd2>
 80079e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d005      	beq.n	80079fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f6:	f043 0202 	orr.w	r2, r3, #2
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00b      	beq.n	8007a22 <HAL_UART_IRQHandler+0xf6>
 8007a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d005      	beq.n	8007a22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	f043 0204 	orr.w	r2, r3, #4
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a26:	f003 0308 	and.w	r3, r3, #8
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d011      	beq.n	8007a52 <HAL_UART_IRQHandler+0x126>
 8007a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a32:	f003 0320 	and.w	r3, r3, #32
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d105      	bne.n	8007a46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d005      	beq.n	8007a52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	f043 0208 	orr.w	r2, r3, #8
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 81ed 	beq.w	8007e36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a60:	f003 0320 	and.w	r3, r3, #32
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d008      	beq.n	8007a7a <HAL_UART_IRQHandler+0x14e>
 8007a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a6c:	f003 0320 	and.w	r3, r3, #32
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fd6c 	bl	8008552 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a84:	2b40      	cmp	r3, #64	; 0x40
 8007a86:	bf0c      	ite	eq
 8007a88:	2301      	moveq	r3, #1
 8007a8a:	2300      	movne	r3, #0
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a96:	f003 0308 	and.w	r3, r3, #8
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d103      	bne.n	8007aa6 <HAL_UART_IRQHandler+0x17a>
 8007a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d04f      	beq.n	8007b46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fc74 	bl	8008394 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab6:	2b40      	cmp	r3, #64	; 0x40
 8007ab8:	d141      	bne.n	8007b3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3314      	adds	r3, #20
 8007ac0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ac8:	e853 3f00 	ldrex	r3, [r3]
 8007acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3314      	adds	r3, #20
 8007ae2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ae6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007af2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007af6:	e841 2300 	strex	r3, r2, [r1]
 8007afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1d9      	bne.n	8007aba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d013      	beq.n	8007b36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b12:	4a7d      	ldr	r2, [pc, #500]	; (8007d08 <HAL_UART_IRQHandler+0x3dc>)
 8007b14:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fd f998 	bl	8004e50 <HAL_DMA_Abort_IT>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d016      	beq.n	8007b54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b30:	4610      	mov	r0, r2
 8007b32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b34:	e00e      	b.n	8007b54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7f9 fd78 	bl	800162c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b3c:	e00a      	b.n	8007b54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7f9 fd74 	bl	800162c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b44:	e006      	b.n	8007b54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7f9 fd70 	bl	800162c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007b52:	e170      	b.n	8007e36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b54:	bf00      	nop
    return;
 8007b56:	e16e      	b.n	8007e36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	f040 814a 	bne.w	8007df6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b66:	f003 0310 	and.w	r3, r3, #16
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 8143 	beq.w	8007df6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b74:	f003 0310 	and.w	r3, r3, #16
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 813c 	beq.w	8007df6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b7e:	2300      	movs	r3, #0
 8007b80:	60bb      	str	r3, [r7, #8]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	60bb      	str	r3, [r7, #8]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	60bb      	str	r3, [r7, #8]
 8007b92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9e:	2b40      	cmp	r3, #64	; 0x40
 8007ba0:	f040 80b4 	bne.w	8007d0c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007bb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f000 8140 	beq.w	8007e3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	f080 8139 	bcs.w	8007e3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bda:	f000 8088 	beq.w	8007cee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	330c      	adds	r3, #12
 8007be4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bec:	e853 3f00 	ldrex	r3, [r3]
 8007bf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	330c      	adds	r3, #12
 8007c06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007c0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c1a:	e841 2300 	strex	r3, r2, [r1]
 8007c1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1d9      	bne.n	8007bde <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3314      	adds	r3, #20
 8007c30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c34:	e853 3f00 	ldrex	r3, [r3]
 8007c38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c3c:	f023 0301 	bic.w	r3, r3, #1
 8007c40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	3314      	adds	r3, #20
 8007c4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c5a:	e841 2300 	strex	r3, r2, [r1]
 8007c5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1e1      	bne.n	8007c2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3314      	adds	r3, #20
 8007c6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c70:	e853 3f00 	ldrex	r3, [r3]
 8007c74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3314      	adds	r3, #20
 8007c86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c92:	e841 2300 	strex	r3, r2, [r1]
 8007c96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1e3      	bne.n	8007c66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2220      	movs	r2, #32
 8007ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	330c      	adds	r3, #12
 8007cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cb6:	e853 3f00 	ldrex	r3, [r3]
 8007cba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cbe:	f023 0310 	bic.w	r3, r3, #16
 8007cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	330c      	adds	r3, #12
 8007ccc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007cd0:	65ba      	str	r2, [r7, #88]	; 0x58
 8007cd2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cd8:	e841 2300 	strex	r3, r2, [r1]
 8007cdc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e3      	bne.n	8007cac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7fd f841 	bl	8004d70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7f9 fc82 	bl	8001608 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d04:	e099      	b.n	8007e3a <HAL_UART_IRQHandler+0x50e>
 8007d06:	bf00      	nop
 8007d08:	0800845b 	.word	0x0800845b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 808b 	beq.w	8007e3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007d28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 8086 	beq.w	8007e3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	330c      	adds	r3, #12
 8007d38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3c:	e853 3f00 	ldrex	r3, [r3]
 8007d40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	330c      	adds	r3, #12
 8007d52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007d56:	647a      	str	r2, [r7, #68]	; 0x44
 8007d58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d5e:	e841 2300 	strex	r3, r2, [r1]
 8007d62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1e3      	bne.n	8007d32 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3314      	adds	r3, #20
 8007d70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	623b      	str	r3, [r7, #32]
   return(result);
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	f023 0301 	bic.w	r3, r3, #1
 8007d80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3314      	adds	r3, #20
 8007d8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d8e:	633a      	str	r2, [r7, #48]	; 0x30
 8007d90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d96:	e841 2300 	strex	r3, r2, [r1]
 8007d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1e3      	bne.n	8007d6a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2220      	movs	r2, #32
 8007da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	330c      	adds	r3, #12
 8007db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	e853 3f00 	ldrex	r3, [r3]
 8007dbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f023 0310 	bic.w	r3, r3, #16
 8007dc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	330c      	adds	r3, #12
 8007dd0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007dd4:	61fa      	str	r2, [r7, #28]
 8007dd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd8:	69b9      	ldr	r1, [r7, #24]
 8007dda:	69fa      	ldr	r2, [r7, #28]
 8007ddc:	e841 2300 	strex	r3, r2, [r1]
 8007de0:	617b      	str	r3, [r7, #20]
   return(result);
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1e3      	bne.n	8007db0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007de8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007dec:	4619      	mov	r1, r3
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7f9 fc0a 	bl	8001608 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007df4:	e023      	b.n	8007e3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d009      	beq.n	8007e16 <HAL_UART_IRQHandler+0x4ea>
 8007e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fb37 	bl	8008482 <UART_Transmit_IT>
    return;
 8007e14:	e014      	b.n	8007e40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00e      	beq.n	8007e40 <HAL_UART_IRQHandler+0x514>
 8007e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d008      	beq.n	8007e40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fb77 	bl	8008522 <UART_EndTransmit_IT>
    return;
 8007e34:	e004      	b.n	8007e40 <HAL_UART_IRQHandler+0x514>
    return;
 8007e36:	bf00      	nop
 8007e38:	e002      	b.n	8007e40 <HAL_UART_IRQHandler+0x514>
      return;
 8007e3a:	bf00      	nop
 8007e3c:	e000      	b.n	8007e40 <HAL_UART_IRQHandler+0x514>
      return;
 8007e3e:	bf00      	nop
  }
}
 8007e40:	37e8      	adds	r7, #232	; 0xe8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop

08007e48 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b090      	sub	sp, #64	; 0x40
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e90:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d137      	bne.n	8007f10 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3314      	adds	r3, #20
 8007eac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	e853 3f00 	ldrex	r3, [r3]
 8007eb4:	623b      	str	r3, [r7, #32]
   return(result);
 8007eb6:	6a3b      	ldr	r3, [r7, #32]
 8007eb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ebc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	3314      	adds	r3, #20
 8007ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ec6:	633a      	str	r2, [r7, #48]	; 0x30
 8007ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ece:	e841 2300 	strex	r3, r2, [r1]
 8007ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1e5      	bne.n	8007ea6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	330c      	adds	r3, #12
 8007ee0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	e853 3f00 	ldrex	r3, [r3]
 8007ee8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	330c      	adds	r3, #12
 8007ef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007efa:	61fa      	str	r2, [r7, #28]
 8007efc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efe:	69b9      	ldr	r1, [r7, #24]
 8007f00:	69fa      	ldr	r2, [r7, #28]
 8007f02:	e841 2300 	strex	r3, r2, [r1]
 8007f06:	617b      	str	r3, [r7, #20]
   return(result);
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1e5      	bne.n	8007eda <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f0e:	e002      	b.n	8007f16 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007f10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007f12:	f7f9 fb9f 	bl	8001654 <HAL_UART_TxCpltCallback>
}
 8007f16:	bf00      	nop
 8007f18:	3740      	adds	r7, #64	; 0x40
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b084      	sub	sp, #16
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f7ff ff8b 	bl	8007e48 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f32:	bf00      	nop
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b09c      	sub	sp, #112	; 0x70
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f46:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d172      	bne.n	800803c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f58:	2200      	movs	r2, #0
 8007f5a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	330c      	adds	r3, #12
 8007f62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f66:	e853 3f00 	ldrex	r3, [r3]
 8007f6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f72:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	330c      	adds	r3, #12
 8007f7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f7c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f7e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f84:	e841 2300 	strex	r3, r2, [r1]
 8007f88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1e5      	bne.n	8007f5c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3314      	adds	r3, #20
 8007f96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9a:	e853 3f00 	ldrex	r3, [r3]
 8007f9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa2:	f023 0301 	bic.w	r3, r3, #1
 8007fa6:	667b      	str	r3, [r7, #100]	; 0x64
 8007fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3314      	adds	r3, #20
 8007fae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007fb0:	647a      	str	r2, [r7, #68]	; 0x44
 8007fb2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fb8:	e841 2300 	strex	r3, r2, [r1]
 8007fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1e5      	bne.n	8007f90 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	3314      	adds	r3, #20
 8007fca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	e853 3f00 	ldrex	r3, [r3]
 8007fd2:	623b      	str	r3, [r7, #32]
   return(result);
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fda:	663b      	str	r3, [r7, #96]	; 0x60
 8007fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	3314      	adds	r3, #20
 8007fe2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007fe4:	633a      	str	r2, [r7, #48]	; 0x30
 8007fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fec:	e841 2300 	strex	r3, r2, [r1]
 8007ff0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1e5      	bne.n	8007fc4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008004:	2b01      	cmp	r3, #1
 8008006:	d119      	bne.n	800803c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	330c      	adds	r3, #12
 800800e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	e853 3f00 	ldrex	r3, [r3]
 8008016:	60fb      	str	r3, [r7, #12]
   return(result);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 0310 	bic.w	r3, r3, #16
 800801e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	330c      	adds	r3, #12
 8008026:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008028:	61fa      	str	r2, [r7, #28]
 800802a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802c:	69b9      	ldr	r1, [r7, #24]
 800802e:	69fa      	ldr	r2, [r7, #28]
 8008030:	e841 2300 	strex	r3, r2, [r1]
 8008034:	617b      	str	r3, [r7, #20]
   return(result);
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e5      	bne.n	8008008 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800803c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800803e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008040:	2b01      	cmp	r3, #1
 8008042:	d106      	bne.n	8008052 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008046:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008048:	4619      	mov	r1, r3
 800804a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800804c:	f7f9 fadc 	bl	8001608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008050:	e002      	b.n	8008058 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008052:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008054:	f7ff ff02 	bl	8007e5c <HAL_UART_RxCpltCallback>
}
 8008058:	bf00      	nop
 800805a:	3770      	adds	r7, #112	; 0x70
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008072:	2b01      	cmp	r3, #1
 8008074:	d108      	bne.n	8008088 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800807a:	085b      	lsrs	r3, r3, #1
 800807c:	b29b      	uxth	r3, r3
 800807e:	4619      	mov	r1, r3
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f7f9 fac1 	bl	8001608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008086:	e002      	b.n	800808e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f7ff fef1 	bl	8007e70 <HAL_UART_RxHalfCpltCallback>
}
 800808e:	bf00      	nop
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b084      	sub	sp, #16
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800809e:	2300      	movs	r3, #0
 80080a0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b2:	2b80      	cmp	r3, #128	; 0x80
 80080b4:	bf0c      	ite	eq
 80080b6:	2301      	moveq	r3, #1
 80080b8:	2300      	movne	r3, #0
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b21      	cmp	r3, #33	; 0x21
 80080c8:	d108      	bne.n	80080dc <UART_DMAError+0x46>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d005      	beq.n	80080dc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2200      	movs	r2, #0
 80080d4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80080d6:	68b8      	ldr	r0, [r7, #8]
 80080d8:	f000 f934 	bl	8008344 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e6:	2b40      	cmp	r3, #64	; 0x40
 80080e8:	bf0c      	ite	eq
 80080ea:	2301      	moveq	r3, #1
 80080ec:	2300      	movne	r3, #0
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b22      	cmp	r3, #34	; 0x22
 80080fc:	d108      	bne.n	8008110 <UART_DMAError+0x7a>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d005      	beq.n	8008110 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	2200      	movs	r2, #0
 8008108:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800810a:	68b8      	ldr	r0, [r7, #8]
 800810c:	f000 f942 	bl	8008394 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008114:	f043 0210 	orr.w	r2, r3, #16
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800811c:	68b8      	ldr	r0, [r7, #8]
 800811e:	f7f9 fa85 	bl	800162c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008122:	bf00      	nop
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b090      	sub	sp, #64	; 0x40
 800812e:	af00      	add	r7, sp, #0
 8008130:	60f8      	str	r0, [r7, #12]
 8008132:	60b9      	str	r1, [r7, #8]
 8008134:	603b      	str	r3, [r7, #0]
 8008136:	4613      	mov	r3, r2
 8008138:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800813a:	e050      	b.n	80081de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800813c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800813e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008142:	d04c      	beq.n	80081de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008146:	2b00      	cmp	r3, #0
 8008148:	d007      	beq.n	800815a <UART_WaitOnFlagUntilTimeout+0x30>
 800814a:	f7fb ff6b 	bl	8004024 <HAL_GetTick>
 800814e:	4602      	mov	r2, r0
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008156:	429a      	cmp	r2, r3
 8008158:	d241      	bcs.n	80081de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	330c      	adds	r3, #12
 8008160:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008164:	e853 3f00 	ldrex	r3, [r3]
 8008168:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008170:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	330c      	adds	r3, #12
 8008178:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800817a:	637a      	str	r2, [r7, #52]	; 0x34
 800817c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008182:	e841 2300 	strex	r3, r2, [r1]
 8008186:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1e5      	bne.n	800815a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3314      	adds	r3, #20
 8008194:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	e853 3f00 	ldrex	r3, [r3]
 800819c:	613b      	str	r3, [r7, #16]
   return(result);
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	f023 0301 	bic.w	r3, r3, #1
 80081a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3314      	adds	r3, #20
 80081ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081ae:	623a      	str	r2, [r7, #32]
 80081b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b2:	69f9      	ldr	r1, [r7, #28]
 80081b4:	6a3a      	ldr	r2, [r7, #32]
 80081b6:	e841 2300 	strex	r3, r2, [r1]
 80081ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1e5      	bne.n	800818e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2220      	movs	r2, #32
 80081c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2220      	movs	r2, #32
 80081ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e00f      	b.n	80081fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	4013      	ands	r3, r2
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	bf0c      	ite	eq
 80081ee:	2301      	moveq	r3, #1
 80081f0:	2300      	movne	r3, #0
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	461a      	mov	r2, r3
 80081f6:	79fb      	ldrb	r3, [r7, #7]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d09f      	beq.n	800813c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3740      	adds	r7, #64	; 0x40
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b098      	sub	sp, #96	; 0x60
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	4613      	mov	r3, r2
 8008214:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	88fa      	ldrh	r2, [r7, #6]
 8008220:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2222      	movs	r2, #34	; 0x22
 800822c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008234:	4a40      	ldr	r2, [pc, #256]	; (8008338 <UART_Start_Receive_DMA+0x130>)
 8008236:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823c:	4a3f      	ldr	r2, [pc, #252]	; (800833c <UART_Start_Receive_DMA+0x134>)
 800823e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008244:	4a3e      	ldr	r2, [pc, #248]	; (8008340 <UART_Start_Receive_DMA+0x138>)
 8008246:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824c:	2200      	movs	r2, #0
 800824e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008250:	f107 0308 	add.w	r3, r7, #8
 8008254:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3304      	adds	r3, #4
 8008260:	4619      	mov	r1, r3
 8008262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	88fb      	ldrh	r3, [r7, #6]
 8008268:	f7fc fd2a 	bl	8004cc0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800826c:	2300      	movs	r3, #0
 800826e:	613b      	str	r3, [r7, #16]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	613b      	str	r3, [r7, #16]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	613b      	str	r3, [r7, #16]
 8008280:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d019      	beq.n	80082c6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	330c      	adds	r3, #12
 8008298:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800829c:	e853 3f00 	ldrex	r3, [r3]
 80082a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	330c      	adds	r3, #12
 80082b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082b2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80082b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80082b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082ba:	e841 2300 	strex	r3, r2, [r1]
 80082be:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80082c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e5      	bne.n	8008292 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3314      	adds	r3, #20
 80082cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d0:	e853 3f00 	ldrex	r3, [r3]
 80082d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d8:	f043 0301 	orr.w	r3, r3, #1
 80082dc:	657b      	str	r3, [r7, #84]	; 0x54
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3314      	adds	r3, #20
 80082e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80082e6:	63ba      	str	r2, [r7, #56]	; 0x38
 80082e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80082ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082ee:	e841 2300 	strex	r3, r2, [r1]
 80082f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1e5      	bne.n	80082c6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3314      	adds	r3, #20
 8008300:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	e853 3f00 	ldrex	r3, [r3]
 8008308:	617b      	str	r3, [r7, #20]
   return(result);
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008310:	653b      	str	r3, [r7, #80]	; 0x50
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3314      	adds	r3, #20
 8008318:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800831a:	627a      	str	r2, [r7, #36]	; 0x24
 800831c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831e:	6a39      	ldr	r1, [r7, #32]
 8008320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008322:	e841 2300 	strex	r3, r2, [r1]
 8008326:	61fb      	str	r3, [r7, #28]
   return(result);
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1e5      	bne.n	80082fa <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3760      	adds	r7, #96	; 0x60
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	08007f3b 	.word	0x08007f3b
 800833c:	08008061 	.word	0x08008061
 8008340:	08008097 	.word	0x08008097

08008344 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008344:	b480      	push	{r7}
 8008346:	b089      	sub	sp, #36	; 0x24
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	330c      	adds	r3, #12
 8008352:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	e853 3f00 	ldrex	r3, [r3]
 800835a:	60bb      	str	r3, [r7, #8]
   return(result);
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008362:	61fb      	str	r3, [r7, #28]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	330c      	adds	r3, #12
 800836a:	69fa      	ldr	r2, [r7, #28]
 800836c:	61ba      	str	r2, [r7, #24]
 800836e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008370:	6979      	ldr	r1, [r7, #20]
 8008372:	69ba      	ldr	r2, [r7, #24]
 8008374:	e841 2300 	strex	r3, r2, [r1]
 8008378:	613b      	str	r3, [r7, #16]
   return(result);
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1e5      	bne.n	800834c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2220      	movs	r2, #32
 8008384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008388:	bf00      	nop
 800838a:	3724      	adds	r7, #36	; 0x24
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008394:	b480      	push	{r7}
 8008396:	b095      	sub	sp, #84	; 0x54
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	330c      	adds	r3, #12
 80083a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a6:	e853 3f00 	ldrex	r3, [r3]
 80083aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	330c      	adds	r3, #12
 80083ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083bc:	643a      	str	r2, [r7, #64]	; 0x40
 80083be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083c4:	e841 2300 	strex	r3, r2, [r1]
 80083c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1e5      	bne.n	800839c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3314      	adds	r3, #20
 80083d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d8:	6a3b      	ldr	r3, [r7, #32]
 80083da:	e853 3f00 	ldrex	r3, [r3]
 80083de:	61fb      	str	r3, [r7, #28]
   return(result);
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	f023 0301 	bic.w	r3, r3, #1
 80083e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	3314      	adds	r3, #20
 80083ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083f8:	e841 2300 	strex	r3, r2, [r1]
 80083fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1e5      	bne.n	80083d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008408:	2b01      	cmp	r3, #1
 800840a:	d119      	bne.n	8008440 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	330c      	adds	r3, #12
 8008412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	e853 3f00 	ldrex	r3, [r3]
 800841a:	60bb      	str	r3, [r7, #8]
   return(result);
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	f023 0310 	bic.w	r3, r3, #16
 8008422:	647b      	str	r3, [r7, #68]	; 0x44
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	330c      	adds	r3, #12
 800842a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800842c:	61ba      	str	r2, [r7, #24]
 800842e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008430:	6979      	ldr	r1, [r7, #20]
 8008432:	69ba      	ldr	r2, [r7, #24]
 8008434:	e841 2300 	strex	r3, r2, [r1]
 8008438:	613b      	str	r3, [r7, #16]
   return(result);
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1e5      	bne.n	800840c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2220      	movs	r2, #32
 8008444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800844e:	bf00      	nop
 8008450:	3754      	adds	r7, #84	; 0x54
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008466:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f7f9 f8d9 	bl	800162c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800847a:	bf00      	nop
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008482:	b480      	push	{r7}
 8008484:	b085      	sub	sp, #20
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b21      	cmp	r3, #33	; 0x21
 8008494:	d13e      	bne.n	8008514 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800849e:	d114      	bne.n	80084ca <UART_Transmit_IT+0x48>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d110      	bne.n	80084ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a1b      	ldr	r3, [r3, #32]
 80084ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	881b      	ldrh	r3, [r3, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	1c9a      	adds	r2, r3, #2
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	621a      	str	r2, [r3, #32]
 80084c8:	e008      	b.n	80084dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a1b      	ldr	r3, [r3, #32]
 80084ce:	1c59      	adds	r1, r3, #1
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	6211      	str	r1, [r2, #32]
 80084d4:	781a      	ldrb	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	3b01      	subs	r3, #1
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	4619      	mov	r1, r3
 80084ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10f      	bne.n	8008510 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68da      	ldr	r2, [r3, #12]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68da      	ldr	r2, [r3, #12]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800850e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	e000      	b.n	8008516 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008514:	2302      	movs	r3, #2
  }
}
 8008516:	4618      	mov	r0, r3
 8008518:	3714      	adds	r7, #20
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b082      	sub	sp, #8
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68da      	ldr	r2, [r3, #12]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008538:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2220      	movs	r2, #32
 800853e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f7f9 f886 	bl	8001654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b08c      	sub	sp, #48	; 0x30
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b22      	cmp	r3, #34	; 0x22
 8008564:	f040 80ab 	bne.w	80086be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008570:	d117      	bne.n	80085a2 <UART_Receive_IT+0x50>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d113      	bne.n	80085a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800857a:	2300      	movs	r3, #0
 800857c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008582:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	b29b      	uxth	r3, r3
 800858c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008590:	b29a      	uxth	r2, r3
 8008592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008594:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859a:	1c9a      	adds	r2, r3, #2
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	629a      	str	r2, [r3, #40]	; 0x28
 80085a0:	e026      	b.n	80085f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80085a8:	2300      	movs	r3, #0
 80085aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085b4:	d007      	beq.n	80085c6 <UART_Receive_IT+0x74>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10a      	bne.n	80085d4 <UART_Receive_IT+0x82>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d106      	bne.n	80085d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	b2da      	uxtb	r2, r3
 80085ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d0:	701a      	strb	r2, [r3, #0]
 80085d2:	e008      	b.n	80085e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ea:	1c5a      	adds	r2, r3, #1
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	3b01      	subs	r3, #1
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	4619      	mov	r1, r3
 80085fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008600:	2b00      	cmp	r3, #0
 8008602:	d15a      	bne.n	80086ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68da      	ldr	r2, [r3, #12]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f022 0220 	bic.w	r2, r2, #32
 8008612:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68da      	ldr	r2, [r3, #12]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008622:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	695a      	ldr	r2, [r3, #20]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f022 0201 	bic.w	r2, r2, #1
 8008632:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2220      	movs	r2, #32
 8008638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008640:	2b01      	cmp	r3, #1
 8008642:	d135      	bne.n	80086b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	330c      	adds	r3, #12
 8008650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	e853 3f00 	ldrex	r3, [r3]
 8008658:	613b      	str	r3, [r7, #16]
   return(result);
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	f023 0310 	bic.w	r3, r3, #16
 8008660:	627b      	str	r3, [r7, #36]	; 0x24
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	330c      	adds	r3, #12
 8008668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800866a:	623a      	str	r2, [r7, #32]
 800866c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866e:	69f9      	ldr	r1, [r7, #28]
 8008670:	6a3a      	ldr	r2, [r7, #32]
 8008672:	e841 2300 	strex	r3, r2, [r1]
 8008676:	61bb      	str	r3, [r7, #24]
   return(result);
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1e5      	bne.n	800864a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 0310 	and.w	r3, r3, #16
 8008688:	2b10      	cmp	r3, #16
 800868a:	d10a      	bne.n	80086a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800868c:	2300      	movs	r3, #0
 800868e:	60fb      	str	r3, [r7, #12]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	60fb      	str	r3, [r7, #12]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	60fb      	str	r3, [r7, #12]
 80086a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7f8 ffad 	bl	8001608 <HAL_UARTEx_RxEventCallback>
 80086ae:	e002      	b.n	80086b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7ff fbd3 	bl	8007e5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	e002      	b.n	80086c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	e000      	b.n	80086c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80086be:	2302      	movs	r3, #2
  }
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3730      	adds	r7, #48	; 0x30
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086cc:	b0c0      	sub	sp, #256	; 0x100
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80086e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086e4:	68d9      	ldr	r1, [r3, #12]
 80086e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	ea40 0301 	orr.w	r3, r0, r1
 80086f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80086f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f6:	689a      	ldr	r2, [r3, #8]
 80086f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	431a      	orrs	r2, r3
 8008700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	431a      	orrs	r2, r3
 8008708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800870c:	69db      	ldr	r3, [r3, #28]
 800870e:	4313      	orrs	r3, r2
 8008710:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008720:	f021 010c 	bic.w	r1, r1, #12
 8008724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800872e:	430b      	orrs	r3, r1
 8008730:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800873e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008742:	6999      	ldr	r1, [r3, #24]
 8008744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	ea40 0301 	orr.w	r3, r0, r1
 800874e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	4b8f      	ldr	r3, [pc, #572]	; (8008994 <UART_SetConfig+0x2cc>)
 8008758:	429a      	cmp	r2, r3
 800875a:	d005      	beq.n	8008768 <UART_SetConfig+0xa0>
 800875c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	4b8d      	ldr	r3, [pc, #564]	; (8008998 <UART_SetConfig+0x2d0>)
 8008764:	429a      	cmp	r2, r3
 8008766:	d104      	bne.n	8008772 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008768:	f7fd fcc4 	bl	80060f4 <HAL_RCC_GetPCLK2Freq>
 800876c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008770:	e003      	b.n	800877a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008772:	f7fd fcab 	bl	80060cc <HAL_RCC_GetPCLK1Freq>
 8008776:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800877a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008784:	f040 810c 	bne.w	80089a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800878c:	2200      	movs	r2, #0
 800878e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008792:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008796:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800879a:	4622      	mov	r2, r4
 800879c:	462b      	mov	r3, r5
 800879e:	1891      	adds	r1, r2, r2
 80087a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80087a2:	415b      	adcs	r3, r3
 80087a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80087aa:	4621      	mov	r1, r4
 80087ac:	eb12 0801 	adds.w	r8, r2, r1
 80087b0:	4629      	mov	r1, r5
 80087b2:	eb43 0901 	adc.w	r9, r3, r1
 80087b6:	f04f 0200 	mov.w	r2, #0
 80087ba:	f04f 0300 	mov.w	r3, #0
 80087be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087ca:	4690      	mov	r8, r2
 80087cc:	4699      	mov	r9, r3
 80087ce:	4623      	mov	r3, r4
 80087d0:	eb18 0303 	adds.w	r3, r8, r3
 80087d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80087d8:	462b      	mov	r3, r5
 80087da:	eb49 0303 	adc.w	r3, r9, r3
 80087de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80087e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80087f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80087f6:	460b      	mov	r3, r1
 80087f8:	18db      	adds	r3, r3, r3
 80087fa:	653b      	str	r3, [r7, #80]	; 0x50
 80087fc:	4613      	mov	r3, r2
 80087fe:	eb42 0303 	adc.w	r3, r2, r3
 8008802:	657b      	str	r3, [r7, #84]	; 0x54
 8008804:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008808:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800880c:	f7f7 fce8 	bl	80001e0 <__aeabi_uldivmod>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4b61      	ldr	r3, [pc, #388]	; (800899c <UART_SetConfig+0x2d4>)
 8008816:	fba3 2302 	umull	r2, r3, r3, r2
 800881a:	095b      	lsrs	r3, r3, #5
 800881c:	011c      	lsls	r4, r3, #4
 800881e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008822:	2200      	movs	r2, #0
 8008824:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008828:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800882c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008830:	4642      	mov	r2, r8
 8008832:	464b      	mov	r3, r9
 8008834:	1891      	adds	r1, r2, r2
 8008836:	64b9      	str	r1, [r7, #72]	; 0x48
 8008838:	415b      	adcs	r3, r3
 800883a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800883c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008840:	4641      	mov	r1, r8
 8008842:	eb12 0a01 	adds.w	sl, r2, r1
 8008846:	4649      	mov	r1, r9
 8008848:	eb43 0b01 	adc.w	fp, r3, r1
 800884c:	f04f 0200 	mov.w	r2, #0
 8008850:	f04f 0300 	mov.w	r3, #0
 8008854:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008858:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800885c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008860:	4692      	mov	sl, r2
 8008862:	469b      	mov	fp, r3
 8008864:	4643      	mov	r3, r8
 8008866:	eb1a 0303 	adds.w	r3, sl, r3
 800886a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800886e:	464b      	mov	r3, r9
 8008870:	eb4b 0303 	adc.w	r3, fp, r3
 8008874:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008884:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008888:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800888c:	460b      	mov	r3, r1
 800888e:	18db      	adds	r3, r3, r3
 8008890:	643b      	str	r3, [r7, #64]	; 0x40
 8008892:	4613      	mov	r3, r2
 8008894:	eb42 0303 	adc.w	r3, r2, r3
 8008898:	647b      	str	r3, [r7, #68]	; 0x44
 800889a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800889e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80088a2:	f7f7 fc9d 	bl	80001e0 <__aeabi_uldivmod>
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	4611      	mov	r1, r2
 80088ac:	4b3b      	ldr	r3, [pc, #236]	; (800899c <UART_SetConfig+0x2d4>)
 80088ae:	fba3 2301 	umull	r2, r3, r3, r1
 80088b2:	095b      	lsrs	r3, r3, #5
 80088b4:	2264      	movs	r2, #100	; 0x64
 80088b6:	fb02 f303 	mul.w	r3, r2, r3
 80088ba:	1acb      	subs	r3, r1, r3
 80088bc:	00db      	lsls	r3, r3, #3
 80088be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80088c2:	4b36      	ldr	r3, [pc, #216]	; (800899c <UART_SetConfig+0x2d4>)
 80088c4:	fba3 2302 	umull	r2, r3, r3, r2
 80088c8:	095b      	lsrs	r3, r3, #5
 80088ca:	005b      	lsls	r3, r3, #1
 80088cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088d0:	441c      	add	r4, r3
 80088d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088d6:	2200      	movs	r2, #0
 80088d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80088e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80088e4:	4642      	mov	r2, r8
 80088e6:	464b      	mov	r3, r9
 80088e8:	1891      	adds	r1, r2, r2
 80088ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80088ec:	415b      	adcs	r3, r3
 80088ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80088f4:	4641      	mov	r1, r8
 80088f6:	1851      	adds	r1, r2, r1
 80088f8:	6339      	str	r1, [r7, #48]	; 0x30
 80088fa:	4649      	mov	r1, r9
 80088fc:	414b      	adcs	r3, r1
 80088fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008900:	f04f 0200 	mov.w	r2, #0
 8008904:	f04f 0300 	mov.w	r3, #0
 8008908:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800890c:	4659      	mov	r1, fp
 800890e:	00cb      	lsls	r3, r1, #3
 8008910:	4651      	mov	r1, sl
 8008912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008916:	4651      	mov	r1, sl
 8008918:	00ca      	lsls	r2, r1, #3
 800891a:	4610      	mov	r0, r2
 800891c:	4619      	mov	r1, r3
 800891e:	4603      	mov	r3, r0
 8008920:	4642      	mov	r2, r8
 8008922:	189b      	adds	r3, r3, r2
 8008924:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008928:	464b      	mov	r3, r9
 800892a:	460a      	mov	r2, r1
 800892c:	eb42 0303 	adc.w	r3, r2, r3
 8008930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008940:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008944:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008948:	460b      	mov	r3, r1
 800894a:	18db      	adds	r3, r3, r3
 800894c:	62bb      	str	r3, [r7, #40]	; 0x28
 800894e:	4613      	mov	r3, r2
 8008950:	eb42 0303 	adc.w	r3, r2, r3
 8008954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008956:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800895a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800895e:	f7f7 fc3f 	bl	80001e0 <__aeabi_uldivmod>
 8008962:	4602      	mov	r2, r0
 8008964:	460b      	mov	r3, r1
 8008966:	4b0d      	ldr	r3, [pc, #52]	; (800899c <UART_SetConfig+0x2d4>)
 8008968:	fba3 1302 	umull	r1, r3, r3, r2
 800896c:	095b      	lsrs	r3, r3, #5
 800896e:	2164      	movs	r1, #100	; 0x64
 8008970:	fb01 f303 	mul.w	r3, r1, r3
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	00db      	lsls	r3, r3, #3
 8008978:	3332      	adds	r3, #50	; 0x32
 800897a:	4a08      	ldr	r2, [pc, #32]	; (800899c <UART_SetConfig+0x2d4>)
 800897c:	fba2 2303 	umull	r2, r3, r2, r3
 8008980:	095b      	lsrs	r3, r3, #5
 8008982:	f003 0207 	and.w	r2, r3, #7
 8008986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4422      	add	r2, r4
 800898e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008990:	e105      	b.n	8008b9e <UART_SetConfig+0x4d6>
 8008992:	bf00      	nop
 8008994:	40011000 	.word	0x40011000
 8008998:	40011400 	.word	0x40011400
 800899c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089a4:	2200      	movs	r2, #0
 80089a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80089aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80089ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80089b2:	4642      	mov	r2, r8
 80089b4:	464b      	mov	r3, r9
 80089b6:	1891      	adds	r1, r2, r2
 80089b8:	6239      	str	r1, [r7, #32]
 80089ba:	415b      	adcs	r3, r3
 80089bc:	627b      	str	r3, [r7, #36]	; 0x24
 80089be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089c2:	4641      	mov	r1, r8
 80089c4:	1854      	adds	r4, r2, r1
 80089c6:	4649      	mov	r1, r9
 80089c8:	eb43 0501 	adc.w	r5, r3, r1
 80089cc:	f04f 0200 	mov.w	r2, #0
 80089d0:	f04f 0300 	mov.w	r3, #0
 80089d4:	00eb      	lsls	r3, r5, #3
 80089d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80089da:	00e2      	lsls	r2, r4, #3
 80089dc:	4614      	mov	r4, r2
 80089de:	461d      	mov	r5, r3
 80089e0:	4643      	mov	r3, r8
 80089e2:	18e3      	adds	r3, r4, r3
 80089e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80089e8:	464b      	mov	r3, r9
 80089ea:	eb45 0303 	adc.w	r3, r5, r3
 80089ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80089f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80089fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a02:	f04f 0200 	mov.w	r2, #0
 8008a06:	f04f 0300 	mov.w	r3, #0
 8008a0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008a0e:	4629      	mov	r1, r5
 8008a10:	008b      	lsls	r3, r1, #2
 8008a12:	4621      	mov	r1, r4
 8008a14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a18:	4621      	mov	r1, r4
 8008a1a:	008a      	lsls	r2, r1, #2
 8008a1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008a20:	f7f7 fbde 	bl	80001e0 <__aeabi_uldivmod>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	4b60      	ldr	r3, [pc, #384]	; (8008bac <UART_SetConfig+0x4e4>)
 8008a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8008a2e:	095b      	lsrs	r3, r3, #5
 8008a30:	011c      	lsls	r4, r3, #4
 8008a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a36:	2200      	movs	r2, #0
 8008a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008a40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008a44:	4642      	mov	r2, r8
 8008a46:	464b      	mov	r3, r9
 8008a48:	1891      	adds	r1, r2, r2
 8008a4a:	61b9      	str	r1, [r7, #24]
 8008a4c:	415b      	adcs	r3, r3
 8008a4e:	61fb      	str	r3, [r7, #28]
 8008a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a54:	4641      	mov	r1, r8
 8008a56:	1851      	adds	r1, r2, r1
 8008a58:	6139      	str	r1, [r7, #16]
 8008a5a:	4649      	mov	r1, r9
 8008a5c:	414b      	adcs	r3, r1
 8008a5e:	617b      	str	r3, [r7, #20]
 8008a60:	f04f 0200 	mov.w	r2, #0
 8008a64:	f04f 0300 	mov.w	r3, #0
 8008a68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a6c:	4659      	mov	r1, fp
 8008a6e:	00cb      	lsls	r3, r1, #3
 8008a70:	4651      	mov	r1, sl
 8008a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a76:	4651      	mov	r1, sl
 8008a78:	00ca      	lsls	r2, r1, #3
 8008a7a:	4610      	mov	r0, r2
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	4603      	mov	r3, r0
 8008a80:	4642      	mov	r2, r8
 8008a82:	189b      	adds	r3, r3, r2
 8008a84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a88:	464b      	mov	r3, r9
 8008a8a:	460a      	mov	r2, r1
 8008a8c:	eb42 0303 	adc.w	r3, r2, r3
 8008a90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008aa0:	f04f 0200 	mov.w	r2, #0
 8008aa4:	f04f 0300 	mov.w	r3, #0
 8008aa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008aac:	4649      	mov	r1, r9
 8008aae:	008b      	lsls	r3, r1, #2
 8008ab0:	4641      	mov	r1, r8
 8008ab2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ab6:	4641      	mov	r1, r8
 8008ab8:	008a      	lsls	r2, r1, #2
 8008aba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008abe:	f7f7 fb8f 	bl	80001e0 <__aeabi_uldivmod>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4b39      	ldr	r3, [pc, #228]	; (8008bac <UART_SetConfig+0x4e4>)
 8008ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8008acc:	095b      	lsrs	r3, r3, #5
 8008ace:	2164      	movs	r1, #100	; 0x64
 8008ad0:	fb01 f303 	mul.w	r3, r1, r3
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	011b      	lsls	r3, r3, #4
 8008ad8:	3332      	adds	r3, #50	; 0x32
 8008ada:	4a34      	ldr	r2, [pc, #208]	; (8008bac <UART_SetConfig+0x4e4>)
 8008adc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae0:	095b      	lsrs	r3, r3, #5
 8008ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ae6:	441c      	add	r4, r3
 8008ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008aec:	2200      	movs	r2, #0
 8008aee:	673b      	str	r3, [r7, #112]	; 0x70
 8008af0:	677a      	str	r2, [r7, #116]	; 0x74
 8008af2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008af6:	4642      	mov	r2, r8
 8008af8:	464b      	mov	r3, r9
 8008afa:	1891      	adds	r1, r2, r2
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	415b      	adcs	r3, r3
 8008b00:	60fb      	str	r3, [r7, #12]
 8008b02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b06:	4641      	mov	r1, r8
 8008b08:	1851      	adds	r1, r2, r1
 8008b0a:	6039      	str	r1, [r7, #0]
 8008b0c:	4649      	mov	r1, r9
 8008b0e:	414b      	adcs	r3, r1
 8008b10:	607b      	str	r3, [r7, #4]
 8008b12:	f04f 0200 	mov.w	r2, #0
 8008b16:	f04f 0300 	mov.w	r3, #0
 8008b1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008b1e:	4659      	mov	r1, fp
 8008b20:	00cb      	lsls	r3, r1, #3
 8008b22:	4651      	mov	r1, sl
 8008b24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b28:	4651      	mov	r1, sl
 8008b2a:	00ca      	lsls	r2, r1, #3
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	4619      	mov	r1, r3
 8008b30:	4603      	mov	r3, r0
 8008b32:	4642      	mov	r2, r8
 8008b34:	189b      	adds	r3, r3, r2
 8008b36:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b38:	464b      	mov	r3, r9
 8008b3a:	460a      	mov	r2, r1
 8008b3c:	eb42 0303 	adc.w	r3, r2, r3
 8008b40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	663b      	str	r3, [r7, #96]	; 0x60
 8008b4c:	667a      	str	r2, [r7, #100]	; 0x64
 8008b4e:	f04f 0200 	mov.w	r2, #0
 8008b52:	f04f 0300 	mov.w	r3, #0
 8008b56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008b5a:	4649      	mov	r1, r9
 8008b5c:	008b      	lsls	r3, r1, #2
 8008b5e:	4641      	mov	r1, r8
 8008b60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b64:	4641      	mov	r1, r8
 8008b66:	008a      	lsls	r2, r1, #2
 8008b68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008b6c:	f7f7 fb38 	bl	80001e0 <__aeabi_uldivmod>
 8008b70:	4602      	mov	r2, r0
 8008b72:	460b      	mov	r3, r1
 8008b74:	4b0d      	ldr	r3, [pc, #52]	; (8008bac <UART_SetConfig+0x4e4>)
 8008b76:	fba3 1302 	umull	r1, r3, r3, r2
 8008b7a:	095b      	lsrs	r3, r3, #5
 8008b7c:	2164      	movs	r1, #100	; 0x64
 8008b7e:	fb01 f303 	mul.w	r3, r1, r3
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	011b      	lsls	r3, r3, #4
 8008b86:	3332      	adds	r3, #50	; 0x32
 8008b88:	4a08      	ldr	r2, [pc, #32]	; (8008bac <UART_SetConfig+0x4e4>)
 8008b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b8e:	095b      	lsrs	r3, r3, #5
 8008b90:	f003 020f 	and.w	r2, r3, #15
 8008b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4422      	add	r2, r4
 8008b9c:	609a      	str	r2, [r3, #8]
}
 8008b9e:	bf00      	nop
 8008ba0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008baa:	bf00      	nop
 8008bac:	51eb851f 	.word	0x51eb851f

08008bb0 <__NVIC_SetPriority>:
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	6039      	str	r1, [r7, #0]
 8008bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	db0a      	blt.n	8008bda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	490c      	ldr	r1, [pc, #48]	; (8008bfc <__NVIC_SetPriority+0x4c>)
 8008bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bce:	0112      	lsls	r2, r2, #4
 8008bd0:	b2d2      	uxtb	r2, r2
 8008bd2:	440b      	add	r3, r1
 8008bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008bd8:	e00a      	b.n	8008bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	4908      	ldr	r1, [pc, #32]	; (8008c00 <__NVIC_SetPriority+0x50>)
 8008be0:	79fb      	ldrb	r3, [r7, #7]
 8008be2:	f003 030f 	and.w	r3, r3, #15
 8008be6:	3b04      	subs	r3, #4
 8008be8:	0112      	lsls	r2, r2, #4
 8008bea:	b2d2      	uxtb	r2, r2
 8008bec:	440b      	add	r3, r1
 8008bee:	761a      	strb	r2, [r3, #24]
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr
 8008bfc:	e000e100 	.word	0xe000e100
 8008c00:	e000ed00 	.word	0xe000ed00

08008c04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008c04:	b580      	push	{r7, lr}
 8008c06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008c08:	2100      	movs	r1, #0
 8008c0a:	f06f 0004 	mvn.w	r0, #4
 8008c0e:	f7ff ffcf 	bl	8008bb0 <__NVIC_SetPriority>
#endif
}
 8008c12:	bf00      	nop
 8008c14:	bd80      	pop	{r7, pc}
	...

08008c18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c1e:	f3ef 8305 	mrs	r3, IPSR
 8008c22:	603b      	str	r3, [r7, #0]
  return(result);
 8008c24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d003      	beq.n	8008c32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008c2a:	f06f 0305 	mvn.w	r3, #5
 8008c2e:	607b      	str	r3, [r7, #4]
 8008c30:	e00c      	b.n	8008c4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c32:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <osKernelInitialize+0x44>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d105      	bne.n	8008c46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008c3a:	4b08      	ldr	r3, [pc, #32]	; (8008c5c <osKernelInitialize+0x44>)
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	607b      	str	r3, [r7, #4]
 8008c44:	e002      	b.n	8008c4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008c46:	f04f 33ff 	mov.w	r3, #4294967295
 8008c4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c4c:	687b      	ldr	r3, [r7, #4]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	20000ab4 	.word	0x20000ab4

08008c60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c66:	f3ef 8305 	mrs	r3, IPSR
 8008c6a:	603b      	str	r3, [r7, #0]
  return(result);
 8008c6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d003      	beq.n	8008c7a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008c72:	f06f 0305 	mvn.w	r3, #5
 8008c76:	607b      	str	r3, [r7, #4]
 8008c78:	e010      	b.n	8008c9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008c7a:	4b0b      	ldr	r3, [pc, #44]	; (8008ca8 <osKernelStart+0x48>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d109      	bne.n	8008c96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008c82:	f7ff ffbf 	bl	8008c04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008c86:	4b08      	ldr	r3, [pc, #32]	; (8008ca8 <osKernelStart+0x48>)
 8008c88:	2202      	movs	r2, #2
 8008c8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008c8c:	f001 f87c 	bl	8009d88 <vTaskStartScheduler>
      stat = osOK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	607b      	str	r3, [r7, #4]
 8008c94:	e002      	b.n	8008c9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008c96:	f04f 33ff 	mov.w	r3, #4294967295
 8008c9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c9c:	687b      	ldr	r3, [r7, #4]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20000ab4 	.word	0x20000ab4

08008cac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b08e      	sub	sp, #56	; 0x38
 8008cb0:	af04      	add	r7, sp, #16
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cbc:	f3ef 8305 	mrs	r3, IPSR
 8008cc0:	617b      	str	r3, [r7, #20]
  return(result);
 8008cc2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d17e      	bne.n	8008dc6 <osThreadNew+0x11a>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d07b      	beq.n	8008dc6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008cce:	2380      	movs	r3, #128	; 0x80
 8008cd0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008cd2:	2318      	movs	r3, #24
 8008cd4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008cda:	f04f 33ff 	mov.w	r3, #4294967295
 8008cde:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d045      	beq.n	8008d72 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d002      	beq.n	8008cf4 <osThreadNew+0x48>
        name = attr->name;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d002      	beq.n	8008d02 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d008      	beq.n	8008d1a <osThreadNew+0x6e>
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	2b38      	cmp	r3, #56	; 0x38
 8008d0c:	d805      	bhi.n	8008d1a <osThreadNew+0x6e>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f003 0301 	and.w	r3, r3, #1
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d001      	beq.n	8008d1e <osThreadNew+0x72>
        return (NULL);
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	e054      	b.n	8008dc8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d003      	beq.n	8008d2e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	695b      	ldr	r3, [r3, #20]
 8008d2a:	089b      	lsrs	r3, r3, #2
 8008d2c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00e      	beq.n	8008d54 <osThreadNew+0xa8>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	2bbb      	cmp	r3, #187	; 0xbb
 8008d3c:	d90a      	bls.n	8008d54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d006      	beq.n	8008d54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d002      	beq.n	8008d54 <osThreadNew+0xa8>
        mem = 1;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	61bb      	str	r3, [r7, #24]
 8008d52:	e010      	b.n	8008d76 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d10c      	bne.n	8008d76 <osThreadNew+0xca>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d108      	bne.n	8008d76 <osThreadNew+0xca>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d104      	bne.n	8008d76 <osThreadNew+0xca>
          mem = 0;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	61bb      	str	r3, [r7, #24]
 8008d70:	e001      	b.n	8008d76 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008d72:	2300      	movs	r3, #0
 8008d74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d110      	bne.n	8008d9e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d84:	9202      	str	r2, [sp, #8]
 8008d86:	9301      	str	r3, [sp, #4]
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	6a3a      	ldr	r2, [r7, #32]
 8008d90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f000 fe0c 	bl	80099b0 <xTaskCreateStatic>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	613b      	str	r3, [r7, #16]
 8008d9c:	e013      	b.n	8008dc6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d110      	bne.n	8008dc6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008da4:	6a3b      	ldr	r3, [r7, #32]
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	f107 0310 	add.w	r3, r7, #16
 8008dac:	9301      	str	r3, [sp, #4]
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f000 fe57 	bl	8009a6a <xTaskCreate>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d001      	beq.n	8008dc6 <osThreadNew+0x11a>
            hTask = NULL;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008dc6:	693b      	ldr	r3, [r7, #16]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3728      	adds	r7, #40	; 0x28
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dd8:	f3ef 8305 	mrs	r3, IPSR
 8008ddc:	60bb      	str	r3, [r7, #8]
  return(result);
 8008dde:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d003      	beq.n	8008dec <osDelay+0x1c>
    stat = osErrorISR;
 8008de4:	f06f 0305 	mvn.w	r3, #5
 8008de8:	60fb      	str	r3, [r7, #12]
 8008dea:	e007      	b.n	8008dfc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d002      	beq.n	8008dfc <osDelay+0x2c>
      vTaskDelay(ticks);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 ff92 	bl	8009d20 <vTaskDelay>
    }
  }

  return (stat);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4a07      	ldr	r2, [pc, #28]	; (8008e34 <vApplicationGetIdleTaskMemory+0x2c>)
 8008e18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	4a06      	ldr	r2, [pc, #24]	; (8008e38 <vApplicationGetIdleTaskMemory+0x30>)
 8008e1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2280      	movs	r2, #128	; 0x80
 8008e24:	601a      	str	r2, [r3, #0]
}
 8008e26:	bf00      	nop
 8008e28:	3714      	adds	r7, #20
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	20000ab8 	.word	0x20000ab8
 8008e38:	20000b74 	.word	0x20000b74

08008e3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4a07      	ldr	r2, [pc, #28]	; (8008e68 <vApplicationGetTimerTaskMemory+0x2c>)
 8008e4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	4a06      	ldr	r2, [pc, #24]	; (8008e6c <vApplicationGetTimerTaskMemory+0x30>)
 8008e52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e5a:	601a      	str	r2, [r3, #0]
}
 8008e5c:	bf00      	nop
 8008e5e:	3714      	adds	r7, #20
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	20000d74 	.word	0x20000d74
 8008e6c:	20000e30 	.word	0x20000e30

08008e70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f103 0208 	add.w	r2, r3, #8
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f04f 32ff 	mov.w	r2, #4294967295
 8008e88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f103 0208 	add.w	r2, r3, #8
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f103 0208 	add.w	r2, r3, #8
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008ebe:	bf00      	nop
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b085      	sub	sp, #20
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
 8008ed2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	689a      	ldr	r2, [r3, #8]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	683a      	ldr	r2, [r7, #0]
 8008ef4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	1c5a      	adds	r2, r3, #1
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	601a      	str	r2, [r3, #0]
}
 8008f06:	bf00      	nop
 8008f08:	3714      	adds	r7, #20
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr

08008f12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f12:	b480      	push	{r7}
 8008f14:	b085      	sub	sp, #20
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
 8008f1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f28:	d103      	bne.n	8008f32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	60fb      	str	r3, [r7, #12]
 8008f30:	e00c      	b.n	8008f4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	3308      	adds	r3, #8
 8008f36:	60fb      	str	r3, [r7, #12]
 8008f38:	e002      	b.n	8008f40 <vListInsert+0x2e>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	60fb      	str	r3, [r7, #12]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d2f6      	bcs.n	8008f3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	685a      	ldr	r2, [r3, #4]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	683a      	ldr	r2, [r7, #0]
 8008f5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	683a      	ldr	r2, [r7, #0]
 8008f66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	1c5a      	adds	r2, r3, #1
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	601a      	str	r2, [r3, #0]
}
 8008f78:	bf00      	nop
 8008f7a:	3714      	adds	r7, #20
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	6892      	ldr	r2, [r2, #8]
 8008f9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	6852      	ldr	r2, [r2, #4]
 8008fa4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d103      	bne.n	8008fb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	689a      	ldr	r2, [r3, #8]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	1e5a      	subs	r2, r3, #1
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d10a      	bne.n	8009002 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008ffe:	bf00      	nop
 8009000:	e7fe      	b.n	8009000 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009002:	f002 f877 	bl	800b0f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800900e:	68f9      	ldr	r1, [r7, #12]
 8009010:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009012:	fb01 f303 	mul.w	r3, r1, r3
 8009016:	441a      	add	r2, r3
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2200      	movs	r2, #0
 8009020:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009032:	3b01      	subs	r3, #1
 8009034:	68f9      	ldr	r1, [r7, #12]
 8009036:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009038:	fb01 f303 	mul.w	r3, r1, r3
 800903c:	441a      	add	r2, r3
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	22ff      	movs	r2, #255	; 0xff
 8009046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	22ff      	movs	r2, #255	; 0xff
 800904e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d114      	bne.n	8009082 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d01a      	beq.n	8009096 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	3310      	adds	r3, #16
 8009064:	4618      	mov	r0, r3
 8009066:	f001 f929 	bl	800a2bc <xTaskRemoveFromEventList>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d012      	beq.n	8009096 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009070:	4b0c      	ldr	r3, [pc, #48]	; (80090a4 <xQueueGenericReset+0xcc>)
 8009072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009076:	601a      	str	r2, [r3, #0]
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	f3bf 8f6f 	isb	sy
 8009080:	e009      	b.n	8009096 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	3310      	adds	r3, #16
 8009086:	4618      	mov	r0, r3
 8009088:	f7ff fef2 	bl	8008e70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	3324      	adds	r3, #36	; 0x24
 8009090:	4618      	mov	r0, r3
 8009092:	f7ff feed 	bl	8008e70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009096:	f002 f85d 	bl	800b154 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800909a:	2301      	movs	r3, #1
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	e000ed04 	.word	0xe000ed04

080090a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b08e      	sub	sp, #56	; 0x38
 80090ac:	af02      	add	r7, sp, #8
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	607a      	str	r2, [r7, #4]
 80090b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d10a      	bne.n	80090d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80090bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c0:	f383 8811 	msr	BASEPRI, r3
 80090c4:	f3bf 8f6f 	isb	sy
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090ce:	bf00      	nop
 80090d0:	e7fe      	b.n	80090d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10a      	bne.n	80090ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80090d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090ea:	bf00      	nop
 80090ec:	e7fe      	b.n	80090ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <xQueueGenericCreateStatic+0x52>
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <xQueueGenericCreateStatic+0x56>
 80090fa:	2301      	movs	r3, #1
 80090fc:	e000      	b.n	8009100 <xQueueGenericCreateStatic+0x58>
 80090fe:	2300      	movs	r3, #0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10a      	bne.n	800911a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	623b      	str	r3, [r7, #32]
}
 8009116:	bf00      	nop
 8009118:	e7fe      	b.n	8009118 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d102      	bne.n	8009126 <xQueueGenericCreateStatic+0x7e>
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <xQueueGenericCreateStatic+0x82>
 8009126:	2301      	movs	r3, #1
 8009128:	e000      	b.n	800912c <xQueueGenericCreateStatic+0x84>
 800912a:	2300      	movs	r3, #0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d10a      	bne.n	8009146 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	61fb      	str	r3, [r7, #28]
}
 8009142:	bf00      	nop
 8009144:	e7fe      	b.n	8009144 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009146:	2350      	movs	r3, #80	; 0x50
 8009148:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	2b50      	cmp	r3, #80	; 0x50
 800914e:	d00a      	beq.n	8009166 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	61bb      	str	r3, [r7, #24]
}
 8009162:	bf00      	nop
 8009164:	e7fe      	b.n	8009164 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009166:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800916c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00d      	beq.n	800918e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009174:	2201      	movs	r2, #1
 8009176:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800917a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800917e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	4613      	mov	r3, r2
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	68b9      	ldr	r1, [r7, #8]
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f000 f805 	bl	8009198 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800918e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009190:	4618      	mov	r0, r3
 8009192:	3730      	adds	r7, #48	; 0x30
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
 80091a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d103      	bne.n	80091b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	69ba      	ldr	r2, [r7, #24]
 80091b0:	601a      	str	r2, [r3, #0]
 80091b2:	e002      	b.n	80091ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80091c6:	2101      	movs	r1, #1
 80091c8:	69b8      	ldr	r0, [r7, #24]
 80091ca:	f7ff ff05 	bl	8008fd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	78fa      	ldrb	r2, [r7, #3]
 80091d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80091d6:	bf00      	nop
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
	...

080091e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b08e      	sub	sp, #56	; 0x38
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	607a      	str	r2, [r7, #4]
 80091ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80091ee:	2300      	movs	r3, #0
 80091f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80091f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10a      	bne.n	8009212 <xQueueGenericSend+0x32>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800920e:	bf00      	nop
 8009210:	e7fe      	b.n	8009210 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d103      	bne.n	8009220 <xQueueGenericSend+0x40>
 8009218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921c:	2b00      	cmp	r3, #0
 800921e:	d101      	bne.n	8009224 <xQueueGenericSend+0x44>
 8009220:	2301      	movs	r3, #1
 8009222:	e000      	b.n	8009226 <xQueueGenericSend+0x46>
 8009224:	2300      	movs	r3, #0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10a      	bne.n	8009240 <xQueueGenericSend+0x60>
	__asm volatile
 800922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800923c:	bf00      	nop
 800923e:	e7fe      	b.n	800923e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	2b02      	cmp	r3, #2
 8009244:	d103      	bne.n	800924e <xQueueGenericSend+0x6e>
 8009246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800924a:	2b01      	cmp	r3, #1
 800924c:	d101      	bne.n	8009252 <xQueueGenericSend+0x72>
 800924e:	2301      	movs	r3, #1
 8009250:	e000      	b.n	8009254 <xQueueGenericSend+0x74>
 8009252:	2300      	movs	r3, #0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10a      	bne.n	800926e <xQueueGenericSend+0x8e>
	__asm volatile
 8009258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	623b      	str	r3, [r7, #32]
}
 800926a:	bf00      	nop
 800926c:	e7fe      	b.n	800926c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800926e:	f001 f9e7 	bl	800a640 <xTaskGetSchedulerState>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d102      	bne.n	800927e <xQueueGenericSend+0x9e>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <xQueueGenericSend+0xa2>
 800927e:	2301      	movs	r3, #1
 8009280:	e000      	b.n	8009284 <xQueueGenericSend+0xa4>
 8009282:	2300      	movs	r3, #0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10a      	bne.n	800929e <xQueueGenericSend+0xbe>
	__asm volatile
 8009288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	61fb      	str	r3, [r7, #28]
}
 800929a:	bf00      	nop
 800929c:	e7fe      	b.n	800929c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800929e:	f001 ff29 	bl	800b0f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d302      	bcc.n	80092b4 <xQueueGenericSend+0xd4>
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	d129      	bne.n	8009308 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	68b9      	ldr	r1, [r7, #8]
 80092b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092ba:	f000 fa0b 	bl	80096d4 <prvCopyDataToQueue>
 80092be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d010      	beq.n	80092ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ca:	3324      	adds	r3, #36	; 0x24
 80092cc:	4618      	mov	r0, r3
 80092ce:	f000 fff5 	bl	800a2bc <xTaskRemoveFromEventList>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d013      	beq.n	8009300 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80092d8:	4b3f      	ldr	r3, [pc, #252]	; (80093d8 <xQueueGenericSend+0x1f8>)
 80092da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092de:	601a      	str	r2, [r3, #0]
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	e00a      	b.n	8009300 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80092ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d007      	beq.n	8009300 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80092f0:	4b39      	ldr	r3, [pc, #228]	; (80093d8 <xQueueGenericSend+0x1f8>)
 80092f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092f6:	601a      	str	r2, [r3, #0]
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009300:	f001 ff28 	bl	800b154 <vPortExitCritical>
				return pdPASS;
 8009304:	2301      	movs	r3, #1
 8009306:	e063      	b.n	80093d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d103      	bne.n	8009316 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800930e:	f001 ff21 	bl	800b154 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009312:	2300      	movs	r3, #0
 8009314:	e05c      	b.n	80093d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009318:	2b00      	cmp	r3, #0
 800931a:	d106      	bne.n	800932a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800931c:	f107 0314 	add.w	r3, r7, #20
 8009320:	4618      	mov	r0, r3
 8009322:	f001 f82f 	bl	800a384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009326:	2301      	movs	r3, #1
 8009328:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800932a:	f001 ff13 	bl	800b154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800932e:	f000 fd9b 	bl	8009e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009332:	f001 fedf 	bl	800b0f4 <vPortEnterCritical>
 8009336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009338:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800933c:	b25b      	sxtb	r3, r3
 800933e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009342:	d103      	bne.n	800934c <xQueueGenericSend+0x16c>
 8009344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009346:	2200      	movs	r2, #0
 8009348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800934c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009352:	b25b      	sxtb	r3, r3
 8009354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009358:	d103      	bne.n	8009362 <xQueueGenericSend+0x182>
 800935a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935c:	2200      	movs	r2, #0
 800935e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009362:	f001 fef7 	bl	800b154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009366:	1d3a      	adds	r2, r7, #4
 8009368:	f107 0314 	add.w	r3, r7, #20
 800936c:	4611      	mov	r1, r2
 800936e:	4618      	mov	r0, r3
 8009370:	f001 f81e 	bl	800a3b0 <xTaskCheckForTimeOut>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d124      	bne.n	80093c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800937a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800937c:	f000 faa2 	bl	80098c4 <prvIsQueueFull>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d018      	beq.n	80093b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009388:	3310      	adds	r3, #16
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	4611      	mov	r1, r2
 800938e:	4618      	mov	r0, r3
 8009390:	f000 ff44 	bl	800a21c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009396:	f000 fa2d 	bl	80097f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800939a:	f000 fd73 	bl	8009e84 <xTaskResumeAll>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f47f af7c 	bne.w	800929e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80093a6:	4b0c      	ldr	r3, [pc, #48]	; (80093d8 <xQueueGenericSend+0x1f8>)
 80093a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ac:	601a      	str	r2, [r3, #0]
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	e772      	b.n	800929e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80093b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093ba:	f000 fa1b 	bl	80097f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093be:	f000 fd61 	bl	8009e84 <xTaskResumeAll>
 80093c2:	e76c      	b.n	800929e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80093c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093c6:	f000 fa15 	bl	80097f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093ca:	f000 fd5b 	bl	8009e84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80093ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3738      	adds	r7, #56	; 0x38
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	e000ed04 	.word	0xe000ed04

080093dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b090      	sub	sp, #64	; 0x40
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
 80093e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80093ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d10a      	bne.n	800940a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80093f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009406:	bf00      	nop
 8009408:	e7fe      	b.n	8009408 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d103      	bne.n	8009418 <xQueueGenericSendFromISR+0x3c>
 8009410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009414:	2b00      	cmp	r3, #0
 8009416:	d101      	bne.n	800941c <xQueueGenericSendFromISR+0x40>
 8009418:	2301      	movs	r3, #1
 800941a:	e000      	b.n	800941e <xQueueGenericSendFromISR+0x42>
 800941c:	2300      	movs	r3, #0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d10a      	bne.n	8009438 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009434:	bf00      	nop
 8009436:	e7fe      	b.n	8009436 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	2b02      	cmp	r3, #2
 800943c:	d103      	bne.n	8009446 <xQueueGenericSendFromISR+0x6a>
 800943e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009442:	2b01      	cmp	r3, #1
 8009444:	d101      	bne.n	800944a <xQueueGenericSendFromISR+0x6e>
 8009446:	2301      	movs	r3, #1
 8009448:	e000      	b.n	800944c <xQueueGenericSendFromISR+0x70>
 800944a:	2300      	movs	r3, #0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10a      	bne.n	8009466 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	623b      	str	r3, [r7, #32]
}
 8009462:	bf00      	nop
 8009464:	e7fe      	b.n	8009464 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009466:	f001 ff27 	bl	800b2b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800946a:	f3ef 8211 	mrs	r2, BASEPRI
 800946e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	61fa      	str	r2, [r7, #28]
 8009480:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009482:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009484:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800948a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800948e:	429a      	cmp	r2, r3
 8009490:	d302      	bcc.n	8009498 <xQueueGenericSendFromISR+0xbc>
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b02      	cmp	r3, #2
 8009496:	d12f      	bne.n	80094f8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800949e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	68b9      	ldr	r1, [r7, #8]
 80094ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094ae:	f000 f911 	bl	80096d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80094b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80094b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ba:	d112      	bne.n	80094e2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d016      	beq.n	80094f2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c6:	3324      	adds	r3, #36	; 0x24
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 fef7 	bl	800a2bc <xTaskRemoveFromEventList>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00e      	beq.n	80094f2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00b      	beq.n	80094f2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	601a      	str	r2, [r3, #0]
 80094e0:	e007      	b.n	80094f2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80094e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80094e6:	3301      	adds	r3, #1
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	b25a      	sxtb	r2, r3
 80094ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80094f2:	2301      	movs	r3, #1
 80094f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80094f6:	e001      	b.n	80094fc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80094f8:	2300      	movs	r3, #0
 80094fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094fe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009506:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800950a:	4618      	mov	r0, r3
 800950c:	3740      	adds	r7, #64	; 0x40
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
	...

08009514 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b08c      	sub	sp, #48	; 0x30
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009520:	2300      	movs	r3, #0
 8009522:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952a:	2b00      	cmp	r3, #0
 800952c:	d10a      	bne.n	8009544 <xQueueReceive+0x30>
	__asm volatile
 800952e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009532:	f383 8811 	msr	BASEPRI, r3
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	623b      	str	r3, [r7, #32]
}
 8009540:	bf00      	nop
 8009542:	e7fe      	b.n	8009542 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d103      	bne.n	8009552 <xQueueReceive+0x3e>
 800954a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954e:	2b00      	cmp	r3, #0
 8009550:	d101      	bne.n	8009556 <xQueueReceive+0x42>
 8009552:	2301      	movs	r3, #1
 8009554:	e000      	b.n	8009558 <xQueueReceive+0x44>
 8009556:	2300      	movs	r3, #0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10a      	bne.n	8009572 <xQueueReceive+0x5e>
	__asm volatile
 800955c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009560:	f383 8811 	msr	BASEPRI, r3
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	61fb      	str	r3, [r7, #28]
}
 800956e:	bf00      	nop
 8009570:	e7fe      	b.n	8009570 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009572:	f001 f865 	bl	800a640 <xTaskGetSchedulerState>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d102      	bne.n	8009582 <xQueueReceive+0x6e>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d101      	bne.n	8009586 <xQueueReceive+0x72>
 8009582:	2301      	movs	r3, #1
 8009584:	e000      	b.n	8009588 <xQueueReceive+0x74>
 8009586:	2300      	movs	r3, #0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10a      	bne.n	80095a2 <xQueueReceive+0x8e>
	__asm volatile
 800958c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009590:	f383 8811 	msr	BASEPRI, r3
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	61bb      	str	r3, [r7, #24]
}
 800959e:	bf00      	nop
 80095a0:	e7fe      	b.n	80095a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095a2:	f001 fda7 	bl	800b0f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d01f      	beq.n	80095f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80095b2:	68b9      	ldr	r1, [r7, #8]
 80095b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095b6:	f000 f8f7 	bl	80097a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80095ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095bc:	1e5a      	subs	r2, r3, #1
 80095be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c4:	691b      	ldr	r3, [r3, #16]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00f      	beq.n	80095ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095cc:	3310      	adds	r3, #16
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 fe74 	bl	800a2bc <xTaskRemoveFromEventList>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d007      	beq.n	80095ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80095da:	4b3d      	ldr	r3, [pc, #244]	; (80096d0 <xQueueReceive+0x1bc>)
 80095dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095e0:	601a      	str	r2, [r3, #0]
 80095e2:	f3bf 8f4f 	dsb	sy
 80095e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80095ea:	f001 fdb3 	bl	800b154 <vPortExitCritical>
				return pdPASS;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e069      	b.n	80096c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d103      	bne.n	8009600 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095f8:	f001 fdac 	bl	800b154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80095fc:	2300      	movs	r3, #0
 80095fe:	e062      	b.n	80096c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009602:	2b00      	cmp	r3, #0
 8009604:	d106      	bne.n	8009614 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009606:	f107 0310 	add.w	r3, r7, #16
 800960a:	4618      	mov	r0, r3
 800960c:	f000 feba 	bl	800a384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009610:	2301      	movs	r3, #1
 8009612:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009614:	f001 fd9e 	bl	800b154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009618:	f000 fc26 	bl	8009e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800961c:	f001 fd6a 	bl	800b0f4 <vPortEnterCritical>
 8009620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009622:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009626:	b25b      	sxtb	r3, r3
 8009628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800962c:	d103      	bne.n	8009636 <xQueueReceive+0x122>
 800962e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800963c:	b25b      	sxtb	r3, r3
 800963e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009642:	d103      	bne.n	800964c <xQueueReceive+0x138>
 8009644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009646:	2200      	movs	r2, #0
 8009648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800964c:	f001 fd82 	bl	800b154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009650:	1d3a      	adds	r2, r7, #4
 8009652:	f107 0310 	add.w	r3, r7, #16
 8009656:	4611      	mov	r1, r2
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fea9 	bl	800a3b0 <xTaskCheckForTimeOut>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d123      	bne.n	80096ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009666:	f000 f917 	bl	8009898 <prvIsQueueEmpty>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d017      	beq.n	80096a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009672:	3324      	adds	r3, #36	; 0x24
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	4611      	mov	r1, r2
 8009678:	4618      	mov	r0, r3
 800967a:	f000 fdcf 	bl	800a21c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800967e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009680:	f000 f8b8 	bl	80097f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009684:	f000 fbfe 	bl	8009e84 <xTaskResumeAll>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d189      	bne.n	80095a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800968e:	4b10      	ldr	r3, [pc, #64]	; (80096d0 <xQueueReceive+0x1bc>)
 8009690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009694:	601a      	str	r2, [r3, #0]
 8009696:	f3bf 8f4f 	dsb	sy
 800969a:	f3bf 8f6f 	isb	sy
 800969e:	e780      	b.n	80095a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80096a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096a2:	f000 f8a7 	bl	80097f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096a6:	f000 fbed 	bl	8009e84 <xTaskResumeAll>
 80096aa:	e77a      	b.n	80095a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80096ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096ae:	f000 f8a1 	bl	80097f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096b2:	f000 fbe7 	bl	8009e84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096b8:	f000 f8ee 	bl	8009898 <prvIsQueueEmpty>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f43f af6f 	beq.w	80095a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80096c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3730      	adds	r7, #48	; 0x30
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	e000ed04 	.word	0xe000ed04

080096d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80096e0:	2300      	movs	r3, #0
 80096e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10d      	bne.n	800970e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d14d      	bne.n	8009796 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 ffbc 	bl	800a67c <xTaskPriorityDisinherit>
 8009704:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2200      	movs	r2, #0
 800970a:	609a      	str	r2, [r3, #8]
 800970c:	e043      	b.n	8009796 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d119      	bne.n	8009748 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6858      	ldr	r0, [r3, #4]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971c:	461a      	mov	r2, r3
 800971e:	68b9      	ldr	r1, [r7, #8]
 8009720:	f002 f820 	bl	800b764 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	685a      	ldr	r2, [r3, #4]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800972c:	441a      	add	r2, r3
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	685a      	ldr	r2, [r3, #4]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	429a      	cmp	r2, r3
 800973c:	d32b      	bcc.n	8009796 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	605a      	str	r2, [r3, #4]
 8009746:	e026      	b.n	8009796 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	68d8      	ldr	r0, [r3, #12]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009750:	461a      	mov	r2, r3
 8009752:	68b9      	ldr	r1, [r7, #8]
 8009754:	f002 f806 	bl	800b764 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	68da      	ldr	r2, [r3, #12]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009760:	425b      	negs	r3, r3
 8009762:	441a      	add	r2, r3
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	68da      	ldr	r2, [r3, #12]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	429a      	cmp	r2, r3
 8009772:	d207      	bcs.n	8009784 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	689a      	ldr	r2, [r3, #8]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977c:	425b      	negs	r3, r3
 800977e:	441a      	add	r2, r3
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b02      	cmp	r3, #2
 8009788:	d105      	bne.n	8009796 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d002      	beq.n	8009796 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	3b01      	subs	r3, #1
 8009794:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	1c5a      	adds	r2, r3, #1
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800979e:	697b      	ldr	r3, [r7, #20]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3718      	adds	r7, #24
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d018      	beq.n	80097ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	68da      	ldr	r2, [r3, #12]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c2:	441a      	add	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68da      	ldr	r2, [r3, #12]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d303      	bcc.n	80097dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68d9      	ldr	r1, [r3, #12]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e4:	461a      	mov	r2, r3
 80097e6:	6838      	ldr	r0, [r7, #0]
 80097e8:	f001 ffbc 	bl	800b764 <memcpy>
	}
}
 80097ec:	bf00      	nop
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80097fc:	f001 fc7a 	bl	800b0f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009806:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009808:	e011      	b.n	800982e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980e:	2b00      	cmp	r3, #0
 8009810:	d012      	beq.n	8009838 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	3324      	adds	r3, #36	; 0x24
 8009816:	4618      	mov	r0, r3
 8009818:	f000 fd50 	bl	800a2bc <xTaskRemoveFromEventList>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d001      	beq.n	8009826 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009822:	f000 fe27 	bl	800a474 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009826:	7bfb      	ldrb	r3, [r7, #15]
 8009828:	3b01      	subs	r3, #1
 800982a:	b2db      	uxtb	r3, r3
 800982c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800982e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009832:	2b00      	cmp	r3, #0
 8009834:	dce9      	bgt.n	800980a <prvUnlockQueue+0x16>
 8009836:	e000      	b.n	800983a <prvUnlockQueue+0x46>
					break;
 8009838:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	22ff      	movs	r2, #255	; 0xff
 800983e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009842:	f001 fc87 	bl	800b154 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009846:	f001 fc55 	bl	800b0f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009850:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009852:	e011      	b.n	8009878 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d012      	beq.n	8009882 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	3310      	adds	r3, #16
 8009860:	4618      	mov	r0, r3
 8009862:	f000 fd2b 	bl	800a2bc <xTaskRemoveFromEventList>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d001      	beq.n	8009870 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800986c:	f000 fe02 	bl	800a474 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009870:	7bbb      	ldrb	r3, [r7, #14]
 8009872:	3b01      	subs	r3, #1
 8009874:	b2db      	uxtb	r3, r3
 8009876:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009878:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800987c:	2b00      	cmp	r3, #0
 800987e:	dce9      	bgt.n	8009854 <prvUnlockQueue+0x60>
 8009880:	e000      	b.n	8009884 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009882:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	22ff      	movs	r2, #255	; 0xff
 8009888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800988c:	f001 fc62 	bl	800b154 <vPortExitCritical>
}
 8009890:	bf00      	nop
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80098a0:	f001 fc28 	bl	800b0f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d102      	bne.n	80098b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80098ac:	2301      	movs	r3, #1
 80098ae:	60fb      	str	r3, [r7, #12]
 80098b0:	e001      	b.n	80098b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80098b2:	2300      	movs	r3, #0
 80098b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80098b6:	f001 fc4d 	bl	800b154 <vPortExitCritical>

	return xReturn;
 80098ba:	68fb      	ldr	r3, [r7, #12]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80098cc:	f001 fc12 	bl	800b0f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d8:	429a      	cmp	r2, r3
 80098da:	d102      	bne.n	80098e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80098dc:	2301      	movs	r3, #1
 80098de:	60fb      	str	r3, [r7, #12]
 80098e0:	e001      	b.n	80098e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80098e2:	2300      	movs	r3, #0
 80098e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80098e6:	f001 fc35 	bl	800b154 <vPortExitCritical>

	return xReturn;
 80098ea:	68fb      	ldr	r3, [r7, #12]
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80098fe:	2300      	movs	r3, #0
 8009900:	60fb      	str	r3, [r7, #12]
 8009902:	e014      	b.n	800992e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009904:	4a0f      	ldr	r2, [pc, #60]	; (8009944 <vQueueAddToRegistry+0x50>)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10b      	bne.n	8009928 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009910:	490c      	ldr	r1, [pc, #48]	; (8009944 <vQueueAddToRegistry+0x50>)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	683a      	ldr	r2, [r7, #0]
 8009916:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800991a:	4a0a      	ldr	r2, [pc, #40]	; (8009944 <vQueueAddToRegistry+0x50>)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	00db      	lsls	r3, r3, #3
 8009920:	4413      	add	r3, r2
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009926:	e006      	b.n	8009936 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	3301      	adds	r3, #1
 800992c:	60fb      	str	r3, [r7, #12]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2b07      	cmp	r3, #7
 8009932:	d9e7      	bls.n	8009904 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009934:	bf00      	nop
 8009936:	bf00      	nop
 8009938:	3714      	adds	r7, #20
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	20001230 	.word	0x20001230

08009948 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009958:	f001 fbcc 	bl	800b0f4 <vPortEnterCritical>
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009962:	b25b      	sxtb	r3, r3
 8009964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009968:	d103      	bne.n	8009972 <vQueueWaitForMessageRestricted+0x2a>
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009978:	b25b      	sxtb	r3, r3
 800997a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997e:	d103      	bne.n	8009988 <vQueueWaitForMessageRestricted+0x40>
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	2200      	movs	r2, #0
 8009984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009988:	f001 fbe4 	bl	800b154 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009990:	2b00      	cmp	r3, #0
 8009992:	d106      	bne.n	80099a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	3324      	adds	r3, #36	; 0x24
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	68b9      	ldr	r1, [r7, #8]
 800999c:	4618      	mov	r0, r3
 800999e:	f000 fc61 	bl	800a264 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80099a2:	6978      	ldr	r0, [r7, #20]
 80099a4:	f7ff ff26 	bl	80097f4 <prvUnlockQueue>
	}
 80099a8:	bf00      	nop
 80099aa:	3718      	adds	r7, #24
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b08e      	sub	sp, #56	; 0x38
 80099b4:	af04      	add	r7, sp, #16
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	607a      	str	r2, [r7, #4]
 80099bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80099be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10a      	bne.n	80099da <xTaskCreateStatic+0x2a>
	__asm volatile
 80099c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c8:	f383 8811 	msr	BASEPRI, r3
 80099cc:	f3bf 8f6f 	isb	sy
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	623b      	str	r3, [r7, #32]
}
 80099d6:	bf00      	nop
 80099d8:	e7fe      	b.n	80099d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80099da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10a      	bne.n	80099f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	61fb      	str	r3, [r7, #28]
}
 80099f2:	bf00      	nop
 80099f4:	e7fe      	b.n	80099f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80099f6:	23bc      	movs	r3, #188	; 0xbc
 80099f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	2bbc      	cmp	r3, #188	; 0xbc
 80099fe:	d00a      	beq.n	8009a16 <xTaskCreateStatic+0x66>
	__asm volatile
 8009a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	61bb      	str	r3, [r7, #24]
}
 8009a12:	bf00      	nop
 8009a14:	e7fe      	b.n	8009a14 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009a16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d01e      	beq.n	8009a5c <xTaskCreateStatic+0xac>
 8009a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d01b      	beq.n	8009a5c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a30:	2202      	movs	r2, #2
 8009a32:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a36:	2300      	movs	r3, #0
 8009a38:	9303      	str	r3, [sp, #12]
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3c:	9302      	str	r3, [sp, #8]
 8009a3e:	f107 0314 	add.w	r3, r7, #20
 8009a42:	9301      	str	r3, [sp, #4]
 8009a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	68b9      	ldr	r1, [r7, #8]
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f000 f850 	bl	8009af4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a56:	f000 f8f3 	bl	8009c40 <prvAddNewTaskToReadyList>
 8009a5a:	e001      	b.n	8009a60 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009a60:	697b      	ldr	r3, [r7, #20]
	}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3728      	adds	r7, #40	; 0x28
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b08c      	sub	sp, #48	; 0x30
 8009a6e:	af04      	add	r7, sp, #16
 8009a70:	60f8      	str	r0, [r7, #12]
 8009a72:	60b9      	str	r1, [r7, #8]
 8009a74:	603b      	str	r3, [r7, #0]
 8009a76:	4613      	mov	r3, r2
 8009a78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009a7a:	88fb      	ldrh	r3, [r7, #6]
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f001 fc5a 	bl	800b338 <pvPortMalloc>
 8009a84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00e      	beq.n	8009aaa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009a8c:	20bc      	movs	r0, #188	; 0xbc
 8009a8e:	f001 fc53 	bl	800b338 <pvPortMalloc>
 8009a92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d003      	beq.n	8009aa2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	697a      	ldr	r2, [r7, #20]
 8009a9e:	631a      	str	r2, [r3, #48]	; 0x30
 8009aa0:	e005      	b.n	8009aae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009aa2:	6978      	ldr	r0, [r7, #20]
 8009aa4:	f001 fd14 	bl	800b4d0 <vPortFree>
 8009aa8:	e001      	b.n	8009aae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d017      	beq.n	8009ae4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009abc:	88fa      	ldrh	r2, [r7, #6]
 8009abe:	2300      	movs	r3, #0
 8009ac0:	9303      	str	r3, [sp, #12]
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	9302      	str	r3, [sp, #8]
 8009ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac8:	9301      	str	r3, [sp, #4]
 8009aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	68b9      	ldr	r1, [r7, #8]
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f000 f80e 	bl	8009af4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ad8:	69f8      	ldr	r0, [r7, #28]
 8009ada:	f000 f8b1 	bl	8009c40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	61bb      	str	r3, [r7, #24]
 8009ae2:	e002      	b.n	8009aea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009aea:	69bb      	ldr	r3, [r7, #24]
	}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3720      	adds	r7, #32
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b088      	sub	sp, #32
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	607a      	str	r2, [r7, #4]
 8009b00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	21a5      	movs	r1, #165	; 0xa5
 8009b0e:	f001 fe37 	bl	800b780 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	4413      	add	r3, r2
 8009b22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	f023 0307 	bic.w	r3, r3, #7
 8009b2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	f003 0307 	and.w	r3, r3, #7
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00a      	beq.n	8009b4c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3a:	f383 8811 	msr	BASEPRI, r3
 8009b3e:	f3bf 8f6f 	isb	sy
 8009b42:	f3bf 8f4f 	dsb	sy
 8009b46:	617b      	str	r3, [r7, #20]
}
 8009b48:	bf00      	nop
 8009b4a:	e7fe      	b.n	8009b4a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d01f      	beq.n	8009b92 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b52:	2300      	movs	r3, #0
 8009b54:	61fb      	str	r3, [r7, #28]
 8009b56:	e012      	b.n	8009b7e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b58:	68ba      	ldr	r2, [r7, #8]
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	7819      	ldrb	r1, [r3, #0]
 8009b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	4413      	add	r3, r2
 8009b66:	3334      	adds	r3, #52	; 0x34
 8009b68:	460a      	mov	r2, r1
 8009b6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	4413      	add	r3, r2
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d006      	beq.n	8009b86 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	61fb      	str	r3, [r7, #28]
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	2b0f      	cmp	r3, #15
 8009b82:	d9e9      	bls.n	8009b58 <prvInitialiseNewTask+0x64>
 8009b84:	e000      	b.n	8009b88 <prvInitialiseNewTask+0x94>
			{
				break;
 8009b86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b90:	e003      	b.n	8009b9a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9c:	2b37      	cmp	r3, #55	; 0x37
 8009b9e:	d901      	bls.n	8009ba4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ba0:	2337      	movs	r3, #55	; 0x37
 8009ba2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ba8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb8:	3304      	adds	r3, #4
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7ff f978 	bl	8008eb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc2:	3318      	adds	r3, #24
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7ff f973 	bl	8008eb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be2:	2200      	movs	r2, #0
 8009be4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf2:	3354      	adds	r3, #84	; 0x54
 8009bf4:	2260      	movs	r2, #96	; 0x60
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f001 fdc1 	bl	800b780 <memset>
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c00:	4a0c      	ldr	r2, [pc, #48]	; (8009c34 <prvInitialiseNewTask+0x140>)
 8009c02:	659a      	str	r2, [r3, #88]	; 0x58
 8009c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c06:	4a0c      	ldr	r2, [pc, #48]	; (8009c38 <prvInitialiseNewTask+0x144>)
 8009c08:	65da      	str	r2, [r3, #92]	; 0x5c
 8009c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0c:	4a0b      	ldr	r2, [pc, #44]	; (8009c3c <prvInitialiseNewTask+0x148>)
 8009c0e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c10:	683a      	ldr	r2, [r7, #0]
 8009c12:	68f9      	ldr	r1, [r7, #12]
 8009c14:	69b8      	ldr	r0, [r7, #24]
 8009c16:	f001 f941 	bl	800ae9c <pxPortInitialiseStack>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d002      	beq.n	8009c2c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c2c:	bf00      	nop
 8009c2e:	3720      	adds	r7, #32
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	0800cb6c 	.word	0x0800cb6c
 8009c38:	0800cb8c 	.word	0x0800cb8c
 8009c3c:	0800cb4c 	.word	0x0800cb4c

08009c40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009c48:	f001 fa54 	bl	800b0f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009c4c:	4b2d      	ldr	r3, [pc, #180]	; (8009d04 <prvAddNewTaskToReadyList+0xc4>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	3301      	adds	r3, #1
 8009c52:	4a2c      	ldr	r2, [pc, #176]	; (8009d04 <prvAddNewTaskToReadyList+0xc4>)
 8009c54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009c56:	4b2c      	ldr	r3, [pc, #176]	; (8009d08 <prvAddNewTaskToReadyList+0xc8>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d109      	bne.n	8009c72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009c5e:	4a2a      	ldr	r2, [pc, #168]	; (8009d08 <prvAddNewTaskToReadyList+0xc8>)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c64:	4b27      	ldr	r3, [pc, #156]	; (8009d04 <prvAddNewTaskToReadyList+0xc4>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d110      	bne.n	8009c8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009c6c:	f000 fc26 	bl	800a4bc <prvInitialiseTaskLists>
 8009c70:	e00d      	b.n	8009c8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009c72:	4b26      	ldr	r3, [pc, #152]	; (8009d0c <prvAddNewTaskToReadyList+0xcc>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d109      	bne.n	8009c8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c7a:	4b23      	ldr	r3, [pc, #140]	; (8009d08 <prvAddNewTaskToReadyList+0xc8>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d802      	bhi.n	8009c8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c88:	4a1f      	ldr	r2, [pc, #124]	; (8009d08 <prvAddNewTaskToReadyList+0xc8>)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c8e:	4b20      	ldr	r3, [pc, #128]	; (8009d10 <prvAddNewTaskToReadyList+0xd0>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3301      	adds	r3, #1
 8009c94:	4a1e      	ldr	r2, [pc, #120]	; (8009d10 <prvAddNewTaskToReadyList+0xd0>)
 8009c96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009c98:	4b1d      	ldr	r3, [pc, #116]	; (8009d10 <prvAddNewTaskToReadyList+0xd0>)
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca4:	4b1b      	ldr	r3, [pc, #108]	; (8009d14 <prvAddNewTaskToReadyList+0xd4>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d903      	bls.n	8009cb4 <prvAddNewTaskToReadyList+0x74>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb0:	4a18      	ldr	r2, [pc, #96]	; (8009d14 <prvAddNewTaskToReadyList+0xd4>)
 8009cb2:	6013      	str	r3, [r2, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb8:	4613      	mov	r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4413      	add	r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4a15      	ldr	r2, [pc, #84]	; (8009d18 <prvAddNewTaskToReadyList+0xd8>)
 8009cc2:	441a      	add	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	4619      	mov	r1, r3
 8009cca:	4610      	mov	r0, r2
 8009ccc:	f7ff f8fd 	bl	8008eca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009cd0:	f001 fa40 	bl	800b154 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009cd4:	4b0d      	ldr	r3, [pc, #52]	; (8009d0c <prvAddNewTaskToReadyList+0xcc>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00e      	beq.n	8009cfa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009cdc:	4b0a      	ldr	r3, [pc, #40]	; (8009d08 <prvAddNewTaskToReadyList+0xc8>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d207      	bcs.n	8009cfa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009cea:	4b0c      	ldr	r3, [pc, #48]	; (8009d1c <prvAddNewTaskToReadyList+0xdc>)
 8009cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cf0:	601a      	str	r2, [r3, #0]
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cfa:	bf00      	nop
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	20001744 	.word	0x20001744
 8009d08:	20001270 	.word	0x20001270
 8009d0c:	20001750 	.word	0x20001750
 8009d10:	20001760 	.word	0x20001760
 8009d14:	2000174c 	.word	0x2000174c
 8009d18:	20001274 	.word	0x20001274
 8009d1c:	e000ed04 	.word	0xe000ed04

08009d20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d017      	beq.n	8009d62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009d32:	4b13      	ldr	r3, [pc, #76]	; (8009d80 <vTaskDelay+0x60>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00a      	beq.n	8009d50 <vTaskDelay+0x30>
	__asm volatile
 8009d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3e:	f383 8811 	msr	BASEPRI, r3
 8009d42:	f3bf 8f6f 	isb	sy
 8009d46:	f3bf 8f4f 	dsb	sy
 8009d4a:	60bb      	str	r3, [r7, #8]
}
 8009d4c:	bf00      	nop
 8009d4e:	e7fe      	b.n	8009d4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009d50:	f000 f88a 	bl	8009e68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009d54:	2100      	movs	r1, #0
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 fcfe 	bl	800a758 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009d5c:	f000 f892 	bl	8009e84 <xTaskResumeAll>
 8009d60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d107      	bne.n	8009d78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009d68:	4b06      	ldr	r3, [pc, #24]	; (8009d84 <vTaskDelay+0x64>)
 8009d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d6e:	601a      	str	r2, [r3, #0]
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d78:	bf00      	nop
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	2000176c 	.word	0x2000176c
 8009d84:	e000ed04 	.word	0xe000ed04

08009d88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b08a      	sub	sp, #40	; 0x28
 8009d8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009d92:	2300      	movs	r3, #0
 8009d94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d96:	463a      	mov	r2, r7
 8009d98:	1d39      	adds	r1, r7, #4
 8009d9a:	f107 0308 	add.w	r3, r7, #8
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7ff f832 	bl	8008e08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	9202      	str	r2, [sp, #8]
 8009dac:	9301      	str	r3, [sp, #4]
 8009dae:	2300      	movs	r3, #0
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	2300      	movs	r3, #0
 8009db4:	460a      	mov	r2, r1
 8009db6:	4924      	ldr	r1, [pc, #144]	; (8009e48 <vTaskStartScheduler+0xc0>)
 8009db8:	4824      	ldr	r0, [pc, #144]	; (8009e4c <vTaskStartScheduler+0xc4>)
 8009dba:	f7ff fdf9 	bl	80099b0 <xTaskCreateStatic>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	4a23      	ldr	r2, [pc, #140]	; (8009e50 <vTaskStartScheduler+0xc8>)
 8009dc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009dc4:	4b22      	ldr	r3, [pc, #136]	; (8009e50 <vTaskStartScheduler+0xc8>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d002      	beq.n	8009dd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	617b      	str	r3, [r7, #20]
 8009dd0:	e001      	b.n	8009dd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d102      	bne.n	8009de2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009ddc:	f000 fd10 	bl	800a800 <xTimerCreateTimerTask>
 8009de0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d11b      	bne.n	8009e20 <vTaskStartScheduler+0x98>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	613b      	str	r3, [r7, #16]
}
 8009dfa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009dfc:	4b15      	ldr	r3, [pc, #84]	; (8009e54 <vTaskStartScheduler+0xcc>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	3354      	adds	r3, #84	; 0x54
 8009e02:	4a15      	ldr	r2, [pc, #84]	; (8009e58 <vTaskStartScheduler+0xd0>)
 8009e04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009e06:	4b15      	ldr	r3, [pc, #84]	; (8009e5c <vTaskStartScheduler+0xd4>)
 8009e08:	f04f 32ff 	mov.w	r2, #4294967295
 8009e0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009e0e:	4b14      	ldr	r3, [pc, #80]	; (8009e60 <vTaskStartScheduler+0xd8>)
 8009e10:	2201      	movs	r2, #1
 8009e12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009e14:	4b13      	ldr	r3, [pc, #76]	; (8009e64 <vTaskStartScheduler+0xdc>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009e1a:	f001 f8c9 	bl	800afb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009e1e:	e00e      	b.n	8009e3e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e26:	d10a      	bne.n	8009e3e <vTaskStartScheduler+0xb6>
	__asm volatile
 8009e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2c:	f383 8811 	msr	BASEPRI, r3
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	f3bf 8f4f 	dsb	sy
 8009e38:	60fb      	str	r3, [r7, #12]
}
 8009e3a:	bf00      	nop
 8009e3c:	e7fe      	b.n	8009e3c <vTaskStartScheduler+0xb4>
}
 8009e3e:	bf00      	nop
 8009e40:	3718      	adds	r7, #24
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	0800c8ec 	.word	0x0800c8ec
 8009e4c:	0800a48d 	.word	0x0800a48d
 8009e50:	20001768 	.word	0x20001768
 8009e54:	20001270 	.word	0x20001270
 8009e58:	20000104 	.word	0x20000104
 8009e5c:	20001764 	.word	0x20001764
 8009e60:	20001750 	.word	0x20001750
 8009e64:	20001748 	.word	0x20001748

08009e68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009e68:	b480      	push	{r7}
 8009e6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009e6c:	4b04      	ldr	r3, [pc, #16]	; (8009e80 <vTaskSuspendAll+0x18>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3301      	adds	r3, #1
 8009e72:	4a03      	ldr	r2, [pc, #12]	; (8009e80 <vTaskSuspendAll+0x18>)
 8009e74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009e76:	bf00      	nop
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr
 8009e80:	2000176c 	.word	0x2000176c

08009e84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009e92:	4b42      	ldr	r3, [pc, #264]	; (8009f9c <xTaskResumeAll+0x118>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10a      	bne.n	8009eb0 <xTaskResumeAll+0x2c>
	__asm volatile
 8009e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9e:	f383 8811 	msr	BASEPRI, r3
 8009ea2:	f3bf 8f6f 	isb	sy
 8009ea6:	f3bf 8f4f 	dsb	sy
 8009eaa:	603b      	str	r3, [r7, #0]
}
 8009eac:	bf00      	nop
 8009eae:	e7fe      	b.n	8009eae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009eb0:	f001 f920 	bl	800b0f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009eb4:	4b39      	ldr	r3, [pc, #228]	; (8009f9c <xTaskResumeAll+0x118>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	4a38      	ldr	r2, [pc, #224]	; (8009f9c <xTaskResumeAll+0x118>)
 8009ebc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ebe:	4b37      	ldr	r3, [pc, #220]	; (8009f9c <xTaskResumeAll+0x118>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d162      	bne.n	8009f8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ec6:	4b36      	ldr	r3, [pc, #216]	; (8009fa0 <xTaskResumeAll+0x11c>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d05e      	beq.n	8009f8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ece:	e02f      	b.n	8009f30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ed0:	4b34      	ldr	r3, [pc, #208]	; (8009fa4 <xTaskResumeAll+0x120>)
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	3318      	adds	r3, #24
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7ff f851 	bl	8008f84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7ff f84c 	bl	8008f84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef0:	4b2d      	ldr	r3, [pc, #180]	; (8009fa8 <xTaskResumeAll+0x124>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d903      	bls.n	8009f00 <xTaskResumeAll+0x7c>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efc:	4a2a      	ldr	r2, [pc, #168]	; (8009fa8 <xTaskResumeAll+0x124>)
 8009efe:	6013      	str	r3, [r2, #0]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f04:	4613      	mov	r3, r2
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4413      	add	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	4a27      	ldr	r2, [pc, #156]	; (8009fac <xTaskResumeAll+0x128>)
 8009f0e:	441a      	add	r2, r3
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3304      	adds	r3, #4
 8009f14:	4619      	mov	r1, r3
 8009f16:	4610      	mov	r0, r2
 8009f18:	f7fe ffd7 	bl	8008eca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f20:	4b23      	ldr	r3, [pc, #140]	; (8009fb0 <xTaskResumeAll+0x12c>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d302      	bcc.n	8009f30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009f2a:	4b22      	ldr	r3, [pc, #136]	; (8009fb4 <xTaskResumeAll+0x130>)
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f30:	4b1c      	ldr	r3, [pc, #112]	; (8009fa4 <xTaskResumeAll+0x120>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1cb      	bne.n	8009ed0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009f3e:	f000 fb5f 	bl	800a600 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009f42:	4b1d      	ldr	r3, [pc, #116]	; (8009fb8 <xTaskResumeAll+0x134>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d010      	beq.n	8009f70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009f4e:	f000 f847 	bl	8009fe0 <xTaskIncrementTick>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d002      	beq.n	8009f5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009f58:	4b16      	ldr	r3, [pc, #88]	; (8009fb4 <xTaskResumeAll+0x130>)
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	3b01      	subs	r3, #1
 8009f62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1f1      	bne.n	8009f4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009f6a:	4b13      	ldr	r3, [pc, #76]	; (8009fb8 <xTaskResumeAll+0x134>)
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009f70:	4b10      	ldr	r3, [pc, #64]	; (8009fb4 <xTaskResumeAll+0x130>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d009      	beq.n	8009f8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009f7c:	4b0f      	ldr	r3, [pc, #60]	; (8009fbc <xTaskResumeAll+0x138>)
 8009f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f82:	601a      	str	r2, [r3, #0]
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f8c:	f001 f8e2 	bl	800b154 <vPortExitCritical>

	return xAlreadyYielded;
 8009f90:	68bb      	ldr	r3, [r7, #8]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	2000176c 	.word	0x2000176c
 8009fa0:	20001744 	.word	0x20001744
 8009fa4:	20001704 	.word	0x20001704
 8009fa8:	2000174c 	.word	0x2000174c
 8009fac:	20001274 	.word	0x20001274
 8009fb0:	20001270 	.word	0x20001270
 8009fb4:	20001758 	.word	0x20001758
 8009fb8:	20001754 	.word	0x20001754
 8009fbc:	e000ed04 	.word	0xe000ed04

08009fc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009fc6:	4b05      	ldr	r3, [pc, #20]	; (8009fdc <xTaskGetTickCount+0x1c>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009fcc:	687b      	ldr	r3, [r7, #4]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	370c      	adds	r7, #12
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	20001748 	.word	0x20001748

08009fe0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fea:	4b4f      	ldr	r3, [pc, #316]	; (800a128 <xTaskIncrementTick+0x148>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f040 808f 	bne.w	800a112 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ff4:	4b4d      	ldr	r3, [pc, #308]	; (800a12c <xTaskIncrementTick+0x14c>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009ffc:	4a4b      	ldr	r2, [pc, #300]	; (800a12c <xTaskIncrementTick+0x14c>)
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d120      	bne.n	800a04a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a008:	4b49      	ldr	r3, [pc, #292]	; (800a130 <xTaskIncrementTick+0x150>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00a      	beq.n	800a028 <xTaskIncrementTick+0x48>
	__asm volatile
 800a012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	603b      	str	r3, [r7, #0]
}
 800a024:	bf00      	nop
 800a026:	e7fe      	b.n	800a026 <xTaskIncrementTick+0x46>
 800a028:	4b41      	ldr	r3, [pc, #260]	; (800a130 <xTaskIncrementTick+0x150>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	60fb      	str	r3, [r7, #12]
 800a02e:	4b41      	ldr	r3, [pc, #260]	; (800a134 <xTaskIncrementTick+0x154>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a3f      	ldr	r2, [pc, #252]	; (800a130 <xTaskIncrementTick+0x150>)
 800a034:	6013      	str	r3, [r2, #0]
 800a036:	4a3f      	ldr	r2, [pc, #252]	; (800a134 <xTaskIncrementTick+0x154>)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6013      	str	r3, [r2, #0]
 800a03c:	4b3e      	ldr	r3, [pc, #248]	; (800a138 <xTaskIncrementTick+0x158>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	3301      	adds	r3, #1
 800a042:	4a3d      	ldr	r2, [pc, #244]	; (800a138 <xTaskIncrementTick+0x158>)
 800a044:	6013      	str	r3, [r2, #0]
 800a046:	f000 fadb 	bl	800a600 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a04a:	4b3c      	ldr	r3, [pc, #240]	; (800a13c <xTaskIncrementTick+0x15c>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	693a      	ldr	r2, [r7, #16]
 800a050:	429a      	cmp	r2, r3
 800a052:	d349      	bcc.n	800a0e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a054:	4b36      	ldr	r3, [pc, #216]	; (800a130 <xTaskIncrementTick+0x150>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d104      	bne.n	800a068 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a05e:	4b37      	ldr	r3, [pc, #220]	; (800a13c <xTaskIncrementTick+0x15c>)
 800a060:	f04f 32ff 	mov.w	r2, #4294967295
 800a064:	601a      	str	r2, [r3, #0]
					break;
 800a066:	e03f      	b.n	800a0e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a068:	4b31      	ldr	r3, [pc, #196]	; (800a130 <xTaskIncrementTick+0x150>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a078:	693a      	ldr	r2, [r7, #16]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d203      	bcs.n	800a088 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a080:	4a2e      	ldr	r2, [pc, #184]	; (800a13c <xTaskIncrementTick+0x15c>)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a086:	e02f      	b.n	800a0e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	3304      	adds	r3, #4
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fe ff79 	bl	8008f84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a096:	2b00      	cmp	r3, #0
 800a098:	d004      	beq.n	800a0a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	3318      	adds	r3, #24
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7fe ff70 	bl	8008f84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a8:	4b25      	ldr	r3, [pc, #148]	; (800a140 <xTaskIncrementTick+0x160>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d903      	bls.n	800a0b8 <xTaskIncrementTick+0xd8>
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b4:	4a22      	ldr	r2, [pc, #136]	; (800a140 <xTaskIncrementTick+0x160>)
 800a0b6:	6013      	str	r3, [r2, #0]
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0bc:	4613      	mov	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4413      	add	r3, r2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4a1f      	ldr	r2, [pc, #124]	; (800a144 <xTaskIncrementTick+0x164>)
 800a0c6:	441a      	add	r2, r3
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	f7fe fefb 	bl	8008eca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d8:	4b1b      	ldr	r3, [pc, #108]	; (800a148 <xTaskIncrementTick+0x168>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d3b8      	bcc.n	800a054 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0e6:	e7b5      	b.n	800a054 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a0e8:	4b17      	ldr	r3, [pc, #92]	; (800a148 <xTaskIncrementTick+0x168>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ee:	4915      	ldr	r1, [pc, #84]	; (800a144 <xTaskIncrementTick+0x164>)
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	4413      	add	r3, r2
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	440b      	add	r3, r1
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d901      	bls.n	800a104 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a100:	2301      	movs	r3, #1
 800a102:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a104:	4b11      	ldr	r3, [pc, #68]	; (800a14c <xTaskIncrementTick+0x16c>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d007      	beq.n	800a11c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a10c:	2301      	movs	r3, #1
 800a10e:	617b      	str	r3, [r7, #20]
 800a110:	e004      	b.n	800a11c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a112:	4b0f      	ldr	r3, [pc, #60]	; (800a150 <xTaskIncrementTick+0x170>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3301      	adds	r3, #1
 800a118:	4a0d      	ldr	r2, [pc, #52]	; (800a150 <xTaskIncrementTick+0x170>)
 800a11a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a11c:	697b      	ldr	r3, [r7, #20]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3718      	adds	r7, #24
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	2000176c 	.word	0x2000176c
 800a12c:	20001748 	.word	0x20001748
 800a130:	200016fc 	.word	0x200016fc
 800a134:	20001700 	.word	0x20001700
 800a138:	2000175c 	.word	0x2000175c
 800a13c:	20001764 	.word	0x20001764
 800a140:	2000174c 	.word	0x2000174c
 800a144:	20001274 	.word	0x20001274
 800a148:	20001270 	.word	0x20001270
 800a14c:	20001758 	.word	0x20001758
 800a150:	20001754 	.word	0x20001754

0800a154 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a15a:	4b2a      	ldr	r3, [pc, #168]	; (800a204 <vTaskSwitchContext+0xb0>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d003      	beq.n	800a16a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a162:	4b29      	ldr	r3, [pc, #164]	; (800a208 <vTaskSwitchContext+0xb4>)
 800a164:	2201      	movs	r2, #1
 800a166:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a168:	e046      	b.n	800a1f8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a16a:	4b27      	ldr	r3, [pc, #156]	; (800a208 <vTaskSwitchContext+0xb4>)
 800a16c:	2200      	movs	r2, #0
 800a16e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a170:	4b26      	ldr	r3, [pc, #152]	; (800a20c <vTaskSwitchContext+0xb8>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	60fb      	str	r3, [r7, #12]
 800a176:	e010      	b.n	800a19a <vTaskSwitchContext+0x46>
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d10a      	bne.n	800a194 <vTaskSwitchContext+0x40>
	__asm volatile
 800a17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a182:	f383 8811 	msr	BASEPRI, r3
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	607b      	str	r3, [r7, #4]
}
 800a190:	bf00      	nop
 800a192:	e7fe      	b.n	800a192 <vTaskSwitchContext+0x3e>
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	3b01      	subs	r3, #1
 800a198:	60fb      	str	r3, [r7, #12]
 800a19a:	491d      	ldr	r1, [pc, #116]	; (800a210 <vTaskSwitchContext+0xbc>)
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4413      	add	r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	440b      	add	r3, r1
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d0e4      	beq.n	800a178 <vTaskSwitchContext+0x24>
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	4413      	add	r3, r2
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	4a15      	ldr	r2, [pc, #84]	; (800a210 <vTaskSwitchContext+0xbc>)
 800a1ba:	4413      	add	r3, r2
 800a1bc:	60bb      	str	r3, [r7, #8]
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	685a      	ldr	r2, [r3, #4]
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	605a      	str	r2, [r3, #4]
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	3308      	adds	r3, #8
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d104      	bne.n	800a1de <vTaskSwitchContext+0x8a>
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	685a      	ldr	r2, [r3, #4]
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	605a      	str	r2, [r3, #4]
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	4a0b      	ldr	r2, [pc, #44]	; (800a214 <vTaskSwitchContext+0xc0>)
 800a1e6:	6013      	str	r3, [r2, #0]
 800a1e8:	4a08      	ldr	r2, [pc, #32]	; (800a20c <vTaskSwitchContext+0xb8>)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a1ee:	4b09      	ldr	r3, [pc, #36]	; (800a214 <vTaskSwitchContext+0xc0>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	3354      	adds	r3, #84	; 0x54
 800a1f4:	4a08      	ldr	r2, [pc, #32]	; (800a218 <vTaskSwitchContext+0xc4>)
 800a1f6:	6013      	str	r3, [r2, #0]
}
 800a1f8:	bf00      	nop
 800a1fa:	3714      	adds	r7, #20
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr
 800a204:	2000176c 	.word	0x2000176c
 800a208:	20001758 	.word	0x20001758
 800a20c:	2000174c 	.word	0x2000174c
 800a210:	20001274 	.word	0x20001274
 800a214:	20001270 	.word	0x20001270
 800a218:	20000104 	.word	0x20000104

0800a21c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d10a      	bne.n	800a242 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a230:	f383 8811 	msr	BASEPRI, r3
 800a234:	f3bf 8f6f 	isb	sy
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	60fb      	str	r3, [r7, #12]
}
 800a23e:	bf00      	nop
 800a240:	e7fe      	b.n	800a240 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a242:	4b07      	ldr	r3, [pc, #28]	; (800a260 <vTaskPlaceOnEventList+0x44>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	3318      	adds	r3, #24
 800a248:	4619      	mov	r1, r3
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f7fe fe61 	bl	8008f12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a250:	2101      	movs	r1, #1
 800a252:	6838      	ldr	r0, [r7, #0]
 800a254:	f000 fa80 	bl	800a758 <prvAddCurrentTaskToDelayedList>
}
 800a258:	bf00      	nop
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	20001270 	.word	0x20001270

0800a264 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a264:	b580      	push	{r7, lr}
 800a266:	b086      	sub	sp, #24
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10a      	bne.n	800a28c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	617b      	str	r3, [r7, #20]
}
 800a288:	bf00      	nop
 800a28a:	e7fe      	b.n	800a28a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a28c:	4b0a      	ldr	r3, [pc, #40]	; (800a2b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	3318      	adds	r3, #24
 800a292:	4619      	mov	r1, r3
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f7fe fe18 	bl	8008eca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d002      	beq.n	800a2a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a2a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a2a6:	6879      	ldr	r1, [r7, #4]
 800a2a8:	68b8      	ldr	r0, [r7, #8]
 800a2aa:	f000 fa55 	bl	800a758 <prvAddCurrentTaskToDelayedList>
	}
 800a2ae:	bf00      	nop
 800a2b0:	3718      	adds	r7, #24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20001270 	.word	0x20001270

0800a2bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10a      	bne.n	800a2e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	60fb      	str	r3, [r7, #12]
}
 800a2e4:	bf00      	nop
 800a2e6:	e7fe      	b.n	800a2e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	3318      	adds	r3, #24
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7fe fe49 	bl	8008f84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2f2:	4b1e      	ldr	r3, [pc, #120]	; (800a36c <xTaskRemoveFromEventList+0xb0>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d11d      	bne.n	800a336 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	3304      	adds	r3, #4
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7fe fe40 	bl	8008f84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a308:	4b19      	ldr	r3, [pc, #100]	; (800a370 <xTaskRemoveFromEventList+0xb4>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d903      	bls.n	800a318 <xTaskRemoveFromEventList+0x5c>
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a314:	4a16      	ldr	r2, [pc, #88]	; (800a370 <xTaskRemoveFromEventList+0xb4>)
 800a316:	6013      	str	r3, [r2, #0]
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a31c:	4613      	mov	r3, r2
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	4413      	add	r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	4a13      	ldr	r2, [pc, #76]	; (800a374 <xTaskRemoveFromEventList+0xb8>)
 800a326:	441a      	add	r2, r3
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	3304      	adds	r3, #4
 800a32c:	4619      	mov	r1, r3
 800a32e:	4610      	mov	r0, r2
 800a330:	f7fe fdcb 	bl	8008eca <vListInsertEnd>
 800a334:	e005      	b.n	800a342 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	3318      	adds	r3, #24
 800a33a:	4619      	mov	r1, r3
 800a33c:	480e      	ldr	r0, [pc, #56]	; (800a378 <xTaskRemoveFromEventList+0xbc>)
 800a33e:	f7fe fdc4 	bl	8008eca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a346:	4b0d      	ldr	r3, [pc, #52]	; (800a37c <xTaskRemoveFromEventList+0xc0>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d905      	bls.n	800a35c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a350:	2301      	movs	r3, #1
 800a352:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a354:	4b0a      	ldr	r3, [pc, #40]	; (800a380 <xTaskRemoveFromEventList+0xc4>)
 800a356:	2201      	movs	r2, #1
 800a358:	601a      	str	r2, [r3, #0]
 800a35a:	e001      	b.n	800a360 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a35c:	2300      	movs	r3, #0
 800a35e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a360:	697b      	ldr	r3, [r7, #20]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3718      	adds	r7, #24
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	2000176c 	.word	0x2000176c
 800a370:	2000174c 	.word	0x2000174c
 800a374:	20001274 	.word	0x20001274
 800a378:	20001704 	.word	0x20001704
 800a37c:	20001270 	.word	0x20001270
 800a380:	20001758 	.word	0x20001758

0800a384 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a38c:	4b06      	ldr	r3, [pc, #24]	; (800a3a8 <vTaskInternalSetTimeOutState+0x24>)
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a394:	4b05      	ldr	r3, [pc, #20]	; (800a3ac <vTaskInternalSetTimeOutState+0x28>)
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	605a      	str	r2, [r3, #4]
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr
 800a3a8:	2000175c 	.word	0x2000175c
 800a3ac:	20001748 	.word	0x20001748

0800a3b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b088      	sub	sp, #32
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d10a      	bne.n	800a3d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	613b      	str	r3, [r7, #16]
}
 800a3d2:	bf00      	nop
 800a3d4:	e7fe      	b.n	800a3d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d10a      	bne.n	800a3f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e0:	f383 8811 	msr	BASEPRI, r3
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	f3bf 8f4f 	dsb	sy
 800a3ec:	60fb      	str	r3, [r7, #12]
}
 800a3ee:	bf00      	nop
 800a3f0:	e7fe      	b.n	800a3f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a3f2:	f000 fe7f 	bl	800b0f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a3f6:	4b1d      	ldr	r3, [pc, #116]	; (800a46c <xTaskCheckForTimeOut+0xbc>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	69ba      	ldr	r2, [r7, #24]
 800a402:	1ad3      	subs	r3, r2, r3
 800a404:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a40e:	d102      	bne.n	800a416 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a410:	2300      	movs	r3, #0
 800a412:	61fb      	str	r3, [r7, #28]
 800a414:	e023      	b.n	800a45e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	4b15      	ldr	r3, [pc, #84]	; (800a470 <xTaskCheckForTimeOut+0xc0>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d007      	beq.n	800a432 <xTaskCheckForTimeOut+0x82>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	69ba      	ldr	r2, [r7, #24]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d302      	bcc.n	800a432 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a42c:	2301      	movs	r3, #1
 800a42e:	61fb      	str	r3, [r7, #28]
 800a430:	e015      	b.n	800a45e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	697a      	ldr	r2, [r7, #20]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d20b      	bcs.n	800a454 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	1ad2      	subs	r2, r2, r3
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f7ff ff9b 	bl	800a384 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a44e:	2300      	movs	r3, #0
 800a450:	61fb      	str	r3, [r7, #28]
 800a452:	e004      	b.n	800a45e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	2200      	movs	r2, #0
 800a458:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a45a:	2301      	movs	r3, #1
 800a45c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a45e:	f000 fe79 	bl	800b154 <vPortExitCritical>

	return xReturn;
 800a462:	69fb      	ldr	r3, [r7, #28]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3720      	adds	r7, #32
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	20001748 	.word	0x20001748
 800a470:	2000175c 	.word	0x2000175c

0800a474 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a474:	b480      	push	{r7}
 800a476:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a478:	4b03      	ldr	r3, [pc, #12]	; (800a488 <vTaskMissedYield+0x14>)
 800a47a:	2201      	movs	r2, #1
 800a47c:	601a      	str	r2, [r3, #0]
}
 800a47e:	bf00      	nop
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	20001758 	.word	0x20001758

0800a48c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a494:	f000 f852 	bl	800a53c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a498:	4b06      	ldr	r3, [pc, #24]	; (800a4b4 <prvIdleTask+0x28>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d9f9      	bls.n	800a494 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a4a0:	4b05      	ldr	r3, [pc, #20]	; (800a4b8 <prvIdleTask+0x2c>)
 800a4a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a6:	601a      	str	r2, [r3, #0]
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a4b0:	e7f0      	b.n	800a494 <prvIdleTask+0x8>
 800a4b2:	bf00      	nop
 800a4b4:	20001274 	.word	0x20001274
 800a4b8:	e000ed04 	.word	0xe000ed04

0800a4bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	607b      	str	r3, [r7, #4]
 800a4c6:	e00c      	b.n	800a4e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	4413      	add	r3, r2
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4a12      	ldr	r2, [pc, #72]	; (800a51c <prvInitialiseTaskLists+0x60>)
 800a4d4:	4413      	add	r3, r2
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7fe fcca 	bl	8008e70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	607b      	str	r3, [r7, #4]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2b37      	cmp	r3, #55	; 0x37
 800a4e6:	d9ef      	bls.n	800a4c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a4e8:	480d      	ldr	r0, [pc, #52]	; (800a520 <prvInitialiseTaskLists+0x64>)
 800a4ea:	f7fe fcc1 	bl	8008e70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a4ee:	480d      	ldr	r0, [pc, #52]	; (800a524 <prvInitialiseTaskLists+0x68>)
 800a4f0:	f7fe fcbe 	bl	8008e70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a4f4:	480c      	ldr	r0, [pc, #48]	; (800a528 <prvInitialiseTaskLists+0x6c>)
 800a4f6:	f7fe fcbb 	bl	8008e70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a4fa:	480c      	ldr	r0, [pc, #48]	; (800a52c <prvInitialiseTaskLists+0x70>)
 800a4fc:	f7fe fcb8 	bl	8008e70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a500:	480b      	ldr	r0, [pc, #44]	; (800a530 <prvInitialiseTaskLists+0x74>)
 800a502:	f7fe fcb5 	bl	8008e70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a506:	4b0b      	ldr	r3, [pc, #44]	; (800a534 <prvInitialiseTaskLists+0x78>)
 800a508:	4a05      	ldr	r2, [pc, #20]	; (800a520 <prvInitialiseTaskLists+0x64>)
 800a50a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a50c:	4b0a      	ldr	r3, [pc, #40]	; (800a538 <prvInitialiseTaskLists+0x7c>)
 800a50e:	4a05      	ldr	r2, [pc, #20]	; (800a524 <prvInitialiseTaskLists+0x68>)
 800a510:	601a      	str	r2, [r3, #0]
}
 800a512:	bf00      	nop
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	20001274 	.word	0x20001274
 800a520:	200016d4 	.word	0x200016d4
 800a524:	200016e8 	.word	0x200016e8
 800a528:	20001704 	.word	0x20001704
 800a52c:	20001718 	.word	0x20001718
 800a530:	20001730 	.word	0x20001730
 800a534:	200016fc 	.word	0x200016fc
 800a538:	20001700 	.word	0x20001700

0800a53c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a542:	e019      	b.n	800a578 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a544:	f000 fdd6 	bl	800b0f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a548:	4b10      	ldr	r3, [pc, #64]	; (800a58c <prvCheckTasksWaitingTermination+0x50>)
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	3304      	adds	r3, #4
 800a554:	4618      	mov	r0, r3
 800a556:	f7fe fd15 	bl	8008f84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a55a:	4b0d      	ldr	r3, [pc, #52]	; (800a590 <prvCheckTasksWaitingTermination+0x54>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	3b01      	subs	r3, #1
 800a560:	4a0b      	ldr	r2, [pc, #44]	; (800a590 <prvCheckTasksWaitingTermination+0x54>)
 800a562:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a564:	4b0b      	ldr	r3, [pc, #44]	; (800a594 <prvCheckTasksWaitingTermination+0x58>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	3b01      	subs	r3, #1
 800a56a:	4a0a      	ldr	r2, [pc, #40]	; (800a594 <prvCheckTasksWaitingTermination+0x58>)
 800a56c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a56e:	f000 fdf1 	bl	800b154 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f810 	bl	800a598 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a578:	4b06      	ldr	r3, [pc, #24]	; (800a594 <prvCheckTasksWaitingTermination+0x58>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1e1      	bne.n	800a544 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a580:	bf00      	nop
 800a582:	bf00      	nop
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	20001718 	.word	0x20001718
 800a590:	20001744 	.word	0x20001744
 800a594:	2000172c 	.word	0x2000172c

0800a598 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	3354      	adds	r3, #84	; 0x54
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f001 f901 	bl	800b7ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d108      	bne.n	800a5c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f000 ff89 	bl	800b4d0 <vPortFree>
				vPortFree( pxTCB );
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 ff86 	bl	800b4d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a5c4:	e018      	b.n	800a5f8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d103      	bne.n	800a5d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 ff7d 	bl	800b4d0 <vPortFree>
	}
 800a5d6:	e00f      	b.n	800a5f8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d00a      	beq.n	800a5f8 <prvDeleteTCB+0x60>
	__asm volatile
 800a5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e6:	f383 8811 	msr	BASEPRI, r3
 800a5ea:	f3bf 8f6f 	isb	sy
 800a5ee:	f3bf 8f4f 	dsb	sy
 800a5f2:	60fb      	str	r3, [r7, #12]
}
 800a5f4:	bf00      	nop
 800a5f6:	e7fe      	b.n	800a5f6 <prvDeleteTCB+0x5e>
	}
 800a5f8:	bf00      	nop
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a606:	4b0c      	ldr	r3, [pc, #48]	; (800a638 <prvResetNextTaskUnblockTime+0x38>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d104      	bne.n	800a61a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a610:	4b0a      	ldr	r3, [pc, #40]	; (800a63c <prvResetNextTaskUnblockTime+0x3c>)
 800a612:	f04f 32ff 	mov.w	r2, #4294967295
 800a616:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a618:	e008      	b.n	800a62c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a61a:	4b07      	ldr	r3, [pc, #28]	; (800a638 <prvResetNextTaskUnblockTime+0x38>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	4a04      	ldr	r2, [pc, #16]	; (800a63c <prvResetNextTaskUnblockTime+0x3c>)
 800a62a:	6013      	str	r3, [r2, #0]
}
 800a62c:	bf00      	nop
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr
 800a638:	200016fc 	.word	0x200016fc
 800a63c:	20001764 	.word	0x20001764

0800a640 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a646:	4b0b      	ldr	r3, [pc, #44]	; (800a674 <xTaskGetSchedulerState+0x34>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d102      	bne.n	800a654 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a64e:	2301      	movs	r3, #1
 800a650:	607b      	str	r3, [r7, #4]
 800a652:	e008      	b.n	800a666 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a654:	4b08      	ldr	r3, [pc, #32]	; (800a678 <xTaskGetSchedulerState+0x38>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d102      	bne.n	800a662 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a65c:	2302      	movs	r3, #2
 800a65e:	607b      	str	r3, [r7, #4]
 800a660:	e001      	b.n	800a666 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a662:	2300      	movs	r3, #0
 800a664:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a666:	687b      	ldr	r3, [r7, #4]
	}
 800a668:	4618      	mov	r0, r3
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr
 800a674:	20001750 	.word	0x20001750
 800a678:	2000176c 	.word	0x2000176c

0800a67c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b086      	sub	sp, #24
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a688:	2300      	movs	r3, #0
 800a68a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d056      	beq.n	800a740 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a692:	4b2e      	ldr	r3, [pc, #184]	; (800a74c <xTaskPriorityDisinherit+0xd0>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	693a      	ldr	r2, [r7, #16]
 800a698:	429a      	cmp	r2, r3
 800a69a:	d00a      	beq.n	800a6b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a0:	f383 8811 	msr	BASEPRI, r3
 800a6a4:	f3bf 8f6f 	isb	sy
 800a6a8:	f3bf 8f4f 	dsb	sy
 800a6ac:	60fb      	str	r3, [r7, #12]
}
 800a6ae:	bf00      	nop
 800a6b0:	e7fe      	b.n	800a6b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d10a      	bne.n	800a6d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6be:	f383 8811 	msr	BASEPRI, r3
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	60bb      	str	r3, [r7, #8]
}
 800a6cc:	bf00      	nop
 800a6ce:	e7fe      	b.n	800a6ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6d4:	1e5a      	subs	r2, r3, #1
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d02c      	beq.n	800a740 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d128      	bne.n	800a740 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	3304      	adds	r3, #4
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7fe fc46 	bl	8008f84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a704:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a710:	4b0f      	ldr	r3, [pc, #60]	; (800a750 <xTaskPriorityDisinherit+0xd4>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	429a      	cmp	r2, r3
 800a716:	d903      	bls.n	800a720 <xTaskPriorityDisinherit+0xa4>
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a71c:	4a0c      	ldr	r2, [pc, #48]	; (800a750 <xTaskPriorityDisinherit+0xd4>)
 800a71e:	6013      	str	r3, [r2, #0]
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a724:	4613      	mov	r3, r2
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	4413      	add	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4a09      	ldr	r2, [pc, #36]	; (800a754 <xTaskPriorityDisinherit+0xd8>)
 800a72e:	441a      	add	r2, r3
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	3304      	adds	r3, #4
 800a734:	4619      	mov	r1, r3
 800a736:	4610      	mov	r0, r2
 800a738:	f7fe fbc7 	bl	8008eca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a73c:	2301      	movs	r3, #1
 800a73e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a740:	697b      	ldr	r3, [r7, #20]
	}
 800a742:	4618      	mov	r0, r3
 800a744:	3718      	adds	r7, #24
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	20001270 	.word	0x20001270
 800a750:	2000174c 	.word	0x2000174c
 800a754:	20001274 	.word	0x20001274

0800a758 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a762:	4b21      	ldr	r3, [pc, #132]	; (800a7e8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a768:	4b20      	ldr	r3, [pc, #128]	; (800a7ec <prvAddCurrentTaskToDelayedList+0x94>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	3304      	adds	r3, #4
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fe fc08 	bl	8008f84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a77a:	d10a      	bne.n	800a792 <prvAddCurrentTaskToDelayedList+0x3a>
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d007      	beq.n	800a792 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a782:	4b1a      	ldr	r3, [pc, #104]	; (800a7ec <prvAddCurrentTaskToDelayedList+0x94>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	3304      	adds	r3, #4
 800a788:	4619      	mov	r1, r3
 800a78a:	4819      	ldr	r0, [pc, #100]	; (800a7f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800a78c:	f7fe fb9d 	bl	8008eca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a790:	e026      	b.n	800a7e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4413      	add	r3, r2
 800a798:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a79a:	4b14      	ldr	r3, [pc, #80]	; (800a7ec <prvAddCurrentTaskToDelayedList+0x94>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d209      	bcs.n	800a7be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7aa:	4b12      	ldr	r3, [pc, #72]	; (800a7f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	4b0f      	ldr	r3, [pc, #60]	; (800a7ec <prvAddCurrentTaskToDelayedList+0x94>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	3304      	adds	r3, #4
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	4610      	mov	r0, r2
 800a7b8:	f7fe fbab 	bl	8008f12 <vListInsert>
}
 800a7bc:	e010      	b.n	800a7e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7be:	4b0e      	ldr	r3, [pc, #56]	; (800a7f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	4b0a      	ldr	r3, [pc, #40]	; (800a7ec <prvAddCurrentTaskToDelayedList+0x94>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	3304      	adds	r3, #4
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	4610      	mov	r0, r2
 800a7cc:	f7fe fba1 	bl	8008f12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a7d0:	4b0a      	ldr	r3, [pc, #40]	; (800a7fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d202      	bcs.n	800a7e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a7da:	4a08      	ldr	r2, [pc, #32]	; (800a7fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	6013      	str	r3, [r2, #0]
}
 800a7e0:	bf00      	nop
 800a7e2:	3710      	adds	r7, #16
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	20001748 	.word	0x20001748
 800a7ec:	20001270 	.word	0x20001270
 800a7f0:	20001730 	.word	0x20001730
 800a7f4:	20001700 	.word	0x20001700
 800a7f8:	200016fc 	.word	0x200016fc
 800a7fc:	20001764 	.word	0x20001764

0800a800 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b08a      	sub	sp, #40	; 0x28
 800a804:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a806:	2300      	movs	r3, #0
 800a808:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a80a:	f000 fb07 	bl	800ae1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a80e:	4b1c      	ldr	r3, [pc, #112]	; (800a880 <xTimerCreateTimerTask+0x80>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d021      	beq.n	800a85a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a816:	2300      	movs	r3, #0
 800a818:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a81a:	2300      	movs	r3, #0
 800a81c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a81e:	1d3a      	adds	r2, r7, #4
 800a820:	f107 0108 	add.w	r1, r7, #8
 800a824:	f107 030c 	add.w	r3, r7, #12
 800a828:	4618      	mov	r0, r3
 800a82a:	f7fe fb07 	bl	8008e3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a82e:	6879      	ldr	r1, [r7, #4]
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	9202      	str	r2, [sp, #8]
 800a836:	9301      	str	r3, [sp, #4]
 800a838:	2302      	movs	r3, #2
 800a83a:	9300      	str	r3, [sp, #0]
 800a83c:	2300      	movs	r3, #0
 800a83e:	460a      	mov	r2, r1
 800a840:	4910      	ldr	r1, [pc, #64]	; (800a884 <xTimerCreateTimerTask+0x84>)
 800a842:	4811      	ldr	r0, [pc, #68]	; (800a888 <xTimerCreateTimerTask+0x88>)
 800a844:	f7ff f8b4 	bl	80099b0 <xTaskCreateStatic>
 800a848:	4603      	mov	r3, r0
 800a84a:	4a10      	ldr	r2, [pc, #64]	; (800a88c <xTimerCreateTimerTask+0x8c>)
 800a84c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a84e:	4b0f      	ldr	r3, [pc, #60]	; (800a88c <xTimerCreateTimerTask+0x8c>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d001      	beq.n	800a85a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a856:	2301      	movs	r3, #1
 800a858:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d10a      	bne.n	800a876 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	613b      	str	r3, [r7, #16]
}
 800a872:	bf00      	nop
 800a874:	e7fe      	b.n	800a874 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a876:	697b      	ldr	r3, [r7, #20]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3718      	adds	r7, #24
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	200017a0 	.word	0x200017a0
 800a884:	0800c8f4 	.word	0x0800c8f4
 800a888:	0800a9c5 	.word	0x0800a9c5
 800a88c:	200017a4 	.word	0x200017a4

0800a890 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b08a      	sub	sp, #40	; 0x28
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	607a      	str	r2, [r7, #4]
 800a89c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d10a      	bne.n	800a8be <xTimerGenericCommand+0x2e>
	__asm volatile
 800a8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ac:	f383 8811 	msr	BASEPRI, r3
 800a8b0:	f3bf 8f6f 	isb	sy
 800a8b4:	f3bf 8f4f 	dsb	sy
 800a8b8:	623b      	str	r3, [r7, #32]
}
 800a8ba:	bf00      	nop
 800a8bc:	e7fe      	b.n	800a8bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a8be:	4b1a      	ldr	r3, [pc, #104]	; (800a928 <xTimerGenericCommand+0x98>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d02a      	beq.n	800a91c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	2b05      	cmp	r3, #5
 800a8d6:	dc18      	bgt.n	800a90a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a8d8:	f7ff feb2 	bl	800a640 <xTaskGetSchedulerState>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	d109      	bne.n	800a8f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a8e2:	4b11      	ldr	r3, [pc, #68]	; (800a928 <xTimerGenericCommand+0x98>)
 800a8e4:	6818      	ldr	r0, [r3, #0]
 800a8e6:	f107 0110 	add.w	r1, r7, #16
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8ee:	f7fe fc77 	bl	80091e0 <xQueueGenericSend>
 800a8f2:	6278      	str	r0, [r7, #36]	; 0x24
 800a8f4:	e012      	b.n	800a91c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a8f6:	4b0c      	ldr	r3, [pc, #48]	; (800a928 <xTimerGenericCommand+0x98>)
 800a8f8:	6818      	ldr	r0, [r3, #0]
 800a8fa:	f107 0110 	add.w	r1, r7, #16
 800a8fe:	2300      	movs	r3, #0
 800a900:	2200      	movs	r2, #0
 800a902:	f7fe fc6d 	bl	80091e0 <xQueueGenericSend>
 800a906:	6278      	str	r0, [r7, #36]	; 0x24
 800a908:	e008      	b.n	800a91c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a90a:	4b07      	ldr	r3, [pc, #28]	; (800a928 <xTimerGenericCommand+0x98>)
 800a90c:	6818      	ldr	r0, [r3, #0]
 800a90e:	f107 0110 	add.w	r1, r7, #16
 800a912:	2300      	movs	r3, #0
 800a914:	683a      	ldr	r2, [r7, #0]
 800a916:	f7fe fd61 	bl	80093dc <xQueueGenericSendFromISR>
 800a91a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3728      	adds	r7, #40	; 0x28
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	200017a0 	.word	0x200017a0

0800a92c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b088      	sub	sp, #32
 800a930:	af02      	add	r7, sp, #8
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a936:	4b22      	ldr	r3, [pc, #136]	; (800a9c0 <prvProcessExpiredTimer+0x94>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	3304      	adds	r3, #4
 800a944:	4618      	mov	r0, r3
 800a946:	f7fe fb1d 	bl	8008f84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a950:	f003 0304 	and.w	r3, r3, #4
 800a954:	2b00      	cmp	r3, #0
 800a956:	d022      	beq.n	800a99e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	699a      	ldr	r2, [r3, #24]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	18d1      	adds	r1, r2, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	683a      	ldr	r2, [r7, #0]
 800a964:	6978      	ldr	r0, [r7, #20]
 800a966:	f000 f8d1 	bl	800ab0c <prvInsertTimerInActiveList>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d01f      	beq.n	800a9b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a970:	2300      	movs	r3, #0
 800a972:	9300      	str	r3, [sp, #0]
 800a974:	2300      	movs	r3, #0
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	2100      	movs	r1, #0
 800a97a:	6978      	ldr	r0, [r7, #20]
 800a97c:	f7ff ff88 	bl	800a890 <xTimerGenericCommand>
 800a980:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d113      	bne.n	800a9b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98c:	f383 8811 	msr	BASEPRI, r3
 800a990:	f3bf 8f6f 	isb	sy
 800a994:	f3bf 8f4f 	dsb	sy
 800a998:	60fb      	str	r3, [r7, #12]
}
 800a99a:	bf00      	nop
 800a99c:	e7fe      	b.n	800a99c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9a4:	f023 0301 	bic.w	r3, r3, #1
 800a9a8:	b2da      	uxtb	r2, r3
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	6a1b      	ldr	r3, [r3, #32]
 800a9b4:	6978      	ldr	r0, [r7, #20]
 800a9b6:	4798      	blx	r3
}
 800a9b8:	bf00      	nop
 800a9ba:	3718      	adds	r7, #24
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	20001798 	.word	0x20001798

0800a9c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a9cc:	f107 0308 	add.w	r3, r7, #8
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f000 f857 	bl	800aa84 <prvGetNextExpireTime>
 800a9d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	4619      	mov	r1, r3
 800a9dc:	68f8      	ldr	r0, [r7, #12]
 800a9de:	f000 f803 	bl	800a9e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a9e2:	f000 f8d5 	bl	800ab90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a9e6:	e7f1      	b.n	800a9cc <prvTimerTask+0x8>

0800a9e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a9f2:	f7ff fa39 	bl	8009e68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9f6:	f107 0308 	add.w	r3, r7, #8
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f000 f866 	bl	800aacc <prvSampleTimeNow>
 800aa00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d130      	bne.n	800aa6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d10a      	bne.n	800aa24 <prvProcessTimerOrBlockTask+0x3c>
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d806      	bhi.n	800aa24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aa16:	f7ff fa35 	bl	8009e84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aa1a:	68f9      	ldr	r1, [r7, #12]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f7ff ff85 	bl	800a92c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aa22:	e024      	b.n	800aa6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d008      	beq.n	800aa3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aa2a:	4b13      	ldr	r3, [pc, #76]	; (800aa78 <prvProcessTimerOrBlockTask+0x90>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d101      	bne.n	800aa38 <prvProcessTimerOrBlockTask+0x50>
 800aa34:	2301      	movs	r3, #1
 800aa36:	e000      	b.n	800aa3a <prvProcessTimerOrBlockTask+0x52>
 800aa38:	2300      	movs	r3, #0
 800aa3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aa3c:	4b0f      	ldr	r3, [pc, #60]	; (800aa7c <prvProcessTimerOrBlockTask+0x94>)
 800aa3e:	6818      	ldr	r0, [r3, #0]
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	1ad3      	subs	r3, r2, r3
 800aa46:	683a      	ldr	r2, [r7, #0]
 800aa48:	4619      	mov	r1, r3
 800aa4a:	f7fe ff7d 	bl	8009948 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aa4e:	f7ff fa19 	bl	8009e84 <xTaskResumeAll>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d10a      	bne.n	800aa6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aa58:	4b09      	ldr	r3, [pc, #36]	; (800aa80 <prvProcessTimerOrBlockTask+0x98>)
 800aa5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa5e:	601a      	str	r2, [r3, #0]
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	f3bf 8f6f 	isb	sy
}
 800aa68:	e001      	b.n	800aa6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aa6a:	f7ff fa0b 	bl	8009e84 <xTaskResumeAll>
}
 800aa6e:	bf00      	nop
 800aa70:	3710      	adds	r7, #16
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	2000179c 	.word	0x2000179c
 800aa7c:	200017a0 	.word	0x200017a0
 800aa80:	e000ed04 	.word	0xe000ed04

0800aa84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa8c:	4b0e      	ldr	r3, [pc, #56]	; (800aac8 <prvGetNextExpireTime+0x44>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d101      	bne.n	800aa9a <prvGetNextExpireTime+0x16>
 800aa96:	2201      	movs	r2, #1
 800aa98:	e000      	b.n	800aa9c <prvGetNextExpireTime+0x18>
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d105      	bne.n	800aab4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aaa8:	4b07      	ldr	r3, [pc, #28]	; (800aac8 <prvGetNextExpireTime+0x44>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	60fb      	str	r3, [r7, #12]
 800aab2:	e001      	b.n	800aab8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aab4:	2300      	movs	r3, #0
 800aab6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aab8:	68fb      	ldr	r3, [r7, #12]
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3714      	adds	r7, #20
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop
 800aac8:	20001798 	.word	0x20001798

0800aacc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aad4:	f7ff fa74 	bl	8009fc0 <xTaskGetTickCount>
 800aad8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aada:	4b0b      	ldr	r3, [pc, #44]	; (800ab08 <prvSampleTimeNow+0x3c>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d205      	bcs.n	800aaf0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aae4:	f000 f936 	bl	800ad54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2201      	movs	r2, #1
 800aaec:	601a      	str	r2, [r3, #0]
 800aaee:	e002      	b.n	800aaf6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aaf6:	4a04      	ldr	r2, [pc, #16]	; (800ab08 <prvSampleTimeNow+0x3c>)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aafc:	68fb      	ldr	r3, [r7, #12]
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3710      	adds	r7, #16
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	200017a8 	.word	0x200017a8

0800ab0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b086      	sub	sp, #24
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
 800ab18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ab2a:	68ba      	ldr	r2, [r7, #8]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d812      	bhi.n	800ab58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	1ad2      	subs	r2, r2, r3
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	699b      	ldr	r3, [r3, #24]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d302      	bcc.n	800ab46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ab40:	2301      	movs	r3, #1
 800ab42:	617b      	str	r3, [r7, #20]
 800ab44:	e01b      	b.n	800ab7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ab46:	4b10      	ldr	r3, [pc, #64]	; (800ab88 <prvInsertTimerInActiveList+0x7c>)
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	3304      	adds	r3, #4
 800ab4e:	4619      	mov	r1, r3
 800ab50:	4610      	mov	r0, r2
 800ab52:	f7fe f9de 	bl	8008f12 <vListInsert>
 800ab56:	e012      	b.n	800ab7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d206      	bcs.n	800ab6e <prvInsertTimerInActiveList+0x62>
 800ab60:	68ba      	ldr	r2, [r7, #8]
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d302      	bcc.n	800ab6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	617b      	str	r3, [r7, #20]
 800ab6c:	e007      	b.n	800ab7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab6e:	4b07      	ldr	r3, [pc, #28]	; (800ab8c <prvInsertTimerInActiveList+0x80>)
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	3304      	adds	r3, #4
 800ab76:	4619      	mov	r1, r3
 800ab78:	4610      	mov	r0, r2
 800ab7a:	f7fe f9ca 	bl	8008f12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ab7e:	697b      	ldr	r3, [r7, #20]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3718      	adds	r7, #24
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	2000179c 	.word	0x2000179c
 800ab8c:	20001798 	.word	0x20001798

0800ab90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b08e      	sub	sp, #56	; 0x38
 800ab94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab96:	e0ca      	b.n	800ad2e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	da18      	bge.n	800abd0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ab9e:	1d3b      	adds	r3, r7, #4
 800aba0:	3304      	adds	r3, #4
 800aba2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d10a      	bne.n	800abc0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800abaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abae:	f383 8811 	msr	BASEPRI, r3
 800abb2:	f3bf 8f6f 	isb	sy
 800abb6:	f3bf 8f4f 	dsb	sy
 800abba:	61fb      	str	r3, [r7, #28]
}
 800abbc:	bf00      	nop
 800abbe:	e7fe      	b.n	800abbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800abc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abc6:	6850      	ldr	r0, [r2, #4]
 800abc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abca:	6892      	ldr	r2, [r2, #8]
 800abcc:	4611      	mov	r1, r2
 800abce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	f2c0 80aa 	blt.w	800ad2c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800abdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abde:	695b      	ldr	r3, [r3, #20]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d004      	beq.n	800abee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe6:	3304      	adds	r3, #4
 800abe8:	4618      	mov	r0, r3
 800abea:	f7fe f9cb 	bl	8008f84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800abee:	463b      	mov	r3, r7
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7ff ff6b 	bl	800aacc <prvSampleTimeNow>
 800abf6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2b09      	cmp	r3, #9
 800abfc:	f200 8097 	bhi.w	800ad2e <prvProcessReceivedCommands+0x19e>
 800ac00:	a201      	add	r2, pc, #4	; (adr r2, 800ac08 <prvProcessReceivedCommands+0x78>)
 800ac02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac06:	bf00      	nop
 800ac08:	0800ac31 	.word	0x0800ac31
 800ac0c:	0800ac31 	.word	0x0800ac31
 800ac10:	0800ac31 	.word	0x0800ac31
 800ac14:	0800aca5 	.word	0x0800aca5
 800ac18:	0800acb9 	.word	0x0800acb9
 800ac1c:	0800ad03 	.word	0x0800ad03
 800ac20:	0800ac31 	.word	0x0800ac31
 800ac24:	0800ac31 	.word	0x0800ac31
 800ac28:	0800aca5 	.word	0x0800aca5
 800ac2c:	0800acb9 	.word	0x0800acb9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac36:	f043 0301 	orr.w	r3, r3, #1
 800ac3a:	b2da      	uxtb	r2, r3
 800ac3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ac42:	68ba      	ldr	r2, [r7, #8]
 800ac44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac46:	699b      	ldr	r3, [r3, #24]
 800ac48:	18d1      	adds	r1, r2, r3
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac50:	f7ff ff5c 	bl	800ab0c <prvInsertTimerInActiveList>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d069      	beq.n	800ad2e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac68:	f003 0304 	and.w	r3, r3, #4
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d05e      	beq.n	800ad2e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ac70:	68ba      	ldr	r2, [r7, #8]
 800ac72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac74:	699b      	ldr	r3, [r3, #24]
 800ac76:	441a      	add	r2, r3
 800ac78:	2300      	movs	r3, #0
 800ac7a:	9300      	str	r3, [sp, #0]
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	2100      	movs	r1, #0
 800ac80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac82:	f7ff fe05 	bl	800a890 <xTimerGenericCommand>
 800ac86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ac88:	6a3b      	ldr	r3, [r7, #32]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d14f      	bne.n	800ad2e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ac8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac92:	f383 8811 	msr	BASEPRI, r3
 800ac96:	f3bf 8f6f 	isb	sy
 800ac9a:	f3bf 8f4f 	dsb	sy
 800ac9e:	61bb      	str	r3, [r7, #24]
}
 800aca0:	bf00      	nop
 800aca2:	e7fe      	b.n	800aca2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acaa:	f023 0301 	bic.w	r3, r3, #1
 800acae:	b2da      	uxtb	r2, r3
 800acb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800acb6:	e03a      	b.n	800ad2e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800acb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acbe:	f043 0301 	orr.w	r3, r3, #1
 800acc2:	b2da      	uxtb	r2, r3
 800acc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800acca:	68ba      	ldr	r2, [r7, #8]
 800accc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800acd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd2:	699b      	ldr	r3, [r3, #24]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10a      	bne.n	800acee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800acd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acdc:	f383 8811 	msr	BASEPRI, r3
 800ace0:	f3bf 8f6f 	isb	sy
 800ace4:	f3bf 8f4f 	dsb	sy
 800ace8:	617b      	str	r3, [r7, #20]
}
 800acea:	bf00      	nop
 800acec:	e7fe      	b.n	800acec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800acee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf0:	699a      	ldr	r2, [r3, #24]
 800acf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf4:	18d1      	adds	r1, r2, r3
 800acf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acfc:	f7ff ff06 	bl	800ab0c <prvInsertTimerInActiveList>
					break;
 800ad00:	e015      	b.n	800ad2e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ad02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad08:	f003 0302 	and.w	r3, r3, #2
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d103      	bne.n	800ad18 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ad10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad12:	f000 fbdd 	bl	800b4d0 <vPortFree>
 800ad16:	e00a      	b.n	800ad2e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad1e:	f023 0301 	bic.w	r3, r3, #1
 800ad22:	b2da      	uxtb	r2, r3
 800ad24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ad2a:	e000      	b.n	800ad2e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ad2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad2e:	4b08      	ldr	r3, [pc, #32]	; (800ad50 <prvProcessReceivedCommands+0x1c0>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	1d39      	adds	r1, r7, #4
 800ad34:	2200      	movs	r2, #0
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fe fbec 	bl	8009514 <xQueueReceive>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f47f af2a 	bne.w	800ab98 <prvProcessReceivedCommands+0x8>
	}
}
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop
 800ad48:	3730      	adds	r7, #48	; 0x30
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	200017a0 	.word	0x200017a0

0800ad54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b088      	sub	sp, #32
 800ad58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad5a:	e048      	b.n	800adee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad5c:	4b2d      	ldr	r3, [pc, #180]	; (800ae14 <prvSwitchTimerLists+0xc0>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68db      	ldr	r3, [r3, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad66:	4b2b      	ldr	r3, [pc, #172]	; (800ae14 <prvSwitchTimerLists+0xc0>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	3304      	adds	r3, #4
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7fe f905 	bl	8008f84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	6a1b      	ldr	r3, [r3, #32]
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad88:	f003 0304 	and.w	r3, r3, #4
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d02e      	beq.n	800adee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	699b      	ldr	r3, [r3, #24]
 800ad94:	693a      	ldr	r2, [r7, #16]
 800ad96:	4413      	add	r3, r2
 800ad98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ad9a:	68ba      	ldr	r2, [r7, #8]
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d90e      	bls.n	800adc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	68ba      	ldr	r2, [r7, #8]
 800ada6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800adae:	4b19      	ldr	r3, [pc, #100]	; (800ae14 <prvSwitchTimerLists+0xc0>)
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	3304      	adds	r3, #4
 800adb6:	4619      	mov	r1, r3
 800adb8:	4610      	mov	r0, r2
 800adba:	f7fe f8aa 	bl	8008f12 <vListInsert>
 800adbe:	e016      	b.n	800adee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800adc0:	2300      	movs	r3, #0
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	2300      	movs	r3, #0
 800adc6:	693a      	ldr	r2, [r7, #16]
 800adc8:	2100      	movs	r1, #0
 800adca:	68f8      	ldr	r0, [r7, #12]
 800adcc:	f7ff fd60 	bl	800a890 <xTimerGenericCommand>
 800add0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d10a      	bne.n	800adee <prvSwitchTimerLists+0x9a>
	__asm volatile
 800add8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800addc:	f383 8811 	msr	BASEPRI, r3
 800ade0:	f3bf 8f6f 	isb	sy
 800ade4:	f3bf 8f4f 	dsb	sy
 800ade8:	603b      	str	r3, [r7, #0]
}
 800adea:	bf00      	nop
 800adec:	e7fe      	b.n	800adec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800adee:	4b09      	ldr	r3, [pc, #36]	; (800ae14 <prvSwitchTimerLists+0xc0>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d1b1      	bne.n	800ad5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800adf8:	4b06      	ldr	r3, [pc, #24]	; (800ae14 <prvSwitchTimerLists+0xc0>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800adfe:	4b06      	ldr	r3, [pc, #24]	; (800ae18 <prvSwitchTimerLists+0xc4>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a04      	ldr	r2, [pc, #16]	; (800ae14 <prvSwitchTimerLists+0xc0>)
 800ae04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ae06:	4a04      	ldr	r2, [pc, #16]	; (800ae18 <prvSwitchTimerLists+0xc4>)
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	6013      	str	r3, [r2, #0]
}
 800ae0c:	bf00      	nop
 800ae0e:	3718      	adds	r7, #24
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	20001798 	.word	0x20001798
 800ae18:	2000179c 	.word	0x2000179c

0800ae1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ae22:	f000 f967 	bl	800b0f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ae26:	4b15      	ldr	r3, [pc, #84]	; (800ae7c <prvCheckForValidListAndQueue+0x60>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d120      	bne.n	800ae70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ae2e:	4814      	ldr	r0, [pc, #80]	; (800ae80 <prvCheckForValidListAndQueue+0x64>)
 800ae30:	f7fe f81e 	bl	8008e70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ae34:	4813      	ldr	r0, [pc, #76]	; (800ae84 <prvCheckForValidListAndQueue+0x68>)
 800ae36:	f7fe f81b 	bl	8008e70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ae3a:	4b13      	ldr	r3, [pc, #76]	; (800ae88 <prvCheckForValidListAndQueue+0x6c>)
 800ae3c:	4a10      	ldr	r2, [pc, #64]	; (800ae80 <prvCheckForValidListAndQueue+0x64>)
 800ae3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ae40:	4b12      	ldr	r3, [pc, #72]	; (800ae8c <prvCheckForValidListAndQueue+0x70>)
 800ae42:	4a10      	ldr	r2, [pc, #64]	; (800ae84 <prvCheckForValidListAndQueue+0x68>)
 800ae44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ae46:	2300      	movs	r3, #0
 800ae48:	9300      	str	r3, [sp, #0]
 800ae4a:	4b11      	ldr	r3, [pc, #68]	; (800ae90 <prvCheckForValidListAndQueue+0x74>)
 800ae4c:	4a11      	ldr	r2, [pc, #68]	; (800ae94 <prvCheckForValidListAndQueue+0x78>)
 800ae4e:	2110      	movs	r1, #16
 800ae50:	200a      	movs	r0, #10
 800ae52:	f7fe f929 	bl	80090a8 <xQueueGenericCreateStatic>
 800ae56:	4603      	mov	r3, r0
 800ae58:	4a08      	ldr	r2, [pc, #32]	; (800ae7c <prvCheckForValidListAndQueue+0x60>)
 800ae5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ae5c:	4b07      	ldr	r3, [pc, #28]	; (800ae7c <prvCheckForValidListAndQueue+0x60>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d005      	beq.n	800ae70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ae64:	4b05      	ldr	r3, [pc, #20]	; (800ae7c <prvCheckForValidListAndQueue+0x60>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	490b      	ldr	r1, [pc, #44]	; (800ae98 <prvCheckForValidListAndQueue+0x7c>)
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fe fd42 	bl	80098f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae70:	f000 f970 	bl	800b154 <vPortExitCritical>
}
 800ae74:	bf00      	nop
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	200017a0 	.word	0x200017a0
 800ae80:	20001770 	.word	0x20001770
 800ae84:	20001784 	.word	0x20001784
 800ae88:	20001798 	.word	0x20001798
 800ae8c:	2000179c 	.word	0x2000179c
 800ae90:	2000184c 	.word	0x2000184c
 800ae94:	200017ac 	.word	0x200017ac
 800ae98:	0800c8fc 	.word	0x0800c8fc

0800ae9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	3b04      	subs	r3, #4
 800aeac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aeb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	3b04      	subs	r3, #4
 800aeba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	f023 0201 	bic.w	r2, r3, #1
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	3b04      	subs	r3, #4
 800aeca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aecc:	4a0c      	ldr	r2, [pc, #48]	; (800af00 <pxPortInitialiseStack+0x64>)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	3b14      	subs	r3, #20
 800aed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	3b04      	subs	r3, #4
 800aee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f06f 0202 	mvn.w	r2, #2
 800aeea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	3b20      	subs	r3, #32
 800aef0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aef2:	68fb      	ldr	r3, [r7, #12]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3714      	adds	r7, #20
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr
 800af00:	0800af05 	.word	0x0800af05

0800af04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800af04:	b480      	push	{r7}
 800af06:	b085      	sub	sp, #20
 800af08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800af0a:	2300      	movs	r3, #0
 800af0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800af0e:	4b12      	ldr	r3, [pc, #72]	; (800af58 <prvTaskExitError+0x54>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af16:	d00a      	beq.n	800af2e <prvTaskExitError+0x2a>
	__asm volatile
 800af18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1c:	f383 8811 	msr	BASEPRI, r3
 800af20:	f3bf 8f6f 	isb	sy
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	60fb      	str	r3, [r7, #12]
}
 800af2a:	bf00      	nop
 800af2c:	e7fe      	b.n	800af2c <prvTaskExitError+0x28>
	__asm volatile
 800af2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af32:	f383 8811 	msr	BASEPRI, r3
 800af36:	f3bf 8f6f 	isb	sy
 800af3a:	f3bf 8f4f 	dsb	sy
 800af3e:	60bb      	str	r3, [r7, #8]
}
 800af40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af42:	bf00      	nop
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d0fc      	beq.n	800af44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af4a:	bf00      	nop
 800af4c:	bf00      	nop
 800af4e:	3714      	adds	r7, #20
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr
 800af58:	20000100 	.word	0x20000100
 800af5c:	00000000 	.word	0x00000000

0800af60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af60:	4b07      	ldr	r3, [pc, #28]	; (800af80 <pxCurrentTCBConst2>)
 800af62:	6819      	ldr	r1, [r3, #0]
 800af64:	6808      	ldr	r0, [r1, #0]
 800af66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6a:	f380 8809 	msr	PSP, r0
 800af6e:	f3bf 8f6f 	isb	sy
 800af72:	f04f 0000 	mov.w	r0, #0
 800af76:	f380 8811 	msr	BASEPRI, r0
 800af7a:	4770      	bx	lr
 800af7c:	f3af 8000 	nop.w

0800af80 <pxCurrentTCBConst2>:
 800af80:	20001270 	.word	0x20001270
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800af84:	bf00      	nop
 800af86:	bf00      	nop

0800af88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800af88:	4808      	ldr	r0, [pc, #32]	; (800afac <prvPortStartFirstTask+0x24>)
 800af8a:	6800      	ldr	r0, [r0, #0]
 800af8c:	6800      	ldr	r0, [r0, #0]
 800af8e:	f380 8808 	msr	MSP, r0
 800af92:	f04f 0000 	mov.w	r0, #0
 800af96:	f380 8814 	msr	CONTROL, r0
 800af9a:	b662      	cpsie	i
 800af9c:	b661      	cpsie	f
 800af9e:	f3bf 8f4f 	dsb	sy
 800afa2:	f3bf 8f6f 	isb	sy
 800afa6:	df00      	svc	0
 800afa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800afaa:	bf00      	nop
 800afac:	e000ed08 	.word	0xe000ed08

0800afb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b086      	sub	sp, #24
 800afb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800afb6:	4b46      	ldr	r3, [pc, #280]	; (800b0d0 <xPortStartScheduler+0x120>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a46      	ldr	r2, [pc, #280]	; (800b0d4 <xPortStartScheduler+0x124>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d10a      	bne.n	800afd6 <xPortStartScheduler+0x26>
	__asm volatile
 800afc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc4:	f383 8811 	msr	BASEPRI, r3
 800afc8:	f3bf 8f6f 	isb	sy
 800afcc:	f3bf 8f4f 	dsb	sy
 800afd0:	613b      	str	r3, [r7, #16]
}
 800afd2:	bf00      	nop
 800afd4:	e7fe      	b.n	800afd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800afd6:	4b3e      	ldr	r3, [pc, #248]	; (800b0d0 <xPortStartScheduler+0x120>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a3f      	ldr	r2, [pc, #252]	; (800b0d8 <xPortStartScheduler+0x128>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d10a      	bne.n	800aff6 <xPortStartScheduler+0x46>
	__asm volatile
 800afe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	60fb      	str	r3, [r7, #12]
}
 800aff2:	bf00      	nop
 800aff4:	e7fe      	b.n	800aff4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aff6:	4b39      	ldr	r3, [pc, #228]	; (800b0dc <xPortStartScheduler+0x12c>)
 800aff8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	b2db      	uxtb	r3, r3
 800b000:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	22ff      	movs	r2, #255	; 0xff
 800b006:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b010:	78fb      	ldrb	r3, [r7, #3]
 800b012:	b2db      	uxtb	r3, r3
 800b014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b018:	b2da      	uxtb	r2, r3
 800b01a:	4b31      	ldr	r3, [pc, #196]	; (800b0e0 <xPortStartScheduler+0x130>)
 800b01c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b01e:	4b31      	ldr	r3, [pc, #196]	; (800b0e4 <xPortStartScheduler+0x134>)
 800b020:	2207      	movs	r2, #7
 800b022:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b024:	e009      	b.n	800b03a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b026:	4b2f      	ldr	r3, [pc, #188]	; (800b0e4 <xPortStartScheduler+0x134>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	3b01      	subs	r3, #1
 800b02c:	4a2d      	ldr	r2, [pc, #180]	; (800b0e4 <xPortStartScheduler+0x134>)
 800b02e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b030:	78fb      	ldrb	r3, [r7, #3]
 800b032:	b2db      	uxtb	r3, r3
 800b034:	005b      	lsls	r3, r3, #1
 800b036:	b2db      	uxtb	r3, r3
 800b038:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b03a:	78fb      	ldrb	r3, [r7, #3]
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b042:	2b80      	cmp	r3, #128	; 0x80
 800b044:	d0ef      	beq.n	800b026 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b046:	4b27      	ldr	r3, [pc, #156]	; (800b0e4 <xPortStartScheduler+0x134>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f1c3 0307 	rsb	r3, r3, #7
 800b04e:	2b04      	cmp	r3, #4
 800b050:	d00a      	beq.n	800b068 <xPortStartScheduler+0xb8>
	__asm volatile
 800b052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b056:	f383 8811 	msr	BASEPRI, r3
 800b05a:	f3bf 8f6f 	isb	sy
 800b05e:	f3bf 8f4f 	dsb	sy
 800b062:	60bb      	str	r3, [r7, #8]
}
 800b064:	bf00      	nop
 800b066:	e7fe      	b.n	800b066 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b068:	4b1e      	ldr	r3, [pc, #120]	; (800b0e4 <xPortStartScheduler+0x134>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	021b      	lsls	r3, r3, #8
 800b06e:	4a1d      	ldr	r2, [pc, #116]	; (800b0e4 <xPortStartScheduler+0x134>)
 800b070:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b072:	4b1c      	ldr	r3, [pc, #112]	; (800b0e4 <xPortStartScheduler+0x134>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b07a:	4a1a      	ldr	r2, [pc, #104]	; (800b0e4 <xPortStartScheduler+0x134>)
 800b07c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	b2da      	uxtb	r2, r3
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b086:	4b18      	ldr	r3, [pc, #96]	; (800b0e8 <xPortStartScheduler+0x138>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a17      	ldr	r2, [pc, #92]	; (800b0e8 <xPortStartScheduler+0x138>)
 800b08c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b090:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b092:	4b15      	ldr	r3, [pc, #84]	; (800b0e8 <xPortStartScheduler+0x138>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a14      	ldr	r2, [pc, #80]	; (800b0e8 <xPortStartScheduler+0x138>)
 800b098:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b09c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b09e:	f000 f8dd 	bl	800b25c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b0a2:	4b12      	ldr	r3, [pc, #72]	; (800b0ec <xPortStartScheduler+0x13c>)
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b0a8:	f000 f8fc 	bl	800b2a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b0ac:	4b10      	ldr	r3, [pc, #64]	; (800b0f0 <xPortStartScheduler+0x140>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a0f      	ldr	r2, [pc, #60]	; (800b0f0 <xPortStartScheduler+0x140>)
 800b0b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b0b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b0b8:	f7ff ff66 	bl	800af88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b0bc:	f7ff f84a 	bl	800a154 <vTaskSwitchContext>
	prvTaskExitError();
 800b0c0:	f7ff ff20 	bl	800af04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3718      	adds	r7, #24
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	e000ed00 	.word	0xe000ed00
 800b0d4:	410fc271 	.word	0x410fc271
 800b0d8:	410fc270 	.word	0x410fc270
 800b0dc:	e000e400 	.word	0xe000e400
 800b0e0:	2000189c 	.word	0x2000189c
 800b0e4:	200018a0 	.word	0x200018a0
 800b0e8:	e000ed20 	.word	0xe000ed20
 800b0ec:	20000100 	.word	0x20000100
 800b0f0:	e000ef34 	.word	0xe000ef34

0800b0f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
	__asm volatile
 800b0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fe:	f383 8811 	msr	BASEPRI, r3
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	f3bf 8f4f 	dsb	sy
 800b10a:	607b      	str	r3, [r7, #4]
}
 800b10c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b10e:	4b0f      	ldr	r3, [pc, #60]	; (800b14c <vPortEnterCritical+0x58>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	3301      	adds	r3, #1
 800b114:	4a0d      	ldr	r2, [pc, #52]	; (800b14c <vPortEnterCritical+0x58>)
 800b116:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b118:	4b0c      	ldr	r3, [pc, #48]	; (800b14c <vPortEnterCritical+0x58>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d10f      	bne.n	800b140 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b120:	4b0b      	ldr	r3, [pc, #44]	; (800b150 <vPortEnterCritical+0x5c>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	b2db      	uxtb	r3, r3
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00a      	beq.n	800b140 <vPortEnterCritical+0x4c>
	__asm volatile
 800b12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12e:	f383 8811 	msr	BASEPRI, r3
 800b132:	f3bf 8f6f 	isb	sy
 800b136:	f3bf 8f4f 	dsb	sy
 800b13a:	603b      	str	r3, [r7, #0]
}
 800b13c:	bf00      	nop
 800b13e:	e7fe      	b.n	800b13e <vPortEnterCritical+0x4a>
	}
}
 800b140:	bf00      	nop
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr
 800b14c:	20000100 	.word	0x20000100
 800b150:	e000ed04 	.word	0xe000ed04

0800b154 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b15a:	4b12      	ldr	r3, [pc, #72]	; (800b1a4 <vPortExitCritical+0x50>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d10a      	bne.n	800b178 <vPortExitCritical+0x24>
	__asm volatile
 800b162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	607b      	str	r3, [r7, #4]
}
 800b174:	bf00      	nop
 800b176:	e7fe      	b.n	800b176 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b178:	4b0a      	ldr	r3, [pc, #40]	; (800b1a4 <vPortExitCritical+0x50>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	3b01      	subs	r3, #1
 800b17e:	4a09      	ldr	r2, [pc, #36]	; (800b1a4 <vPortExitCritical+0x50>)
 800b180:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b182:	4b08      	ldr	r3, [pc, #32]	; (800b1a4 <vPortExitCritical+0x50>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d105      	bne.n	800b196 <vPortExitCritical+0x42>
 800b18a:	2300      	movs	r3, #0
 800b18c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	f383 8811 	msr	BASEPRI, r3
}
 800b194:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b196:	bf00      	nop
 800b198:	370c      	adds	r7, #12
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	20000100 	.word	0x20000100
	...

0800b1b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b1b0:	f3ef 8009 	mrs	r0, PSP
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	4b15      	ldr	r3, [pc, #84]	; (800b210 <pxCurrentTCBConst>)
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	f01e 0f10 	tst.w	lr, #16
 800b1c0:	bf08      	it	eq
 800b1c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b1c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ca:	6010      	str	r0, [r2, #0]
 800b1cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b1d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b1d4:	f380 8811 	msr	BASEPRI, r0
 800b1d8:	f3bf 8f4f 	dsb	sy
 800b1dc:	f3bf 8f6f 	isb	sy
 800b1e0:	f7fe ffb8 	bl	800a154 <vTaskSwitchContext>
 800b1e4:	f04f 0000 	mov.w	r0, #0
 800b1e8:	f380 8811 	msr	BASEPRI, r0
 800b1ec:	bc09      	pop	{r0, r3}
 800b1ee:	6819      	ldr	r1, [r3, #0]
 800b1f0:	6808      	ldr	r0, [r1, #0]
 800b1f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f6:	f01e 0f10 	tst.w	lr, #16
 800b1fa:	bf08      	it	eq
 800b1fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b200:	f380 8809 	msr	PSP, r0
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop
 800b20c:	f3af 8000 	nop.w

0800b210 <pxCurrentTCBConst>:
 800b210:	20001270 	.word	0x20001270
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b214:	bf00      	nop
 800b216:	bf00      	nop

0800b218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
	__asm volatile
 800b21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	607b      	str	r3, [r7, #4]
}
 800b230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b232:	f7fe fed5 	bl	8009fe0 <xTaskIncrementTick>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d003      	beq.n	800b244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b23c:	4b06      	ldr	r3, [pc, #24]	; (800b258 <xPortSysTickHandler+0x40>)
 800b23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b242:	601a      	str	r2, [r3, #0]
 800b244:	2300      	movs	r3, #0
 800b246:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	f383 8811 	msr	BASEPRI, r3
}
 800b24e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b250:	bf00      	nop
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	e000ed04 	.word	0xe000ed04

0800b25c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b25c:	b480      	push	{r7}
 800b25e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b260:	4b0b      	ldr	r3, [pc, #44]	; (800b290 <vPortSetupTimerInterrupt+0x34>)
 800b262:	2200      	movs	r2, #0
 800b264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b266:	4b0b      	ldr	r3, [pc, #44]	; (800b294 <vPortSetupTimerInterrupt+0x38>)
 800b268:	2200      	movs	r2, #0
 800b26a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b26c:	4b0a      	ldr	r3, [pc, #40]	; (800b298 <vPortSetupTimerInterrupt+0x3c>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a0a      	ldr	r2, [pc, #40]	; (800b29c <vPortSetupTimerInterrupt+0x40>)
 800b272:	fba2 2303 	umull	r2, r3, r2, r3
 800b276:	099b      	lsrs	r3, r3, #6
 800b278:	4a09      	ldr	r2, [pc, #36]	; (800b2a0 <vPortSetupTimerInterrupt+0x44>)
 800b27a:	3b01      	subs	r3, #1
 800b27c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b27e:	4b04      	ldr	r3, [pc, #16]	; (800b290 <vPortSetupTimerInterrupt+0x34>)
 800b280:	2207      	movs	r2, #7
 800b282:	601a      	str	r2, [r3, #0]
}
 800b284:	bf00      	nop
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop
 800b290:	e000e010 	.word	0xe000e010
 800b294:	e000e018 	.word	0xe000e018
 800b298:	200000f4 	.word	0x200000f4
 800b29c:	10624dd3 	.word	0x10624dd3
 800b2a0:	e000e014 	.word	0xe000e014

0800b2a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b2a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b2b4 <vPortEnableVFP+0x10>
 800b2a8:	6801      	ldr	r1, [r0, #0]
 800b2aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b2ae:	6001      	str	r1, [r0, #0]
 800b2b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b2b2:	bf00      	nop
 800b2b4:	e000ed88 	.word	0xe000ed88

0800b2b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b2be:	f3ef 8305 	mrs	r3, IPSR
 800b2c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2b0f      	cmp	r3, #15
 800b2c8:	d914      	bls.n	800b2f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b2ca:	4a17      	ldr	r2, [pc, #92]	; (800b328 <vPortValidateInterruptPriority+0x70>)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	4413      	add	r3, r2
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b2d4:	4b15      	ldr	r3, [pc, #84]	; (800b32c <vPortValidateInterruptPriority+0x74>)
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	7afa      	ldrb	r2, [r7, #11]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d20a      	bcs.n	800b2f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e2:	f383 8811 	msr	BASEPRI, r3
 800b2e6:	f3bf 8f6f 	isb	sy
 800b2ea:	f3bf 8f4f 	dsb	sy
 800b2ee:	607b      	str	r3, [r7, #4]
}
 800b2f0:	bf00      	nop
 800b2f2:	e7fe      	b.n	800b2f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b2f4:	4b0e      	ldr	r3, [pc, #56]	; (800b330 <vPortValidateInterruptPriority+0x78>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b2fc:	4b0d      	ldr	r3, [pc, #52]	; (800b334 <vPortValidateInterruptPriority+0x7c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	429a      	cmp	r2, r3
 800b302:	d90a      	bls.n	800b31a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b308:	f383 8811 	msr	BASEPRI, r3
 800b30c:	f3bf 8f6f 	isb	sy
 800b310:	f3bf 8f4f 	dsb	sy
 800b314:	603b      	str	r3, [r7, #0]
}
 800b316:	bf00      	nop
 800b318:	e7fe      	b.n	800b318 <vPortValidateInterruptPriority+0x60>
	}
 800b31a:	bf00      	nop
 800b31c:	3714      	adds	r7, #20
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop
 800b328:	e000e3f0 	.word	0xe000e3f0
 800b32c:	2000189c 	.word	0x2000189c
 800b330:	e000ed0c 	.word	0xe000ed0c
 800b334:	200018a0 	.word	0x200018a0

0800b338 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b08a      	sub	sp, #40	; 0x28
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b340:	2300      	movs	r3, #0
 800b342:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b344:	f7fe fd90 	bl	8009e68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b348:	4b5b      	ldr	r3, [pc, #364]	; (800b4b8 <pvPortMalloc+0x180>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d101      	bne.n	800b354 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b350:	f000 f920 	bl	800b594 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b354:	4b59      	ldr	r3, [pc, #356]	; (800b4bc <pvPortMalloc+0x184>)
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4013      	ands	r3, r2
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	f040 8093 	bne.w	800b488 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d01d      	beq.n	800b3a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b368:	2208      	movs	r2, #8
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4413      	add	r3, r2
 800b36e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f003 0307 	and.w	r3, r3, #7
 800b376:	2b00      	cmp	r3, #0
 800b378:	d014      	beq.n	800b3a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f023 0307 	bic.w	r3, r3, #7
 800b380:	3308      	adds	r3, #8
 800b382:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f003 0307 	and.w	r3, r3, #7
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00a      	beq.n	800b3a4 <pvPortMalloc+0x6c>
	__asm volatile
 800b38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b392:	f383 8811 	msr	BASEPRI, r3
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	617b      	str	r3, [r7, #20]
}
 800b3a0:	bf00      	nop
 800b3a2:	e7fe      	b.n	800b3a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d06e      	beq.n	800b488 <pvPortMalloc+0x150>
 800b3aa:	4b45      	ldr	r3, [pc, #276]	; (800b4c0 <pvPortMalloc+0x188>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d869      	bhi.n	800b488 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b3b4:	4b43      	ldr	r3, [pc, #268]	; (800b4c4 <pvPortMalloc+0x18c>)
 800b3b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b3b8:	4b42      	ldr	r3, [pc, #264]	; (800b4c4 <pvPortMalloc+0x18c>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3be:	e004      	b.n	800b3ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d903      	bls.n	800b3dc <pvPortMalloc+0xa4>
 800b3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d1f1      	bne.n	800b3c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b3dc:	4b36      	ldr	r3, [pc, #216]	; (800b4b8 <pvPortMalloc+0x180>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d050      	beq.n	800b488 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b3e6:	6a3b      	ldr	r3, [r7, #32]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2208      	movs	r2, #8
 800b3ec:	4413      	add	r3, r2
 800b3ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	6a3b      	ldr	r3, [r7, #32]
 800b3f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fa:	685a      	ldr	r2, [r3, #4]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	1ad2      	subs	r2, r2, r3
 800b400:	2308      	movs	r3, #8
 800b402:	005b      	lsls	r3, r3, #1
 800b404:	429a      	cmp	r2, r3
 800b406:	d91f      	bls.n	800b448 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4413      	add	r3, r2
 800b40e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	f003 0307 	and.w	r3, r3, #7
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00a      	beq.n	800b430 <pvPortMalloc+0xf8>
	__asm volatile
 800b41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41e:	f383 8811 	msr	BASEPRI, r3
 800b422:	f3bf 8f6f 	isb	sy
 800b426:	f3bf 8f4f 	dsb	sy
 800b42a:	613b      	str	r3, [r7, #16]
}
 800b42c:	bf00      	nop
 800b42e:	e7fe      	b.n	800b42e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b432:	685a      	ldr	r2, [r3, #4]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	1ad2      	subs	r2, r2, r3
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b442:	69b8      	ldr	r0, [r7, #24]
 800b444:	f000 f908 	bl	800b658 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b448:	4b1d      	ldr	r3, [pc, #116]	; (800b4c0 <pvPortMalloc+0x188>)
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	1ad3      	subs	r3, r2, r3
 800b452:	4a1b      	ldr	r2, [pc, #108]	; (800b4c0 <pvPortMalloc+0x188>)
 800b454:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b456:	4b1a      	ldr	r3, [pc, #104]	; (800b4c0 <pvPortMalloc+0x188>)
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	4b1b      	ldr	r3, [pc, #108]	; (800b4c8 <pvPortMalloc+0x190>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d203      	bcs.n	800b46a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b462:	4b17      	ldr	r3, [pc, #92]	; (800b4c0 <pvPortMalloc+0x188>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a18      	ldr	r2, [pc, #96]	; (800b4c8 <pvPortMalloc+0x190>)
 800b468:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46c:	685a      	ldr	r2, [r3, #4]
 800b46e:	4b13      	ldr	r3, [pc, #76]	; (800b4bc <pvPortMalloc+0x184>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	431a      	orrs	r2, r3
 800b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b476:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47a:	2200      	movs	r2, #0
 800b47c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b47e:	4b13      	ldr	r3, [pc, #76]	; (800b4cc <pvPortMalloc+0x194>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	3301      	adds	r3, #1
 800b484:	4a11      	ldr	r2, [pc, #68]	; (800b4cc <pvPortMalloc+0x194>)
 800b486:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b488:	f7fe fcfc 	bl	8009e84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	f003 0307 	and.w	r3, r3, #7
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00a      	beq.n	800b4ac <pvPortMalloc+0x174>
	__asm volatile
 800b496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49a:	f383 8811 	msr	BASEPRI, r3
 800b49e:	f3bf 8f6f 	isb	sy
 800b4a2:	f3bf 8f4f 	dsb	sy
 800b4a6:	60fb      	str	r3, [r7, #12]
}
 800b4a8:	bf00      	nop
 800b4aa:	e7fe      	b.n	800b4aa <pvPortMalloc+0x172>
	return pvReturn;
 800b4ac:	69fb      	ldr	r3, [r7, #28]
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3728      	adds	r7, #40	; 0x28
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	200054ac 	.word	0x200054ac
 800b4bc:	200054c0 	.word	0x200054c0
 800b4c0:	200054b0 	.word	0x200054b0
 800b4c4:	200054a4 	.word	0x200054a4
 800b4c8:	200054b4 	.word	0x200054b4
 800b4cc:	200054b8 	.word	0x200054b8

0800b4d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d04d      	beq.n	800b57e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b4e2:	2308      	movs	r3, #8
 800b4e4:	425b      	negs	r3, r3
 800b4e6:	697a      	ldr	r2, [r7, #20]
 800b4e8:	4413      	add	r3, r2
 800b4ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	685a      	ldr	r2, [r3, #4]
 800b4f4:	4b24      	ldr	r3, [pc, #144]	; (800b588 <vPortFree+0xb8>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4013      	ands	r3, r2
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d10a      	bne.n	800b514 <vPortFree+0x44>
	__asm volatile
 800b4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	60fb      	str	r3, [r7, #12]
}
 800b510:	bf00      	nop
 800b512:	e7fe      	b.n	800b512 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00a      	beq.n	800b532 <vPortFree+0x62>
	__asm volatile
 800b51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b520:	f383 8811 	msr	BASEPRI, r3
 800b524:	f3bf 8f6f 	isb	sy
 800b528:	f3bf 8f4f 	dsb	sy
 800b52c:	60bb      	str	r3, [r7, #8]
}
 800b52e:	bf00      	nop
 800b530:	e7fe      	b.n	800b530 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	685a      	ldr	r2, [r3, #4]
 800b536:	4b14      	ldr	r3, [pc, #80]	; (800b588 <vPortFree+0xb8>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4013      	ands	r3, r2
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d01e      	beq.n	800b57e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d11a      	bne.n	800b57e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	685a      	ldr	r2, [r3, #4]
 800b54c:	4b0e      	ldr	r3, [pc, #56]	; (800b588 <vPortFree+0xb8>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	43db      	mvns	r3, r3
 800b552:	401a      	ands	r2, r3
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b558:	f7fe fc86 	bl	8009e68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	685a      	ldr	r2, [r3, #4]
 800b560:	4b0a      	ldr	r3, [pc, #40]	; (800b58c <vPortFree+0xbc>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4413      	add	r3, r2
 800b566:	4a09      	ldr	r2, [pc, #36]	; (800b58c <vPortFree+0xbc>)
 800b568:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b56a:	6938      	ldr	r0, [r7, #16]
 800b56c:	f000 f874 	bl	800b658 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b570:	4b07      	ldr	r3, [pc, #28]	; (800b590 <vPortFree+0xc0>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	3301      	adds	r3, #1
 800b576:	4a06      	ldr	r2, [pc, #24]	; (800b590 <vPortFree+0xc0>)
 800b578:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b57a:	f7fe fc83 	bl	8009e84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b57e:	bf00      	nop
 800b580:	3718      	adds	r7, #24
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	200054c0 	.word	0x200054c0
 800b58c:	200054b0 	.word	0x200054b0
 800b590:	200054bc 	.word	0x200054bc

0800b594 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b59a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b59e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b5a0:	4b27      	ldr	r3, [pc, #156]	; (800b640 <prvHeapInit+0xac>)
 800b5a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f003 0307 	and.w	r3, r3, #7
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00c      	beq.n	800b5c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	3307      	adds	r3, #7
 800b5b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f023 0307 	bic.w	r3, r3, #7
 800b5ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b5bc:	68ba      	ldr	r2, [r7, #8]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	1ad3      	subs	r3, r2, r3
 800b5c2:	4a1f      	ldr	r2, [pc, #124]	; (800b640 <prvHeapInit+0xac>)
 800b5c4:	4413      	add	r3, r2
 800b5c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b5cc:	4a1d      	ldr	r2, [pc, #116]	; (800b644 <prvHeapInit+0xb0>)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b5d2:	4b1c      	ldr	r3, [pc, #112]	; (800b644 <prvHeapInit+0xb0>)
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	68ba      	ldr	r2, [r7, #8]
 800b5dc:	4413      	add	r3, r2
 800b5de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b5e0:	2208      	movs	r2, #8
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	1a9b      	subs	r3, r3, r2
 800b5e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f023 0307 	bic.w	r3, r3, #7
 800b5ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	4a15      	ldr	r2, [pc, #84]	; (800b648 <prvHeapInit+0xb4>)
 800b5f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b5f6:	4b14      	ldr	r3, [pc, #80]	; (800b648 <prvHeapInit+0xb4>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b5fe:	4b12      	ldr	r3, [pc, #72]	; (800b648 <prvHeapInit+0xb4>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2200      	movs	r2, #0
 800b604:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	1ad2      	subs	r2, r2, r3
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b614:	4b0c      	ldr	r3, [pc, #48]	; (800b648 <prvHeapInit+0xb4>)
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	4a0a      	ldr	r2, [pc, #40]	; (800b64c <prvHeapInit+0xb8>)
 800b622:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	4a09      	ldr	r2, [pc, #36]	; (800b650 <prvHeapInit+0xbc>)
 800b62a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b62c:	4b09      	ldr	r3, [pc, #36]	; (800b654 <prvHeapInit+0xc0>)
 800b62e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b632:	601a      	str	r2, [r3, #0]
}
 800b634:	bf00      	nop
 800b636:	3714      	adds	r7, #20
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr
 800b640:	200018a4 	.word	0x200018a4
 800b644:	200054a4 	.word	0x200054a4
 800b648:	200054ac 	.word	0x200054ac
 800b64c:	200054b4 	.word	0x200054b4
 800b650:	200054b0 	.word	0x200054b0
 800b654:	200054c0 	.word	0x200054c0

0800b658 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b660:	4b28      	ldr	r3, [pc, #160]	; (800b704 <prvInsertBlockIntoFreeList+0xac>)
 800b662:	60fb      	str	r3, [r7, #12]
 800b664:	e002      	b.n	800b66c <prvInsertBlockIntoFreeList+0x14>
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	60fb      	str	r3, [r7, #12]
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	429a      	cmp	r2, r3
 800b674:	d8f7      	bhi.n	800b666 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	68ba      	ldr	r2, [r7, #8]
 800b680:	4413      	add	r3, r2
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	429a      	cmp	r2, r3
 800b686:	d108      	bne.n	800b69a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	685a      	ldr	r2, [r3, #4]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	441a      	add	r2, r3
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	441a      	add	r2, r3
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d118      	bne.n	800b6e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	4b15      	ldr	r3, [pc, #84]	; (800b708 <prvInsertBlockIntoFreeList+0xb0>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d00d      	beq.n	800b6d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	685a      	ldr	r2, [r3, #4]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	441a      	add	r2, r3
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	601a      	str	r2, [r3, #0]
 800b6d4:	e008      	b.n	800b6e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b6d6:	4b0c      	ldr	r3, [pc, #48]	; (800b708 <prvInsertBlockIntoFreeList+0xb0>)
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	601a      	str	r2, [r3, #0]
 800b6de:	e003      	b.n	800b6e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d002      	beq.n	800b6f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6f6:	bf00      	nop
 800b6f8:	3714      	adds	r7, #20
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	200054a4 	.word	0x200054a4
 800b708:	200054ac 	.word	0x200054ac

0800b70c <__errno>:
 800b70c:	4b01      	ldr	r3, [pc, #4]	; (800b714 <__errno+0x8>)
 800b70e:	6818      	ldr	r0, [r3, #0]
 800b710:	4770      	bx	lr
 800b712:	bf00      	nop
 800b714:	20000104 	.word	0x20000104

0800b718 <__libc_init_array>:
 800b718:	b570      	push	{r4, r5, r6, lr}
 800b71a:	4d0d      	ldr	r5, [pc, #52]	; (800b750 <__libc_init_array+0x38>)
 800b71c:	4c0d      	ldr	r4, [pc, #52]	; (800b754 <__libc_init_array+0x3c>)
 800b71e:	1b64      	subs	r4, r4, r5
 800b720:	10a4      	asrs	r4, r4, #2
 800b722:	2600      	movs	r6, #0
 800b724:	42a6      	cmp	r6, r4
 800b726:	d109      	bne.n	800b73c <__libc_init_array+0x24>
 800b728:	4d0b      	ldr	r5, [pc, #44]	; (800b758 <__libc_init_array+0x40>)
 800b72a:	4c0c      	ldr	r4, [pc, #48]	; (800b75c <__libc_init_array+0x44>)
 800b72c:	f001 f8cc 	bl	800c8c8 <_init>
 800b730:	1b64      	subs	r4, r4, r5
 800b732:	10a4      	asrs	r4, r4, #2
 800b734:	2600      	movs	r6, #0
 800b736:	42a6      	cmp	r6, r4
 800b738:	d105      	bne.n	800b746 <__libc_init_array+0x2e>
 800b73a:	bd70      	pop	{r4, r5, r6, pc}
 800b73c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b740:	4798      	blx	r3
 800b742:	3601      	adds	r6, #1
 800b744:	e7ee      	b.n	800b724 <__libc_init_array+0xc>
 800b746:	f855 3b04 	ldr.w	r3, [r5], #4
 800b74a:	4798      	blx	r3
 800b74c:	3601      	adds	r6, #1
 800b74e:	e7f2      	b.n	800b736 <__libc_init_array+0x1e>
 800b750:	0800cfc4 	.word	0x0800cfc4
 800b754:	0800cfc4 	.word	0x0800cfc4
 800b758:	0800cfc4 	.word	0x0800cfc4
 800b75c:	0800cfc8 	.word	0x0800cfc8

0800b760 <__retarget_lock_acquire_recursive>:
 800b760:	4770      	bx	lr

0800b762 <__retarget_lock_release_recursive>:
 800b762:	4770      	bx	lr

0800b764 <memcpy>:
 800b764:	440a      	add	r2, r1
 800b766:	4291      	cmp	r1, r2
 800b768:	f100 33ff 	add.w	r3, r0, #4294967295
 800b76c:	d100      	bne.n	800b770 <memcpy+0xc>
 800b76e:	4770      	bx	lr
 800b770:	b510      	push	{r4, lr}
 800b772:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b77a:	4291      	cmp	r1, r2
 800b77c:	d1f9      	bne.n	800b772 <memcpy+0xe>
 800b77e:	bd10      	pop	{r4, pc}

0800b780 <memset>:
 800b780:	4402      	add	r2, r0
 800b782:	4603      	mov	r3, r0
 800b784:	4293      	cmp	r3, r2
 800b786:	d100      	bne.n	800b78a <memset+0xa>
 800b788:	4770      	bx	lr
 800b78a:	f803 1b01 	strb.w	r1, [r3], #1
 800b78e:	e7f9      	b.n	800b784 <memset+0x4>

0800b790 <cleanup_glue>:
 800b790:	b538      	push	{r3, r4, r5, lr}
 800b792:	460c      	mov	r4, r1
 800b794:	6809      	ldr	r1, [r1, #0]
 800b796:	4605      	mov	r5, r0
 800b798:	b109      	cbz	r1, 800b79e <cleanup_glue+0xe>
 800b79a:	f7ff fff9 	bl	800b790 <cleanup_glue>
 800b79e:	4621      	mov	r1, r4
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7a6:	f000 b869 	b.w	800b87c <_free_r>
	...

0800b7ac <_reclaim_reent>:
 800b7ac:	4b2c      	ldr	r3, [pc, #176]	; (800b860 <_reclaim_reent+0xb4>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4283      	cmp	r3, r0
 800b7b2:	b570      	push	{r4, r5, r6, lr}
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	d051      	beq.n	800b85c <_reclaim_reent+0xb0>
 800b7b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b7ba:	b143      	cbz	r3, 800b7ce <_reclaim_reent+0x22>
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d14a      	bne.n	800b858 <_reclaim_reent+0xac>
 800b7c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7c4:	6819      	ldr	r1, [r3, #0]
 800b7c6:	b111      	cbz	r1, 800b7ce <_reclaim_reent+0x22>
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	f000 f857 	bl	800b87c <_free_r>
 800b7ce:	6961      	ldr	r1, [r4, #20]
 800b7d0:	b111      	cbz	r1, 800b7d8 <_reclaim_reent+0x2c>
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	f000 f852 	bl	800b87c <_free_r>
 800b7d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b7da:	b111      	cbz	r1, 800b7e2 <_reclaim_reent+0x36>
 800b7dc:	4620      	mov	r0, r4
 800b7de:	f000 f84d 	bl	800b87c <_free_r>
 800b7e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b7e4:	b111      	cbz	r1, 800b7ec <_reclaim_reent+0x40>
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f000 f848 	bl	800b87c <_free_r>
 800b7ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b7ee:	b111      	cbz	r1, 800b7f6 <_reclaim_reent+0x4a>
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f000 f843 	bl	800b87c <_free_r>
 800b7f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b7f8:	b111      	cbz	r1, 800b800 <_reclaim_reent+0x54>
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	f000 f83e 	bl	800b87c <_free_r>
 800b800:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b802:	b111      	cbz	r1, 800b80a <_reclaim_reent+0x5e>
 800b804:	4620      	mov	r0, r4
 800b806:	f000 f839 	bl	800b87c <_free_r>
 800b80a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b80c:	b111      	cbz	r1, 800b814 <_reclaim_reent+0x68>
 800b80e:	4620      	mov	r0, r4
 800b810:	f000 f834 	bl	800b87c <_free_r>
 800b814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b816:	b111      	cbz	r1, 800b81e <_reclaim_reent+0x72>
 800b818:	4620      	mov	r0, r4
 800b81a:	f000 f82f 	bl	800b87c <_free_r>
 800b81e:	69a3      	ldr	r3, [r4, #24]
 800b820:	b1e3      	cbz	r3, 800b85c <_reclaim_reent+0xb0>
 800b822:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b824:	4620      	mov	r0, r4
 800b826:	4798      	blx	r3
 800b828:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b82a:	b1b9      	cbz	r1, 800b85c <_reclaim_reent+0xb0>
 800b82c:	4620      	mov	r0, r4
 800b82e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b832:	f7ff bfad 	b.w	800b790 <cleanup_glue>
 800b836:	5949      	ldr	r1, [r1, r5]
 800b838:	b941      	cbnz	r1, 800b84c <_reclaim_reent+0xa0>
 800b83a:	3504      	adds	r5, #4
 800b83c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b83e:	2d80      	cmp	r5, #128	; 0x80
 800b840:	68d9      	ldr	r1, [r3, #12]
 800b842:	d1f8      	bne.n	800b836 <_reclaim_reent+0x8a>
 800b844:	4620      	mov	r0, r4
 800b846:	f000 f819 	bl	800b87c <_free_r>
 800b84a:	e7ba      	b.n	800b7c2 <_reclaim_reent+0x16>
 800b84c:	680e      	ldr	r6, [r1, #0]
 800b84e:	4620      	mov	r0, r4
 800b850:	f000 f814 	bl	800b87c <_free_r>
 800b854:	4631      	mov	r1, r6
 800b856:	e7ef      	b.n	800b838 <_reclaim_reent+0x8c>
 800b858:	2500      	movs	r5, #0
 800b85a:	e7ef      	b.n	800b83c <_reclaim_reent+0x90>
 800b85c:	bd70      	pop	{r4, r5, r6, pc}
 800b85e:	bf00      	nop
 800b860:	20000104 	.word	0x20000104

0800b864 <__malloc_lock>:
 800b864:	4801      	ldr	r0, [pc, #4]	; (800b86c <__malloc_lock+0x8>)
 800b866:	f7ff bf7b 	b.w	800b760 <__retarget_lock_acquire_recursive>
 800b86a:	bf00      	nop
 800b86c:	200054c4 	.word	0x200054c4

0800b870 <__malloc_unlock>:
 800b870:	4801      	ldr	r0, [pc, #4]	; (800b878 <__malloc_unlock+0x8>)
 800b872:	f7ff bf76 	b.w	800b762 <__retarget_lock_release_recursive>
 800b876:	bf00      	nop
 800b878:	200054c4 	.word	0x200054c4

0800b87c <_free_r>:
 800b87c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b87e:	2900      	cmp	r1, #0
 800b880:	d044      	beq.n	800b90c <_free_r+0x90>
 800b882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b886:	9001      	str	r0, [sp, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	f1a1 0404 	sub.w	r4, r1, #4
 800b88e:	bfb8      	it	lt
 800b890:	18e4      	addlt	r4, r4, r3
 800b892:	f7ff ffe7 	bl	800b864 <__malloc_lock>
 800b896:	4a1e      	ldr	r2, [pc, #120]	; (800b910 <_free_r+0x94>)
 800b898:	9801      	ldr	r0, [sp, #4]
 800b89a:	6813      	ldr	r3, [r2, #0]
 800b89c:	b933      	cbnz	r3, 800b8ac <_free_r+0x30>
 800b89e:	6063      	str	r3, [r4, #4]
 800b8a0:	6014      	str	r4, [r2, #0]
 800b8a2:	b003      	add	sp, #12
 800b8a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8a8:	f7ff bfe2 	b.w	800b870 <__malloc_unlock>
 800b8ac:	42a3      	cmp	r3, r4
 800b8ae:	d908      	bls.n	800b8c2 <_free_r+0x46>
 800b8b0:	6825      	ldr	r5, [r4, #0]
 800b8b2:	1961      	adds	r1, r4, r5
 800b8b4:	428b      	cmp	r3, r1
 800b8b6:	bf01      	itttt	eq
 800b8b8:	6819      	ldreq	r1, [r3, #0]
 800b8ba:	685b      	ldreq	r3, [r3, #4]
 800b8bc:	1949      	addeq	r1, r1, r5
 800b8be:	6021      	streq	r1, [r4, #0]
 800b8c0:	e7ed      	b.n	800b89e <_free_r+0x22>
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	b10b      	cbz	r3, 800b8cc <_free_r+0x50>
 800b8c8:	42a3      	cmp	r3, r4
 800b8ca:	d9fa      	bls.n	800b8c2 <_free_r+0x46>
 800b8cc:	6811      	ldr	r1, [r2, #0]
 800b8ce:	1855      	adds	r5, r2, r1
 800b8d0:	42a5      	cmp	r5, r4
 800b8d2:	d10b      	bne.n	800b8ec <_free_r+0x70>
 800b8d4:	6824      	ldr	r4, [r4, #0]
 800b8d6:	4421      	add	r1, r4
 800b8d8:	1854      	adds	r4, r2, r1
 800b8da:	42a3      	cmp	r3, r4
 800b8dc:	6011      	str	r1, [r2, #0]
 800b8de:	d1e0      	bne.n	800b8a2 <_free_r+0x26>
 800b8e0:	681c      	ldr	r4, [r3, #0]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	6053      	str	r3, [r2, #4]
 800b8e6:	4421      	add	r1, r4
 800b8e8:	6011      	str	r1, [r2, #0]
 800b8ea:	e7da      	b.n	800b8a2 <_free_r+0x26>
 800b8ec:	d902      	bls.n	800b8f4 <_free_r+0x78>
 800b8ee:	230c      	movs	r3, #12
 800b8f0:	6003      	str	r3, [r0, #0]
 800b8f2:	e7d6      	b.n	800b8a2 <_free_r+0x26>
 800b8f4:	6825      	ldr	r5, [r4, #0]
 800b8f6:	1961      	adds	r1, r4, r5
 800b8f8:	428b      	cmp	r3, r1
 800b8fa:	bf04      	itt	eq
 800b8fc:	6819      	ldreq	r1, [r3, #0]
 800b8fe:	685b      	ldreq	r3, [r3, #4]
 800b900:	6063      	str	r3, [r4, #4]
 800b902:	bf04      	itt	eq
 800b904:	1949      	addeq	r1, r1, r5
 800b906:	6021      	streq	r1, [r4, #0]
 800b908:	6054      	str	r4, [r2, #4]
 800b90a:	e7ca      	b.n	800b8a2 <_free_r+0x26>
 800b90c:	b003      	add	sp, #12
 800b90e:	bd30      	pop	{r4, r5, pc}
 800b910:	200054c8 	.word	0x200054c8

0800b914 <cosf>:
 800b914:	ee10 3a10 	vmov	r3, s0
 800b918:	b507      	push	{r0, r1, r2, lr}
 800b91a:	4a1e      	ldr	r2, [pc, #120]	; (800b994 <cosf+0x80>)
 800b91c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b920:	4293      	cmp	r3, r2
 800b922:	dc06      	bgt.n	800b932 <cosf+0x1e>
 800b924:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800b998 <cosf+0x84>
 800b928:	b003      	add	sp, #12
 800b92a:	f85d eb04 	ldr.w	lr, [sp], #4
 800b92e:	f000 bb1d 	b.w	800bf6c <__kernel_cosf>
 800b932:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b936:	db04      	blt.n	800b942 <cosf+0x2e>
 800b938:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b93c:	b003      	add	sp, #12
 800b93e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b942:	4668      	mov	r0, sp
 800b944:	f000 f9d2 	bl	800bcec <__ieee754_rem_pio2f>
 800b948:	f000 0003 	and.w	r0, r0, #3
 800b94c:	2801      	cmp	r0, #1
 800b94e:	d009      	beq.n	800b964 <cosf+0x50>
 800b950:	2802      	cmp	r0, #2
 800b952:	d010      	beq.n	800b976 <cosf+0x62>
 800b954:	b9b0      	cbnz	r0, 800b984 <cosf+0x70>
 800b956:	eddd 0a01 	vldr	s1, [sp, #4]
 800b95a:	ed9d 0a00 	vldr	s0, [sp]
 800b95e:	f000 fb05 	bl	800bf6c <__kernel_cosf>
 800b962:	e7eb      	b.n	800b93c <cosf+0x28>
 800b964:	eddd 0a01 	vldr	s1, [sp, #4]
 800b968:	ed9d 0a00 	vldr	s0, [sp]
 800b96c:	f000 fdd4 	bl	800c518 <__kernel_sinf>
 800b970:	eeb1 0a40 	vneg.f32	s0, s0
 800b974:	e7e2      	b.n	800b93c <cosf+0x28>
 800b976:	eddd 0a01 	vldr	s1, [sp, #4]
 800b97a:	ed9d 0a00 	vldr	s0, [sp]
 800b97e:	f000 faf5 	bl	800bf6c <__kernel_cosf>
 800b982:	e7f5      	b.n	800b970 <cosf+0x5c>
 800b984:	eddd 0a01 	vldr	s1, [sp, #4]
 800b988:	ed9d 0a00 	vldr	s0, [sp]
 800b98c:	2001      	movs	r0, #1
 800b98e:	f000 fdc3 	bl	800c518 <__kernel_sinf>
 800b992:	e7d3      	b.n	800b93c <cosf+0x28>
 800b994:	3f490fd8 	.word	0x3f490fd8
 800b998:	00000000 	.word	0x00000000

0800b99c <sinf>:
 800b99c:	ee10 3a10 	vmov	r3, s0
 800b9a0:	b507      	push	{r0, r1, r2, lr}
 800b9a2:	4a1f      	ldr	r2, [pc, #124]	; (800ba20 <sinf+0x84>)
 800b9a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	dc07      	bgt.n	800b9bc <sinf+0x20>
 800b9ac:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800ba24 <sinf+0x88>
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	b003      	add	sp, #12
 800b9b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9b8:	f000 bdae 	b.w	800c518 <__kernel_sinf>
 800b9bc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b9c0:	db04      	blt.n	800b9cc <sinf+0x30>
 800b9c2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b9c6:	b003      	add	sp, #12
 800b9c8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b9cc:	4668      	mov	r0, sp
 800b9ce:	f000 f98d 	bl	800bcec <__ieee754_rem_pio2f>
 800b9d2:	f000 0003 	and.w	r0, r0, #3
 800b9d6:	2801      	cmp	r0, #1
 800b9d8:	d00a      	beq.n	800b9f0 <sinf+0x54>
 800b9da:	2802      	cmp	r0, #2
 800b9dc:	d00f      	beq.n	800b9fe <sinf+0x62>
 800b9de:	b9c0      	cbnz	r0, 800ba12 <sinf+0x76>
 800b9e0:	eddd 0a01 	vldr	s1, [sp, #4]
 800b9e4:	ed9d 0a00 	vldr	s0, [sp]
 800b9e8:	2001      	movs	r0, #1
 800b9ea:	f000 fd95 	bl	800c518 <__kernel_sinf>
 800b9ee:	e7ea      	b.n	800b9c6 <sinf+0x2a>
 800b9f0:	eddd 0a01 	vldr	s1, [sp, #4]
 800b9f4:	ed9d 0a00 	vldr	s0, [sp]
 800b9f8:	f000 fab8 	bl	800bf6c <__kernel_cosf>
 800b9fc:	e7e3      	b.n	800b9c6 <sinf+0x2a>
 800b9fe:	eddd 0a01 	vldr	s1, [sp, #4]
 800ba02:	ed9d 0a00 	vldr	s0, [sp]
 800ba06:	2001      	movs	r0, #1
 800ba08:	f000 fd86 	bl	800c518 <__kernel_sinf>
 800ba0c:	eeb1 0a40 	vneg.f32	s0, s0
 800ba10:	e7d9      	b.n	800b9c6 <sinf+0x2a>
 800ba12:	eddd 0a01 	vldr	s1, [sp, #4]
 800ba16:	ed9d 0a00 	vldr	s0, [sp]
 800ba1a:	f000 faa7 	bl	800bf6c <__kernel_cosf>
 800ba1e:	e7f5      	b.n	800ba0c <sinf+0x70>
 800ba20:	3f490fd8 	.word	0x3f490fd8
 800ba24:	00000000 	.word	0x00000000

0800ba28 <atan2f>:
 800ba28:	f000 b83e 	b.w	800baa8 <__ieee754_atan2f>

0800ba2c <fmodf>:
 800ba2c:	b508      	push	{r3, lr}
 800ba2e:	ed2d 8b02 	vpush	{d8}
 800ba32:	eef0 8a40 	vmov.f32	s17, s0
 800ba36:	eeb0 8a60 	vmov.f32	s16, s1
 800ba3a:	f000 f8d5 	bl	800bbe8 <__ieee754_fmodf>
 800ba3e:	eef4 8a48 	vcmp.f32	s17, s16
 800ba42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba46:	d60c      	bvs.n	800ba62 <fmodf+0x36>
 800ba48:	eddf 8a07 	vldr	s17, [pc, #28]	; 800ba68 <fmodf+0x3c>
 800ba4c:	eeb4 8a68 	vcmp.f32	s16, s17
 800ba50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba54:	d105      	bne.n	800ba62 <fmodf+0x36>
 800ba56:	f7ff fe59 	bl	800b70c <__errno>
 800ba5a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ba5e:	2321      	movs	r3, #33	; 0x21
 800ba60:	6003      	str	r3, [r0, #0]
 800ba62:	ecbd 8b02 	vpop	{d8}
 800ba66:	bd08      	pop	{r3, pc}
 800ba68:	00000000 	.word	0x00000000

0800ba6c <sqrtf>:
 800ba6c:	b508      	push	{r3, lr}
 800ba6e:	ed2d 8b02 	vpush	{d8}
 800ba72:	eeb0 8a40 	vmov.f32	s16, s0
 800ba76:	f000 fa75 	bl	800bf64 <__ieee754_sqrtf>
 800ba7a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ba7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba82:	d60c      	bvs.n	800ba9e <sqrtf+0x32>
 800ba84:	eddf 8a07 	vldr	s17, [pc, #28]	; 800baa4 <sqrtf+0x38>
 800ba88:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ba8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba90:	d505      	bpl.n	800ba9e <sqrtf+0x32>
 800ba92:	f7ff fe3b 	bl	800b70c <__errno>
 800ba96:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ba9a:	2321      	movs	r3, #33	; 0x21
 800ba9c:	6003      	str	r3, [r0, #0]
 800ba9e:	ecbd 8b02 	vpop	{d8}
 800baa2:	bd08      	pop	{r3, pc}
 800baa4:	00000000 	.word	0x00000000

0800baa8 <__ieee754_atan2f>:
 800baa8:	ee10 2a90 	vmov	r2, s1
 800baac:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800bab0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800bab4:	b510      	push	{r4, lr}
 800bab6:	eef0 7a40 	vmov.f32	s15, s0
 800baba:	dc06      	bgt.n	800baca <__ieee754_atan2f+0x22>
 800babc:	ee10 0a10 	vmov	r0, s0
 800bac0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800bac4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bac8:	dd04      	ble.n	800bad4 <__ieee754_atan2f+0x2c>
 800baca:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800bace:	eeb0 0a67 	vmov.f32	s0, s15
 800bad2:	bd10      	pop	{r4, pc}
 800bad4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800bad8:	d103      	bne.n	800bae2 <__ieee754_atan2f+0x3a>
 800bada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bade:	f000 bd63 	b.w	800c5a8 <atanf>
 800bae2:	1794      	asrs	r4, r2, #30
 800bae4:	f004 0402 	and.w	r4, r4, #2
 800bae8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800baec:	b943      	cbnz	r3, 800bb00 <__ieee754_atan2f+0x58>
 800baee:	2c02      	cmp	r4, #2
 800baf0:	d05e      	beq.n	800bbb0 <__ieee754_atan2f+0x108>
 800baf2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800bbc4 <__ieee754_atan2f+0x11c>
 800baf6:	2c03      	cmp	r4, #3
 800baf8:	bf08      	it	eq
 800bafa:	eef0 7a47 	vmoveq.f32	s15, s14
 800bafe:	e7e6      	b.n	800bace <__ieee754_atan2f+0x26>
 800bb00:	b941      	cbnz	r1, 800bb14 <__ieee754_atan2f+0x6c>
 800bb02:	eddf 7a31 	vldr	s15, [pc, #196]	; 800bbc8 <__ieee754_atan2f+0x120>
 800bb06:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800bbcc <__ieee754_atan2f+0x124>
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	bfb8      	it	lt
 800bb0e:	eef0 7a40 	vmovlt.f32	s15, s0
 800bb12:	e7dc      	b.n	800bace <__ieee754_atan2f+0x26>
 800bb14:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800bb18:	d110      	bne.n	800bb3c <__ieee754_atan2f+0x94>
 800bb1a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bb1e:	f104 34ff 	add.w	r4, r4, #4294967295
 800bb22:	d107      	bne.n	800bb34 <__ieee754_atan2f+0x8c>
 800bb24:	2c02      	cmp	r4, #2
 800bb26:	d846      	bhi.n	800bbb6 <__ieee754_atan2f+0x10e>
 800bb28:	4b29      	ldr	r3, [pc, #164]	; (800bbd0 <__ieee754_atan2f+0x128>)
 800bb2a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bb2e:	edd4 7a00 	vldr	s15, [r4]
 800bb32:	e7cc      	b.n	800bace <__ieee754_atan2f+0x26>
 800bb34:	2c02      	cmp	r4, #2
 800bb36:	d841      	bhi.n	800bbbc <__ieee754_atan2f+0x114>
 800bb38:	4b26      	ldr	r3, [pc, #152]	; (800bbd4 <__ieee754_atan2f+0x12c>)
 800bb3a:	e7f6      	b.n	800bb2a <__ieee754_atan2f+0x82>
 800bb3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bb40:	d0df      	beq.n	800bb02 <__ieee754_atan2f+0x5a>
 800bb42:	1a5b      	subs	r3, r3, r1
 800bb44:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800bb48:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800bb4c:	da1a      	bge.n	800bb84 <__ieee754_atan2f+0xdc>
 800bb4e:	2a00      	cmp	r2, #0
 800bb50:	da01      	bge.n	800bb56 <__ieee754_atan2f+0xae>
 800bb52:	313c      	adds	r1, #60	; 0x3c
 800bb54:	db19      	blt.n	800bb8a <__ieee754_atan2f+0xe2>
 800bb56:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800bb5a:	f000 fdf9 	bl	800c750 <fabsf>
 800bb5e:	f000 fd23 	bl	800c5a8 <atanf>
 800bb62:	eef0 7a40 	vmov.f32	s15, s0
 800bb66:	2c01      	cmp	r4, #1
 800bb68:	d012      	beq.n	800bb90 <__ieee754_atan2f+0xe8>
 800bb6a:	2c02      	cmp	r4, #2
 800bb6c:	d017      	beq.n	800bb9e <__ieee754_atan2f+0xf6>
 800bb6e:	2c00      	cmp	r4, #0
 800bb70:	d0ad      	beq.n	800bace <__ieee754_atan2f+0x26>
 800bb72:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800bbd8 <__ieee754_atan2f+0x130>
 800bb76:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bb7a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800bbdc <__ieee754_atan2f+0x134>
 800bb7e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bb82:	e7a4      	b.n	800bace <__ieee754_atan2f+0x26>
 800bb84:	eddf 7a10 	vldr	s15, [pc, #64]	; 800bbc8 <__ieee754_atan2f+0x120>
 800bb88:	e7ed      	b.n	800bb66 <__ieee754_atan2f+0xbe>
 800bb8a:	eddf 7a15 	vldr	s15, [pc, #84]	; 800bbe0 <__ieee754_atan2f+0x138>
 800bb8e:	e7ea      	b.n	800bb66 <__ieee754_atan2f+0xbe>
 800bb90:	ee17 3a90 	vmov	r3, s15
 800bb94:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bb98:	ee07 3a90 	vmov	s15, r3
 800bb9c:	e797      	b.n	800bace <__ieee754_atan2f+0x26>
 800bb9e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800bbd8 <__ieee754_atan2f+0x130>
 800bba2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bba6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800bbdc <__ieee754_atan2f+0x134>
 800bbaa:	ee70 7a67 	vsub.f32	s15, s0, s15
 800bbae:	e78e      	b.n	800bace <__ieee754_atan2f+0x26>
 800bbb0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800bbdc <__ieee754_atan2f+0x134>
 800bbb4:	e78b      	b.n	800bace <__ieee754_atan2f+0x26>
 800bbb6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800bbe4 <__ieee754_atan2f+0x13c>
 800bbba:	e788      	b.n	800bace <__ieee754_atan2f+0x26>
 800bbbc:	eddf 7a08 	vldr	s15, [pc, #32]	; 800bbe0 <__ieee754_atan2f+0x138>
 800bbc0:	e785      	b.n	800bace <__ieee754_atan2f+0x26>
 800bbc2:	bf00      	nop
 800bbc4:	c0490fdb 	.word	0xc0490fdb
 800bbc8:	3fc90fdb 	.word	0x3fc90fdb
 800bbcc:	bfc90fdb 	.word	0xbfc90fdb
 800bbd0:	0800cbac 	.word	0x0800cbac
 800bbd4:	0800cbb8 	.word	0x0800cbb8
 800bbd8:	33bbbd2e 	.word	0x33bbbd2e
 800bbdc:	40490fdb 	.word	0x40490fdb
 800bbe0:	00000000 	.word	0x00000000
 800bbe4:	3f490fdb 	.word	0x3f490fdb

0800bbe8 <__ieee754_fmodf>:
 800bbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbea:	ee10 5a90 	vmov	r5, s1
 800bbee:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800bbf2:	d009      	beq.n	800bc08 <__ieee754_fmodf+0x20>
 800bbf4:	ee10 2a10 	vmov	r2, s0
 800bbf8:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800bbfc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bc00:	da02      	bge.n	800bc08 <__ieee754_fmodf+0x20>
 800bc02:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800bc06:	dd04      	ble.n	800bc12 <__ieee754_fmodf+0x2a>
 800bc08:	ee60 0a20 	vmul.f32	s1, s0, s1
 800bc0c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800bc10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc12:	42a3      	cmp	r3, r4
 800bc14:	dbfc      	blt.n	800bc10 <__ieee754_fmodf+0x28>
 800bc16:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800bc1a:	d105      	bne.n	800bc28 <__ieee754_fmodf+0x40>
 800bc1c:	4b32      	ldr	r3, [pc, #200]	; (800bce8 <__ieee754_fmodf+0x100>)
 800bc1e:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800bc22:	ed93 0a00 	vldr	s0, [r3]
 800bc26:	e7f3      	b.n	800bc10 <__ieee754_fmodf+0x28>
 800bc28:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800bc2c:	d13f      	bne.n	800bcae <__ieee754_fmodf+0xc6>
 800bc2e:	0219      	lsls	r1, r3, #8
 800bc30:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800bc34:	2900      	cmp	r1, #0
 800bc36:	dc37      	bgt.n	800bca8 <__ieee754_fmodf+0xc0>
 800bc38:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800bc3c:	d13d      	bne.n	800bcba <__ieee754_fmodf+0xd2>
 800bc3e:	0227      	lsls	r7, r4, #8
 800bc40:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800bc44:	2f00      	cmp	r7, #0
 800bc46:	da35      	bge.n	800bcb4 <__ieee754_fmodf+0xcc>
 800bc48:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800bc4c:	bfbb      	ittet	lt
 800bc4e:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800bc52:	1a12      	sublt	r2, r2, r0
 800bc54:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800bc58:	4093      	lsllt	r3, r2
 800bc5a:	bfa8      	it	ge
 800bc5c:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800bc60:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800bc64:	bfb5      	itete	lt
 800bc66:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800bc6a:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800bc6e:	1a52      	sublt	r2, r2, r1
 800bc70:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 800bc74:	bfb8      	it	lt
 800bc76:	4094      	lsllt	r4, r2
 800bc78:	1a40      	subs	r0, r0, r1
 800bc7a:	1b1a      	subs	r2, r3, r4
 800bc7c:	bb00      	cbnz	r0, 800bcc0 <__ieee754_fmodf+0xd8>
 800bc7e:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800bc82:	bf38      	it	cc
 800bc84:	4613      	movcc	r3, r2
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d0c8      	beq.n	800bc1c <__ieee754_fmodf+0x34>
 800bc8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bc8e:	db1f      	blt.n	800bcd0 <__ieee754_fmodf+0xe8>
 800bc90:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800bc94:	db1f      	blt.n	800bcd6 <__ieee754_fmodf+0xee>
 800bc96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800bc9a:	317f      	adds	r1, #127	; 0x7f
 800bc9c:	4333      	orrs	r3, r6
 800bc9e:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800bca2:	ee00 3a10 	vmov	s0, r3
 800bca6:	e7b3      	b.n	800bc10 <__ieee754_fmodf+0x28>
 800bca8:	3801      	subs	r0, #1
 800bcaa:	0049      	lsls	r1, r1, #1
 800bcac:	e7c2      	b.n	800bc34 <__ieee754_fmodf+0x4c>
 800bcae:	15d8      	asrs	r0, r3, #23
 800bcb0:	387f      	subs	r0, #127	; 0x7f
 800bcb2:	e7c1      	b.n	800bc38 <__ieee754_fmodf+0x50>
 800bcb4:	3901      	subs	r1, #1
 800bcb6:	007f      	lsls	r7, r7, #1
 800bcb8:	e7c4      	b.n	800bc44 <__ieee754_fmodf+0x5c>
 800bcba:	15e1      	asrs	r1, r4, #23
 800bcbc:	397f      	subs	r1, #127	; 0x7f
 800bcbe:	e7c3      	b.n	800bc48 <__ieee754_fmodf+0x60>
 800bcc0:	2a00      	cmp	r2, #0
 800bcc2:	da02      	bge.n	800bcca <__ieee754_fmodf+0xe2>
 800bcc4:	005b      	lsls	r3, r3, #1
 800bcc6:	3801      	subs	r0, #1
 800bcc8:	e7d7      	b.n	800bc7a <__ieee754_fmodf+0x92>
 800bcca:	d0a7      	beq.n	800bc1c <__ieee754_fmodf+0x34>
 800bccc:	0053      	lsls	r3, r2, #1
 800bcce:	e7fa      	b.n	800bcc6 <__ieee754_fmodf+0xde>
 800bcd0:	005b      	lsls	r3, r3, #1
 800bcd2:	3901      	subs	r1, #1
 800bcd4:	e7d9      	b.n	800bc8a <__ieee754_fmodf+0xa2>
 800bcd6:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800bcda:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800bcde:	3182      	adds	r1, #130	; 0x82
 800bce0:	410b      	asrs	r3, r1
 800bce2:	4333      	orrs	r3, r6
 800bce4:	e7dd      	b.n	800bca2 <__ieee754_fmodf+0xba>
 800bce6:	bf00      	nop
 800bce8:	0800cbc4 	.word	0x0800cbc4

0800bcec <__ieee754_rem_pio2f>:
 800bcec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcee:	ee10 6a10 	vmov	r6, s0
 800bcf2:	4b8e      	ldr	r3, [pc, #568]	; (800bf2c <__ieee754_rem_pio2f+0x240>)
 800bcf4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800bcf8:	429d      	cmp	r5, r3
 800bcfa:	b087      	sub	sp, #28
 800bcfc:	eef0 7a40 	vmov.f32	s15, s0
 800bd00:	4604      	mov	r4, r0
 800bd02:	dc05      	bgt.n	800bd10 <__ieee754_rem_pio2f+0x24>
 800bd04:	2300      	movs	r3, #0
 800bd06:	ed80 0a00 	vstr	s0, [r0]
 800bd0a:	6043      	str	r3, [r0, #4]
 800bd0c:	2000      	movs	r0, #0
 800bd0e:	e01a      	b.n	800bd46 <__ieee754_rem_pio2f+0x5a>
 800bd10:	4b87      	ldr	r3, [pc, #540]	; (800bf30 <__ieee754_rem_pio2f+0x244>)
 800bd12:	429d      	cmp	r5, r3
 800bd14:	dc46      	bgt.n	800bda4 <__ieee754_rem_pio2f+0xb8>
 800bd16:	2e00      	cmp	r6, #0
 800bd18:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800bf34 <__ieee754_rem_pio2f+0x248>
 800bd1c:	4b86      	ldr	r3, [pc, #536]	; (800bf38 <__ieee754_rem_pio2f+0x24c>)
 800bd1e:	f025 050f 	bic.w	r5, r5, #15
 800bd22:	dd1f      	ble.n	800bd64 <__ieee754_rem_pio2f+0x78>
 800bd24:	429d      	cmp	r5, r3
 800bd26:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bd2a:	d00e      	beq.n	800bd4a <__ieee754_rem_pio2f+0x5e>
 800bd2c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800bf3c <__ieee754_rem_pio2f+0x250>
 800bd30:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800bd34:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bd38:	ed80 0a00 	vstr	s0, [r0]
 800bd3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd40:	2001      	movs	r0, #1
 800bd42:	edc4 7a01 	vstr	s15, [r4, #4]
 800bd46:	b007      	add	sp, #28
 800bd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd4a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800bf40 <__ieee754_rem_pio2f+0x254>
 800bd4e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800bf44 <__ieee754_rem_pio2f+0x258>
 800bd52:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bd56:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800bd5a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bd5e:	edc0 6a00 	vstr	s13, [r0]
 800bd62:	e7eb      	b.n	800bd3c <__ieee754_rem_pio2f+0x50>
 800bd64:	429d      	cmp	r5, r3
 800bd66:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bd6a:	d00e      	beq.n	800bd8a <__ieee754_rem_pio2f+0x9e>
 800bd6c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800bf3c <__ieee754_rem_pio2f+0x250>
 800bd70:	ee37 0a87 	vadd.f32	s0, s15, s14
 800bd74:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bd78:	ed80 0a00 	vstr	s0, [r0]
 800bd7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd80:	f04f 30ff 	mov.w	r0, #4294967295
 800bd84:	edc4 7a01 	vstr	s15, [r4, #4]
 800bd88:	e7dd      	b.n	800bd46 <__ieee754_rem_pio2f+0x5a>
 800bd8a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800bf40 <__ieee754_rem_pio2f+0x254>
 800bd8e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800bf44 <__ieee754_rem_pio2f+0x258>
 800bd92:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bd96:	ee77 6a87 	vadd.f32	s13, s15, s14
 800bd9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bd9e:	edc0 6a00 	vstr	s13, [r0]
 800bda2:	e7eb      	b.n	800bd7c <__ieee754_rem_pio2f+0x90>
 800bda4:	4b68      	ldr	r3, [pc, #416]	; (800bf48 <__ieee754_rem_pio2f+0x25c>)
 800bda6:	429d      	cmp	r5, r3
 800bda8:	dc72      	bgt.n	800be90 <__ieee754_rem_pio2f+0x1a4>
 800bdaa:	f000 fcd1 	bl	800c750 <fabsf>
 800bdae:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800bf4c <__ieee754_rem_pio2f+0x260>
 800bdb2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bdb6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bdba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bdc2:	ee17 0a90 	vmov	r0, s15
 800bdc6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800bf34 <__ieee754_rem_pio2f+0x248>
 800bdca:	eea7 0a67 	vfms.f32	s0, s14, s15
 800bdce:	281f      	cmp	r0, #31
 800bdd0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800bf3c <__ieee754_rem_pio2f+0x250>
 800bdd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdd8:	eeb1 6a47 	vneg.f32	s12, s14
 800bddc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bde0:	ee16 2a90 	vmov	r2, s13
 800bde4:	dc1c      	bgt.n	800be20 <__ieee754_rem_pio2f+0x134>
 800bde6:	495a      	ldr	r1, [pc, #360]	; (800bf50 <__ieee754_rem_pio2f+0x264>)
 800bde8:	1e47      	subs	r7, r0, #1
 800bdea:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800bdee:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800bdf2:	428b      	cmp	r3, r1
 800bdf4:	d014      	beq.n	800be20 <__ieee754_rem_pio2f+0x134>
 800bdf6:	6022      	str	r2, [r4, #0]
 800bdf8:	ed94 7a00 	vldr	s14, [r4]
 800bdfc:	ee30 0a47 	vsub.f32	s0, s0, s14
 800be00:	2e00      	cmp	r6, #0
 800be02:	ee30 0a67 	vsub.f32	s0, s0, s15
 800be06:	ed84 0a01 	vstr	s0, [r4, #4]
 800be0a:	da9c      	bge.n	800bd46 <__ieee754_rem_pio2f+0x5a>
 800be0c:	eeb1 7a47 	vneg.f32	s14, s14
 800be10:	eeb1 0a40 	vneg.f32	s0, s0
 800be14:	ed84 7a00 	vstr	s14, [r4]
 800be18:	ed84 0a01 	vstr	s0, [r4, #4]
 800be1c:	4240      	negs	r0, r0
 800be1e:	e792      	b.n	800bd46 <__ieee754_rem_pio2f+0x5a>
 800be20:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800be24:	15eb      	asrs	r3, r5, #23
 800be26:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800be2a:	2d08      	cmp	r5, #8
 800be2c:	dde3      	ble.n	800bdf6 <__ieee754_rem_pio2f+0x10a>
 800be2e:	eddf 7a44 	vldr	s15, [pc, #272]	; 800bf40 <__ieee754_rem_pio2f+0x254>
 800be32:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bf44 <__ieee754_rem_pio2f+0x258>
 800be36:	eef0 6a40 	vmov.f32	s13, s0
 800be3a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800be3e:	ee30 0a66 	vsub.f32	s0, s0, s13
 800be42:	eea6 0a27 	vfma.f32	s0, s12, s15
 800be46:	eef0 7a40 	vmov.f32	s15, s0
 800be4a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800be4e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800be52:	ee15 2a90 	vmov	r2, s11
 800be56:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800be5a:	1a5b      	subs	r3, r3, r1
 800be5c:	2b19      	cmp	r3, #25
 800be5e:	dc04      	bgt.n	800be6a <__ieee754_rem_pio2f+0x17e>
 800be60:	edc4 5a00 	vstr	s11, [r4]
 800be64:	eeb0 0a66 	vmov.f32	s0, s13
 800be68:	e7c6      	b.n	800bdf8 <__ieee754_rem_pio2f+0x10c>
 800be6a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800bf54 <__ieee754_rem_pio2f+0x268>
 800be6e:	eeb0 0a66 	vmov.f32	s0, s13
 800be72:	eea6 0a25 	vfma.f32	s0, s12, s11
 800be76:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800be7a:	eddf 6a37 	vldr	s13, [pc, #220]	; 800bf58 <__ieee754_rem_pio2f+0x26c>
 800be7e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800be82:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800be86:	ee30 7a67 	vsub.f32	s14, s0, s15
 800be8a:	ed84 7a00 	vstr	s14, [r4]
 800be8e:	e7b3      	b.n	800bdf8 <__ieee754_rem_pio2f+0x10c>
 800be90:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800be94:	db06      	blt.n	800bea4 <__ieee754_rem_pio2f+0x1b8>
 800be96:	ee70 7a40 	vsub.f32	s15, s0, s0
 800be9a:	edc0 7a01 	vstr	s15, [r0, #4]
 800be9e:	edc0 7a00 	vstr	s15, [r0]
 800bea2:	e733      	b.n	800bd0c <__ieee754_rem_pio2f+0x20>
 800bea4:	15ea      	asrs	r2, r5, #23
 800bea6:	3a86      	subs	r2, #134	; 0x86
 800bea8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800beac:	ee07 3a90 	vmov	s15, r3
 800beb0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800beb4:	eddf 6a29 	vldr	s13, [pc, #164]	; 800bf5c <__ieee754_rem_pio2f+0x270>
 800beb8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bebc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bec0:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bec4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bec8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800becc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bed0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bed4:	ed8d 7a04 	vstr	s14, [sp, #16]
 800bed8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bedc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bee4:	edcd 7a05 	vstr	s15, [sp, #20]
 800bee8:	d11e      	bne.n	800bf28 <__ieee754_rem_pio2f+0x23c>
 800beea:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800beee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bef2:	bf14      	ite	ne
 800bef4:	2302      	movne	r3, #2
 800bef6:	2301      	moveq	r3, #1
 800bef8:	4919      	ldr	r1, [pc, #100]	; (800bf60 <__ieee754_rem_pio2f+0x274>)
 800befa:	9101      	str	r1, [sp, #4]
 800befc:	2102      	movs	r1, #2
 800befe:	9100      	str	r1, [sp, #0]
 800bf00:	a803      	add	r0, sp, #12
 800bf02:	4621      	mov	r1, r4
 800bf04:	f000 f892 	bl	800c02c <__kernel_rem_pio2f>
 800bf08:	2e00      	cmp	r6, #0
 800bf0a:	f6bf af1c 	bge.w	800bd46 <__ieee754_rem_pio2f+0x5a>
 800bf0e:	edd4 7a00 	vldr	s15, [r4]
 800bf12:	eef1 7a67 	vneg.f32	s15, s15
 800bf16:	edc4 7a00 	vstr	s15, [r4]
 800bf1a:	edd4 7a01 	vldr	s15, [r4, #4]
 800bf1e:	eef1 7a67 	vneg.f32	s15, s15
 800bf22:	edc4 7a01 	vstr	s15, [r4, #4]
 800bf26:	e779      	b.n	800be1c <__ieee754_rem_pio2f+0x130>
 800bf28:	2303      	movs	r3, #3
 800bf2a:	e7e5      	b.n	800bef8 <__ieee754_rem_pio2f+0x20c>
 800bf2c:	3f490fd8 	.word	0x3f490fd8
 800bf30:	4016cbe3 	.word	0x4016cbe3
 800bf34:	3fc90f80 	.word	0x3fc90f80
 800bf38:	3fc90fd0 	.word	0x3fc90fd0
 800bf3c:	37354443 	.word	0x37354443
 800bf40:	37354400 	.word	0x37354400
 800bf44:	2e85a308 	.word	0x2e85a308
 800bf48:	43490f80 	.word	0x43490f80
 800bf4c:	3f22f984 	.word	0x3f22f984
 800bf50:	0800cbcc 	.word	0x0800cbcc
 800bf54:	2e85a300 	.word	0x2e85a300
 800bf58:	248d3132 	.word	0x248d3132
 800bf5c:	43800000 	.word	0x43800000
 800bf60:	0800cc4c 	.word	0x0800cc4c

0800bf64 <__ieee754_sqrtf>:
 800bf64:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bf68:	4770      	bx	lr
	...

0800bf6c <__kernel_cosf>:
 800bf6c:	ee10 3a10 	vmov	r3, s0
 800bf70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf74:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bf78:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bf7c:	da05      	bge.n	800bf8a <__kernel_cosf+0x1e>
 800bf7e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bf82:	ee17 2a90 	vmov	r2, s15
 800bf86:	2a00      	cmp	r2, #0
 800bf88:	d03d      	beq.n	800c006 <__kernel_cosf+0x9a>
 800bf8a:	ee60 5a00 	vmul.f32	s11, s0, s0
 800bf8e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c00c <__kernel_cosf+0xa0>
 800bf92:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c010 <__kernel_cosf+0xa4>
 800bf96:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800c014 <__kernel_cosf+0xa8>
 800bf9a:	4a1f      	ldr	r2, [pc, #124]	; (800c018 <__kernel_cosf+0xac>)
 800bf9c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800c01c <__kernel_cosf+0xb0>
 800bfa6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800bfaa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800c020 <__kernel_cosf+0xb4>
 800bfae:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800bfb2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800c024 <__kernel_cosf+0xb8>
 800bfb6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800bfba:	eeb0 7a66 	vmov.f32	s14, s13
 800bfbe:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800bfc2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800bfc6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800bfca:	ee67 6a25 	vmul.f32	s13, s14, s11
 800bfce:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800bfd2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bfd6:	dc04      	bgt.n	800bfe2 <__kernel_cosf+0x76>
 800bfd8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800bfdc:	ee36 0a47 	vsub.f32	s0, s12, s14
 800bfe0:	4770      	bx	lr
 800bfe2:	4a11      	ldr	r2, [pc, #68]	; (800c028 <__kernel_cosf+0xbc>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	bfda      	itte	le
 800bfe8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800bfec:	ee06 3a90 	vmovle	s13, r3
 800bff0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800bff4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bff8:	ee36 0a66 	vsub.f32	s0, s12, s13
 800bffc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c000:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c004:	4770      	bx	lr
 800c006:	eeb0 0a46 	vmov.f32	s0, s12
 800c00a:	4770      	bx	lr
 800c00c:	ad47d74e 	.word	0xad47d74e
 800c010:	310f74f6 	.word	0x310f74f6
 800c014:	3d2aaaab 	.word	0x3d2aaaab
 800c018:	3e999999 	.word	0x3e999999
 800c01c:	b493f27c 	.word	0xb493f27c
 800c020:	37d00d01 	.word	0x37d00d01
 800c024:	bab60b61 	.word	0xbab60b61
 800c028:	3f480000 	.word	0x3f480000

0800c02c <__kernel_rem_pio2f>:
 800c02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c030:	ed2d 8b04 	vpush	{d8-d9}
 800c034:	b0d9      	sub	sp, #356	; 0x164
 800c036:	4688      	mov	r8, r1
 800c038:	9002      	str	r0, [sp, #8]
 800c03a:	49bb      	ldr	r1, [pc, #748]	; (800c328 <__kernel_rem_pio2f+0x2fc>)
 800c03c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800c03e:	9301      	str	r3, [sp, #4]
 800c040:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800c044:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800c048:	1e59      	subs	r1, r3, #1
 800c04a:	1d13      	adds	r3, r2, #4
 800c04c:	db27      	blt.n	800c09e <__kernel_rem_pio2f+0x72>
 800c04e:	f1b2 0b03 	subs.w	fp, r2, #3
 800c052:	bf48      	it	mi
 800c054:	f102 0b04 	addmi.w	fp, r2, #4
 800c058:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800c05c:	1c45      	adds	r5, r0, #1
 800c05e:	00ec      	lsls	r4, r5, #3
 800c060:	1a47      	subs	r7, r0, r1
 800c062:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800c338 <__kernel_rem_pio2f+0x30c>
 800c066:	9403      	str	r4, [sp, #12]
 800c068:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800c06c:	eb0a 0c01 	add.w	ip, sl, r1
 800c070:	ae1c      	add	r6, sp, #112	; 0x70
 800c072:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800c076:	2400      	movs	r4, #0
 800c078:	4564      	cmp	r4, ip
 800c07a:	dd12      	ble.n	800c0a2 <__kernel_rem_pio2f+0x76>
 800c07c:	9b01      	ldr	r3, [sp, #4]
 800c07e:	ac1c      	add	r4, sp, #112	; 0x70
 800c080:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800c084:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800c088:	f04f 0c00 	mov.w	ip, #0
 800c08c:	45d4      	cmp	ip, sl
 800c08e:	dc27      	bgt.n	800c0e0 <__kernel_rem_pio2f+0xb4>
 800c090:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c094:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800c338 <__kernel_rem_pio2f+0x30c>
 800c098:	4627      	mov	r7, r4
 800c09a:	2600      	movs	r6, #0
 800c09c:	e016      	b.n	800c0cc <__kernel_rem_pio2f+0xa0>
 800c09e:	2000      	movs	r0, #0
 800c0a0:	e7dc      	b.n	800c05c <__kernel_rem_pio2f+0x30>
 800c0a2:	42e7      	cmn	r7, r4
 800c0a4:	bf5d      	ittte	pl
 800c0a6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800c0aa:	ee07 3a90 	vmovpl	s15, r3
 800c0ae:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c0b2:	eef0 7a47 	vmovmi.f32	s15, s14
 800c0b6:	ece6 7a01 	vstmia	r6!, {s15}
 800c0ba:	3401      	adds	r4, #1
 800c0bc:	e7dc      	b.n	800c078 <__kernel_rem_pio2f+0x4c>
 800c0be:	ecf9 6a01 	vldmia	r9!, {s13}
 800c0c2:	ed97 7a00 	vldr	s14, [r7]
 800c0c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c0ca:	3601      	adds	r6, #1
 800c0cc:	428e      	cmp	r6, r1
 800c0ce:	f1a7 0704 	sub.w	r7, r7, #4
 800c0d2:	ddf4      	ble.n	800c0be <__kernel_rem_pio2f+0x92>
 800c0d4:	eceb 7a01 	vstmia	fp!, {s15}
 800c0d8:	f10c 0c01 	add.w	ip, ip, #1
 800c0dc:	3404      	adds	r4, #4
 800c0de:	e7d5      	b.n	800c08c <__kernel_rem_pio2f+0x60>
 800c0e0:	ab08      	add	r3, sp, #32
 800c0e2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800c0e6:	eddf 8a93 	vldr	s17, [pc, #588]	; 800c334 <__kernel_rem_pio2f+0x308>
 800c0ea:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800c330 <__kernel_rem_pio2f+0x304>
 800c0ee:	9304      	str	r3, [sp, #16]
 800c0f0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800c0f4:	4656      	mov	r6, sl
 800c0f6:	00b3      	lsls	r3, r6, #2
 800c0f8:	9305      	str	r3, [sp, #20]
 800c0fa:	ab58      	add	r3, sp, #352	; 0x160
 800c0fc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800c100:	ac08      	add	r4, sp, #32
 800c102:	ab44      	add	r3, sp, #272	; 0x110
 800c104:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800c108:	46a4      	mov	ip, r4
 800c10a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800c10e:	4637      	mov	r7, r6
 800c110:	2f00      	cmp	r7, #0
 800c112:	f1a0 0004 	sub.w	r0, r0, #4
 800c116:	dc4f      	bgt.n	800c1b8 <__kernel_rem_pio2f+0x18c>
 800c118:	4628      	mov	r0, r5
 800c11a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800c11e:	f000 fb61 	bl	800c7e4 <scalbnf>
 800c122:	eeb0 8a40 	vmov.f32	s16, s0
 800c126:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800c12a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c12e:	f000 fb17 	bl	800c760 <floorf>
 800c132:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800c136:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c13a:	2d00      	cmp	r5, #0
 800c13c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800c140:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c144:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800c148:	ee17 9a90 	vmov	r9, s15
 800c14c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c150:	dd44      	ble.n	800c1dc <__kernel_rem_pio2f+0x1b0>
 800c152:	f106 3cff 	add.w	ip, r6, #4294967295
 800c156:	ab08      	add	r3, sp, #32
 800c158:	f1c5 0e08 	rsb	lr, r5, #8
 800c15c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800c160:	fa47 f00e 	asr.w	r0, r7, lr
 800c164:	4481      	add	r9, r0
 800c166:	fa00 f00e 	lsl.w	r0, r0, lr
 800c16a:	1a3f      	subs	r7, r7, r0
 800c16c:	f1c5 0007 	rsb	r0, r5, #7
 800c170:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800c174:	4107      	asrs	r7, r0
 800c176:	2f00      	cmp	r7, #0
 800c178:	dd3f      	ble.n	800c1fa <__kernel_rem_pio2f+0x1ce>
 800c17a:	f04f 0e00 	mov.w	lr, #0
 800c17e:	f109 0901 	add.w	r9, r9, #1
 800c182:	4673      	mov	r3, lr
 800c184:	4576      	cmp	r6, lr
 800c186:	dc6b      	bgt.n	800c260 <__kernel_rem_pio2f+0x234>
 800c188:	2d00      	cmp	r5, #0
 800c18a:	dd04      	ble.n	800c196 <__kernel_rem_pio2f+0x16a>
 800c18c:	2d01      	cmp	r5, #1
 800c18e:	d078      	beq.n	800c282 <__kernel_rem_pio2f+0x256>
 800c190:	2d02      	cmp	r5, #2
 800c192:	f000 8081 	beq.w	800c298 <__kernel_rem_pio2f+0x26c>
 800c196:	2f02      	cmp	r7, #2
 800c198:	d12f      	bne.n	800c1fa <__kernel_rem_pio2f+0x1ce>
 800c19a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c19e:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c1a2:	b353      	cbz	r3, 800c1fa <__kernel_rem_pio2f+0x1ce>
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800c1aa:	f000 fb1b 	bl	800c7e4 <scalbnf>
 800c1ae:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800c1b2:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c1b6:	e020      	b.n	800c1fa <__kernel_rem_pio2f+0x1ce>
 800c1b8:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c1bc:	3f01      	subs	r7, #1
 800c1be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c1c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1c6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c1ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c1ce:	ecac 0a01 	vstmia	ip!, {s0}
 800c1d2:	ed90 0a00 	vldr	s0, [r0]
 800c1d6:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c1da:	e799      	b.n	800c110 <__kernel_rem_pio2f+0xe4>
 800c1dc:	d105      	bne.n	800c1ea <__kernel_rem_pio2f+0x1be>
 800c1de:	1e70      	subs	r0, r6, #1
 800c1e0:	ab08      	add	r3, sp, #32
 800c1e2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800c1e6:	11ff      	asrs	r7, r7, #7
 800c1e8:	e7c5      	b.n	800c176 <__kernel_rem_pio2f+0x14a>
 800c1ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c1ee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1f6:	da31      	bge.n	800c25c <__kernel_rem_pio2f+0x230>
 800c1f8:	2700      	movs	r7, #0
 800c1fa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c202:	f040 809b 	bne.w	800c33c <__kernel_rem_pio2f+0x310>
 800c206:	1e74      	subs	r4, r6, #1
 800c208:	46a4      	mov	ip, r4
 800c20a:	2000      	movs	r0, #0
 800c20c:	45d4      	cmp	ip, sl
 800c20e:	da4a      	bge.n	800c2a6 <__kernel_rem_pio2f+0x27a>
 800c210:	2800      	cmp	r0, #0
 800c212:	d07a      	beq.n	800c30a <__kernel_rem_pio2f+0x2de>
 800c214:	ab08      	add	r3, sp, #32
 800c216:	3d08      	subs	r5, #8
 800c218:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	f000 8081 	beq.w	800c324 <__kernel_rem_pio2f+0x2f8>
 800c222:	4628      	mov	r0, r5
 800c224:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c228:	00a5      	lsls	r5, r4, #2
 800c22a:	f000 fadb 	bl	800c7e4 <scalbnf>
 800c22e:	aa44      	add	r2, sp, #272	; 0x110
 800c230:	1d2b      	adds	r3, r5, #4
 800c232:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800c334 <__kernel_rem_pio2f+0x308>
 800c236:	18d1      	adds	r1, r2, r3
 800c238:	4622      	mov	r2, r4
 800c23a:	2a00      	cmp	r2, #0
 800c23c:	f280 80ae 	bge.w	800c39c <__kernel_rem_pio2f+0x370>
 800c240:	4622      	mov	r2, r4
 800c242:	2a00      	cmp	r2, #0
 800c244:	f2c0 80cc 	blt.w	800c3e0 <__kernel_rem_pio2f+0x3b4>
 800c248:	a944      	add	r1, sp, #272	; 0x110
 800c24a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800c24e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800c32c <__kernel_rem_pio2f+0x300>
 800c252:	eddf 7a39 	vldr	s15, [pc, #228]	; 800c338 <__kernel_rem_pio2f+0x30c>
 800c256:	2000      	movs	r0, #0
 800c258:	1aa1      	subs	r1, r4, r2
 800c25a:	e0b6      	b.n	800c3ca <__kernel_rem_pio2f+0x39e>
 800c25c:	2702      	movs	r7, #2
 800c25e:	e78c      	b.n	800c17a <__kernel_rem_pio2f+0x14e>
 800c260:	6820      	ldr	r0, [r4, #0]
 800c262:	b94b      	cbnz	r3, 800c278 <__kernel_rem_pio2f+0x24c>
 800c264:	b118      	cbz	r0, 800c26e <__kernel_rem_pio2f+0x242>
 800c266:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800c26a:	6020      	str	r0, [r4, #0]
 800c26c:	2001      	movs	r0, #1
 800c26e:	f10e 0e01 	add.w	lr, lr, #1
 800c272:	3404      	adds	r4, #4
 800c274:	4603      	mov	r3, r0
 800c276:	e785      	b.n	800c184 <__kernel_rem_pio2f+0x158>
 800c278:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800c27c:	6020      	str	r0, [r4, #0]
 800c27e:	4618      	mov	r0, r3
 800c280:	e7f5      	b.n	800c26e <__kernel_rem_pio2f+0x242>
 800c282:	1e74      	subs	r4, r6, #1
 800c284:	a808      	add	r0, sp, #32
 800c286:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800c28a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800c28e:	f10d 0c20 	add.w	ip, sp, #32
 800c292:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800c296:	e77e      	b.n	800c196 <__kernel_rem_pio2f+0x16a>
 800c298:	1e74      	subs	r4, r6, #1
 800c29a:	a808      	add	r0, sp, #32
 800c29c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800c2a0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800c2a4:	e7f3      	b.n	800c28e <__kernel_rem_pio2f+0x262>
 800c2a6:	ab08      	add	r3, sp, #32
 800c2a8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800c2ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c2b0:	4318      	orrs	r0, r3
 800c2b2:	e7ab      	b.n	800c20c <__kernel_rem_pio2f+0x1e0>
 800c2b4:	f10c 0c01 	add.w	ip, ip, #1
 800c2b8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800c2bc:	2c00      	cmp	r4, #0
 800c2be:	d0f9      	beq.n	800c2b4 <__kernel_rem_pio2f+0x288>
 800c2c0:	9b05      	ldr	r3, [sp, #20]
 800c2c2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800c2c6:	eb0d 0003 	add.w	r0, sp, r3
 800c2ca:	9b01      	ldr	r3, [sp, #4]
 800c2cc:	18f4      	adds	r4, r6, r3
 800c2ce:	ab1c      	add	r3, sp, #112	; 0x70
 800c2d0:	1c77      	adds	r7, r6, #1
 800c2d2:	384c      	subs	r0, #76	; 0x4c
 800c2d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c2d8:	4466      	add	r6, ip
 800c2da:	42be      	cmp	r6, r7
 800c2dc:	f6ff af0b 	blt.w	800c0f6 <__kernel_rem_pio2f+0xca>
 800c2e0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800c2e4:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c2e8:	ee07 3a90 	vmov	s15, r3
 800c2ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2f0:	f04f 0c00 	mov.w	ip, #0
 800c2f4:	ece4 7a01 	vstmia	r4!, {s15}
 800c2f8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800c338 <__kernel_rem_pio2f+0x30c>
 800c2fc:	46a1      	mov	r9, r4
 800c2fe:	458c      	cmp	ip, r1
 800c300:	dd07      	ble.n	800c312 <__kernel_rem_pio2f+0x2e6>
 800c302:	ece0 7a01 	vstmia	r0!, {s15}
 800c306:	3701      	adds	r7, #1
 800c308:	e7e7      	b.n	800c2da <__kernel_rem_pio2f+0x2ae>
 800c30a:	9804      	ldr	r0, [sp, #16]
 800c30c:	f04f 0c01 	mov.w	ip, #1
 800c310:	e7d2      	b.n	800c2b8 <__kernel_rem_pio2f+0x28c>
 800c312:	ecfe 6a01 	vldmia	lr!, {s13}
 800c316:	ed39 7a01 	vldmdb	r9!, {s14}
 800c31a:	f10c 0c01 	add.w	ip, ip, #1
 800c31e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c322:	e7ec      	b.n	800c2fe <__kernel_rem_pio2f+0x2d2>
 800c324:	3c01      	subs	r4, #1
 800c326:	e775      	b.n	800c214 <__kernel_rem_pio2f+0x1e8>
 800c328:	0800cf90 	.word	0x0800cf90
 800c32c:	0800cf64 	.word	0x0800cf64
 800c330:	43800000 	.word	0x43800000
 800c334:	3b800000 	.word	0x3b800000
 800c338:	00000000 	.word	0x00000000
 800c33c:	9b03      	ldr	r3, [sp, #12]
 800c33e:	eeb0 0a48 	vmov.f32	s0, s16
 800c342:	1a98      	subs	r0, r3, r2
 800c344:	f000 fa4e 	bl	800c7e4 <scalbnf>
 800c348:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800c330 <__kernel_rem_pio2f+0x304>
 800c34c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c354:	db19      	blt.n	800c38a <__kernel_rem_pio2f+0x35e>
 800c356:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800c334 <__kernel_rem_pio2f+0x308>
 800c35a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c35e:	aa08      	add	r2, sp, #32
 800c360:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c364:	1c74      	adds	r4, r6, #1
 800c366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c36a:	3508      	adds	r5, #8
 800c36c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c374:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c378:	ee10 3a10 	vmov	r3, s0
 800c37c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c380:	ee17 3a90 	vmov	r3, s15
 800c384:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c388:	e74b      	b.n	800c222 <__kernel_rem_pio2f+0x1f6>
 800c38a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c38e:	aa08      	add	r2, sp, #32
 800c390:	ee10 3a10 	vmov	r3, s0
 800c394:	4634      	mov	r4, r6
 800c396:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c39a:	e742      	b.n	800c222 <__kernel_rem_pio2f+0x1f6>
 800c39c:	a808      	add	r0, sp, #32
 800c39e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800c3a2:	9001      	str	r0, [sp, #4]
 800c3a4:	ee07 0a90 	vmov	s15, r0
 800c3a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3ac:	3a01      	subs	r2, #1
 800c3ae:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c3b2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c3b6:	ed61 7a01 	vstmdb	r1!, {s15}
 800c3ba:	e73e      	b.n	800c23a <__kernel_rem_pio2f+0x20e>
 800c3bc:	ecfc 6a01 	vldmia	ip!, {s13}
 800c3c0:	ecb6 7a01 	vldmia	r6!, {s14}
 800c3c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c3c8:	3001      	adds	r0, #1
 800c3ca:	4550      	cmp	r0, sl
 800c3cc:	dc01      	bgt.n	800c3d2 <__kernel_rem_pio2f+0x3a6>
 800c3ce:	4288      	cmp	r0, r1
 800c3d0:	ddf4      	ble.n	800c3bc <__kernel_rem_pio2f+0x390>
 800c3d2:	a858      	add	r0, sp, #352	; 0x160
 800c3d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c3d8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800c3dc:	3a01      	subs	r2, #1
 800c3de:	e730      	b.n	800c242 <__kernel_rem_pio2f+0x216>
 800c3e0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800c3e2:	2a02      	cmp	r2, #2
 800c3e4:	dc09      	bgt.n	800c3fa <__kernel_rem_pio2f+0x3ce>
 800c3e6:	2a00      	cmp	r2, #0
 800c3e8:	dc2a      	bgt.n	800c440 <__kernel_rem_pio2f+0x414>
 800c3ea:	d043      	beq.n	800c474 <__kernel_rem_pio2f+0x448>
 800c3ec:	f009 0007 	and.w	r0, r9, #7
 800c3f0:	b059      	add	sp, #356	; 0x164
 800c3f2:	ecbd 8b04 	vpop	{d8-d9}
 800c3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3fa:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800c3fc:	2b03      	cmp	r3, #3
 800c3fe:	d1f5      	bne.n	800c3ec <__kernel_rem_pio2f+0x3c0>
 800c400:	ab30      	add	r3, sp, #192	; 0xc0
 800c402:	442b      	add	r3, r5
 800c404:	461a      	mov	r2, r3
 800c406:	4619      	mov	r1, r3
 800c408:	4620      	mov	r0, r4
 800c40a:	2800      	cmp	r0, #0
 800c40c:	f1a1 0104 	sub.w	r1, r1, #4
 800c410:	dc51      	bgt.n	800c4b6 <__kernel_rem_pio2f+0x48a>
 800c412:	4621      	mov	r1, r4
 800c414:	2901      	cmp	r1, #1
 800c416:	f1a2 0204 	sub.w	r2, r2, #4
 800c41a:	dc5c      	bgt.n	800c4d6 <__kernel_rem_pio2f+0x4aa>
 800c41c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800c338 <__kernel_rem_pio2f+0x30c>
 800c420:	3304      	adds	r3, #4
 800c422:	2c01      	cmp	r4, #1
 800c424:	dc67      	bgt.n	800c4f6 <__kernel_rem_pio2f+0x4ca>
 800c426:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800c42a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800c42e:	2f00      	cmp	r7, #0
 800c430:	d167      	bne.n	800c502 <__kernel_rem_pio2f+0x4d6>
 800c432:	edc8 6a00 	vstr	s13, [r8]
 800c436:	ed88 7a01 	vstr	s14, [r8, #4]
 800c43a:	edc8 7a02 	vstr	s15, [r8, #8]
 800c43e:	e7d5      	b.n	800c3ec <__kernel_rem_pio2f+0x3c0>
 800c440:	aa30      	add	r2, sp, #192	; 0xc0
 800c442:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800c338 <__kernel_rem_pio2f+0x30c>
 800c446:	4413      	add	r3, r2
 800c448:	4622      	mov	r2, r4
 800c44a:	2a00      	cmp	r2, #0
 800c44c:	da24      	bge.n	800c498 <__kernel_rem_pio2f+0x46c>
 800c44e:	b34f      	cbz	r7, 800c4a4 <__kernel_rem_pio2f+0x478>
 800c450:	eef1 7a47 	vneg.f32	s15, s14
 800c454:	edc8 7a00 	vstr	s15, [r8]
 800c458:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800c45c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c460:	aa31      	add	r2, sp, #196	; 0xc4
 800c462:	2301      	movs	r3, #1
 800c464:	429c      	cmp	r4, r3
 800c466:	da20      	bge.n	800c4aa <__kernel_rem_pio2f+0x47e>
 800c468:	b10f      	cbz	r7, 800c46e <__kernel_rem_pio2f+0x442>
 800c46a:	eef1 7a67 	vneg.f32	s15, s15
 800c46e:	edc8 7a01 	vstr	s15, [r8, #4]
 800c472:	e7bb      	b.n	800c3ec <__kernel_rem_pio2f+0x3c0>
 800c474:	aa30      	add	r2, sp, #192	; 0xc0
 800c476:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800c338 <__kernel_rem_pio2f+0x30c>
 800c47a:	4413      	add	r3, r2
 800c47c:	2c00      	cmp	r4, #0
 800c47e:	da05      	bge.n	800c48c <__kernel_rem_pio2f+0x460>
 800c480:	b10f      	cbz	r7, 800c486 <__kernel_rem_pio2f+0x45a>
 800c482:	eef1 7a67 	vneg.f32	s15, s15
 800c486:	edc8 7a00 	vstr	s15, [r8]
 800c48a:	e7af      	b.n	800c3ec <__kernel_rem_pio2f+0x3c0>
 800c48c:	ed33 7a01 	vldmdb	r3!, {s14}
 800c490:	3c01      	subs	r4, #1
 800c492:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c496:	e7f1      	b.n	800c47c <__kernel_rem_pio2f+0x450>
 800c498:	ed73 7a01 	vldmdb	r3!, {s15}
 800c49c:	3a01      	subs	r2, #1
 800c49e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c4a2:	e7d2      	b.n	800c44a <__kernel_rem_pio2f+0x41e>
 800c4a4:	eef0 7a47 	vmov.f32	s15, s14
 800c4a8:	e7d4      	b.n	800c454 <__kernel_rem_pio2f+0x428>
 800c4aa:	ecb2 7a01 	vldmia	r2!, {s14}
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c4b4:	e7d6      	b.n	800c464 <__kernel_rem_pio2f+0x438>
 800c4b6:	edd1 7a00 	vldr	s15, [r1]
 800c4ba:	edd1 6a01 	vldr	s13, [r1, #4]
 800c4be:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c4c2:	3801      	subs	r0, #1
 800c4c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c4c8:	ed81 7a00 	vstr	s14, [r1]
 800c4cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4d0:	edc1 7a01 	vstr	s15, [r1, #4]
 800c4d4:	e799      	b.n	800c40a <__kernel_rem_pio2f+0x3de>
 800c4d6:	edd2 7a00 	vldr	s15, [r2]
 800c4da:	edd2 6a01 	vldr	s13, [r2, #4]
 800c4de:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c4e2:	3901      	subs	r1, #1
 800c4e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c4e8:	ed82 7a00 	vstr	s14, [r2]
 800c4ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4f0:	edc2 7a01 	vstr	s15, [r2, #4]
 800c4f4:	e78e      	b.n	800c414 <__kernel_rem_pio2f+0x3e8>
 800c4f6:	ed33 7a01 	vldmdb	r3!, {s14}
 800c4fa:	3c01      	subs	r4, #1
 800c4fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c500:	e78f      	b.n	800c422 <__kernel_rem_pio2f+0x3f6>
 800c502:	eef1 6a66 	vneg.f32	s13, s13
 800c506:	eeb1 7a47 	vneg.f32	s14, s14
 800c50a:	edc8 6a00 	vstr	s13, [r8]
 800c50e:	ed88 7a01 	vstr	s14, [r8, #4]
 800c512:	eef1 7a67 	vneg.f32	s15, s15
 800c516:	e790      	b.n	800c43a <__kernel_rem_pio2f+0x40e>

0800c518 <__kernel_sinf>:
 800c518:	ee10 3a10 	vmov	r3, s0
 800c51c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c520:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c524:	da04      	bge.n	800c530 <__kernel_sinf+0x18>
 800c526:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c52a:	ee17 3a90 	vmov	r3, s15
 800c52e:	b35b      	cbz	r3, 800c588 <__kernel_sinf+0x70>
 800c530:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c534:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c58c <__kernel_sinf+0x74>
 800c538:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c590 <__kernel_sinf+0x78>
 800c53c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c540:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c594 <__kernel_sinf+0x7c>
 800c544:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c548:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c598 <__kernel_sinf+0x80>
 800c54c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c550:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c59c <__kernel_sinf+0x84>
 800c554:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c558:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c55c:	b930      	cbnz	r0, 800c56c <__kernel_sinf+0x54>
 800c55e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c5a0 <__kernel_sinf+0x88>
 800c562:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c566:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c56a:	4770      	bx	lr
 800c56c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c570:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c574:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c578:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c57c:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c5a4 <__kernel_sinf+0x8c>
 800c580:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c584:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	2f2ec9d3 	.word	0x2f2ec9d3
 800c590:	b2d72f34 	.word	0xb2d72f34
 800c594:	3638ef1b 	.word	0x3638ef1b
 800c598:	b9500d01 	.word	0xb9500d01
 800c59c:	3c088889 	.word	0x3c088889
 800c5a0:	be2aaaab 	.word	0xbe2aaaab
 800c5a4:	3e2aaaab 	.word	0x3e2aaaab

0800c5a8 <atanf>:
 800c5a8:	b538      	push	{r3, r4, r5, lr}
 800c5aa:	ee10 5a10 	vmov	r5, s0
 800c5ae:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800c5b2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800c5b6:	eef0 7a40 	vmov.f32	s15, s0
 800c5ba:	db10      	blt.n	800c5de <atanf+0x36>
 800c5bc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c5c0:	dd04      	ble.n	800c5cc <atanf+0x24>
 800c5c2:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c5c6:	eeb0 0a67 	vmov.f32	s0, s15
 800c5ca:	bd38      	pop	{r3, r4, r5, pc}
 800c5cc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800c704 <atanf+0x15c>
 800c5d0:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800c708 <atanf+0x160>
 800c5d4:	2d00      	cmp	r5, #0
 800c5d6:	bfd8      	it	le
 800c5d8:	eef0 7a40 	vmovle.f32	s15, s0
 800c5dc:	e7f3      	b.n	800c5c6 <atanf+0x1e>
 800c5de:	4b4b      	ldr	r3, [pc, #300]	; (800c70c <atanf+0x164>)
 800c5e0:	429c      	cmp	r4, r3
 800c5e2:	dc10      	bgt.n	800c606 <atanf+0x5e>
 800c5e4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800c5e8:	da0a      	bge.n	800c600 <atanf+0x58>
 800c5ea:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c710 <atanf+0x168>
 800c5ee:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c5f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5f6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5fe:	dce2      	bgt.n	800c5c6 <atanf+0x1e>
 800c600:	f04f 33ff 	mov.w	r3, #4294967295
 800c604:	e013      	b.n	800c62e <atanf+0x86>
 800c606:	f000 f8a3 	bl	800c750 <fabsf>
 800c60a:	4b42      	ldr	r3, [pc, #264]	; (800c714 <atanf+0x16c>)
 800c60c:	429c      	cmp	r4, r3
 800c60e:	dc4f      	bgt.n	800c6b0 <atanf+0x108>
 800c610:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c614:	429c      	cmp	r4, r3
 800c616:	dc41      	bgt.n	800c69c <atanf+0xf4>
 800c618:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c61c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c620:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c624:	2300      	movs	r3, #0
 800c626:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c62a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c62e:	1c5a      	adds	r2, r3, #1
 800c630:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c634:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800c718 <atanf+0x170>
 800c638:	eddf 5a38 	vldr	s11, [pc, #224]	; 800c71c <atanf+0x174>
 800c63c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800c720 <atanf+0x178>
 800c640:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c644:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c648:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800c724 <atanf+0x17c>
 800c64c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c650:	eddf 5a35 	vldr	s11, [pc, #212]	; 800c728 <atanf+0x180>
 800c654:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c658:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800c72c <atanf+0x184>
 800c65c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c660:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c730 <atanf+0x188>
 800c664:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c668:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800c734 <atanf+0x18c>
 800c66c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c670:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800c738 <atanf+0x190>
 800c674:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c678:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800c73c <atanf+0x194>
 800c67c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c680:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800c740 <atanf+0x198>
 800c684:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c688:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c68c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c690:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c694:	d121      	bne.n	800c6da <atanf+0x132>
 800c696:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c69a:	e794      	b.n	800c5c6 <atanf+0x1e>
 800c69c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c6a0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c6a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c6ae:	e7be      	b.n	800c62e <atanf+0x86>
 800c6b0:	4b24      	ldr	r3, [pc, #144]	; (800c744 <atanf+0x19c>)
 800c6b2:	429c      	cmp	r4, r3
 800c6b4:	dc0b      	bgt.n	800c6ce <atanf+0x126>
 800c6b6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c6ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6be:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c6c2:	2302      	movs	r3, #2
 800c6c4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c6c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6cc:	e7af      	b.n	800c62e <atanf+0x86>
 800c6ce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c6d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c6d6:	2303      	movs	r3, #3
 800c6d8:	e7a9      	b.n	800c62e <atanf+0x86>
 800c6da:	4a1b      	ldr	r2, [pc, #108]	; (800c748 <atanf+0x1a0>)
 800c6dc:	491b      	ldr	r1, [pc, #108]	; (800c74c <atanf+0x1a4>)
 800c6de:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c6e2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c6e6:	ed93 0a00 	vldr	s0, [r3]
 800c6ea:	ee37 7a40 	vsub.f32	s14, s14, s0
 800c6ee:	ed92 0a00 	vldr	s0, [r2]
 800c6f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c6f6:	2d00      	cmp	r5, #0
 800c6f8:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c6fc:	bfb8      	it	lt
 800c6fe:	eef1 7a67 	vneglt.f32	s15, s15
 800c702:	e760      	b.n	800c5c6 <atanf+0x1e>
 800c704:	3fc90fdb 	.word	0x3fc90fdb
 800c708:	bfc90fdb 	.word	0xbfc90fdb
 800c70c:	3edfffff 	.word	0x3edfffff
 800c710:	7149f2ca 	.word	0x7149f2ca
 800c714:	3f97ffff 	.word	0x3f97ffff
 800c718:	3c8569d7 	.word	0x3c8569d7
 800c71c:	3d4bda59 	.word	0x3d4bda59
 800c720:	bd6ef16b 	.word	0xbd6ef16b
 800c724:	3d886b35 	.word	0x3d886b35
 800c728:	3dba2e6e 	.word	0x3dba2e6e
 800c72c:	3e124925 	.word	0x3e124925
 800c730:	3eaaaaab 	.word	0x3eaaaaab
 800c734:	bd15a221 	.word	0xbd15a221
 800c738:	bd9d8795 	.word	0xbd9d8795
 800c73c:	bde38e38 	.word	0xbde38e38
 800c740:	be4ccccd 	.word	0xbe4ccccd
 800c744:	401bffff 	.word	0x401bffff
 800c748:	0800cf9c 	.word	0x0800cf9c
 800c74c:	0800cfac 	.word	0x0800cfac

0800c750 <fabsf>:
 800c750:	ee10 3a10 	vmov	r3, s0
 800c754:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c758:	ee00 3a10 	vmov	s0, r3
 800c75c:	4770      	bx	lr
	...

0800c760 <floorf>:
 800c760:	ee10 3a10 	vmov	r3, s0
 800c764:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c768:	3a7f      	subs	r2, #127	; 0x7f
 800c76a:	2a16      	cmp	r2, #22
 800c76c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c770:	dc2a      	bgt.n	800c7c8 <floorf+0x68>
 800c772:	2a00      	cmp	r2, #0
 800c774:	da11      	bge.n	800c79a <floorf+0x3a>
 800c776:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c7d8 <floorf+0x78>
 800c77a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c77e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c786:	dd05      	ble.n	800c794 <floorf+0x34>
 800c788:	2b00      	cmp	r3, #0
 800c78a:	da23      	bge.n	800c7d4 <floorf+0x74>
 800c78c:	4a13      	ldr	r2, [pc, #76]	; (800c7dc <floorf+0x7c>)
 800c78e:	2900      	cmp	r1, #0
 800c790:	bf18      	it	ne
 800c792:	4613      	movne	r3, r2
 800c794:	ee00 3a10 	vmov	s0, r3
 800c798:	4770      	bx	lr
 800c79a:	4911      	ldr	r1, [pc, #68]	; (800c7e0 <floorf+0x80>)
 800c79c:	4111      	asrs	r1, r2
 800c79e:	420b      	tst	r3, r1
 800c7a0:	d0fa      	beq.n	800c798 <floorf+0x38>
 800c7a2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c7d8 <floorf+0x78>
 800c7a6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c7aa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7b2:	ddef      	ble.n	800c794 <floorf+0x34>
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	bfbe      	ittt	lt
 800c7b8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c7bc:	fa40 f202 	asrlt.w	r2, r0, r2
 800c7c0:	189b      	addlt	r3, r3, r2
 800c7c2:	ea23 0301 	bic.w	r3, r3, r1
 800c7c6:	e7e5      	b.n	800c794 <floorf+0x34>
 800c7c8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c7cc:	d3e4      	bcc.n	800c798 <floorf+0x38>
 800c7ce:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c7d2:	4770      	bx	lr
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	e7dd      	b.n	800c794 <floorf+0x34>
 800c7d8:	7149f2ca 	.word	0x7149f2ca
 800c7dc:	bf800000 	.word	0xbf800000
 800c7e0:	007fffff 	.word	0x007fffff

0800c7e4 <scalbnf>:
 800c7e4:	ee10 3a10 	vmov	r3, s0
 800c7e8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c7ec:	d025      	beq.n	800c83a <scalbnf+0x56>
 800c7ee:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c7f2:	d302      	bcc.n	800c7fa <scalbnf+0x16>
 800c7f4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c7f8:	4770      	bx	lr
 800c7fa:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c7fe:	d122      	bne.n	800c846 <scalbnf+0x62>
 800c800:	4b2a      	ldr	r3, [pc, #168]	; (800c8ac <scalbnf+0xc8>)
 800c802:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c8b0 <scalbnf+0xcc>
 800c806:	4298      	cmp	r0, r3
 800c808:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c80c:	db16      	blt.n	800c83c <scalbnf+0x58>
 800c80e:	ee10 3a10 	vmov	r3, s0
 800c812:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c816:	3a19      	subs	r2, #25
 800c818:	4402      	add	r2, r0
 800c81a:	2afe      	cmp	r2, #254	; 0xfe
 800c81c:	dd15      	ble.n	800c84a <scalbnf+0x66>
 800c81e:	ee10 3a10 	vmov	r3, s0
 800c822:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c8b4 <scalbnf+0xd0>
 800c826:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c8b8 <scalbnf+0xd4>
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	eeb0 7a67 	vmov.f32	s14, s15
 800c830:	bfb8      	it	lt
 800c832:	eef0 7a66 	vmovlt.f32	s15, s13
 800c836:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c83a:	4770      	bx	lr
 800c83c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c8bc <scalbnf+0xd8>
 800c840:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c844:	4770      	bx	lr
 800c846:	0dd2      	lsrs	r2, r2, #23
 800c848:	e7e6      	b.n	800c818 <scalbnf+0x34>
 800c84a:	2a00      	cmp	r2, #0
 800c84c:	dd06      	ble.n	800c85c <scalbnf+0x78>
 800c84e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c852:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c856:	ee00 3a10 	vmov	s0, r3
 800c85a:	4770      	bx	lr
 800c85c:	f112 0f16 	cmn.w	r2, #22
 800c860:	da1a      	bge.n	800c898 <scalbnf+0xb4>
 800c862:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c866:	4298      	cmp	r0, r3
 800c868:	ee10 3a10 	vmov	r3, s0
 800c86c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c870:	dd0a      	ble.n	800c888 <scalbnf+0xa4>
 800c872:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c8b4 <scalbnf+0xd0>
 800c876:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c8b8 <scalbnf+0xd4>
 800c87a:	eef0 7a40 	vmov.f32	s15, s0
 800c87e:	2b00      	cmp	r3, #0
 800c880:	bf18      	it	ne
 800c882:	eeb0 0a47 	vmovne.f32	s0, s14
 800c886:	e7db      	b.n	800c840 <scalbnf+0x5c>
 800c888:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c8bc <scalbnf+0xd8>
 800c88c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c8c0 <scalbnf+0xdc>
 800c890:	eef0 7a40 	vmov.f32	s15, s0
 800c894:	2b00      	cmp	r3, #0
 800c896:	e7f3      	b.n	800c880 <scalbnf+0x9c>
 800c898:	3219      	adds	r2, #25
 800c89a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c89e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c8a2:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c8c4 <scalbnf+0xe0>
 800c8a6:	ee07 3a10 	vmov	s14, r3
 800c8aa:	e7c4      	b.n	800c836 <scalbnf+0x52>
 800c8ac:	ffff3cb0 	.word	0xffff3cb0
 800c8b0:	4c000000 	.word	0x4c000000
 800c8b4:	7149f2ca 	.word	0x7149f2ca
 800c8b8:	f149f2ca 	.word	0xf149f2ca
 800c8bc:	0da24260 	.word	0x0da24260
 800c8c0:	8da24260 	.word	0x8da24260
 800c8c4:	33000000 	.word	0x33000000

0800c8c8 <_init>:
 800c8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ca:	bf00      	nop
 800c8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ce:	bc08      	pop	{r3}
 800c8d0:	469e      	mov	lr, r3
 800c8d2:	4770      	bx	lr

0800c8d4 <_fini>:
 800c8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8d6:	bf00      	nop
 800c8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8da:	bc08      	pop	{r3}
 800c8dc:	469e      	mov	lr, r3
 800c8de:	4770      	bx	lr
