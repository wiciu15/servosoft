
servo401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000848  0800d0ac  0800d0ac  0001d0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8f4  0800d8f4  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8f4  0800d8f4  0001d8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8fc  0800d8fc  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8fc  0800d8fc  0001d8fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d900  0800d900  0001d900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  0800d904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005340  20000120  0800da24  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005460  0800da24  00025460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e4bb  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f40  00000000  00000000  0003e60b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  00042550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e0  00000000  00000000  00043c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a35b  00000000  00000000  00045270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b487  00000000  00000000  0005f5cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5c44  00000000  00000000  0007aa52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120696  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069c0  00000000  00000000  001206e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000120 	.word	0x20000120
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d094 	.word	0x0800d094

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000124 	.word	0x20000124
 80001dc:	0800d094 	.word	0x0800d094

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b974 	b.w	8000e58 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	468e      	mov	lr, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14d      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4694      	mov	ip, r2
 8000b9a:	d969      	bls.n	8000c70 <__udivmoddi4+0xe8>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b152      	cbz	r2, 8000bb8 <__udivmoddi4+0x30>
 8000ba2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ba6:	f1c2 0120 	rsb	r1, r2, #32
 8000baa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bb6:	4094      	lsls	r4, r2
 8000bb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bbc:	0c21      	lsrs	r1, r4, #16
 8000bbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000bc2:	fa1f f78c 	uxth.w	r7, ip
 8000bc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bce:	fb06 f107 	mul.w	r1, r6, r7
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bde:	f080 811f 	bcs.w	8000e20 <__udivmoddi4+0x298>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 811c 	bls.w	8000e20 <__udivmoddi4+0x298>
 8000be8:	3e02      	subs	r6, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a5b      	subs	r3, r3, r1
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bfc:	fb00 f707 	mul.w	r7, r0, r7
 8000c00:	42a7      	cmp	r7, r4
 8000c02:	d90a      	bls.n	8000c1a <__udivmoddi4+0x92>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0c:	f080 810a 	bcs.w	8000e24 <__udivmoddi4+0x29c>
 8000c10:	42a7      	cmp	r7, r4
 8000c12:	f240 8107 	bls.w	8000e24 <__udivmoddi4+0x29c>
 8000c16:	4464      	add	r4, ip
 8000c18:	3802      	subs	r0, #2
 8000c1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1e:	1be4      	subs	r4, r4, r7
 8000c20:	2600      	movs	r6, #0
 8000c22:	b11d      	cbz	r5, 8000c2c <__udivmoddi4+0xa4>
 8000c24:	40d4      	lsrs	r4, r2
 8000c26:	2300      	movs	r3, #0
 8000c28:	e9c5 4300 	strd	r4, r3, [r5]
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0xc2>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80ef 	beq.w	8000e1a <__udivmoddi4+0x292>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x160>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xd4>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80f9 	bhi.w	8000e4e <__udivmoddi4+0x2c6>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	469e      	mov	lr, r3
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e0      	beq.n	8000c2c <__udivmoddi4+0xa4>
 8000c6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c6e:	e7dd      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000c70:	b902      	cbnz	r2, 8000c74 <__udivmoddi4+0xec>
 8000c72:	deff      	udf	#255	; 0xff
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f040 8092 	bne.w	8000da2 <__udivmoddi4+0x21a>
 8000c7e:	eba1 010c 	sub.w	r1, r1, ip
 8000c82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	2601      	movs	r6, #1
 8000c8c:	0c20      	lsrs	r0, r4, #16
 8000c8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c92:	fb07 1113 	mls	r1, r7, r3, r1
 8000c96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9a:	fb0e f003 	mul.w	r0, lr, r3
 8000c9e:	4288      	cmp	r0, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x12c>
 8000ca2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x12a>
 8000cac:	4288      	cmp	r0, r1
 8000cae:	f200 80cb 	bhi.w	8000e48 <__udivmoddi4+0x2c0>
 8000cb2:	4643      	mov	r3, r8
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x156>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x154>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f200 80bb 	bhi.w	8000e52 <__udivmoddi4+0x2ca>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ce6:	e79c      	b.n	8000c22 <__udivmoddi4+0x9a>
 8000ce8:	f1c6 0720 	rsb	r7, r6, #32
 8000cec:	40b3      	lsls	r3, r6
 8000cee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf6:	fa20 f407 	lsr.w	r4, r0, r7
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	431c      	orrs	r4, r3
 8000d00:	40f9      	lsrs	r1, r7
 8000d02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d06:	fa00 f306 	lsl.w	r3, r0, r6
 8000d0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d0e:	0c20      	lsrs	r0, r4, #16
 8000d10:	fa1f fe8c 	uxth.w	lr, ip
 8000d14:	fb09 1118 	mls	r1, r9, r8, r1
 8000d18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d20:	4288      	cmp	r0, r1
 8000d22:	fa02 f206 	lsl.w	r2, r2, r6
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x1b8>
 8000d28:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d30:	f080 8088 	bcs.w	8000e44 <__udivmoddi4+0x2bc>
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f240 8085 	bls.w	8000e44 <__udivmoddi4+0x2bc>
 8000d3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	1a09      	subs	r1, r1, r0
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d48:	fb09 1110 	mls	r1, r9, r0, r1
 8000d4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d54:	458e      	cmp	lr, r1
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1e2>
 8000d58:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d60:	d26c      	bcs.n	8000e3c <__udivmoddi4+0x2b4>
 8000d62:	458e      	cmp	lr, r1
 8000d64:	d96a      	bls.n	8000e3c <__udivmoddi4+0x2b4>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4461      	add	r1, ip
 8000d6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d72:	eba1 010e 	sub.w	r1, r1, lr
 8000d76:	42a1      	cmp	r1, r4
 8000d78:	46c8      	mov	r8, r9
 8000d7a:	46a6      	mov	lr, r4
 8000d7c:	d356      	bcc.n	8000e2c <__udivmoddi4+0x2a4>
 8000d7e:	d053      	beq.n	8000e28 <__udivmoddi4+0x2a0>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x212>
 8000d82:	ebb3 0208 	subs.w	r2, r3, r8
 8000d86:	eb61 010e 	sbc.w	r1, r1, lr
 8000d8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d92:	40f1      	lsrs	r1, r6
 8000d94:	431f      	orrs	r7, r3
 8000d96:	e9c5 7100 	strd	r7, r1, [r5]
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	f1c2 0320 	rsb	r3, r2, #32
 8000da6:	40d8      	lsrs	r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa21 f303 	lsr.w	r3, r1, r3
 8000db0:	4091      	lsls	r1, r2
 8000db2:	4301      	orrs	r1, r0
 8000db4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db8:	fa1f fe8c 	uxth.w	lr, ip
 8000dbc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dc0:	fb07 3610 	mls	r6, r7, r0, r3
 8000dc4:	0c0b      	lsrs	r3, r1, #16
 8000dc6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dca:	fb00 f60e 	mul.w	r6, r0, lr
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x260>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dde:	d22f      	bcs.n	8000e40 <__udivmoddi4+0x2b8>
 8000de0:	429e      	cmp	r6, r3
 8000de2:	d92d      	bls.n	8000e40 <__udivmoddi4+0x2b8>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	b289      	uxth	r1, r1
 8000dec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000df0:	fb07 3316 	mls	r3, r7, r6, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb06 f30e 	mul.w	r3, r6, lr
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x28a>
 8000e00:	eb1c 0101 	adds.w	r1, ip, r1
 8000e04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e08:	d216      	bcs.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d914      	bls.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0e:	3e02      	subs	r6, #2
 8000e10:	4461      	add	r1, ip
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e18:	e738      	b.n	8000c8c <__udivmoddi4+0x104>
 8000e1a:	462e      	mov	r6, r5
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	e705      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000e20:	4606      	mov	r6, r0
 8000e22:	e6e3      	b.n	8000bec <__udivmoddi4+0x64>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6f8      	b.n	8000c1a <__udivmoddi4+0x92>
 8000e28:	454b      	cmp	r3, r9
 8000e2a:	d2a9      	bcs.n	8000d80 <__udivmoddi4+0x1f8>
 8000e2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e34:	3801      	subs	r0, #1
 8000e36:	e7a3      	b.n	8000d80 <__udivmoddi4+0x1f8>
 8000e38:	4646      	mov	r6, r8
 8000e3a:	e7ea      	b.n	8000e12 <__udivmoddi4+0x28a>
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	e794      	b.n	8000d6a <__udivmoddi4+0x1e2>
 8000e40:	4640      	mov	r0, r8
 8000e42:	e7d1      	b.n	8000de8 <__udivmoddi4+0x260>
 8000e44:	46d0      	mov	r8, sl
 8000e46:	e77b      	b.n	8000d40 <__udivmoddi4+0x1b8>
 8000e48:	3b02      	subs	r3, #2
 8000e4a:	4461      	add	r1, ip
 8000e4c:	e732      	b.n	8000cb4 <__udivmoddi4+0x12c>
 8000e4e:	4630      	mov	r0, r6
 8000e50:	e709      	b.n	8000c66 <__udivmoddi4+0xde>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e742      	b.n	8000cde <__udivmoddi4+0x156>

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <modbus_protocol_read>:
uint16_t modbus_registers_buffer[30] = {0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}; //modbus holding registers

extern UART_HandleTypeDef huart1;
extern DMA_HandleTypeDef hdma_usart1_rx;

uint16_t modbus_protocol_read(uint32_t la){
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

	if(la>=40001 && la<=40030)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d90c      	bls.n	8000e88 <modbus_protocol_read+0x2c>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f649 425e 	movw	r2, #40030	; 0x9c5e
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d807      	bhi.n	8000e88 <modbus_protocol_read+0x2c>
	{return modbus_registers_buffer[la-40001];}else{
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f5a3 431c 	sub.w	r3, r3, #39936	; 0x9c00
 8000e7e:	3b41      	subs	r3, #65	; 0x41
 8000e80:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <modbus_protocol_read+0x3c>)
 8000e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e86:	e001      	b.n	8000e8c <modbus_protocol_read+0x30>
		return 0xFFFF;
 8000e88:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	20000000 	.word	0x20000000

08000e9c <modbus_protocol_write>:

uint16_t modbus_protocol_write(uint32_t la, uint16_t value)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
	uint8_t local_address=la-40001;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	3b41      	subs	r3, #65	; 0x41
 8000eae:	73fb      	strb	r3, [r7, #15]
	switch (local_address){
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	3b02      	subs	r3, #2
 8000eb4:	2b06      	cmp	r3, #6
 8000eb6:	f200 80d6 	bhi.w	8001066 <modbus_protocol_write+0x1ca>
 8000eba:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <modbus_protocol_write+0x24>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000edd 	.word	0x08000edd
 8000ec4:	08000ef3 	.word	0x08000ef3
 8000ec8:	08001067 	.word	0x08001067
 8000ecc:	08000f29 	.word	0x08000f29
 8000ed0:	08000f47 	.word	0x08000f47
 8000ed4:	08000fb5 	.word	0x08000fb5
 8000ed8:	0800104f 	.word	0x0800104f
	case 2://error register
		if(value==0){inverter_error = no_error;modbus_registers_buffer[2]=value;}break; //acknowledge error
 8000edc:	887b      	ldrh	r3, [r7, #2]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 80c3 	bne.w	800106a <modbus_protocol_write+0x1ce>
 8000ee4:	4b67      	ldr	r3, [pc, #412]	; (8001084 <modbus_protocol_write+0x1e8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
 8000eea:	4a67      	ldr	r2, [pc, #412]	; (8001088 <modbus_protocol_write+0x1ec>)
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	8093      	strh	r3, [r2, #4]
 8000ef0:	e0bb      	b.n	800106a <modbus_protocol_write+0x1ce>
	case 3: //control register
		switch(value){
 8000ef2:	887b      	ldrh	r3, [r7, #2]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d002      	beq.n	8000efe <modbus_protocol_write+0x62>
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d006      	beq.n	8000f0a <modbus_protocol_write+0x6e>
 8000efc:	e010      	b.n	8000f20 <modbus_protocol_write+0x84>
		case 0:
			modbus_registers_buffer[3] = value;inverter_disable();break;
 8000efe:	4a62      	ldr	r2, [pc, #392]	; (8001088 <modbus_protocol_write+0x1ec>)
 8000f00:	887b      	ldrh	r3, [r7, #2]
 8000f02:	80d3      	strh	r3, [r2, #6]
 8000f04:	f000 fa1a 	bl	800133c <inverter_disable>
 8000f08:	e00d      	b.n	8000f26 <modbus_protocol_write+0x8a>
		case 1:
			modbus_registers_buffer[3] = value;inv_control_mode = modbus_registers_buffer[5];inverter_enable();break;
 8000f0a:	4a5f      	ldr	r2, [pc, #380]	; (8001088 <modbus_protocol_write+0x1ec>)
 8000f0c:	887b      	ldrh	r3, [r7, #2]
 8000f0e:	80d3      	strh	r3, [r2, #6]
 8000f10:	4b5d      	ldr	r3, [pc, #372]	; (8001088 <modbus_protocol_write+0x1ec>)
 8000f12:	895b      	ldrh	r3, [r3, #10]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b5d      	ldr	r3, [pc, #372]	; (800108c <modbus_protocol_write+0x1f0>)
 8000f18:	701a      	strb	r2, [r3, #0]
 8000f1a:	f000 f9c9 	bl	80012b0 <inverter_enable>
 8000f1e:	e002      	b.n	8000f26 <modbus_protocol_write+0x8a>
		default:
			inverter_disable();break;
 8000f20:	f000 fa0c 	bl	800133c <inverter_disable>
 8000f24:	bf00      	nop
		}
		break;
 8000f26:	e0a7      	b.n	8001078 <modbus_protocol_write+0x1dc>
		case 5: //operation mode register
			if(value<=2){inv_control_mode=value;
 8000f28:	887b      	ldrh	r3, [r7, #2]
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	f200 809f 	bhi.w	800106e <modbus_protocol_write+0x1d2>
 8000f30:	887b      	ldrh	r3, [r7, #2]
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	4b55      	ldr	r3, [pc, #340]	; (800108c <modbus_protocol_write+0x1f0>)
 8000f36:	701a      	strb	r2, [r3, #0]
			modbus_registers_buffer[5]=inv_control_mode;}
 8000f38:	4b54      	ldr	r3, [pc, #336]	; (800108c <modbus_protocol_write+0x1f0>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	4b51      	ldr	r3, [pc, #324]	; (8001088 <modbus_protocol_write+0x1ec>)
 8000f42:	815a      	strh	r2, [r3, #10]
			break;
 8000f44:	e093      	b.n	800106e <modbus_protocol_write+0x1d2>
		case 6: //speed setpoint in rpm
		{int16_t received_speed=value;
 8000f46:	887b      	ldrh	r3, [r7, #2]
 8000f48:	817b      	strh	r3, [r7, #10]
		if(inv_control_mode==manual){
 8000f4a:	4b50      	ldr	r3, [pc, #320]	; (800108c <modbus_protocol_write+0x1f0>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d119      	bne.n	8000f88 <modbus_protocol_write+0xec>
			if((received_speed)<=1000 && (received_speed)>=(-1000) ){speed_setpoint_deg_s = (float)received_speed*6.0f;}
 8000f54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f5c:	dc11      	bgt.n	8000f82 <modbus_protocol_write+0xe6>
 8000f5e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f62:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000f66:	db0c      	blt.n	8000f82 <modbus_protocol_write+0xe6>
 8000f68:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f6c:	ee07 3a90 	vmov	s15, r3
 8000f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f74:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000f78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f7c:	4b44      	ldr	r3, [pc, #272]	; (8001090 <modbus_protocol_write+0x1f4>)
 8000f7e:	edc3 7a00 	vstr	s15, [r3]
			modbus_registers_buffer[6]=(uint16_t)received_speed;
 8000f82:	897a      	ldrh	r2, [r7, #10]
 8000f84:	4b40      	ldr	r3, [pc, #256]	; (8001088 <modbus_protocol_write+0x1ec>)
 8000f86:	819a      	strh	r2, [r3, #12]
		}
		if(inv_control_mode==foc){
 8000f88:	4b40      	ldr	r3, [pc, #256]	; (800108c <modbus_protocol_write+0x1f0>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d16f      	bne.n	8001072 <modbus_protocol_write+0x1d6>
			if((received_speed)<=1000 && (received_speed)>=(-1000) ){speed_setpoint_rpm = received_speed;}
 8000f92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f9a:	dc07      	bgt.n	8000fac <modbus_protocol_write+0x110>
 8000f9c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000fa0:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000fa4:	db02      	blt.n	8000fac <modbus_protocol_write+0x110>
 8000fa6:	4a3b      	ldr	r2, [pc, #236]	; (8001094 <modbus_protocol_write+0x1f8>)
 8000fa8:	897b      	ldrh	r3, [r7, #10]
 8000faa:	8013      	strh	r3, [r2, #0]
			modbus_registers_buffer[6]=(uint16_t)received_speed;
 8000fac:	897a      	ldrh	r2, [r7, #10]
 8000fae:	4b36      	ldr	r3, [pc, #216]	; (8001088 <modbus_protocol_write+0x1ec>)
 8000fb0:	819a      	strh	r2, [r3, #12]
		}
		break;}
 8000fb2:	e05e      	b.n	8001072 <modbus_protocol_write+0x1d6>
		case 7: //set output voltage in manual/torque in foc
		{if(inv_control_mode==manual){
 8000fb4:	4b35      	ldr	r3, [pc, #212]	; (800108c <modbus_protocol_write+0x1f0>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d122      	bne.n	8001004 <modbus_protocol_write+0x168>
			uint8_t received_duty_cycle_percent=value;
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	73bb      	strb	r3, [r7, #14]
			if(value<=100 && value>=0){duty_cycle = ((float)received_duty_cycle_percent/100.0f)*(float)duty_cycle_limit;}
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	2b64      	cmp	r3, #100	; 0x64
 8000fc6:	d813      	bhi.n	8000ff0 <modbus_protocol_write+0x154>
 8000fc8:	7bbb      	ldrb	r3, [r7, #14]
 8000fca:	ee07 3a90 	vmov	s15, r3
 8000fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fd2:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001098 <modbus_protocol_write+0x1fc>
 8000fd6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fda:	4b30      	ldr	r3, [pc, #192]	; (800109c <modbus_protocol_write+0x200>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fea:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <modbus_protocol_write+0x204>)
 8000fec:	edc3 7a00 	vstr	s15, [r3]
			modbus_registers_buffer[7]=duty_cycle;
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <modbus_protocol_write+0x204>)
 8000ff2:	edd3 7a00 	vldr	s15, [r3]
 8000ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ffa:	ee17 3a90 	vmov	r3, s15
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	4b21      	ldr	r3, [pc, #132]	; (8001088 <modbus_protocol_write+0x1ec>)
 8001002:	81da      	strh	r2, [r3, #14]
		}
		if(inv_control_mode==foc){
 8001004:	4b21      	ldr	r3, [pc, #132]	; (800108c <modbus_protocol_write+0x1f0>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d133      	bne.n	8001076 <modbus_protocol_write+0x1da>
			int8_t received_torque_setpoint = (int16_t)value;
 800100e:	887b      	ldrh	r3, [r7, #2]
 8001010:	737b      	strb	r3, [r7, #13]
			if(received_torque_setpoint>=-100 && received_torque_setpoint<=100){
 8001012:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001016:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800101a:	db2c      	blt.n	8001076 <modbus_protocol_write+0x1da>
 800101c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001020:	2b64      	cmp	r3, #100	; 0x64
 8001022:	dc28      	bgt.n	8001076 <modbus_protocol_write+0x1da>
				torque_setpoint=received_torque_setpoint;
 8001024:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <modbus_protocol_write+0x208>)
 8001032:	edc3 7a00 	vstr	s15, [r3]
				modbus_registers_buffer[7]=(int16_t)torque_setpoint;
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <modbus_protocol_write+0x208>)
 8001038:	edd3 7a00 	vldr	s15, [r3]
 800103c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001040:	ee17 3a90 	vmov	r3, s15
 8001044:	b21b      	sxth	r3, r3
 8001046:	b29a      	uxth	r2, r3
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <modbus_protocol_write+0x1ec>)
 800104a:	81da      	strh	r2, [r3, #14]
			}
		}

		break;
 800104c:	e013      	b.n	8001076 <modbus_protocol_write+0x1da>
	case 8:
		if(value<=2){
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d808      	bhi.n	8001066 <modbus_protocol_write+0x1ca>
			motor_feedback_type=value;
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <modbus_protocol_write+0x20c>)
 800105a:	701a      	strb	r2, [r3, #0]
		modbus_registers_buffer[8]=motor_feedback_type;}
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <modbus_protocol_write+0x20c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b29a      	uxth	r2, r3
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <modbus_protocol_write+0x1ec>)
 8001064:	821a      	strh	r2, [r3, #16]
		}
	default:
		//if not handled inside switch, then read-only parameter
		break;
 8001066:	bf00      	nop
 8001068:	e006      	b.n	8001078 <modbus_protocol_write+0x1dc>
		if(value==0){inverter_error = no_error;modbus_registers_buffer[2]=value;}break; //acknowledge error
 800106a:	bf00      	nop
 800106c:	e004      	b.n	8001078 <modbus_protocol_write+0x1dc>
			break;
 800106e:	bf00      	nop
 8001070:	e002      	b.n	8001078 <modbus_protocol_write+0x1dc>
		break;}
 8001072:	bf00      	nop
 8001074:	e000      	b.n	8001078 <modbus_protocol_write+0x1dc>
		break;
 8001076:	bf00      	nop
	}
	return value;
 8001078:	887b      	ldrh	r3, [r7, #2]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200004f4 	.word	0x200004f4
 8001088:	20000000 	.word	0x20000000
 800108c:	20000904 	.word	0x20000904
 8001090:	20000908 	.word	0x20000908
 8001094:	2000090c 	.word	0x2000090c
 8001098:	42c80000 	.word	0x42c80000
 800109c:	0800d260 	.word	0x0800d260
 80010a0:	20000914 	.word	0x20000914
 80010a4:	20000928 	.word	0x20000928
 80010a8:	200000aa 	.word	0x200000aa

080010ac <mbus_send>:

int mbus_send(const mbus_t context,const uint8_t* data, const uint16_t size){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	80bb      	strh	r3, [r7, #4]
	UNUSED(context);
	HAL_GPIO_WritePin(MODBUS_DE_GPIO_Port,MODBUS_DE_Pin, 1);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c2:	480a      	ldr	r0, [pc, #40]	; (80010ec <mbus_send+0x40>)
 80010c4:	f004 febe 	bl	8005e44 <HAL_GPIO_WritePin>
	if(HAL_UART_Transmit_DMA( &huart1, (uint8_t*) data,size)==HAL_OK){
 80010c8:	88bb      	ldrh	r3, [r7, #4]
 80010ca:	461a      	mov	r2, r3
 80010cc:	6839      	ldr	r1, [r7, #0]
 80010ce:	4808      	ldr	r0, [pc, #32]	; (80010f0 <mbus_send+0x44>)
 80010d0:	f006 fe1e 	bl	8007d10 <HAL_UART_Transmit_DMA>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <mbus_send+0x32>
		return MBUS_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e001      	b.n	80010e2 <mbus_send+0x36>
	}else{return MBUS_ERROR;}
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40020400 	.word	0x40020400
 80010f0:	200006c0 	.word	0x200006c0

080010f4 <Modbus_init>:

void Modbus_init(){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
	/* Device slave address */
	mb_config.devaddr = 0x01;
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <Modbus_init+0x68>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]

	/* Just ptr on any external object, you can get it by context */
	mb_config.device = (void*) 0;
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <Modbus_init+0x68>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]

	uint8_t * pmodbusSendBuffer;
	pmodbusSendBuffer=&modbusSendBufer;
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <Modbus_init+0x6c>)
 8001108:	60fb      	str	r3, [r7, #12]
	mb_config.sendbuf = pmodbusSendBuffer;
 800110a:	4a14      	ldr	r2, [pc, #80]	; (800115c <Modbus_init+0x68>)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6193      	str	r3, [r2, #24]
	mb_config.sendbuf_sz = sizeof(modbusSendBufer);
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <Modbus_init+0x68>)
 8001112:	2264      	movs	r2, #100	; 0x64
 8001114:	839a      	strh	r2, [r3, #28]

	uint8_t * pmodbusRecvBuffer;
	pmodbusRecvBuffer=&modbusReceiveBufer;
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <Modbus_init+0x70>)
 8001118:	60bb      	str	r3, [r7, #8]
	mb_config.recvbuf = pmodbusRecvBuffer;
 800111a:	4a10      	ldr	r2, [pc, #64]	; (800115c <Modbus_init+0x68>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	6213      	str	r3, [r2, #32]
	mb_config.recvbuf_sz = sizeof(modbusReceiveBufer);
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <Modbus_init+0x68>)
 8001122:	2264      	movs	r2, #100	; 0x64
 8001124:	849a      	strh	r2, [r3, #36]	; 0x24

	/* This that function for sending some data (use sendbuf for buf) */
	mb_config.send = &mbus_send;
 8001126:	4b0d      	ldr	r3, [pc, #52]	; (800115c <Modbus_init+0x68>)
 8001128:	4a0f      	ldr	r2, [pc, #60]	; (8001168 <Modbus_init+0x74>)
 800112a:	60da      	str	r2, [r3, #12]

	Modbus_Conf_t * pconf;
	pconf=&mb_config;
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <Modbus_init+0x68>)
 800112e:	607b      	str	r3, [r7, #4]
	//User Read callback function ( read by logical address)
	pconf->read = modbus_protocol_read;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a0e      	ldr	r2, [pc, #56]	; (800116c <Modbus_init+0x78>)
 8001134:	611a      	str	r2, [r3, #16]

	//Write callback function
	pconf->write = modbus_protocol_write;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <Modbus_init+0x7c>)
 800113a:	615a      	str	r2, [r3, #20]

	//Open modbus contex
	modbus = mbus_open(pconf);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f002 fcb1 	bl	8003aa4 <mbus_open>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <Modbus_init+0x80>)
 8001148:	701a      	strb	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, UART_RX_buf, sizeof(UART_RX_buf));
 800114a:	22c8      	movs	r2, #200	; 0xc8
 800114c:	490a      	ldr	r1, [pc, #40]	; (8001178 <Modbus_init+0x84>)
 800114e:	480b      	ldr	r0, [pc, #44]	; (800117c <Modbus_init+0x88>)
 8001150:	f006 fe8c 	bl	8007e6c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000140 	.word	0x20000140
 8001160:	2000042c 	.word	0x2000042c
 8001164:	20000490 	.word	0x20000490
 8001168:	080010ad 	.word	0x080010ad
 800116c:	08000e5d 	.word	0x08000e5d
 8001170:	08000e9d 	.word	0x08000e9d
 8001174:	2000013c 	.word	0x2000013c
 8001178:	20000168 	.word	0x20000168
 800117c:	200006c0 	.word	0x200006c0

08001180 <modbus_process_new_data_to_fifo>:

void modbus_process_new_data_to_fifo(UART_HandleTypeDef *huart, uint16_t Size){
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a29      	ldr	r2, [pc, #164]	; (8001238 <modbus_process_new_data_to_fifo+0xb8>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d14c      	bne.n	8001230 <modbus_process_new_data_to_fifo+0xb0>
	{
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) UART_RX_buf, sizeof(UART_RX_buf));
 8001196:	22c8      	movs	r2, #200	; 0xc8
 8001198:	4928      	ldr	r1, [pc, #160]	; (800123c <modbus_process_new_data_to_fifo+0xbc>)
 800119a:	4829      	ldr	r0, [pc, #164]	; (8001240 <modbus_process_new_data_to_fifo+0xc0>)
 800119c:	f006 fe66 	bl	8007e6c <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80011a0:	4b28      	ldr	r3, [pc, #160]	; (8001244 <modbus_process_new_data_to_fifo+0xc4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	4b27      	ldr	r3, [pc, #156]	; (8001244 <modbus_process_new_data_to_fifo+0xc4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0208 	bic.w	r2, r2, #8
 80011ae:	601a      	str	r2, [r3, #0]

		fifo_oldpos = fifo_newpos;  // Update the last position before copying new data
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <modbus_process_new_data_to_fifo+0xc8>)
 80011b2:	881a      	ldrh	r2, [r3, #0]
 80011b4:	4b25      	ldr	r3, [pc, #148]	; (800124c <modbus_process_new_data_to_fifo+0xcc>)
 80011b6:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (fifo_oldpos+Size > sizeof(UART_RX_FIFO)-1)  // If the current position + new data size is greater than the main buffer
 80011b8:	4b24      	ldr	r3, [pc, #144]	; (800124c <modbus_process_new_data_to_fifo+0xcc>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	4413      	add	r3, r2
 80011c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011c6:	d322      	bcc.n	800120e <modbus_process_new_data_to_fifo+0x8e>
		{
			uint16_t datatocopy = sizeof(UART_RX_FIFO)-fifo_oldpos;  // find out how much space is left in the main buffer
 80011c8:	4b20      	ldr	r3, [pc, #128]	; (800124c <modbus_process_new_data_to_fifo+0xcc>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 80011d0:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)UART_RX_FIFO+fifo_oldpos, UART_RX_buf, datatocopy);  // copy data in that remaining space
 80011d2:	4b1e      	ldr	r3, [pc, #120]	; (800124c <modbus_process_new_data_to_fifo+0xcc>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <modbus_process_new_data_to_fifo+0xd0>)
 80011da:	4413      	add	r3, r2
 80011dc:	89fa      	ldrh	r2, [r7, #14]
 80011de:	4917      	ldr	r1, [pc, #92]	; (800123c <modbus_process_new_data_to_fifo+0xbc>)
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00a fdc7 	bl	800bd74 <memcpy>

			fifo_oldpos = 0;  // point to the start of the buffer
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <modbus_process_new_data_to_fifo+0xcc>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)UART_RX_FIFO, (uint8_t *)UART_RX_buf+datatocopy, (Size-datatocopy));  // copy the remaining data
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	4a13      	ldr	r2, [pc, #76]	; (800123c <modbus_process_new_data_to_fifo+0xbc>)
 80011f0:	1899      	adds	r1, r3, r2
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	89fb      	ldrh	r3, [r7, #14]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	4815      	ldr	r0, [pc, #84]	; (8001250 <modbus_process_new_data_to_fifo+0xd0>)
 80011fc:	f00a fdba 	bl	800bd74 <memcpy>
			fifo_newpos = (Size-datatocopy);  // update the position
 8001200:	887a      	ldrh	r2, [r7, #2]
 8001202:	89fb      	ldrh	r3, [r7, #14]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	b29a      	uxth	r2, r3
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <modbus_process_new_data_to_fifo+0xc8>)
 800120a:	801a      	strh	r2, [r3, #0]
		}



	}
}
 800120c:	e010      	b.n	8001230 <modbus_process_new_data_to_fifo+0xb0>
			memcpy ((uint8_t *)UART_RX_FIFO+fifo_oldpos, UART_RX_buf, Size);
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <modbus_process_new_data_to_fifo+0xcc>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <modbus_process_new_data_to_fifo+0xd0>)
 8001216:	4413      	add	r3, r2
 8001218:	887a      	ldrh	r2, [r7, #2]
 800121a:	4908      	ldr	r1, [pc, #32]	; (800123c <modbus_process_new_data_to_fifo+0xbc>)
 800121c:	4618      	mov	r0, r3
 800121e:	f00a fda9 	bl	800bd74 <memcpy>
			fifo_newpos = Size+fifo_oldpos;
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <modbus_process_new_data_to_fifo+0xcc>)
 8001224:	881a      	ldrh	r2, [r3, #0]
 8001226:	887b      	ldrh	r3, [r7, #2]
 8001228:	4413      	add	r3, r2
 800122a:	b29a      	uxth	r2, r3
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <modbus_process_new_data_to_fifo+0xc8>)
 800122e:	801a      	strh	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40011000 	.word	0x40011000
 800123c:	20000168 	.word	0x20000168
 8001240:	200006c0 	.word	0x200006c0
 8001244:	20000748 	.word	0x20000748
 8001248:	20000426 	.word	0x20000426
 800124c:	20000424 	.word	0x20000424
 8001250:	20000230 	.word	0x20000230

08001254 <process_modbus_command>:

void process_modbus_command(){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	while(fifo_read_pos!=fifo_newpos){
 8001258:	e019      	b.n	800128e <process_modbus_command+0x3a>
		mbus_poll(modbus, UART_RX_FIFO[fifo_read_pos] );
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <process_modbus_command+0x4c>)
 800125c:	f993 3000 	ldrsb.w	r3, [r3]
 8001260:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <process_modbus_command+0x50>)
 8001262:	8812      	ldrh	r2, [r2, #0]
 8001264:	4611      	mov	r1, r2
 8001266:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <process_modbus_command+0x54>)
 8001268:	5c52      	ldrb	r2, [r2, r1]
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f002 fe71 	bl	8003f54 <mbus_poll>
		fifo_read_pos++;
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <process_modbus_command+0x50>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	3301      	adds	r3, #1
 8001278:	b29a      	uxth	r2, r3
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <process_modbus_command+0x50>)
 800127c:	801a      	strh	r2, [r3, #0]
		if(fifo_read_pos>=sizeof(UART_RX_FIFO)){
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <process_modbus_command+0x50>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001286:	d302      	bcc.n	800128e <process_modbus_command+0x3a>
			fifo_read_pos=0;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <process_modbus_command+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	801a      	strh	r2, [r3, #0]
	while(fifo_read_pos!=fifo_newpos){
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <process_modbus_command+0x50>)
 8001290:	881a      	ldrh	r2, [r3, #0]
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <process_modbus_command+0x58>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d1df      	bne.n	800125a <process_modbus_command+0x6>
		}
	}

}
 800129a:	bf00      	nop
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	2000013c 	.word	0x2000013c
 80012a4:	20000428 	.word	0x20000428
 80012a8:	20000230 	.word	0x20000230
 80012ac:	20000426 	.word	0x20000426

080012b0 <inverter_enable>:

extern TIM_HandleTypeDef htim1;
extern UART_HandleTypeDef huart1;
volatile inverter_error_t inverter_error=no_error;

void inverter_enable(){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	if(inverter_error==0){
 80012b4:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <inverter_enable+0x70>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d12e      	bne.n	800131c <inverter_enable+0x6c>
		speed_setpoint_deg_s=0.0f;
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <inverter_enable+0x74>)
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
		duty_cycle=0.0f;
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <inverter_enable+0x78>)
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
		TIM1->CCR1=0;
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <inverter_enable+0x7c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=0;
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <inverter_enable+0x7c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=0;
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <inverter_enable+0x7c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(INV_ENABLE_GPIO_Port, INV_ENABLE_Pin, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012e6:	4812      	ldr	r0, [pc, #72]	; (8001330 <inverter_enable+0x80>)
 80012e8:	f004 fdac 	bl	8005e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INV_ENABLE_GPIO_Port, INV_ENABLE_Pin, GPIO_PIN_SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f2:	480f      	ldr	r0, [pc, #60]	; (8001330 <inverter_enable+0x80>)
 80012f4:	f004 fda6 	bl	8005e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SOFTSTART_GPIO_Port, SOFTSTART_Pin, 1);
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <inverter_enable+0x84>)
 8001300:	f004 fda0 	bl	8005e44 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001304:	2100      	movs	r1, #0
 8001306:	480c      	ldr	r0, [pc, #48]	; (8001338 <inverter_enable+0x88>)
 8001308:	f005 fb48 	bl	800699c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800130c:	2104      	movs	r1, #4
 800130e:	480a      	ldr	r0, [pc, #40]	; (8001338 <inverter_enable+0x88>)
 8001310:	f005 fb44 	bl	800699c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8001314:	2108      	movs	r1, #8
 8001316:	4808      	ldr	r0, [pc, #32]	; (8001338 <inverter_enable+0x88>)
 8001318:	f005 fb40 	bl	800699c <HAL_TIM_PWM_Start>
	}
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200004f4 	.word	0x200004f4
 8001324:	20000908 	.word	0x20000908
 8001328:	20000914 	.word	0x20000914
 800132c:	40010000 	.word	0x40010000
 8001330:	40020400 	.word	0x40020400
 8001334:	40020800 	.word	0x40020800
 8001338:	200005a0 	.word	0x200005a0

0800133c <inverter_disable>:

void inverter_disable(){
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	speed_setpoint_deg_s=0.0f;
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <inverter_disable+0x60>)
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
	duty_cycle=0.0f;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <inverter_disable+0x64>)
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
	//TIM1->CCR1=0;TIM1->CCR2=0;TIM1->CCR3=0;
	HAL_GPIO_WritePin(INV_DISABLE_GPIO_Port, INV_DISABLE_Pin, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001356:	4813      	ldr	r0, [pc, #76]	; (80013a4 <inverter_disable+0x68>)
 8001358:	f004 fd74 	bl	8005e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INV_DISABLE_GPIO_Port, INV_DISABLE_Pin, GPIO_PIN_SET);
 800135c:	2201      	movs	r2, #1
 800135e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001362:	4810      	ldr	r0, [pc, #64]	; (80013a4 <inverter_disable+0x68>)
 8001364:	f004 fd6e 	bl	8005e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SOFTSTART_GPIO_Port, SOFTSTART_Pin, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800136e:	480e      	ldr	r0, [pc, #56]	; (80013a8 <inverter_disable+0x6c>)
 8001370:	f004 fd68 	bl	8005e44 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8001374:	2100      	movs	r1, #0
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <inverter_disable+0x70>)
 8001378:	f005 fbc0 	bl	8006afc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2);
 800137c:	2104      	movs	r1, #4
 800137e:	480b      	ldr	r0, [pc, #44]	; (80013ac <inverter_disable+0x70>)
 8001380:	f005 fbbc 	bl	8006afc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_3);
 8001384:	2108      	movs	r1, #8
 8001386:	4809      	ldr	r0, [pc, #36]	; (80013ac <inverter_disable+0x70>)
 8001388:	f005 fbb8 	bl	8006afc <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 800138c:	4807      	ldr	r0, [pc, #28]	; (80013ac <inverter_disable+0x70>)
 800138e:	f005 fa7d 	bl	800688c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim1); //restart base timer to keep 16khz tim1_update ISR active for reading current and encoder data when inverter not working
 8001392:	4806      	ldr	r0, [pc, #24]	; (80013ac <inverter_disable+0x70>)
 8001394:	f005 fa18 	bl	80067c8 <HAL_TIM_Base_Start_IT>
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000908 	.word	0x20000908
 80013a0:	20000914 	.word	0x20000914
 80013a4:	40020400 	.word	0x40020400
 80013a8:	40020800 	.word	0x40020800
 80013ac:	200005a0 	.word	0x200005a0

080013b0 <inverter_error_trip>:

void inverter_error_trip(inverter_error_t error){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
	inverter_disable();
 80013ba:	f7ff ffbf 	bl	800133c <inverter_disable>
	inverter_error=error;
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <inverter_error_trip+0x24>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	7013      	strb	r3, [r2, #0]
	modbus_registers_buffer[2]=error;
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <inverter_error_trip+0x28>)
 80013ca:	809a      	strh	r2, [r3, #4]
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200004f4 	.word	0x200004f4
 80013d8:	20000000 	.word	0x20000000

080013dc <park_transform>:

void park_transform(float I_U,float I_V,float motor_angle,float * I_d,float * I_q){
 80013dc:	b580      	push	{r7, lr}
 80013de:	ed2d 8b02 	vpush	{d8}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	ed87 0a05 	vstr	s0, [r7, #20]
 80013ea:	edc7 0a04 	vstr	s1, [r7, #16]
 80013ee:	ed87 1a03 	vstr	s2, [r7, #12]
 80013f2:	60b8      	str	r0, [r7, #8]
 80013f4:	6079      	str	r1, [r7, #4]
	float Ialfa=I_U;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
	float Ibeta=(0.5773502f * I_U) + (1.1547005f * I_V);
 80013fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80013fe:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80014a4 <park_transform+0xc8>
 8001402:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001406:	edd7 7a04 	vldr	s15, [r7, #16]
 800140a:	eddf 6a27 	vldr	s13, [pc, #156]	; 80014a8 <park_transform+0xcc>
 800140e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001416:	edc7 7a08 	vstr	s15, [r7, #32]
	float motor_angle_rad = (motor_angle/180.0f)*3.141592f;
 800141a:	ed97 7a03 	vldr	s14, [r7, #12]
 800141e:	eddf 6a23 	vldr	s13, [pc, #140]	; 80014ac <park_transform+0xd0>
 8001422:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001426:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80014b0 <park_transform+0xd4>
 800142a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800142e:	edc7 7a07 	vstr	s15, [r7, #28]
	*I_d = (Ialfa * cosf(motor_angle_rad)) + (Ibeta * sinf(motor_angle_rad));
 8001432:	ed97 0a07 	vldr	s0, [r7, #28]
 8001436:	f00a fd75 	bl	800bf24 <cosf>
 800143a:	eeb0 7a40 	vmov.f32	s14, s0
 800143e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001442:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001446:	ed97 0a07 	vldr	s0, [r7, #28]
 800144a:	f00a fdaf 	bl	800bfac <sinf>
 800144e:	eeb0 7a40 	vmov.f32	s14, s0
 8001452:	edd7 7a08 	vldr	s15, [r7, #32]
 8001456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	edc3 7a00 	vstr	s15, [r3]
	*I_q = (Ialfa * sinf(motor_angle_rad)*(-1)) + (Ibeta * cosf(motor_angle_rad));
 8001464:	ed97 0a07 	vldr	s0, [r7, #28]
 8001468:	f00a fd5c 	bl	800bf24 <cosf>
 800146c:	eeb0 7a40 	vmov.f32	s14, s0
 8001470:	edd7 7a08 	vldr	s15, [r7, #32]
 8001474:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001478:	ed97 0a07 	vldr	s0, [r7, #28]
 800147c:	f00a fd96 	bl	800bfac <sinf>
 8001480:	eeb0 7a40 	vmov.f32	s14, s0
 8001484:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edc3 7a00 	vstr	s15, [r3]
}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	ecbd 8b02 	vpop	{d8}
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	3f13cd39 	.word	0x3f13cd39
 80014a8:	3f93cd3a 	.word	0x3f93cd3a
 80014ac:	43340000 	.word	0x43340000
 80014b0:	40490fd8 	.word	0x40490fd8

080014b4 <inv_park_transform>:


void inv_park_transform(float U_d,float U_q, float motor_angle, float * U_alpha, float * U_beta){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	ed2d 8b02 	vpush	{d8}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
 80014be:	ed87 0a05 	vstr	s0, [r7, #20]
 80014c2:	edc7 0a04 	vstr	s1, [r7, #16]
 80014c6:	ed87 1a03 	vstr	s2, [r7, #12]
 80014ca:	60b8      	str	r0, [r7, #8]
 80014cc:	6079      	str	r1, [r7, #4]
	float motor_angle_rad = (motor_angle/180.0f)*3.141592f;
 80014ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80014d2:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001558 <inv_park_transform+0xa4>
 80014d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014da:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800155c <inv_park_transform+0xa8>
 80014de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e2:	edc7 7a07 	vstr	s15, [r7, #28]
	*U_alpha= (U_d * cosf(motor_angle_rad)) - (U_q * sinf(motor_angle_rad));
 80014e6:	ed97 0a07 	vldr	s0, [r7, #28]
 80014ea:	f00a fd1b 	bl	800bf24 <cosf>
 80014ee:	eeb0 7a40 	vmov.f32	s14, s0
 80014f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80014f6:	ee27 8a27 	vmul.f32	s16, s14, s15
 80014fa:	ed97 0a07 	vldr	s0, [r7, #28]
 80014fe:	f00a fd55 	bl	800bfac <sinf>
 8001502:	eeb0 7a40 	vmov.f32	s14, s0
 8001506:	edd7 7a04 	vldr	s15, [r7, #16]
 800150a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800150e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	edc3 7a00 	vstr	s15, [r3]
	*U_beta = (U_d * sinf(motor_angle_rad)) + (U_q * cosf(motor_angle_rad));
 8001518:	ed97 0a07 	vldr	s0, [r7, #28]
 800151c:	f00a fd46 	bl	800bfac <sinf>
 8001520:	eeb0 7a40 	vmov.f32	s14, s0
 8001524:	edd7 7a05 	vldr	s15, [r7, #20]
 8001528:	ee27 8a27 	vmul.f32	s16, s14, s15
 800152c:	ed97 0a07 	vldr	s0, [r7, #28]
 8001530:	f00a fcf8 	bl	800bf24 <cosf>
 8001534:	eeb0 7a40 	vmov.f32	s14, s0
 8001538:	edd7 7a04 	vldr	s15, [r7, #16]
 800153c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001540:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	edc3 7a00 	vstr	s15, [r3]
}
 800154a:	bf00      	nop
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	ecbd 8b02 	vpop	{d8}
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	43340000 	.word	0x43340000
 800155c:	40490fd8 	.word	0x40490fd8

08001560 <LowPassFilter>:

//Tf - filter time constant in seconds
float LowPassFilter(float Tf,float actual_measurement, float * last_filtered_value){
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	ed87 0a03 	vstr	s0, [r7, #12]
 800156a:	edc7 0a02 	vstr	s1, [r7, #8]
 800156e:	6078      	str	r0, [r7, #4]
	float alpha = Tf/(Tf + 0.0002f); //0.0002 = 1/5kHz - pwm interrupt frequency and sampling
 8001570:	edd7 7a03 	vldr	s15, [r7, #12]
 8001574:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80015cc <LowPassFilter+0x6c>
 8001578:	ee37 7a87 	vadd.f32	s14, s15, s14
 800157c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001584:	edc7 7a05 	vstr	s15, [r7, #20]
	float filtered_value = (alpha*(*last_filtered_value)) + ((1.0f - alpha)*actual_measurement);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	ed93 7a00 	vldr	s14, [r3]
 800158e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001592:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800159a:	edd7 7a05 	vldr	s15, [r7, #20]
 800159e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80015a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ae:	edc7 7a04 	vstr	s15, [r7, #16]
	*last_filtered_value = filtered_value;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	601a      	str	r2, [r3, #0]
	return filtered_value;
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	ee07 3a90 	vmov	s15, r3
}
 80015be:	eeb0 0a67 	vmov.f32	s0, s15
 80015c2:	371c      	adds	r7, #28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	3951b717 	.word	0x3951b717

080015d0 <get_sine_value>:

float get_sine_value(uint16_t angle){
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
	float sine=0.0f;
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
	if(angle>=360){angle-=360;}
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80015e6:	d303      	bcc.n	80015f0 <get_sine_value+0x20>
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80015ee:	80fb      	strh	r3, [r7, #6]
	uint8_t sector=angle/90;
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	085b      	lsrs	r3, r3, #1
 80015f4:	4a24      	ldr	r2, [pc, #144]	; (8001688 <get_sine_value+0xb8>)
 80015f6:	fba2 2303 	umull	r2, r3, r2, r3
 80015fa:	095b      	lsrs	r3, r3, #5
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	72fb      	strb	r3, [r7, #11]
	switch (sector){
 8001600:	7afb      	ldrb	r3, [r7, #11]
 8001602:	2b03      	cmp	r3, #3
 8001604:	d833      	bhi.n	800166e <get_sine_value+0x9e>
 8001606:	a201      	add	r2, pc, #4	; (adr r2, 800160c <get_sine_value+0x3c>)
 8001608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160c:	0800161d 	.word	0x0800161d
 8001610:	0800162b 	.word	0x0800162b
 8001614:	0800163d 	.word	0x0800163d
 8001618:	08001655 	.word	0x08001655
	case 0:
		sine=sine_table[angle];
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	4a1b      	ldr	r2, [pc, #108]	; (800168c <get_sine_value+0xbc>)
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	60fb      	str	r3, [r7, #12]
		break;
 8001628:	e024      	b.n	8001674 <get_sine_value+0xa4>
	case 1:
		sine=sine_table[90-(angle-90)];
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8001630:	4a16      	ldr	r2, [pc, #88]	; (800168c <get_sine_value+0xbc>)
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60fb      	str	r3, [r7, #12]
		break;
 800163a:	e01b      	b.n	8001674 <get_sine_value+0xa4>
	case 2:
		sine=sine_table[angle-180]*(-1.0f);
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	3bb4      	subs	r3, #180	; 0xb4
 8001640:	4a12      	ldr	r2, [pc, #72]	; (800168c <get_sine_value+0xbc>)
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	eef1 7a67 	vneg.f32	s15, s15
 800164e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001652:	e00f      	b.n	8001674 <get_sine_value+0xa4>
	case 3:
		sine=sine_table[90-(angle-270)]*(-1.0f);
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 800165a:	4a0c      	ldr	r2, [pc, #48]	; (800168c <get_sine_value+0xbc>)
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	eef1 7a67 	vneg.f32	s15, s15
 8001668:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800166c:	e002      	b.n	8001674 <get_sine_value+0xa4>
	default:
		sine=0;
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
	}
	return sine;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	ee07 3a90 	vmov	s15, r3
}
 800167a:	eeb0 0a67 	vmov.f32	s0, s15
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	b60b60b7 	.word	0xb60b60b7
 800168c:	0800d0d0 	.word	0x0800d0d0

08001690 <output_sine_pwm>:

//this doesnt work
void output_sine_pwm(uint16_t angle,uint16_t max_duty_cycle){
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	460a      	mov	r2, r1
 800169a:	80fb      	strh	r3, [r7, #6]
 800169c:	4613      	mov	r3, r2
 800169e:	80bb      	strh	r3, [r7, #4]
	float sin_u = 0;
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
	float sin_v = 0;
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
	float sin_w = 0;
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
	if(angle>=360){ //fault
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80016b8:	d309      	bcc.n	80016ce <output_sine_pwm+0x3e>
		TIM1->CCR1=0;
 80016ba:	4b34      	ldr	r3, [pc, #208]	; (800178c <output_sine_pwm+0xfc>)
 80016bc:	2200      	movs	r2, #0
 80016be:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=0;
 80016c0:	4b32      	ldr	r3, [pc, #200]	; (800178c <output_sine_pwm+0xfc>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=0;
 80016c6:	4b31      	ldr	r3, [pc, #196]	; (800178c <output_sine_pwm+0xfc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	63da      	str	r2, [r3, #60]	; 0x3c
		sin_w=get_sine_value(angle+120);
		TIM1->CCR1=(DUTY_CYCLE_LIMIT/2.0f)+sin_u*(max_duty_cycle/2.0f);
		TIM1->CCR2=(DUTY_CYCLE_LIMIT/2.0f)+sin_v*(max_duty_cycle/2.0f);
		TIM1->CCR3=(DUTY_CYCLE_LIMIT/2.0f)+sin_w*(max_duty_cycle/2.0f);
	}
}
 80016cc:	e05a      	b.n	8001784 <output_sine_pwm+0xf4>
		sin_u=get_sine_value(angle);
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff7d 	bl	80015d0 <get_sine_value>
 80016d6:	ed87 0a05 	vstr	s0, [r7, #20]
		sin_v=get_sine_value(angle+240);
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	33f0      	adds	r3, #240	; 0xf0
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff75 	bl	80015d0 <get_sine_value>
 80016e6:	ed87 0a04 	vstr	s0, [r7, #16]
		sin_w=get_sine_value(angle+120);
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	3378      	adds	r3, #120	; 0x78
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff6d 	bl	80015d0 <get_sine_value>
 80016f6:	ed87 0a03 	vstr	s0, [r7, #12]
		TIM1->CCR1=(DUTY_CYCLE_LIMIT/2.0f)+sin_u*(max_duty_cycle/2.0f);
 80016fa:	88bb      	ldrh	r3, [r7, #4]
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001704:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001708:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800170c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001714:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001790 <output_sine_pwm+0x100>
 8001718:	ee77 7a87 	vadd.f32	s15, s15, s14
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <output_sine_pwm+0xfc>)
 800171e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001722:	ee17 2a90 	vmov	r2, s15
 8001726:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2=(DUTY_CYCLE_LIMIT/2.0f)+sin_v*(max_duty_cycle/2.0f);
 8001728:	88bb      	ldrh	r3, [r7, #4]
 800172a:	ee07 3a90 	vmov	s15, r3
 800172e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001732:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001736:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800173a:	edd7 7a04 	vldr	s15, [r7, #16]
 800173e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001742:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001790 <output_sine_pwm+0x100>
 8001746:	ee77 7a87 	vadd.f32	s15, s15, s14
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <output_sine_pwm+0xfc>)
 800174c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001750:	ee17 2a90 	vmov	r2, s15
 8001754:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3=(DUTY_CYCLE_LIMIT/2.0f)+sin_w*(max_duty_cycle/2.0f);
 8001756:	88bb      	ldrh	r3, [r7, #4]
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001760:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001764:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001768:	edd7 7a03 	vldr	s15, [r7, #12]
 800176c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001770:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001790 <output_sine_pwm+0x100>
 8001774:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <output_sine_pwm+0xfc>)
 800177a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800177e:	ee17 2a90 	vmov	r2, s15
 8001782:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001784:	bf00      	nop
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40010000 	.word	0x40010000
 8001790:	451c3800 	.word	0x451c3800

08001794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001798:	f002 fee4 	bl	8004564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800179c:	f000 f826 	bl	80017ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a0:	f000 fb64 	bl	8001e6c <MX_GPIO_Init>

  MX_TIM1_Init();
 80017a4:	f000 f908 	bl	80019b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80017a8:	f000 f9c0 	bl	8001b2c <MX_TIM2_Init>
  MX_DMA_Init();MX_ADC1_Init();
 80017ac:	f000 fb10 	bl	8001dd0 <MX_DMA_Init>
 80017b0:	f000 f886 	bl	80018c0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80017b4:	f000 fae2 	bl	8001d7c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80017b8:	f000 faa8 	bl	8001d0c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80017bc:	f000 fa0a 	bl	8001bd4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80017c0:	f000 fa56 	bl	8001c70 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80017c4:	f007 fd2e 	bl	8009224 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80017c8:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <main+0x4c>)
 80017ca:	2100      	movs	r1, #0
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <main+0x50>)
 80017ce:	f007 fd73 	bl	80092b8 <osThreadNew>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <main+0x54>)
 80017d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80017d8:	f007 fd48 	bl	800926c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <main+0x48>
 80017de:	bf00      	nop
 80017e0:	0800d23c 	.word	0x0800d23c
 80017e4:	08002059 	.word	0x08002059
 80017e8:	200008c8 	.word	0x200008c8

080017ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b094      	sub	sp, #80	; 0x50
 80017f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f2:	f107 0320 	add.w	r3, r7, #32
 80017f6:	2230      	movs	r2, #48	; 0x30
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f00a fac8 	bl	800bd90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <SystemClock_Config+0xcc>)
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	4a27      	ldr	r2, [pc, #156]	; (80018b8 <SystemClock_Config+0xcc>)
 800181a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181e:	6413      	str	r3, [r2, #64]	; 0x40
 8001820:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <SystemClock_Config+0xcc>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800182c:	2300      	movs	r3, #0
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	4b22      	ldr	r3, [pc, #136]	; (80018bc <SystemClock_Config+0xd0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001838:	4a20      	ldr	r2, [pc, #128]	; (80018bc <SystemClock_Config+0xd0>)
 800183a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <SystemClock_Config+0xd0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800184c:	2301      	movs	r3, #1
 800184e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001856:	2302      	movs	r3, #2
 8001858:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800185a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800185e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001860:	230f      	movs	r3, #15
 8001862:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001864:	2360      	movs	r3, #96	; 0x60
 8001866:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001868:	2302      	movs	r3, #2
 800186a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800186c:	2304      	movs	r3, #4
 800186e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001870:	f107 0320 	add.w	r3, r7, #32
 8001874:	4618      	mov	r0, r3
 8001876:	f004 faff 	bl	8005e78 <HAL_RCC_OscConfig>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001880:	f000 fc10 	bl	80020a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001884:	230f      	movs	r3, #15
 8001886:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001888:	2302      	movs	r3, #2
 800188a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001894:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	2102      	movs	r1, #2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f004 fd61 	bl	8006368 <HAL_RCC_ClockConfig>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80018ac:	f000 fbfa 	bl	80020a4 <Error_Handler>
  }
}
 80018b0:	bf00      	nop
 80018b2:	3750      	adds	r7, #80	; 0x50
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40007000 	.word	0x40007000

080018c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018c6:	463b      	mov	r3, r7
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018d2:	4b36      	ldr	r3, [pc, #216]	; (80019ac <MX_ADC1_Init+0xec>)
 80018d4:	4a36      	ldr	r2, [pc, #216]	; (80019b0 <MX_ADC1_Init+0xf0>)
 80018d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018d8:	4b34      	ldr	r3, [pc, #208]	; (80019ac <MX_ADC1_Init+0xec>)
 80018da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018e0:	4b32      	ldr	r3, [pc, #200]	; (80019ac <MX_ADC1_Init+0xec>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80018e6:	4b31      	ldr	r3, [pc, #196]	; (80019ac <MX_ADC1_Init+0xec>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018ec:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <MX_ADC1_Init+0xec>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018f2:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <MX_ADC1_Init+0xec>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018fa:	4b2c      	ldr	r3, [pc, #176]	; (80019ac <MX_ADC1_Init+0xec>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001900:	4b2a      	ldr	r3, [pc, #168]	; (80019ac <MX_ADC1_Init+0xec>)
 8001902:	4a2c      	ldr	r2, [pc, #176]	; (80019b4 <MX_ADC1_Init+0xf4>)
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001906:	4b29      	ldr	r3, [pc, #164]	; (80019ac <MX_ADC1_Init+0xec>)
 8001908:	2200      	movs	r2, #0
 800190a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800190c:	4b27      	ldr	r3, [pc, #156]	; (80019ac <MX_ADC1_Init+0xec>)
 800190e:	2204      	movs	r2, #4
 8001910:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <MX_ADC1_Init+0xec>)
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800191a:	4b24      	ldr	r3, [pc, #144]	; (80019ac <MX_ADC1_Init+0xec>)
 800191c:	2200      	movs	r2, #0
 800191e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001920:	4822      	ldr	r0, [pc, #136]	; (80019ac <MX_ADC1_Init+0xec>)
 8001922:	f002 fe91 	bl	8004648 <HAL_ADC_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800192c:	f000 fbba 	bl	80020a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001930:	2304      	movs	r3, #4
 8001932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001934:	2301      	movs	r3, #1
 8001936:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800193c:	463b      	mov	r3, r7
 800193e:	4619      	mov	r1, r3
 8001940:	481a      	ldr	r0, [pc, #104]	; (80019ac <MX_ADC1_Init+0xec>)
 8001942:	f002 ffd3 	bl	80048ec <HAL_ADC_ConfigChannel>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800194c:	f000 fbaa 	bl	80020a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001950:	2305      	movs	r3, #5
 8001952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001954:	2302      	movs	r3, #2
 8001956:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001958:	463b      	mov	r3, r7
 800195a:	4619      	mov	r1, r3
 800195c:	4813      	ldr	r0, [pc, #76]	; (80019ac <MX_ADC1_Init+0xec>)
 800195e:	f002 ffc5 	bl	80048ec <HAL_ADC_ConfigChannel>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001968:	f000 fb9c 	bl	80020a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800196c:	2306      	movs	r3, #6
 800196e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001970:	2303      	movs	r3, #3
 8001972:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001974:	463b      	mov	r3, r7
 8001976:	4619      	mov	r1, r3
 8001978:	480c      	ldr	r0, [pc, #48]	; (80019ac <MX_ADC1_Init+0xec>)
 800197a:	f002 ffb7 	bl	80048ec <HAL_ADC_ConfigChannel>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001984:	f000 fb8e 	bl	80020a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001988:	2307      	movs	r3, #7
 800198a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800198c:	2304      	movs	r3, #4
 800198e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001990:	463b      	mov	r3, r7
 8001992:	4619      	mov	r1, r3
 8001994:	4805      	ldr	r0, [pc, #20]	; (80019ac <MX_ADC1_Init+0xec>)
 8001996:	f002 ffa9 	bl	80048ec <HAL_ADC_ConfigChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80019a0:	f000 fb80 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	200004f8 	.word	0x200004f8
 80019b0:	40012000 	.word	0x40012000
 80019b4:	0f000001 	.word	0x0f000001

080019b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b096      	sub	sp, #88	; 0x58
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	611a      	str	r2, [r3, #16]
 80019e6:	615a      	str	r2, [r3, #20]
 80019e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	2220      	movs	r2, #32
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f00a f9cd 	bl	800bd90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019f6:	4b4b      	ldr	r3, [pc, #300]	; (8001b24 <MX_TIM1_Init+0x16c>)
 80019f8:	4a4b      	ldr	r2, [pc, #300]	; (8001b28 <MX_TIM1_Init+0x170>)
 80019fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019fc:	4b49      	ldr	r3, [pc, #292]	; (8001b24 <MX_TIM1_Init+0x16c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001a02:	4b48      	ldr	r3, [pc, #288]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001a04:	2220      	movs	r2, #32
 8001a06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8001a08:	4b46      	ldr	r3, [pc, #280]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001a0a:	f241 3287 	movw	r2, #4999	; 0x1387
 8001a0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a10:	4b44      	ldr	r3, [pc, #272]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a16:	4b43      	ldr	r3, [pc, #268]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1c:	4b41      	ldr	r3, [pc, #260]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a22:	4840      	ldr	r0, [pc, #256]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001a24:	f004 fe80 	bl	8006728 <HAL_TIM_Base_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a2e:	f000 fb39 	bl	80020a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a36:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4839      	ldr	r0, [pc, #228]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001a40:	f005 fbbe 	bl	80071c0 <HAL_TIM_ConfigClockSource>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a4a:	f000 fb2b 	bl	80020a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a4e:	4835      	ldr	r0, [pc, #212]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001a50:	f004 ff4b 	bl	80068ea <HAL_TIM_PWM_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001a5a:	f000 fb23 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	482d      	ldr	r0, [pc, #180]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001a6e:	f005 ff6d 	bl	800794c <HAL_TIMEx_MasterConfigSynchronization>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a78:	f000 fb14 	bl	80020a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a7c:	2360      	movs	r3, #96	; 0x60
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001a84:	2302      	movs	r3, #2
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001a8c:	2304      	movs	r3, #4
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a94:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4820      	ldr	r0, [pc, #128]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001aa4:	f005 faca 	bl	800703c <HAL_TIM_PWM_ConfigChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001aae:	f000 faf9 	bl	80020a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	481a      	ldr	r0, [pc, #104]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001abc:	f005 fabe 	bl	800703c <HAL_TIM_PWM_ConfigChannel>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001ac6:	f000 faed 	bl	80020a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ace:	2208      	movs	r2, #8
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4814      	ldr	r0, [pc, #80]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001ad4:	f005 fab2 	bl	800703c <HAL_TIM_PWM_ConfigChannel>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001ade:	f000 fae1 	bl	80020a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001af6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001afa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	4619      	mov	r1, r3
 8001b04:	4807      	ldr	r0, [pc, #28]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001b06:	f005 ff8f 	bl	8007a28 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001b10:	f000 fac8 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b14:	4803      	ldr	r0, [pc, #12]	; (8001b24 <MX_TIM1_Init+0x16c>)
 8001b16:	f000 fe15 	bl	8002744 <HAL_TIM_MspPostInit>

}
 8001b1a:	bf00      	nop
 8001b1c:	3758      	adds	r7, #88	; 0x58
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200005a0 	.word	0x200005a0
 8001b28:	40010000 	.word	0x40010000

08001b2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08c      	sub	sp, #48	; 0x30
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	2224      	movs	r2, #36	; 0x24
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f00a f928 	bl	800bd90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b48:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <MX_TIM2_Init+0xa4>)
 8001b4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b50:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <MX_TIM2_Init+0xa4>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <MX_TIM2_Init+0xa4>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <MX_TIM2_Init+0xa4>)
 8001b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <MX_TIM2_Init+0xa4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6a:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <MX_TIM2_Init+0xa4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8001b70:	2302      	movs	r3, #2
 8001b72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b80:	230a      	movs	r3, #10
 8001b82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001b90:	230a      	movs	r3, #10
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b94:	f107 030c 	add.w	r3, r7, #12
 8001b98:	4619      	mov	r1, r3
 8001b9a:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <MX_TIM2_Init+0xa4>)
 8001b9c:	f005 f812 	bl	8006bc4 <HAL_TIM_Encoder_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001ba6:	f000 fa7d 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4806      	ldr	r0, [pc, #24]	; (8001bd0 <MX_TIM2_Init+0xa4>)
 8001bb8:	f005 fec8 	bl	800794c <HAL_TIMEx_MasterConfigSynchronization>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001bc2:	f000 fa6f 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	3730      	adds	r7, #48	; 0x30
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200005e8 	.word	0x200005e8

08001bd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be8:	463b      	mov	r3, r7
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <MX_TIM3_Init+0x94>)
 8001bf2:	4a1e      	ldr	r2, [pc, #120]	; (8001c6c <MX_TIM3_Init+0x98>)
 8001bf4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <MX_TIM3_Init+0x94>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <MX_TIM3_Init+0x94>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15999;
 8001c02:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <MX_TIM3_Init+0x94>)
 8001c04:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001c08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <MX_TIM3_Init+0x94>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <MX_TIM3_Init+0x94>)
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c16:	4814      	ldr	r0, [pc, #80]	; (8001c68 <MX_TIM3_Init+0x94>)
 8001c18:	f004 fd86 	bl	8006728 <HAL_TIM_Base_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001c22:	f000 fa3f 	bl	80020a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c2c:	f107 0308 	add.w	r3, r7, #8
 8001c30:	4619      	mov	r1, r3
 8001c32:	480d      	ldr	r0, [pc, #52]	; (8001c68 <MX_TIM3_Init+0x94>)
 8001c34:	f005 fac4 	bl	80071c0 <HAL_TIM_ConfigClockSource>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001c3e:	f000 fa31 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c4a:	463b      	mov	r3, r7
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4806      	ldr	r0, [pc, #24]	; (8001c68 <MX_TIM3_Init+0x94>)
 8001c50:	f005 fe7c 	bl	800794c <HAL_TIMEx_MasterConfigSynchronization>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001c5a:	f000 fa23 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000630 	.word	0x20000630
 8001c6c:	40000400 	.word	0x40000400

08001c70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c76:	f107 0308 	add.w	r3, r7, #8
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c84:	463b      	mov	r3, r7
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c8c:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <MX_TIM4_Init+0x94>)
 8001c8e:	4a1e      	ldr	r2, [pc, #120]	; (8001d08 <MX_TIM4_Init+0x98>)
 8001c90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001c92:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <MX_TIM4_Init+0x94>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c98:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <MX_TIM4_Init+0x94>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 63999;
 8001c9e:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <MX_TIM4_Init+0x94>)
 8001ca0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001ca4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <MX_TIM4_Init+0x94>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <MX_TIM4_Init+0x94>)
 8001cae:	2280      	movs	r2, #128	; 0x80
 8001cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cb2:	4814      	ldr	r0, [pc, #80]	; (8001d04 <MX_TIM4_Init+0x94>)
 8001cb4:	f004 fd38 	bl	8006728 <HAL_TIM_Base_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001cbe:	f000 f9f1 	bl	80020a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cc8:	f107 0308 	add.w	r3, r7, #8
 8001ccc:	4619      	mov	r1, r3
 8001cce:	480d      	ldr	r0, [pc, #52]	; (8001d04 <MX_TIM4_Init+0x94>)
 8001cd0:	f005 fa76 	bl	80071c0 <HAL_TIM_ConfigClockSource>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001cda:	f000 f9e3 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4806      	ldr	r0, [pc, #24]	; (8001d04 <MX_TIM4_Init+0x94>)
 8001cec:	f005 fe2e 	bl	800794c <HAL_TIMEx_MasterConfigSynchronization>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001cf6:	f000 f9d5 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000678 	.word	0x20000678
 8001d08:	40000800 	.word	0x40000800

08001d0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d12:	4a18      	ldr	r2, [pc, #96]	; (8001d74 <MX_USART1_UART_Init+0x68>)
 8001d14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d16:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d32:	220c      	movs	r2, #12
 8001d34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d42:	480b      	ldr	r0, [pc, #44]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d44:	f005 fed6 	bl	8007af4 <HAL_UART_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d4e:	f000 f9a9 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 0210 	orr.w	r2, r2, #16
 8001d60:	60da      	str	r2, [r3, #12]
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) UART_RX_buf, sizeof(UART_RX_buf));
 8001d62:	22c8      	movs	r2, #200	; 0xc8
 8001d64:	4904      	ldr	r1, [pc, #16]	; (8001d78 <MX_USART1_UART_Init+0x6c>)
 8001d66:	4802      	ldr	r0, [pc, #8]	; (8001d70 <MX_USART1_UART_Init+0x64>)
 8001d68:	f006 f880 	bl	8007e6c <HAL_UARTEx_ReceiveToIdle_DMA>
  /* USER CODE END USART1_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	200006c0 	.word	0x200006c0
 8001d74:	40011000 	.word	0x40011000
 8001d78:	20000168 	.word	0x20000168

08001d7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d80:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <MX_USART2_UART_Init+0x48>)
 8001d82:	4a11      	ldr	r2, [pc, #68]	; (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001d84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2500000;
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <MX_USART2_UART_Init+0x48>)
 8001d88:	4a10      	ldr	r2, [pc, #64]	; (8001dcc <MX_USART2_UART_Init+0x50>)
 8001d8a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <MX_USART2_UART_Init+0x48>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <MX_USART2_UART_Init+0x48>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <MX_USART2_UART_Init+0x48>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <MX_USART2_UART_Init+0x48>)
 8001da0:	220c      	movs	r2, #12
 8001da2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <MX_USART2_UART_Init+0x48>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <MX_USART2_UART_Init+0x48>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001db0:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <MX_USART2_UART_Init+0x48>)
 8001db2:	f005 fe9f 	bl	8007af4 <HAL_UART_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8001dbc:	f000 f972 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000704 	.word	0x20000704
 8001dc8:	40004400 	.word	0x40004400
 8001dcc:	002625a0 	.word	0x002625a0

08001dd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <MX_DMA_Init+0x98>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a22      	ldr	r2, [pc, #136]	; (8001e68 <MX_DMA_Init+0x98>)
 8001de0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <MX_DMA_Init+0x98>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <MX_DMA_Init+0x98>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <MX_DMA_Init+0x98>)
 8001dfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <MX_DMA_Init+0x98>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2105      	movs	r1, #5
 8001e12:	2010      	movs	r0, #16
 8001e14:	f003 f909 	bl	800502a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e18:	2010      	movs	r0, #16
 8001e1a:	f003 f922 	bl	8005062 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2105      	movs	r1, #5
 8001e22:	2011      	movs	r0, #17
 8001e24:	f003 f901 	bl	800502a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001e28:	2011      	movs	r0, #17
 8001e2a:	f003 f91a 	bl	8005062 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2105      	movs	r1, #5
 8001e32:	2038      	movs	r0, #56	; 0x38
 8001e34:	f003 f8f9 	bl	800502a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001e38:	2038      	movs	r0, #56	; 0x38
 8001e3a:	f003 f912 	bl	8005062 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2105      	movs	r1, #5
 8001e42:	203a      	movs	r0, #58	; 0x3a
 8001e44:	f003 f8f1 	bl	800502a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001e48:	203a      	movs	r0, #58	; 0x3a
 8001e4a:	f003 f90a 	bl	8005062 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2105      	movs	r1, #5
 8001e52:	2046      	movs	r0, #70	; 0x46
 8001e54:	f003 f8e9 	bl	800502a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001e58:	2046      	movs	r0, #70	; 0x46
 8001e5a:	f003 f902 	bl	8005062 <HAL_NVIC_EnableIRQ>

}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800

08001e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	4b51      	ldr	r3, [pc, #324]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a50      	ldr	r2, [pc, #320]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001e8c:	f043 0304 	orr.w	r3, r3, #4
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b4e      	ldr	r3, [pc, #312]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b4a      	ldr	r3, [pc, #296]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a49      	ldr	r2, [pc, #292]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b47      	ldr	r3, [pc, #284]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	4b43      	ldr	r3, [pc, #268]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a42      	ldr	r2, [pc, #264]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b40      	ldr	r3, [pc, #256]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	4b3c      	ldr	r3, [pc, #240]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a3b      	ldr	r2, [pc, #236]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b39      	ldr	r3, [pc, #228]	; (8001fcc <MX_GPIO_Init+0x160>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SOFTSTART_GPIO_Port, SOFTSTART_Pin, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ef8:	4835      	ldr	r0, [pc, #212]	; (8001fd0 <MX_GPIO_Init+0x164>)
 8001efa:	f003 ffa3 	bl	8005e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INPUTS_LOAD_Pin|INPUTS_CS_Pin|DISP_LATCH_Pin|DISP_EN_Pin
 8001efe:	2200      	movs	r2, #0
 8001f00:	f240 3117 	movw	r1, #791	; 0x317
 8001f04:	4833      	ldr	r0, [pc, #204]	; (8001fd4 <MX_GPIO_Init+0x168>)
 8001f06:	f003 ff9d 	bl	8005e44 <HAL_GPIO_WritePin>
                          |MODBUS_DE_Pin|ADC_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INV_ENABLE_Pin|INV_DISABLE_Pin, GPIO_PIN_SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001f10:	4830      	ldr	r0, [pc, #192]	; (8001fd4 <MX_GPIO_Init+0x168>)
 8001f12:	f003 ff97 	bl	8005e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4829      	ldr	r0, [pc, #164]	; (8001fd0 <MX_GPIO_Init+0x164>)
 8001f2c:	f003 fd22 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pin : SOFTSTART_Pin */
  GPIO_InitStruct.Pin = SOFTSTART_Pin;
 8001f30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f36:	2301      	movs	r3, #1
 8001f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SOFTSTART_GPIO_Port, &GPIO_InitStruct);
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	4619      	mov	r1, r3
 8001f48:	4821      	ldr	r0, [pc, #132]	; (8001fd0 <MX_GPIO_Init+0x164>)
 8001f4a:	f003 fd13 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUTS_LOAD_Pin INPUTS_CS_Pin DISP_LATCH_Pin INV_ENABLE_Pin
                           INV_DISABLE_Pin DISP_EN_Pin MODBUS_DE_Pin ADC_CS_Pin */
  GPIO_InitStruct.Pin = INPUTS_LOAD_Pin|INPUTS_CS_Pin|DISP_LATCH_Pin|INV_ENABLE_Pin
 8001f4e:	f243 3317 	movw	r3, #13079	; 0x3317
 8001f52:	617b      	str	r3, [r7, #20]
                          |INV_DISABLE_Pin|DISP_EN_Pin|MODBUS_DE_Pin|ADC_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4619      	mov	r1, r3
 8001f66:	481b      	ldr	r0, [pc, #108]	; (8001fd4 <MX_GPIO_Init+0x168>)
 8001f68:	f003 fd04 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CLK_Pin PB14 PB15 */
  GPIO_InitStruct.Pin = SPI_CLK_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8001f6c:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f7e:	2305      	movs	r3, #5
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	4812      	ldr	r0, [pc, #72]	; (8001fd4 <MX_GPIO_Init+0x168>)
 8001f8a:	f003 fcf3 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_Pin DIR_Pin ENC_Z_Pin */
  GPIO_InitStruct.Pin = STEP_Pin|DIR_Pin|ENC_Z_Pin;
 8001f8e:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8001f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <MX_GPIO_Init+0x16c>)
 8001fa6:	f003 fce5 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pin : OC_ALARM_Pin */
  GPIO_InitStruct.Pin = OC_ALARM_Pin;
 8001faa:	2320      	movs	r3, #32
 8001fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OC_ALARM_GPIO_Port, &GPIO_InitStruct);
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <MX_GPIO_Init+0x168>)
 8001fc0:	f003 fcd8 	bl	8005974 <HAL_GPIO_Init>

}
 8001fc4:	bf00      	nop
 8001fc6:	3728      	adds	r7, #40	; 0x28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40020800 	.word	0x40020800
 8001fd4:	40020400 	.word	0x40020400
 8001fd8:	40020000 	.word	0x40020000

08001fdc <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]
	modbus_process_new_data_to_fifo(huart,Size);
 8001fe8:	887b      	ldrh	r3, [r7, #2]
 8001fea:	4619      	mov	r1, r3
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff f8c7 	bl	8001180 <modbus_process_new_data_to_fifo>
	process_modbus_command();
 8001ff2:	f7ff f92f 	bl	8001254 <process_modbus_command>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
     if(huart == &huart1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a06      	ldr	r2, [pc, #24]	; (8002024 <HAL_UART_ErrorCallback+0x24>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d104      	bne.n	800201a <HAL_UART_ErrorCallback+0x1a>
     {
         HAL_UART_DeInit(&huart1);
 8002010:	4804      	ldr	r0, [pc, #16]	; (8002024 <HAL_UART_ErrorCallback+0x24>)
 8002012:	f005 fdbc 	bl	8007b8e <HAL_UART_DeInit>
         MX_USART1_UART_Init();
 8002016:	f7ff fe79 	bl	8001d0c <MX_USART1_UART_Init>
     }
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200006c0 	.word	0x200006c0

08002028 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a06      	ldr	r2, [pc, #24]	; (8002050 <HAL_UART_TxCpltCallback+0x28>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d105      	bne.n	8002046 <HAL_UART_TxCpltCallback+0x1e>
	HAL_GPIO_WritePin(MODBUS_DE_GPIO_Port,MODBUS_DE_Pin, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002040:	4804      	ldr	r0, [pc, #16]	; (8002054 <HAL_UART_TxCpltCallback+0x2c>)
 8002042:	f003 feff 	bl	8005e44 <HAL_GPIO_WritePin>
	}
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40011000 	.word	0x40011000
 8002054:	40020400 	.word	0x40020400

08002058 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//HAL_ADC_Start_DMA(&hadc1, ADC_rawdata, 4);
	Modbus_init();
 8002060:	f7ff f848 	bl	80010f4 <Modbus_init>
	osDelay(300);
 8002064:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002068:	f007 f9b8 	bl	80093dc <osDelay>
	motor_identification();
 800206c:	f000 f820 	bl	80020b0 <motor_identification>
	HAL_TIM_Base_Start_IT(&htim3);
 8002070:	4808      	ldr	r0, [pc, #32]	; (8002094 <StartDefaultTask+0x3c>)
 8002072:	f004 fba9 	bl	80067c8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8002076:	4808      	ldr	r0, [pc, #32]	; (8002098 <StartDefaultTask+0x40>)
 8002078:	f004 fba6 	bl	80067c8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1); //16 khz ISR synchronized with PWM
 800207c:	4807      	ldr	r0, [pc, #28]	; (800209c <StartDefaultTask+0x44>)
 800207e:	f004 fba3 	bl	80067c8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002082:	213c      	movs	r1, #60	; 0x3c
 8002084:	4806      	ldr	r0, [pc, #24]	; (80020a0 <StartDefaultTask+0x48>)
 8002086:	f004 fe43 	bl	8006d10 <HAL_TIM_Encoder_Start>
	/* Infinite loop */
	for(;;)
	{
    osDelay(1);
 800208a:	2001      	movs	r0, #1
 800208c:	f007 f9a6 	bl	80093dc <osDelay>
 8002090:	e7fb      	b.n	800208a <StartDefaultTask+0x32>
 8002092:	bf00      	nop
 8002094:	20000630 	.word	0x20000630
 8002098:	20000678 	.word	0x20000678
 800209c:	200005a0 	.word	0x200005a0
 80020a0:	200005e8 	.word	0x200005e8

080020a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020a8:	b672      	cpsid	i
}
 80020aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020ac:	e7fe      	b.n	80020ac <Error_Handler+0x8>
	...

080020b0 <motor_identification>:

extern UART_HandleTypeDef huart2;
uint8_t UART2_RX_raw[9];
ssi_encoder_data_t ssi_encoder_data;

void motor_identification(void){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
	//first send 2 packets with 0x92 command, then 8 with 0x7A command (motor data read)
	uint8_t command = 0x92;
 80020b6:	2392      	movs	r3, #146	; 0x92
 80020b8:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i=0;i<10;i++){
 80020ba:	2300      	movs	r3, #0
 80020bc:	71fb      	strb	r3, [r7, #7]
 80020be:	e018      	b.n	80020f2 <motor_identification+0x42>
		if(i>2){command=0x7A;}
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <motor_identification+0x1a>
 80020c6:	237a      	movs	r3, #122	; 0x7a
 80020c8:	71bb      	strb	r3, [r7, #6]
		HAL_UART_Transmit(&huart2, &command, 1, 100);
 80020ca:	1db9      	adds	r1, r7, #6
 80020cc:	2364      	movs	r3, #100	; 0x64
 80020ce:	2201      	movs	r2, #1
 80020d0:	4838      	ldr	r0, [pc, #224]	; (80021b4 <motor_identification+0x104>)
 80020d2:	f005 fd8b 	bl	8007bec <HAL_UART_Transmit>
		osDelay(1);
 80020d6:	2001      	movs	r0, #1
 80020d8:	f007 f980 	bl	80093dc <osDelay>
		HAL_UART_Receive_DMA(&huart2, UART2_RX_raw, 9);
 80020dc:	2209      	movs	r2, #9
 80020de:	4936      	ldr	r1, [pc, #216]	; (80021b8 <motor_identification+0x108>)
 80020e0:	4834      	ldr	r0, [pc, #208]	; (80021b4 <motor_identification+0x104>)
 80020e2:	f005 fe93 	bl	8007e0c <HAL_UART_Receive_DMA>
		osDelay(1);
 80020e6:	2001      	movs	r0, #1
 80020e8:	f007 f978 	bl	80093dc <osDelay>
	for(uint8_t i=0;i<10;i++){
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	3301      	adds	r3, #1
 80020f0:	71fb      	strb	r3, [r7, #7]
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	2b09      	cmp	r3, #9
 80020f6:	d9e3      	bls.n	80020c0 <motor_identification+0x10>
	}
	//check if encoder sent data back ok
	if(UART2_RX_raw[1]!=0x21){ssi_encoder_data.encoder_state=encoder_error_no_communication;}
 80020f8:	4b2f      	ldr	r3, [pc, #188]	; (80021b8 <motor_identification+0x108>)
 80020fa:	785b      	ldrb	r3, [r3, #1]
 80020fc:	2b21      	cmp	r3, #33	; 0x21
 80020fe:	d003      	beq.n	8002108 <motor_identification+0x58>
 8002100:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <motor_identification+0x10c>)
 8002102:	2203      	movs	r2, #3
 8002104:	701a      	strb	r2, [r3, #0]
		}
		//determine speed and power
		ssi_encoder_data.motor_power=(UART2_RX_raw[4] >> 4)*100;
		ssi_encoder_data.motor_speed=(UART2_RX_raw[4] & 0x0F)*1000;
	}
}
 8002106:	e050      	b.n	80021aa <motor_identification+0xfa>
		ssi_encoder_data.encoder_state=encoder_ok;
 8002108:	4b2c      	ldr	r3, [pc, #176]	; (80021bc <motor_identification+0x10c>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
		if(UART2_RX_raw[2]==0x41){ssi_encoder_data.encoder_resolution=p131072ppr;ssi_encoder_data.motor_family=j2super;}
 800210e:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <motor_identification+0x108>)
 8002110:	789b      	ldrb	r3, [r3, #2]
 8002112:	2b41      	cmp	r3, #65	; 0x41
 8002114:	d106      	bne.n	8002124 <motor_identification+0x74>
 8002116:	4b29      	ldr	r3, [pc, #164]	; (80021bc <motor_identification+0x10c>)
 8002118:	2202      	movs	r2, #2
 800211a:	771a      	strb	r2, [r3, #28]
 800211c:	4b27      	ldr	r3, [pc, #156]	; (80021bc <motor_identification+0x10c>)
 800211e:	2202      	movs	r2, #2
 8002120:	775a      	strb	r2, [r3, #29]
 8002122:	e010      	b.n	8002146 <motor_identification+0x96>
		else if(UART2_RX_raw[2]==0x3D){ssi_encoder_data.encoder_resolution=p8192ppr;ssi_encoder_data.motor_family=j2;}
 8002124:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <motor_identification+0x108>)
 8002126:	789b      	ldrb	r3, [r3, #2]
 8002128:	2b3d      	cmp	r3, #61	; 0x3d
 800212a:	d106      	bne.n	800213a <motor_identification+0x8a>
 800212c:	4b23      	ldr	r3, [pc, #140]	; (80021bc <motor_identification+0x10c>)
 800212e:	2201      	movs	r2, #1
 8002130:	771a      	strb	r2, [r3, #28]
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <motor_identification+0x10c>)
 8002134:	2201      	movs	r2, #1
 8002136:	775a      	strb	r2, [r3, #29]
 8002138:	e005      	b.n	8002146 <motor_identification+0x96>
		else{ssi_encoder_data.encoder_resolution=unknown_resolution;ssi_encoder_data.motor_family=unknown_family;}
 800213a:	4b20      	ldr	r3, [pc, #128]	; (80021bc <motor_identification+0x10c>)
 800213c:	2200      	movs	r2, #0
 800213e:	771a      	strb	r2, [r3, #28]
 8002140:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <motor_identification+0x10c>)
 8002142:	2200      	movs	r2, #0
 8002144:	775a      	strb	r2, [r3, #29]
		switch(UART2_RX_raw[3]){
 8002146:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <motor_identification+0x108>)
 8002148:	78db      	ldrb	r3, [r3, #3]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d005      	beq.n	800215a <motor_identification+0xaa>
 800214e:	2b12      	cmp	r3, #18
 8002150:	d107      	bne.n	8002162 <motor_identification+0xb2>
			ssi_encoder_data.motor_formfactor=kf;break;
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <motor_identification+0x10c>)
 8002154:	2202      	movs	r2, #2
 8002156:	779a      	strb	r2, [r3, #30]
 8002158:	e007      	b.n	800216a <motor_identification+0xba>
			ssi_encoder_data.motor_formfactor=mf;break;
 800215a:	4b18      	ldr	r3, [pc, #96]	; (80021bc <motor_identification+0x10c>)
 800215c:	2201      	movs	r2, #1
 800215e:	779a      	strb	r2, [r3, #30]
 8002160:	e003      	b.n	800216a <motor_identification+0xba>
			ssi_encoder_data.motor_formfactor=unknown_formfactor;break;
 8002162:	4b16      	ldr	r3, [pc, #88]	; (80021bc <motor_identification+0x10c>)
 8002164:	2200      	movs	r2, #0
 8002166:	779a      	strb	r2, [r3, #30]
 8002168:	bf00      	nop
		ssi_encoder_data.motor_power=(UART2_RX_raw[4] >> 4)*100;
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <motor_identification+0x108>)
 800216c:	791b      	ldrb	r3, [r3, #4]
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	b2db      	uxtb	r3, r3
 8002172:	b29b      	uxth	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	0092      	lsls	r2, r2, #2
 8002178:	4413      	add	r3, r2
 800217a:	461a      	mov	r2, r3
 800217c:	0091      	lsls	r1, r2, #2
 800217e:	461a      	mov	r2, r3
 8002180:	460b      	mov	r3, r1
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	b29a      	uxth	r2, r3
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <motor_identification+0x10c>)
 800218a:	841a      	strh	r2, [r3, #32]
		ssi_encoder_data.motor_speed=(UART2_RX_raw[4] & 0x0F)*1000;
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <motor_identification+0x108>)
 800218e:	791b      	ldrb	r3, [r3, #4]
 8002190:	b29b      	uxth	r3, r3
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	b29b      	uxth	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	0152      	lsls	r2, r2, #5
 800219c:	1ad2      	subs	r2, r2, r3
 800219e:	0092      	lsls	r2, r2, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	4b05      	ldr	r3, [pc, #20]	; (80021bc <motor_identification+0x10c>)
 80021a8:	845a      	strh	r2, [r3, #34]	; 0x22
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000704 	.word	0x20000704
 80021b8:	200008cc 	.word	0x200008cc
 80021bc:	200008d8 	.word	0x200008d8

080021c0 <motor_encoder_read_position>:

void motor_encoder_read_position(void){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
	uint8_t xor_cheksum=0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0;i<8;i++){
 80021ca:	2300      	movs	r3, #0
 80021cc:	73bb      	strb	r3, [r7, #14]
 80021ce:	e008      	b.n	80021e2 <motor_encoder_read_position+0x22>
		xor_cheksum^=UART2_RX_raw[i];
 80021d0:	7bbb      	ldrb	r3, [r7, #14]
 80021d2:	4a6b      	ldr	r2, [pc, #428]	; (8002380 <motor_encoder_read_position+0x1c0>)
 80021d4:	5cd2      	ldrb	r2, [r2, r3]
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	4053      	eors	r3, r2
 80021da:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0;i<8;i++){
 80021dc:	7bbb      	ldrb	r3, [r7, #14]
 80021de:	3301      	adds	r3, #1
 80021e0:	73bb      	strb	r3, [r7, #14]
 80021e2:	7bbb      	ldrb	r3, [r7, #14]
 80021e4:	2b07      	cmp	r3, #7
 80021e6:	d9f3      	bls.n	80021d0 <motor_encoder_read_position+0x10>
	}
	if(xor_cheksum!=UART2_RX_raw[8]){
 80021e8:	4b65      	ldr	r3, [pc, #404]	; (8002380 <motor_encoder_read_position+0x1c0>)
 80021ea:	7a1b      	ldrb	r3, [r3, #8]
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d019      	beq.n	8002226 <motor_encoder_read_position+0x66>
		ssi_encoder_data.checksum_error_count++;
 80021f2:	4b64      	ldr	r3, [pc, #400]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80021f4:	7c1b      	ldrb	r3, [r3, #16]
 80021f6:	3301      	adds	r3, #1
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4b62      	ldr	r3, [pc, #392]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80021fc:	741a      	strb	r2, [r3, #16]
		if(ssi_encoder_data.checksum_error_count>3 && ssi_encoder_data.encoder_state!=encoder_error_no_communication){ssi_encoder_data.encoder_state=encoder_error_cheksum;}
 80021fe:	4b61      	ldr	r3, [pc, #388]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002200:	7c1b      	ldrb	r3, [r3, #16]
 8002202:	2b03      	cmp	r3, #3
 8002204:	d906      	bls.n	8002214 <motor_encoder_read_position+0x54>
 8002206:	4b5f      	ldr	r3, [pc, #380]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d002      	beq.n	8002214 <motor_encoder_read_position+0x54>
 800220e:	4b5d      	ldr	r3, [pc, #372]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
		if(ssi_encoder_data.checksum_error_count>100){ssi_encoder_data.encoder_state=encoder_error_no_communication;}
 8002214:	4b5b      	ldr	r3, [pc, #364]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002216:	7c1b      	ldrb	r3, [r3, #16]
 8002218:	2b64      	cmp	r3, #100	; 0x64
 800221a:	f240 808f 	bls.w	800233c <motor_encoder_read_position+0x17c>
 800221e:	4b59      	ldr	r3, [pc, #356]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002220:	2203      	movs	r2, #3
 8002222:	701a      	strb	r2, [r3, #0]
 8002224:	e08a      	b.n	800233c <motor_encoder_read_position+0x17c>
	}
	else{ //calculate position and speed from received earlier data
		if(ssi_encoder_data.encoder_resolution==p131072ppr){
 8002226:	4b57      	ldr	r3, [pc, #348]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002228:	7f1b      	ldrb	r3, [r3, #28]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d143      	bne.n	80022b6 <motor_encoder_read_position+0xf6>
			ssi_encoder_data.last_encoder_position=ssi_encoder_data.encoder_position;
 800222e:	4b55      	ldr	r3, [pc, #340]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4a54      	ldr	r2, [pc, #336]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002234:	6093      	str	r3, [r2, #8]
			if(UART2_RX_raw[0]==0xA2){ssi_encoder_data.encoder_position=UART2_RX_raw[2]>>3 | UART2_RX_raw[3]<<5 | UART2_RX_raw[4]<<13;}
 8002236:	4b52      	ldr	r3, [pc, #328]	; (8002380 <motor_encoder_read_position+0x1c0>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2ba2      	cmp	r3, #162	; 0xa2
 800223c:	d10f      	bne.n	800225e <motor_encoder_read_position+0x9e>
 800223e:	4b50      	ldr	r3, [pc, #320]	; (8002380 <motor_encoder_read_position+0x1c0>)
 8002240:	789b      	ldrb	r3, [r3, #2]
 8002242:	08db      	lsrs	r3, r3, #3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	461a      	mov	r2, r3
 8002248:	4b4d      	ldr	r3, [pc, #308]	; (8002380 <motor_encoder_read_position+0x1c0>)
 800224a:	78db      	ldrb	r3, [r3, #3]
 800224c:	015b      	lsls	r3, r3, #5
 800224e:	431a      	orrs	r2, r3
 8002250:	4b4b      	ldr	r3, [pc, #300]	; (8002380 <motor_encoder_read_position+0x1c0>)
 8002252:	791b      	ldrb	r3, [r3, #4]
 8002254:	035b      	lsls	r3, r3, #13
 8002256:	4313      	orrs	r3, r2
 8002258:	461a      	mov	r2, r3
 800225a:	4b4a      	ldr	r3, [pc, #296]	; (8002384 <motor_encoder_read_position+0x1c4>)
 800225c:	605a      	str	r2, [r3, #4]
			if(ssi_encoder_data.encoder_position>131073){ssi_encoder_data.encoder_position=ssi_encoder_data.last_encoder_position;}//error handling
 800225e:	4b49      	ldr	r3, [pc, #292]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f1b3 1f02 	cmp.w	r3, #131074	; 0x20002
 8002266:	d303      	bcc.n	8002270 <motor_encoder_read_position+0xb0>
 8002268:	4b46      	ldr	r3, [pc, #280]	; (8002384 <motor_encoder_read_position+0x1c4>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	4a45      	ldr	r2, [pc, #276]	; (8002384 <motor_encoder_read_position+0x1c4>)
 800226e:	6053      	str	r3, [r2, #4]
			int32_t speed = ssi_encoder_data.last_encoder_position-ssi_encoder_data.encoder_position;
 8002270:	4b44      	ldr	r3, [pc, #272]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	4b43      	ldr	r3, [pc, #268]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	60bb      	str	r3, [r7, #8]
			if(((speed>2000) && (speed<129000))||
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002282:	dd03      	ble.n	800228c <motor_encoder_read_position+0xcc>
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4a40      	ldr	r2, [pc, #256]	; (8002388 <motor_encoder_read_position+0x1c8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	dd07      	ble.n	800229c <motor_encoder_read_position+0xdc>
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8002292:	da10      	bge.n	80022b6 <motor_encoder_read_position+0xf6>
					((speed<(-2000)) && (speed>(-129000)))){
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4a3d      	ldr	r2, [pc, #244]	; (800238c <motor_encoder_read_position+0x1cc>)
 8002298:	4293      	cmp	r3, r2
 800229a:	db0c      	blt.n	80022b6 <motor_encoder_read_position+0xf6>
				ssi_encoder_data.excessive_acceleration_error_count++;
 800229c:	4b39      	ldr	r3, [pc, #228]	; (8002384 <motor_encoder_read_position+0x1c4>)
 800229e:	7c5b      	ldrb	r3, [r3, #17]
 80022a0:	3301      	adds	r3, #1
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	4b37      	ldr	r3, [pc, #220]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022a6:	745a      	strb	r2, [r3, #17]
				if(ssi_encoder_data.excessive_acceleration_error_count>2){ssi_encoder_data.encoder_state=encoder_error_acceleration;}
 80022a8:	4b36      	ldr	r3, [pc, #216]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022aa:	7c5b      	ldrb	r3, [r3, #17]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d902      	bls.n	80022b6 <motor_encoder_read_position+0xf6>
 80022b0:	4b34      	ldr	r3, [pc, #208]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022b2:	2202      	movs	r2, #2
 80022b4:	701a      	strb	r2, [r3, #0]
			}
		}
		if(ssi_encoder_data.encoder_resolution==p8192ppr){
 80022b6:	4b33      	ldr	r3, [pc, #204]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022b8:	7f1b      	ldrb	r3, [r3, #28]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d13e      	bne.n	800233c <motor_encoder_read_position+0x17c>
			ssi_encoder_data.last_encoder_position=ssi_encoder_data.encoder_position;
 80022be:	4b31      	ldr	r3, [pc, #196]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4a30      	ldr	r2, [pc, #192]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022c4:	6093      	str	r3, [r2, #8]
			if(UART2_RX_raw[0]==0x1A){ssi_encoder_data.encoder_position=UART2_RX_raw[2] | UART2_RX_raw[3]<<8;}
 80022c6:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <motor_encoder_read_position+0x1c0>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b1a      	cmp	r3, #26
 80022cc:	d109      	bne.n	80022e2 <motor_encoder_read_position+0x122>
 80022ce:	4b2c      	ldr	r3, [pc, #176]	; (8002380 <motor_encoder_read_position+0x1c0>)
 80022d0:	789b      	ldrb	r3, [r3, #2]
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <motor_encoder_read_position+0x1c0>)
 80022d6:	78db      	ldrb	r3, [r3, #3]
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	4313      	orrs	r3, r2
 80022dc:	461a      	mov	r2, r3
 80022de:	4b29      	ldr	r3, [pc, #164]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022e0:	605a      	str	r2, [r3, #4]
			if(ssi_encoder_data.encoder_position>8193){ssi_encoder_data.encoder_position=ssi_encoder_data.last_encoder_position;}//error handling
 80022e2:	4b28      	ldr	r3, [pc, #160]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f242 0201 	movw	r2, #8193	; 0x2001
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d903      	bls.n	80022f6 <motor_encoder_read_position+0x136>
 80022ee:	4b25      	ldr	r3, [pc, #148]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	4a24      	ldr	r2, [pc, #144]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022f4:	6053      	str	r3, [r2, #4]
			int32_t speed = ssi_encoder_data.last_encoder_position-ssi_encoder_data.encoder_position;
 80022f6:	4b23      	ldr	r3, [pc, #140]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	4b22      	ldr	r3, [pc, #136]	; (8002384 <motor_encoder_read_position+0x1c4>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	607b      	str	r3, [r7, #4]
			if(((speed>50) && (speed<8100))||
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b32      	cmp	r3, #50	; 0x32
 8002306:	dd04      	ble.n	8002312 <motor_encoder_read_position+0x152>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f641 72a3 	movw	r2, #8099	; 0x1fa3
 800230e:	4293      	cmp	r3, r2
 8002310:	dd07      	ble.n	8002322 <motor_encoder_read_position+0x162>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8002318:	da10      	bge.n	800233c <motor_encoder_read_position+0x17c>
					((speed<(-50)) && (speed>(-8100)))){
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a1c      	ldr	r2, [pc, #112]	; (8002390 <motor_encoder_read_position+0x1d0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	db0c      	blt.n	800233c <motor_encoder_read_position+0x17c>
				ssi_encoder_data.excessive_acceleration_error_count++;
 8002322:	4b18      	ldr	r3, [pc, #96]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002324:	7c5b      	ldrb	r3, [r3, #17]
 8002326:	3301      	adds	r3, #1
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4b16      	ldr	r3, [pc, #88]	; (8002384 <motor_encoder_read_position+0x1c4>)
 800232c:	745a      	strb	r2, [r3, #17]
				if(ssi_encoder_data.excessive_acceleration_error_count>2){ssi_encoder_data.encoder_state=encoder_error_acceleration;}
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002330:	7c5b      	ldrb	r3, [r3, #17]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d902      	bls.n	800233c <motor_encoder_read_position+0x17c>
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002338:	2202      	movs	r2, #2
 800233a:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	//set command to send to encoder depending on its type
	if(ssi_encoder_data.encoder_resolution==p8192ppr){ssi_encoder_data.encoder_command=0x1A;}//j2s series also gives position after this command but resolution is limited to 16-bit
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <motor_encoder_read_position+0x1c4>)
 800233e:	7f1b      	ldrb	r3, [r3, #28]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d103      	bne.n	800234c <motor_encoder_read_position+0x18c>
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002346:	221a      	movs	r2, #26
 8002348:	76da      	strb	r2, [r3, #27]
 800234a:	e002      	b.n	8002352 <motor_encoder_read_position+0x192>
	else {ssi_encoder_data.encoder_command=0xA2;}
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <motor_encoder_read_position+0x1c4>)
 800234e:	22a2      	movs	r2, #162	; 0xa2
 8002350:	76da      	strb	r2, [r3, #27]
	HAL_StatusTypeDef err_code = HAL_UART_Transmit_DMA(&huart2, &ssi_encoder_data.encoder_command, 1);
 8002352:	2201      	movs	r2, #1
 8002354:	490f      	ldr	r1, [pc, #60]	; (8002394 <motor_encoder_read_position+0x1d4>)
 8002356:	4810      	ldr	r0, [pc, #64]	; (8002398 <motor_encoder_read_position+0x1d8>)
 8002358:	f005 fcda 	bl	8007d10 <HAL_UART_Transmit_DMA>
 800235c:	4603      	mov	r3, r0
 800235e:	70fb      	strb	r3, [r7, #3]
	if(err_code!=HAL_OK){
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <motor_encoder_read_position+0x1ac>
		ssi_encoder_data.encoder_state=encoder_error_uart_busy;
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <motor_encoder_read_position+0x1c4>)
 8002368:	2204      	movs	r2, #4
 800236a:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_DMA(&huart2, UART2_RX_raw, 9);//start listening for response, it will be automatically copied by DMA after reception
 800236c:	2209      	movs	r2, #9
 800236e:	4904      	ldr	r1, [pc, #16]	; (8002380 <motor_encoder_read_position+0x1c0>)
 8002370:	4809      	ldr	r0, [pc, #36]	; (8002398 <motor_encoder_read_position+0x1d8>)
 8002372:	f005 fd4b 	bl	8007e0c <HAL_UART_Receive_DMA>
}
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	200008cc 	.word	0x200008cc
 8002384:	200008d8 	.word	0x200008d8
 8002388:	0001f7e7 	.word	0x0001f7e7
 800238c:	fffe0819 	.word	0xfffe0819
 8002390:	ffffe05d 	.word	0xffffe05d
 8002394:	200008f3 	.word	0x200008f3
 8002398:	20000704 	.word	0x20000704

0800239c <PI_control>:
 *  Created on: Apr 9, 2022
 *      Author: Wiktor
 */
#include "pid.h"

float PI_control(PID_t  *pid_data, float error){
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	ed87 0a00 	vstr	s0, [r7]
	float proportional = pid_data->proportional_gain * error;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	ed97 7a00 	vldr	s14, [r7]
 80023b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b6:	edc7 7a03 	vstr	s15, [r7, #12]
	float integral = pid_data->last_integral + (pid_data->integral_gain*pid_data->sampling_time*0.5f*(error+pid_data->last_error));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	ed93 7a06 	vldr	s14, [r3, #24]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	edd3 6a01 	vldr	s13, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80023cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80023d4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	ed93 6a07 	vldr	s12, [r3, #28]
 80023de:	edd7 7a00 	vldr	s15, [r7]
 80023e2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80023e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ee:	edc7 7a05 	vstr	s15, [r7, #20]
	//antiwindup
	if(integral>pid_data->antiwindup_limit){integral=pid_data->antiwindup_limit;}
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80023f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80023fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002404:	dd02      	ble.n	800240c <PI_control+0x70>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	617b      	str	r3, [r7, #20]
	if(integral<(pid_data->antiwindup_limit*-1)){integral=(pid_data->antiwindup_limit)*(-1.0f);}
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002412:	eef1 7a67 	vneg.f32	s15, s15
 8002416:	ed97 7a05 	vldr	s14, [r7, #20]
 800241a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800241e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002422:	d506      	bpl.n	8002432 <PI_control+0x96>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	edd3 7a02 	vldr	s15, [r3, #8]
 800242a:	eef1 7a67 	vneg.f32	s15, s15
 800242e:	edc7 7a05 	vstr	s15, [r7, #20]

	float output = proportional+integral;
 8002432:	ed97 7a03 	vldr	s14, [r7, #12]
 8002436:	edd7 7a05 	vldr	s15, [r7, #20]
 800243a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800243e:	edc7 7a04 	vstr	s15, [r7, #16]
	if(output>pid_data->output_limit){output=pid_data->output_limit;}
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	edd3 7a03 	vldr	s15, [r3, #12]
 8002448:	ed97 7a04 	vldr	s14, [r7, #16]
 800244c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002454:	dd02      	ble.n	800245c <PI_control+0xc0>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	613b      	str	r3, [r7, #16]
	if(output<((pid_data->output_limit)*(-1.0f))){output=(pid_data->output_limit)*(-1.0f);}
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002462:	eef1 7a67 	vneg.f32	s15, s15
 8002466:	ed97 7a04 	vldr	s14, [r7, #16]
 800246a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800246e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002472:	d506      	bpl.n	8002482 <PI_control+0xe6>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	edd3 7a03 	vldr	s15, [r3, #12]
 800247a:	eef1 7a67 	vneg.f32	s15, s15
 800247e:	edc7 7a04 	vstr	s15, [r7, #16]

	pid_data->last_error=error;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	61da      	str	r2, [r3, #28]
	pid_data->last_integral=integral;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	619a      	str	r2, [r3, #24]
	pid_data->last_output=output;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	621a      	str	r2, [r3, #32]
	return output;
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	ee07 3a90 	vmov	s15, r3
}
 800249a:	eeb0 0a67 	vmov.f32	s0, s15
 800249e:	371c      	adds	r7, #28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	607b      	str	r3, [r7, #4]
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_MspInit+0x54>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	4a11      	ldr	r2, [pc, #68]	; (80024fc <HAL_MspInit+0x54>)
 80024b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024bc:	6453      	str	r3, [r2, #68]	; 0x44
 80024be:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <HAL_MspInit+0x54>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	603b      	str	r3, [r7, #0]
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_MspInit+0x54>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <HAL_MspInit+0x54>)
 80024d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d8:	6413      	str	r3, [r2, #64]	; 0x40
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <HAL_MspInit+0x54>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e2:	603b      	str	r3, [r7, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	210f      	movs	r1, #15
 80024ea:	f06f 0001 	mvn.w	r0, #1
 80024ee:	f002 fd9c 	bl	800502a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800

08002500 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	; 0x28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a2f      	ldr	r2, [pc, #188]	; (80025dc <HAL_ADC_MspInit+0xdc>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d157      	bne.n	80025d2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	4b2e      	ldr	r3, [pc, #184]	; (80025e0 <HAL_ADC_MspInit+0xe0>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	4a2d      	ldr	r2, [pc, #180]	; (80025e0 <HAL_ADC_MspInit+0xe0>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002530:	6453      	str	r3, [r2, #68]	; 0x44
 8002532:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_ADC_MspInit+0xe0>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	4b27      	ldr	r3, [pc, #156]	; (80025e0 <HAL_ADC_MspInit+0xe0>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4a26      	ldr	r2, [pc, #152]	; (80025e0 <HAL_ADC_MspInit+0xe0>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6313      	str	r3, [r2, #48]	; 0x30
 800254e:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <HAL_ADC_MspInit+0xe0>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = I_U_Pin|I_V_Pin|DC_VOLTAGE_Pin|HEATSINK_TEMP_Pin;
 800255a:	23f0      	movs	r3, #240	; 0xf0
 800255c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800255e:	2303      	movs	r3, #3
 8002560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002566:	f107 0314 	add.w	r3, r7, #20
 800256a:	4619      	mov	r1, r3
 800256c:	481d      	ldr	r0, [pc, #116]	; (80025e4 <HAL_ADC_MspInit+0xe4>)
 800256e:	f003 fa01 	bl	8005974 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002572:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 8002574:	4a1d      	ldr	r2, [pc, #116]	; (80025ec <HAL_ADC_MspInit+0xec>)
 8002576:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002578:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 800257a:	2200      	movs	r2, #0
 800257c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800257e:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002584:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 8002586:	2200      	movs	r2, #0
 8002588:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800258a:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 800258c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002590:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 8002594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002598:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800259a:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 800259c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80025a2:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80025a8:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 80025aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025b0:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025b6:	480c      	ldr	r0, [pc, #48]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 80025b8:	f002 fd7c 	bl	80050b4 <HAL_DMA_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80025c2:	f7ff fd6f 	bl	80020a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 80025ca:	639a      	str	r2, [r3, #56]	; 0x38
 80025cc:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <HAL_ADC_MspInit+0xe8>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025d2:	bf00      	nop
 80025d4:	3728      	adds	r7, #40	; 0x28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40012000 	.word	0x40012000
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40020000 	.word	0x40020000
 80025e8:	20000540 	.word	0x20000540
 80025ec:	40026410 	.word	0x40026410

080025f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a2a      	ldr	r2, [pc, #168]	; (80026a8 <HAL_TIM_Base_MspInit+0xb8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d116      	bne.n	8002630 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	4b29      	ldr	r3, [pc, #164]	; (80026ac <HAL_TIM_Base_MspInit+0xbc>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	4a28      	ldr	r2, [pc, #160]	; (80026ac <HAL_TIM_Base_MspInit+0xbc>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6453      	str	r3, [r2, #68]	; 0x44
 8002612:	4b26      	ldr	r3, [pc, #152]	; (80026ac <HAL_TIM_Base_MspInit+0xbc>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800261e:	2200      	movs	r2, #0
 8002620:	2105      	movs	r1, #5
 8002622:	2019      	movs	r0, #25
 8002624:	f002 fd01 	bl	800502a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002628:	2019      	movs	r0, #25
 800262a:	f002 fd1a 	bl	8005062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800262e:	e036      	b.n	800269e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a1e      	ldr	r2, [pc, #120]	; (80026b0 <HAL_TIM_Base_MspInit+0xc0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d116      	bne.n	8002668 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <HAL_TIM_Base_MspInit+0xbc>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	4a1a      	ldr	r2, [pc, #104]	; (80026ac <HAL_TIM_Base_MspInit+0xbc>)
 8002644:	f043 0302 	orr.w	r3, r3, #2
 8002648:	6413      	str	r3, [r2, #64]	; 0x40
 800264a:	4b18      	ldr	r3, [pc, #96]	; (80026ac <HAL_TIM_Base_MspInit+0xbc>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	2105      	movs	r1, #5
 800265a:	201d      	movs	r0, #29
 800265c:	f002 fce5 	bl	800502a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002660:	201d      	movs	r0, #29
 8002662:	f002 fcfe 	bl	8005062 <HAL_NVIC_EnableIRQ>
}
 8002666:	e01a      	b.n	800269e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a11      	ldr	r2, [pc, #68]	; (80026b4 <HAL_TIM_Base_MspInit+0xc4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d115      	bne.n	800269e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <HAL_TIM_Base_MspInit+0xbc>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a0c      	ldr	r2, [pc, #48]	; (80026ac <HAL_TIM_Base_MspInit+0xbc>)
 800267c:	f043 0304 	orr.w	r3, r3, #4
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
 8002682:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <HAL_TIM_Base_MspInit+0xbc>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800268e:	2200      	movs	r2, #0
 8002690:	2105      	movs	r1, #5
 8002692:	201e      	movs	r0, #30
 8002694:	f002 fcc9 	bl	800502a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002698:	201e      	movs	r0, #30
 800269a:	f002 fce2 	bl	8005062 <HAL_NVIC_EnableIRQ>
}
 800269e:	bf00      	nop
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40010000 	.word	0x40010000
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40000400 	.word	0x40000400
 80026b4:	40000800 	.word	0x40000800

080026b8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	; 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d8:	d12b      	bne.n	8002732 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	4b17      	ldr	r3, [pc, #92]	; (800273c <HAL_TIM_Encoder_MspInit+0x84>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	4a16      	ldr	r2, [pc, #88]	; (800273c <HAL_TIM_Encoder_MspInit+0x84>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ea:	4b14      	ldr	r3, [pc, #80]	; (800273c <HAL_TIM_Encoder_MspInit+0x84>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_TIM_Encoder_MspInit+0x84>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a0f      	ldr	r2, [pc, #60]	; (800273c <HAL_TIM_Encoder_MspInit+0x84>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b0d      	ldr	r3, [pc, #52]	; (800273c <HAL_TIM_Encoder_MspInit+0x84>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 8002712:	2303      	movs	r3, #3
 8002714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	2300      	movs	r3, #0
 8002720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002722:	2301      	movs	r3, #1
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002726:	f107 0314 	add.w	r3, r7, #20
 800272a:	4619      	mov	r1, r3
 800272c:	4804      	ldr	r0, [pc, #16]	; (8002740 <HAL_TIM_Encoder_MspInit+0x88>)
 800272e:	f003 f921 	bl	8005974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002732:	bf00      	nop
 8002734:	3728      	adds	r7, #40	; 0x28
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	40020000 	.word	0x40020000

08002744 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a12      	ldr	r2, [pc, #72]	; (80027ac <HAL_TIM_MspPostInit+0x68>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d11e      	bne.n	80027a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <HAL_TIM_MspPostInit+0x6c>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a10      	ldr	r2, [pc, #64]	; (80027b0 <HAL_TIM_MspPostInit+0x6c>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <HAL_TIM_MspPostInit+0x6c>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_Pin|V_PWM_Pin|W_PWM_Pin;
 8002782:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002786:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002788:	2302      	movs	r3, #2
 800278a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002790:	2300      	movs	r3, #0
 8002792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002794:	2301      	movs	r3, #1
 8002796:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002798:	f107 030c 	add.w	r3, r7, #12
 800279c:	4619      	mov	r1, r3
 800279e:	4805      	ldr	r0, [pc, #20]	; (80027b4 <HAL_TIM_MspPostInit+0x70>)
 80027a0:	f003 f8e8 	bl	8005974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80027a4:	bf00      	nop
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40010000 	.word	0x40010000
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40020000 	.word	0x40020000

080027b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08c      	sub	sp, #48	; 0x30
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	f107 031c 	add.w	r3, r7, #28
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a97      	ldr	r2, [pc, #604]	; (8002a34 <HAL_UART_MspInit+0x27c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	f040 8092 	bne.w	8002900 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027dc:	2300      	movs	r3, #0
 80027de:	61bb      	str	r3, [r7, #24]
 80027e0:	4b95      	ldr	r3, [pc, #596]	; (8002a38 <HAL_UART_MspInit+0x280>)
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	4a94      	ldr	r2, [pc, #592]	; (8002a38 <HAL_UART_MspInit+0x280>)
 80027e6:	f043 0310 	orr.w	r3, r3, #16
 80027ea:	6453      	str	r3, [r2, #68]	; 0x44
 80027ec:	4b92      	ldr	r3, [pc, #584]	; (8002a38 <HAL_UART_MspInit+0x280>)
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	4b8e      	ldr	r3, [pc, #568]	; (8002a38 <HAL_UART_MspInit+0x280>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	4a8d      	ldr	r2, [pc, #564]	; (8002a38 <HAL_UART_MspInit+0x280>)
 8002802:	f043 0302 	orr.w	r3, r3, #2
 8002806:	6313      	str	r3, [r2, #48]	; 0x30
 8002808:	4b8b      	ldr	r3, [pc, #556]	; (8002a38 <HAL_UART_MspInit+0x280>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MODBUS_TX_Pin|MODBUS_RX_Pin;
 8002814:	23c0      	movs	r3, #192	; 0xc0
 8002816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002818:	2302      	movs	r3, #2
 800281a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002820:	2303      	movs	r3, #3
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002824:	2307      	movs	r3, #7
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002828:	f107 031c 	add.w	r3, r7, #28
 800282c:	4619      	mov	r1, r3
 800282e:	4883      	ldr	r0, [pc, #524]	; (8002a3c <HAL_UART_MspInit+0x284>)
 8002830:	f003 f8a0 	bl	8005974 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002834:	4b82      	ldr	r3, [pc, #520]	; (8002a40 <HAL_UART_MspInit+0x288>)
 8002836:	4a83      	ldr	r2, [pc, #524]	; (8002a44 <HAL_UART_MspInit+0x28c>)
 8002838:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800283a:	4b81      	ldr	r3, [pc, #516]	; (8002a40 <HAL_UART_MspInit+0x288>)
 800283c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002840:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002842:	4b7f      	ldr	r3, [pc, #508]	; (8002a40 <HAL_UART_MspInit+0x288>)
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002848:	4b7d      	ldr	r3, [pc, #500]	; (8002a40 <HAL_UART_MspInit+0x288>)
 800284a:	2200      	movs	r2, #0
 800284c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800284e:	4b7c      	ldr	r3, [pc, #496]	; (8002a40 <HAL_UART_MspInit+0x288>)
 8002850:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002854:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002856:	4b7a      	ldr	r3, [pc, #488]	; (8002a40 <HAL_UART_MspInit+0x288>)
 8002858:	2200      	movs	r2, #0
 800285a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800285c:	4b78      	ldr	r3, [pc, #480]	; (8002a40 <HAL_UART_MspInit+0x288>)
 800285e:	2200      	movs	r2, #0
 8002860:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002862:	4b77      	ldr	r3, [pc, #476]	; (8002a40 <HAL_UART_MspInit+0x288>)
 8002864:	2200      	movs	r2, #0
 8002866:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002868:	4b75      	ldr	r3, [pc, #468]	; (8002a40 <HAL_UART_MspInit+0x288>)
 800286a:	2200      	movs	r2, #0
 800286c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800286e:	4b74      	ldr	r3, [pc, #464]	; (8002a40 <HAL_UART_MspInit+0x288>)
 8002870:	2200      	movs	r2, #0
 8002872:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002874:	4872      	ldr	r0, [pc, #456]	; (8002a40 <HAL_UART_MspInit+0x288>)
 8002876:	f002 fc1d 	bl	80050b4 <HAL_DMA_Init>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002880:	f7ff fc10 	bl	80020a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a6e      	ldr	r2, [pc, #440]	; (8002a40 <HAL_UART_MspInit+0x288>)
 8002888:	639a      	str	r2, [r3, #56]	; 0x38
 800288a:	4a6d      	ldr	r2, [pc, #436]	; (8002a40 <HAL_UART_MspInit+0x288>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002890:	4b6d      	ldr	r3, [pc, #436]	; (8002a48 <HAL_UART_MspInit+0x290>)
 8002892:	4a6e      	ldr	r2, [pc, #440]	; (8002a4c <HAL_UART_MspInit+0x294>)
 8002894:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002896:	4b6c      	ldr	r3, [pc, #432]	; (8002a48 <HAL_UART_MspInit+0x290>)
 8002898:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800289c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800289e:	4b6a      	ldr	r3, [pc, #424]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028a0:	2240      	movs	r2, #64	; 0x40
 80028a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028a4:	4b68      	ldr	r3, [pc, #416]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028aa:	4b67      	ldr	r3, [pc, #412]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028b0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028b2:	4b65      	ldr	r3, [pc, #404]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028b8:	4b63      	ldr	r3, [pc, #396]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80028be:	4b62      	ldr	r3, [pc, #392]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80028c4:	4b60      	ldr	r3, [pc, #384]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028ca:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028cc:	4b5e      	ldr	r3, [pc, #376]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80028d2:	485d      	ldr	r0, [pc, #372]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028d4:	f002 fbee 	bl	80050b4 <HAL_DMA_Init>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80028de:	f7ff fbe1 	bl	80020a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a58      	ldr	r2, [pc, #352]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028e6:	635a      	str	r2, [r3, #52]	; 0x34
 80028e8:	4a57      	ldr	r2, [pc, #348]	; (8002a48 <HAL_UART_MspInit+0x290>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80028ee:	2200      	movs	r2, #0
 80028f0:	2105      	movs	r1, #5
 80028f2:	2025      	movs	r0, #37	; 0x25
 80028f4:	f002 fb99 	bl	800502a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028f8:	2025      	movs	r0, #37	; 0x25
 80028fa:	f002 fbb2 	bl	8005062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028fe:	e095      	b.n	8002a2c <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a52      	ldr	r2, [pc, #328]	; (8002a50 <HAL_UART_MspInit+0x298>)
 8002906:	4293      	cmp	r3, r2
 8002908:	f040 8090 	bne.w	8002a2c <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 800290c:	2300      	movs	r3, #0
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	4b49      	ldr	r3, [pc, #292]	; (8002a38 <HAL_UART_MspInit+0x280>)
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	4a48      	ldr	r2, [pc, #288]	; (8002a38 <HAL_UART_MspInit+0x280>)
 8002916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291a:	6413      	str	r3, [r2, #64]	; 0x40
 800291c:	4b46      	ldr	r3, [pc, #280]	; (8002a38 <HAL_UART_MspInit+0x280>)
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	4b42      	ldr	r3, [pc, #264]	; (8002a38 <HAL_UART_MspInit+0x280>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	4a41      	ldr	r2, [pc, #260]	; (8002a38 <HAL_UART_MspInit+0x280>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6313      	str	r3, [r2, #48]	; 0x30
 8002938:	4b3f      	ldr	r3, [pc, #252]	; (8002a38 <HAL_UART_MspInit+0x280>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SSI_TX_Pin|SSI_RX_Pin;
 8002944:	230c      	movs	r3, #12
 8002946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002950:	2303      	movs	r3, #3
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002954:	2307      	movs	r3, #7
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002958:	f107 031c 	add.w	r3, r7, #28
 800295c:	4619      	mov	r1, r3
 800295e:	483d      	ldr	r0, [pc, #244]	; (8002a54 <HAL_UART_MspInit+0x29c>)
 8002960:	f003 f808 	bl	8005974 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002964:	4b3c      	ldr	r3, [pc, #240]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 8002966:	4a3d      	ldr	r2, [pc, #244]	; (8002a5c <HAL_UART_MspInit+0x2a4>)
 8002968:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800296a:	4b3b      	ldr	r3, [pc, #236]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 800296c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002970:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002972:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002978:	4b37      	ldr	r3, [pc, #220]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 800297a:	2200      	movs	r2, #0
 800297c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800297e:	4b36      	ldr	r3, [pc, #216]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 8002980:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002984:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002986:	4b34      	ldr	r3, [pc, #208]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 8002988:	2200      	movs	r2, #0
 800298a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800298c:	4b32      	ldr	r3, [pc, #200]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 800298e:	2200      	movs	r2, #0
 8002990:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002992:	4b31      	ldr	r3, [pc, #196]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 8002994:	2200      	movs	r2, #0
 8002996:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002998:	4b2f      	ldr	r3, [pc, #188]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 800299a:	2200      	movs	r2, #0
 800299c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800299e:	4b2e      	ldr	r3, [pc, #184]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80029a4:	482c      	ldr	r0, [pc, #176]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 80029a6:	f002 fb85 	bl	80050b4 <HAL_DMA_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80029b0:	f7ff fb78 	bl	80020a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a28      	ldr	r2, [pc, #160]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 80029b8:	639a      	str	r2, [r3, #56]	; 0x38
 80029ba:	4a27      	ldr	r2, [pc, #156]	; (8002a58 <HAL_UART_MspInit+0x2a0>)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80029c0:	4b27      	ldr	r3, [pc, #156]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 80029c2:	4a28      	ldr	r2, [pc, #160]	; (8002a64 <HAL_UART_MspInit+0x2ac>)
 80029c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80029c6:	4b26      	ldr	r3, [pc, #152]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 80029c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029cc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029ce:	4b24      	ldr	r3, [pc, #144]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 80029d0:	2240      	movs	r2, #64	; 0x40
 80029d2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d4:	4b22      	ldr	r3, [pc, #136]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029da:	4b21      	ldr	r3, [pc, #132]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 80029dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029e2:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029e8:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80029ee:	4b1c      	ldr	r3, [pc, #112]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029f4:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029fa:	4b19      	ldr	r3, [pc, #100]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002a00:	4817      	ldr	r0, [pc, #92]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 8002a02:	f002 fb57 	bl	80050b4 <HAL_DMA_Init>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8002a0c:	f7ff fb4a 	bl	80020a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 8002a14:	635a      	str	r2, [r3, #52]	; 0x34
 8002a16:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <HAL_UART_MspInit+0x2a8>)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2105      	movs	r1, #5
 8002a20:	2026      	movs	r0, #38	; 0x26
 8002a22:	f002 fb02 	bl	800502a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a26:	2026      	movs	r0, #38	; 0x26
 8002a28:	f002 fb1b 	bl	8005062 <HAL_NVIC_EnableIRQ>
}
 8002a2c:	bf00      	nop
 8002a2e:	3730      	adds	r7, #48	; 0x30
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40011000 	.word	0x40011000
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40020400 	.word	0x40020400
 8002a40:	20000748 	.word	0x20000748
 8002a44:	40026440 	.word	0x40026440
 8002a48:	200007a8 	.word	0x200007a8
 8002a4c:	400264b8 	.word	0x400264b8
 8002a50:	40004400 	.word	0x40004400
 8002a54:	40020000 	.word	0x40020000
 8002a58:	20000808 	.word	0x20000808
 8002a5c:	40026088 	.word	0x40026088
 8002a60:	20000868 	.word	0x20000868
 8002a64:	400260a0 	.word	0x400260a0

08002a68 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1d      	ldr	r2, [pc, #116]	; (8002aec <HAL_UART_MspDeInit+0x84>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d117      	bne.n	8002aaa <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <HAL_UART_MspDeInit+0x88>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <HAL_UART_MspDeInit+0x88>)
 8002a80:	f023 0310 	bic.w	r3, r3, #16
 8002a84:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, MODBUS_TX_Pin|MODBUS_RX_Pin);
 8002a86:	21c0      	movs	r1, #192	; 0xc0
 8002a88:	481a      	ldr	r0, [pc, #104]	; (8002af4 <HAL_UART_MspDeInit+0x8c>)
 8002a8a:	f003 f8f7 	bl	8005c7c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a92:	4618      	mov	r0, r3
 8002a94:	f002 fbbc 	bl	8005210 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f002 fbb7 	bl	8005210 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002aa2:	2025      	movs	r0, #37	; 0x25
 8002aa4:	f002 faeb 	bl	800507e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002aa8:	e01b      	b.n	8002ae2 <HAL_UART_MspDeInit+0x7a>
  else if(huart->Instance==USART2)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a12      	ldr	r2, [pc, #72]	; (8002af8 <HAL_UART_MspDeInit+0x90>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d116      	bne.n	8002ae2 <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <HAL_UART_MspDeInit+0x88>)
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <HAL_UART_MspDeInit+0x88>)
 8002aba:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002abe:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, SSI_TX_Pin|SSI_RX_Pin);
 8002ac0:	210c      	movs	r1, #12
 8002ac2:	480e      	ldr	r0, [pc, #56]	; (8002afc <HAL_UART_MspDeInit+0x94>)
 8002ac4:	f003 f8da 	bl	8005c7c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002acc:	4618      	mov	r0, r3
 8002ace:	f002 fb9f 	bl	8005210 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f002 fb9a 	bl	8005210 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002adc:	2026      	movs	r0, #38	; 0x26
 8002ade:	f002 face 	bl	800507e <HAL_NVIC_DisableIRQ>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40011000 	.word	0x40011000
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40020400 	.word	0x40020400
 8002af8:	40004400 	.word	0x40004400
 8002afc:	40020000 	.word	0x40020000

08002b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b04:	e7fe      	b.n	8002b04 <NMI_Handler+0x4>

08002b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b0a:	e7fe      	b.n	8002b0a <HardFault_Handler+0x4>

08002b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <MemManage_Handler+0x4>

08002b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b16:	e7fe      	b.n	8002b16 <BusFault_Handler+0x4>

08002b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <UsageFault_Handler+0x4>

08002b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b30:	f001 fd6a 	bl	8004608 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002b34:	f008 f88a 	bl	800ac4c <xTaskGetSchedulerState>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d001      	beq.n	8002b42 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002b3e:	f008 fe73 	bl	800b828 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b4c:	4802      	ldr	r0, [pc, #8]	; (8002b58 <DMA1_Stream5_IRQHandler+0x10>)
 8002b4e:	f002 fca7 	bl	80054a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000808 	.word	0x20000808

08002b5c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002b60:	4802      	ldr	r0, [pc, #8]	; (8002b6c <DMA1_Stream6_IRQHandler+0x10>)
 8002b62:	f002 fc9d 	bl	80054a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000868 	.word	0x20000868

08002b70 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b74:	4802      	ldr	r0, [pc, #8]	; (8002b80 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002b76:	f004 f959 	bl	8006e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	200005a0 	.word	0x200005a0

08002b84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_ADC_Start_DMA(&hadc1, ADC_rawdata, 4);
 8002b88:	2204      	movs	r2, #4
 8002b8a:	4908      	ldr	r1, [pc, #32]	; (8002bac <TIM3_IRQHandler+0x28>)
 8002b8c:	4808      	ldr	r0, [pc, #32]	; (8002bb0 <TIM3_IRQHandler+0x2c>)
 8002b8e:	f001 fd9f 	bl	80046d0 <HAL_ADC_Start_DMA>
	motor_encoder_read_position();
 8002b92:	f7ff fb15 	bl	80021c0 <motor_encoder_read_position>
	HAL_GPIO_WritePin(DISP_LATCH_GPIO_Port, DISP_LATCH_Pin, 1);
 8002b96:	2201      	movs	r2, #1
 8002b98:	2104      	movs	r1, #4
 8002b9a:	4806      	ldr	r0, [pc, #24]	; (8002bb4 <TIM3_IRQHandler+0x30>)
 8002b9c:	f003 f952 	bl	8005e44 <HAL_GPIO_WritePin>

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ba0:	4805      	ldr	r0, [pc, #20]	; (8002bb8 <TIM3_IRQHandler+0x34>)
 8002ba2:	f004 f943 	bl	8006e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200008fc 	.word	0x200008fc
 8002bb0:	200004f8 	.word	0x200004f8
 8002bb4:	40020400 	.word	0x40020400
 8002bb8:	20000630 	.word	0x20000630

08002bbc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
if(speed_setpoint_rpm!=0){
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <TIM4_IRQHandler+0x44>)
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	b21b      	sxth	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d015      	beq.n	8002bf6 <TIM4_IRQHandler+0x3a>
	torque_setpoint = PI_control(&speed_controller_data, speed_setpoint_rpm-filtered_speed);
 8002bca:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <TIM4_IRQHandler+0x44>)
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	b21b      	sxth	r3, r3
 8002bd0:	ee07 3a90 	vmov	s15, r3
 8002bd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <TIM4_IRQHandler+0x48>)
 8002bda:	edd3 7a00 	vldr	s15, [r3]
 8002bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be2:	eeb0 0a67 	vmov.f32	s0, s15
 8002be6:	4808      	ldr	r0, [pc, #32]	; (8002c08 <TIM4_IRQHandler+0x4c>)
 8002be8:	f7ff fbd8 	bl	800239c <PI_control>
 8002bec:	eef0 7a40 	vmov.f32	s15, s0
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <TIM4_IRQHandler+0x50>)
 8002bf2:	edc3 7a00 	vstr	s15, [r3]
}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002bf6:	4806      	ldr	r0, [pc, #24]	; (8002c10 <TIM4_IRQHandler+0x54>)
 8002bf8:	f004 f918 	bl	8006e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	2000090c 	.word	0x2000090c
 8002c04:	200009a4 	.word	0x200009a4
 8002c08:	20000084 	.word	0x20000084
 8002c0c:	20000928 	.word	0x20000928
 8002c10:	20000678 	.word	0x20000678

08002c14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c18:	4802      	ldr	r0, [pc, #8]	; (8002c24 <USART1_IRQHandler+0x10>)
 8002c1a:	f005 f98d 	bl	8007f38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200006c0 	.word	0x200006c0

08002c28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c2c:	4802      	ldr	r0, [pc, #8]	; (8002c38 <USART2_IRQHandler+0x10>)
 8002c2e:	f005 f983 	bl	8007f38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000704 	.word	0x20000704

08002c3c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	HAL_GPIO_WritePin(DISP_LATCH_GPIO_Port, DISP_LATCH_Pin, 0);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2104      	movs	r1, #4
 8002c46:	485b      	ldr	r0, [pc, #364]	; (8002db4 <DMA2_Stream0_IRQHandler+0x178>)
 8002c48:	f003 f8fc 	bl	8005e44 <HAL_GPIO_WritePin>
	if(zerocurrent_reading_loop_i<15){
 8002c4c:	4b5a      	ldr	r3, [pc, #360]	; (8002db8 <DMA2_Stream0_IRQHandler+0x17c>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b0e      	cmp	r3, #14
 8002c52:	d82f      	bhi.n	8002cb4 <DMA2_Stream0_IRQHandler+0x78>
				I_U_zerocurrentreading+=ADC_rawdata[0];
 8002c54:	4b59      	ldr	r3, [pc, #356]	; (8002dbc <DMA2_Stream0_IRQHandler+0x180>)
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	4b59      	ldr	r3, [pc, #356]	; (8002dc0 <DMA2_Stream0_IRQHandler+0x184>)
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	4413      	add	r3, r2
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	4b57      	ldr	r3, [pc, #348]	; (8002dc0 <DMA2_Stream0_IRQHandler+0x184>)
 8002c64:	801a      	strh	r2, [r3, #0]
				I_V_zerocurrentreading+=ADC_rawdata[1];
 8002c66:	4b55      	ldr	r3, [pc, #340]	; (8002dbc <DMA2_Stream0_IRQHandler+0x180>)
 8002c68:	885b      	ldrh	r3, [r3, #2]
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	4b55      	ldr	r3, [pc, #340]	; (8002dc4 <DMA2_Stream0_IRQHandler+0x188>)
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	4413      	add	r3, r2
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	4b53      	ldr	r3, [pc, #332]	; (8002dc4 <DMA2_Stream0_IRQHandler+0x188>)
 8002c76:	801a      	strh	r2, [r3, #0]
				if(zerocurrent_reading_loop_i==14){I_U_zerocurrentreading/=15;I_V_zerocurrentreading/=15;}
 8002c78:	4b4f      	ldr	r3, [pc, #316]	; (8002db8 <DMA2_Stream0_IRQHandler+0x17c>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b0e      	cmp	r3, #14
 8002c7e:	d111      	bne.n	8002ca4 <DMA2_Stream0_IRQHandler+0x68>
 8002c80:	4b4f      	ldr	r3, [pc, #316]	; (8002dc0 <DMA2_Stream0_IRQHandler+0x184>)
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	4a50      	ldr	r2, [pc, #320]	; (8002dc8 <DMA2_Stream0_IRQHandler+0x18c>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	08db      	lsrs	r3, r3, #3
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	4b4c      	ldr	r3, [pc, #304]	; (8002dc0 <DMA2_Stream0_IRQHandler+0x184>)
 8002c90:	801a      	strh	r2, [r3, #0]
 8002c92:	4b4c      	ldr	r3, [pc, #304]	; (8002dc4 <DMA2_Stream0_IRQHandler+0x188>)
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	4a4c      	ldr	r2, [pc, #304]	; (8002dc8 <DMA2_Stream0_IRQHandler+0x18c>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	08db      	lsrs	r3, r3, #3
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	4b48      	ldr	r3, [pc, #288]	; (8002dc4 <DMA2_Stream0_IRQHandler+0x188>)
 8002ca2:	801a      	strh	r2, [r3, #0]
				zerocurrent_reading_loop_i++;
 8002ca4:	4b44      	ldr	r3, [pc, #272]	; (8002db8 <DMA2_Stream0_IRQHandler+0x17c>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	4b42      	ldr	r3, [pc, #264]	; (8002db8 <DMA2_Stream0_IRQHandler+0x17c>)
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	f000 be8a 	b.w	80039c8 <DMA2_Stream0_IRQHandler+0xd8c>
			}else{

				if(ADC_rawdata[0]<40 || ADC_rawdata[1]<40 ||ADC_rawdata[0]>4000 || ADC_rawdata[1]>4000){
 8002cb4:	4b41      	ldr	r3, [pc, #260]	; (8002dbc <DMA2_Stream0_IRQHandler+0x180>)
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b27      	cmp	r3, #39	; 0x27
 8002cbc:	d910      	bls.n	8002ce0 <DMA2_Stream0_IRQHandler+0xa4>
 8002cbe:	4b3f      	ldr	r3, [pc, #252]	; (8002dbc <DMA2_Stream0_IRQHandler+0x180>)
 8002cc0:	885b      	ldrh	r3, [r3, #2]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b27      	cmp	r3, #39	; 0x27
 8002cc6:	d90b      	bls.n	8002ce0 <DMA2_Stream0_IRQHandler+0xa4>
 8002cc8:	4b3c      	ldr	r3, [pc, #240]	; (8002dbc <DMA2_Stream0_IRQHandler+0x180>)
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002cd2:	d805      	bhi.n	8002ce0 <DMA2_Stream0_IRQHandler+0xa4>
 8002cd4:	4b39      	ldr	r3, [pc, #228]	; (8002dbc <DMA2_Stream0_IRQHandler+0x180>)
 8002cd6:	885b      	ldrh	r3, [r3, #2]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002cde:	d90d      	bls.n	8002cfc <DMA2_Stream0_IRQHandler+0xc0>
					if(measurement_error_counter==1)inverter_error_trip(shortcircuit);
 8002ce0:	4b3a      	ldr	r3, [pc, #232]	; (8002dcc <DMA2_Stream0_IRQHandler+0x190>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d102      	bne.n	8002cee <DMA2_Stream0_IRQHandler+0xb2>
 8002ce8:	2003      	movs	r0, #3
 8002cea:	f7fe fb61 	bl	80013b0 <inverter_error_trip>
					measurement_error_counter++;
 8002cee:	4b37      	ldr	r3, [pc, #220]	; (8002dcc <DMA2_Stream0_IRQHandler+0x190>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4b35      	ldr	r3, [pc, #212]	; (8002dcc <DMA2_Stream0_IRQHandler+0x190>)
 8002cf8:	701a      	strb	r2, [r3, #0]
 8002cfa:	e002      	b.n	8002d02 <DMA2_Stream0_IRQHandler+0xc6>
				}else{measurement_error_counter=0;}
 8002cfc:	4b33      	ldr	r3, [pc, #204]	; (8002dcc <DMA2_Stream0_IRQHandler+0x190>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
				//DC link voltage
				U_DClink = (float)ADC_rawdata[2]*0.0250945f;
 8002d02:	4b2e      	ldr	r3, [pc, #184]	; (8002dbc <DMA2_Stream0_IRQHandler+0x180>)
 8002d04:	889b      	ldrh	r3, [r3, #4]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	ee07 3a90 	vmov	s15, r3
 8002d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d10:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002dd0 <DMA2_Stream0_IRQHandler+0x194>
 8002d14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d18:	4b2e      	ldr	r3, [pc, #184]	; (8002dd4 <DMA2_Stream0_IRQHandler+0x198>)
 8002d1a:	edc3 7a00 	vstr	s15, [r3]
				U_DClink_filtered = LowPassFilter(0.01f, U_DClink, &U_DClink_last);
 8002d1e:	4b2d      	ldr	r3, [pc, #180]	; (8002dd4 <DMA2_Stream0_IRQHandler+0x198>)
 8002d20:	edd3 7a00 	vldr	s15, [r3]
 8002d24:	482c      	ldr	r0, [pc, #176]	; (8002dd8 <DMA2_Stream0_IRQHandler+0x19c>)
 8002d26:	eef0 0a67 	vmov.f32	s1, s15
 8002d2a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8002ddc <DMA2_Stream0_IRQHandler+0x1a0>
 8002d2e:	f7fe fc17 	bl	8001560 <LowPassFilter>
 8002d32:	eef0 7a40 	vmov.f32	s15, s0
 8002d36:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <DMA2_Stream0_IRQHandler+0x1a4>)
 8002d38:	edc3 7a00 	vstr	s15, [r3]

				if(U_DClink_filtered>INVERTER_OVERVOLTAGE_LEVEL && OV_measurement_error_counter<2){if(OV_measurement_error_counter==1){inverter_error_trip(overvoltage);}OV_measurement_error_counter++;}else{OV_measurement_error_counter=0;}
 8002d3c:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <DMA2_Stream0_IRQHandler+0x1a4>)
 8002d3e:	edd3 7a00 	vldr	s15, [r3]
 8002d42:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002de4 <DMA2_Stream0_IRQHandler+0x1a8>
 8002d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4e:	dd11      	ble.n	8002d74 <DMA2_Stream0_IRQHandler+0x138>
 8002d50:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <DMA2_Stream0_IRQHandler+0x1ac>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d80d      	bhi.n	8002d74 <DMA2_Stream0_IRQHandler+0x138>
 8002d58:	4b23      	ldr	r3, [pc, #140]	; (8002de8 <DMA2_Stream0_IRQHandler+0x1ac>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d102      	bne.n	8002d66 <DMA2_Stream0_IRQHandler+0x12a>
 8002d60:	2002      	movs	r0, #2
 8002d62:	f7fe fb25 	bl	80013b0 <inverter_error_trip>
 8002d66:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <DMA2_Stream0_IRQHandler+0x1ac>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <DMA2_Stream0_IRQHandler+0x1ac>)
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	e002      	b.n	8002d7a <DMA2_Stream0_IRQHandler+0x13e>
 8002d74:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <DMA2_Stream0_IRQHandler+0x1ac>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	701a      	strb	r2, [r3, #0]
				if(U_DClink_filtered<INVERTER_UNDERVOLTAGE_LEVEL && UV_measurement_error_counter<2){if(UV_measurement_error_counter==1){inverter_error_trip(undervoltage);}UV_measurement_error_counter++;}else{UV_measurement_error_counter=0;} //2 measurements under a treshold must happen in a row
 8002d7a:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <DMA2_Stream0_IRQHandler+0x1a4>)
 8002d7c:	edd3 7a00 	vldr	s15, [r3]
 8002d80:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8c:	d530      	bpl.n	8002df0 <DMA2_Stream0_IRQHandler+0x1b4>
 8002d8e:	4b17      	ldr	r3, [pc, #92]	; (8002dec <DMA2_Stream0_IRQHandler+0x1b0>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d82c      	bhi.n	8002df0 <DMA2_Stream0_IRQHandler+0x1b4>
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <DMA2_Stream0_IRQHandler+0x1b0>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d102      	bne.n	8002da4 <DMA2_Stream0_IRQHandler+0x168>
 8002d9e:	2001      	movs	r0, #1
 8002da0:	f7fe fb06 	bl	80013b0 <inverter_error_trip>
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <DMA2_Stream0_IRQHandler+0x1b0>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	3301      	adds	r3, #1
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <DMA2_Stream0_IRQHandler+0x1b0>)
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	e021      	b.n	8002df6 <DMA2_Stream0_IRQHandler+0x1ba>
 8002db2:	bf00      	nop
 8002db4:	40020400 	.word	0x40020400
 8002db8:	2000092c 	.word	0x2000092c
 8002dbc:	200008fc 	.word	0x200008fc
 8002dc0:	2000092e 	.word	0x2000092e
 8002dc4:	20000930 	.word	0x20000930
 8002dc8:	88888889 	.word	0x88888889
 8002dcc:	20000924 	.word	0x20000924
 8002dd0:	3ccd92fb 	.word	0x3ccd92fb
 8002dd4:	20000918 	.word	0x20000918
 8002dd8:	2000091c 	.word	0x2000091c
 8002ddc:	3c23d70a 	.word	0x3c23d70a
 8002de0:	20000920 	.word	0x20000920
 8002de4:	420c0000 	.word	0x420c0000
 8002de8:	20000927 	.word	0x20000927
 8002dec:	20000926 	.word	0x20000926
 8002df0:	4bb3      	ldr	r3, [pc, #716]	; (80030c0 <DMA2_Stream0_IRQHandler+0x484>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
				modbus_registers_buffer[14] = (uint16_t)(U_DClink_filtered*10.0f);
 8002df6:	4bb3      	ldr	r3, [pc, #716]	; (80030c4 <DMA2_Stream0_IRQHandler+0x488>)
 8002df8:	edd3 7a00 	vldr	s15, [r3]
 8002dfc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e08:	ee17 3a90 	vmov	r3, s15
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	4bae      	ldr	r3, [pc, #696]	; (80030c8 <DMA2_Stream0_IRQHandler+0x48c>)
 8002e10:	839a      	strh	r2, [r3, #28]
				//current calculation
				I_U_raw=ADC_rawdata[0]-I_U_zerocurrentreading;
 8002e12:	4bae      	ldr	r3, [pc, #696]	; (80030cc <DMA2_Stream0_IRQHandler+0x490>)
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	4bad      	ldr	r3, [pc, #692]	; (80030d0 <DMA2_Stream0_IRQHandler+0x494>)
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	b21a      	sxth	r2, r3
 8002e22:	4bac      	ldr	r3, [pc, #688]	; (80030d4 <DMA2_Stream0_IRQHandler+0x498>)
 8002e24:	801a      	strh	r2, [r3, #0]
				I_V_raw=ADC_rawdata[1]-I_V_zerocurrentreading;
 8002e26:	4ba9      	ldr	r3, [pc, #676]	; (80030cc <DMA2_Stream0_IRQHandler+0x490>)
 8002e28:	885b      	ldrh	r3, [r3, #2]
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	4baa      	ldr	r3, [pc, #680]	; (80030d8 <DMA2_Stream0_IRQHandler+0x49c>)
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	b21a      	sxth	r2, r3
 8002e36:	4ba9      	ldr	r3, [pc, #676]	; (80030dc <DMA2_Stream0_IRQHandler+0x4a0>)
 8002e38:	801a      	strh	r2, [r3, #0]
				I_U=(float)I_U_raw*CURRENT_SENSE_RATIO;
 8002e3a:	4ba6      	ldr	r3, [pc, #664]	; (80030d4 <DMA2_Stream0_IRQHandler+0x498>)
 8002e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e40:	ee07 3a90 	vmov	s15, r3
 8002e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e48:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 80030e0 <DMA2_Stream0_IRQHandler+0x4a4>
 8002e4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e50:	4ba4      	ldr	r3, [pc, #656]	; (80030e4 <DMA2_Stream0_IRQHandler+0x4a8>)
 8002e52:	edc3 7a00 	vstr	s15, [r3]
				I_V=(float)I_V_raw*CURRENT_SENSE_RATIO;
 8002e56:	4ba1      	ldr	r3, [pc, #644]	; (80030dc <DMA2_Stream0_IRQHandler+0x4a0>)
 8002e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e5c:	ee07 3a90 	vmov	s15, r3
 8002e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e64:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80030e0 <DMA2_Stream0_IRQHandler+0x4a4>
 8002e68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e6c:	4b9e      	ldr	r3, [pc, #632]	; (80030e8 <DMA2_Stream0_IRQHandler+0x4ac>)
 8002e6e:	edc3 7a00 	vstr	s15, [r3]
				I_W=-I_U-I_V;
 8002e72:	4b9c      	ldr	r3, [pc, #624]	; (80030e4 <DMA2_Stream0_IRQHandler+0x4a8>)
 8002e74:	edd3 7a00 	vldr	s15, [r3]
 8002e78:	eeb1 7a67 	vneg.f32	s14, s15
 8002e7c:	4b9a      	ldr	r3, [pc, #616]	; (80030e8 <DMA2_Stream0_IRQHandler+0x4ac>)
 8002e7e:	edd3 7a00 	vldr	s15, [r3]
 8002e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e86:	4b99      	ldr	r3, [pc, #612]	; (80030ec <DMA2_Stream0_IRQHandler+0x4b0>)
 8002e88:	edc3 7a00 	vstr	s15, [r3]
				//RMS current calculation loop

				rms_count++;
 8002e8c:	4b98      	ldr	r3, [pc, #608]	; (80030f0 <DMA2_Stream0_IRQHandler+0x4b4>)
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	3301      	adds	r3, #1
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	4b96      	ldr	r3, [pc, #600]	; (80030f0 <DMA2_Stream0_IRQHandler+0x4b4>)
 8002e98:	801a      	strh	r2, [r3, #0]
				I_U_square_sum+=(I_U*I_U);
 8002e9a:	4b92      	ldr	r3, [pc, #584]	; (80030e4 <DMA2_Stream0_IRQHandler+0x4a8>)
 8002e9c:	ed93 7a00 	vldr	s14, [r3]
 8002ea0:	4b90      	ldr	r3, [pc, #576]	; (80030e4 <DMA2_Stream0_IRQHandler+0x4a8>)
 8002ea2:	edd3 7a00 	vldr	s15, [r3]
 8002ea6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eaa:	4b92      	ldr	r3, [pc, #584]	; (80030f4 <DMA2_Stream0_IRQHandler+0x4b8>)
 8002eac:	edd3 7a00 	vldr	s15, [r3]
 8002eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb4:	4b8f      	ldr	r3, [pc, #572]	; (80030f4 <DMA2_Stream0_IRQHandler+0x4b8>)
 8002eb6:	edc3 7a00 	vstr	s15, [r3]
				I_V_square_sum+=(I_V*I_V);
 8002eba:	4b8b      	ldr	r3, [pc, #556]	; (80030e8 <DMA2_Stream0_IRQHandler+0x4ac>)
 8002ebc:	ed93 7a00 	vldr	s14, [r3]
 8002ec0:	4b89      	ldr	r3, [pc, #548]	; (80030e8 <DMA2_Stream0_IRQHandler+0x4ac>)
 8002ec2:	edd3 7a00 	vldr	s15, [r3]
 8002ec6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eca:	4b8b      	ldr	r3, [pc, #556]	; (80030f8 <DMA2_Stream0_IRQHandler+0x4bc>)
 8002ecc:	edd3 7a00 	vldr	s15, [r3]
 8002ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed4:	4b88      	ldr	r3, [pc, #544]	; (80030f8 <DMA2_Stream0_IRQHandler+0x4bc>)
 8002ed6:	edc3 7a00 	vstr	s15, [r3]
				I_W_square_sum+=(I_W*I_W);
 8002eda:	4b84      	ldr	r3, [pc, #528]	; (80030ec <DMA2_Stream0_IRQHandler+0x4b0>)
 8002edc:	ed93 7a00 	vldr	s14, [r3]
 8002ee0:	4b82      	ldr	r3, [pc, #520]	; (80030ec <DMA2_Stream0_IRQHandler+0x4b0>)
 8002ee2:	edd3 7a00 	vldr	s15, [r3]
 8002ee6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eea:	4b84      	ldr	r3, [pc, #528]	; (80030fc <DMA2_Stream0_IRQHandler+0x4c0>)
 8002eec:	edd3 7a00 	vldr	s15, [r3]
 8002ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef4:	4b81      	ldr	r3, [pc, #516]	; (80030fc <DMA2_Stream0_IRQHandler+0x4c0>)
 8002ef6:	edc3 7a00 	vstr	s15, [r3]

				if(rms_count>CURRENT_RMS_SAMPLING_COUNT){
 8002efa:	4b7d      	ldr	r3, [pc, #500]	; (80030f0 <DMA2_Stream0_IRQHandler+0x4b4>)
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f04:	f240 808e 	bls.w	8003024 <DMA2_Stream0_IRQHandler+0x3e8>
					I_U_RMS=sqrt(I_U_square_sum/(float)rms_count);
 8002f08:	4b7a      	ldr	r3, [pc, #488]	; (80030f4 <DMA2_Stream0_IRQHandler+0x4b8>)
 8002f0a:	ed93 7a00 	vldr	s14, [r3]
 8002f0e:	4b78      	ldr	r3, [pc, #480]	; (80030f0 <DMA2_Stream0_IRQHandler+0x4b4>)
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	ee07 3a90 	vmov	s15, r3
 8002f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f1c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f20:	ee16 0a90 	vmov	r0, s13
 8002f24:	f7fd fac0 	bl	80004a8 <__aeabi_f2d>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	ec43 2b10 	vmov	d0, r2, r3
 8002f30:	f009 f882 	bl	800c038 <sqrt>
 8002f34:	ec53 2b10 	vmov	r2, r3, d0
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	f7fd fdbc 	bl	8000ab8 <__aeabi_d2f>
 8002f40:	4603      	mov	r3, r0
 8002f42:	4a6f      	ldr	r2, [pc, #444]	; (8003100 <DMA2_Stream0_IRQHandler+0x4c4>)
 8002f44:	6013      	str	r3, [r2, #0]
					I_V_RMS=sqrt(I_V_square_sum/(float)rms_count);
 8002f46:	4b6c      	ldr	r3, [pc, #432]	; (80030f8 <DMA2_Stream0_IRQHandler+0x4bc>)
 8002f48:	ed93 7a00 	vldr	s14, [r3]
 8002f4c:	4b68      	ldr	r3, [pc, #416]	; (80030f0 <DMA2_Stream0_IRQHandler+0x4b4>)
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	ee07 3a90 	vmov	s15, r3
 8002f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f5e:	ee16 0a90 	vmov	r0, s13
 8002f62:	f7fd faa1 	bl	80004a8 <__aeabi_f2d>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	ec43 2b10 	vmov	d0, r2, r3
 8002f6e:	f009 f863 	bl	800c038 <sqrt>
 8002f72:	ec53 2b10 	vmov	r2, r3, d0
 8002f76:	4610      	mov	r0, r2
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f7fd fd9d 	bl	8000ab8 <__aeabi_d2f>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4a60      	ldr	r2, [pc, #384]	; (8003104 <DMA2_Stream0_IRQHandler+0x4c8>)
 8002f82:	6013      	str	r3, [r2, #0]
					I_W_RMS=sqrt(I_W_square_sum/(float)rms_count);
 8002f84:	4b5d      	ldr	r3, [pc, #372]	; (80030fc <DMA2_Stream0_IRQHandler+0x4c0>)
 8002f86:	ed93 7a00 	vldr	s14, [r3]
 8002f8a:	4b59      	ldr	r3, [pc, #356]	; (80030f0 <DMA2_Stream0_IRQHandler+0x4b4>)
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	ee07 3a90 	vmov	s15, r3
 8002f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f98:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f9c:	ee16 0a90 	vmov	r0, s13
 8002fa0:	f7fd fa82 	bl	80004a8 <__aeabi_f2d>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	ec43 2b10 	vmov	d0, r2, r3
 8002fac:	f009 f844 	bl	800c038 <sqrt>
 8002fb0:	ec53 2b10 	vmov	r2, r3, d0
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	f7fd fd7e 	bl	8000ab8 <__aeabi_d2f>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	4a52      	ldr	r2, [pc, #328]	; (8003108 <DMA2_Stream0_IRQHandler+0x4cc>)
 8002fc0:	6013      	str	r3, [r2, #0]
					I_out=(I_U_RMS+I_V_RMS+I_W_RMS)/3.0f;
 8002fc2:	4b4f      	ldr	r3, [pc, #316]	; (8003100 <DMA2_Stream0_IRQHandler+0x4c4>)
 8002fc4:	ed93 7a00 	vldr	s14, [r3]
 8002fc8:	4b4e      	ldr	r3, [pc, #312]	; (8003104 <DMA2_Stream0_IRQHandler+0x4c8>)
 8002fca:	edd3 7a00 	vldr	s15, [r3]
 8002fce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fd2:	4b4d      	ldr	r3, [pc, #308]	; (8003108 <DMA2_Stream0_IRQHandler+0x4cc>)
 8002fd4:	edd3 7a00 	vldr	s15, [r3]
 8002fd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fdc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002fe0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fe4:	4b49      	ldr	r3, [pc, #292]	; (800310c <DMA2_Stream0_IRQHandler+0x4d0>)
 8002fe6:	edc3 7a00 	vstr	s15, [r3]
					modbus_registers_buffer[10]=(uint16_t)(I_out*100.0f);
 8002fea:	4b48      	ldr	r3, [pc, #288]	; (800310c <DMA2_Stream0_IRQHandler+0x4d0>)
 8002fec:	edd3 7a00 	vldr	s15, [r3]
 8002ff0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003110 <DMA2_Stream0_IRQHandler+0x4d4>
 8002ff4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ffc:	ee17 3a90 	vmov	r3, s15
 8003000:	b29a      	uxth	r2, r3
 8003002:	4b31      	ldr	r3, [pc, #196]	; (80030c8 <DMA2_Stream0_IRQHandler+0x48c>)
 8003004:	829a      	strh	r2, [r3, #20]
					rms_count=0;I_U_square_sum=0.0f;I_V_square_sum=0.0f;I_W_square_sum=0.0f;}
 8003006:	4b3a      	ldr	r3, [pc, #232]	; (80030f0 <DMA2_Stream0_IRQHandler+0x4b4>)
 8003008:	2200      	movs	r2, #0
 800300a:	801a      	strh	r2, [r3, #0]
 800300c:	4b39      	ldr	r3, [pc, #228]	; (80030f4 <DMA2_Stream0_IRQHandler+0x4b8>)
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	4b38      	ldr	r3, [pc, #224]	; (80030f8 <DMA2_Stream0_IRQHandler+0x4bc>)
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	4b37      	ldr	r3, [pc, #220]	; (80030fc <DMA2_Stream0_IRQHandler+0x4c0>)
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

				if((I_U>INVERTER_OVERCURRENT_TRIP_LEVEL || I_U < (-INVERTER_OVERCURRENT_TRIP_LEVEL) || I_V>INVERTER_OVERCURRENT_TRIP_LEVEL || I_V < (-INVERTER_OVERCURRENT_TRIP_LEVEL) || I_W > INVERTER_OVERCURRENT_TRIP_LEVEL || I_W <(-INVERTER_OVERCURRENT_TRIP_LEVEL)) && OC_measurement_error_counter<3){
 8003024:	4b2f      	ldr	r3, [pc, #188]	; (80030e4 <DMA2_Stream0_IRQHandler+0x4a8>)
 8003026:	edd3 7a00 	vldr	s15, [r3]
 800302a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800302e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003036:	dc31      	bgt.n	800309c <DMA2_Stream0_IRQHandler+0x460>
 8003038:	4b2a      	ldr	r3, [pc, #168]	; (80030e4 <DMA2_Stream0_IRQHandler+0x4a8>)
 800303a:	edd3 7a00 	vldr	s15, [r3]
 800303e:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8003042:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304a:	d427      	bmi.n	800309c <DMA2_Stream0_IRQHandler+0x460>
 800304c:	4b26      	ldr	r3, [pc, #152]	; (80030e8 <DMA2_Stream0_IRQHandler+0x4ac>)
 800304e:	edd3 7a00 	vldr	s15, [r3]
 8003052:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003056:	eef4 7ac7 	vcmpe.f32	s15, s14
 800305a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305e:	dc1d      	bgt.n	800309c <DMA2_Stream0_IRQHandler+0x460>
 8003060:	4b21      	ldr	r3, [pc, #132]	; (80030e8 <DMA2_Stream0_IRQHandler+0x4ac>)
 8003062:	edd3 7a00 	vldr	s15, [r3]
 8003066:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 800306a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800306e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003072:	d413      	bmi.n	800309c <DMA2_Stream0_IRQHandler+0x460>
 8003074:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <DMA2_Stream0_IRQHandler+0x4b0>)
 8003076:	edd3 7a00 	vldr	s15, [r3]
 800307a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800307e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003086:	dc09      	bgt.n	800309c <DMA2_Stream0_IRQHandler+0x460>
 8003088:	4b18      	ldr	r3, [pc, #96]	; (80030ec <DMA2_Stream0_IRQHandler+0x4b0>)
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8003092:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309a:	d53d      	bpl.n	8003118 <DMA2_Stream0_IRQHandler+0x4dc>
 800309c:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <DMA2_Stream0_IRQHandler+0x4d8>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d839      	bhi.n	8003118 <DMA2_Stream0_IRQHandler+0x4dc>
					OC_measurement_error_counter++;
 80030a4:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <DMA2_Stream0_IRQHandler+0x4d8>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	3301      	adds	r3, #1
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	4b19      	ldr	r3, [pc, #100]	; (8003114 <DMA2_Stream0_IRQHandler+0x4d8>)
 80030ae:	701a      	strb	r2, [r3, #0]
					if(OC_measurement_error_counter==2){inverter_error_trip(overcurrent);}
 80030b0:	4b18      	ldr	r3, [pc, #96]	; (8003114 <DMA2_Stream0_IRQHandler+0x4d8>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d132      	bne.n	800311e <DMA2_Stream0_IRQHandler+0x4e2>
 80030b8:	2004      	movs	r0, #4
 80030ba:	f7fe f979 	bl	80013b0 <inverter_error_trip>
 80030be:	e02e      	b.n	800311e <DMA2_Stream0_IRQHandler+0x4e2>
 80030c0:	20000926 	.word	0x20000926
 80030c4:	20000920 	.word	0x20000920
 80030c8:	20000000 	.word	0x20000000
 80030cc:	200008fc 	.word	0x200008fc
 80030d0:	2000092e 	.word	0x2000092e
 80030d4:	20000932 	.word	0x20000932
 80030d8:	20000930 	.word	0x20000930
 80030dc:	20000934 	.word	0x20000934
 80030e0:	3c88018c 	.word	0x3c88018c
 80030e4:	20000938 	.word	0x20000938
 80030e8:	2000093c 	.word	0x2000093c
 80030ec:	20000940 	.word	0x20000940
 80030f0:	20000944 	.word	0x20000944
 80030f4:	20000948 	.word	0x20000948
 80030f8:	2000094c 	.word	0x2000094c
 80030fc:	20000950 	.word	0x20000950
 8003100:	20000954 	.word	0x20000954
 8003104:	20000958 	.word	0x20000958
 8003108:	2000095c 	.word	0x2000095c
 800310c:	20000960 	.word	0x20000960
 8003110:	42c80000 	.word	0x42c80000
 8003114:	20000925 	.word	0x20000925
				}else{OC_measurement_error_counter=0;}
 8003118:	4bbc      	ldr	r3, [pc, #752]	; (800340c <DMA2_Stream0_IRQHandler+0x7d0>)
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]

				if(motor_feedback_type==abz_encoder){
 800311e:	4bbc      	ldr	r3, [pc, #752]	; (8003410 <DMA2_Stream0_IRQHandler+0x7d4>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b01      	cmp	r3, #1
 8003124:	f040 8106 	bne.w	8003334 <DMA2_Stream0_IRQHandler+0x6f8>
					if(encoder_positioned){
 8003128:	4bba      	ldr	r3, [pc, #744]	; (8003414 <DMA2_Stream0_IRQHandler+0x7d8>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 8101 	beq.w	8003334 <DMA2_Stream0_IRQHandler+0x6f8>
						if(TIM2->CNT <5000){encoder_actual_position=5000-TIM2->CNT;}
 8003132:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	f241 3287 	movw	r2, #4999	; 0x1387
 800313c:	4293      	cmp	r3, r2
 800313e:	d80b      	bhi.n	8003158 <DMA2_Stream0_IRQHandler+0x51c>
 8003140:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	b29b      	uxth	r3, r3
 8003148:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 800314c:	3308      	adds	r3, #8
 800314e:	b29b      	uxth	r3, r3
 8003150:	b21a      	sxth	r2, r3
 8003152:	4bb1      	ldr	r3, [pc, #708]	; (8003418 <DMA2_Stream0_IRQHandler+0x7dc>)
 8003154:	801a      	strh	r2, [r3, #0]
 8003156:	e00a      	b.n	800316e <DMA2_Stream0_IRQHandler+0x532>
						else{encoder_actual_position=10000-TIM2->CNT;}
 8003158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	b29b      	uxth	r3, r3
 8003160:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8003164:	3310      	adds	r3, #16
 8003166:	b29b      	uxth	r3, r3
 8003168:	b21a      	sxth	r2, r3
 800316a:	4bab      	ldr	r3, [pc, #684]	; (8003418 <DMA2_Stream0_IRQHandler+0x7dc>)
 800316c:	801a      	strh	r2, [r3, #0]
						modbus_registers_buffer[11]=encoder_actual_position;
 800316e:	4baa      	ldr	r3, [pc, #680]	; (8003418 <DMA2_Stream0_IRQHandler+0x7dc>)
 8003170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003174:	b29a      	uxth	r2, r3
 8003176:	4ba9      	ldr	r3, [pc, #676]	; (800341c <DMA2_Stream0_IRQHandler+0x7e0>)
 8003178:	82da      	strh	r2, [r3, #22]
						int16_t corrected_encoder_position=((encoder_actual_position % 1000) - encoder_correction);
 800317a:	4ba7      	ldr	r3, [pc, #668]	; (8003418 <DMA2_Stream0_IRQHandler+0x7dc>)
 800317c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003180:	4aa7      	ldr	r2, [pc, #668]	; (8003420 <DMA2_Stream0_IRQHandler+0x7e4>)
 8003182:	fb82 1203 	smull	r1, r2, r2, r3
 8003186:	1191      	asrs	r1, r2, #6
 8003188:	17da      	asrs	r2, r3, #31
 800318a:	1a8a      	subs	r2, r1, r2
 800318c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003190:	fb01 f202 	mul.w	r2, r1, r2
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	b21b      	sxth	r3, r3
 8003198:	b29a      	uxth	r2, r3
 800319a:	4ba2      	ldr	r3, [pc, #648]	; (8003424 <DMA2_Stream0_IRQHandler+0x7e8>)
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	80fb      	strh	r3, [r7, #6]
						if(corrected_encoder_position<0){corrected_encoder_position+=1000;}
 80031a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	da04      	bge.n	80031b6 <DMA2_Stream0_IRQHandler+0x57a>
 80031ac:	88fb      	ldrh	r3, [r7, #6]
 80031ae:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	80fb      	strh	r3, [r7, #6]
						actual_electric_angle=(float)(corrected_encoder_position)*0.36f;
 80031b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031c2:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8003428 <DMA2_Stream0_IRQHandler+0x7ec>
 80031c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031ca:	4b98      	ldr	r3, [pc, #608]	; (800342c <DMA2_Stream0_IRQHandler+0x7f0>)
 80031cc:	edc3 7a00 	vstr	s15, [r3]
						if(actual_electric_angle-electric_angle>180.0f){actual_torque_angle=(actual_electric_angle-electric_angle) - 360.0f;}
 80031d0:	4b96      	ldr	r3, [pc, #600]	; (800342c <DMA2_Stream0_IRQHandler+0x7f0>)
 80031d2:	ed93 7a00 	vldr	s14, [r3]
 80031d6:	4b96      	ldr	r3, [pc, #600]	; (8003430 <DMA2_Stream0_IRQHandler+0x7f4>)
 80031d8:	edd3 7a00 	vldr	s15, [r3]
 80031dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e0:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8003434 <DMA2_Stream0_IRQHandler+0x7f8>
 80031e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	dd0f      	ble.n	800320e <DMA2_Stream0_IRQHandler+0x5d2>
 80031ee:	4b8f      	ldr	r3, [pc, #572]	; (800342c <DMA2_Stream0_IRQHandler+0x7f0>)
 80031f0:	ed93 7a00 	vldr	s14, [r3]
 80031f4:	4b8e      	ldr	r3, [pc, #568]	; (8003430 <DMA2_Stream0_IRQHandler+0x7f4>)
 80031f6:	edd3 7a00 	vldr	s15, [r3]
 80031fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031fe:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8003438 <DMA2_Stream0_IRQHandler+0x7fc>
 8003202:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003206:	4b8d      	ldr	r3, [pc, #564]	; (800343c <DMA2_Stream0_IRQHandler+0x800>)
 8003208:	edc3 7a00 	vstr	s15, [r3]
 800320c:	e029      	b.n	8003262 <DMA2_Stream0_IRQHandler+0x626>
						else if(actual_electric_angle-electric_angle<(-180.0f)){actual_torque_angle=actual_electric_angle-electric_angle + 360.0f;}
 800320e:	4b87      	ldr	r3, [pc, #540]	; (800342c <DMA2_Stream0_IRQHandler+0x7f0>)
 8003210:	ed93 7a00 	vldr	s14, [r3]
 8003214:	4b86      	ldr	r3, [pc, #536]	; (8003430 <DMA2_Stream0_IRQHandler+0x7f4>)
 8003216:	edd3 7a00 	vldr	s15, [r3]
 800321a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800321e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8003440 <DMA2_Stream0_IRQHandler+0x804>
 8003222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322a:	d50f      	bpl.n	800324c <DMA2_Stream0_IRQHandler+0x610>
 800322c:	4b7f      	ldr	r3, [pc, #508]	; (800342c <DMA2_Stream0_IRQHandler+0x7f0>)
 800322e:	ed93 7a00 	vldr	s14, [r3]
 8003232:	4b7f      	ldr	r3, [pc, #508]	; (8003430 <DMA2_Stream0_IRQHandler+0x7f4>)
 8003234:	edd3 7a00 	vldr	s15, [r3]
 8003238:	ee77 7a67 	vsub.f32	s15, s14, s15
 800323c:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8003438 <DMA2_Stream0_IRQHandler+0x7fc>
 8003240:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003244:	4b7d      	ldr	r3, [pc, #500]	; (800343c <DMA2_Stream0_IRQHandler+0x800>)
 8003246:	edc3 7a00 	vstr	s15, [r3]
 800324a:	e00a      	b.n	8003262 <DMA2_Stream0_IRQHandler+0x626>
						else{actual_torque_angle=actual_electric_angle-electric_angle;}
 800324c:	4b77      	ldr	r3, [pc, #476]	; (800342c <DMA2_Stream0_IRQHandler+0x7f0>)
 800324e:	ed93 7a00 	vldr	s14, [r3]
 8003252:	4b77      	ldr	r3, [pc, #476]	; (8003430 <DMA2_Stream0_IRQHandler+0x7f4>)
 8003254:	edd3 7a00 	vldr	s15, [r3]
 8003258:	ee77 7a67 	vsub.f32	s15, s14, s15
 800325c:	4b77      	ldr	r3, [pc, #476]	; (800343c <DMA2_Stream0_IRQHandler+0x800>)
 800325e:	edc3 7a00 	vstr	s15, [r3]
						modbus_registers_buffer[12]=(int16_t)actual_torque_angle;//write calculated value to modbus array
 8003262:	4b76      	ldr	r3, [pc, #472]	; (800343c <DMA2_Stream0_IRQHandler+0x800>)
 8003264:	edd3 7a00 	vldr	s15, [r3]
 8003268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800326c:	ee17 3a90 	vmov	r3, s15
 8003270:	b21b      	sxth	r3, r3
 8003272:	b29a      	uxth	r2, r3
 8003274:	4b69      	ldr	r3, [pc, #420]	; (800341c <DMA2_Stream0_IRQHandler+0x7e0>)
 8003276:	831a      	strh	r2, [r3, #24]
						speed_measurement_loop_i++;
 8003278:	4b72      	ldr	r3, [pc, #456]	; (8003444 <DMA2_Stream0_IRQHandler+0x808>)
 800327a:	edd3 7a00 	vldr	s15, [r3]
 800327e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003282:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003286:	4b6f      	ldr	r3, [pc, #444]	; (8003444 <DMA2_Stream0_IRQHandler+0x808>)
 8003288:	edc3 7a00 	vstr	s15, [r3]
						if(speed_measurement_loop_i>=30){
 800328c:	4b6d      	ldr	r3, [pc, #436]	; (8003444 <DMA2_Stream0_IRQHandler+0x808>)
 800328e:	edd3 7a00 	vldr	s15, [r3]
 8003292:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800329a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329e:	db49      	blt.n	8003334 <DMA2_Stream0_IRQHandler+0x6f8>
							speed=(actual_electric_angle-last_actual_electric_angle)*17.77777f; //speed(rpm) = ((x(deg)/polepairs)/360deg)/(0,001875(s)/60s)
 80032a0:	4b62      	ldr	r3, [pc, #392]	; (800342c <DMA2_Stream0_IRQHandler+0x7f0>)
 80032a2:	ed93 7a00 	vldr	s14, [r3]
 80032a6:	4b68      	ldr	r3, [pc, #416]	; (8003448 <DMA2_Stream0_IRQHandler+0x80c>)
 80032a8:	edd3 7a00 	vldr	s15, [r3]
 80032ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032b0:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800344c <DMA2_Stream0_IRQHandler+0x810>
 80032b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032b8:	4b65      	ldr	r3, [pc, #404]	; (8003450 <DMA2_Stream0_IRQHandler+0x814>)
 80032ba:	edc3 7a00 	vstr	s15, [r3]
							if(speed>3200){speed-=6400;}if(speed<(-3200)){speed+=6400;}
 80032be:	4b64      	ldr	r3, [pc, #400]	; (8003450 <DMA2_Stream0_IRQHandler+0x814>)
 80032c0:	edd3 7a00 	vldr	s15, [r3]
 80032c4:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8003454 <DMA2_Stream0_IRQHandler+0x818>
 80032c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d0:	dd09      	ble.n	80032e6 <DMA2_Stream0_IRQHandler+0x6aa>
 80032d2:	4b5f      	ldr	r3, [pc, #380]	; (8003450 <DMA2_Stream0_IRQHandler+0x814>)
 80032d4:	edd3 7a00 	vldr	s15, [r3]
 80032d8:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8003458 <DMA2_Stream0_IRQHandler+0x81c>
 80032dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032e0:	4b5b      	ldr	r3, [pc, #364]	; (8003450 <DMA2_Stream0_IRQHandler+0x814>)
 80032e2:	edc3 7a00 	vstr	s15, [r3]
 80032e6:	4b5a      	ldr	r3, [pc, #360]	; (8003450 <DMA2_Stream0_IRQHandler+0x814>)
 80032e8:	edd3 7a00 	vldr	s15, [r3]
 80032ec:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800345c <DMA2_Stream0_IRQHandler+0x820>
 80032f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f8:	d509      	bpl.n	800330e <DMA2_Stream0_IRQHandler+0x6d2>
 80032fa:	4b55      	ldr	r3, [pc, #340]	; (8003450 <DMA2_Stream0_IRQHandler+0x814>)
 80032fc:	edd3 7a00 	vldr	s15, [r3]
 8003300:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8003458 <DMA2_Stream0_IRQHandler+0x81c>
 8003304:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003308:	4b51      	ldr	r3, [pc, #324]	; (8003450 <DMA2_Stream0_IRQHandler+0x814>)
 800330a:	edc3 7a00 	vstr	s15, [r3]
							modbus_registers_buffer[13]=(int16_t)(filtered_speed);
 800330e:	4b54      	ldr	r3, [pc, #336]	; (8003460 <DMA2_Stream0_IRQHandler+0x824>)
 8003310:	edd3 7a00 	vldr	s15, [r3]
 8003314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003318:	ee17 3a90 	vmov	r3, s15
 800331c:	b21b      	sxth	r3, r3
 800331e:	b29a      	uxth	r2, r3
 8003320:	4b3e      	ldr	r3, [pc, #248]	; (800341c <DMA2_Stream0_IRQHandler+0x7e0>)
 8003322:	835a      	strh	r2, [r3, #26]
							last_actual_electric_angle = actual_electric_angle;
 8003324:	4b41      	ldr	r3, [pc, #260]	; (800342c <DMA2_Stream0_IRQHandler+0x7f0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a47      	ldr	r2, [pc, #284]	; (8003448 <DMA2_Stream0_IRQHandler+0x80c>)
 800332a:	6013      	str	r3, [r2, #0]
							speed_measurement_loop_i=0;
 800332c:	4b45      	ldr	r3, [pc, #276]	; (8003444 <DMA2_Stream0_IRQHandler+0x808>)
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
						}
					}
				}
				if(motor_feedback_type==ssi_encoder){
 8003334:	4b36      	ldr	r3, [pc, #216]	; (8003410 <DMA2_Stream0_IRQHandler+0x7d4>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b02      	cmp	r3, #2
 800333a:	f040 8150 	bne.w	80035de <DMA2_Stream0_IRQHandler+0x9a2>
					modbus_registers_buffer[11]=ssi_encoder_data.encoder_position;
 800333e:	4b49      	ldr	r3, [pc, #292]	; (8003464 <DMA2_Stream0_IRQHandler+0x828>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	b29a      	uxth	r2, r3
 8003344:	4b35      	ldr	r3, [pc, #212]	; (800341c <DMA2_Stream0_IRQHandler+0x7e0>)
 8003346:	82da      	strh	r2, [r3, #22]
					if(ssi_encoder_data.encoder_resolution==p8192ppr){actual_electric_angle=((fmodf(ssi_encoder_data.encoder_position, 8192.0f/POLE_PAIRS))/(8192.0f/POLE_PAIRS))*360.0f;}
 8003348:	4b46      	ldr	r3, [pc, #280]	; (8003464 <DMA2_Stream0_IRQHandler+0x828>)
 800334a:	7f1b      	ldrb	r3, [r3, #28]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d118      	bne.n	8003382 <DMA2_Stream0_IRQHandler+0x746>
 8003350:	4b44      	ldr	r3, [pc, #272]	; (8003464 <DMA2_Stream0_IRQHandler+0x828>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	ee07 3a90 	vmov	s15, r3
 8003358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335c:	eddf 0a42 	vldr	s1, [pc, #264]	; 8003468 <DMA2_Stream0_IRQHandler+0x82c>
 8003360:	eeb0 0a67 	vmov.f32	s0, s15
 8003364:	f008 fe96 	bl	800c094 <fmodf>
 8003368:	eeb0 7a40 	vmov.f32	s14, s0
 800336c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8003468 <DMA2_Stream0_IRQHandler+0x82c>
 8003370:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003374:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003438 <DMA2_Stream0_IRQHandler+0x7fc>
 8003378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800337c:	4b2b      	ldr	r3, [pc, #172]	; (800342c <DMA2_Stream0_IRQHandler+0x7f0>)
 800337e:	edc3 7a00 	vstr	s15, [r3]
					if(ssi_encoder_data.encoder_resolution==p131072ppr){actual_electric_angle=((fmodf(ssi_encoder_data.encoder_position,8192.0f/POLE_PAIRS))/(131072.0f/POLE_PAIRS))*360.0f;}
 8003382:	4b38      	ldr	r3, [pc, #224]	; (8003464 <DMA2_Stream0_IRQHandler+0x828>)
 8003384:	7f1b      	ldrb	r3, [r3, #28]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d118      	bne.n	80033bc <DMA2_Stream0_IRQHandler+0x780>
 800338a:	4b36      	ldr	r3, [pc, #216]	; (8003464 <DMA2_Stream0_IRQHandler+0x828>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	ee07 3a90 	vmov	s15, r3
 8003392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003396:	eddf 0a34 	vldr	s1, [pc, #208]	; 8003468 <DMA2_Stream0_IRQHandler+0x82c>
 800339a:	eeb0 0a67 	vmov.f32	s0, s15
 800339e:	f008 fe79 	bl	800c094 <fmodf>
 80033a2:	eeb0 7a40 	vmov.f32	s14, s0
 80033a6:	eddf 6a31 	vldr	s13, [pc, #196]	; 800346c <DMA2_Stream0_IRQHandler+0x830>
 80033aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033ae:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003438 <DMA2_Stream0_IRQHandler+0x7fc>
 80033b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033b6:	4b1d      	ldr	r3, [pc, #116]	; (800342c <DMA2_Stream0_IRQHandler+0x7f0>)
 80033b8:	edc3 7a00 	vstr	s15, [r3]
					if(ssi_encoder_data.encoder_resolution==unknown_resolution){actual_electric_angle=0;}//@TODO encoder error trip
 80033bc:	4b29      	ldr	r3, [pc, #164]	; (8003464 <DMA2_Stream0_IRQHandler+0x828>)
 80033be:	7f1b      	ldrb	r3, [r3, #28]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d103      	bne.n	80033cc <DMA2_Stream0_IRQHandler+0x790>
 80033c4:	4b19      	ldr	r3, [pc, #100]	; (800342c <DMA2_Stream0_IRQHandler+0x7f0>)
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
					if(actual_electric_angle-electric_angle>180.0f){actual_torque_angle=(actual_electric_angle-electric_angle) - 360.0f;}
 80033cc:	4b17      	ldr	r3, [pc, #92]	; (800342c <DMA2_Stream0_IRQHandler+0x7f0>)
 80033ce:	ed93 7a00 	vldr	s14, [r3]
 80033d2:	4b17      	ldr	r3, [pc, #92]	; (8003430 <DMA2_Stream0_IRQHandler+0x7f4>)
 80033d4:	edd3 7a00 	vldr	s15, [r3]
 80033d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033dc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003434 <DMA2_Stream0_IRQHandler+0x7f8>
 80033e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e8:	dd42      	ble.n	8003470 <DMA2_Stream0_IRQHandler+0x834>
 80033ea:	4b10      	ldr	r3, [pc, #64]	; (800342c <DMA2_Stream0_IRQHandler+0x7f0>)
 80033ec:	ed93 7a00 	vldr	s14, [r3]
 80033f0:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <DMA2_Stream0_IRQHandler+0x7f4>)
 80033f2:	edd3 7a00 	vldr	s15, [r3]
 80033f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033fa:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003438 <DMA2_Stream0_IRQHandler+0x7fc>
 80033fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003402:	4b0e      	ldr	r3, [pc, #56]	; (800343c <DMA2_Stream0_IRQHandler+0x800>)
 8003404:	edc3 7a00 	vstr	s15, [r3]
 8003408:	e067      	b.n	80034da <DMA2_Stream0_IRQHandler+0x89e>
 800340a:	bf00      	nop
 800340c:	20000925 	.word	0x20000925
 8003410:	200000aa 	.word	0x200000aa
 8003414:	2000098c 	.word	0x2000098c
 8003418:	2000098e 	.word	0x2000098e
 800341c:	20000000 	.word	0x20000000
 8003420:	10624dd3 	.word	0x10624dd3
 8003424:	200000a8 	.word	0x200000a8
 8003428:	3eb851ec 	.word	0x3eb851ec
 800342c:	20000990 	.word	0x20000990
 8003430:	20000910 	.word	0x20000910
 8003434:	43340000 	.word	0x43340000
 8003438:	43b40000 	.word	0x43b40000
 800343c:	20000998 	.word	0x20000998
 8003440:	c3340000 	.word	0xc3340000
 8003444:	2000099c 	.word	0x2000099c
 8003448:	20000994 	.word	0x20000994
 800344c:	418e38df 	.word	0x418e38df
 8003450:	200009a0 	.word	0x200009a0
 8003454:	45480000 	.word	0x45480000
 8003458:	45c80000 	.word	0x45c80000
 800345c:	c5480000 	.word	0xc5480000
 8003460:	200009a4 	.word	0x200009a4
 8003464:	200008d8 	.word	0x200008d8
 8003468:	45000000 	.word	0x45000000
 800346c:	47000000 	.word	0x47000000
					else if(actual_electric_angle-electric_angle<(-180.0f)){actual_torque_angle=actual_electric_angle-electric_angle + 360.0f;}
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <DMA2_Stream0_IRQHandler+0x874>)
 8003472:	ed93 7a00 	vldr	s14, [r3]
 8003476:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <DMA2_Stream0_IRQHandler+0x878>)
 8003478:	edd3 7a00 	vldr	s15, [r3]
 800347c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003480:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80034b8 <DMA2_Stream0_IRQHandler+0x87c>
 8003484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348c:	d51a      	bpl.n	80034c4 <DMA2_Stream0_IRQHandler+0x888>
 800348e:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <DMA2_Stream0_IRQHandler+0x874>)
 8003490:	ed93 7a00 	vldr	s14, [r3]
 8003494:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <DMA2_Stream0_IRQHandler+0x878>)
 8003496:	edd3 7a00 	vldr	s15, [r3]
 800349a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800349e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80034bc <DMA2_Stream0_IRQHandler+0x880>
 80034a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034a6:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <DMA2_Stream0_IRQHandler+0x884>)
 80034a8:	edc3 7a00 	vstr	s15, [r3]
 80034ac:	e015      	b.n	80034da <DMA2_Stream0_IRQHandler+0x89e>
 80034ae:	bf00      	nop
 80034b0:	20000990 	.word	0x20000990
 80034b4:	20000910 	.word	0x20000910
 80034b8:	c3340000 	.word	0xc3340000
 80034bc:	43b40000 	.word	0x43b40000
 80034c0:	20000998 	.word	0x20000998
					else{actual_torque_angle=actual_electric_angle-electric_angle;}
 80034c4:	4bc3      	ldr	r3, [pc, #780]	; (80037d4 <DMA2_Stream0_IRQHandler+0xb98>)
 80034c6:	ed93 7a00 	vldr	s14, [r3]
 80034ca:	4bc3      	ldr	r3, [pc, #780]	; (80037d8 <DMA2_Stream0_IRQHandler+0xb9c>)
 80034cc:	edd3 7a00 	vldr	s15, [r3]
 80034d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034d4:	4bc1      	ldr	r3, [pc, #772]	; (80037dc <DMA2_Stream0_IRQHandler+0xba0>)
 80034d6:	edc3 7a00 	vstr	s15, [r3]
					modbus_registers_buffer[12]=(int16_t)actual_torque_angle;//write calculated value to modbus array
 80034da:	4bc0      	ldr	r3, [pc, #768]	; (80037dc <DMA2_Stream0_IRQHandler+0xba0>)
 80034dc:	edd3 7a00 	vldr	s15, [r3]
 80034e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034e4:	ee17 3a90 	vmov	r3, s15
 80034e8:	b21b      	sxth	r3, r3
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	4bbc      	ldr	r3, [pc, #752]	; (80037e0 <DMA2_Stream0_IRQHandler+0xba4>)
 80034ee:	831a      	strh	r2, [r3, #24]
					speed_measurement_loop_i++;
 80034f0:	4bbc      	ldr	r3, [pc, #752]	; (80037e4 <DMA2_Stream0_IRQHandler+0xba8>)
 80034f2:	edd3 7a00 	vldr	s15, [r3]
 80034f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034fe:	4bb9      	ldr	r3, [pc, #740]	; (80037e4 <DMA2_Stream0_IRQHandler+0xba8>)
 8003500:	edc3 7a00 	vstr	s15, [r3]
					if(speed_measurement_loop_i>=30){
 8003504:	4bb7      	ldr	r3, [pc, #732]	; (80037e4 <DMA2_Stream0_IRQHandler+0xba8>)
 8003506:	edd3 7a00 	vldr	s15, [r3]
 800350a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800350e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003516:	db48      	blt.n	80035aa <DMA2_Stream0_IRQHandler+0x96e>
						if(ssi_encoder_data.encoder_resolution==p8192ppr){
 8003518:	4bb3      	ldr	r3, [pc, #716]	; (80037e8 <DMA2_Stream0_IRQHandler+0xbac>)
 800351a:	7f1b      	ldrb	r3, [r3, #28]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d13c      	bne.n	800359a <DMA2_Stream0_IRQHandler+0x95e>
							//speed(rpm)=(position pulse delta/enc resolution)*(60s/sample time(s))
							//speed=(delta/8192)*(60/0,003)
							speed=((float)ssi_encoder_data.encoder_position-(float)ssi_encoder_data.last_encoder_position_speed_loop)*1.2207f;
 8003520:	4bb1      	ldr	r3, [pc, #708]	; (80037e8 <DMA2_Stream0_IRQHandler+0xbac>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	ee07 3a90 	vmov	s15, r3
 8003528:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800352c:	4bae      	ldr	r3, [pc, #696]	; (80037e8 <DMA2_Stream0_IRQHandler+0xbac>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	ee07 3a90 	vmov	s15, r3
 8003534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800353c:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80037ec <DMA2_Stream0_IRQHandler+0xbb0>
 8003540:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003544:	4baa      	ldr	r3, [pc, #680]	; (80037f0 <DMA2_Stream0_IRQHandler+0xbb4>)
 8003546:	edc3 7a00 	vstr	s15, [r3]
							if(speed>5000.0f){speed-=10000.0f;}if(speed<-5000.0f){speed+=10000.0f;}
 800354a:	4ba9      	ldr	r3, [pc, #676]	; (80037f0 <DMA2_Stream0_IRQHandler+0xbb4>)
 800354c:	edd3 7a00 	vldr	s15, [r3]
 8003550:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 80037f4 <DMA2_Stream0_IRQHandler+0xbb8>
 8003554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355c:	dd09      	ble.n	8003572 <DMA2_Stream0_IRQHandler+0x936>
 800355e:	4ba4      	ldr	r3, [pc, #656]	; (80037f0 <DMA2_Stream0_IRQHandler+0xbb4>)
 8003560:	edd3 7a00 	vldr	s15, [r3]
 8003564:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 80037f8 <DMA2_Stream0_IRQHandler+0xbbc>
 8003568:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800356c:	4ba0      	ldr	r3, [pc, #640]	; (80037f0 <DMA2_Stream0_IRQHandler+0xbb4>)
 800356e:	edc3 7a00 	vstr	s15, [r3]
 8003572:	4b9f      	ldr	r3, [pc, #636]	; (80037f0 <DMA2_Stream0_IRQHandler+0xbb4>)
 8003574:	edd3 7a00 	vldr	s15, [r3]
 8003578:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 80037fc <DMA2_Stream0_IRQHandler+0xbc0>
 800357c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003584:	d509      	bpl.n	800359a <DMA2_Stream0_IRQHandler+0x95e>
 8003586:	4b9a      	ldr	r3, [pc, #616]	; (80037f0 <DMA2_Stream0_IRQHandler+0xbb4>)
 8003588:	edd3 7a00 	vldr	s15, [r3]
 800358c:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80037f8 <DMA2_Stream0_IRQHandler+0xbbc>
 8003590:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003594:	4b96      	ldr	r3, [pc, #600]	; (80037f0 <DMA2_Stream0_IRQHandler+0xbb4>)
 8003596:	edc3 7a00 	vstr	s15, [r3]
						}
						//@TODO: add speed measurement for 19bit encoders
						ssi_encoder_data.last_encoder_position_speed_loop=ssi_encoder_data.encoder_position;
 800359a:	4b93      	ldr	r3, [pc, #588]	; (80037e8 <DMA2_Stream0_IRQHandler+0xbac>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	4a92      	ldr	r2, [pc, #584]	; (80037e8 <DMA2_Stream0_IRQHandler+0xbac>)
 80035a0:	60d3      	str	r3, [r2, #12]
						speed_measurement_loop_i=0;
 80035a2:	4b90      	ldr	r3, [pc, #576]	; (80037e4 <DMA2_Stream0_IRQHandler+0xba8>)
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
					}
					filtered_speed=LowPassFilter(0.01,speed, &last_filtered_actual_speed);
 80035aa:	4b91      	ldr	r3, [pc, #580]	; (80037f0 <DMA2_Stream0_IRQHandler+0xbb4>)
 80035ac:	edd3 7a00 	vldr	s15, [r3]
 80035b0:	4893      	ldr	r0, [pc, #588]	; (8003800 <DMA2_Stream0_IRQHandler+0xbc4>)
 80035b2:	eef0 0a67 	vmov.f32	s1, s15
 80035b6:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8003804 <DMA2_Stream0_IRQHandler+0xbc8>
 80035ba:	f7fd ffd1 	bl	8001560 <LowPassFilter>
 80035be:	eef0 7a40 	vmov.f32	s15, s0
 80035c2:	4b91      	ldr	r3, [pc, #580]	; (8003808 <DMA2_Stream0_IRQHandler+0xbcc>)
 80035c4:	edc3 7a00 	vstr	s15, [r3]
					modbus_registers_buffer[13]=(int16_t)(speed);
 80035c8:	4b89      	ldr	r3, [pc, #548]	; (80037f0 <DMA2_Stream0_IRQHandler+0xbb4>)
 80035ca:	edd3 7a00 	vldr	s15, [r3]
 80035ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035d2:	ee17 3a90 	vmov	r3, s15
 80035d6:	b21b      	sxth	r3, r3
 80035d8:	b29a      	uxth	r2, r3
 80035da:	4b81      	ldr	r3, [pc, #516]	; (80037e0 <DMA2_Stream0_IRQHandler+0xba4>)
 80035dc:	835a      	strh	r2, [r3, #26]

				}

				park_transform(I_U, I_V, actual_electric_angle, &I_d, &I_q);
 80035de:	4b8b      	ldr	r3, [pc, #556]	; (800380c <DMA2_Stream0_IRQHandler+0xbd0>)
 80035e0:	edd3 7a00 	vldr	s15, [r3]
 80035e4:	4b8a      	ldr	r3, [pc, #552]	; (8003810 <DMA2_Stream0_IRQHandler+0xbd4>)
 80035e6:	ed93 7a00 	vldr	s14, [r3]
 80035ea:	4b7a      	ldr	r3, [pc, #488]	; (80037d4 <DMA2_Stream0_IRQHandler+0xb98>)
 80035ec:	edd3 6a00 	vldr	s13, [r3]
 80035f0:	4988      	ldr	r1, [pc, #544]	; (8003814 <DMA2_Stream0_IRQHandler+0xbd8>)
 80035f2:	4889      	ldr	r0, [pc, #548]	; (8003818 <DMA2_Stream0_IRQHandler+0xbdc>)
 80035f4:	eeb0 1a66 	vmov.f32	s2, s13
 80035f8:	eef0 0a47 	vmov.f32	s1, s14
 80035fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003600:	f7fd feec 	bl	80013dc <park_transform>
				I_d_filtered = LowPassFilter(0.007, I_d, &I_d_last);
 8003604:	4b84      	ldr	r3, [pc, #528]	; (8003818 <DMA2_Stream0_IRQHandler+0xbdc>)
 8003606:	edd3 7a00 	vldr	s15, [r3]
 800360a:	4884      	ldr	r0, [pc, #528]	; (800381c <DMA2_Stream0_IRQHandler+0xbe0>)
 800360c:	eef0 0a67 	vmov.f32	s1, s15
 8003610:	ed9f 0a83 	vldr	s0, [pc, #524]	; 8003820 <DMA2_Stream0_IRQHandler+0xbe4>
 8003614:	f7fd ffa4 	bl	8001560 <LowPassFilter>
 8003618:	eef0 7a40 	vmov.f32	s15, s0
 800361c:	4b81      	ldr	r3, [pc, #516]	; (8003824 <DMA2_Stream0_IRQHandler+0xbe8>)
 800361e:	edc3 7a00 	vstr	s15, [r3]
				I_q_filtered = LowPassFilter(0.007, I_q, &I_q_last);
 8003622:	4b7c      	ldr	r3, [pc, #496]	; (8003814 <DMA2_Stream0_IRQHandler+0xbd8>)
 8003624:	edd3 7a00 	vldr	s15, [r3]
 8003628:	487f      	ldr	r0, [pc, #508]	; (8003828 <DMA2_Stream0_IRQHandler+0xbec>)
 800362a:	eef0 0a67 	vmov.f32	s1, s15
 800362e:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8003820 <DMA2_Stream0_IRQHandler+0xbe4>
 8003632:	f7fd ff95 	bl	8001560 <LowPassFilter>
 8003636:	eef0 7a40 	vmov.f32	s15, s0
 800363a:	4b7c      	ldr	r3, [pc, #496]	; (800382c <DMA2_Stream0_IRQHandler+0xbf0>)
 800363c:	edc3 7a00 	vstr	s15, [r3]
				modbus_registers_buffer[15]=(int16_t)(I_d_filtered*100);
 8003640:	4b78      	ldr	r3, [pc, #480]	; (8003824 <DMA2_Stream0_IRQHandler+0xbe8>)
 8003642:	edd3 7a00 	vldr	s15, [r3]
 8003646:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8003830 <DMA2_Stream0_IRQHandler+0xbf4>
 800364a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800364e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003652:	ee17 3a90 	vmov	r3, s15
 8003656:	b21b      	sxth	r3, r3
 8003658:	b29a      	uxth	r2, r3
 800365a:	4b61      	ldr	r3, [pc, #388]	; (80037e0 <DMA2_Stream0_IRQHandler+0xba4>)
 800365c:	83da      	strh	r2, [r3, #30]
				modbus_registers_buffer[16]=(int16_t)(I_q_filtered*100);
 800365e:	4b73      	ldr	r3, [pc, #460]	; (800382c <DMA2_Stream0_IRQHandler+0xbf0>)
 8003660:	edd3 7a00 	vldr	s15, [r3]
 8003664:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003830 <DMA2_Stream0_IRQHandler+0xbf4>
 8003668:	ee67 7a87 	vmul.f32	s15, s15, s14
 800366c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003670:	ee17 3a90 	vmov	r3, s15
 8003674:	b21b      	sxth	r3, r3
 8003676:	b29a      	uxth	r2, r3
 8003678:	4b59      	ldr	r3, [pc, #356]	; (80037e0 <DMA2_Stream0_IRQHandler+0xba4>)
 800367a:	841a      	strh	r2, [r3, #32]

				if(inv_control_mode==manual){
 800367c:	4b6d      	ldr	r3, [pc, #436]	; (8003834 <DMA2_Stream0_IRQHandler+0xbf8>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b01      	cmp	r3, #1
 8003684:	d12b      	bne.n	80036de <DMA2_Stream0_IRQHandler+0xaa2>
					electric_angle+=(speed_setpoint_deg_s*POLE_PAIRS)/5000.0f;  //5000hz control/sampling loop
 8003686:	4b6c      	ldr	r3, [pc, #432]	; (8003838 <DMA2_Stream0_IRQHandler+0xbfc>)
 8003688:	edd3 7a00 	vldr	s15, [r3]
 800368c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003694:	eddf 6a57 	vldr	s13, [pc, #348]	; 80037f4 <DMA2_Stream0_IRQHandler+0xbb8>
 8003698:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800369c:	4b4e      	ldr	r3, [pc, #312]	; (80037d8 <DMA2_Stream0_IRQHandler+0xb9c>)
 800369e:	edd3 7a00 	vldr	s15, [r3]
 80036a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a6:	4b4c      	ldr	r3, [pc, #304]	; (80037d8 <DMA2_Stream0_IRQHandler+0xb9c>)
 80036a8:	edc3 7a00 	vstr	s15, [r3]
					if(electric_angle>=360.0f){	electric_angle=0.0f;}
 80036ac:	4b4a      	ldr	r3, [pc, #296]	; (80037d8 <DMA2_Stream0_IRQHandler+0xb9c>)
 80036ae:	edd3 7a00 	vldr	s15, [r3]
 80036b2:	ed9f 7a62 	vldr	s14, [pc, #392]	; 800383c <DMA2_Stream0_IRQHandler+0xc00>
 80036b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036be:	db03      	blt.n	80036c8 <DMA2_Stream0_IRQHandler+0xa8c>
 80036c0:	4b45      	ldr	r3, [pc, #276]	; (80037d8 <DMA2_Stream0_IRQHandler+0xb9c>)
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
					if(electric_angle<0.0f){electric_angle=359.0f;}
 80036c8:	4b43      	ldr	r3, [pc, #268]	; (80037d8 <DMA2_Stream0_IRQHandler+0xb9c>)
 80036ca:	edd3 7a00 	vldr	s15, [r3]
 80036ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d6:	d502      	bpl.n	80036de <DMA2_Stream0_IRQHandler+0xaa2>
 80036d8:	4b3f      	ldr	r3, [pc, #252]	; (80037d8 <DMA2_Stream0_IRQHandler+0xb9c>)
 80036da:	4a59      	ldr	r2, [pc, #356]	; (8003840 <DMA2_Stream0_IRQHandler+0xc04>)
 80036dc:	601a      	str	r2, [r3, #0]
				}
				if(inv_control_mode==foc && modbus_registers_buffer[3] ==1){
 80036de:	4b55      	ldr	r3, [pc, #340]	; (8003834 <DMA2_Stream0_IRQHandler+0xbf8>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	f040 814c 	bne.w	8003982 <DMA2_Stream0_IRQHandler+0xd46>
 80036ea:	4b3d      	ldr	r3, [pc, #244]	; (80037e0 <DMA2_Stream0_IRQHandler+0xba4>)
 80036ec:	88db      	ldrh	r3, [r3, #6]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	f040 8147 	bne.w	8003982 <DMA2_Stream0_IRQHandler+0xd46>
					U_d = PI_control(&id_current_controller_data, -I_d_filtered);
 80036f4:	4b4b      	ldr	r3, [pc, #300]	; (8003824 <DMA2_Stream0_IRQHandler+0xbe8>)
 80036f6:	edd3 7a00 	vldr	s15, [r3]
 80036fa:	eef1 7a67 	vneg.f32	s15, s15
 80036fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003702:	4850      	ldr	r0, [pc, #320]	; (8003844 <DMA2_Stream0_IRQHandler+0xc08>)
 8003704:	f7fe fe4a 	bl	800239c <PI_control>
 8003708:	eef0 7a40 	vmov.f32	s15, s0
 800370c:	4b4e      	ldr	r3, [pc, #312]	; (8003848 <DMA2_Stream0_IRQHandler+0xc0c>)
 800370e:	edc3 7a00 	vstr	s15, [r3]
					U_q = PI_control(&iq_current_controller_data,(torque_setpoint/10.0f)-I_q_filtered);
 8003712:	4b4e      	ldr	r3, [pc, #312]	; (800384c <DMA2_Stream0_IRQHandler+0xc10>)
 8003714:	edd3 7a00 	vldr	s15, [r3]
 8003718:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800371c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003720:	4b42      	ldr	r3, [pc, #264]	; (800382c <DMA2_Stream0_IRQHandler+0xbf0>)
 8003722:	edd3 7a00 	vldr	s15, [r3]
 8003726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800372a:	eeb0 0a67 	vmov.f32	s0, s15
 800372e:	4848      	ldr	r0, [pc, #288]	; (8003850 <DMA2_Stream0_IRQHandler+0xc14>)
 8003730:	f7fe fe34 	bl	800239c <PI_control>
 8003734:	eef0 7a40 	vmov.f32	s15, s0
 8003738:	4b46      	ldr	r3, [pc, #280]	; (8003854 <DMA2_Stream0_IRQHandler+0xc18>)
 800373a:	edc3 7a00 	vstr	s15, [r3]
					inv_park_transform(U_d, U_q, actual_electric_angle, &U_alpha, &U_beta);
 800373e:	4b42      	ldr	r3, [pc, #264]	; (8003848 <DMA2_Stream0_IRQHandler+0xc0c>)
 8003740:	edd3 7a00 	vldr	s15, [r3]
 8003744:	4b43      	ldr	r3, [pc, #268]	; (8003854 <DMA2_Stream0_IRQHandler+0xc18>)
 8003746:	ed93 7a00 	vldr	s14, [r3]
 800374a:	4b22      	ldr	r3, [pc, #136]	; (80037d4 <DMA2_Stream0_IRQHandler+0xb98>)
 800374c:	edd3 6a00 	vldr	s13, [r3]
 8003750:	4941      	ldr	r1, [pc, #260]	; (8003858 <DMA2_Stream0_IRQHandler+0xc1c>)
 8003752:	4842      	ldr	r0, [pc, #264]	; (800385c <DMA2_Stream0_IRQHandler+0xc20>)
 8003754:	eeb0 1a66 	vmov.f32	s2, s13
 8003758:	eef0 0a47 	vmov.f32	s1, s14
 800375c:	eeb0 0a67 	vmov.f32	s0, s15
 8003760:	f7fd fea8 	bl	80014b4 <inv_park_transform>
					duty_cycle=sqrtf(U_alpha*U_alpha+U_beta*U_beta);
 8003764:	4b3d      	ldr	r3, [pc, #244]	; (800385c <DMA2_Stream0_IRQHandler+0xc20>)
 8003766:	ed93 7a00 	vldr	s14, [r3]
 800376a:	4b3c      	ldr	r3, [pc, #240]	; (800385c <DMA2_Stream0_IRQHandler+0xc20>)
 800376c:	edd3 7a00 	vldr	s15, [r3]
 8003770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003774:	4b38      	ldr	r3, [pc, #224]	; (8003858 <DMA2_Stream0_IRQHandler+0xc1c>)
 8003776:	edd3 6a00 	vldr	s13, [r3]
 800377a:	4b37      	ldr	r3, [pc, #220]	; (8003858 <DMA2_Stream0_IRQHandler+0xc1c>)
 800377c:	edd3 7a00 	vldr	s15, [r3]
 8003780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003788:	eeb0 0a67 	vmov.f32	s0, s15
 800378c:	f008 fca2 	bl	800c0d4 <sqrtf>
 8003790:	eef0 7a40 	vmov.f32	s15, s0
 8003794:	4b32      	ldr	r3, [pc, #200]	; (8003860 <DMA2_Stream0_IRQHandler+0xc24>)
 8003796:	edc3 7a00 	vstr	s15, [r3]

					float electric_angle_rad=0.0f;
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	603b      	str	r3, [r7, #0]
					if(U_alpha>=0 && U_beta >=0){electric_angle_rad=atan2f(fabs(U_beta),fabs(U_alpha));}
 80037a0:	4b2e      	ldr	r3, [pc, #184]	; (800385c <DMA2_Stream0_IRQHandler+0xc20>)
 80037a2:	edd3 7a00 	vldr	s15, [r3]
 80037a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ae:	db63      	blt.n	8003878 <DMA2_Stream0_IRQHandler+0xc3c>
 80037b0:	4b29      	ldr	r3, [pc, #164]	; (8003858 <DMA2_Stream0_IRQHandler+0xc1c>)
 80037b2:	edd3 7a00 	vldr	s15, [r3]
 80037b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037be:	db5b      	blt.n	8003878 <DMA2_Stream0_IRQHandler+0xc3c>
 80037c0:	4b25      	ldr	r3, [pc, #148]	; (8003858 <DMA2_Stream0_IRQHandler+0xc1c>)
 80037c2:	edd3 7a00 	vldr	s15, [r3]
 80037c6:	eeb0 7ae7 	vabs.f32	s14, s15
 80037ca:	4b24      	ldr	r3, [pc, #144]	; (800385c <DMA2_Stream0_IRQHandler+0xc20>)
 80037cc:	edd3 7a00 	vldr	s15, [r3]
 80037d0:	e048      	b.n	8003864 <DMA2_Stream0_IRQHandler+0xc28>
 80037d2:	bf00      	nop
 80037d4:	20000990 	.word	0x20000990
 80037d8:	20000910 	.word	0x20000910
 80037dc:	20000998 	.word	0x20000998
 80037e0:	20000000 	.word	0x20000000
 80037e4:	2000099c 	.word	0x2000099c
 80037e8:	200008d8 	.word	0x200008d8
 80037ec:	3f9c3fe6 	.word	0x3f9c3fe6
 80037f0:	200009a0 	.word	0x200009a0
 80037f4:	459c4000 	.word	0x459c4000
 80037f8:	461c4000 	.word	0x461c4000
 80037fc:	c59c4000 	.word	0xc59c4000
 8003800:	200009a8 	.word	0x200009a8
 8003804:	3c23d70a 	.word	0x3c23d70a
 8003808:	200009a4 	.word	0x200009a4
 800380c:	20000938 	.word	0x20000938
 8003810:	2000093c 	.word	0x2000093c
 8003814:	20000970 	.word	0x20000970
 8003818:	20000964 	.word	0x20000964
 800381c:	20000968 	.word	0x20000968
 8003820:	3be56042 	.word	0x3be56042
 8003824:	2000096c 	.word	0x2000096c
 8003828:	20000974 	.word	0x20000974
 800382c:	20000978 	.word	0x20000978
 8003830:	42c80000 	.word	0x42c80000
 8003834:	20000904 	.word	0x20000904
 8003838:	20000908 	.word	0x20000908
 800383c:	43b40000 	.word	0x43b40000
 8003840:	43b38000 	.word	0x43b38000
 8003844:	2000003c 	.word	0x2000003c
 8003848:	2000097c 	.word	0x2000097c
 800384c:	20000928 	.word	0x20000928
 8003850:	20000060 	.word	0x20000060
 8003854:	20000980 	.word	0x20000980
 8003858:	20000988 	.word	0x20000988
 800385c:	20000984 	.word	0x20000984
 8003860:	20000914 	.word	0x20000914
 8003864:	eef0 7ae7 	vabs.f32	s15, s15
 8003868:	eef0 0a67 	vmov.f32	s1, s15
 800386c:	eeb0 0a47 	vmov.f32	s0, s14
 8003870:	f008 fc0e 	bl	800c090 <atan2f>
 8003874:	ed87 0a00 	vstr	s0, [r7]
					if(U_alpha<0 && U_beta >=0){electric_angle_rad=atan2f(fabs(U_alpha),fabs(U_beta)) + (3.141592f/2.0f);}
 8003878:	4b57      	ldr	r3, [pc, #348]	; (80039d8 <DMA2_Stream0_IRQHandler+0xd9c>)
 800387a:	edd3 7a00 	vldr	s15, [r3]
 800387e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003886:	d51f      	bpl.n	80038c8 <DMA2_Stream0_IRQHandler+0xc8c>
 8003888:	4b54      	ldr	r3, [pc, #336]	; (80039dc <DMA2_Stream0_IRQHandler+0xda0>)
 800388a:	edd3 7a00 	vldr	s15, [r3]
 800388e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003896:	db17      	blt.n	80038c8 <DMA2_Stream0_IRQHandler+0xc8c>
 8003898:	4b4f      	ldr	r3, [pc, #316]	; (80039d8 <DMA2_Stream0_IRQHandler+0xd9c>)
 800389a:	edd3 7a00 	vldr	s15, [r3]
 800389e:	eeb0 7ae7 	vabs.f32	s14, s15
 80038a2:	4b4e      	ldr	r3, [pc, #312]	; (80039dc <DMA2_Stream0_IRQHandler+0xda0>)
 80038a4:	edd3 7a00 	vldr	s15, [r3]
 80038a8:	eef0 7ae7 	vabs.f32	s15, s15
 80038ac:	eef0 0a67 	vmov.f32	s1, s15
 80038b0:	eeb0 0a47 	vmov.f32	s0, s14
 80038b4:	f008 fbec 	bl	800c090 <atan2f>
 80038b8:	eef0 7a40 	vmov.f32	s15, s0
 80038bc:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80039e0 <DMA2_Stream0_IRQHandler+0xda4>
 80038c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038c4:	edc7 7a00 	vstr	s15, [r7]
					if(U_alpha<0 && U_beta <0){electric_angle_rad=atan2f(fabs(U_beta),fabs(U_alpha)) + 3.141592f;}
 80038c8:	4b43      	ldr	r3, [pc, #268]	; (80039d8 <DMA2_Stream0_IRQHandler+0xd9c>)
 80038ca:	edd3 7a00 	vldr	s15, [r3]
 80038ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d6:	d51f      	bpl.n	8003918 <DMA2_Stream0_IRQHandler+0xcdc>
 80038d8:	4b40      	ldr	r3, [pc, #256]	; (80039dc <DMA2_Stream0_IRQHandler+0xda0>)
 80038da:	edd3 7a00 	vldr	s15, [r3]
 80038de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e6:	d517      	bpl.n	8003918 <DMA2_Stream0_IRQHandler+0xcdc>
 80038e8:	4b3c      	ldr	r3, [pc, #240]	; (80039dc <DMA2_Stream0_IRQHandler+0xda0>)
 80038ea:	edd3 7a00 	vldr	s15, [r3]
 80038ee:	eeb0 7ae7 	vabs.f32	s14, s15
 80038f2:	4b39      	ldr	r3, [pc, #228]	; (80039d8 <DMA2_Stream0_IRQHandler+0xd9c>)
 80038f4:	edd3 7a00 	vldr	s15, [r3]
 80038f8:	eef0 7ae7 	vabs.f32	s15, s15
 80038fc:	eef0 0a67 	vmov.f32	s1, s15
 8003900:	eeb0 0a47 	vmov.f32	s0, s14
 8003904:	f008 fbc4 	bl	800c090 <atan2f>
 8003908:	eef0 7a40 	vmov.f32	s15, s0
 800390c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80039e4 <DMA2_Stream0_IRQHandler+0xda8>
 8003910:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003914:	edc7 7a00 	vstr	s15, [r7]
					if(U_alpha>=0 && U_beta <0){electric_angle_rad=atan2f(fabs(U_alpha),fabs(U_beta)) + (3.141592f*1.5f);}
 8003918:	4b2f      	ldr	r3, [pc, #188]	; (80039d8 <DMA2_Stream0_IRQHandler+0xd9c>)
 800391a:	edd3 7a00 	vldr	s15, [r3]
 800391e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003926:	db1f      	blt.n	8003968 <DMA2_Stream0_IRQHandler+0xd2c>
 8003928:	4b2c      	ldr	r3, [pc, #176]	; (80039dc <DMA2_Stream0_IRQHandler+0xda0>)
 800392a:	edd3 7a00 	vldr	s15, [r3]
 800392e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003936:	d517      	bpl.n	8003968 <DMA2_Stream0_IRQHandler+0xd2c>
 8003938:	4b27      	ldr	r3, [pc, #156]	; (80039d8 <DMA2_Stream0_IRQHandler+0xd9c>)
 800393a:	edd3 7a00 	vldr	s15, [r3]
 800393e:	eeb0 7ae7 	vabs.f32	s14, s15
 8003942:	4b26      	ldr	r3, [pc, #152]	; (80039dc <DMA2_Stream0_IRQHandler+0xda0>)
 8003944:	edd3 7a00 	vldr	s15, [r3]
 8003948:	eef0 7ae7 	vabs.f32	s15, s15
 800394c:	eef0 0a67 	vmov.f32	s1, s15
 8003950:	eeb0 0a47 	vmov.f32	s0, s14
 8003954:	f008 fb9c 	bl	800c090 <atan2f>
 8003958:	eef0 7a40 	vmov.f32	s15, s0
 800395c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80039e8 <DMA2_Stream0_IRQHandler+0xdac>
 8003960:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003964:	edc7 7a00 	vstr	s15, [r7]

					electric_angle=(electric_angle_rad/3.141592f)*180.0f;
 8003968:	ed97 7a00 	vldr	s14, [r7]
 800396c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80039e4 <DMA2_Stream0_IRQHandler+0xda8>
 8003970:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003974:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80039ec <DMA2_Stream0_IRQHandler+0xdb0>
 8003978:	ee67 7a87 	vmul.f32	s15, s15, s14
 800397c:	4b1c      	ldr	r3, [pc, #112]	; (80039f0 <DMA2_Stream0_IRQHandler+0xdb4>)
 800397e:	edc3 7a00 	vstr	s15, [r3]
					//electric_angle+=(speed_setpoint_deg_s*POLE_PAIRS)/16000.0f;
					//if(electric_angle>=360.0f){	electric_angle=0.0f;}
					//if(electric_angle<0.0f){electric_angle=359.0f;}
				}

				if(inv_control_mode!=stop){
 8003982:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <DMA2_Stream0_IRQHandler+0xdb8>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d014      	beq.n	80039b6 <DMA2_Stream0_IRQHandler+0xd7a>
					//output_svpwm((uint16_t)electric_angle, (uint16_t)duty_cycle);
					output_sine_pwm((uint16_t)electric_angle, (uint16_t)duty_cycle);
 800398c:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <DMA2_Stream0_IRQHandler+0xdb4>)
 800398e:	edd3 7a00 	vldr	s15, [r3]
 8003992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003996:	ee17 3a90 	vmov	r3, s15
 800399a:	b29b      	uxth	r3, r3
 800399c:	4a16      	ldr	r2, [pc, #88]	; (80039f8 <DMA2_Stream0_IRQHandler+0xdbc>)
 800399e:	edd2 7a00 	vldr	s15, [r2]
 80039a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039a6:	ee17 2a90 	vmov	r2, s15
 80039aa:	b292      	uxth	r2, r2
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fd fe6e 	bl	8001690 <output_sine_pwm>
 80039b4:	e008      	b.n	80039c8 <DMA2_Stream0_IRQHandler+0xd8c>
				}
				else{TIM1->CCR1=0;TIM1->CCR2=0;TIM1->CCR3=0;}//if inverter in stop mode stop producing PWM signal while timer1 is still active to keep this interrupt alive for measurements on switched off inverter
 80039b6:	4b11      	ldr	r3, [pc, #68]	; (80039fc <DMA2_Stream0_IRQHandler+0xdc0>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	635a      	str	r2, [r3, #52]	; 0x34
 80039bc:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <DMA2_Stream0_IRQHandler+0xdc0>)
 80039be:	2200      	movs	r2, #0
 80039c0:	639a      	str	r2, [r3, #56]	; 0x38
 80039c2:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <DMA2_Stream0_IRQHandler+0xdc0>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	63da      	str	r2, [r3, #60]	; 0x3c

			}
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039c8:	480d      	ldr	r0, [pc, #52]	; (8003a00 <DMA2_Stream0_IRQHandler+0xdc4>)
 80039ca:	f001 fd69 	bl	80054a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000984 	.word	0x20000984
 80039dc:	20000988 	.word	0x20000988
 80039e0:	3fc90fd8 	.word	0x3fc90fd8
 80039e4:	40490fd8 	.word	0x40490fd8
 80039e8:	4096cbe2 	.word	0x4096cbe2
 80039ec:	43340000 	.word	0x43340000
 80039f0:	20000910 	.word	0x20000910
 80039f4:	20000904 	.word	0x20000904
 80039f8:	20000914 	.word	0x20000914
 80039fc:	40010000 	.word	0x40010000
 8003a00:	20000540 	.word	0x20000540

08003a04 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003a08:	4802      	ldr	r0, [pc, #8]	; (8003a14 <DMA2_Stream2_IRQHandler+0x10>)
 8003a0a:	f001 fd49 	bl	80054a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000748 	.word	0x20000748

08003a18 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003a1c:	4802      	ldr	r0, [pc, #8]	; (8003a28 <DMA2_Stream7_IRQHandler+0x10>)
 8003a1e:	f001 fd3f 	bl	80054a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	200007a8 	.word	0x200007a8

08003a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a30:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <SystemInit+0x20>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a36:	4a05      	ldr	r2, [pc, #20]	; (8003a4c <SystemInit+0x20>)
 8003a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a40:	bf00      	nop
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	e000ed00 	.word	0xe000ed00

08003a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a54:	480d      	ldr	r0, [pc, #52]	; (8003a8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a56:	490e      	ldr	r1, [pc, #56]	; (8003a90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a58:	4a0e      	ldr	r2, [pc, #56]	; (8003a94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a5c:	e002      	b.n	8003a64 <LoopCopyDataInit>

08003a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a62:	3304      	adds	r3, #4

08003a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a68:	d3f9      	bcc.n	8003a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a6a:	4a0b      	ldr	r2, [pc, #44]	; (8003a98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a6c:	4c0b      	ldr	r4, [pc, #44]	; (8003a9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a70:	e001      	b.n	8003a76 <LoopFillZerobss>

08003a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a74:	3204      	adds	r2, #4

08003a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a78:	d3fb      	bcc.n	8003a72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a7a:	f7ff ffd7 	bl	8003a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a7e:	f008 f953 	bl	800bd28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a82:	f7fd fe87 	bl	8001794 <main>
  bx  lr    
 8003a86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a88:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a90:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8003a94:	0800d904 	.word	0x0800d904
  ldr r2, =_sbss
 8003a98:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8003a9c:	20005460 	.word	0x20005460

08003aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003aa0:	e7fe      	b.n	8003aa0 <ADC_IRQHandler>
	...

08003aa4 <mbus_open>:
/*
 * function mbus_open()
 * open new modbus context for new port
 * return: MODBUS_ERROR - if can't open context
 */
mbus_t mbus_open(Modbus_Conf_t *pconf) {
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  mbus_t context;
  for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++) {
 8003aac:	2300      	movs	r3, #0
 8003aae:	73fb      	strb	r3, [r7, #15]
 8003ab0:	e010      	b.n	8003ad4 <mbus_open+0x30>
    if (g_mbusContext[context].open == 0) {
 8003ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ab6:	4a22      	ldr	r2, [pc, #136]	; (8003b40 <mbus_open+0x9c>)
 8003ab8:	2194      	movs	r1, #148	; 0x94
 8003aba:	fb01 f303 	mul.w	r3, r1, r3
 8003abe:	4413      	add	r3, r2
 8003ac0:	3328      	adds	r3, #40	; 0x28
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <mbus_open+0x3a>
  for (context = 0; context < STMODBUS_COUNT_CONTEXT; context++) {
 8003ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	3301      	adds	r3, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	73fb      	strb	r3, [r7, #15]
 8003ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	ddea      	ble.n	8003ab2 <mbus_open+0xe>
 8003adc:	e000      	b.n	8003ae0 <mbus_open+0x3c>
      break;
 8003ade:	bf00      	nop
    }
  }
  if (context == STMODBUS_COUNT_CONTEXT)
 8003ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d102      	bne.n	8003aee <mbus_open+0x4a>
    return (mbus_t)MBUS_ERROR;
 8003ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8003aec:	e023      	b.n	8003b36 <mbus_open+0x92>
  // Clear context
  memset(&g_mbusContext[context], 0, sizeof(_stmodbus_context_t));
 8003aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003af2:	2294      	movs	r2, #148	; 0x94
 8003af4:	fb02 f303 	mul.w	r3, r2, r3
 8003af8:	4a11      	ldr	r2, [pc, #68]	; (8003b40 <mbus_open+0x9c>)
 8003afa:	4413      	add	r3, r2
 8003afc:	2294      	movs	r2, #148	; 0x94
 8003afe:	2100      	movs	r1, #0
 8003b00:	4618      	mov	r0, r3
 8003b02:	f008 f945 	bl	800bd90 <memset>
  // Copy config to context
  memcpy((void *)&g_mbusContext[context].conf, (void *)pconf,
 8003b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b0a:	2294      	movs	r2, #148	; 0x94
 8003b0c:	fb02 f303 	mul.w	r3, r2, r3
 8003b10:	4a0b      	ldr	r2, [pc, #44]	; (8003b40 <mbus_open+0x9c>)
 8003b12:	4413      	add	r3, r2
 8003b14:	2228      	movs	r2, #40	; 0x28
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f008 f92b 	bl	800bd74 <memcpy>
         sizeof(Modbus_Conf_t));

  g_mbusContext[context].open = 1;
 8003b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b22:	4a07      	ldr	r2, [pc, #28]	; (8003b40 <mbus_open+0x9c>)
 8003b24:	2194      	movs	r1, #148	; 0x94
 8003b26:	fb01 f303 	mul.w	r3, r1, r3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3328      	adds	r3, #40	; 0x28
 8003b2e:	2201      	movs	r2, #1
 8003b30:	701a      	strb	r2, [r3, #0]
  return context;
 8003b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	200009ac 	.word	0x200009ac

08003b44 <mbus_flush>:

mbus_status_t mbus_flush(const mbus_t context) {
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	71fb      	strb	r3, [r7, #7]
  g_mbusContext[context].crc16 = 0xFFFF;
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	4a0d      	ldr	r2, [pc, #52]	; (8003b88 <mbus_flush+0x44>)
 8003b54:	2194      	movs	r1, #148	; 0x94
 8003b56:	fb01 f303 	mul.w	r3, r1, r3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	332a      	adds	r3, #42	; 0x2a
 8003b5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b62:	801a      	strh	r2, [r3, #0]
  g_mbusContext[context].state = MBUS_STATE_IDLE;
 8003b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b68:	4a07      	ldr	r2, [pc, #28]	; (8003b88 <mbus_flush+0x44>)
 8003b6a:	2194      	movs	r1, #148	; 0x94
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	4413      	add	r3, r2
 8003b72:	3329      	adds	r3, #41	; 0x29
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
  return MBUS_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	200009ac 	.word	0x200009ac

08003b8c <mbus_response>:

mbus_status_t mbus_response(mbus_t mb_context, Modbus_ResponseType response) {
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	460a      	mov	r2, r1
 8003b96:	71fb      	strb	r3, [r7, #7]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	71bb      	strb	r3, [r7, #6]

  if (response != MBUS_RESPONSE_OK) {
 8003b9c:	79bb      	ldrb	r3, [r7, #6]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d008      	beq.n	8003bb4 <mbus_response+0x28>
    return mbus_send_error(mb_context, response);
 8003ba2:	79ba      	ldrb	r2, [r7, #6]
 8003ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba8:	4611      	mov	r1, r2
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fbba 	bl	8004324 <mbus_send_error>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	e001      	b.n	8003bb8 <mbus_response+0x2c>
  } else {
  }
  return MBUS_ERROR;
 8003bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <mbus_poll_response>:
uint16_t mbus_error(Modbus_ResponseType error) {
    g_userError = error;
    return 0;
}

inline mbus_status_t mbus_poll_response(mbus_t mb_context) {
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08c      	sub	sp, #48	; 0x30
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
  stmbCallBackFunc func = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8003bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd2:	2294      	movs	r2, #148	; 0x94
 8003bd4:	fb02 f303 	mul.w	r3, r2, r3
 8003bd8:	4a93      	ldr	r2, [pc, #588]	; (8003e28 <mbus_poll_response+0x268>)
 8003bda:	4413      	add	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
  int read = 1, la;
 8003bde:	2301      	movs	r3, #1
 8003be0:	60fb      	str	r3, [r7, #12]
  uint16_t d;

  if (ctx->header.func == 0x04) {
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d101      	bne.n	8003bf0 <mbus_poll_response+0x30>
    la = 10;
 8003bec:	230a      	movs	r3, #10
 8003bee:	62bb      	str	r3, [r7, #40]	; 0x28
  }

#if STMODBUS_COUNT_FUNC > 0
  for (int i = 0; i < STMODBUS_COUNT_FUNC; i++) {
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf4:	e014      	b.n	8003c20 <mbus_poll_response+0x60>
    if ((ctx->func[i].code == ctx->response.func)) {
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfa:	3206      	adds	r2, #6
 8003bfc:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d107      	bne.n	8003c1a <mbus_poll_response+0x5a>
      func = ctx->func[i].func;
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	3306      	adds	r3, #6
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	4413      	add	r3, r2
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8003c18:	e005      	b.n	8003c26 <mbus_poll_response+0x66>
  for (int i = 0; i < STMODBUS_COUNT_FUNC; i++) {
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	2b09      	cmp	r3, #9
 8003c24:	dde7      	ble.n	8003bf6 <mbus_poll_response+0x36>
    }
  }
#endif
  switch (ctx->header.func) {
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003c2c:	2b0f      	cmp	r3, #15
 8003c2e:	d006      	beq.n	8003c3e <mbus_poll_response+0x7e>
 8003c30:	2b0f      	cmp	r3, #15
 8003c32:	dc52      	bgt.n	8003cda <mbus_poll_response+0x11a>
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d002      	beq.n	8003c3e <mbus_poll_response+0x7e>
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d027      	beq.n	8003c8c <mbus_poll_response+0xcc>
    if ((ctx->header.addr + ctx->header.num) > ctx->conf.discrete) {
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
    }
    break;
  default:
    break;
 8003c3c:	e04d      	b.n	8003cda <mbus_poll_response+0x11a>
    if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0)) {
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <mbus_poll_response+0x94>
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003c4e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003c52:	d907      	bls.n	8003c64 <mbus_poll_response+0xa4>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 8003c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c58:	2103      	movs	r1, #3
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff ff96 	bl	8003b8c <mbus_response>
 8003c60:	4603      	mov	r3, r0
 8003c62:	e173      	b.n	8003f4c <mbus_poll_response+0x38c>
    if ((ctx->header.addr + ctx->header.num) >= ctx->conf.coils) {
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003c72:	4413      	add	r3, r2
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	8852      	ldrh	r2, [r2, #2]
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	db30      	blt.n	8003cde <mbus_poll_response+0x11e>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 8003c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c80:	2102      	movs	r1, #2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff ff82 	bl	8003b8c <mbus_response>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	e15f      	b.n	8003f4c <mbus_poll_response+0x38c>
    if ((ctx->header.num == 0) || (ctx->header.num > 0x07D0)) {
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d005      	beq.n	8003ca2 <mbus_poll_response+0xe2>
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003c9c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003ca0:	d907      	bls.n	8003cb2 <mbus_poll_response+0xf2>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_VALUE);
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	2103      	movs	r1, #3
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff ff6f 	bl	8003b8c <mbus_response>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	e14c      	b.n	8003f4c <mbus_poll_response+0x38c>
    if ((ctx->header.addr + ctx->header.num) > ctx->conf.discrete) {
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003cb8:	461a      	mov	r2, r3
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003cc0:	4413      	add	r3, r2
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	8892      	ldrh	r2, [r2, #4]
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	dd0b      	ble.n	8003ce2 <mbus_poll_response+0x122>
      return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_DATA_ADDRESS);
 8003cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cce:	2102      	movs	r1, #2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff ff5b 	bl	8003b8c <mbus_response>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	e138      	b.n	8003f4c <mbus_poll_response+0x38c>
    break;
 8003cda:	bf00      	nop
 8003cdc:	e002      	b.n	8003ce4 <mbus_poll_response+0x124>
    break;
 8003cde:	bf00      	nop
 8003ce0:	e000      	b.n	8003ce4 <mbus_poll_response+0x124>
    break;
 8003ce2:	bf00      	nop
  }

  if (func != 0) {
 8003ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d006      	beq.n	8003cf8 <mbus_poll_response+0x138>
    return func(mb_context);
 8003cea:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4798      	blx	r3
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	e129      	b.n	8003f4c <mbus_poll_response+0x38c>
  }

  la = mbus_proto_address((Modbus_ConnectFuncType)ctx->header.func, (int*)&read);
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003cfe:	f107 020c 	add.w	r2, r7, #12
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fb9b 	bl	8004440 <mbus_proto_address>
 8003d0a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (la > 0) {
 8003d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	dd06      	ble.n	8003d20 <mbus_poll_response+0x160>
    la += ctx->header.addr;
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003d18:	461a      	mov	r2, r3
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	4413      	add	r3, r2
 8003d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  if (la < 50001) {
 8003d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d22:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003d26:	4293      	cmp	r3, r2
 8003d28:	f300 8109 	bgt.w	8003f3e <mbus_poll_response+0x37e>
    ctx->conf.sendbuf[0] = ctx->header.devaddr;
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8003d36:	701a      	strb	r2, [r3, #0]
    ctx->conf.sendbuf[1] = ctx->header.func;
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 8003d44:	701a      	strb	r2, [r3, #0]
    ctx->conf.sendbuf[2] = ctx->header.num * 2;
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	3302      	adds	r3, #2
 8003d54:	0052      	lsls	r2, r2, #1
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]
    if (read && ctx->conf.read) {
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d04d      	beq.n	8003dfc <mbus_poll_response+0x23c>
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d049      	beq.n	8003dfc <mbus_poll_response+0x23c>
      g_userError = MBUS_RESPONSE_OK;
 8003d68:	4b30      	ldr	r3, [pc, #192]	; (8003e2c <mbus_poll_response+0x26c>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ctx->header.num; i++) {
 8003d6e:	2300      	movs	r3, #0
 8003d70:	623b      	str	r3, [r7, #32]
 8003d72:	e01f      	b.n	8003db4 <mbus_poll_response+0x1f4>
        
        d = ctx->conf.read(la + i);
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d7a:	6a3a      	ldr	r2, [r7, #32]
 8003d7c:	440a      	add	r2, r1
 8003d7e:	4610      	mov	r0, r2
 8003d80:	4798      	blx	r3
 8003d82:	4603      	mov	r3, r0
 8003d84:	82fb      	strh	r3, [r7, #22]
        ctx->conf.sendbuf[3 + (i << 1)] = d >> 8;
 8003d86:	8afb      	ldrh	r3, [r7, #22]
 8003d88:	0a1b      	lsrs	r3, r3, #8
 8003d8a:	b299      	uxth	r1, r3
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	6a3a      	ldr	r2, [r7, #32]
 8003d92:	0052      	lsls	r2, r2, #1
 8003d94:	3203      	adds	r2, #3
 8003d96:	4413      	add	r3, r2
 8003d98:	b2ca      	uxtb	r2, r1
 8003d9a:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[3 + (i << 1) + 1] = d & 0xFF;
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	699a      	ldr	r2, [r3, #24]
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	3304      	adds	r3, #4
 8003da6:	4413      	add	r3, r2
 8003da8:	8afa      	ldrh	r2, [r7, #22]
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < ctx->header.num; i++) {
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	3301      	adds	r3, #1
 8003db2:	623b      	str	r3, [r7, #32]
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003dba:	461a      	mov	r2, r3
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	dbd8      	blt.n	8003d74 <mbus_poll_response+0x1b4>
      }
      if (g_userError == MBUS_RESPONSE_OK) {
 8003dc2:	4b1a      	ldr	r3, [pc, #104]	; (8003e2c <mbus_poll_response+0x26c>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10e      	bne.n	8003de8 <mbus_poll_response+0x228>
          return mbus_send_data(mb_context, 3 + ctx->conf.sendbuf[2]);
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	3302      	adds	r3, #2
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3303      	adds	r3, #3
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ddc:	4611      	mov	r1, r2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 faca 	bl	8004378 <mbus_send_data>
 8003de4:	4603      	mov	r3, r0
 8003de6:	e0b1      	b.n	8003f4c <mbus_poll_response+0x38c>
      }else {
          return mbus_response(mb_context, g_userError);
 8003de8:	4b10      	ldr	r3, [pc, #64]	; (8003e2c <mbus_poll_response+0x26c>)
 8003dea:	781a      	ldrb	r2, [r3, #0]
 8003dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df0:	4611      	mov	r1, r2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff feca 	bl	8003b8c <mbus_response>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	e0a7      	b.n	8003f4c <mbus_poll_response+0x38c>
      }
    } else if (ctx->conf.write) {
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 809c 	beq.w	8003f3e <mbus_poll_response+0x37e>
      uint16_t *value;
      ctx->conf.sendbuf[2] = 0;
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]
      switch (ctx->header.func) {
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003e16:	2b06      	cmp	r3, #6
 8003e18:	dc02      	bgt.n	8003e20 <mbus_poll_response+0x260>
 8003e1a:	2b05      	cmp	r3, #5
 8003e1c:	da08      	bge.n	8003e30 <mbus_poll_response+0x270>
 8003e1e:	e08e      	b.n	8003f3e <mbus_poll_response+0x37e>
 8003e20:	2b10      	cmp	r3, #16
 8003e22:	d037      	beq.n	8003e94 <mbus_poll_response+0x2d4>
 8003e24:	e08b      	b.n	8003f3e <mbus_poll_response+0x37e>
 8003e26:	bf00      	nop
 8003e28:	200009ac 	.word	0x200009ac
 8003e2c:	20000a40 	.word	0x20000a40
      case MBUS_FUNC_WRITE_REG:
      case MBUS_FUNC_WRITE_COIL:
        // in both these cases, we should return the same packet that we
        // received. in both cases, the packes have 6 bytes of data + 2 CRC
        // bytes = 8 bytes
        value = (uint16_t *)ctx->conf.recvbuf;
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	613b      	str	r3, [r7, #16]
        ctx->conf.write(la, *value);
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	8812      	ldrh	r2, [r2, #0]
 8003e40:	4611      	mov	r1, r2
 8003e42:	4798      	blx	r3
        ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003e4a:	0a1b      	lsrs	r3, r3, #8
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	3302      	adds	r3, #2
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	3303      	adds	r3, #3
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[4] = ctx->conf.recvbuf[1];
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	6a1a      	ldr	r2, [r3, #32]
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	3304      	adds	r3, #4
 8003e72:	7852      	ldrb	r2, [r2, #1]
 8003e74:	701a      	strb	r2, [r3, #0]
        ctx->conf.sendbuf[5] = ctx->conf.recvbuf[0];
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	6a1a      	ldr	r2, [r3, #32]
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	3305      	adds	r3, #5
 8003e80:	7812      	ldrb	r2, [r2, #0]
 8003e82:	701a      	strb	r2, [r3, #0]
        return mbus_send_data(mb_context, 6);
 8003e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e88:	2106      	movs	r1, #6
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fa74 	bl	8004378 <mbus_send_data>
 8003e90:	4603      	mov	r3, r0
 8003e92:	e05b      	b.n	8003f4c <mbus_poll_response+0x38c>

      case MBUS_FUNC_WRITE_REGS:
    	  for (int i = 0; i < ctx->header.num; i++) {
 8003e94:	2300      	movs	r3, #0
 8003e96:	61fb      	str	r3, [r7, #28]
 8003e98:	e01e      	b.n	8003ed8 <mbus_poll_response+0x318>
    		  uint16_t regvalue = ((uint16_t)ctx->conf.recvbuf[i*2]<<8)|((uint16_t)ctx->conf.recvbuf[i*2+1]);
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	0052      	lsls	r2, r2, #1
 8003ea2:	4413      	add	r3, r2
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	b21a      	sxth	r2, r3
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	6a19      	ldr	r1, [r3, #32]
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	440b      	add	r3, r1
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	b21b      	sxth	r3, r3
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	b21b      	sxth	r3, r3
 8003ebe:	82bb      	strh	r3, [r7, #20]
    		  ctx->conf.write(la + i, regvalue);
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	440a      	add	r2, r1
 8003eca:	4610      	mov	r0, r2
 8003ecc:	8aba      	ldrh	r2, [r7, #20]
 8003ece:	4611      	mov	r1, r2
 8003ed0:	4798      	blx	r3
    	  for (int i = 0; i < ctx->header.num; i++) {
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	61fb      	str	r3, [r7, #28]
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003ede:	461a      	mov	r2, r3
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	dbd9      	blt.n	8003e9a <mbus_poll_response+0x2da>
    	  }
    	  ctx->conf.sendbuf[2] = ctx->header.addr >> 8;
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8003eec:	0a1b      	lsrs	r3, r3, #8
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	3302      	adds	r3, #2
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]
    	  ctx->conf.sendbuf[3] = ctx->header.addr & 0xFF;
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	3303      	adds	r3, #3
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]
    	  ctx->conf.sendbuf[4] = ctx->header.num >> 8;
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003f10:	0a1b      	lsrs	r3, r3, #8
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]
    	  ctx->conf.sendbuf[5] = ctx->header.num & 0xFF;
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	3305      	adds	r3, #5
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]
    	  return mbus_send_data(mb_context, 6);
 8003f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f32:	2106      	movs	r1, #6
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fa1f 	bl	8004378 <mbus_send_data>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	e006      	b.n	8003f4c <mbus_poll_response+0x38c>
      } // end of switch
    }
  }
  return mbus_response(mb_context, MBUS_RESPONSE_ILLEGAL_FUNCTION);
 8003f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f42:	2101      	movs	r1, #1
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff fe21 	bl	8003b8c <mbus_response>
 8003f4a:	4603      	mov	r3, r0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3730      	adds	r7, #48	; 0x30
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <mbus_poll>:
/*
 * function mbus_close()
 * close modbus context
 * return: none
 */
mbus_status_t mbus_poll(mbus_t mb_context, uint8_t byte) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	460a      	mov	r2, r1
 8003f5e:	71fb      	strb	r3, [r7, #7]
 8003f60:	4613      	mov	r3, r2
 8003f62:	71bb      	strb	r3, [r7, #6]
  // State machine
  _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 8003f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f68:	2294      	movs	r2, #148	; 0x94
 8003f6a:	fb02 f303 	mul.w	r3, r2, r3
 8003f6e:	4abf      	ldr	r2, [pc, #764]	; (800426c <mbus_poll+0x318>)
 8003f70:	4413      	add	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]

  if (mbus_tickcount() - ctx->timer > 4) {
 8003f74:	f000 faee 	bl	8004554 <mbus_tickcount>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d904      	bls.n	8003f8e <mbus_poll+0x3a>
    mbus_flush(mb_context);
 8003f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff fddb 	bl	8003b44 <mbus_flush>
  }
  ctx->timer = mbus_tickcount();
 8003f8e:	f000 fae1 	bl	8004554 <mbus_tickcount>
 8003f92:	4602      	mov	r2, r0
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	62da      	str	r2, [r3, #44]	; 0x2c

  switch (ctx->state) {
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003f9e:	2b0e      	cmp	r3, #14
 8003fa0:	f200 816e 	bhi.w	8004280 <mbus_poll+0x32c>
 8003fa4:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <mbus_poll+0x58>)
 8003fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003faa:	bf00      	nop
 8003fac:	08003fe9 	.word	0x08003fe9
 8003fb0:	08004281 	.word	0x08004281
 8003fb4:	08004005 	.word	0x08004005
 8003fb8:	080040eb 	.word	0x080040eb
 8003fbc:	080040d3 	.word	0x080040d3
 8003fc0:	08004209 	.word	0x08004209
 8003fc4:	080041f1 	.word	0x080041f1
 8003fc8:	0800414f 	.word	0x0800414f
 8003fcc:	08004127 	.word	0x08004127
 8003fd0:	08004199 	.word	0x08004199
 8003fd4:	080041b3 	.word	0x080041b3
 8003fd8:	08004261 	.word	0x08004261
 8003fdc:	08004271 	.word	0x08004271
 8003fe0:	08004281 	.word	0x08004281
 8003fe4:	0800427b 	.word	0x0800427b
  case MBUS_STATE_IDLE:
    mbus_flush(mb_context);
 8003fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff fda9 	bl	8003b44 <mbus_flush>
    ctx->state = MBUS_STATE_FUNCTION;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.devaddr = byte;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	79ba      	ldrb	r2, [r7, #6]
 8003ffe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    break;
 8004002:	e146      	b.n	8004292 <mbus_poll+0x33e>
  case MBUS_STATE_FUNCTION:
    ctx->header.func = byte;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	79ba      	ldrb	r2, [r7, #6]
 8004008:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    switch (byte) {
 800400c:	79bb      	ldrb	r3, [r7, #6]
 800400e:	3b01      	subs	r3, #1
 8004010:	2b0f      	cmp	r3, #15
 8004012:	d857      	bhi.n	80040c4 <mbus_poll+0x170>
 8004014:	a201      	add	r2, pc, #4	; (adr r2, 800401c <mbus_poll+0xc8>)
 8004016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401a:	bf00      	nop
 800401c:	08004091 	.word	0x08004091
 8004020:	080040c5 	.word	0x080040c5
 8004024:	08004091 	.word	0x08004091
 8004028:	08004091 	.word	0x08004091
 800402c:	080040ab 	.word	0x080040ab
 8004030:	0800405d 	.word	0x0800405d
 8004034:	080040c5 	.word	0x080040c5
 8004038:	080040c5 	.word	0x080040c5
 800403c:	080040c5 	.word	0x080040c5
 8004040:	080040c5 	.word	0x080040c5
 8004044:	080040c5 	.word	0x080040c5
 8004048:	080040c5 	.word	0x080040c5
 800404c:	080040c5 	.word	0x080040c5
 8004050:	080040c5 	.word	0x080040c5
 8004054:	08004077 	.word	0x08004077
 8004058:	08004077 	.word	0x08004077
    case MBUS_FUNC_WRITE_REG:
      ctx->header.rnum = 1;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2201      	movs	r2, #1
 8004060:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->header.num = 1;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2201      	movs	r2, #1
 8004068:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      ctx->state = MBUS_STATE_REGADDR_HI;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2204      	movs	r2, #4
 8004070:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      break;
 8004074:	e02c      	b.n	80040d0 <mbus_poll+0x17c>
    case MBUS_FUNC_WRITE_REGS:
    case MBUS_FUNC_WRITE_COILS:
      ctx->header.rnum = 1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->header.num = 0;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      ctx->state = MBUS_STATE_REGADDR_HI;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2204      	movs	r2, #4
 800408a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      break;
 800408e:	e01f      	b.n	80040d0 <mbus_poll+0x17c>
    case MBUS_FUNC_READ_INPUT_REGS:
    case MBUS_FUNC_READ_COILS:
    case MBUS_FUNC_READ_REGS:
      ctx->state = MBUS_STATE_REGADDR_HI;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2204      	movs	r2, #4
 8004094:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      ctx->header.rnum = 0;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->header.num = 0;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      break;
 80040a8:	e012      	b.n	80040d0 <mbus_poll+0x17c>
    case MBUS_FUNC_WRITE_COIL:
      ctx->header.rnum = 1;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->header.num = 1;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
      ctx->state = MBUS_STATE_REGADDR_HI;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2204      	movs	r2, #4
 80040be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      break;
 80040c2:	e005      	b.n	80040d0 <mbus_poll+0x17c>
    default:
      // ctx->state = MBUS_STATE_IDLE;
      mbus_flush(mb_context);
 80040c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff fd3b 	bl	8003b44 <mbus_flush>
      break;
 80040ce:	bf00      	nop
    }
    break;
 80040d0:	e0df      	b.n	8004292 <mbus_poll+0x33e>
  case MBUS_STATE_REGADDR_HI:
    ctx->state = MBUS_STATE_REGADDR_LO;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2203      	movs	r2, #3
 80040d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.addr = byte << 8;
 80040da:	79bb      	ldrb	r3, [r7, #6]
 80040dc:	b29b      	uxth	r3, r3
 80040de:	021b      	lsls	r3, r3, #8
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    break;
 80040e8:	e0d3      	b.n	8004292 <mbus_poll+0x33e>
  case MBUS_STATE_REGADDR_LO:
    ctx->header.addr |= byte;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 80040f0:	79bb      	ldrb	r3, [r7, #6]
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	4313      	orrs	r3, r2
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    if (ctx->header.num == 1 && ctx->header.rnum == 1) {
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8004104:	2b01      	cmp	r3, #1
 8004106:	d109      	bne.n	800411c <mbus_poll+0x1c8>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800410e:	2b01      	cmp	r3, #1
 8004110:	d104      	bne.n	800411c <mbus_poll+0x1c8>
      ctx->state = MBUS_STATE_DATA_HI;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2208      	movs	r2, #8
 8004116:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    } else {
      ctx->state = MBUS_STATE_REGNUM_HI;
    }
    break;
 800411a:	e0ba      	b.n	8004292 <mbus_poll+0x33e>
      ctx->state = MBUS_STATE_REGNUM_HI;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2206      	movs	r2, #6
 8004120:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8004124:	e0b5      	b.n	8004292 <mbus_poll+0x33e>
  case MBUS_STATE_DATA_HI:
    ctx->state = MBUS_STATE_DATA_LO;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2207      	movs	r2, #7
 800412a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum) + 1] = byte;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a1a      	ldr	r2, [r3, #32]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8004138:	4619      	mov	r1, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8004140:	1acb      	subs	r3, r1, r3
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	3301      	adds	r3, #1
 8004146:	4413      	add	r3, r2
 8004148:	79ba      	ldrb	r2, [r7, #6]
 800414a:	701a      	strb	r2, [r3, #0]
    break;
 800414c:	e0a1      	b.n	8004292 <mbus_poll+0x33e>
  case MBUS_STATE_DATA_LO:
    ctx->conf.recvbuf[2 * (ctx->header.num - ctx->header.rnum)] = byte;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 8004158:	4611      	mov	r1, r2
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	f8b2 2086 	ldrh.w	r2, [r2, #134]	; 0x86
 8004160:	1a8a      	subs	r2, r1, r2
 8004162:	0052      	lsls	r2, r2, #1
 8004164:	4413      	add	r3, r2
 8004166:	79ba      	ldrb	r2, [r7, #6]
 8004168:	701a      	strb	r2, [r3, #0]
    ctx->header.rnum--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    if (ctx->header.rnum == 0) {
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8004180:	2b00      	cmp	r3, #0
 8004182:	d104      	bne.n	800418e <mbus_poll+0x23a>
      ctx->state = MBUS_STATE_CRC_LO;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	220b      	movs	r2, #11
 8004188:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    } else {
      ctx->state = MBUS_STATE_DATA_HI;
    }
    break;
 800418c:	e081      	b.n	8004292 <mbus_poll+0x33e>
      ctx->state = MBUS_STATE_DATA_HI;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2208      	movs	r2, #8
 8004192:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8004196:	e07c      	b.n	8004292 <mbus_poll+0x33e>
  case MBUS_STATE_DATA_SIZE:
    ctx->state = MBUS_STATE_DATA;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	220a      	movs	r2, #10
 800419c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.size = byte;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	79ba      	ldrb	r2, [r7, #6]
 80041a4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    ctx->header.rsize = byte;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	79ba      	ldrb	r2, [r7, #6]
 80041ac:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    break;
 80041b0:	e06f      	b.n	8004292 <mbus_poll+0x33e>
  case MBUS_STATE_DATA:
    ctx->conf.recvbuf[ctx->header.size - ctx->header.rsize] = byte;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	f892 2088 	ldrb.w	r2, [r2, #136]	; 0x88
 80041bc:	4611      	mov	r1, r2
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	f892 2089 	ldrb.w	r2, [r2, #137]	; 0x89
 80041c4:	1a8a      	subs	r2, r1, r2
 80041c6:	4413      	add	r3, r2
 80041c8:	79ba      	ldrb	r2, [r7, #6]
 80041ca:	701a      	strb	r2, [r3, #0]
    ctx->header.rsize--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    if (ctx->header.rsize == 0) {
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d152      	bne.n	800428c <mbus_poll+0x338>
      ctx->state = MBUS_STATE_CRC_LO;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	220b      	movs	r2, #11
 80041ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }
    break;
 80041ee:	e04d      	b.n	800428c <mbus_poll+0x338>
  case MBUS_STATE_REGNUM_HI:
    ctx->state = MBUS_STATE_REGNUM_LO;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2205      	movs	r2, #5
 80041f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.num = byte << 8;
 80041f8:	79bb      	ldrb	r3, [r7, #6]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    break;
 8004206:	e044      	b.n	8004292 <mbus_poll+0x33e>
  case MBUS_STATE_REGNUM_LO:
    ctx->state = MBUS_STATE_CRC_LO;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	220b      	movs	r2, #11
 800420c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    ctx->header.num |= byte;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8004216:	79bb      	ldrb	r3, [r7, #6]
 8004218:	b29b      	uxth	r3, r3
 800421a:	4313      	orrs	r3, r2
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    if (ctx->header.rnum == 0) {
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800422a:	2b00      	cmp	r3, #0
 800422c:	d104      	bne.n	8004238 <mbus_poll+0x2e4>
      ctx->state = MBUS_STATE_CRC_LO;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	220b      	movs	r2, #11
 8004232:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      if (ctx->header.func == MBUS_FUNC_WRITE_REGS) {
        ctx->state = MBUS_STATE_DATA_SIZE;
      }
    }

    break;
 8004236:	e02b      	b.n	8004290 <mbus_poll+0x33c>
      ctx->header.rnum = ctx->header.num;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
      ctx->state = MBUS_STATE_DATA_HI;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2208      	movs	r2, #8
 8004248:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      if (ctx->header.func == MBUS_FUNC_WRITE_REGS) {
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004252:	2b10      	cmp	r3, #16
 8004254:	d11c      	bne.n	8004290 <mbus_poll+0x33c>
        ctx->state = MBUS_STATE_DATA_SIZE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2209      	movs	r2, #9
 800425a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 800425e:	e017      	b.n	8004290 <mbus_poll+0x33c>
  case MBUS_STATE_CRC_LO:
    ctx->state = MBUS_STATE_CRC_HI;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	220c      	movs	r2, #12
 8004264:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8004268:	e013      	b.n	8004292 <mbus_poll+0x33e>
 800426a:	bf00      	nop
 800426c:	200009ac 	.word	0x200009ac
  case MBUS_STATE_CRC_HI:
    ctx->state = MBUS_STATE_FINISH;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	220d      	movs	r2, #13
 8004274:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8004278:	e00b      	b.n	8004292 <mbus_poll+0x33e>
  // We can't processing any more before callback not returned
  case MBUS_STATE_RESPONSE:
    return MBUS_ERROR;
 800427a:	f04f 33ff 	mov.w	r3, #4294967295
 800427e:	e04c      	b.n	800431a <mbus_poll+0x3c6>
  default:
    mbus_flush(mb_context);
 8004280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff fc5d 	bl	8003b44 <mbus_flush>
    break;
 800428a:	e002      	b.n	8004292 <mbus_poll+0x33e>
    break;
 800428c:	bf00      	nop
 800428e:	e000      	b.n	8004292 <mbus_poll+0x33e>
    break;
 8004290:	bf00      	nop
  }

  ctx->crc16 = mbus_crc16(ctx->crc16, byte);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004296:	79ba      	ldrb	r2, [r7, #6]
 8004298:	4611      	mov	r1, r2
 800429a:	4618      	mov	r0, r3
 800429c:	f000 f92e 	bl	80044fc <mbus_crc16>
 80042a0:	4603      	mov	r3, r0
 80042a2:	461a      	mov	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (ctx->state == MBUS_STATE_FINISH) {
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80042ae:	2b0d      	cmp	r3, #13
 80042b0:	d132      	bne.n	8004318 <mbus_poll+0x3c4>
    // CRC error
    if (ctx->crc16 != 0) {
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d007      	beq.n	80042ca <mbus_poll+0x376>
      mbus_flush(mb_context);
 80042ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff fc40 	bl	8003b44 <mbus_flush>
      return MBUS_ERROR;
 80042c4:	f04f 33ff 	mov.w	r3, #4294967295
 80042c8:	e027      	b.n	800431a <mbus_poll+0x3c6>
    }

    // TODO: Add broadcast messages
    if (ctx->header.devaddr == ctx->conf.devaddr) {
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d11a      	bne.n	800430e <mbus_poll+0x3ba>
      ctx->state = MBUS_STATE_RESPONSE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	220e      	movs	r2, #14
 80042dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      if (mbus_poll_response(mb_context) == MBUS_OK) {
 80042e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff fc6b 	bl	8003bc0 <mbus_poll_response>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d106      	bne.n	80042fe <mbus_poll+0x3aa>
        mbus_flush(mb_context);
 80042f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff fc25 	bl	8003b44 <mbus_flush>
        return MBUS_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e00d      	b.n	800431a <mbus_poll+0x3c6>
      }
      mbus_flush(mb_context);
 80042fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fc1e 	bl	8003b44 <mbus_flush>
      return MBUS_ERROR;
 8004308:	f04f 33ff 	mov.w	r3, #4294967295
 800430c:	e005      	b.n	800431a <mbus_poll+0x3c6>
    }
    mbus_flush(mb_context);
 800430e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff fc16 	bl	8003b44 <mbus_flush>
  }
  return MBUS_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop

08004324 <mbus_send_error>:
  if (g_mbusContext[mb_context].open)
    return (mbus_context_t)&g_mbusContext[mb_context];
  return 0;
}

mbus_status_t mbus_send_error(mbus_t mb_context, Modbus_ResponseType response) {
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	460a      	mov	r2, r1
 800432e:	71fb      	strb	r3, [r7, #7]
 8004330:	4613      	mov	r3, r2
 8004332:	71bb      	strb	r3, [r7, #6]
  uint16_t *pbuf = (uint16_t *)(g_mbusContext[mb_context].conf.sendbuf + 2);
 8004334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004338:	4a0d      	ldr	r2, [pc, #52]	; (8004370 <mbus_send_error+0x4c>)
 800433a:	2194      	movs	r1, #148	; 0x94
 800433c:	fb01 f303 	mul.w	r3, r1, r3
 8004340:	4413      	add	r3, r2
 8004342:	3318      	adds	r3, #24
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3302      	adds	r3, #2
 8004348:	60fb      	str	r3, [r7, #12]
  *pbuf = 0x8300 | (uint8_t)response;
 800434a:	79bb      	ldrb	r3, [r7, #6]
 800434c:	b21a      	sxth	r2, r3
 800434e:	4b09      	ldr	r3, [pc, #36]	; (8004374 <mbus_send_error+0x50>)
 8004350:	4313      	orrs	r3, r2
 8004352:	b21b      	sxth	r3, r3
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	801a      	strh	r2, [r3, #0]
  return mbus_send_data(mb_context, 4);
 800435a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435e:	2104      	movs	r1, #4
 8004360:	4618      	mov	r0, r3
 8004362:	f000 f809 	bl	8004378 <mbus_send_data>
 8004366:	4603      	mov	r3, r0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	200009ac 	.word	0x200009ac
 8004374:	ffff8300 	.word	0xffff8300

08004378 <mbus_send_data>:

mbus_status_t mbus_send_data(mbus_t mb_context, uint16_t size) {
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	460a      	mov	r2, r1
 8004382:	71fb      	strb	r3, [r7, #7]
 8004384:	4613      	mov	r3, r2
 8004386:	80bb      	strh	r3, [r7, #4]
  // if size > ( conf.send_sz-2) error
  uint16_t crc32 = 0xFFFF;
 8004388:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800438c:	82fb      	strh	r3, [r7, #22]
  const _stmodbus_context_t *ctx = &g_mbusContext[mb_context];
 800438e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004392:	2294      	movs	r2, #148	; 0x94
 8004394:	fb02 f303 	mul.w	r3, r2, r3
 8004398:	4a28      	ldr	r2, [pc, #160]	; (800443c <mbus_send_data+0xc4>)
 800439a:	4413      	add	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]
  uint8_t *pbuf = ctx->conf.sendbuf;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	60bb      	str	r3, [r7, #8]
  if (ctx->conf.send == 0 || pbuf == 0 || ctx->conf.sendbuf_sz < (size + 2))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <mbus_send_data+0x46>
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <mbus_send_data+0x46>
 80043b2:	88bb      	ldrh	r3, [r7, #4]
 80043b4:	3301      	adds	r3, #1
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	8b92      	ldrh	r2, [r2, #28]
 80043ba:	4293      	cmp	r3, r2
 80043bc:	db02      	blt.n	80043c4 <mbus_send_data+0x4c>
    return MBUS_ERROR;
 80043be:	f04f 33ff 	mov.w	r3, #4294967295
 80043c2:	e037      	b.n	8004434 <mbus_send_data+0xbc>
  for (int i = 0; i < size; i++) {
 80043c4:	2300      	movs	r3, #0
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	e00d      	b.n	80043e6 <mbus_send_data+0x6e>
    crc32 = mbus_crc16(crc32, pbuf[i]);
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	4413      	add	r3, r2
 80043d0:	781a      	ldrb	r2, [r3, #0]
 80043d2:	8afb      	ldrh	r3, [r7, #22]
 80043d4:	4611      	mov	r1, r2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 f890 	bl	80044fc <mbus_crc16>
 80043dc:	4603      	mov	r3, r0
 80043de:	82fb      	strh	r3, [r7, #22]
  for (int i = 0; i < size; i++) {
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	3301      	adds	r3, #1
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	88bb      	ldrh	r3, [r7, #4]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	dbed      	blt.n	80043ca <mbus_send_data+0x52>
  }
  pbuf[size++] = crc32 & 0xFF;
 80043ee:	88bb      	ldrh	r3, [r7, #4]
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	80ba      	strh	r2, [r7, #4]
 80043f4:	461a      	mov	r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	4413      	add	r3, r2
 80043fa:	8afa      	ldrh	r2, [r7, #22]
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	701a      	strb	r2, [r3, #0]
  pbuf[size++] = (crc32 >> 8);
 8004400:	8afb      	ldrh	r3, [r7, #22]
 8004402:	0a1b      	lsrs	r3, r3, #8
 8004404:	b29a      	uxth	r2, r3
 8004406:	88bb      	ldrh	r3, [r7, #4]
 8004408:	1c59      	adds	r1, r3, #1
 800440a:	80b9      	strh	r1, [r7, #4]
 800440c:	4619      	mov	r1, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	440b      	add	r3, r1
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	701a      	strb	r2, [r3, #0]

  if (ctx->conf.send(mb_context, pbuf, size) != size)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	88ba      	ldrh	r2, [r7, #4]
 800441c:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8004420:	68b9      	ldr	r1, [r7, #8]
 8004422:	4798      	blx	r3
 8004424:	4602      	mov	r2, r0
 8004426:	88bb      	ldrh	r3, [r7, #4]
 8004428:	429a      	cmp	r2, r3
 800442a:	d002      	beq.n	8004432 <mbus_send_data+0xba>
    return MBUS_ERROR;
 800442c:	f04f 33ff 	mov.w	r3, #4294967295
 8004430:	e000      	b.n	8004434 <mbus_send_data+0xbc>
  return MBUS_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	200009ac 	.word	0x200009ac

08004440 <mbus_proto_address>:
  }
#endif
  return MBUS_ERROR;
}

int mbus_proto_address( Modbus_ConnectFuncType func, int *r) {
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	4603      	mov	r3, r0
 8004448:	6039      	str	r1, [r7, #0]
 800444a:	71fb      	strb	r3, [r7, #7]
  int adr = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
  *r = 1;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2201      	movs	r2, #1
 8004454:	601a      	str	r2, [r3, #0]
  switch (func) {
 8004456:	79fb      	ldrb	r3, [r7, #7]
 8004458:	3b01      	subs	r3, #1
 800445a:	2b16      	cmp	r3, #22
 800445c:	d845      	bhi.n	80044ea <mbus_proto_address+0xaa>
 800445e:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <mbus_proto_address+0x24>)
 8004460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004464:	080044e5 	.word	0x080044e5
 8004468:	080044d7 	.word	0x080044d7
 800446c:	080044c7 	.word	0x080044c7
 8004470:	080044cf 	.word	0x080044cf
 8004474:	080044df 	.word	0x080044df
 8004478:	080044c1 	.word	0x080044c1
 800447c:	080044eb 	.word	0x080044eb
 8004480:	080044eb 	.word	0x080044eb
 8004484:	080044eb 	.word	0x080044eb
 8004488:	080044eb 	.word	0x080044eb
 800448c:	080044eb 	.word	0x080044eb
 8004490:	080044eb 	.word	0x080044eb
 8004494:	080044eb 	.word	0x080044eb
 8004498:	080044eb 	.word	0x080044eb
 800449c:	080044df 	.word	0x080044df
 80044a0:	080044c1 	.word	0x080044c1
 80044a4:	080044eb 	.word	0x080044eb
 80044a8:	080044eb 	.word	0x080044eb
 80044ac:	080044eb 	.word	0x080044eb
 80044b0:	080044eb 	.word	0x080044eb
 80044b4:	080044eb 	.word	0x080044eb
 80044b8:	080044c1 	.word	0x080044c1
 80044bc:	080044c1 	.word	0x080044c1
  case MBUS_FUNC_WRITE_REG:
  case MBUS_FUNC_WRITE_REGS:
  case MBUS_FUNC_READ_WRITE_MASK_REGS:
  case MBUS_FUNC_READ_WRITE_REGS:
    *r = 0;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
  case MBUS_FUNC_READ_REGS:
    adr = 40001;
 80044c6:	f649 4341 	movw	r3, #40001	; 0x9c41
 80044ca:	60fb      	str	r3, [r7, #12]
    break;
 80044cc:	e00e      	b.n	80044ec <mbus_proto_address+0xac>
  case MBUS_FUNC_READ_INPUT_REGS:
    adr = 30001;
 80044ce:	f247 5331 	movw	r3, #30001	; 0x7531
 80044d2:	60fb      	str	r3, [r7, #12]
    break;
 80044d4:	e00a      	b.n	80044ec <mbus_proto_address+0xac>
  case MBUS_FUNC_READ_DISCRETE:
    adr = 10001;
 80044d6:	f242 7311 	movw	r3, #10001	; 0x2711
 80044da:	60fb      	str	r3, [r7, #12]
    break;
 80044dc:	e006      	b.n	80044ec <mbus_proto_address+0xac>
  case MBUS_FUNC_WRITE_COILS:
  case MBUS_FUNC_WRITE_COIL:
    *r = 0;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]
  case MBUS_FUNC_READ_COILS:
    adr = 0001;
 80044e4:	2301      	movs	r3, #1
 80044e6:	60fb      	str	r3, [r7, #12]
    break;
 80044e8:	e000      	b.n	80044ec <mbus_proto_address+0xac>
  default:
    break;
 80044ea:	bf00      	nop
  }
  return adr;
 80044ec:	68fb      	ldr	r3, [r7, #12]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop

080044fc <mbus_crc16>:
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}

*/

uint16_t mbus_crc16(uint16_t crc16, uint8_t byte) {
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	460a      	mov	r2, r1
 8004506:	80fb      	strh	r3, [r7, #6]
 8004508:	4613      	mov	r3, r2
 800450a:	717b      	strb	r3, [r7, #5]
  const int index = (crc16 & 0xFF) ^ byte;
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	b2da      	uxtb	r2, r3
 8004510:	797b      	ldrb	r3, [r7, #5]
 8004512:	4053      	eors	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]
  return (aucCRCLo[index] << 8) | ((crc16 >> 8) ^ aucCRCHi[index]);
 8004516:	4a0d      	ldr	r2, [pc, #52]	; (800454c <mbus_crc16+0x50>)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4413      	add	r3, r2
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	b21a      	sxth	r2, r3
 8004522:	88fb      	ldrh	r3, [r7, #6]
 8004524:	0a1b      	lsrs	r3, r3, #8
 8004526:	b299      	uxth	r1, r3
 8004528:	4809      	ldr	r0, [pc, #36]	; (8004550 <mbus_crc16+0x54>)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4403      	add	r3, r0
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	b29b      	uxth	r3, r3
 8004532:	404b      	eors	r3, r1
 8004534:	b29b      	uxth	r3, r3
 8004536:	b21b      	sxth	r3, r3
 8004538:	4313      	orrs	r3, r2
 800453a:	b21b      	sxth	r3, r3
 800453c:	b29b      	uxth	r3, r3
}
 800453e:	4618      	mov	r0, r3
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	0800d37c 	.word	0x0800d37c
 8004550:	0800d27c 	.word	0x0800d27c

08004554 <mbus_tickcount>:

uint32_t mbus_tickcount() { return 0; }
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
 8004558:	2300      	movs	r3, #0
 800455a:	4618      	mov	r0, r3
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004568:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <HAL_Init+0x40>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a0d      	ldr	r2, [pc, #52]	; (80045a4 <HAL_Init+0x40>)
 800456e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004572:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004574:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <HAL_Init+0x40>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a0a      	ldr	r2, [pc, #40]	; (80045a4 <HAL_Init+0x40>)
 800457a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800457e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004580:	4b08      	ldr	r3, [pc, #32]	; (80045a4 <HAL_Init+0x40>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a07      	ldr	r2, [pc, #28]	; (80045a4 <HAL_Init+0x40>)
 8004586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800458a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800458c:	2003      	movs	r0, #3
 800458e:	f000 fd41 	bl	8005014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004592:	200f      	movs	r0, #15
 8004594:	f000 f808 	bl	80045a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004598:	f7fd ff86 	bl	80024a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40023c00 	.word	0x40023c00

080045a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045b0:	4b12      	ldr	r3, [pc, #72]	; (80045fc <HAL_InitTick+0x54>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	4b12      	ldr	r3, [pc, #72]	; (8004600 <HAL_InitTick+0x58>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	4619      	mov	r1, r3
 80045ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045be:	fbb3 f3f1 	udiv	r3, r3, r1
 80045c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fd67 	bl	800509a <HAL_SYSTICK_Config>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e00e      	b.n	80045f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b0f      	cmp	r3, #15
 80045da:	d80a      	bhi.n	80045f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045dc:	2200      	movs	r2, #0
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	f04f 30ff 	mov.w	r0, #4294967295
 80045e4:	f000 fd21 	bl	800502a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045e8:	4a06      	ldr	r2, [pc, #24]	; (8004604 <HAL_InitTick+0x5c>)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	e000      	b.n	80045f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	200000ac 	.word	0x200000ac
 8004600:	200000b4 	.word	0x200000b4
 8004604:	200000b0 	.word	0x200000b0

08004608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <HAL_IncTick+0x20>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	461a      	mov	r2, r3
 8004612:	4b06      	ldr	r3, [pc, #24]	; (800462c <HAL_IncTick+0x24>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4413      	add	r3, r2
 8004618:	4a04      	ldr	r2, [pc, #16]	; (800462c <HAL_IncTick+0x24>)
 800461a:	6013      	str	r3, [r2, #0]
}
 800461c:	bf00      	nop
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	200000b4 	.word	0x200000b4
 800462c:	20000a44 	.word	0x20000a44

08004630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  return uwTick;
 8004634:	4b03      	ldr	r3, [pc, #12]	; (8004644 <HAL_GetTick+0x14>)
 8004636:	681b      	ldr	r3, [r3, #0]
}
 8004638:	4618      	mov	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000a44 	.word	0x20000a44

08004648 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e033      	b.n	80046c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d109      	bne.n	800467a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fd ff4a 	bl	8002500 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f003 0310 	and.w	r3, r3, #16
 8004682:	2b00      	cmp	r3, #0
 8004684:	d118      	bne.n	80046b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800468e:	f023 0302 	bic.w	r3, r3, #2
 8004692:	f043 0202 	orr.w	r2, r3, #2
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fa48 	bl	8004b30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	f023 0303 	bic.w	r3, r3, #3
 80046ae:	f043 0201 	orr.w	r2, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40
 80046b6:	e001      	b.n	80046bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_ADC_Start_DMA+0x1e>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e0ce      	b.n	800488c <HAL_ADC_Start_DMA+0x1bc>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b01      	cmp	r3, #1
 8004702:	d018      	beq.n	8004736 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004714:	4b5f      	ldr	r3, [pc, #380]	; (8004894 <HAL_ADC_Start_DMA+0x1c4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a5f      	ldr	r2, [pc, #380]	; (8004898 <HAL_ADC_Start_DMA+0x1c8>)
 800471a:	fba2 2303 	umull	r2, r3, r2, r3
 800471e:	0c9a      	lsrs	r2, r3, #18
 8004720:	4613      	mov	r3, r2
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	4413      	add	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004728:	e002      	b.n	8004730 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	3b01      	subs	r3, #1
 800472e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f9      	bne.n	800472a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004744:	d107      	bne.n	8004756 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004754:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b01      	cmp	r3, #1
 8004762:	f040 8086 	bne.w	8004872 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800476e:	f023 0301 	bic.w	r3, r3, #1
 8004772:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004784:	2b00      	cmp	r3, #0
 8004786:	d007      	beq.n	8004798 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004790:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a4:	d106      	bne.n	80047b4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047aa:	f023 0206 	bic.w	r2, r3, #6
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	645a      	str	r2, [r3, #68]	; 0x44
 80047b2:	e002      	b.n	80047ba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047c2:	4b36      	ldr	r3, [pc, #216]	; (800489c <HAL_ADC_Start_DMA+0x1cc>)
 80047c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	4a35      	ldr	r2, [pc, #212]	; (80048a0 <HAL_ADC_Start_DMA+0x1d0>)
 80047cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	4a34      	ldr	r2, [pc, #208]	; (80048a4 <HAL_ADC_Start_DMA+0x1d4>)
 80047d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	4a33      	ldr	r2, [pc, #204]	; (80048a8 <HAL_ADC_Start_DMA+0x1d8>)
 80047dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80047e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80047f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004806:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	334c      	adds	r3, #76	; 0x4c
 8004812:	4619      	mov	r1, r3
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f000 fd58 	bl	80052cc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 031f 	and.w	r3, r3, #31
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10f      	bne.n	8004848 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d129      	bne.n	800488a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004844:	609a      	str	r2, [r3, #8]
 8004846:	e020      	b.n	800488a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a17      	ldr	r2, [pc, #92]	; (80048ac <HAL_ADC_Start_DMA+0x1dc>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d11b      	bne.n	800488a <HAL_ADC_Start_DMA+0x1ba>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d114      	bne.n	800488a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800486e:	609a      	str	r2, [r3, #8]
 8004870:	e00b      	b.n	800488a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f043 0210 	orr.w	r2, r3, #16
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004882:	f043 0201 	orr.w	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	200000ac 	.word	0x200000ac
 8004898:	431bde83 	.word	0x431bde83
 800489c:	40012300 	.word	0x40012300
 80048a0:	08004d29 	.word	0x08004d29
 80048a4:	08004de3 	.word	0x08004de3
 80048a8:	08004dff 	.word	0x08004dff
 80048ac:	40012000 	.word	0x40012000

080048b0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_ADC_ConfigChannel+0x1c>
 8004904:	2302      	movs	r3, #2
 8004906:	e105      	b.n	8004b14 <HAL_ADC_ConfigChannel+0x228>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b09      	cmp	r3, #9
 8004916:	d925      	bls.n	8004964 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68d9      	ldr	r1, [r3, #12]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	461a      	mov	r2, r3
 8004926:	4613      	mov	r3, r2
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	4413      	add	r3, r2
 800492c:	3b1e      	subs	r3, #30
 800492e:	2207      	movs	r2, #7
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	43da      	mvns	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	400a      	ands	r2, r1
 800493c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68d9      	ldr	r1, [r3, #12]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	b29b      	uxth	r3, r3
 800494e:	4618      	mov	r0, r3
 8004950:	4603      	mov	r3, r0
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	4403      	add	r3, r0
 8004956:	3b1e      	subs	r3, #30
 8004958:	409a      	lsls	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	e022      	b.n	80049aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6919      	ldr	r1, [r3, #16]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	b29b      	uxth	r3, r3
 8004970:	461a      	mov	r2, r3
 8004972:	4613      	mov	r3, r2
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	4413      	add	r3, r2
 8004978:	2207      	movs	r2, #7
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	43da      	mvns	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	400a      	ands	r2, r1
 8004986:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6919      	ldr	r1, [r3, #16]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	689a      	ldr	r2, [r3, #8]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	b29b      	uxth	r3, r3
 8004998:	4618      	mov	r0, r3
 800499a:	4603      	mov	r3, r0
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	4403      	add	r3, r0
 80049a0:	409a      	lsls	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b06      	cmp	r3, #6
 80049b0:	d824      	bhi.n	80049fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	3b05      	subs	r3, #5
 80049c4:	221f      	movs	r2, #31
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43da      	mvns	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	400a      	ands	r2, r1
 80049d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	4618      	mov	r0, r3
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	3b05      	subs	r3, #5
 80049ee:	fa00 f203 	lsl.w	r2, r0, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	635a      	str	r2, [r3, #52]	; 0x34
 80049fa:	e04c      	b.n	8004a96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b0c      	cmp	r3, #12
 8004a02:	d824      	bhi.n	8004a4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	3b23      	subs	r3, #35	; 0x23
 8004a16:	221f      	movs	r2, #31
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	43da      	mvns	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	400a      	ands	r2, r1
 8004a24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	4618      	mov	r0, r3
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3b23      	subs	r3, #35	; 0x23
 8004a40:	fa00 f203 	lsl.w	r2, r0, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	631a      	str	r2, [r3, #48]	; 0x30
 8004a4c:	e023      	b.n	8004a96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	3b41      	subs	r3, #65	; 0x41
 8004a60:	221f      	movs	r2, #31
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	43da      	mvns	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	400a      	ands	r2, r1
 8004a6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	3b41      	subs	r3, #65	; 0x41
 8004a8a:	fa00 f203 	lsl.w	r2, r0, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a96:	4b22      	ldr	r3, [pc, #136]	; (8004b20 <HAL_ADC_ConfigChannel+0x234>)
 8004a98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a21      	ldr	r2, [pc, #132]	; (8004b24 <HAL_ADC_ConfigChannel+0x238>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d109      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0x1cc>
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b12      	cmp	r3, #18
 8004aaa:	d105      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a19      	ldr	r2, [pc, #100]	; (8004b24 <HAL_ADC_ConfigChannel+0x238>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d123      	bne.n	8004b0a <HAL_ADC_ConfigChannel+0x21e>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b10      	cmp	r3, #16
 8004ac8:	d003      	beq.n	8004ad2 <HAL_ADC_ConfigChannel+0x1e6>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b11      	cmp	r3, #17
 8004ad0:	d11b      	bne.n	8004b0a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b10      	cmp	r3, #16
 8004ae4:	d111      	bne.n	8004b0a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004ae6:	4b10      	ldr	r3, [pc, #64]	; (8004b28 <HAL_ADC_ConfigChannel+0x23c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a10      	ldr	r2, [pc, #64]	; (8004b2c <HAL_ADC_ConfigChannel+0x240>)
 8004aec:	fba2 2303 	umull	r2, r3, r2, r3
 8004af0:	0c9a      	lsrs	r2, r3, #18
 8004af2:	4613      	mov	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004afc:	e002      	b.n	8004b04 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	3b01      	subs	r3, #1
 8004b02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f9      	bne.n	8004afe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	40012300 	.word	0x40012300
 8004b24:	40012000 	.word	0x40012000
 8004b28:	200000ac 	.word	0x200000ac
 8004b2c:	431bde83 	.word	0x431bde83

08004b30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b38:	4b79      	ldr	r3, [pc, #484]	; (8004d20 <ADC_Init+0x1f0>)
 8004b3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	431a      	orrs	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6859      	ldr	r1, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	021a      	lsls	r2, r3, #8
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004b88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6859      	ldr	r1, [r3, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004baa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6899      	ldr	r1, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc2:	4a58      	ldr	r2, [pc, #352]	; (8004d24 <ADC_Init+0x1f4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d022      	beq.n	8004c0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6899      	ldr	r1, [r3, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004bf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6899      	ldr	r1, [r3, #8]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	609a      	str	r2, [r3, #8]
 8004c0c:	e00f      	b.n	8004c2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0202 	bic.w	r2, r2, #2
 8004c3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6899      	ldr	r1, [r3, #8]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	7e1b      	ldrb	r3, [r3, #24]
 8004c48:	005a      	lsls	r2, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01b      	beq.n	8004c94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004c7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6859      	ldr	r1, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	3b01      	subs	r3, #1
 8004c88:	035a      	lsls	r2, r3, #13
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]
 8004c92:	e007      	b.n	8004ca4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ca2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	051a      	lsls	r2, r3, #20
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004cd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6899      	ldr	r1, [r3, #8]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ce6:	025a      	lsls	r2, r3, #9
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6899      	ldr	r1, [r3, #8]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	029a      	lsls	r2, r3, #10
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	609a      	str	r2, [r3, #8]
}
 8004d14:	bf00      	nop
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	40012300 	.word	0x40012300
 8004d24:	0f000001 	.word	0x0f000001

08004d28 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d13c      	bne.n	8004dbc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d12b      	bne.n	8004db4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d127      	bne.n	8004db4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d006      	beq.n	8004d80 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d119      	bne.n	8004db4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0220 	bic.w	r2, r2, #32
 8004d8e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d105      	bne.n	8004db4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dac:	f043 0201 	orr.w	r2, r3, #1
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f7ff fd7b 	bl	80048b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004dba:	e00e      	b.n	8004dda <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f7ff fd85 	bl	80048d8 <HAL_ADC_ErrorCallback>
}
 8004dce:	e004      	b.n	8004dda <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	4798      	blx	r3
}
 8004dda:	bf00      	nop
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f7ff fd67 	bl	80048c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004df6:	bf00      	nop
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b084      	sub	sp, #16
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2240      	movs	r2, #64	; 0x40
 8004e10:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e16:	f043 0204 	orr.w	r2, r3, #4
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f7ff fd5a 	bl	80048d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e24:	bf00      	nop
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e3c:	4b0c      	ldr	r3, [pc, #48]	; (8004e70 <__NVIC_SetPriorityGrouping+0x44>)
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e48:	4013      	ands	r3, r2
 8004e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e5e:	4a04      	ldr	r2, [pc, #16]	; (8004e70 <__NVIC_SetPriorityGrouping+0x44>)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	60d3      	str	r3, [r2, #12]
}
 8004e64:	bf00      	nop
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	e000ed00 	.word	0xe000ed00

08004e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e78:	4b04      	ldr	r3, [pc, #16]	; (8004e8c <__NVIC_GetPriorityGrouping+0x18>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	0a1b      	lsrs	r3, r3, #8
 8004e7e:	f003 0307 	and.w	r3, r3, #7
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	e000ed00 	.word	0xe000ed00

08004e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	4603      	mov	r3, r0
 8004e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	db0b      	blt.n	8004eba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ea2:	79fb      	ldrb	r3, [r7, #7]
 8004ea4:	f003 021f 	and.w	r2, r3, #31
 8004ea8:	4907      	ldr	r1, [pc, #28]	; (8004ec8 <__NVIC_EnableIRQ+0x38>)
 8004eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	2001      	movs	r0, #1
 8004eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8004eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	e000e100 	.word	0xe000e100

08004ecc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	db12      	blt.n	8004f04 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ede:	79fb      	ldrb	r3, [r7, #7]
 8004ee0:	f003 021f 	and.w	r2, r3, #31
 8004ee4:	490a      	ldr	r1, [pc, #40]	; (8004f10 <__NVIC_DisableIRQ+0x44>)
 8004ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	2001      	movs	r0, #1
 8004eee:	fa00 f202 	lsl.w	r2, r0, r2
 8004ef2:	3320      	adds	r3, #32
 8004ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004ef8:	f3bf 8f4f 	dsb	sy
}
 8004efc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004efe:	f3bf 8f6f 	isb	sy
}
 8004f02:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	e000e100 	.word	0xe000e100

08004f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	6039      	str	r1, [r7, #0]
 8004f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	db0a      	blt.n	8004f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	490c      	ldr	r1, [pc, #48]	; (8004f60 <__NVIC_SetPriority+0x4c>)
 8004f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f32:	0112      	lsls	r2, r2, #4
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	440b      	add	r3, r1
 8004f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f3c:	e00a      	b.n	8004f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	4908      	ldr	r1, [pc, #32]	; (8004f64 <__NVIC_SetPriority+0x50>)
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	3b04      	subs	r3, #4
 8004f4c:	0112      	lsls	r2, r2, #4
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	440b      	add	r3, r1
 8004f52:	761a      	strb	r2, [r3, #24]
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	e000e100 	.word	0xe000e100
 8004f64:	e000ed00 	.word	0xe000ed00

08004f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b089      	sub	sp, #36	; 0x24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f1c3 0307 	rsb	r3, r3, #7
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	bf28      	it	cs
 8004f86:	2304      	movcs	r3, #4
 8004f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	2b06      	cmp	r3, #6
 8004f90:	d902      	bls.n	8004f98 <NVIC_EncodePriority+0x30>
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	3b03      	subs	r3, #3
 8004f96:	e000      	b.n	8004f9a <NVIC_EncodePriority+0x32>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	43da      	mvns	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	401a      	ands	r2, r3
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fba:	43d9      	mvns	r1, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fc0:	4313      	orrs	r3, r2
         );
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3724      	adds	r7, #36	; 0x24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
	...

08004fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fe0:	d301      	bcc.n	8004fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e00f      	b.n	8005006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fe6:	4a0a      	ldr	r2, [pc, #40]	; (8005010 <SysTick_Config+0x40>)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fee:	210f      	movs	r1, #15
 8004ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff4:	f7ff ff8e 	bl	8004f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ff8:	4b05      	ldr	r3, [pc, #20]	; (8005010 <SysTick_Config+0x40>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ffe:	4b04      	ldr	r3, [pc, #16]	; (8005010 <SysTick_Config+0x40>)
 8005000:	2207      	movs	r2, #7
 8005002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	e000e010 	.word	0xe000e010

08005014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff ff05 	bl	8004e2c <__NVIC_SetPriorityGrouping>
}
 8005022:	bf00      	nop
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800502a:	b580      	push	{r7, lr}
 800502c:	b086      	sub	sp, #24
 800502e:	af00      	add	r7, sp, #0
 8005030:	4603      	mov	r3, r0
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	607a      	str	r2, [r7, #4]
 8005036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800503c:	f7ff ff1a 	bl	8004e74 <__NVIC_GetPriorityGrouping>
 8005040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	68b9      	ldr	r1, [r7, #8]
 8005046:	6978      	ldr	r0, [r7, #20]
 8005048:	f7ff ff8e 	bl	8004f68 <NVIC_EncodePriority>
 800504c:	4602      	mov	r2, r0
 800504e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005052:	4611      	mov	r1, r2
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff ff5d 	bl	8004f14 <__NVIC_SetPriority>
}
 800505a:	bf00      	nop
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b082      	sub	sp, #8
 8005066:	af00      	add	r7, sp, #0
 8005068:	4603      	mov	r3, r0
 800506a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800506c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff ff0d 	bl	8004e90 <__NVIC_EnableIRQ>
}
 8005076:	bf00      	nop
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b082      	sub	sp, #8
 8005082:	af00      	add	r7, sp, #0
 8005084:	4603      	mov	r3, r0
 8005086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff ff1d 	bl	8004ecc <__NVIC_DisableIRQ>
}
 8005092:	bf00      	nop
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7ff ff94 	bl	8004fd0 <SysTick_Config>
 80050a8:	4603      	mov	r3, r0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80050c0:	f7ff fab6 	bl	8004630 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e099      	b.n	8005204 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0201 	bic.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050f0:	e00f      	b.n	8005112 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050f2:	f7ff fa9d 	bl	8004630 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b05      	cmp	r3, #5
 80050fe:	d908      	bls.n	8005112 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2203      	movs	r2, #3
 800510a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e078      	b.n	8005204 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e8      	bne.n	80050f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4b38      	ldr	r3, [pc, #224]	; (800520c <HAL_DMA_Init+0x158>)
 800512c:	4013      	ands	r3, r2
 800512e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800513e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800514a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005156:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	2b04      	cmp	r3, #4
 800516a:	d107      	bne.n	800517c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005174:	4313      	orrs	r3, r2
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f023 0307 	bic.w	r3, r3, #7
 8005192:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d117      	bne.n	80051d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00e      	beq.n	80051d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fb5f 	bl	800587c <DMA_CheckFifoParam>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d008      	beq.n	80051d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2240      	movs	r2, #64	; 0x40
 80051c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80051d2:	2301      	movs	r3, #1
 80051d4:	e016      	b.n	8005204 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fb16 	bl	8005810 <DMA_CalcBaseAndBitshift>
 80051e4:	4603      	mov	r3, r0
 80051e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ec:	223f      	movs	r2, #63	; 0x3f
 80051ee:	409a      	lsls	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	f010803f 	.word	0xf010803f

08005210 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e050      	b.n	80052c4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d101      	bne.n	8005232 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800522e:	2302      	movs	r3, #2
 8005230:	e048      	b.n	80052c4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0201 	bic.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2200      	movs	r2, #0
 8005250:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2200      	movs	r2, #0
 8005258:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2200      	movs	r2, #0
 8005260:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2200      	movs	r2, #0
 8005268:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2221      	movs	r2, #33	; 0x21
 8005270:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 facc 	bl	8005810 <DMA_CalcBaseAndBitshift>
 8005278:	4603      	mov	r3, r0
 800527a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a4:	223f      	movs	r2, #63	; 0x3f
 80052a6:	409a      	lsls	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <HAL_DMA_Start_IT+0x26>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e040      	b.n	8005374 <HAL_DMA_Start_IT+0xa8>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b01      	cmp	r3, #1
 8005304:	d12f      	bne.n	8005366 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2202      	movs	r2, #2
 800530a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	68b9      	ldr	r1, [r7, #8]
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 fa4a 	bl	80057b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005324:	223f      	movs	r2, #63	; 0x3f
 8005326:	409a      	lsls	r2, r3
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0216 	orr.w	r2, r2, #22
 800533a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005340:	2b00      	cmp	r3, #0
 8005342:	d007      	beq.n	8005354 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0208 	orr.w	r2, r2, #8
 8005352:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0201 	orr.w	r2, r2, #1
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	e005      	b.n	8005372 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800536e:	2302      	movs	r3, #2
 8005370:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005372:	7dfb      	ldrb	r3, [r7, #23]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3718      	adds	r7, #24
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005388:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800538a:	f7ff f951 	bl	8004630 <HAL_GetTick>
 800538e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d008      	beq.n	80053ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2280      	movs	r2, #128	; 0x80
 80053a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e052      	b.n	8005454 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0216 	bic.w	r2, r2, #22
 80053bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695a      	ldr	r2, [r3, #20]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d103      	bne.n	80053de <HAL_DMA_Abort+0x62>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0208 	bic.w	r2, r2, #8
 80053ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0201 	bic.w	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053fe:	e013      	b.n	8005428 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005400:	f7ff f916 	bl	8004630 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b05      	cmp	r3, #5
 800540c:	d90c      	bls.n	8005428 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2203      	movs	r2, #3
 8005418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e015      	b.n	8005454 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e4      	bne.n	8005400 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800543a:	223f      	movs	r2, #63	; 0x3f
 800543c:	409a      	lsls	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d004      	beq.n	800547a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2280      	movs	r2, #128	; 0x80
 8005474:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e00c      	b.n	8005494 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2205      	movs	r2, #5
 800547e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0201 	bic.w	r2, r2, #1
 8005490:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80054ac:	4b8e      	ldr	r3, [pc, #568]	; (80056e8 <HAL_DMA_IRQHandler+0x248>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a8e      	ldr	r2, [pc, #568]	; (80056ec <HAL_DMA_IRQHandler+0x24c>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	0a9b      	lsrs	r3, r3, #10
 80054b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ca:	2208      	movs	r2, #8
 80054cc:	409a      	lsls	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d01a      	beq.n	800550c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d013      	beq.n	800550c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0204 	bic.w	r2, r2, #4
 80054f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f8:	2208      	movs	r2, #8
 80054fa:	409a      	lsls	r2, r3
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005504:	f043 0201 	orr.w	r2, r3, #1
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005510:	2201      	movs	r2, #1
 8005512:	409a      	lsls	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4013      	ands	r3, r2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d012      	beq.n	8005542 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00b      	beq.n	8005542 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800552e:	2201      	movs	r2, #1
 8005530:	409a      	lsls	r2, r3
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553a:	f043 0202 	orr.w	r2, r3, #2
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005546:	2204      	movs	r2, #4
 8005548:	409a      	lsls	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4013      	ands	r3, r2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d012      	beq.n	8005578 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00b      	beq.n	8005578 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005564:	2204      	movs	r2, #4
 8005566:	409a      	lsls	r2, r3
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005570:	f043 0204 	orr.w	r2, r3, #4
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800557c:	2210      	movs	r2, #16
 800557e:	409a      	lsls	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4013      	ands	r3, r2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d043      	beq.n	8005610 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d03c      	beq.n	8005610 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800559a:	2210      	movs	r2, #16
 800559c:	409a      	lsls	r2, r3
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d018      	beq.n	80055e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d108      	bne.n	80055d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d024      	beq.n	8005610 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	4798      	blx	r3
 80055ce:	e01f      	b.n	8005610 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01b      	beq.n	8005610 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	4798      	blx	r3
 80055e0:	e016      	b.n	8005610 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d107      	bne.n	8005600 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0208 	bic.w	r2, r2, #8
 80055fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005614:	2220      	movs	r2, #32
 8005616:	409a      	lsls	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4013      	ands	r3, r2
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 808f 	beq.w	8005740 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 8087 	beq.w	8005740 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005636:	2220      	movs	r2, #32
 8005638:	409a      	lsls	r2, r3
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b05      	cmp	r3, #5
 8005648:	d136      	bne.n	80056b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0216 	bic.w	r2, r2, #22
 8005658:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695a      	ldr	r2, [r3, #20]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005668:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	d103      	bne.n	800567a <HAL_DMA_IRQHandler+0x1da>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005676:	2b00      	cmp	r3, #0
 8005678:	d007      	beq.n	800568a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0208 	bic.w	r2, r2, #8
 8005688:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568e:	223f      	movs	r2, #63	; 0x3f
 8005690:	409a      	lsls	r2, r3
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d07e      	beq.n	80057ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	4798      	blx	r3
        }
        return;
 80056b6:	e079      	b.n	80057ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d01d      	beq.n	8005702 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10d      	bne.n	80056f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d031      	beq.n	8005740 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	4798      	blx	r3
 80056e4:	e02c      	b.n	8005740 <HAL_DMA_IRQHandler+0x2a0>
 80056e6:	bf00      	nop
 80056e8:	200000ac 	.word	0x200000ac
 80056ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d023      	beq.n	8005740 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	4798      	blx	r3
 8005700:	e01e      	b.n	8005740 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10f      	bne.n	8005730 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 0210 	bic.w	r2, r2, #16
 800571e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005744:	2b00      	cmp	r3, #0
 8005746:	d032      	beq.n	80057ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d022      	beq.n	800579a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2205      	movs	r2, #5
 8005758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0201 	bic.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	3301      	adds	r3, #1
 8005770:	60bb      	str	r3, [r7, #8]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	429a      	cmp	r2, r3
 8005776:	d307      	bcc.n	8005788 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1f2      	bne.n	800576c <HAL_DMA_IRQHandler+0x2cc>
 8005786:	e000      	b.n	800578a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005788:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d005      	beq.n	80057ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	4798      	blx	r3
 80057aa:	e000      	b.n	80057ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80057ac:	bf00      	nop
    }
  }
}
 80057ae:	3718      	adds	r7, #24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	2b40      	cmp	r3, #64	; 0x40
 80057e0:	d108      	bne.n	80057f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80057f2:	e007      	b.n	8005804 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	60da      	str	r2, [r3, #12]
}
 8005804:	bf00      	nop
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	b2db      	uxtb	r3, r3
 800581e:	3b10      	subs	r3, #16
 8005820:	4a14      	ldr	r2, [pc, #80]	; (8005874 <DMA_CalcBaseAndBitshift+0x64>)
 8005822:	fba2 2303 	umull	r2, r3, r2, r3
 8005826:	091b      	lsrs	r3, r3, #4
 8005828:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800582a:	4a13      	ldr	r2, [pc, #76]	; (8005878 <DMA_CalcBaseAndBitshift+0x68>)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4413      	add	r3, r2
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2b03      	cmp	r3, #3
 800583c:	d909      	bls.n	8005852 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005846:	f023 0303 	bic.w	r3, r3, #3
 800584a:	1d1a      	adds	r2, r3, #4
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	659a      	str	r2, [r3, #88]	; 0x58
 8005850:	e007      	b.n	8005862 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800585a:	f023 0303 	bic.w	r3, r3, #3
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	aaaaaaab 	.word	0xaaaaaaab
 8005878:	0800d47c 	.word	0x0800d47c

0800587c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d11f      	bne.n	80058d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2b03      	cmp	r3, #3
 800589a:	d856      	bhi.n	800594a <DMA_CheckFifoParam+0xce>
 800589c:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <DMA_CheckFifoParam+0x28>)
 800589e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a2:	bf00      	nop
 80058a4:	080058b5 	.word	0x080058b5
 80058a8:	080058c7 	.word	0x080058c7
 80058ac:	080058b5 	.word	0x080058b5
 80058b0:	0800594b 	.word	0x0800594b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d046      	beq.n	800594e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058c4:	e043      	b.n	800594e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058ce:	d140      	bne.n	8005952 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058d4:	e03d      	b.n	8005952 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058de:	d121      	bne.n	8005924 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	d837      	bhi.n	8005956 <DMA_CheckFifoParam+0xda>
 80058e6:	a201      	add	r2, pc, #4	; (adr r2, 80058ec <DMA_CheckFifoParam+0x70>)
 80058e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ec:	080058fd 	.word	0x080058fd
 80058f0:	08005903 	.word	0x08005903
 80058f4:	080058fd 	.word	0x080058fd
 80058f8:	08005915 	.word	0x08005915
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005900:	e030      	b.n	8005964 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005906:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d025      	beq.n	800595a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005912:	e022      	b.n	800595a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800591c:	d11f      	bne.n	800595e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005922:	e01c      	b.n	800595e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d903      	bls.n	8005932 <DMA_CheckFifoParam+0xb6>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b03      	cmp	r3, #3
 800592e:	d003      	beq.n	8005938 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005930:	e018      	b.n	8005964 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	73fb      	strb	r3, [r7, #15]
      break;
 8005936:	e015      	b.n	8005964 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00e      	beq.n	8005962 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	73fb      	strb	r3, [r7, #15]
      break;
 8005948:	e00b      	b.n	8005962 <DMA_CheckFifoParam+0xe6>
      break;
 800594a:	bf00      	nop
 800594c:	e00a      	b.n	8005964 <DMA_CheckFifoParam+0xe8>
      break;
 800594e:	bf00      	nop
 8005950:	e008      	b.n	8005964 <DMA_CheckFifoParam+0xe8>
      break;
 8005952:	bf00      	nop
 8005954:	e006      	b.n	8005964 <DMA_CheckFifoParam+0xe8>
      break;
 8005956:	bf00      	nop
 8005958:	e004      	b.n	8005964 <DMA_CheckFifoParam+0xe8>
      break;
 800595a:	bf00      	nop
 800595c:	e002      	b.n	8005964 <DMA_CheckFifoParam+0xe8>
      break;   
 800595e:	bf00      	nop
 8005960:	e000      	b.n	8005964 <DMA_CheckFifoParam+0xe8>
      break;
 8005962:	bf00      	nop
    }
  } 
  
  return status; 
 8005964:	7bfb      	ldrb	r3, [r7, #15]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop

08005974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005974:	b480      	push	{r7}
 8005976:	b089      	sub	sp, #36	; 0x24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800597e:	2300      	movs	r3, #0
 8005980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005982:	2300      	movs	r3, #0
 8005984:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005986:	2300      	movs	r3, #0
 8005988:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800598a:	2300      	movs	r3, #0
 800598c:	61fb      	str	r3, [r7, #28]
 800598e:	e159      	b.n	8005c44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005990:	2201      	movs	r2, #1
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4013      	ands	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	f040 8148 	bne.w	8005c3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f003 0303 	and.w	r3, r3, #3
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d005      	beq.n	80059c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d130      	bne.n	8005a28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	2203      	movs	r2, #3
 80059d2:	fa02 f303 	lsl.w	r3, r2, r3
 80059d6:	43db      	mvns	r3, r3
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	4013      	ands	r3, r2
 80059dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059fc:	2201      	movs	r2, #1
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	fa02 f303 	lsl.w	r3, r2, r3
 8005a04:	43db      	mvns	r3, r3
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	091b      	lsrs	r3, r3, #4
 8005a12:	f003 0201 	and.w	r2, r3, #1
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f003 0303 	and.w	r3, r3, #3
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	d017      	beq.n	8005a64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	2203      	movs	r2, #3
 8005a40:	fa02 f303 	lsl.w	r3, r2, r3
 8005a44:	43db      	mvns	r3, r3
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f003 0303 	and.w	r3, r3, #3
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d123      	bne.n	8005ab8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	08da      	lsrs	r2, r3, #3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3208      	adds	r2, #8
 8005a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	220f      	movs	r2, #15
 8005a88:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	4013      	ands	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	08da      	lsrs	r2, r3, #3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3208      	adds	r2, #8
 8005ab2:	69b9      	ldr	r1, [r7, #24]
 8005ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	2203      	movs	r2, #3
 8005ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac8:	43db      	mvns	r3, r3
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	4013      	ands	r3, r2
 8005ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f003 0203 	and.w	r2, r3, #3
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 80a2 	beq.w	8005c3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	4b57      	ldr	r3, [pc, #348]	; (8005c5c <HAL_GPIO_Init+0x2e8>)
 8005b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b02:	4a56      	ldr	r2, [pc, #344]	; (8005c5c <HAL_GPIO_Init+0x2e8>)
 8005b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b08:	6453      	str	r3, [r2, #68]	; 0x44
 8005b0a:	4b54      	ldr	r3, [pc, #336]	; (8005c5c <HAL_GPIO_Init+0x2e8>)
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b16:	4a52      	ldr	r2, [pc, #328]	; (8005c60 <HAL_GPIO_Init+0x2ec>)
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	089b      	lsrs	r3, r3, #2
 8005b1c:	3302      	adds	r3, #2
 8005b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	f003 0303 	and.w	r3, r3, #3
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	220f      	movs	r2, #15
 8005b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b32:	43db      	mvns	r3, r3
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	4013      	ands	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a49      	ldr	r2, [pc, #292]	; (8005c64 <HAL_GPIO_Init+0x2f0>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d019      	beq.n	8005b76 <HAL_GPIO_Init+0x202>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a48      	ldr	r2, [pc, #288]	; (8005c68 <HAL_GPIO_Init+0x2f4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d013      	beq.n	8005b72 <HAL_GPIO_Init+0x1fe>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a47      	ldr	r2, [pc, #284]	; (8005c6c <HAL_GPIO_Init+0x2f8>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00d      	beq.n	8005b6e <HAL_GPIO_Init+0x1fa>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a46      	ldr	r2, [pc, #280]	; (8005c70 <HAL_GPIO_Init+0x2fc>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d007      	beq.n	8005b6a <HAL_GPIO_Init+0x1f6>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a45      	ldr	r2, [pc, #276]	; (8005c74 <HAL_GPIO_Init+0x300>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d101      	bne.n	8005b66 <HAL_GPIO_Init+0x1f2>
 8005b62:	2304      	movs	r3, #4
 8005b64:	e008      	b.n	8005b78 <HAL_GPIO_Init+0x204>
 8005b66:	2307      	movs	r3, #7
 8005b68:	e006      	b.n	8005b78 <HAL_GPIO_Init+0x204>
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e004      	b.n	8005b78 <HAL_GPIO_Init+0x204>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	e002      	b.n	8005b78 <HAL_GPIO_Init+0x204>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <HAL_GPIO_Init+0x204>
 8005b76:	2300      	movs	r3, #0
 8005b78:	69fa      	ldr	r2, [r7, #28]
 8005b7a:	f002 0203 	and.w	r2, r2, #3
 8005b7e:	0092      	lsls	r2, r2, #2
 8005b80:	4093      	lsls	r3, r2
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b88:	4935      	ldr	r1, [pc, #212]	; (8005c60 <HAL_GPIO_Init+0x2ec>)
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	089b      	lsrs	r3, r3, #2
 8005b8e:	3302      	adds	r3, #2
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b96:	4b38      	ldr	r3, [pc, #224]	; (8005c78 <HAL_GPIO_Init+0x304>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	43db      	mvns	r3, r3
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bba:	4a2f      	ldr	r2, [pc, #188]	; (8005c78 <HAL_GPIO_Init+0x304>)
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005bc0:	4b2d      	ldr	r3, [pc, #180]	; (8005c78 <HAL_GPIO_Init+0x304>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	43db      	mvns	r3, r3
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	4013      	ands	r3, r2
 8005bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005be4:	4a24      	ldr	r2, [pc, #144]	; (8005c78 <HAL_GPIO_Init+0x304>)
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005bea:	4b23      	ldr	r3, [pc, #140]	; (8005c78 <HAL_GPIO_Init+0x304>)
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	43db      	mvns	r3, r3
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c0e:	4a1a      	ldr	r2, [pc, #104]	; (8005c78 <HAL_GPIO_Init+0x304>)
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c14:	4b18      	ldr	r3, [pc, #96]	; (8005c78 <HAL_GPIO_Init+0x304>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	43db      	mvns	r3, r3
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	4013      	ands	r3, r2
 8005c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c38:	4a0f      	ldr	r2, [pc, #60]	; (8005c78 <HAL_GPIO_Init+0x304>)
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	3301      	adds	r3, #1
 8005c42:	61fb      	str	r3, [r7, #28]
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	2b0f      	cmp	r3, #15
 8005c48:	f67f aea2 	bls.w	8005990 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c4c:	bf00      	nop
 8005c4e:	bf00      	nop
 8005c50:	3724      	adds	r7, #36	; 0x24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	40013800 	.word	0x40013800
 8005c64:	40020000 	.word	0x40020000
 8005c68:	40020400 	.word	0x40020400
 8005c6c:	40020800 	.word	0x40020800
 8005c70:	40020c00 	.word	0x40020c00
 8005c74:	40021000 	.word	0x40021000
 8005c78:	40013c00 	.word	0x40013c00

08005c7c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c92:	2300      	movs	r3, #0
 8005c94:	617b      	str	r3, [r7, #20]
 8005c96:	e0bb      	b.n	8005e10 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c98:	2201      	movs	r2, #1
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	f040 80ab 	bne.w	8005e0a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005cb4:	4a5c      	ldr	r2, [pc, #368]	; (8005e28 <HAL_GPIO_DeInit+0x1ac>)
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	089b      	lsrs	r3, r3, #2
 8005cba:	3302      	adds	r3, #2
 8005cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f003 0303 	and.w	r3, r3, #3
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	220f      	movs	r2, #15
 8005ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a54      	ldr	r2, [pc, #336]	; (8005e2c <HAL_GPIO_DeInit+0x1b0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d019      	beq.n	8005d12 <HAL_GPIO_DeInit+0x96>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a53      	ldr	r2, [pc, #332]	; (8005e30 <HAL_GPIO_DeInit+0x1b4>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d013      	beq.n	8005d0e <HAL_GPIO_DeInit+0x92>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a52      	ldr	r2, [pc, #328]	; (8005e34 <HAL_GPIO_DeInit+0x1b8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00d      	beq.n	8005d0a <HAL_GPIO_DeInit+0x8e>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a51      	ldr	r2, [pc, #324]	; (8005e38 <HAL_GPIO_DeInit+0x1bc>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d007      	beq.n	8005d06 <HAL_GPIO_DeInit+0x8a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a50      	ldr	r2, [pc, #320]	; (8005e3c <HAL_GPIO_DeInit+0x1c0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d101      	bne.n	8005d02 <HAL_GPIO_DeInit+0x86>
 8005cfe:	2304      	movs	r3, #4
 8005d00:	e008      	b.n	8005d14 <HAL_GPIO_DeInit+0x98>
 8005d02:	2307      	movs	r3, #7
 8005d04:	e006      	b.n	8005d14 <HAL_GPIO_DeInit+0x98>
 8005d06:	2303      	movs	r3, #3
 8005d08:	e004      	b.n	8005d14 <HAL_GPIO_DeInit+0x98>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e002      	b.n	8005d14 <HAL_GPIO_DeInit+0x98>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <HAL_GPIO_DeInit+0x98>
 8005d12:	2300      	movs	r3, #0
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	f002 0203 	and.w	r2, r2, #3
 8005d1a:	0092      	lsls	r2, r2, #2
 8005d1c:	4093      	lsls	r3, r2
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d132      	bne.n	8005d8a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005d24:	4b46      	ldr	r3, [pc, #280]	; (8005e40 <HAL_GPIO_DeInit+0x1c4>)
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	43db      	mvns	r3, r3
 8005d2c:	4944      	ldr	r1, [pc, #272]	; (8005e40 <HAL_GPIO_DeInit+0x1c4>)
 8005d2e:	4013      	ands	r3, r2
 8005d30:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005d32:	4b43      	ldr	r3, [pc, #268]	; (8005e40 <HAL_GPIO_DeInit+0x1c4>)
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	43db      	mvns	r3, r3
 8005d3a:	4941      	ldr	r1, [pc, #260]	; (8005e40 <HAL_GPIO_DeInit+0x1c4>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005d40:	4b3f      	ldr	r3, [pc, #252]	; (8005e40 <HAL_GPIO_DeInit+0x1c4>)
 8005d42:	68da      	ldr	r2, [r3, #12]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	43db      	mvns	r3, r3
 8005d48:	493d      	ldr	r1, [pc, #244]	; (8005e40 <HAL_GPIO_DeInit+0x1c4>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005d4e:	4b3c      	ldr	r3, [pc, #240]	; (8005e40 <HAL_GPIO_DeInit+0x1c4>)
 8005d50:	689a      	ldr	r2, [r3, #8]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	43db      	mvns	r3, r3
 8005d56:	493a      	ldr	r1, [pc, #232]	; (8005e40 <HAL_GPIO_DeInit+0x1c4>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f003 0303 	and.w	r3, r3, #3
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	220f      	movs	r2, #15
 8005d66:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005d6c:	4a2e      	ldr	r2, [pc, #184]	; (8005e28 <HAL_GPIO_DeInit+0x1ac>)
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	089b      	lsrs	r3, r3, #2
 8005d72:	3302      	adds	r3, #2
 8005d74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	43da      	mvns	r2, r3
 8005d7c:	482a      	ldr	r0, [pc, #168]	; (8005e28 <HAL_GPIO_DeInit+0x1ac>)
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	089b      	lsrs	r3, r3, #2
 8005d82:	400a      	ands	r2, r1
 8005d84:	3302      	adds	r3, #2
 8005d86:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	2103      	movs	r1, #3
 8005d94:	fa01 f303 	lsl.w	r3, r1, r3
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	401a      	ands	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	08da      	lsrs	r2, r3, #3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3208      	adds	r2, #8
 8005da8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f003 0307 	and.w	r3, r3, #7
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	220f      	movs	r2, #15
 8005db6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dba:	43db      	mvns	r3, r3
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	08d2      	lsrs	r2, r2, #3
 8005dc0:	4019      	ands	r1, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3208      	adds	r2, #8
 8005dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	2103      	movs	r1, #3
 8005dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	401a      	ands	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	2101      	movs	r1, #1
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dec:	43db      	mvns	r3, r3
 8005dee:	401a      	ands	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	2103      	movs	r1, #3
 8005dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005e02:	43db      	mvns	r3, r3
 8005e04:	401a      	ands	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	617b      	str	r3, [r7, #20]
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	2b0f      	cmp	r3, #15
 8005e14:	f67f af40 	bls.w	8005c98 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005e18:	bf00      	nop
 8005e1a:	bf00      	nop
 8005e1c:	371c      	adds	r7, #28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	40013800 	.word	0x40013800
 8005e2c:	40020000 	.word	0x40020000
 8005e30:	40020400 	.word	0x40020400
 8005e34:	40020800 	.word	0x40020800
 8005e38:	40020c00 	.word	0x40020c00
 8005e3c:	40021000 	.word	0x40021000
 8005e40:	40013c00 	.word	0x40013c00

08005e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	807b      	strh	r3, [r7, #2]
 8005e50:	4613      	mov	r3, r2
 8005e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e54:	787b      	ldrb	r3, [r7, #1]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e5a:	887a      	ldrh	r2, [r7, #2]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005e60:	e003      	b.n	8005e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005e62:	887b      	ldrh	r3, [r7, #2]
 8005e64:	041a      	lsls	r2, r3, #16
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	619a      	str	r2, [r3, #24]
}
 8005e6a:	bf00      	nop
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
	...

08005e78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e267      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d075      	beq.n	8005f82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e96:	4b88      	ldr	r3, [pc, #544]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f003 030c 	and.w	r3, r3, #12
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d00c      	beq.n	8005ebc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ea2:	4b85      	ldr	r3, [pc, #532]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d112      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005eae:	4b82      	ldr	r3, [pc, #520]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eba:	d10b      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ebc:	4b7e      	ldr	r3, [pc, #504]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d05b      	beq.n	8005f80 <HAL_RCC_OscConfig+0x108>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d157      	bne.n	8005f80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e242      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005edc:	d106      	bne.n	8005eec <HAL_RCC_OscConfig+0x74>
 8005ede:	4b76      	ldr	r3, [pc, #472]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a75      	ldr	r2, [pc, #468]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ee8:	6013      	str	r3, [r2, #0]
 8005eea:	e01d      	b.n	8005f28 <HAL_RCC_OscConfig+0xb0>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ef4:	d10c      	bne.n	8005f10 <HAL_RCC_OscConfig+0x98>
 8005ef6:	4b70      	ldr	r3, [pc, #448]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a6f      	ldr	r2, [pc, #444]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	4b6d      	ldr	r3, [pc, #436]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a6c      	ldr	r2, [pc, #432]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	e00b      	b.n	8005f28 <HAL_RCC_OscConfig+0xb0>
 8005f10:	4b69      	ldr	r3, [pc, #420]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a68      	ldr	r2, [pc, #416]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	4b66      	ldr	r3, [pc, #408]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a65      	ldr	r2, [pc, #404]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d013      	beq.n	8005f58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f30:	f7fe fb7e 	bl	8004630 <HAL_GetTick>
 8005f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f38:	f7fe fb7a 	bl	8004630 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b64      	cmp	r3, #100	; 0x64
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e207      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f4a:	4b5b      	ldr	r3, [pc, #364]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0f0      	beq.n	8005f38 <HAL_RCC_OscConfig+0xc0>
 8005f56:	e014      	b.n	8005f82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f58:	f7fe fb6a 	bl	8004630 <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f60:	f7fe fb66 	bl	8004630 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b64      	cmp	r3, #100	; 0x64
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e1f3      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f72:	4b51      	ldr	r3, [pc, #324]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1f0      	bne.n	8005f60 <HAL_RCC_OscConfig+0xe8>
 8005f7e:	e000      	b.n	8005f82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d063      	beq.n	8006056 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f8e:	4b4a      	ldr	r3, [pc, #296]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 030c 	and.w	r3, r3, #12
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00b      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f9a:	4b47      	ldr	r3, [pc, #284]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fa2:	2b08      	cmp	r3, #8
 8005fa4:	d11c      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fa6:	4b44      	ldr	r3, [pc, #272]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d116      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fb2:	4b41      	ldr	r3, [pc, #260]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d005      	beq.n	8005fca <HAL_RCC_OscConfig+0x152>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d001      	beq.n	8005fca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e1c7      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fca:	4b3b      	ldr	r3, [pc, #236]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	4937      	ldr	r1, [pc, #220]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fde:	e03a      	b.n	8006056 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d020      	beq.n	800602a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fe8:	4b34      	ldr	r3, [pc, #208]	; (80060bc <HAL_RCC_OscConfig+0x244>)
 8005fea:	2201      	movs	r2, #1
 8005fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fee:	f7fe fb1f 	bl	8004630 <HAL_GetTick>
 8005ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ff4:	e008      	b.n	8006008 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ff6:	f7fe fb1b 	bl	8004630 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b02      	cmp	r3, #2
 8006002:	d901      	bls.n	8006008 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e1a8      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006008:	4b2b      	ldr	r3, [pc, #172]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d0f0      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006014:	4b28      	ldr	r3, [pc, #160]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	4925      	ldr	r1, [pc, #148]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8006024:	4313      	orrs	r3, r2
 8006026:	600b      	str	r3, [r1, #0]
 8006028:	e015      	b.n	8006056 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800602a:	4b24      	ldr	r3, [pc, #144]	; (80060bc <HAL_RCC_OscConfig+0x244>)
 800602c:	2200      	movs	r2, #0
 800602e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006030:	f7fe fafe 	bl	8004630 <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006038:	f7fe fafa 	bl	8004630 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e187      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800604a:	4b1b      	ldr	r3, [pc, #108]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f0      	bne.n	8006038 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0308 	and.w	r3, r3, #8
 800605e:	2b00      	cmp	r3, #0
 8006060:	d036      	beq.n	80060d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d016      	beq.n	8006098 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800606a:	4b15      	ldr	r3, [pc, #84]	; (80060c0 <HAL_RCC_OscConfig+0x248>)
 800606c:	2201      	movs	r2, #1
 800606e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006070:	f7fe fade 	bl	8004630 <HAL_GetTick>
 8006074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006076:	e008      	b.n	800608a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006078:	f7fe fada 	bl	8004630 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b02      	cmp	r3, #2
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e167      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800608a:	4b0b      	ldr	r3, [pc, #44]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 800608c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d0f0      	beq.n	8006078 <HAL_RCC_OscConfig+0x200>
 8006096:	e01b      	b.n	80060d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006098:	4b09      	ldr	r3, [pc, #36]	; (80060c0 <HAL_RCC_OscConfig+0x248>)
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800609e:	f7fe fac7 	bl	8004630 <HAL_GetTick>
 80060a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060a4:	e00e      	b.n	80060c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060a6:	f7fe fac3 	bl	8004630 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d907      	bls.n	80060c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e150      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
 80060b8:	40023800 	.word	0x40023800
 80060bc:	42470000 	.word	0x42470000
 80060c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060c4:	4b88      	ldr	r3, [pc, #544]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 80060c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1ea      	bne.n	80060a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 8097 	beq.w	800620c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060de:	2300      	movs	r3, #0
 80060e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060e2:	4b81      	ldr	r3, [pc, #516]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 80060e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10f      	bne.n	800610e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060ee:	2300      	movs	r3, #0
 80060f0:	60bb      	str	r3, [r7, #8]
 80060f2:	4b7d      	ldr	r3, [pc, #500]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	4a7c      	ldr	r2, [pc, #496]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 80060f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060fc:	6413      	str	r3, [r2, #64]	; 0x40
 80060fe:	4b7a      	ldr	r3, [pc, #488]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006106:	60bb      	str	r3, [r7, #8]
 8006108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800610a:	2301      	movs	r3, #1
 800610c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800610e:	4b77      	ldr	r3, [pc, #476]	; (80062ec <HAL_RCC_OscConfig+0x474>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006116:	2b00      	cmp	r3, #0
 8006118:	d118      	bne.n	800614c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800611a:	4b74      	ldr	r3, [pc, #464]	; (80062ec <HAL_RCC_OscConfig+0x474>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a73      	ldr	r2, [pc, #460]	; (80062ec <HAL_RCC_OscConfig+0x474>)
 8006120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006126:	f7fe fa83 	bl	8004630 <HAL_GetTick>
 800612a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800612c:	e008      	b.n	8006140 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800612e:	f7fe fa7f 	bl	8004630 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e10c      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006140:	4b6a      	ldr	r3, [pc, #424]	; (80062ec <HAL_RCC_OscConfig+0x474>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006148:	2b00      	cmp	r3, #0
 800614a:	d0f0      	beq.n	800612e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d106      	bne.n	8006162 <HAL_RCC_OscConfig+0x2ea>
 8006154:	4b64      	ldr	r3, [pc, #400]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 8006156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006158:	4a63      	ldr	r2, [pc, #396]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 800615a:	f043 0301 	orr.w	r3, r3, #1
 800615e:	6713      	str	r3, [r2, #112]	; 0x70
 8006160:	e01c      	b.n	800619c <HAL_RCC_OscConfig+0x324>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	2b05      	cmp	r3, #5
 8006168:	d10c      	bne.n	8006184 <HAL_RCC_OscConfig+0x30c>
 800616a:	4b5f      	ldr	r3, [pc, #380]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 800616c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800616e:	4a5e      	ldr	r2, [pc, #376]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 8006170:	f043 0304 	orr.w	r3, r3, #4
 8006174:	6713      	str	r3, [r2, #112]	; 0x70
 8006176:	4b5c      	ldr	r3, [pc, #368]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 8006178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617a:	4a5b      	ldr	r2, [pc, #364]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 800617c:	f043 0301 	orr.w	r3, r3, #1
 8006180:	6713      	str	r3, [r2, #112]	; 0x70
 8006182:	e00b      	b.n	800619c <HAL_RCC_OscConfig+0x324>
 8006184:	4b58      	ldr	r3, [pc, #352]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 8006186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006188:	4a57      	ldr	r2, [pc, #348]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 800618a:	f023 0301 	bic.w	r3, r3, #1
 800618e:	6713      	str	r3, [r2, #112]	; 0x70
 8006190:	4b55      	ldr	r3, [pc, #340]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 8006192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006194:	4a54      	ldr	r2, [pc, #336]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 8006196:	f023 0304 	bic.w	r3, r3, #4
 800619a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d015      	beq.n	80061d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a4:	f7fe fa44 	bl	8004630 <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061aa:	e00a      	b.n	80061c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061ac:	f7fe fa40 	bl	8004630 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e0cb      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061c2:	4b49      	ldr	r3, [pc, #292]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 80061c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0ee      	beq.n	80061ac <HAL_RCC_OscConfig+0x334>
 80061ce:	e014      	b.n	80061fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061d0:	f7fe fa2e 	bl	8004630 <HAL_GetTick>
 80061d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061d6:	e00a      	b.n	80061ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061d8:	f7fe fa2a 	bl	8004630 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e0b5      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061ee:	4b3e      	ldr	r3, [pc, #248]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 80061f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1ee      	bne.n	80061d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061fa:	7dfb      	ldrb	r3, [r7, #23]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d105      	bne.n	800620c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006200:	4b39      	ldr	r3, [pc, #228]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	4a38      	ldr	r2, [pc, #224]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 8006206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800620a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 80a1 	beq.w	8006358 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006216:	4b34      	ldr	r3, [pc, #208]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f003 030c 	and.w	r3, r3, #12
 800621e:	2b08      	cmp	r3, #8
 8006220:	d05c      	beq.n	80062dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	2b02      	cmp	r3, #2
 8006228:	d141      	bne.n	80062ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800622a:	4b31      	ldr	r3, [pc, #196]	; (80062f0 <HAL_RCC_OscConfig+0x478>)
 800622c:	2200      	movs	r2, #0
 800622e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006230:	f7fe f9fe 	bl	8004630 <HAL_GetTick>
 8006234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006238:	f7fe f9fa 	bl	8004630 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e087      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800624a:	4b27      	ldr	r3, [pc, #156]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1f0      	bne.n	8006238 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	69da      	ldr	r2, [r3, #28]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	431a      	orrs	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006264:	019b      	lsls	r3, r3, #6
 8006266:	431a      	orrs	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626c:	085b      	lsrs	r3, r3, #1
 800626e:	3b01      	subs	r3, #1
 8006270:	041b      	lsls	r3, r3, #16
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	061b      	lsls	r3, r3, #24
 800627a:	491b      	ldr	r1, [pc, #108]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 800627c:	4313      	orrs	r3, r2
 800627e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006280:	4b1b      	ldr	r3, [pc, #108]	; (80062f0 <HAL_RCC_OscConfig+0x478>)
 8006282:	2201      	movs	r2, #1
 8006284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006286:	f7fe f9d3 	bl	8004630 <HAL_GetTick>
 800628a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800628c:	e008      	b.n	80062a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800628e:	f7fe f9cf 	bl	8004630 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	2b02      	cmp	r3, #2
 800629a:	d901      	bls.n	80062a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e05c      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062a0:	4b11      	ldr	r3, [pc, #68]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d0f0      	beq.n	800628e <HAL_RCC_OscConfig+0x416>
 80062ac:	e054      	b.n	8006358 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ae:	4b10      	ldr	r3, [pc, #64]	; (80062f0 <HAL_RCC_OscConfig+0x478>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b4:	f7fe f9bc 	bl	8004630 <HAL_GetTick>
 80062b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062bc:	f7fe f9b8 	bl	8004630 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e045      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ce:	4b06      	ldr	r3, [pc, #24]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1f0      	bne.n	80062bc <HAL_RCC_OscConfig+0x444>
 80062da:	e03d      	b.n	8006358 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d107      	bne.n	80062f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e038      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
 80062e8:	40023800 	.word	0x40023800
 80062ec:	40007000 	.word	0x40007000
 80062f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062f4:	4b1b      	ldr	r3, [pc, #108]	; (8006364 <HAL_RCC_OscConfig+0x4ec>)
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d028      	beq.n	8006354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800630c:	429a      	cmp	r2, r3
 800630e:	d121      	bne.n	8006354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800631a:	429a      	cmp	r2, r3
 800631c:	d11a      	bne.n	8006354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006324:	4013      	ands	r3, r2
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800632a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800632c:	4293      	cmp	r3, r2
 800632e:	d111      	bne.n	8006354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633a:	085b      	lsrs	r3, r3, #1
 800633c:	3b01      	subs	r3, #1
 800633e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006340:	429a      	cmp	r2, r3
 8006342:	d107      	bne.n	8006354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006350:	429a      	cmp	r2, r3
 8006352:	d001      	beq.n	8006358 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e000      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	40023800 	.word	0x40023800

08006368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e0cc      	b.n	8006516 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800637c:	4b68      	ldr	r3, [pc, #416]	; (8006520 <HAL_RCC_ClockConfig+0x1b8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0307 	and.w	r3, r3, #7
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	429a      	cmp	r2, r3
 8006388:	d90c      	bls.n	80063a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800638a:	4b65      	ldr	r3, [pc, #404]	; (8006520 <HAL_RCC_ClockConfig+0x1b8>)
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006392:	4b63      	ldr	r3, [pc, #396]	; (8006520 <HAL_RCC_ClockConfig+0x1b8>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	429a      	cmp	r2, r3
 800639e:	d001      	beq.n	80063a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e0b8      	b.n	8006516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d020      	beq.n	80063f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d005      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063bc:	4b59      	ldr	r3, [pc, #356]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	4a58      	ldr	r2, [pc, #352]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80063c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0308 	and.w	r3, r3, #8
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d005      	beq.n	80063e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063d4:	4b53      	ldr	r3, [pc, #332]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	4a52      	ldr	r2, [pc, #328]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80063da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063e0:	4b50      	ldr	r3, [pc, #320]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	494d      	ldr	r1, [pc, #308]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d044      	beq.n	8006488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d107      	bne.n	8006416 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006406:	4b47      	ldr	r3, [pc, #284]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d119      	bne.n	8006446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e07f      	b.n	8006516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	2b02      	cmp	r3, #2
 800641c:	d003      	beq.n	8006426 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006422:	2b03      	cmp	r3, #3
 8006424:	d107      	bne.n	8006436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006426:	4b3f      	ldr	r3, [pc, #252]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d109      	bne.n	8006446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e06f      	b.n	8006516 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006436:	4b3b      	ldr	r3, [pc, #236]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e067      	b.n	8006516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006446:	4b37      	ldr	r3, [pc, #220]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f023 0203 	bic.w	r2, r3, #3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	4934      	ldr	r1, [pc, #208]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 8006454:	4313      	orrs	r3, r2
 8006456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006458:	f7fe f8ea 	bl	8004630 <HAL_GetTick>
 800645c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800645e:	e00a      	b.n	8006476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006460:	f7fe f8e6 	bl	8004630 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	f241 3288 	movw	r2, #5000	; 0x1388
 800646e:	4293      	cmp	r3, r2
 8006470:	d901      	bls.n	8006476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e04f      	b.n	8006516 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006476:	4b2b      	ldr	r3, [pc, #172]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f003 020c 	and.w	r2, r3, #12
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	429a      	cmp	r2, r3
 8006486:	d1eb      	bne.n	8006460 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006488:	4b25      	ldr	r3, [pc, #148]	; (8006520 <HAL_RCC_ClockConfig+0x1b8>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	429a      	cmp	r2, r3
 8006494:	d20c      	bcs.n	80064b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006496:	4b22      	ldr	r3, [pc, #136]	; (8006520 <HAL_RCC_ClockConfig+0x1b8>)
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800649e:	4b20      	ldr	r3, [pc, #128]	; (8006520 <HAL_RCC_ClockConfig+0x1b8>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d001      	beq.n	80064b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e032      	b.n	8006516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d008      	beq.n	80064ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064bc:	4b19      	ldr	r3, [pc, #100]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	4916      	ldr	r1, [pc, #88]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0308 	and.w	r3, r3, #8
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d009      	beq.n	80064ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064da:	4b12      	ldr	r3, [pc, #72]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	490e      	ldr	r1, [pc, #56]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064ee:	f000 f821 	bl	8006534 <HAL_RCC_GetSysClockFreq>
 80064f2:	4602      	mov	r2, r0
 80064f4:	4b0b      	ldr	r3, [pc, #44]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	091b      	lsrs	r3, r3, #4
 80064fa:	f003 030f 	and.w	r3, r3, #15
 80064fe:	490a      	ldr	r1, [pc, #40]	; (8006528 <HAL_RCC_ClockConfig+0x1c0>)
 8006500:	5ccb      	ldrb	r3, [r1, r3]
 8006502:	fa22 f303 	lsr.w	r3, r2, r3
 8006506:	4a09      	ldr	r2, [pc, #36]	; (800652c <HAL_RCC_ClockConfig+0x1c4>)
 8006508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800650a:	4b09      	ldr	r3, [pc, #36]	; (8006530 <HAL_RCC_ClockConfig+0x1c8>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4618      	mov	r0, r3
 8006510:	f7fe f84a 	bl	80045a8 <HAL_InitTick>

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	40023c00 	.word	0x40023c00
 8006524:	40023800 	.word	0x40023800
 8006528:	0800d264 	.word	0x0800d264
 800652c:	200000ac 	.word	0x200000ac
 8006530:	200000b0 	.word	0x200000b0

08006534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006538:	b090      	sub	sp, #64	; 0x40
 800653a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	637b      	str	r3, [r7, #52]	; 0x34
 8006540:	2300      	movs	r3, #0
 8006542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006544:	2300      	movs	r3, #0
 8006546:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800654c:	4b59      	ldr	r3, [pc, #356]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f003 030c 	and.w	r3, r3, #12
 8006554:	2b08      	cmp	r3, #8
 8006556:	d00d      	beq.n	8006574 <HAL_RCC_GetSysClockFreq+0x40>
 8006558:	2b08      	cmp	r3, #8
 800655a:	f200 80a1 	bhi.w	80066a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <HAL_RCC_GetSysClockFreq+0x34>
 8006562:	2b04      	cmp	r3, #4
 8006564:	d003      	beq.n	800656e <HAL_RCC_GetSysClockFreq+0x3a>
 8006566:	e09b      	b.n	80066a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006568:	4b53      	ldr	r3, [pc, #332]	; (80066b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800656a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800656c:	e09b      	b.n	80066a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800656e:	4b53      	ldr	r3, [pc, #332]	; (80066bc <HAL_RCC_GetSysClockFreq+0x188>)
 8006570:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006572:	e098      	b.n	80066a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006574:	4b4f      	ldr	r3, [pc, #316]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800657c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800657e:	4b4d      	ldr	r3, [pc, #308]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d028      	beq.n	80065dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800658a:	4b4a      	ldr	r3, [pc, #296]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	099b      	lsrs	r3, r3, #6
 8006590:	2200      	movs	r2, #0
 8006592:	623b      	str	r3, [r7, #32]
 8006594:	627a      	str	r2, [r7, #36]	; 0x24
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800659c:	2100      	movs	r1, #0
 800659e:	4b47      	ldr	r3, [pc, #284]	; (80066bc <HAL_RCC_GetSysClockFreq+0x188>)
 80065a0:	fb03 f201 	mul.w	r2, r3, r1
 80065a4:	2300      	movs	r3, #0
 80065a6:	fb00 f303 	mul.w	r3, r0, r3
 80065aa:	4413      	add	r3, r2
 80065ac:	4a43      	ldr	r2, [pc, #268]	; (80066bc <HAL_RCC_GetSysClockFreq+0x188>)
 80065ae:	fba0 1202 	umull	r1, r2, r0, r2
 80065b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065b4:	460a      	mov	r2, r1
 80065b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80065b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065ba:	4413      	add	r3, r2
 80065bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c0:	2200      	movs	r2, #0
 80065c2:	61bb      	str	r3, [r7, #24]
 80065c4:	61fa      	str	r2, [r7, #28]
 80065c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80065ce:	f7fa fac3 	bl	8000b58 <__aeabi_uldivmod>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4613      	mov	r3, r2
 80065d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065da:	e053      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065dc:	4b35      	ldr	r3, [pc, #212]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	099b      	lsrs	r3, r3, #6
 80065e2:	2200      	movs	r2, #0
 80065e4:	613b      	str	r3, [r7, #16]
 80065e6:	617a      	str	r2, [r7, #20]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80065ee:	f04f 0b00 	mov.w	fp, #0
 80065f2:	4652      	mov	r2, sl
 80065f4:	465b      	mov	r3, fp
 80065f6:	f04f 0000 	mov.w	r0, #0
 80065fa:	f04f 0100 	mov.w	r1, #0
 80065fe:	0159      	lsls	r1, r3, #5
 8006600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006604:	0150      	lsls	r0, r2, #5
 8006606:	4602      	mov	r2, r0
 8006608:	460b      	mov	r3, r1
 800660a:	ebb2 080a 	subs.w	r8, r2, sl
 800660e:	eb63 090b 	sbc.w	r9, r3, fp
 8006612:	f04f 0200 	mov.w	r2, #0
 8006616:	f04f 0300 	mov.w	r3, #0
 800661a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800661e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006622:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006626:	ebb2 0408 	subs.w	r4, r2, r8
 800662a:	eb63 0509 	sbc.w	r5, r3, r9
 800662e:	f04f 0200 	mov.w	r2, #0
 8006632:	f04f 0300 	mov.w	r3, #0
 8006636:	00eb      	lsls	r3, r5, #3
 8006638:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800663c:	00e2      	lsls	r2, r4, #3
 800663e:	4614      	mov	r4, r2
 8006640:	461d      	mov	r5, r3
 8006642:	eb14 030a 	adds.w	r3, r4, sl
 8006646:	603b      	str	r3, [r7, #0]
 8006648:	eb45 030b 	adc.w	r3, r5, fp
 800664c:	607b      	str	r3, [r7, #4]
 800664e:	f04f 0200 	mov.w	r2, #0
 8006652:	f04f 0300 	mov.w	r3, #0
 8006656:	e9d7 4500 	ldrd	r4, r5, [r7]
 800665a:	4629      	mov	r1, r5
 800665c:	028b      	lsls	r3, r1, #10
 800665e:	4621      	mov	r1, r4
 8006660:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006664:	4621      	mov	r1, r4
 8006666:	028a      	lsls	r2, r1, #10
 8006668:	4610      	mov	r0, r2
 800666a:	4619      	mov	r1, r3
 800666c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666e:	2200      	movs	r2, #0
 8006670:	60bb      	str	r3, [r7, #8]
 8006672:	60fa      	str	r2, [r7, #12]
 8006674:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006678:	f7fa fa6e 	bl	8000b58 <__aeabi_uldivmod>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	4613      	mov	r3, r2
 8006682:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006684:	4b0b      	ldr	r3, [pc, #44]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	0c1b      	lsrs	r3, r3, #16
 800668a:	f003 0303 	and.w	r3, r3, #3
 800668e:	3301      	adds	r3, #1
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006694:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006698:	fbb2 f3f3 	udiv	r3, r2, r3
 800669c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800669e:	e002      	b.n	80066a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066a0:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80066a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80066a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3740      	adds	r7, #64	; 0x40
 80066ac:	46bd      	mov	sp, r7
 80066ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066b2:	bf00      	nop
 80066b4:	40023800 	.word	0x40023800
 80066b8:	00f42400 	.word	0x00f42400
 80066bc:	017d7840 	.word	0x017d7840

080066c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066c0:	b480      	push	{r7}
 80066c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066c4:	4b03      	ldr	r3, [pc, #12]	; (80066d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80066c6:	681b      	ldr	r3, [r3, #0]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	200000ac 	.word	0x200000ac

080066d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066dc:	f7ff fff0 	bl	80066c0 <HAL_RCC_GetHCLKFreq>
 80066e0:	4602      	mov	r2, r0
 80066e2:	4b05      	ldr	r3, [pc, #20]	; (80066f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	0a9b      	lsrs	r3, r3, #10
 80066e8:	f003 0307 	and.w	r3, r3, #7
 80066ec:	4903      	ldr	r1, [pc, #12]	; (80066fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80066ee:	5ccb      	ldrb	r3, [r1, r3]
 80066f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40023800 	.word	0x40023800
 80066fc:	0800d274 	.word	0x0800d274

08006700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006704:	f7ff ffdc 	bl	80066c0 <HAL_RCC_GetHCLKFreq>
 8006708:	4602      	mov	r2, r0
 800670a:	4b05      	ldr	r3, [pc, #20]	; (8006720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	0b5b      	lsrs	r3, r3, #13
 8006710:	f003 0307 	and.w	r3, r3, #7
 8006714:	4903      	ldr	r1, [pc, #12]	; (8006724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006716:	5ccb      	ldrb	r3, [r1, r3]
 8006718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800671c:	4618      	mov	r0, r3
 800671e:	bd80      	pop	{r7, pc}
 8006720:	40023800 	.word	0x40023800
 8006724:	0800d274 	.word	0x0800d274

08006728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e041      	b.n	80067be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d106      	bne.n	8006754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7fb ff4e 	bl	80025f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3304      	adds	r3, #4
 8006764:	4619      	mov	r1, r3
 8006766:	4610      	mov	r0, r2
 8006768:	f000 fe24 	bl	80073b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
	...

080067c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d001      	beq.n	80067e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e044      	b.n	800686a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0201 	orr.w	r2, r2, #1
 80067f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a1e      	ldr	r2, [pc, #120]	; (8006878 <HAL_TIM_Base_Start_IT+0xb0>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d018      	beq.n	8006834 <HAL_TIM_Base_Start_IT+0x6c>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800680a:	d013      	beq.n	8006834 <HAL_TIM_Base_Start_IT+0x6c>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a1a      	ldr	r2, [pc, #104]	; (800687c <HAL_TIM_Base_Start_IT+0xb4>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00e      	beq.n	8006834 <HAL_TIM_Base_Start_IT+0x6c>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a19      	ldr	r2, [pc, #100]	; (8006880 <HAL_TIM_Base_Start_IT+0xb8>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d009      	beq.n	8006834 <HAL_TIM_Base_Start_IT+0x6c>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a17      	ldr	r2, [pc, #92]	; (8006884 <HAL_TIM_Base_Start_IT+0xbc>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d004      	beq.n	8006834 <HAL_TIM_Base_Start_IT+0x6c>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a16      	ldr	r2, [pc, #88]	; (8006888 <HAL_TIM_Base_Start_IT+0xc0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d111      	bne.n	8006858 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 0307 	and.w	r3, r3, #7
 800683e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b06      	cmp	r3, #6
 8006844:	d010      	beq.n	8006868 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f042 0201 	orr.w	r2, r2, #1
 8006854:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006856:	e007      	b.n	8006868 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0201 	orr.w	r2, r2, #1
 8006866:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	40010000 	.word	0x40010000
 800687c:	40000400 	.word	0x40000400
 8006880:	40000800 	.word	0x40000800
 8006884:	40000c00 	.word	0x40000c00
 8006888:	40014000 	.word	0x40014000

0800688c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68da      	ldr	r2, [r3, #12]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0201 	bic.w	r2, r2, #1
 80068a2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6a1a      	ldr	r2, [r3, #32]
 80068aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80068ae:	4013      	ands	r3, r2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10f      	bne.n	80068d4 <HAL_TIM_Base_Stop_IT+0x48>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6a1a      	ldr	r2, [r3, #32]
 80068ba:	f240 4344 	movw	r3, #1092	; 0x444
 80068be:	4013      	ands	r3, r2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d107      	bne.n	80068d4 <HAL_TIM_Base_Stop_IT+0x48>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0201 	bic.w	r2, r2, #1
 80068d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b082      	sub	sp, #8
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e041      	b.n	8006980 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d106      	bne.n	8006916 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f839 	bl	8006988 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2202      	movs	r2, #2
 800691a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	3304      	adds	r3, #4
 8006926:	4619      	mov	r1, r3
 8006928:	4610      	mov	r0, r2
 800692a:	f000 fd43 	bl	80073b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d109      	bne.n	80069c0 <HAL_TIM_PWM_Start+0x24>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	bf14      	ite	ne
 80069b8:	2301      	movne	r3, #1
 80069ba:	2300      	moveq	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	e022      	b.n	8006a06 <HAL_TIM_PWM_Start+0x6a>
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	2b04      	cmp	r3, #4
 80069c4:	d109      	bne.n	80069da <HAL_TIM_PWM_Start+0x3e>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	bf14      	ite	ne
 80069d2:	2301      	movne	r3, #1
 80069d4:	2300      	moveq	r3, #0
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	e015      	b.n	8006a06 <HAL_TIM_PWM_Start+0x6a>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b08      	cmp	r3, #8
 80069de:	d109      	bne.n	80069f4 <HAL_TIM_PWM_Start+0x58>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	bf14      	ite	ne
 80069ec:	2301      	movne	r3, #1
 80069ee:	2300      	moveq	r3, #0
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	e008      	b.n	8006a06 <HAL_TIM_PWM_Start+0x6a>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	bf14      	ite	ne
 8006a00:	2301      	movne	r3, #1
 8006a02:	2300      	moveq	r3, #0
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e068      	b.n	8006ae0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d104      	bne.n	8006a1e <HAL_TIM_PWM_Start+0x82>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2202      	movs	r2, #2
 8006a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a1c:	e013      	b.n	8006a46 <HAL_TIM_PWM_Start+0xaa>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	d104      	bne.n	8006a2e <HAL_TIM_PWM_Start+0x92>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a2c:	e00b      	b.n	8006a46 <HAL_TIM_PWM_Start+0xaa>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d104      	bne.n	8006a3e <HAL_TIM_PWM_Start+0xa2>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a3c:	e003      	b.n	8006a46 <HAL_TIM_PWM_Start+0xaa>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2202      	movs	r2, #2
 8006a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 ff56 	bl	8007900 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a23      	ldr	r2, [pc, #140]	; (8006ae8 <HAL_TIM_PWM_Start+0x14c>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d107      	bne.n	8006a6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a1d      	ldr	r2, [pc, #116]	; (8006ae8 <HAL_TIM_PWM_Start+0x14c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d018      	beq.n	8006aaa <HAL_TIM_PWM_Start+0x10e>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a80:	d013      	beq.n	8006aaa <HAL_TIM_PWM_Start+0x10e>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a19      	ldr	r2, [pc, #100]	; (8006aec <HAL_TIM_PWM_Start+0x150>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00e      	beq.n	8006aaa <HAL_TIM_PWM_Start+0x10e>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a17      	ldr	r2, [pc, #92]	; (8006af0 <HAL_TIM_PWM_Start+0x154>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d009      	beq.n	8006aaa <HAL_TIM_PWM_Start+0x10e>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a16      	ldr	r2, [pc, #88]	; (8006af4 <HAL_TIM_PWM_Start+0x158>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d004      	beq.n	8006aaa <HAL_TIM_PWM_Start+0x10e>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a14      	ldr	r2, [pc, #80]	; (8006af8 <HAL_TIM_PWM_Start+0x15c>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d111      	bne.n	8006ace <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f003 0307 	and.w	r3, r3, #7
 8006ab4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2b06      	cmp	r3, #6
 8006aba:	d010      	beq.n	8006ade <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0201 	orr.w	r2, r2, #1
 8006aca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006acc:	e007      	b.n	8006ade <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f042 0201 	orr.w	r2, r2, #1
 8006adc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	40010000 	.word	0x40010000
 8006aec:	40000400 	.word	0x40000400
 8006af0:	40000800 	.word	0x40000800
 8006af4:	40000c00 	.word	0x40000c00
 8006af8:	40014000 	.word	0x40014000

08006afc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fef6 	bl	8007900 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a29      	ldr	r2, [pc, #164]	; (8006bc0 <HAL_TIM_PWM_Stop+0xc4>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d117      	bne.n	8006b4e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6a1a      	ldr	r2, [r3, #32]
 8006b24:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b28:	4013      	ands	r3, r2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10f      	bne.n	8006b4e <HAL_TIM_PWM_Stop+0x52>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6a1a      	ldr	r2, [r3, #32]
 8006b34:	f240 4344 	movw	r3, #1092	; 0x444
 8006b38:	4013      	ands	r3, r2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d107      	bne.n	8006b4e <HAL_TIM_PWM_Stop+0x52>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6a1a      	ldr	r2, [r3, #32]
 8006b54:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b58:	4013      	ands	r3, r2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10f      	bne.n	8006b7e <HAL_TIM_PWM_Stop+0x82>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6a1a      	ldr	r2, [r3, #32]
 8006b64:	f240 4344 	movw	r3, #1092	; 0x444
 8006b68:	4013      	ands	r3, r2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d107      	bne.n	8006b7e <HAL_TIM_PWM_Stop+0x82>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 0201 	bic.w	r2, r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d104      	bne.n	8006b8e <HAL_TIM_PWM_Stop+0x92>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b8c:	e013      	b.n	8006bb6 <HAL_TIM_PWM_Stop+0xba>
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	d104      	bne.n	8006b9e <HAL_TIM_PWM_Stop+0xa2>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b9c:	e00b      	b.n	8006bb6 <HAL_TIM_PWM_Stop+0xba>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d104      	bne.n	8006bae <HAL_TIM_PWM_Stop+0xb2>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bac:	e003      	b.n	8006bb6 <HAL_TIM_PWM_Stop+0xba>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	40010000 	.word	0x40010000

08006bc4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e097      	b.n	8006d08 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d106      	bne.n	8006bf2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7fb fd63 	bl	80026b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6812      	ldr	r2, [r2, #0]
 8006c04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c08:	f023 0307 	bic.w	r3, r3, #7
 8006c0c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	3304      	adds	r3, #4
 8006c16:	4619      	mov	r1, r3
 8006c18:	4610      	mov	r0, r2
 8006c1a:	f000 fbcb 	bl	80073b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c46:	f023 0303 	bic.w	r3, r3, #3
 8006c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	689a      	ldr	r2, [r3, #8]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	021b      	lsls	r3, r3, #8
 8006c56:	4313      	orrs	r3, r2
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006c64:	f023 030c 	bic.w	r3, r3, #12
 8006c68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68da      	ldr	r2, [r3, #12]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	021b      	lsls	r3, r3, #8
 8006c80:	4313      	orrs	r3, r2
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	011a      	lsls	r2, r3, #4
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	031b      	lsls	r3, r3, #12
 8006c94:	4313      	orrs	r3, r2
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006ca2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006caa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d110      	bne.n	8006d62 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d102      	bne.n	8006d4c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d46:	7b7b      	ldrb	r3, [r7, #13]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d001      	beq.n	8006d50 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e069      	b.n	8006e24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d60:	e031      	b.n	8006dc6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b04      	cmp	r3, #4
 8006d66:	d110      	bne.n	8006d8a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d68:	7bbb      	ldrb	r3, [r7, #14]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d102      	bne.n	8006d74 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d6e:	7b3b      	ldrb	r3, [r7, #12]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d001      	beq.n	8006d78 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e055      	b.n	8006e24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d88:	e01d      	b.n	8006dc6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d108      	bne.n	8006da2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d105      	bne.n	8006da2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d96:	7b7b      	ldrb	r3, [r7, #13]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d102      	bne.n	8006da2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d9c:	7b3b      	ldrb	r3, [r7, #12]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d001      	beq.n	8006da6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e03e      	b.n	8006e24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2202      	movs	r2, #2
 8006daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2202      	movs	r2, #2
 8006db2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2202      	movs	r2, #2
 8006dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <HAL_TIM_Encoder_Start+0xc4>
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d008      	beq.n	8006de4 <HAL_TIM_Encoder_Start+0xd4>
 8006dd2:	e00f      	b.n	8006df4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	2100      	movs	r1, #0
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 fd8f 	bl	8007900 <TIM_CCxChannelCmd>
      break;
 8006de2:	e016      	b.n	8006e12 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2201      	movs	r2, #1
 8006dea:	2104      	movs	r1, #4
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 fd87 	bl	8007900 <TIM_CCxChannelCmd>
      break;
 8006df2:	e00e      	b.n	8006e12 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 fd7f 	bl	8007900 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2201      	movs	r2, #1
 8006e08:	2104      	movs	r1, #4
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 fd78 	bl	8007900 <TIM_CCxChannelCmd>
      break;
 8006e10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f042 0201 	orr.w	r2, r2, #1
 8006e20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d122      	bne.n	8006e88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d11b      	bne.n	8006e88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f06f 0202 	mvn.w	r2, #2
 8006e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fa81 	bl	8007376 <HAL_TIM_IC_CaptureCallback>
 8006e74:	e005      	b.n	8006e82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fa73 	bl	8007362 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fa84 	bl	800738a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	f003 0304 	and.w	r3, r3, #4
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	d122      	bne.n	8006edc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f003 0304 	and.w	r3, r3, #4
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	d11b      	bne.n	8006edc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f06f 0204 	mvn.w	r2, #4
 8006eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d003      	beq.n	8006eca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fa57 	bl	8007376 <HAL_TIM_IC_CaptureCallback>
 8006ec8:	e005      	b.n	8006ed6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fa49 	bl	8007362 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fa5a 	bl	800738a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	2b08      	cmp	r3, #8
 8006ee8:	d122      	bne.n	8006f30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	f003 0308 	and.w	r3, r3, #8
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d11b      	bne.n	8006f30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f06f 0208 	mvn.w	r2, #8
 8006f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2204      	movs	r2, #4
 8006f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	f003 0303 	and.w	r3, r3, #3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fa2d 	bl	8007376 <HAL_TIM_IC_CaptureCallback>
 8006f1c:	e005      	b.n	8006f2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fa1f 	bl	8007362 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fa30 	bl	800738a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	f003 0310 	and.w	r3, r3, #16
 8006f3a:	2b10      	cmp	r3, #16
 8006f3c:	d122      	bne.n	8006f84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f003 0310 	and.w	r3, r3, #16
 8006f48:	2b10      	cmp	r3, #16
 8006f4a:	d11b      	bne.n	8006f84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f06f 0210 	mvn.w	r2, #16
 8006f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2208      	movs	r2, #8
 8006f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fa03 	bl	8007376 <HAL_TIM_IC_CaptureCallback>
 8006f70:	e005      	b.n	8006f7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f9f5 	bl	8007362 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fa06 	bl	800738a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d10e      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d107      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f06f 0201 	mvn.w	r2, #1
 8006fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f9cf 	bl	800734e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fba:	2b80      	cmp	r3, #128	; 0x80
 8006fbc:	d10e      	bne.n	8006fdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fc8:	2b80      	cmp	r3, #128	; 0x80
 8006fca:	d107      	bne.n	8006fdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fd82 	bl	8007ae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe6:	2b40      	cmp	r3, #64	; 0x40
 8006fe8:	d10e      	bne.n	8007008 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff4:	2b40      	cmp	r3, #64	; 0x40
 8006ff6:	d107      	bne.n	8007008 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f9cb 	bl	800739e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f003 0320 	and.w	r3, r3, #32
 8007012:	2b20      	cmp	r3, #32
 8007014:	d10e      	bne.n	8007034 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f003 0320 	and.w	r3, r3, #32
 8007020:	2b20      	cmp	r3, #32
 8007022:	d107      	bne.n	8007034 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f06f 0220 	mvn.w	r2, #32
 800702c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fd4c 	bl	8007acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007034:	bf00      	nop
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007052:	2b01      	cmp	r3, #1
 8007054:	d101      	bne.n	800705a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007056:	2302      	movs	r3, #2
 8007058:	e0ae      	b.n	80071b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b0c      	cmp	r3, #12
 8007066:	f200 809f 	bhi.w	80071a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800706a:	a201      	add	r2, pc, #4	; (adr r2, 8007070 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800706c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007070:	080070a5 	.word	0x080070a5
 8007074:	080071a9 	.word	0x080071a9
 8007078:	080071a9 	.word	0x080071a9
 800707c:	080071a9 	.word	0x080071a9
 8007080:	080070e5 	.word	0x080070e5
 8007084:	080071a9 	.word	0x080071a9
 8007088:	080071a9 	.word	0x080071a9
 800708c:	080071a9 	.word	0x080071a9
 8007090:	08007127 	.word	0x08007127
 8007094:	080071a9 	.word	0x080071a9
 8007098:	080071a9 	.word	0x080071a9
 800709c:	080071a9 	.word	0x080071a9
 80070a0:	08007167 	.word	0x08007167
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68b9      	ldr	r1, [r7, #8]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 fa02 	bl	80074b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	699a      	ldr	r2, [r3, #24]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f042 0208 	orr.w	r2, r2, #8
 80070be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699a      	ldr	r2, [r3, #24]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 0204 	bic.w	r2, r2, #4
 80070ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6999      	ldr	r1, [r3, #24]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	691a      	ldr	r2, [r3, #16]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	619a      	str	r2, [r3, #24]
      break;
 80070e2:	e064      	b.n	80071ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68b9      	ldr	r1, [r7, #8]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fa48 	bl	8007580 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	699a      	ldr	r2, [r3, #24]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	699a      	ldr	r2, [r3, #24]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800710e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6999      	ldr	r1, [r3, #24]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	021a      	lsls	r2, r3, #8
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	430a      	orrs	r2, r1
 8007122:	619a      	str	r2, [r3, #24]
      break;
 8007124:	e043      	b.n	80071ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68b9      	ldr	r1, [r7, #8]
 800712c:	4618      	mov	r0, r3
 800712e:	f000 fa93 	bl	8007658 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	69da      	ldr	r2, [r3, #28]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f042 0208 	orr.w	r2, r2, #8
 8007140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	69da      	ldr	r2, [r3, #28]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 0204 	bic.w	r2, r2, #4
 8007150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	69d9      	ldr	r1, [r3, #28]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	691a      	ldr	r2, [r3, #16]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	430a      	orrs	r2, r1
 8007162:	61da      	str	r2, [r3, #28]
      break;
 8007164:	e023      	b.n	80071ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68b9      	ldr	r1, [r7, #8]
 800716c:	4618      	mov	r0, r3
 800716e:	f000 fadd 	bl	800772c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69da      	ldr	r2, [r3, #28]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69da      	ldr	r2, [r3, #28]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	69d9      	ldr	r1, [r3, #28]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	021a      	lsls	r2, r3, #8
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	61da      	str	r2, [r3, #28]
      break;
 80071a6:	e002      	b.n	80071ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	75fb      	strb	r3, [r7, #23]
      break;
 80071ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3718      	adds	r7, #24
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071ca:	2300      	movs	r3, #0
 80071cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d101      	bne.n	80071dc <HAL_TIM_ConfigClockSource+0x1c>
 80071d8:	2302      	movs	r3, #2
 80071da:	e0b4      	b.n	8007346 <HAL_TIM_ConfigClockSource+0x186>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2202      	movs	r2, #2
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007202:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007214:	d03e      	beq.n	8007294 <HAL_TIM_ConfigClockSource+0xd4>
 8007216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800721a:	f200 8087 	bhi.w	800732c <HAL_TIM_ConfigClockSource+0x16c>
 800721e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007222:	f000 8086 	beq.w	8007332 <HAL_TIM_ConfigClockSource+0x172>
 8007226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800722a:	d87f      	bhi.n	800732c <HAL_TIM_ConfigClockSource+0x16c>
 800722c:	2b70      	cmp	r3, #112	; 0x70
 800722e:	d01a      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0xa6>
 8007230:	2b70      	cmp	r3, #112	; 0x70
 8007232:	d87b      	bhi.n	800732c <HAL_TIM_ConfigClockSource+0x16c>
 8007234:	2b60      	cmp	r3, #96	; 0x60
 8007236:	d050      	beq.n	80072da <HAL_TIM_ConfigClockSource+0x11a>
 8007238:	2b60      	cmp	r3, #96	; 0x60
 800723a:	d877      	bhi.n	800732c <HAL_TIM_ConfigClockSource+0x16c>
 800723c:	2b50      	cmp	r3, #80	; 0x50
 800723e:	d03c      	beq.n	80072ba <HAL_TIM_ConfigClockSource+0xfa>
 8007240:	2b50      	cmp	r3, #80	; 0x50
 8007242:	d873      	bhi.n	800732c <HAL_TIM_ConfigClockSource+0x16c>
 8007244:	2b40      	cmp	r3, #64	; 0x40
 8007246:	d058      	beq.n	80072fa <HAL_TIM_ConfigClockSource+0x13a>
 8007248:	2b40      	cmp	r3, #64	; 0x40
 800724a:	d86f      	bhi.n	800732c <HAL_TIM_ConfigClockSource+0x16c>
 800724c:	2b30      	cmp	r3, #48	; 0x30
 800724e:	d064      	beq.n	800731a <HAL_TIM_ConfigClockSource+0x15a>
 8007250:	2b30      	cmp	r3, #48	; 0x30
 8007252:	d86b      	bhi.n	800732c <HAL_TIM_ConfigClockSource+0x16c>
 8007254:	2b20      	cmp	r3, #32
 8007256:	d060      	beq.n	800731a <HAL_TIM_ConfigClockSource+0x15a>
 8007258:	2b20      	cmp	r3, #32
 800725a:	d867      	bhi.n	800732c <HAL_TIM_ConfigClockSource+0x16c>
 800725c:	2b00      	cmp	r3, #0
 800725e:	d05c      	beq.n	800731a <HAL_TIM_ConfigClockSource+0x15a>
 8007260:	2b10      	cmp	r3, #16
 8007262:	d05a      	beq.n	800731a <HAL_TIM_ConfigClockSource+0x15a>
 8007264:	e062      	b.n	800732c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6818      	ldr	r0, [r3, #0]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	6899      	ldr	r1, [r3, #8]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f000 fb23 	bl	80078c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007288:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	609a      	str	r2, [r3, #8]
      break;
 8007292:	e04f      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6818      	ldr	r0, [r3, #0]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	6899      	ldr	r1, [r3, #8]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f000 fb0c 	bl	80078c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689a      	ldr	r2, [r3, #8]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072b6:	609a      	str	r2, [r3, #8]
      break;
 80072b8:	e03c      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6818      	ldr	r0, [r3, #0]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	6859      	ldr	r1, [r3, #4]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	461a      	mov	r2, r3
 80072c8:	f000 fa80 	bl	80077cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2150      	movs	r1, #80	; 0x50
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 fad9 	bl	800788a <TIM_ITRx_SetConfig>
      break;
 80072d8:	e02c      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6818      	ldr	r0, [r3, #0]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	6859      	ldr	r1, [r3, #4]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	461a      	mov	r2, r3
 80072e8:	f000 fa9f 	bl	800782a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2160      	movs	r1, #96	; 0x60
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 fac9 	bl	800788a <TIM_ITRx_SetConfig>
      break;
 80072f8:	e01c      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6818      	ldr	r0, [r3, #0]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	6859      	ldr	r1, [r3, #4]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	461a      	mov	r2, r3
 8007308:	f000 fa60 	bl	80077cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2140      	movs	r1, #64	; 0x40
 8007312:	4618      	mov	r0, r3
 8007314:	f000 fab9 	bl	800788a <TIM_ITRx_SetConfig>
      break;
 8007318:	e00c      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4619      	mov	r1, r3
 8007324:	4610      	mov	r0, r2
 8007326:	f000 fab0 	bl	800788a <TIM_ITRx_SetConfig>
      break;
 800732a:	e003      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	73fb      	strb	r3, [r7, #15]
      break;
 8007330:	e000      	b.n	8007334 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007332:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007344:	7bfb      	ldrb	r3, [r7, #15]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800734e:	b480      	push	{r7}
 8007350:	b083      	sub	sp, #12
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007356:	bf00      	nop
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800736a:	bf00      	nop
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800737e:	bf00      	nop
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800738a:	b480      	push	{r7}
 800738c:	b083      	sub	sp, #12
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007392:	bf00      	nop
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073a6:	bf00      	nop
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
	...

080073b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a34      	ldr	r2, [pc, #208]	; (8007498 <TIM_Base_SetConfig+0xe4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d00f      	beq.n	80073ec <TIM_Base_SetConfig+0x38>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d2:	d00b      	beq.n	80073ec <TIM_Base_SetConfig+0x38>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a31      	ldr	r2, [pc, #196]	; (800749c <TIM_Base_SetConfig+0xe8>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d007      	beq.n	80073ec <TIM_Base_SetConfig+0x38>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a30      	ldr	r2, [pc, #192]	; (80074a0 <TIM_Base_SetConfig+0xec>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d003      	beq.n	80073ec <TIM_Base_SetConfig+0x38>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a2f      	ldr	r2, [pc, #188]	; (80074a4 <TIM_Base_SetConfig+0xf0>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d108      	bne.n	80073fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a25      	ldr	r2, [pc, #148]	; (8007498 <TIM_Base_SetConfig+0xe4>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d01b      	beq.n	800743e <TIM_Base_SetConfig+0x8a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800740c:	d017      	beq.n	800743e <TIM_Base_SetConfig+0x8a>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a22      	ldr	r2, [pc, #136]	; (800749c <TIM_Base_SetConfig+0xe8>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d013      	beq.n	800743e <TIM_Base_SetConfig+0x8a>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a21      	ldr	r2, [pc, #132]	; (80074a0 <TIM_Base_SetConfig+0xec>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d00f      	beq.n	800743e <TIM_Base_SetConfig+0x8a>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a20      	ldr	r2, [pc, #128]	; (80074a4 <TIM_Base_SetConfig+0xf0>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d00b      	beq.n	800743e <TIM_Base_SetConfig+0x8a>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a1f      	ldr	r2, [pc, #124]	; (80074a8 <TIM_Base_SetConfig+0xf4>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d007      	beq.n	800743e <TIM_Base_SetConfig+0x8a>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a1e      	ldr	r2, [pc, #120]	; (80074ac <TIM_Base_SetConfig+0xf8>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d003      	beq.n	800743e <TIM_Base_SetConfig+0x8a>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a1d      	ldr	r2, [pc, #116]	; (80074b0 <TIM_Base_SetConfig+0xfc>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d108      	bne.n	8007450 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	4313      	orrs	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	4313      	orrs	r3, r2
 800745c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	689a      	ldr	r2, [r3, #8]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a08      	ldr	r2, [pc, #32]	; (8007498 <TIM_Base_SetConfig+0xe4>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d103      	bne.n	8007484 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	691a      	ldr	r2, [r3, #16]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	615a      	str	r2, [r3, #20]
}
 800748a:	bf00      	nop
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	40010000 	.word	0x40010000
 800749c:	40000400 	.word	0x40000400
 80074a0:	40000800 	.word	0x40000800
 80074a4:	40000c00 	.word	0x40000c00
 80074a8:	40014000 	.word	0x40014000
 80074ac:	40014400 	.word	0x40014400
 80074b0:	40014800 	.word	0x40014800

080074b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	f023 0201 	bic.w	r2, r3, #1
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f023 0303 	bic.w	r3, r3, #3
 80074ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f023 0302 	bic.w	r3, r3, #2
 80074fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	4313      	orrs	r3, r2
 8007506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a1c      	ldr	r2, [pc, #112]	; (800757c <TIM_OC1_SetConfig+0xc8>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d10c      	bne.n	800752a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f023 0308 	bic.w	r3, r3, #8
 8007516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	4313      	orrs	r3, r2
 8007520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f023 0304 	bic.w	r3, r3, #4
 8007528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a13      	ldr	r2, [pc, #76]	; (800757c <TIM_OC1_SetConfig+0xc8>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d111      	bne.n	8007556 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	4313      	orrs	r3, r2
 800754a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	4313      	orrs	r3, r2
 8007554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	621a      	str	r2, [r3, #32]
}
 8007570:	bf00      	nop
 8007572:	371c      	adds	r7, #28
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	40010000 	.word	0x40010000

08007580 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	f023 0210 	bic.w	r2, r3, #16
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	021b      	lsls	r3, r3, #8
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f023 0320 	bic.w	r3, r3, #32
 80075ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	011b      	lsls	r3, r3, #4
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a1e      	ldr	r2, [pc, #120]	; (8007654 <TIM_OC2_SetConfig+0xd4>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d10d      	bne.n	80075fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	011b      	lsls	r3, r3, #4
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a15      	ldr	r2, [pc, #84]	; (8007654 <TIM_OC2_SetConfig+0xd4>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d113      	bne.n	800762c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800760a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007612:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	4313      	orrs	r3, r2
 800761e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	4313      	orrs	r3, r2
 800762a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	621a      	str	r2, [r3, #32]
}
 8007646:	bf00      	nop
 8007648:	371c      	adds	r7, #28
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	40010000 	.word	0x40010000

08007658 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f023 0303 	bic.w	r3, r3, #3
 800768e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	4313      	orrs	r3, r2
 8007698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	021b      	lsls	r3, r3, #8
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a1d      	ldr	r2, [pc, #116]	; (8007728 <TIM_OC3_SetConfig+0xd0>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d10d      	bne.n	80076d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	021b      	lsls	r3, r3, #8
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a14      	ldr	r2, [pc, #80]	; (8007728 <TIM_OC3_SetConfig+0xd0>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d113      	bne.n	8007702 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	011b      	lsls	r3, r3, #4
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	011b      	lsls	r3, r3, #4
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	4313      	orrs	r3, r2
 8007700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	621a      	str	r2, [r3, #32]
}
 800771c:	bf00      	nop
 800771e:	371c      	adds	r7, #28
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	40010000 	.word	0x40010000

0800772c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800772c:	b480      	push	{r7}
 800772e:	b087      	sub	sp, #28
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800775a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	021b      	lsls	r3, r3, #8
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	4313      	orrs	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007776:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	031b      	lsls	r3, r3, #12
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	4313      	orrs	r3, r2
 8007782:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a10      	ldr	r2, [pc, #64]	; (80077c8 <TIM_OC4_SetConfig+0x9c>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d109      	bne.n	80077a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007792:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	019b      	lsls	r3, r3, #6
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	4313      	orrs	r3, r2
 800779e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	621a      	str	r2, [r3, #32]
}
 80077ba:	bf00      	nop
 80077bc:	371c      	adds	r7, #28
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	40010000 	.word	0x40010000

080077cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	f023 0201 	bic.w	r2, r3, #1
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	011b      	lsls	r3, r3, #4
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	4313      	orrs	r3, r2
 8007800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f023 030a 	bic.w	r3, r3, #10
 8007808:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	4313      	orrs	r3, r2
 8007810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	621a      	str	r2, [r3, #32]
}
 800781e:	bf00      	nop
 8007820:	371c      	adds	r7, #28
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800782a:	b480      	push	{r7}
 800782c:	b087      	sub	sp, #28
 800782e:	af00      	add	r7, sp, #0
 8007830:	60f8      	str	r0, [r7, #12]
 8007832:	60b9      	str	r1, [r7, #8]
 8007834:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	f023 0210 	bic.w	r2, r3, #16
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6a1b      	ldr	r3, [r3, #32]
 800784c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007854:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	031b      	lsls	r3, r3, #12
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	4313      	orrs	r3, r2
 800785e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007866:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	011b      	lsls	r3, r3, #4
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	4313      	orrs	r3, r2
 8007870:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	621a      	str	r2, [r3, #32]
}
 800787e:	bf00      	nop
 8007880:	371c      	adds	r7, #28
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800788a:	b480      	push	{r7}
 800788c:	b085      	sub	sp, #20
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	f043 0307 	orr.w	r3, r3, #7
 80078ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	609a      	str	r2, [r3, #8]
}
 80078b4:	bf00      	nop
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b087      	sub	sp, #28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
 80078cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	021a      	lsls	r2, r3, #8
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	431a      	orrs	r2, r3
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	609a      	str	r2, [r3, #8]
}
 80078f4:	bf00      	nop
 80078f6:	371c      	adds	r7, #28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007900:	b480      	push	{r7}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f003 031f 	and.w	r3, r3, #31
 8007912:	2201      	movs	r2, #1
 8007914:	fa02 f303 	lsl.w	r3, r2, r3
 8007918:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6a1a      	ldr	r2, [r3, #32]
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	43db      	mvns	r3, r3
 8007922:	401a      	ands	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6a1a      	ldr	r2, [r3, #32]
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f003 031f 	and.w	r3, r3, #31
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	fa01 f303 	lsl.w	r3, r1, r3
 8007938:	431a      	orrs	r2, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	621a      	str	r2, [r3, #32]
}
 800793e:	bf00      	nop
 8007940:	371c      	adds	r7, #28
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
	...

0800794c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800795c:	2b01      	cmp	r3, #1
 800795e:	d101      	bne.n	8007964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007960:	2302      	movs	r3, #2
 8007962:	e050      	b.n	8007a06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2202      	movs	r2, #2
 8007970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800798a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	4313      	orrs	r3, r2
 8007994:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a1c      	ldr	r2, [pc, #112]	; (8007a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d018      	beq.n	80079da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b0:	d013      	beq.n	80079da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a18      	ldr	r2, [pc, #96]	; (8007a18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d00e      	beq.n	80079da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a16      	ldr	r2, [pc, #88]	; (8007a1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d009      	beq.n	80079da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a15      	ldr	r2, [pc, #84]	; (8007a20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d004      	beq.n	80079da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a13      	ldr	r2, [pc, #76]	; (8007a24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d10c      	bne.n	80079f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3714      	adds	r7, #20
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	40010000 	.word	0x40010000
 8007a18:	40000400 	.word	0x40000400
 8007a1c:	40000800 	.word	0x40000800
 8007a20:	40000c00 	.word	0x40000c00
 8007a24:	40014000 	.word	0x40014000

08007a28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d101      	bne.n	8007a44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a40:	2302      	movs	r3, #2
 8007a42:	e03d      	b.n	8007ac0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e03f      	b.n	8007b86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d106      	bne.n	8007b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7fa fe4c 	bl	80027b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2224      	movs	r2, #36	; 0x24
 8007b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68da      	ldr	r2, [r3, #12]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f001 f8cb 	bl	8008cd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	691a      	ldr	r2, [r3, #16]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	695a      	ldr	r2, [r3, #20]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68da      	ldr	r2, [r3, #12]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2220      	movs	r2, #32
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2220      	movs	r2, #32
 8007b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e021      	b.n	8007be4 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2224      	movs	r2, #36	; 0x24
 8007ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68da      	ldr	r2, [r3, #12]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bb6:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7fa ff55 	bl	8002a68 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b08a      	sub	sp, #40	; 0x28
 8007bf0:	af02      	add	r7, sp, #8
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	603b      	str	r3, [r7, #0]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b20      	cmp	r3, #32
 8007c0a:	d17c      	bne.n	8007d06 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d002      	beq.n	8007c18 <HAL_UART_Transmit+0x2c>
 8007c12:	88fb      	ldrh	r3, [r7, #6]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d101      	bne.n	8007c1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e075      	b.n	8007d08 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d101      	bne.n	8007c2a <HAL_UART_Transmit+0x3e>
 8007c26:	2302      	movs	r3, #2
 8007c28:	e06e      	b.n	8007d08 <HAL_UART_Transmit+0x11c>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2221      	movs	r2, #33	; 0x21
 8007c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c40:	f7fc fcf6 	bl	8004630 <HAL_GetTick>
 8007c44:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	88fa      	ldrh	r2, [r7, #6]
 8007c4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	88fa      	ldrh	r2, [r7, #6]
 8007c50:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c5a:	d108      	bne.n	8007c6e <HAL_UART_Transmit+0x82>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d104      	bne.n	8007c6e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007c64:	2300      	movs	r3, #0
 8007c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	61bb      	str	r3, [r7, #24]
 8007c6c:	e003      	b.n	8007c76 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c72:	2300      	movs	r3, #0
 8007c74:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007c7e:	e02a      	b.n	8007cd6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	2200      	movs	r2, #0
 8007c88:	2180      	movs	r1, #128	; 0x80
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 fd53 	bl	8008736 <UART_WaitOnFlagUntilTimeout>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e036      	b.n	8007d08 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10b      	bne.n	8007cb8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cae:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	3302      	adds	r3, #2
 8007cb4:	61bb      	str	r3, [r7, #24]
 8007cb6:	e007      	b.n	8007cc8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	781a      	ldrb	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1cf      	bne.n	8007c80 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	2140      	movs	r1, #64	; 0x40
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 fd23 	bl	8008736 <UART_WaitOnFlagUntilTimeout>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e006      	b.n	8007d08 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	e000      	b.n	8007d08 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007d06:	2302      	movs	r3, #2
  }
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3720      	adds	r7, #32
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b08c      	sub	sp, #48	; 0x30
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b20      	cmp	r3, #32
 8007d28:	d165      	bne.n	8007df6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d002      	beq.n	8007d36 <HAL_UART_Transmit_DMA+0x26>
 8007d30:	88fb      	ldrh	r3, [r7, #6]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e05e      	b.n	8007df8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d101      	bne.n	8007d48 <HAL_UART_Transmit_DMA+0x38>
 8007d44:	2302      	movs	r3, #2
 8007d46:	e057      	b.n	8007df8 <HAL_UART_Transmit_DMA+0xe8>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	88fa      	ldrh	r2, [r7, #6]
 8007d5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	88fa      	ldrh	r2, [r7, #6]
 8007d60:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2221      	movs	r2, #33	; 0x21
 8007d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d74:	4a22      	ldr	r2, [pc, #136]	; (8007e00 <HAL_UART_Transmit_DMA+0xf0>)
 8007d76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7c:	4a21      	ldr	r2, [pc, #132]	; (8007e04 <HAL_UART_Transmit_DMA+0xf4>)
 8007d7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d84:	4a20      	ldr	r2, [pc, #128]	; (8007e08 <HAL_UART_Transmit_DMA+0xf8>)
 8007d86:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007d90:	f107 0308 	add.w	r3, r7, #8
 8007d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9c:	6819      	ldr	r1, [r3, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3304      	adds	r3, #4
 8007da4:	461a      	mov	r2, r3
 8007da6:	88fb      	ldrh	r3, [r7, #6]
 8007da8:	f7fd fa90 	bl	80052cc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007db4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3314      	adds	r3, #20
 8007dc4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	e853 3f00 	ldrex	r3, [r3]
 8007dcc:	617b      	str	r3, [r7, #20]
   return(result);
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3314      	adds	r3, #20
 8007ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dde:	627a      	str	r2, [r7, #36]	; 0x24
 8007de0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de2:	6a39      	ldr	r1, [r7, #32]
 8007de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007de6:	e841 2300 	strex	r3, r2, [r1]
 8007dea:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1e5      	bne.n	8007dbe <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	e000      	b.n	8007df8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007df6:	2302      	movs	r3, #2
  }
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3730      	adds	r7, #48	; 0x30
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	08008491 	.word	0x08008491
 8007e04:	0800852b 	.word	0x0800852b
 8007e08:	080086a3 	.word	0x080086a3

08007e0c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	4613      	mov	r3, r2
 8007e18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b20      	cmp	r3, #32
 8007e24:	d11d      	bne.n	8007e62 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d002      	beq.n	8007e32 <HAL_UART_Receive_DMA+0x26>
 8007e2c:	88fb      	ldrh	r3, [r7, #6]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d101      	bne.n	8007e36 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e016      	b.n	8007e64 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d101      	bne.n	8007e44 <HAL_UART_Receive_DMA+0x38>
 8007e40:	2302      	movs	r3, #2
 8007e42:	e00f      	b.n	8007e64 <HAL_UART_Receive_DMA+0x58>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007e52:	88fb      	ldrh	r3, [r7, #6]
 8007e54:	461a      	mov	r2, r3
 8007e56:	68b9      	ldr	r1, [r7, #8]
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 fcdb 	bl	8008814 <UART_Start_Receive_DMA>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	e000      	b.n	8007e64 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007e62:	2302      	movs	r3, #2
  }
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08c      	sub	sp, #48	; 0x30
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	4613      	mov	r3, r2
 8007e78:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b20      	cmp	r3, #32
 8007e84:	d152      	bne.n	8007f2c <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007e8c:	88fb      	ldrh	r3, [r7, #6]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d101      	bne.n	8007e96 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e04b      	b.n	8007f2e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d101      	bne.n	8007ea4 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	e044      	b.n	8007f2e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007eb2:	88fb      	ldrh	r3, [r7, #6]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	68b9      	ldr	r1, [r7, #8]
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f000 fcab 	bl	8008814 <UART_Start_Receive_DMA>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007ec4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d12c      	bne.n	8007f26 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d125      	bne.n	8007f20 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	613b      	str	r3, [r7, #16]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	613b      	str	r3, [r7, #16]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	613b      	str	r3, [r7, #16]
 8007ee8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	330c      	adds	r3, #12
 8007ef0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	617b      	str	r3, [r7, #20]
   return(result);
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f043 0310 	orr.w	r3, r3, #16
 8007f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	330c      	adds	r3, #12
 8007f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f0a:	627a      	str	r2, [r7, #36]	; 0x24
 8007f0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0e:	6a39      	ldr	r1, [r7, #32]
 8007f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f12:	e841 2300 	strex	r3, r2, [r1]
 8007f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1e5      	bne.n	8007eea <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8007f1e:	e002      	b.n	8007f26 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007f26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f2a:	e000      	b.n	8007f2e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8007f2c:	2302      	movs	r3, #2
  }
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3730      	adds	r7, #48	; 0x30
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b0ba      	sub	sp, #232	; 0xe8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f6e:	f003 030f 	and.w	r3, r3, #15
 8007f72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007f76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10f      	bne.n	8007f9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f82:	f003 0320 	and.w	r3, r3, #32
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d009      	beq.n	8007f9e <HAL_UART_IRQHandler+0x66>
 8007f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f8e:	f003 0320 	and.w	r3, r3, #32
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fde1 	bl	8008b5e <UART_Receive_IT>
      return;
 8007f9c:	e256      	b.n	800844c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f000 80de 	beq.w	8008164 <HAL_UART_IRQHandler+0x22c>
 8007fa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d106      	bne.n	8007fc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f000 80d1 	beq.w	8008164 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00b      	beq.n	8007fe6 <HAL_UART_IRQHandler+0xae>
 8007fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d005      	beq.n	8007fe6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fde:	f043 0201 	orr.w	r2, r3, #1
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fea:	f003 0304 	and.w	r3, r3, #4
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00b      	beq.n	800800a <HAL_UART_IRQHandler+0xd2>
 8007ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d005      	beq.n	800800a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008002:	f043 0202 	orr.w	r2, r3, #2
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800800a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00b      	beq.n	800802e <HAL_UART_IRQHandler+0xf6>
 8008016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d005      	beq.n	800802e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008026:	f043 0204 	orr.w	r2, r3, #4
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800802e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008032:	f003 0308 	and.w	r3, r3, #8
 8008036:	2b00      	cmp	r3, #0
 8008038:	d011      	beq.n	800805e <HAL_UART_IRQHandler+0x126>
 800803a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800803e:	f003 0320 	and.w	r3, r3, #32
 8008042:	2b00      	cmp	r3, #0
 8008044:	d105      	bne.n	8008052 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	2b00      	cmp	r3, #0
 8008050:	d005      	beq.n	800805e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008056:	f043 0208 	orr.w	r2, r3, #8
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 81ed 	beq.w	8008442 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800806c:	f003 0320 	and.w	r3, r3, #32
 8008070:	2b00      	cmp	r3, #0
 8008072:	d008      	beq.n	8008086 <HAL_UART_IRQHandler+0x14e>
 8008074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008078:	f003 0320 	and.w	r3, r3, #32
 800807c:	2b00      	cmp	r3, #0
 800807e:	d002      	beq.n	8008086 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fd6c 	bl	8008b5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008090:	2b40      	cmp	r3, #64	; 0x40
 8008092:	bf0c      	ite	eq
 8008094:	2301      	moveq	r3, #1
 8008096:	2300      	movne	r3, #0
 8008098:	b2db      	uxtb	r3, r3
 800809a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a2:	f003 0308 	and.w	r3, r3, #8
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d103      	bne.n	80080b2 <HAL_UART_IRQHandler+0x17a>
 80080aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d04f      	beq.n	8008152 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fc74 	bl	80089a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c2:	2b40      	cmp	r3, #64	; 0x40
 80080c4:	d141      	bne.n	800814a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3314      	adds	r3, #20
 80080cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080d4:	e853 3f00 	ldrex	r3, [r3]
 80080d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80080dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3314      	adds	r3, #20
 80080ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80080f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80080f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80080fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008102:	e841 2300 	strex	r3, r2, [r1]
 8008106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800810a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1d9      	bne.n	80080c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008116:	2b00      	cmp	r3, #0
 8008118:	d013      	beq.n	8008142 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811e:	4a7d      	ldr	r2, [pc, #500]	; (8008314 <HAL_UART_IRQHandler+0x3dc>)
 8008120:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008126:	4618      	mov	r0, r3
 8008128:	f7fd f998 	bl	800545c <HAL_DMA_Abort_IT>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d016      	beq.n	8008160 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800813c:	4610      	mov	r0, r2
 800813e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008140:	e00e      	b.n	8008160 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7f9 ff5c 	bl	8002000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008148:	e00a      	b.n	8008160 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7f9 ff58 	bl	8002000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008150:	e006      	b.n	8008160 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7f9 ff54 	bl	8002000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800815e:	e170      	b.n	8008442 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008160:	bf00      	nop
    return;
 8008162:	e16e      	b.n	8008442 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008168:	2b01      	cmp	r3, #1
 800816a:	f040 814a 	bne.w	8008402 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800816e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008172:	f003 0310 	and.w	r3, r3, #16
 8008176:	2b00      	cmp	r3, #0
 8008178:	f000 8143 	beq.w	8008402 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800817c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008180:	f003 0310 	and.w	r3, r3, #16
 8008184:	2b00      	cmp	r3, #0
 8008186:	f000 813c 	beq.w	8008402 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800818a:	2300      	movs	r3, #0
 800818c:	60bb      	str	r3, [r7, #8]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	60bb      	str	r3, [r7, #8]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	60bb      	str	r3, [r7, #8]
 800819e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081aa:	2b40      	cmp	r3, #64	; 0x40
 80081ac:	f040 80b4 	bne.w	8008318 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 8140 	beq.w	8008446 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081ce:	429a      	cmp	r2, r3
 80081d0:	f080 8139 	bcs.w	8008446 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081e6:	f000 8088 	beq.w	80082fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	330c      	adds	r3, #12
 80081f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008200:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008208:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	330c      	adds	r3, #12
 8008212:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008216:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800821a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008222:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008226:	e841 2300 	strex	r3, r2, [r1]
 800822a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800822e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1d9      	bne.n	80081ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3314      	adds	r3, #20
 800823c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008240:	e853 3f00 	ldrex	r3, [r3]
 8008244:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008246:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008248:	f023 0301 	bic.w	r3, r3, #1
 800824c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3314      	adds	r3, #20
 8008256:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800825a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800825e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008260:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008262:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008266:	e841 2300 	strex	r3, r2, [r1]
 800826a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800826c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1e1      	bne.n	8008236 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3314      	adds	r3, #20
 8008278:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800827c:	e853 3f00 	ldrex	r3, [r3]
 8008280:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008288:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3314      	adds	r3, #20
 8008292:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008296:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008298:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800829c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80082a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e3      	bne.n	8008272 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2220      	movs	r2, #32
 80082ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	330c      	adds	r3, #12
 80082be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082c2:	e853 3f00 	ldrex	r3, [r3]
 80082c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ca:	f023 0310 	bic.w	r3, r3, #16
 80082ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	330c      	adds	r3, #12
 80082d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80082dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80082de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082e4:	e841 2300 	strex	r3, r2, [r1]
 80082e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1e3      	bne.n	80082b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fd f841 	bl	800537c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008302:	b29b      	uxth	r3, r3
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	b29b      	uxth	r3, r3
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7f9 fe66 	bl	8001fdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008310:	e099      	b.n	8008446 <HAL_UART_IRQHandler+0x50e>
 8008312:	bf00      	nop
 8008314:	08008a67 	.word	0x08008a67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008320:	b29b      	uxth	r3, r3
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800832c:	b29b      	uxth	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	f000 808b 	beq.w	800844a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008334:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008338:	2b00      	cmp	r3, #0
 800833a:	f000 8086 	beq.w	800844a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	330c      	adds	r3, #12
 8008344:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008348:	e853 3f00 	ldrex	r3, [r3]
 800834c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800834e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008350:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008354:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	330c      	adds	r3, #12
 800835e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008362:	647a      	str	r2, [r7, #68]	; 0x44
 8008364:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008366:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008368:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800836a:	e841 2300 	strex	r3, r2, [r1]
 800836e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1e3      	bne.n	800833e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3314      	adds	r3, #20
 800837c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	e853 3f00 	ldrex	r3, [r3]
 8008384:	623b      	str	r3, [r7, #32]
   return(result);
 8008386:	6a3b      	ldr	r3, [r7, #32]
 8008388:	f023 0301 	bic.w	r3, r3, #1
 800838c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	3314      	adds	r3, #20
 8008396:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800839a:	633a      	str	r2, [r7, #48]	; 0x30
 800839c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083a2:	e841 2300 	strex	r3, r2, [r1]
 80083a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1e3      	bne.n	8008376 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2220      	movs	r2, #32
 80083b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	330c      	adds	r3, #12
 80083c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	e853 3f00 	ldrex	r3, [r3]
 80083ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f023 0310 	bic.w	r3, r3, #16
 80083d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	330c      	adds	r3, #12
 80083dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80083e0:	61fa      	str	r2, [r7, #28]
 80083e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e4:	69b9      	ldr	r1, [r7, #24]
 80083e6:	69fa      	ldr	r2, [r7, #28]
 80083e8:	e841 2300 	strex	r3, r2, [r1]
 80083ec:	617b      	str	r3, [r7, #20]
   return(result);
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1e3      	bne.n	80083bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7f9 fdee 	bl	8001fdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008400:	e023      	b.n	800844a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800840a:	2b00      	cmp	r3, #0
 800840c:	d009      	beq.n	8008422 <HAL_UART_IRQHandler+0x4ea>
 800840e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008416:	2b00      	cmp	r3, #0
 8008418:	d003      	beq.n	8008422 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fb37 	bl	8008a8e <UART_Transmit_IT>
    return;
 8008420:	e014      	b.n	800844c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00e      	beq.n	800844c <HAL_UART_IRQHandler+0x514>
 800842e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008436:	2b00      	cmp	r3, #0
 8008438:	d008      	beq.n	800844c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fb77 	bl	8008b2e <UART_EndTransmit_IT>
    return;
 8008440:	e004      	b.n	800844c <HAL_UART_IRQHandler+0x514>
    return;
 8008442:	bf00      	nop
 8008444:	e002      	b.n	800844c <HAL_UART_IRQHandler+0x514>
      return;
 8008446:	bf00      	nop
 8008448:	e000      	b.n	800844c <HAL_UART_IRQHandler+0x514>
      return;
 800844a:	bf00      	nop
  }
}
 800844c:	37e8      	adds	r7, #232	; 0xe8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop

08008454 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b090      	sub	sp, #64	; 0x40
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d137      	bne.n	800851c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80084ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ae:	2200      	movs	r2, #0
 80084b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	3314      	adds	r3, #20
 80084b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	e853 3f00 	ldrex	r3, [r3]
 80084c0:	623b      	str	r3, [r7, #32]
   return(result);
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80084ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3314      	adds	r3, #20
 80084d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084d2:	633a      	str	r2, [r7, #48]	; 0x30
 80084d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084da:	e841 2300 	strex	r3, r2, [r1]
 80084de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1e5      	bne.n	80084b2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	330c      	adds	r3, #12
 80084ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	e853 3f00 	ldrex	r3, [r3]
 80084f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084fc:	637b      	str	r3, [r7, #52]	; 0x34
 80084fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	330c      	adds	r3, #12
 8008504:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008506:	61fa      	str	r2, [r7, #28]
 8008508:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850a:	69b9      	ldr	r1, [r7, #24]
 800850c:	69fa      	ldr	r2, [r7, #28]
 800850e:	e841 2300 	strex	r3, r2, [r1]
 8008512:	617b      	str	r3, [r7, #20]
   return(result);
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1e5      	bne.n	80084e6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800851a:	e002      	b.n	8008522 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800851c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800851e:	f7f9 fd83 	bl	8002028 <HAL_UART_TxCpltCallback>
}
 8008522:	bf00      	nop
 8008524:	3740      	adds	r7, #64	; 0x40
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008536:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f7ff ff8b 	bl	8008454 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800853e:	bf00      	nop
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b09c      	sub	sp, #112	; 0x70
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008552:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800855e:	2b00      	cmp	r3, #0
 8008560:	d172      	bne.n	8008648 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008564:	2200      	movs	r2, #0
 8008566:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	330c      	adds	r3, #12
 800856e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008572:	e853 3f00 	ldrex	r3, [r3]
 8008576:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800857a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800857e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	330c      	adds	r3, #12
 8008586:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008588:	65ba      	str	r2, [r7, #88]	; 0x58
 800858a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800858e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008590:	e841 2300 	strex	r3, r2, [r1]
 8008594:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1e5      	bne.n	8008568 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800859c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3314      	adds	r3, #20
 80085a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a6:	e853 3f00 	ldrex	r3, [r3]
 80085aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ae:	f023 0301 	bic.w	r3, r3, #1
 80085b2:	667b      	str	r3, [r7, #100]	; 0x64
 80085b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	3314      	adds	r3, #20
 80085ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80085bc:	647a      	str	r2, [r7, #68]	; 0x44
 80085be:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085c4:	e841 2300 	strex	r3, r2, [r1]
 80085c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1e5      	bne.n	800859c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	3314      	adds	r3, #20
 80085d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085da:	e853 3f00 	ldrex	r3, [r3]
 80085de:	623b      	str	r3, [r7, #32]
   return(result);
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085e6:	663b      	str	r3, [r7, #96]	; 0x60
 80085e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3314      	adds	r3, #20
 80085ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085f0:	633a      	str	r2, [r7, #48]	; 0x30
 80085f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085f8:	e841 2300 	strex	r3, r2, [r1]
 80085fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1e5      	bne.n	80085d0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008606:	2220      	movs	r2, #32
 8008608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800860c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800860e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008610:	2b01      	cmp	r3, #1
 8008612:	d119      	bne.n	8008648 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	330c      	adds	r3, #12
 800861a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	e853 3f00 	ldrex	r3, [r3]
 8008622:	60fb      	str	r3, [r7, #12]
   return(result);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f023 0310 	bic.w	r3, r3, #16
 800862a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800862c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	330c      	adds	r3, #12
 8008632:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008634:	61fa      	str	r2, [r7, #28]
 8008636:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008638:	69b9      	ldr	r1, [r7, #24]
 800863a:	69fa      	ldr	r2, [r7, #28]
 800863c:	e841 2300 	strex	r3, r2, [r1]
 8008640:	617b      	str	r3, [r7, #20]
   return(result);
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1e5      	bne.n	8008614 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800864a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864c:	2b01      	cmp	r3, #1
 800864e:	d106      	bne.n	800865e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008652:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008654:	4619      	mov	r1, r3
 8008656:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008658:	f7f9 fcc0 	bl	8001fdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800865c:	e002      	b.n	8008664 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800865e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008660:	f7ff ff02 	bl	8008468 <HAL_UART_RxCpltCallback>
}
 8008664:	bf00      	nop
 8008666:	3770      	adds	r7, #112	; 0x70
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008678:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867e:	2b01      	cmp	r3, #1
 8008680:	d108      	bne.n	8008694 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008686:	085b      	lsrs	r3, r3, #1
 8008688:	b29b      	uxth	r3, r3
 800868a:	4619      	mov	r1, r3
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f7f9 fca5 	bl	8001fdc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008692:	e002      	b.n	800869a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f7ff fef1 	bl	800847c <HAL_UART_RxHalfCpltCallback>
}
 800869a:	bf00      	nop
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b084      	sub	sp, #16
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80086aa:	2300      	movs	r3, #0
 80086ac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086be:	2b80      	cmp	r3, #128	; 0x80
 80086c0:	bf0c      	ite	eq
 80086c2:	2301      	moveq	r3, #1
 80086c4:	2300      	movne	r3, #0
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b21      	cmp	r3, #33	; 0x21
 80086d4:	d108      	bne.n	80086e8 <UART_DMAError+0x46>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d005      	beq.n	80086e8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	2200      	movs	r2, #0
 80086e0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80086e2:	68b8      	ldr	r0, [r7, #8]
 80086e4:	f000 f934 	bl	8008950 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f2:	2b40      	cmp	r3, #64	; 0x40
 80086f4:	bf0c      	ite	eq
 80086f6:	2301      	moveq	r3, #1
 80086f8:	2300      	movne	r3, #0
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b22      	cmp	r3, #34	; 0x22
 8008708:	d108      	bne.n	800871c <UART_DMAError+0x7a>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d005      	beq.n	800871c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2200      	movs	r2, #0
 8008714:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008716:	68b8      	ldr	r0, [r7, #8]
 8008718:	f000 f942 	bl	80089a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008720:	f043 0210 	orr.w	r2, r3, #16
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008728:	68b8      	ldr	r0, [r7, #8]
 800872a:	f7f9 fc69 	bl	8002000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800872e:	bf00      	nop
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b090      	sub	sp, #64	; 0x40
 800873a:	af00      	add	r7, sp, #0
 800873c:	60f8      	str	r0, [r7, #12]
 800873e:	60b9      	str	r1, [r7, #8]
 8008740:	603b      	str	r3, [r7, #0]
 8008742:	4613      	mov	r3, r2
 8008744:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008746:	e050      	b.n	80087ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800874a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800874e:	d04c      	beq.n	80087ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008752:	2b00      	cmp	r3, #0
 8008754:	d007      	beq.n	8008766 <UART_WaitOnFlagUntilTimeout+0x30>
 8008756:	f7fb ff6b 	bl	8004630 <HAL_GetTick>
 800875a:	4602      	mov	r2, r0
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008762:	429a      	cmp	r2, r3
 8008764:	d241      	bcs.n	80087ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	330c      	adds	r3, #12
 800876c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008770:	e853 3f00 	ldrex	r3, [r3]
 8008774:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008778:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800877c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	330c      	adds	r3, #12
 8008784:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008786:	637a      	str	r2, [r7, #52]	; 0x34
 8008788:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800878c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800878e:	e841 2300 	strex	r3, r2, [r1]
 8008792:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1e5      	bne.n	8008766 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	3314      	adds	r3, #20
 80087a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	e853 3f00 	ldrex	r3, [r3]
 80087a8:	613b      	str	r3, [r7, #16]
   return(result);
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f023 0301 	bic.w	r3, r3, #1
 80087b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	3314      	adds	r3, #20
 80087b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087ba:	623a      	str	r2, [r7, #32]
 80087bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087be:	69f9      	ldr	r1, [r7, #28]
 80087c0:	6a3a      	ldr	r2, [r7, #32]
 80087c2:	e841 2300 	strex	r3, r2, [r1]
 80087c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1e5      	bne.n	800879a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2220      	movs	r2, #32
 80087d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2220      	movs	r2, #32
 80087da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e00f      	b.n	800880a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	4013      	ands	r3, r2
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	bf0c      	ite	eq
 80087fa:	2301      	moveq	r3, #1
 80087fc:	2300      	movne	r3, #0
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	461a      	mov	r2, r3
 8008802:	79fb      	ldrb	r3, [r7, #7]
 8008804:	429a      	cmp	r2, r3
 8008806:	d09f      	beq.n	8008748 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3740      	adds	r7, #64	; 0x40
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
	...

08008814 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b098      	sub	sp, #96	; 0x60
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	4613      	mov	r3, r2
 8008820:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	88fa      	ldrh	r2, [r7, #6]
 800882c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2222      	movs	r2, #34	; 0x22
 8008838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008840:	4a40      	ldr	r2, [pc, #256]	; (8008944 <UART_Start_Receive_DMA+0x130>)
 8008842:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008848:	4a3f      	ldr	r2, [pc, #252]	; (8008948 <UART_Start_Receive_DMA+0x134>)
 800884a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008850:	4a3e      	ldr	r2, [pc, #248]	; (800894c <UART_Start_Receive_DMA+0x138>)
 8008852:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008858:	2200      	movs	r2, #0
 800885a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800885c:	f107 0308 	add.w	r3, r7, #8
 8008860:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	3304      	adds	r3, #4
 800886c:	4619      	mov	r1, r3
 800886e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	88fb      	ldrh	r3, [r7, #6]
 8008874:	f7fc fd2a 	bl	80052cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008878:	2300      	movs	r3, #0
 800887a:	613b      	str	r3, [r7, #16]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	613b      	str	r3, [r7, #16]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	613b      	str	r3, [r7, #16]
 800888c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d019      	beq.n	80088d2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	330c      	adds	r3, #12
 80088a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088a8:	e853 3f00 	ldrex	r3, [r3]
 80088ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	330c      	adds	r3, #12
 80088bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088be:	64fa      	str	r2, [r7, #76]	; 0x4c
 80088c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80088c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088c6:	e841 2300 	strex	r3, r2, [r1]
 80088ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80088cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1e5      	bne.n	800889e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	3314      	adds	r3, #20
 80088d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e4:	f043 0301 	orr.w	r3, r3, #1
 80088e8:	657b      	str	r3, [r7, #84]	; 0x54
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3314      	adds	r3, #20
 80088f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088f2:	63ba      	str	r2, [r7, #56]	; 0x38
 80088f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80088f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088fa:	e841 2300 	strex	r3, r2, [r1]
 80088fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1e5      	bne.n	80088d2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3314      	adds	r3, #20
 800890c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	e853 3f00 	ldrex	r3, [r3]
 8008914:	617b      	str	r3, [r7, #20]
   return(result);
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800891c:	653b      	str	r3, [r7, #80]	; 0x50
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3314      	adds	r3, #20
 8008924:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008926:	627a      	str	r2, [r7, #36]	; 0x24
 8008928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892a:	6a39      	ldr	r1, [r7, #32]
 800892c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800892e:	e841 2300 	strex	r3, r2, [r1]
 8008932:	61fb      	str	r3, [r7, #28]
   return(result);
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1e5      	bne.n	8008906 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3760      	adds	r7, #96	; 0x60
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	08008547 	.word	0x08008547
 8008948:	0800866d 	.word	0x0800866d
 800894c:	080086a3 	.word	0x080086a3

08008950 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008950:	b480      	push	{r7}
 8008952:	b089      	sub	sp, #36	; 0x24
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	330c      	adds	r3, #12
 800895e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	e853 3f00 	ldrex	r3, [r3]
 8008966:	60bb      	str	r3, [r7, #8]
   return(result);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800896e:	61fb      	str	r3, [r7, #28]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	330c      	adds	r3, #12
 8008976:	69fa      	ldr	r2, [r7, #28]
 8008978:	61ba      	str	r2, [r7, #24]
 800897a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897c:	6979      	ldr	r1, [r7, #20]
 800897e:	69ba      	ldr	r2, [r7, #24]
 8008980:	e841 2300 	strex	r3, r2, [r1]
 8008984:	613b      	str	r3, [r7, #16]
   return(result);
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1e5      	bne.n	8008958 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2220      	movs	r2, #32
 8008990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008994:	bf00      	nop
 8008996:	3724      	adds	r7, #36	; 0x24
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b095      	sub	sp, #84	; 0x54
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	330c      	adds	r3, #12
 80089ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b2:	e853 3f00 	ldrex	r3, [r3]
 80089b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	330c      	adds	r3, #12
 80089c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089c8:	643a      	str	r2, [r7, #64]	; 0x40
 80089ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089d0:	e841 2300 	strex	r3, r2, [r1]
 80089d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1e5      	bne.n	80089a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	3314      	adds	r3, #20
 80089e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e4:	6a3b      	ldr	r3, [r7, #32]
 80089e6:	e853 3f00 	ldrex	r3, [r3]
 80089ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	f023 0301 	bic.w	r3, r3, #1
 80089f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	3314      	adds	r3, #20
 80089fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a04:	e841 2300 	strex	r3, r2, [r1]
 8008a08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1e5      	bne.n	80089dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d119      	bne.n	8008a4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	330c      	adds	r3, #12
 8008a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	e853 3f00 	ldrex	r3, [r3]
 8008a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	f023 0310 	bic.w	r3, r3, #16
 8008a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	330c      	adds	r3, #12
 8008a36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a38:	61ba      	str	r2, [r7, #24]
 8008a3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3c:	6979      	ldr	r1, [r7, #20]
 8008a3e:	69ba      	ldr	r2, [r7, #24]
 8008a40:	e841 2300 	strex	r3, r2, [r1]
 8008a44:	613b      	str	r3, [r7, #16]
   return(result);
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1e5      	bne.n	8008a18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2220      	movs	r2, #32
 8008a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008a5a:	bf00      	nop
 8008a5c:	3754      	adds	r7, #84	; 0x54
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f7f9 fabd 	bl	8002000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a86:	bf00      	nop
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b085      	sub	sp, #20
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	2b21      	cmp	r3, #33	; 0x21
 8008aa0:	d13e      	bne.n	8008b20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aaa:	d114      	bne.n	8008ad6 <UART_Transmit_IT+0x48>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d110      	bne.n	8008ad6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a1b      	ldr	r3, [r3, #32]
 8008ab8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	881b      	ldrh	r3, [r3, #0]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ac8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a1b      	ldr	r3, [r3, #32]
 8008ace:	1c9a      	adds	r2, r3, #2
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	621a      	str	r2, [r3, #32]
 8008ad4:	e008      	b.n	8008ae8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	1c59      	adds	r1, r3, #1
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	6211      	str	r1, [r2, #32]
 8008ae0:	781a      	ldrb	r2, [r3, #0]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	3b01      	subs	r3, #1
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	4619      	mov	r1, r3
 8008af6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d10f      	bne.n	8008b1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68da      	ldr	r2, [r3, #12]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68da      	ldr	r2, [r3, #12]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	e000      	b.n	8008b22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b20:	2302      	movs	r3, #2
  }
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3714      	adds	r7, #20
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr

08008b2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b082      	sub	sp, #8
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68da      	ldr	r2, [r3, #12]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2220      	movs	r2, #32
 8008b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7f9 fa6a 	bl	8002028 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b08c      	sub	sp, #48	; 0x30
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b22      	cmp	r3, #34	; 0x22
 8008b70:	f040 80ab 	bne.w	8008cca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b7c:	d117      	bne.n	8008bae <UART_Receive_IT+0x50>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d113      	bne.n	8008bae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008b86:	2300      	movs	r3, #0
 8008b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba6:	1c9a      	adds	r2, r3, #2
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	629a      	str	r2, [r3, #40]	; 0x28
 8008bac:	e026      	b.n	8008bfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bc0:	d007      	beq.n	8008bd2 <UART_Receive_IT+0x74>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10a      	bne.n	8008be0 <UART_Receive_IT+0x82>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d106      	bne.n	8008be0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bdc:	701a      	strb	r2, [r3, #0]
 8008bde:	e008      	b.n	8008bf2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bec:	b2da      	uxtb	r2, r3
 8008bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf6:	1c5a      	adds	r2, r3, #1
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	3b01      	subs	r3, #1
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	4619      	mov	r1, r3
 8008c0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d15a      	bne.n	8008cc6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68da      	ldr	r2, [r3, #12]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f022 0220 	bic.w	r2, r2, #32
 8008c1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68da      	ldr	r2, [r3, #12]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	695a      	ldr	r2, [r3, #20]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f022 0201 	bic.w	r2, r2, #1
 8008c3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2220      	movs	r2, #32
 8008c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d135      	bne.n	8008cbc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	330c      	adds	r3, #12
 8008c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	e853 3f00 	ldrex	r3, [r3]
 8008c64:	613b      	str	r3, [r7, #16]
   return(result);
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f023 0310 	bic.w	r3, r3, #16
 8008c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	330c      	adds	r3, #12
 8008c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c76:	623a      	str	r2, [r7, #32]
 8008c78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7a:	69f9      	ldr	r1, [r7, #28]
 8008c7c:	6a3a      	ldr	r2, [r7, #32]
 8008c7e:	e841 2300 	strex	r3, r2, [r1]
 8008c82:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1e5      	bne.n	8008c56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0310 	and.w	r3, r3, #16
 8008c94:	2b10      	cmp	r3, #16
 8008c96:	d10a      	bne.n	8008cae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c98:	2300      	movs	r3, #0
 8008c9a:	60fb      	str	r3, [r7, #12]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	60fb      	str	r3, [r7, #12]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	60fb      	str	r3, [r7, #12]
 8008cac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7f9 f991 	bl	8001fdc <HAL_UARTEx_RxEventCallback>
 8008cba:	e002      	b.n	8008cc2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7ff fbd3 	bl	8008468 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	e002      	b.n	8008ccc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	e000      	b.n	8008ccc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008cca:	2302      	movs	r3, #2
  }
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3730      	adds	r7, #48	; 0x30
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cd8:	b0c0      	sub	sp, #256	; 0x100
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cf0:	68d9      	ldr	r1, [r3, #12]
 8008cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	ea40 0301 	orr.w	r3, r0, r1
 8008cfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d02:	689a      	ldr	r2, [r3, #8]
 8008d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	431a      	orrs	r2, r3
 8008d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	431a      	orrs	r2, r3
 8008d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d2c:	f021 010c 	bic.w	r1, r1, #12
 8008d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d3a:	430b      	orrs	r3, r1
 8008d3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d4e:	6999      	ldr	r1, [r3, #24]
 8008d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	ea40 0301 	orr.w	r3, r0, r1
 8008d5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	4b8f      	ldr	r3, [pc, #572]	; (8008fa0 <UART_SetConfig+0x2cc>)
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d005      	beq.n	8008d74 <UART_SetConfig+0xa0>
 8008d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	4b8d      	ldr	r3, [pc, #564]	; (8008fa4 <UART_SetConfig+0x2d0>)
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d104      	bne.n	8008d7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d74:	f7fd fcc4 	bl	8006700 <HAL_RCC_GetPCLK2Freq>
 8008d78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008d7c:	e003      	b.n	8008d86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d7e:	f7fd fcab 	bl	80066d8 <HAL_RCC_GetPCLK1Freq>
 8008d82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d8a:	69db      	ldr	r3, [r3, #28]
 8008d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d90:	f040 810c 	bne.w	8008fac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008da2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008da6:	4622      	mov	r2, r4
 8008da8:	462b      	mov	r3, r5
 8008daa:	1891      	adds	r1, r2, r2
 8008dac:	65b9      	str	r1, [r7, #88]	; 0x58
 8008dae:	415b      	adcs	r3, r3
 8008db0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008db2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008db6:	4621      	mov	r1, r4
 8008db8:	eb12 0801 	adds.w	r8, r2, r1
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	eb43 0901 	adc.w	r9, r3, r1
 8008dc2:	f04f 0200 	mov.w	r2, #0
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008dce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008dd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008dd6:	4690      	mov	r8, r2
 8008dd8:	4699      	mov	r9, r3
 8008dda:	4623      	mov	r3, r4
 8008ddc:	eb18 0303 	adds.w	r3, r8, r3
 8008de0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008de4:	462b      	mov	r3, r5
 8008de6:	eb49 0303 	adc.w	r3, r9, r3
 8008dea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008dfa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008dfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008e02:	460b      	mov	r3, r1
 8008e04:	18db      	adds	r3, r3, r3
 8008e06:	653b      	str	r3, [r7, #80]	; 0x50
 8008e08:	4613      	mov	r3, r2
 8008e0a:	eb42 0303 	adc.w	r3, r2, r3
 8008e0e:	657b      	str	r3, [r7, #84]	; 0x54
 8008e10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008e14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008e18:	f7f7 fe9e 	bl	8000b58 <__aeabi_uldivmod>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	460b      	mov	r3, r1
 8008e20:	4b61      	ldr	r3, [pc, #388]	; (8008fa8 <UART_SetConfig+0x2d4>)
 8008e22:	fba3 2302 	umull	r2, r3, r3, r2
 8008e26:	095b      	lsrs	r3, r3, #5
 8008e28:	011c      	lsls	r4, r3, #4
 8008e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008e38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008e3c:	4642      	mov	r2, r8
 8008e3e:	464b      	mov	r3, r9
 8008e40:	1891      	adds	r1, r2, r2
 8008e42:	64b9      	str	r1, [r7, #72]	; 0x48
 8008e44:	415b      	adcs	r3, r3
 8008e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008e4c:	4641      	mov	r1, r8
 8008e4e:	eb12 0a01 	adds.w	sl, r2, r1
 8008e52:	4649      	mov	r1, r9
 8008e54:	eb43 0b01 	adc.w	fp, r3, r1
 8008e58:	f04f 0200 	mov.w	r2, #0
 8008e5c:	f04f 0300 	mov.w	r3, #0
 8008e60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008e68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e6c:	4692      	mov	sl, r2
 8008e6e:	469b      	mov	fp, r3
 8008e70:	4643      	mov	r3, r8
 8008e72:	eb1a 0303 	adds.w	r3, sl, r3
 8008e76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e7a:	464b      	mov	r3, r9
 8008e7c:	eb4b 0303 	adc.w	r3, fp, r3
 8008e80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008e94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008e98:	460b      	mov	r3, r1
 8008e9a:	18db      	adds	r3, r3, r3
 8008e9c:	643b      	str	r3, [r7, #64]	; 0x40
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	eb42 0303 	adc.w	r3, r2, r3
 8008ea4:	647b      	str	r3, [r7, #68]	; 0x44
 8008ea6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008eaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008eae:	f7f7 fe53 	bl	8000b58 <__aeabi_uldivmod>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	4611      	mov	r1, r2
 8008eb8:	4b3b      	ldr	r3, [pc, #236]	; (8008fa8 <UART_SetConfig+0x2d4>)
 8008eba:	fba3 2301 	umull	r2, r3, r3, r1
 8008ebe:	095b      	lsrs	r3, r3, #5
 8008ec0:	2264      	movs	r2, #100	; 0x64
 8008ec2:	fb02 f303 	mul.w	r3, r2, r3
 8008ec6:	1acb      	subs	r3, r1, r3
 8008ec8:	00db      	lsls	r3, r3, #3
 8008eca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008ece:	4b36      	ldr	r3, [pc, #216]	; (8008fa8 <UART_SetConfig+0x2d4>)
 8008ed0:	fba3 2302 	umull	r2, r3, r3, r2
 8008ed4:	095b      	lsrs	r3, r3, #5
 8008ed6:	005b      	lsls	r3, r3, #1
 8008ed8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008edc:	441c      	add	r4, r3
 8008ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ee8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008eec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008ef0:	4642      	mov	r2, r8
 8008ef2:	464b      	mov	r3, r9
 8008ef4:	1891      	adds	r1, r2, r2
 8008ef6:	63b9      	str	r1, [r7, #56]	; 0x38
 8008ef8:	415b      	adcs	r3, r3
 8008efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008efc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008f00:	4641      	mov	r1, r8
 8008f02:	1851      	adds	r1, r2, r1
 8008f04:	6339      	str	r1, [r7, #48]	; 0x30
 8008f06:	4649      	mov	r1, r9
 8008f08:	414b      	adcs	r3, r1
 8008f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8008f0c:	f04f 0200 	mov.w	r2, #0
 8008f10:	f04f 0300 	mov.w	r3, #0
 8008f14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008f18:	4659      	mov	r1, fp
 8008f1a:	00cb      	lsls	r3, r1, #3
 8008f1c:	4651      	mov	r1, sl
 8008f1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f22:	4651      	mov	r1, sl
 8008f24:	00ca      	lsls	r2, r1, #3
 8008f26:	4610      	mov	r0, r2
 8008f28:	4619      	mov	r1, r3
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	4642      	mov	r2, r8
 8008f2e:	189b      	adds	r3, r3, r2
 8008f30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f34:	464b      	mov	r3, r9
 8008f36:	460a      	mov	r2, r1
 8008f38:	eb42 0303 	adc.w	r3, r2, r3
 8008f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008f4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008f50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008f54:	460b      	mov	r3, r1
 8008f56:	18db      	adds	r3, r3, r3
 8008f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	eb42 0303 	adc.w	r3, r2, r3
 8008f60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008f6a:	f7f7 fdf5 	bl	8000b58 <__aeabi_uldivmod>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	460b      	mov	r3, r1
 8008f72:	4b0d      	ldr	r3, [pc, #52]	; (8008fa8 <UART_SetConfig+0x2d4>)
 8008f74:	fba3 1302 	umull	r1, r3, r3, r2
 8008f78:	095b      	lsrs	r3, r3, #5
 8008f7a:	2164      	movs	r1, #100	; 0x64
 8008f7c:	fb01 f303 	mul.w	r3, r1, r3
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	00db      	lsls	r3, r3, #3
 8008f84:	3332      	adds	r3, #50	; 0x32
 8008f86:	4a08      	ldr	r2, [pc, #32]	; (8008fa8 <UART_SetConfig+0x2d4>)
 8008f88:	fba2 2303 	umull	r2, r3, r2, r3
 8008f8c:	095b      	lsrs	r3, r3, #5
 8008f8e:	f003 0207 	and.w	r2, r3, #7
 8008f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4422      	add	r2, r4
 8008f9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008f9c:	e105      	b.n	80091aa <UART_SetConfig+0x4d6>
 8008f9e:	bf00      	nop
 8008fa0:	40011000 	.word	0x40011000
 8008fa4:	40011400 	.word	0x40011400
 8008fa8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008fb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008fba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008fbe:	4642      	mov	r2, r8
 8008fc0:	464b      	mov	r3, r9
 8008fc2:	1891      	adds	r1, r2, r2
 8008fc4:	6239      	str	r1, [r7, #32]
 8008fc6:	415b      	adcs	r3, r3
 8008fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8008fca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008fce:	4641      	mov	r1, r8
 8008fd0:	1854      	adds	r4, r2, r1
 8008fd2:	4649      	mov	r1, r9
 8008fd4:	eb43 0501 	adc.w	r5, r3, r1
 8008fd8:	f04f 0200 	mov.w	r2, #0
 8008fdc:	f04f 0300 	mov.w	r3, #0
 8008fe0:	00eb      	lsls	r3, r5, #3
 8008fe2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008fe6:	00e2      	lsls	r2, r4, #3
 8008fe8:	4614      	mov	r4, r2
 8008fea:	461d      	mov	r5, r3
 8008fec:	4643      	mov	r3, r8
 8008fee:	18e3      	adds	r3, r4, r3
 8008ff0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008ff4:	464b      	mov	r3, r9
 8008ff6:	eb45 0303 	adc.w	r3, r5, r3
 8008ffa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800900a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800900e:	f04f 0200 	mov.w	r2, #0
 8009012:	f04f 0300 	mov.w	r3, #0
 8009016:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800901a:	4629      	mov	r1, r5
 800901c:	008b      	lsls	r3, r1, #2
 800901e:	4621      	mov	r1, r4
 8009020:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009024:	4621      	mov	r1, r4
 8009026:	008a      	lsls	r2, r1, #2
 8009028:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800902c:	f7f7 fd94 	bl	8000b58 <__aeabi_uldivmod>
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	4b60      	ldr	r3, [pc, #384]	; (80091b8 <UART_SetConfig+0x4e4>)
 8009036:	fba3 2302 	umull	r2, r3, r3, r2
 800903a:	095b      	lsrs	r3, r3, #5
 800903c:	011c      	lsls	r4, r3, #4
 800903e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009042:	2200      	movs	r2, #0
 8009044:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009048:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800904c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009050:	4642      	mov	r2, r8
 8009052:	464b      	mov	r3, r9
 8009054:	1891      	adds	r1, r2, r2
 8009056:	61b9      	str	r1, [r7, #24]
 8009058:	415b      	adcs	r3, r3
 800905a:	61fb      	str	r3, [r7, #28]
 800905c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009060:	4641      	mov	r1, r8
 8009062:	1851      	adds	r1, r2, r1
 8009064:	6139      	str	r1, [r7, #16]
 8009066:	4649      	mov	r1, r9
 8009068:	414b      	adcs	r3, r1
 800906a:	617b      	str	r3, [r7, #20]
 800906c:	f04f 0200 	mov.w	r2, #0
 8009070:	f04f 0300 	mov.w	r3, #0
 8009074:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009078:	4659      	mov	r1, fp
 800907a:	00cb      	lsls	r3, r1, #3
 800907c:	4651      	mov	r1, sl
 800907e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009082:	4651      	mov	r1, sl
 8009084:	00ca      	lsls	r2, r1, #3
 8009086:	4610      	mov	r0, r2
 8009088:	4619      	mov	r1, r3
 800908a:	4603      	mov	r3, r0
 800908c:	4642      	mov	r2, r8
 800908e:	189b      	adds	r3, r3, r2
 8009090:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009094:	464b      	mov	r3, r9
 8009096:	460a      	mov	r2, r1
 8009098:	eb42 0303 	adc.w	r3, r2, r3
 800909c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80090aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80090ac:	f04f 0200 	mov.w	r2, #0
 80090b0:	f04f 0300 	mov.w	r3, #0
 80090b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80090b8:	4649      	mov	r1, r9
 80090ba:	008b      	lsls	r3, r1, #2
 80090bc:	4641      	mov	r1, r8
 80090be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090c2:	4641      	mov	r1, r8
 80090c4:	008a      	lsls	r2, r1, #2
 80090c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80090ca:	f7f7 fd45 	bl	8000b58 <__aeabi_uldivmod>
 80090ce:	4602      	mov	r2, r0
 80090d0:	460b      	mov	r3, r1
 80090d2:	4b39      	ldr	r3, [pc, #228]	; (80091b8 <UART_SetConfig+0x4e4>)
 80090d4:	fba3 1302 	umull	r1, r3, r3, r2
 80090d8:	095b      	lsrs	r3, r3, #5
 80090da:	2164      	movs	r1, #100	; 0x64
 80090dc:	fb01 f303 	mul.w	r3, r1, r3
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	011b      	lsls	r3, r3, #4
 80090e4:	3332      	adds	r3, #50	; 0x32
 80090e6:	4a34      	ldr	r2, [pc, #208]	; (80091b8 <UART_SetConfig+0x4e4>)
 80090e8:	fba2 2303 	umull	r2, r3, r2, r3
 80090ec:	095b      	lsrs	r3, r3, #5
 80090ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090f2:	441c      	add	r4, r3
 80090f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090f8:	2200      	movs	r2, #0
 80090fa:	673b      	str	r3, [r7, #112]	; 0x70
 80090fc:	677a      	str	r2, [r7, #116]	; 0x74
 80090fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009102:	4642      	mov	r2, r8
 8009104:	464b      	mov	r3, r9
 8009106:	1891      	adds	r1, r2, r2
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	415b      	adcs	r3, r3
 800910c:	60fb      	str	r3, [r7, #12]
 800910e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009112:	4641      	mov	r1, r8
 8009114:	1851      	adds	r1, r2, r1
 8009116:	6039      	str	r1, [r7, #0]
 8009118:	4649      	mov	r1, r9
 800911a:	414b      	adcs	r3, r1
 800911c:	607b      	str	r3, [r7, #4]
 800911e:	f04f 0200 	mov.w	r2, #0
 8009122:	f04f 0300 	mov.w	r3, #0
 8009126:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800912a:	4659      	mov	r1, fp
 800912c:	00cb      	lsls	r3, r1, #3
 800912e:	4651      	mov	r1, sl
 8009130:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009134:	4651      	mov	r1, sl
 8009136:	00ca      	lsls	r2, r1, #3
 8009138:	4610      	mov	r0, r2
 800913a:	4619      	mov	r1, r3
 800913c:	4603      	mov	r3, r0
 800913e:	4642      	mov	r2, r8
 8009140:	189b      	adds	r3, r3, r2
 8009142:	66bb      	str	r3, [r7, #104]	; 0x68
 8009144:	464b      	mov	r3, r9
 8009146:	460a      	mov	r2, r1
 8009148:	eb42 0303 	adc.w	r3, r2, r3
 800914c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800914e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	663b      	str	r3, [r7, #96]	; 0x60
 8009158:	667a      	str	r2, [r7, #100]	; 0x64
 800915a:	f04f 0200 	mov.w	r2, #0
 800915e:	f04f 0300 	mov.w	r3, #0
 8009162:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009166:	4649      	mov	r1, r9
 8009168:	008b      	lsls	r3, r1, #2
 800916a:	4641      	mov	r1, r8
 800916c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009170:	4641      	mov	r1, r8
 8009172:	008a      	lsls	r2, r1, #2
 8009174:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009178:	f7f7 fcee 	bl	8000b58 <__aeabi_uldivmod>
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	4b0d      	ldr	r3, [pc, #52]	; (80091b8 <UART_SetConfig+0x4e4>)
 8009182:	fba3 1302 	umull	r1, r3, r3, r2
 8009186:	095b      	lsrs	r3, r3, #5
 8009188:	2164      	movs	r1, #100	; 0x64
 800918a:	fb01 f303 	mul.w	r3, r1, r3
 800918e:	1ad3      	subs	r3, r2, r3
 8009190:	011b      	lsls	r3, r3, #4
 8009192:	3332      	adds	r3, #50	; 0x32
 8009194:	4a08      	ldr	r2, [pc, #32]	; (80091b8 <UART_SetConfig+0x4e4>)
 8009196:	fba2 2303 	umull	r2, r3, r2, r3
 800919a:	095b      	lsrs	r3, r3, #5
 800919c:	f003 020f 	and.w	r2, r3, #15
 80091a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4422      	add	r2, r4
 80091a8:	609a      	str	r2, [r3, #8]
}
 80091aa:	bf00      	nop
 80091ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80091b0:	46bd      	mov	sp, r7
 80091b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091b6:	bf00      	nop
 80091b8:	51eb851f 	.word	0x51eb851f

080091bc <__NVIC_SetPriority>:
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	4603      	mov	r3, r0
 80091c4:	6039      	str	r1, [r7, #0]
 80091c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	db0a      	blt.n	80091e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	490c      	ldr	r1, [pc, #48]	; (8009208 <__NVIC_SetPriority+0x4c>)
 80091d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091da:	0112      	lsls	r2, r2, #4
 80091dc:	b2d2      	uxtb	r2, r2
 80091de:	440b      	add	r3, r1
 80091e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80091e4:	e00a      	b.n	80091fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	4908      	ldr	r1, [pc, #32]	; (800920c <__NVIC_SetPriority+0x50>)
 80091ec:	79fb      	ldrb	r3, [r7, #7]
 80091ee:	f003 030f 	and.w	r3, r3, #15
 80091f2:	3b04      	subs	r3, #4
 80091f4:	0112      	lsls	r2, r2, #4
 80091f6:	b2d2      	uxtb	r2, r2
 80091f8:	440b      	add	r3, r1
 80091fa:	761a      	strb	r2, [r3, #24]
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr
 8009208:	e000e100 	.word	0xe000e100
 800920c:	e000ed00 	.word	0xe000ed00

08009210 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009210:	b580      	push	{r7, lr}
 8009212:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009214:	2100      	movs	r1, #0
 8009216:	f06f 0004 	mvn.w	r0, #4
 800921a:	f7ff ffcf 	bl	80091bc <__NVIC_SetPriority>
#endif
}
 800921e:	bf00      	nop
 8009220:	bd80      	pop	{r7, pc}
	...

08009224 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800922a:	f3ef 8305 	mrs	r3, IPSR
 800922e:	603b      	str	r3, [r7, #0]
  return(result);
 8009230:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009236:	f06f 0305 	mvn.w	r3, #5
 800923a:	607b      	str	r3, [r7, #4]
 800923c:	e00c      	b.n	8009258 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800923e:	4b0a      	ldr	r3, [pc, #40]	; (8009268 <osKernelInitialize+0x44>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d105      	bne.n	8009252 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009246:	4b08      	ldr	r3, [pc, #32]	; (8009268 <osKernelInitialize+0x44>)
 8009248:	2201      	movs	r2, #1
 800924a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800924c:	2300      	movs	r3, #0
 800924e:	607b      	str	r3, [r7, #4]
 8009250:	e002      	b.n	8009258 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009252:	f04f 33ff 	mov.w	r3, #4294967295
 8009256:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009258:	687b      	ldr	r3, [r7, #4]
}
 800925a:	4618      	mov	r0, r3
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	20000a48 	.word	0x20000a48

0800926c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009272:	f3ef 8305 	mrs	r3, IPSR
 8009276:	603b      	str	r3, [r7, #0]
  return(result);
 8009278:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800927a:	2b00      	cmp	r3, #0
 800927c:	d003      	beq.n	8009286 <osKernelStart+0x1a>
    stat = osErrorISR;
 800927e:	f06f 0305 	mvn.w	r3, #5
 8009282:	607b      	str	r3, [r7, #4]
 8009284:	e010      	b.n	80092a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009286:	4b0b      	ldr	r3, [pc, #44]	; (80092b4 <osKernelStart+0x48>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d109      	bne.n	80092a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800928e:	f7ff ffbf 	bl	8009210 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009292:	4b08      	ldr	r3, [pc, #32]	; (80092b4 <osKernelStart+0x48>)
 8009294:	2202      	movs	r2, #2
 8009296:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009298:	f001 f87c 	bl	800a394 <vTaskStartScheduler>
      stat = osOK;
 800929c:	2300      	movs	r3, #0
 800929e:	607b      	str	r3, [r7, #4]
 80092a0:	e002      	b.n	80092a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80092a2:	f04f 33ff 	mov.w	r3, #4294967295
 80092a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80092a8:	687b      	ldr	r3, [r7, #4]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	20000a48 	.word	0x20000a48

080092b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08e      	sub	sp, #56	; 0x38
 80092bc:	af04      	add	r7, sp, #16
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80092c4:	2300      	movs	r3, #0
 80092c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092c8:	f3ef 8305 	mrs	r3, IPSR
 80092cc:	617b      	str	r3, [r7, #20]
  return(result);
 80092ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d17e      	bne.n	80093d2 <osThreadNew+0x11a>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d07b      	beq.n	80093d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80092da:	2380      	movs	r3, #128	; 0x80
 80092dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80092de:	2318      	movs	r3, #24
 80092e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80092e2:	2300      	movs	r3, #0
 80092e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80092e6:	f04f 33ff 	mov.w	r3, #4294967295
 80092ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d045      	beq.n	800937e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d002      	beq.n	8009300 <osThreadNew+0x48>
        name = attr->name;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d008      	beq.n	8009326 <osThreadNew+0x6e>
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	2b38      	cmp	r3, #56	; 0x38
 8009318:	d805      	bhi.n	8009326 <osThreadNew+0x6e>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	2b00      	cmp	r3, #0
 8009324:	d001      	beq.n	800932a <osThreadNew+0x72>
        return (NULL);
 8009326:	2300      	movs	r3, #0
 8009328:	e054      	b.n	80093d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d003      	beq.n	800933a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	695b      	ldr	r3, [r3, #20]
 8009336:	089b      	lsrs	r3, r3, #2
 8009338:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00e      	beq.n	8009360 <osThreadNew+0xa8>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	2bbb      	cmp	r3, #187	; 0xbb
 8009348:	d90a      	bls.n	8009360 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800934e:	2b00      	cmp	r3, #0
 8009350:	d006      	beq.n	8009360 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	695b      	ldr	r3, [r3, #20]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d002      	beq.n	8009360 <osThreadNew+0xa8>
        mem = 1;
 800935a:	2301      	movs	r3, #1
 800935c:	61bb      	str	r3, [r7, #24]
 800935e:	e010      	b.n	8009382 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10c      	bne.n	8009382 <osThreadNew+0xca>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d108      	bne.n	8009382 <osThreadNew+0xca>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d104      	bne.n	8009382 <osThreadNew+0xca>
          mem = 0;
 8009378:	2300      	movs	r3, #0
 800937a:	61bb      	str	r3, [r7, #24]
 800937c:	e001      	b.n	8009382 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800937e:	2300      	movs	r3, #0
 8009380:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d110      	bne.n	80093aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009390:	9202      	str	r2, [sp, #8]
 8009392:	9301      	str	r3, [sp, #4]
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	6a3a      	ldr	r2, [r7, #32]
 800939c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f000 fe0c 	bl	8009fbc <xTaskCreateStatic>
 80093a4:	4603      	mov	r3, r0
 80093a6:	613b      	str	r3, [r7, #16]
 80093a8:	e013      	b.n	80093d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d110      	bne.n	80093d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80093b0:	6a3b      	ldr	r3, [r7, #32]
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	f107 0310 	add.w	r3, r7, #16
 80093b8:	9301      	str	r3, [sp, #4]
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f000 fe57 	bl	800a076 <xTaskCreate>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d001      	beq.n	80093d2 <osThreadNew+0x11a>
            hTask = NULL;
 80093ce:	2300      	movs	r3, #0
 80093d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80093d2:	693b      	ldr	r3, [r7, #16]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3728      	adds	r7, #40	; 0x28
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093e4:	f3ef 8305 	mrs	r3, IPSR
 80093e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80093ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d003      	beq.n	80093f8 <osDelay+0x1c>
    stat = osErrorISR;
 80093f0:	f06f 0305 	mvn.w	r3, #5
 80093f4:	60fb      	str	r3, [r7, #12]
 80093f6:	e007      	b.n	8009408 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d002      	beq.n	8009408 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 ff92 	bl	800a32c <vTaskDelay>
    }
  }

  return (stat);
 8009408:	68fb      	ldr	r3, [r7, #12]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
	...

08009414 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	4a07      	ldr	r2, [pc, #28]	; (8009440 <vApplicationGetIdleTaskMemory+0x2c>)
 8009424:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	4a06      	ldr	r2, [pc, #24]	; (8009444 <vApplicationGetIdleTaskMemory+0x30>)
 800942a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2280      	movs	r2, #128	; 0x80
 8009430:	601a      	str	r2, [r3, #0]
}
 8009432:	bf00      	nop
 8009434:	3714      	adds	r7, #20
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	20000a4c 	.word	0x20000a4c
 8009444:	20000b08 	.word	0x20000b08

08009448 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	4a07      	ldr	r2, [pc, #28]	; (8009474 <vApplicationGetTimerTaskMemory+0x2c>)
 8009458:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	4a06      	ldr	r2, [pc, #24]	; (8009478 <vApplicationGetTimerTaskMemory+0x30>)
 800945e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009466:	601a      	str	r2, [r3, #0]
}
 8009468:	bf00      	nop
 800946a:	3714      	adds	r7, #20
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr
 8009474:	20000d08 	.word	0x20000d08
 8009478:	20000dc4 	.word	0x20000dc4

0800947c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f103 0208 	add.w	r2, r3, #8
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f04f 32ff 	mov.w	r2, #4294967295
 8009494:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f103 0208 	add.w	r2, r3, #8
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f103 0208 	add.w	r2, r3, #8
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80094ca:	bf00      	nop
 80094cc:	370c      	adds	r7, #12
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr

080094d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094d6:	b480      	push	{r7}
 80094d8:	b085      	sub	sp, #20
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	689a      	ldr	r2, [r3, #8]
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	683a      	ldr	r2, [r7, #0]
 80094fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	1c5a      	adds	r2, r3, #1
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	601a      	str	r2, [r3, #0]
}
 8009512:	bf00      	nop
 8009514:	3714      	adds	r7, #20
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800951e:	b480      	push	{r7}
 8009520:	b085      	sub	sp, #20
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009534:	d103      	bne.n	800953e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	60fb      	str	r3, [r7, #12]
 800953c:	e00c      	b.n	8009558 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	3308      	adds	r3, #8
 8009542:	60fb      	str	r3, [r7, #12]
 8009544:	e002      	b.n	800954c <vListInsert+0x2e>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	429a      	cmp	r2, r3
 8009556:	d2f6      	bcs.n	8009546 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	685a      	ldr	r2, [r3, #4]
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	683a      	ldr	r2, [r7, #0]
 8009566:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	1c5a      	adds	r2, r3, #1
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	601a      	str	r2, [r3, #0]
}
 8009584:	bf00      	nop
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	6892      	ldr	r2, [r2, #8]
 80095a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	6852      	ldr	r2, [r2, #4]
 80095b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d103      	bne.n	80095c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	689a      	ldr	r2, [r3, #8]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	1e5a      	subs	r2, r3, #1
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10a      	bne.n	800960e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80095f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800960a:	bf00      	nop
 800960c:	e7fe      	b.n	800960c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800960e:	f002 f879 	bl	800b704 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800961a:	68f9      	ldr	r1, [r7, #12]
 800961c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800961e:	fb01 f303 	mul.w	r3, r1, r3
 8009622:	441a      	add	r2, r3
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800963e:	3b01      	subs	r3, #1
 8009640:	68f9      	ldr	r1, [r7, #12]
 8009642:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009644:	fb01 f303 	mul.w	r3, r1, r3
 8009648:	441a      	add	r2, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	22ff      	movs	r2, #255	; 0xff
 8009652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	22ff      	movs	r2, #255	; 0xff
 800965a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d114      	bne.n	800968e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d01a      	beq.n	80096a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	3310      	adds	r3, #16
 8009670:	4618      	mov	r0, r3
 8009672:	f001 f929 	bl	800a8c8 <xTaskRemoveFromEventList>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d012      	beq.n	80096a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800967c:	4b0c      	ldr	r3, [pc, #48]	; (80096b0 <xQueueGenericReset+0xcc>)
 800967e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	f3bf 8f6f 	isb	sy
 800968c:	e009      	b.n	80096a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	3310      	adds	r3, #16
 8009692:	4618      	mov	r0, r3
 8009694:	f7ff fef2 	bl	800947c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	3324      	adds	r3, #36	; 0x24
 800969c:	4618      	mov	r0, r3
 800969e:	f7ff feed 	bl	800947c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80096a2:	f002 f85f 	bl	800b764 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80096a6:	2301      	movs	r3, #1
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	e000ed04 	.word	0xe000ed04

080096b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b08e      	sub	sp, #56	; 0x38
 80096b8:	af02      	add	r7, sp, #8
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]
 80096c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d10a      	bne.n	80096de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80096c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096cc:	f383 8811 	msr	BASEPRI, r3
 80096d0:	f3bf 8f6f 	isb	sy
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096da:	bf00      	nop
 80096dc:	e7fe      	b.n	80096dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10a      	bne.n	80096fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096f6:	bf00      	nop
 80096f8:	e7fe      	b.n	80096f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d002      	beq.n	8009706 <xQueueGenericCreateStatic+0x52>
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <xQueueGenericCreateStatic+0x56>
 8009706:	2301      	movs	r3, #1
 8009708:	e000      	b.n	800970c <xQueueGenericCreateStatic+0x58>
 800970a:	2300      	movs	r3, #0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10a      	bne.n	8009726 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009714:	f383 8811 	msr	BASEPRI, r3
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	623b      	str	r3, [r7, #32]
}
 8009722:	bf00      	nop
 8009724:	e7fe      	b.n	8009724 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d102      	bne.n	8009732 <xQueueGenericCreateStatic+0x7e>
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d101      	bne.n	8009736 <xQueueGenericCreateStatic+0x82>
 8009732:	2301      	movs	r3, #1
 8009734:	e000      	b.n	8009738 <xQueueGenericCreateStatic+0x84>
 8009736:	2300      	movs	r3, #0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10a      	bne.n	8009752 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800973c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	61fb      	str	r3, [r7, #28]
}
 800974e:	bf00      	nop
 8009750:	e7fe      	b.n	8009750 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009752:	2350      	movs	r3, #80	; 0x50
 8009754:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2b50      	cmp	r3, #80	; 0x50
 800975a:	d00a      	beq.n	8009772 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800975c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009760:	f383 8811 	msr	BASEPRI, r3
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	61bb      	str	r3, [r7, #24]
}
 800976e:	bf00      	nop
 8009770:	e7fe      	b.n	8009770 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009772:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00d      	beq.n	800979a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800977e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009780:	2201      	movs	r2, #1
 8009782:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009786:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800978a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	4613      	mov	r3, r2
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	68b9      	ldr	r1, [r7, #8]
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f000 f805 	bl	80097a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800979a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800979c:	4618      	mov	r0, r3
 800979e:	3730      	adds	r7, #48	; 0x30
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	607a      	str	r2, [r7, #4]
 80097b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d103      	bne.n	80097c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	69ba      	ldr	r2, [r7, #24]
 80097bc:	601a      	str	r2, [r3, #0]
 80097be:	e002      	b.n	80097c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80097d2:	2101      	movs	r1, #1
 80097d4:	69b8      	ldr	r0, [r7, #24]
 80097d6:	f7ff ff05 	bl	80095e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	78fa      	ldrb	r2, [r7, #3]
 80097de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80097e2:	bf00      	nop
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
	...

080097ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b08e      	sub	sp, #56	; 0x38
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]
 80097f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80097fa:	2300      	movs	r3, #0
 80097fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10a      	bne.n	800981e <xQueueGenericSend+0x32>
	__asm volatile
 8009808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980c:	f383 8811 	msr	BASEPRI, r3
 8009810:	f3bf 8f6f 	isb	sy
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800981a:	bf00      	nop
 800981c:	e7fe      	b.n	800981c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d103      	bne.n	800982c <xQueueGenericSend+0x40>
 8009824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009828:	2b00      	cmp	r3, #0
 800982a:	d101      	bne.n	8009830 <xQueueGenericSend+0x44>
 800982c:	2301      	movs	r3, #1
 800982e:	e000      	b.n	8009832 <xQueueGenericSend+0x46>
 8009830:	2300      	movs	r3, #0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d10a      	bne.n	800984c <xQueueGenericSend+0x60>
	__asm volatile
 8009836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009848:	bf00      	nop
 800984a:	e7fe      	b.n	800984a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	2b02      	cmp	r3, #2
 8009850:	d103      	bne.n	800985a <xQueueGenericSend+0x6e>
 8009852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009856:	2b01      	cmp	r3, #1
 8009858:	d101      	bne.n	800985e <xQueueGenericSend+0x72>
 800985a:	2301      	movs	r3, #1
 800985c:	e000      	b.n	8009860 <xQueueGenericSend+0x74>
 800985e:	2300      	movs	r3, #0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d10a      	bne.n	800987a <xQueueGenericSend+0x8e>
	__asm volatile
 8009864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009868:	f383 8811 	msr	BASEPRI, r3
 800986c:	f3bf 8f6f 	isb	sy
 8009870:	f3bf 8f4f 	dsb	sy
 8009874:	623b      	str	r3, [r7, #32]
}
 8009876:	bf00      	nop
 8009878:	e7fe      	b.n	8009878 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800987a:	f001 f9e7 	bl	800ac4c <xTaskGetSchedulerState>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d102      	bne.n	800988a <xQueueGenericSend+0x9e>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d101      	bne.n	800988e <xQueueGenericSend+0xa2>
 800988a:	2301      	movs	r3, #1
 800988c:	e000      	b.n	8009890 <xQueueGenericSend+0xa4>
 800988e:	2300      	movs	r3, #0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10a      	bne.n	80098aa <xQueueGenericSend+0xbe>
	__asm volatile
 8009894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009898:	f383 8811 	msr	BASEPRI, r3
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	f3bf 8f4f 	dsb	sy
 80098a4:	61fb      	str	r3, [r7, #28]
}
 80098a6:	bf00      	nop
 80098a8:	e7fe      	b.n	80098a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098aa:	f001 ff2b 	bl	800b704 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80098ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d302      	bcc.n	80098c0 <xQueueGenericSend+0xd4>
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d129      	bne.n	8009914 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098c0:	683a      	ldr	r2, [r7, #0]
 80098c2:	68b9      	ldr	r1, [r7, #8]
 80098c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098c6:	f000 fa0b 	bl	8009ce0 <prvCopyDataToQueue>
 80098ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d010      	beq.n	80098f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d6:	3324      	adds	r3, #36	; 0x24
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 fff5 	bl	800a8c8 <xTaskRemoveFromEventList>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d013      	beq.n	800990c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80098e4:	4b3f      	ldr	r3, [pc, #252]	; (80099e4 <xQueueGenericSend+0x1f8>)
 80098e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ea:	601a      	str	r2, [r3, #0]
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	f3bf 8f6f 	isb	sy
 80098f4:	e00a      	b.n	800990c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80098f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d007      	beq.n	800990c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80098fc:	4b39      	ldr	r3, [pc, #228]	; (80099e4 <xQueueGenericSend+0x1f8>)
 80098fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009902:	601a      	str	r2, [r3, #0]
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800990c:	f001 ff2a 	bl	800b764 <vPortExitCritical>
				return pdPASS;
 8009910:	2301      	movs	r3, #1
 8009912:	e063      	b.n	80099dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d103      	bne.n	8009922 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800991a:	f001 ff23 	bl	800b764 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800991e:	2300      	movs	r3, #0
 8009920:	e05c      	b.n	80099dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009924:	2b00      	cmp	r3, #0
 8009926:	d106      	bne.n	8009936 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009928:	f107 0314 	add.w	r3, r7, #20
 800992c:	4618      	mov	r0, r3
 800992e:	f001 f82f 	bl	800a990 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009932:	2301      	movs	r3, #1
 8009934:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009936:	f001 ff15 	bl	800b764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800993a:	f000 fd9b 	bl	800a474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800993e:	f001 fee1 	bl	800b704 <vPortEnterCritical>
 8009942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009948:	b25b      	sxtb	r3, r3
 800994a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994e:	d103      	bne.n	8009958 <xQueueGenericSend+0x16c>
 8009950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009952:	2200      	movs	r2, #0
 8009954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800995e:	b25b      	sxtb	r3, r3
 8009960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009964:	d103      	bne.n	800996e <xQueueGenericSend+0x182>
 8009966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009968:	2200      	movs	r2, #0
 800996a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800996e:	f001 fef9 	bl	800b764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009972:	1d3a      	adds	r2, r7, #4
 8009974:	f107 0314 	add.w	r3, r7, #20
 8009978:	4611      	mov	r1, r2
 800997a:	4618      	mov	r0, r3
 800997c:	f001 f81e 	bl	800a9bc <xTaskCheckForTimeOut>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d124      	bne.n	80099d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009986:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009988:	f000 faa2 	bl	8009ed0 <prvIsQueueFull>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d018      	beq.n	80099c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009994:	3310      	adds	r3, #16
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	4611      	mov	r1, r2
 800999a:	4618      	mov	r0, r3
 800999c:	f000 ff44 	bl	800a828 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80099a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099a2:	f000 fa2d 	bl	8009e00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80099a6:	f000 fd73 	bl	800a490 <xTaskResumeAll>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f47f af7c 	bne.w	80098aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80099b2:	4b0c      	ldr	r3, [pc, #48]	; (80099e4 <xQueueGenericSend+0x1f8>)
 80099b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099b8:	601a      	str	r2, [r3, #0]
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	e772      	b.n	80098aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80099c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099c6:	f000 fa1b 	bl	8009e00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099ca:	f000 fd61 	bl	800a490 <xTaskResumeAll>
 80099ce:	e76c      	b.n	80098aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80099d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099d2:	f000 fa15 	bl	8009e00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099d6:	f000 fd5b 	bl	800a490 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80099da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3738      	adds	r7, #56	; 0x38
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	e000ed04 	.word	0xe000ed04

080099e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b090      	sub	sp, #64	; 0x40
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
 80099f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80099fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10a      	bne.n	8009a16 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a12:	bf00      	nop
 8009a14:	e7fe      	b.n	8009a14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d103      	bne.n	8009a24 <xQueueGenericSendFromISR+0x3c>
 8009a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d101      	bne.n	8009a28 <xQueueGenericSendFromISR+0x40>
 8009a24:	2301      	movs	r3, #1
 8009a26:	e000      	b.n	8009a2a <xQueueGenericSendFromISR+0x42>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10a      	bne.n	8009a44 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a40:	bf00      	nop
 8009a42:	e7fe      	b.n	8009a42 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d103      	bne.n	8009a52 <xQueueGenericSendFromISR+0x6a>
 8009a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d101      	bne.n	8009a56 <xQueueGenericSendFromISR+0x6e>
 8009a52:	2301      	movs	r3, #1
 8009a54:	e000      	b.n	8009a58 <xQueueGenericSendFromISR+0x70>
 8009a56:	2300      	movs	r3, #0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10a      	bne.n	8009a72 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a60:	f383 8811 	msr	BASEPRI, r3
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	623b      	str	r3, [r7, #32]
}
 8009a6e:	bf00      	nop
 8009a70:	e7fe      	b.n	8009a70 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a72:	f001 ff29 	bl	800b8c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009a76:	f3ef 8211 	mrs	r2, BASEPRI
 8009a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7e:	f383 8811 	msr	BASEPRI, r3
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	61fa      	str	r2, [r7, #28]
 8009a8c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009a8e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a90:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d302      	bcc.n	8009aa4 <xQueueGenericSendFromISR+0xbc>
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d12f      	bne.n	8009b04 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ab4:	683a      	ldr	r2, [r7, #0]
 8009ab6:	68b9      	ldr	r1, [r7, #8]
 8009ab8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009aba:	f000 f911 	bl	8009ce0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009abe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac6:	d112      	bne.n	8009aee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d016      	beq.n	8009afe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad2:	3324      	adds	r3, #36	; 0x24
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f000 fef7 	bl	800a8c8 <xTaskRemoveFromEventList>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00e      	beq.n	8009afe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00b      	beq.n	8009afe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	601a      	str	r2, [r3, #0]
 8009aec:	e007      	b.n	8009afe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009aee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009af2:	3301      	adds	r3, #1
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	b25a      	sxtb	r2, r3
 8009af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009afe:	2301      	movs	r3, #1
 8009b00:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009b02:	e001      	b.n	8009b08 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b04:	2300      	movs	r3, #0
 8009b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b0a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009b12:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3740      	adds	r7, #64	; 0x40
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
	...

08009b20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b08c      	sub	sp, #48	; 0x30
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10a      	bne.n	8009b50 <xQueueReceive+0x30>
	__asm volatile
 8009b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3e:	f383 8811 	msr	BASEPRI, r3
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	623b      	str	r3, [r7, #32]
}
 8009b4c:	bf00      	nop
 8009b4e:	e7fe      	b.n	8009b4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d103      	bne.n	8009b5e <xQueueReceive+0x3e>
 8009b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <xQueueReceive+0x42>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e000      	b.n	8009b64 <xQueueReceive+0x44>
 8009b62:	2300      	movs	r3, #0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10a      	bne.n	8009b7e <xQueueReceive+0x5e>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	61fb      	str	r3, [r7, #28]
}
 8009b7a:	bf00      	nop
 8009b7c:	e7fe      	b.n	8009b7c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b7e:	f001 f865 	bl	800ac4c <xTaskGetSchedulerState>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d102      	bne.n	8009b8e <xQueueReceive+0x6e>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d101      	bne.n	8009b92 <xQueueReceive+0x72>
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e000      	b.n	8009b94 <xQueueReceive+0x74>
 8009b92:	2300      	movs	r3, #0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10a      	bne.n	8009bae <xQueueReceive+0x8e>
	__asm volatile
 8009b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	61bb      	str	r3, [r7, #24]
}
 8009baa:	bf00      	nop
 8009bac:	e7fe      	b.n	8009bac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009bae:	f001 fda9 	bl	800b704 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d01f      	beq.n	8009bfe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009bbe:	68b9      	ldr	r1, [r7, #8]
 8009bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bc2:	f000 f8f7 	bl	8009db4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc8:	1e5a      	subs	r2, r3, #1
 8009bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bcc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00f      	beq.n	8009bf6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd8:	3310      	adds	r3, #16
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 fe74 	bl	800a8c8 <xTaskRemoveFromEventList>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d007      	beq.n	8009bf6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009be6:	4b3d      	ldr	r3, [pc, #244]	; (8009cdc <xQueueReceive+0x1bc>)
 8009be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bec:	601a      	str	r2, [r3, #0]
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009bf6:	f001 fdb5 	bl	800b764 <vPortExitCritical>
				return pdPASS;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e069      	b.n	8009cd2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d103      	bne.n	8009c0c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c04:	f001 fdae 	bl	800b764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	e062      	b.n	8009cd2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d106      	bne.n	8009c20 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c12:	f107 0310 	add.w	r3, r7, #16
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 feba 	bl	800a990 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c20:	f001 fda0 	bl	800b764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c24:	f000 fc26 	bl	800a474 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c28:	f001 fd6c 	bl	800b704 <vPortEnterCritical>
 8009c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c32:	b25b      	sxtb	r3, r3
 8009c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c38:	d103      	bne.n	8009c42 <xQueueReceive+0x122>
 8009c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c48:	b25b      	sxtb	r3, r3
 8009c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c4e:	d103      	bne.n	8009c58 <xQueueReceive+0x138>
 8009c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c52:	2200      	movs	r2, #0
 8009c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c58:	f001 fd84 	bl	800b764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c5c:	1d3a      	adds	r2, r7, #4
 8009c5e:	f107 0310 	add.w	r3, r7, #16
 8009c62:	4611      	mov	r1, r2
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 fea9 	bl	800a9bc <xTaskCheckForTimeOut>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d123      	bne.n	8009cb8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c72:	f000 f917 	bl	8009ea4 <prvIsQueueEmpty>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d017      	beq.n	8009cac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7e:	3324      	adds	r3, #36	; 0x24
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	4611      	mov	r1, r2
 8009c84:	4618      	mov	r0, r3
 8009c86:	f000 fdcf 	bl	800a828 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c8c:	f000 f8b8 	bl	8009e00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c90:	f000 fbfe 	bl	800a490 <xTaskResumeAll>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d189      	bne.n	8009bae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009c9a:	4b10      	ldr	r3, [pc, #64]	; (8009cdc <xQueueReceive+0x1bc>)
 8009c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ca0:	601a      	str	r2, [r3, #0]
 8009ca2:	f3bf 8f4f 	dsb	sy
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	e780      	b.n	8009bae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cae:	f000 f8a7 	bl	8009e00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009cb2:	f000 fbed 	bl	800a490 <xTaskResumeAll>
 8009cb6:	e77a      	b.n	8009bae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cba:	f000 f8a1 	bl	8009e00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cbe:	f000 fbe7 	bl	800a490 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cc4:	f000 f8ee 	bl	8009ea4 <prvIsQueueEmpty>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f43f af6f 	beq.w	8009bae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009cd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3730      	adds	r7, #48	; 0x30
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	e000ed04 	.word	0xe000ed04

08009ce0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cec:	2300      	movs	r3, #0
 8009cee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10d      	bne.n	8009d1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d14d      	bne.n	8009da2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f000 ffbc 	bl	800ac88 <xTaskPriorityDisinherit>
 8009d10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	609a      	str	r2, [r3, #8]
 8009d18:	e043      	b.n	8009da2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d119      	bne.n	8009d54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6858      	ldr	r0, [r3, #4]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d28:	461a      	mov	r2, r3
 8009d2a:	68b9      	ldr	r1, [r7, #8]
 8009d2c:	f002 f822 	bl	800bd74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	685a      	ldr	r2, [r3, #4]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d38:	441a      	add	r2, r3
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	685a      	ldr	r2, [r3, #4]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d32b      	bcc.n	8009da2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	605a      	str	r2, [r3, #4]
 8009d52:	e026      	b.n	8009da2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	68d8      	ldr	r0, [r3, #12]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	68b9      	ldr	r1, [r7, #8]
 8009d60:	f002 f808 	bl	800bd74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	68da      	ldr	r2, [r3, #12]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6c:	425b      	negs	r3, r3
 8009d6e:	441a      	add	r2, r3
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	68da      	ldr	r2, [r3, #12]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d207      	bcs.n	8009d90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	689a      	ldr	r2, [r3, #8]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d88:	425b      	negs	r3, r3
 8009d8a:	441a      	add	r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d105      	bne.n	8009da2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	1c5a      	adds	r2, r3, #1
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009daa:	697b      	ldr	r3, [r7, #20]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3718      	adds	r7, #24
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d018      	beq.n	8009df8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	68da      	ldr	r2, [r3, #12]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dce:	441a      	add	r2, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	68da      	ldr	r2, [r3, #12]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d303      	bcc.n	8009de8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	68d9      	ldr	r1, [r3, #12]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df0:	461a      	mov	r2, r3
 8009df2:	6838      	ldr	r0, [r7, #0]
 8009df4:	f001 ffbe 	bl	800bd74 <memcpy>
	}
}
 8009df8:	bf00      	nop
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009e08:	f001 fc7c 	bl	800b704 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e14:	e011      	b.n	8009e3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d012      	beq.n	8009e44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	3324      	adds	r3, #36	; 0x24
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 fd50 	bl	800a8c8 <xTaskRemoveFromEventList>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d001      	beq.n	8009e32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e2e:	f000 fe27 	bl	800aa80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e32:	7bfb      	ldrb	r3, [r7, #15]
 8009e34:	3b01      	subs	r3, #1
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	dce9      	bgt.n	8009e16 <prvUnlockQueue+0x16>
 8009e42:	e000      	b.n	8009e46 <prvUnlockQueue+0x46>
					break;
 8009e44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	22ff      	movs	r2, #255	; 0xff
 8009e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009e4e:	f001 fc89 	bl	800b764 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e52:	f001 fc57 	bl	800b704 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e5e:	e011      	b.n	8009e84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d012      	beq.n	8009e8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	3310      	adds	r3, #16
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f000 fd2b 	bl	800a8c8 <xTaskRemoveFromEventList>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d001      	beq.n	8009e7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e78:	f000 fe02 	bl	800aa80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e7c:	7bbb      	ldrb	r3, [r7, #14]
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	dce9      	bgt.n	8009e60 <prvUnlockQueue+0x60>
 8009e8c:	e000      	b.n	8009e90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	22ff      	movs	r2, #255	; 0xff
 8009e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009e98:	f001 fc64 	bl	800b764 <vPortExitCritical>
}
 8009e9c:	bf00      	nop
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009eac:	f001 fc2a 	bl	800b704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d102      	bne.n	8009ebe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	60fb      	str	r3, [r7, #12]
 8009ebc:	e001      	b.n	8009ec2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ec2:	f001 fc4f 	bl	800b764 <vPortExitCritical>

	return xReturn;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ed8:	f001 fc14 	bl	800b704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d102      	bne.n	8009eee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	60fb      	str	r3, [r7, #12]
 8009eec:	e001      	b.n	8009ef2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ef2:	f001 fc37 	bl	800b764 <vPortExitCritical>

	return xReturn;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	60fb      	str	r3, [r7, #12]
 8009f0e:	e014      	b.n	8009f3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009f10:	4a0f      	ldr	r2, [pc, #60]	; (8009f50 <vQueueAddToRegistry+0x50>)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d10b      	bne.n	8009f34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009f1c:	490c      	ldr	r1, [pc, #48]	; (8009f50 <vQueueAddToRegistry+0x50>)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	683a      	ldr	r2, [r7, #0]
 8009f22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009f26:	4a0a      	ldr	r2, [pc, #40]	; (8009f50 <vQueueAddToRegistry+0x50>)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	00db      	lsls	r3, r3, #3
 8009f2c:	4413      	add	r3, r2
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009f32:	e006      	b.n	8009f42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	3301      	adds	r3, #1
 8009f38:	60fb      	str	r3, [r7, #12]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2b07      	cmp	r3, #7
 8009f3e:	d9e7      	bls.n	8009f10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009f40:	bf00      	nop
 8009f42:	bf00      	nop
 8009f44:	3714      	adds	r7, #20
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	200011c4 	.word	0x200011c4

08009f54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009f64:	f001 fbce 	bl	800b704 <vPortEnterCritical>
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f6e:	b25b      	sxtb	r3, r3
 8009f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f74:	d103      	bne.n	8009f7e <vQueueWaitForMessageRestricted+0x2a>
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f84:	b25b      	sxtb	r3, r3
 8009f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f8a:	d103      	bne.n	8009f94 <vQueueWaitForMessageRestricted+0x40>
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f94:	f001 fbe6 	bl	800b764 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d106      	bne.n	8009fae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	3324      	adds	r3, #36	; 0x24
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	68b9      	ldr	r1, [r7, #8]
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f000 fc61 	bl	800a870 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009fae:	6978      	ldr	r0, [r7, #20]
 8009fb0:	f7ff ff26 	bl	8009e00 <prvUnlockQueue>
	}
 8009fb4:	bf00      	nop
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b08e      	sub	sp, #56	; 0x38
 8009fc0:	af04      	add	r7, sp, #16
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10a      	bne.n	8009fe6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	623b      	str	r3, [r7, #32]
}
 8009fe2:	bf00      	nop
 8009fe4:	e7fe      	b.n	8009fe4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10a      	bne.n	800a002 <xTaskCreateStatic+0x46>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	61fb      	str	r3, [r7, #28]
}
 8009ffe:	bf00      	nop
 800a000:	e7fe      	b.n	800a000 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a002:	23bc      	movs	r3, #188	; 0xbc
 800a004:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	2bbc      	cmp	r3, #188	; 0xbc
 800a00a:	d00a      	beq.n	800a022 <xTaskCreateStatic+0x66>
	__asm volatile
 800a00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	61bb      	str	r3, [r7, #24]
}
 800a01e:	bf00      	nop
 800a020:	e7fe      	b.n	800a020 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a022:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a026:	2b00      	cmp	r3, #0
 800a028:	d01e      	beq.n	800a068 <xTaskCreateStatic+0xac>
 800a02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d01b      	beq.n	800a068 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a032:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a038:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03c:	2202      	movs	r2, #2
 800a03e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a042:	2300      	movs	r3, #0
 800a044:	9303      	str	r3, [sp, #12]
 800a046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a048:	9302      	str	r3, [sp, #8]
 800a04a:	f107 0314 	add.w	r3, r7, #20
 800a04e:	9301      	str	r3, [sp, #4]
 800a050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	68b9      	ldr	r1, [r7, #8]
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f000 f850 	bl	800a100 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a062:	f000 f8f3 	bl	800a24c <prvAddNewTaskToReadyList>
 800a066:	e001      	b.n	800a06c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a068:	2300      	movs	r3, #0
 800a06a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a06c:	697b      	ldr	r3, [r7, #20]
	}
 800a06e:	4618      	mov	r0, r3
 800a070:	3728      	adds	r7, #40	; 0x28
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a076:	b580      	push	{r7, lr}
 800a078:	b08c      	sub	sp, #48	; 0x30
 800a07a:	af04      	add	r7, sp, #16
 800a07c:	60f8      	str	r0, [r7, #12]
 800a07e:	60b9      	str	r1, [r7, #8]
 800a080:	603b      	str	r3, [r7, #0]
 800a082:	4613      	mov	r3, r2
 800a084:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a086:	88fb      	ldrh	r3, [r7, #6]
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	4618      	mov	r0, r3
 800a08c:	f001 fc5c 	bl	800b948 <pvPortMalloc>
 800a090:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00e      	beq.n	800a0b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a098:	20bc      	movs	r0, #188	; 0xbc
 800a09a:	f001 fc55 	bl	800b948 <pvPortMalloc>
 800a09e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d003      	beq.n	800a0ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	631a      	str	r2, [r3, #48]	; 0x30
 800a0ac:	e005      	b.n	800a0ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a0ae:	6978      	ldr	r0, [r7, #20]
 800a0b0:	f001 fd16 	bl	800bae0 <vPortFree>
 800a0b4:	e001      	b.n	800a0ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d017      	beq.n	800a0f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a0c8:	88fa      	ldrh	r2, [r7, #6]
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	9303      	str	r3, [sp, #12]
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	9302      	str	r3, [sp, #8]
 800a0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d4:	9301      	str	r3, [sp, #4]
 800a0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d8:	9300      	str	r3, [sp, #0]
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	68b9      	ldr	r1, [r7, #8]
 800a0de:	68f8      	ldr	r0, [r7, #12]
 800a0e0:	f000 f80e 	bl	800a100 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0e4:	69f8      	ldr	r0, [r7, #28]
 800a0e6:	f000 f8b1 	bl	800a24c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	61bb      	str	r3, [r7, #24]
 800a0ee:	e002      	b.n	800a0f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a0f6:	69bb      	ldr	r3, [r7, #24]
	}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3720      	adds	r7, #32
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b088      	sub	sp, #32
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]
 800a10c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a110:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	461a      	mov	r2, r3
 800a118:	21a5      	movs	r1, #165	; 0xa5
 800a11a:	f001 fe39 	bl	800bd90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a128:	3b01      	subs	r3, #1
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	4413      	add	r3, r2
 800a12e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	f023 0307 	bic.w	r3, r3, #7
 800a136:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	f003 0307 	and.w	r3, r3, #7
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00a      	beq.n	800a158 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a146:	f383 8811 	msr	BASEPRI, r3
 800a14a:	f3bf 8f6f 	isb	sy
 800a14e:	f3bf 8f4f 	dsb	sy
 800a152:	617b      	str	r3, [r7, #20]
}
 800a154:	bf00      	nop
 800a156:	e7fe      	b.n	800a156 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d01f      	beq.n	800a19e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a15e:	2300      	movs	r3, #0
 800a160:	61fb      	str	r3, [r7, #28]
 800a162:	e012      	b.n	800a18a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a164:	68ba      	ldr	r2, [r7, #8]
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	4413      	add	r3, r2
 800a16a:	7819      	ldrb	r1, [r3, #0]
 800a16c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	4413      	add	r3, r2
 800a172:	3334      	adds	r3, #52	; 0x34
 800a174:	460a      	mov	r2, r1
 800a176:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	4413      	add	r3, r2
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d006      	beq.n	800a192 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	3301      	adds	r3, #1
 800a188:	61fb      	str	r3, [r7, #28]
 800a18a:	69fb      	ldr	r3, [r7, #28]
 800a18c:	2b0f      	cmp	r3, #15
 800a18e:	d9e9      	bls.n	800a164 <prvInitialiseNewTask+0x64>
 800a190:	e000      	b.n	800a194 <prvInitialiseNewTask+0x94>
			{
				break;
 800a192:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a196:	2200      	movs	r2, #0
 800a198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a19c:	e003      	b.n	800a1a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a8:	2b37      	cmp	r3, #55	; 0x37
 800a1aa:	d901      	bls.n	800a1b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a1ac:	2337      	movs	r3, #55	; 0x37
 800a1ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1be:	2200      	movs	r2, #0
 800a1c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7ff f978 	bl	80094bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ce:	3318      	adds	r3, #24
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7ff f973 	bl	80094bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fe:	3354      	adds	r3, #84	; 0x54
 800a200:	2260      	movs	r2, #96	; 0x60
 800a202:	2100      	movs	r1, #0
 800a204:	4618      	mov	r0, r3
 800a206:	f001 fdc3 	bl	800bd90 <memset>
 800a20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20c:	4a0c      	ldr	r2, [pc, #48]	; (800a240 <prvInitialiseNewTask+0x140>)
 800a20e:	659a      	str	r2, [r3, #88]	; 0x58
 800a210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a212:	4a0c      	ldr	r2, [pc, #48]	; (800a244 <prvInitialiseNewTask+0x144>)
 800a214:	65da      	str	r2, [r3, #92]	; 0x5c
 800a216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a218:	4a0b      	ldr	r2, [pc, #44]	; (800a248 <prvInitialiseNewTask+0x148>)
 800a21a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a21c:	683a      	ldr	r2, [r7, #0]
 800a21e:	68f9      	ldr	r1, [r7, #12]
 800a220:	69b8      	ldr	r0, [r7, #24]
 800a222:	f001 f941 	bl	800b4a8 <pxPortInitialiseStack>
 800a226:	4602      	mov	r2, r0
 800a228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d002      	beq.n	800a238 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a236:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a238:	bf00      	nop
 800a23a:	3720      	adds	r7, #32
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	0800d4a4 	.word	0x0800d4a4
 800a244:	0800d4c4 	.word	0x0800d4c4
 800a248:	0800d484 	.word	0x0800d484

0800a24c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a254:	f001 fa56 	bl	800b704 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a258:	4b2d      	ldr	r3, [pc, #180]	; (800a310 <prvAddNewTaskToReadyList+0xc4>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	3301      	adds	r3, #1
 800a25e:	4a2c      	ldr	r2, [pc, #176]	; (800a310 <prvAddNewTaskToReadyList+0xc4>)
 800a260:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a262:	4b2c      	ldr	r3, [pc, #176]	; (800a314 <prvAddNewTaskToReadyList+0xc8>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d109      	bne.n	800a27e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a26a:	4a2a      	ldr	r2, [pc, #168]	; (800a314 <prvAddNewTaskToReadyList+0xc8>)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a270:	4b27      	ldr	r3, [pc, #156]	; (800a310 <prvAddNewTaskToReadyList+0xc4>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d110      	bne.n	800a29a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a278:	f000 fc26 	bl	800aac8 <prvInitialiseTaskLists>
 800a27c:	e00d      	b.n	800a29a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a27e:	4b26      	ldr	r3, [pc, #152]	; (800a318 <prvAddNewTaskToReadyList+0xcc>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d109      	bne.n	800a29a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a286:	4b23      	ldr	r3, [pc, #140]	; (800a314 <prvAddNewTaskToReadyList+0xc8>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a290:	429a      	cmp	r2, r3
 800a292:	d802      	bhi.n	800a29a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a294:	4a1f      	ldr	r2, [pc, #124]	; (800a314 <prvAddNewTaskToReadyList+0xc8>)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a29a:	4b20      	ldr	r3, [pc, #128]	; (800a31c <prvAddNewTaskToReadyList+0xd0>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	4a1e      	ldr	r2, [pc, #120]	; (800a31c <prvAddNewTaskToReadyList+0xd0>)
 800a2a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a2a4:	4b1d      	ldr	r3, [pc, #116]	; (800a31c <prvAddNewTaskToReadyList+0xd0>)
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b0:	4b1b      	ldr	r3, [pc, #108]	; (800a320 <prvAddNewTaskToReadyList+0xd4>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d903      	bls.n	800a2c0 <prvAddNewTaskToReadyList+0x74>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2bc:	4a18      	ldr	r2, [pc, #96]	; (800a320 <prvAddNewTaskToReadyList+0xd4>)
 800a2be:	6013      	str	r3, [r2, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	4413      	add	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4a15      	ldr	r2, [pc, #84]	; (800a324 <prvAddNewTaskToReadyList+0xd8>)
 800a2ce:	441a      	add	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	3304      	adds	r3, #4
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	f7ff f8fd 	bl	80094d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a2dc:	f001 fa42 	bl	800b764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a2e0:	4b0d      	ldr	r3, [pc, #52]	; (800a318 <prvAddNewTaskToReadyList+0xcc>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00e      	beq.n	800a306 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2e8:	4b0a      	ldr	r3, [pc, #40]	; (800a314 <prvAddNewTaskToReadyList+0xc8>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d207      	bcs.n	800a306 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a2f6:	4b0c      	ldr	r3, [pc, #48]	; (800a328 <prvAddNewTaskToReadyList+0xdc>)
 800a2f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2fc:	601a      	str	r2, [r3, #0]
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a306:	bf00      	nop
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	200016d8 	.word	0x200016d8
 800a314:	20001204 	.word	0x20001204
 800a318:	200016e4 	.word	0x200016e4
 800a31c:	200016f4 	.word	0x200016f4
 800a320:	200016e0 	.word	0x200016e0
 800a324:	20001208 	.word	0x20001208
 800a328:	e000ed04 	.word	0xe000ed04

0800a32c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a334:	2300      	movs	r3, #0
 800a336:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d017      	beq.n	800a36e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a33e:	4b13      	ldr	r3, [pc, #76]	; (800a38c <vTaskDelay+0x60>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d00a      	beq.n	800a35c <vTaskDelay+0x30>
	__asm volatile
 800a346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	60bb      	str	r3, [r7, #8]
}
 800a358:	bf00      	nop
 800a35a:	e7fe      	b.n	800a35a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a35c:	f000 f88a 	bl	800a474 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a360:	2100      	movs	r1, #0
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 fcfe 	bl	800ad64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a368:	f000 f892 	bl	800a490 <xTaskResumeAll>
 800a36c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d107      	bne.n	800a384 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a374:	4b06      	ldr	r3, [pc, #24]	; (800a390 <vTaskDelay+0x64>)
 800a376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a37a:	601a      	str	r2, [r3, #0]
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a384:	bf00      	nop
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	20001700 	.word	0x20001700
 800a390:	e000ed04 	.word	0xe000ed04

0800a394 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b08a      	sub	sp, #40	; 0x28
 800a398:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a39a:	2300      	movs	r3, #0
 800a39c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a3a2:	463a      	mov	r2, r7
 800a3a4:	1d39      	adds	r1, r7, #4
 800a3a6:	f107 0308 	add.w	r3, r7, #8
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7ff f832 	bl	8009414 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a3b0:	6839      	ldr	r1, [r7, #0]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	68ba      	ldr	r2, [r7, #8]
 800a3b6:	9202      	str	r2, [sp, #8]
 800a3b8:	9301      	str	r3, [sp, #4]
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	9300      	str	r3, [sp, #0]
 800a3be:	2300      	movs	r3, #0
 800a3c0:	460a      	mov	r2, r1
 800a3c2:	4924      	ldr	r1, [pc, #144]	; (800a454 <vTaskStartScheduler+0xc0>)
 800a3c4:	4824      	ldr	r0, [pc, #144]	; (800a458 <vTaskStartScheduler+0xc4>)
 800a3c6:	f7ff fdf9 	bl	8009fbc <xTaskCreateStatic>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	4a23      	ldr	r2, [pc, #140]	; (800a45c <vTaskStartScheduler+0xc8>)
 800a3ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a3d0:	4b22      	ldr	r3, [pc, #136]	; (800a45c <vTaskStartScheduler+0xc8>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	617b      	str	r3, [r7, #20]
 800a3dc:	e001      	b.n	800a3e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d102      	bne.n	800a3ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a3e8:	f000 fd10 	bl	800ae0c <xTimerCreateTimerTask>
 800a3ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d11b      	bne.n	800a42c <vTaskStartScheduler+0x98>
	__asm volatile
 800a3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f8:	f383 8811 	msr	BASEPRI, r3
 800a3fc:	f3bf 8f6f 	isb	sy
 800a400:	f3bf 8f4f 	dsb	sy
 800a404:	613b      	str	r3, [r7, #16]
}
 800a406:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a408:	4b15      	ldr	r3, [pc, #84]	; (800a460 <vTaskStartScheduler+0xcc>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	3354      	adds	r3, #84	; 0x54
 800a40e:	4a15      	ldr	r2, [pc, #84]	; (800a464 <vTaskStartScheduler+0xd0>)
 800a410:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a412:	4b15      	ldr	r3, [pc, #84]	; (800a468 <vTaskStartScheduler+0xd4>)
 800a414:	f04f 32ff 	mov.w	r2, #4294967295
 800a418:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a41a:	4b14      	ldr	r3, [pc, #80]	; (800a46c <vTaskStartScheduler+0xd8>)
 800a41c:	2201      	movs	r2, #1
 800a41e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a420:	4b13      	ldr	r3, [pc, #76]	; (800a470 <vTaskStartScheduler+0xdc>)
 800a422:	2200      	movs	r2, #0
 800a424:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a426:	f001 f8cb 	bl	800b5c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a42a:	e00e      	b.n	800a44a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a432:	d10a      	bne.n	800a44a <vTaskStartScheduler+0xb6>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	60fb      	str	r3, [r7, #12]
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <vTaskStartScheduler+0xb4>
}
 800a44a:	bf00      	nop
 800a44c:	3718      	adds	r7, #24
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	0800d0b8 	.word	0x0800d0b8
 800a458:	0800aa99 	.word	0x0800aa99
 800a45c:	200016fc 	.word	0x200016fc
 800a460:	20001204 	.word	0x20001204
 800a464:	200000bc 	.word	0x200000bc
 800a468:	200016f8 	.word	0x200016f8
 800a46c:	200016e4 	.word	0x200016e4
 800a470:	200016dc 	.word	0x200016dc

0800a474 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a474:	b480      	push	{r7}
 800a476:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a478:	4b04      	ldr	r3, [pc, #16]	; (800a48c <vTaskSuspendAll+0x18>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	3301      	adds	r3, #1
 800a47e:	4a03      	ldr	r2, [pc, #12]	; (800a48c <vTaskSuspendAll+0x18>)
 800a480:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a482:	bf00      	nop
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr
 800a48c:	20001700 	.word	0x20001700

0800a490 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a496:	2300      	movs	r3, #0
 800a498:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a49a:	2300      	movs	r3, #0
 800a49c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a49e:	4b42      	ldr	r3, [pc, #264]	; (800a5a8 <xTaskResumeAll+0x118>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d10a      	bne.n	800a4bc <xTaskResumeAll+0x2c>
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	603b      	str	r3, [r7, #0]
}
 800a4b8:	bf00      	nop
 800a4ba:	e7fe      	b.n	800a4ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a4bc:	f001 f922 	bl	800b704 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a4c0:	4b39      	ldr	r3, [pc, #228]	; (800a5a8 <xTaskResumeAll+0x118>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	4a38      	ldr	r2, [pc, #224]	; (800a5a8 <xTaskResumeAll+0x118>)
 800a4c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4ca:	4b37      	ldr	r3, [pc, #220]	; (800a5a8 <xTaskResumeAll+0x118>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d162      	bne.n	800a598 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a4d2:	4b36      	ldr	r3, [pc, #216]	; (800a5ac <xTaskResumeAll+0x11c>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d05e      	beq.n	800a598 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4da:	e02f      	b.n	800a53c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4dc:	4b34      	ldr	r3, [pc, #208]	; (800a5b0 <xTaskResumeAll+0x120>)
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	3318      	adds	r3, #24
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7ff f851 	bl	8009590 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	3304      	adds	r3, #4
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7ff f84c 	bl	8009590 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4fc:	4b2d      	ldr	r3, [pc, #180]	; (800a5b4 <xTaskResumeAll+0x124>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	429a      	cmp	r2, r3
 800a502:	d903      	bls.n	800a50c <xTaskResumeAll+0x7c>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a508:	4a2a      	ldr	r2, [pc, #168]	; (800a5b4 <xTaskResumeAll+0x124>)
 800a50a:	6013      	str	r3, [r2, #0]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a510:	4613      	mov	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4413      	add	r3, r2
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	4a27      	ldr	r2, [pc, #156]	; (800a5b8 <xTaskResumeAll+0x128>)
 800a51a:	441a      	add	r2, r3
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	3304      	adds	r3, #4
 800a520:	4619      	mov	r1, r3
 800a522:	4610      	mov	r0, r2
 800a524:	f7fe ffd7 	bl	80094d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52c:	4b23      	ldr	r3, [pc, #140]	; (800a5bc <xTaskResumeAll+0x12c>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a532:	429a      	cmp	r2, r3
 800a534:	d302      	bcc.n	800a53c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a536:	4b22      	ldr	r3, [pc, #136]	; (800a5c0 <xTaskResumeAll+0x130>)
 800a538:	2201      	movs	r2, #1
 800a53a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a53c:	4b1c      	ldr	r3, [pc, #112]	; (800a5b0 <xTaskResumeAll+0x120>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1cb      	bne.n	800a4dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a54a:	f000 fb5f 	bl	800ac0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a54e:	4b1d      	ldr	r3, [pc, #116]	; (800a5c4 <xTaskResumeAll+0x134>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d010      	beq.n	800a57c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a55a:	f000 f847 	bl	800a5ec <xTaskIncrementTick>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d002      	beq.n	800a56a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a564:	4b16      	ldr	r3, [pc, #88]	; (800a5c0 <xTaskResumeAll+0x130>)
 800a566:	2201      	movs	r2, #1
 800a568:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	3b01      	subs	r3, #1
 800a56e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1f1      	bne.n	800a55a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a576:	4b13      	ldr	r3, [pc, #76]	; (800a5c4 <xTaskResumeAll+0x134>)
 800a578:	2200      	movs	r2, #0
 800a57a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a57c:	4b10      	ldr	r3, [pc, #64]	; (800a5c0 <xTaskResumeAll+0x130>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d009      	beq.n	800a598 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a584:	2301      	movs	r3, #1
 800a586:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a588:	4b0f      	ldr	r3, [pc, #60]	; (800a5c8 <xTaskResumeAll+0x138>)
 800a58a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a58e:	601a      	str	r2, [r3, #0]
 800a590:	f3bf 8f4f 	dsb	sy
 800a594:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a598:	f001 f8e4 	bl	800b764 <vPortExitCritical>

	return xAlreadyYielded;
 800a59c:	68bb      	ldr	r3, [r7, #8]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	20001700 	.word	0x20001700
 800a5ac:	200016d8 	.word	0x200016d8
 800a5b0:	20001698 	.word	0x20001698
 800a5b4:	200016e0 	.word	0x200016e0
 800a5b8:	20001208 	.word	0x20001208
 800a5bc:	20001204 	.word	0x20001204
 800a5c0:	200016ec 	.word	0x200016ec
 800a5c4:	200016e8 	.word	0x200016e8
 800a5c8:	e000ed04 	.word	0xe000ed04

0800a5cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a5d2:	4b05      	ldr	r3, [pc, #20]	; (800a5e8 <xTaskGetTickCount+0x1c>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a5d8:	687b      	ldr	r3, [r7, #4]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop
 800a5e8:	200016dc 	.word	0x200016dc

0800a5ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b086      	sub	sp, #24
 800a5f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5f6:	4b4f      	ldr	r3, [pc, #316]	; (800a734 <xTaskIncrementTick+0x148>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f040 808f 	bne.w	800a71e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a600:	4b4d      	ldr	r3, [pc, #308]	; (800a738 <xTaskIncrementTick+0x14c>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	3301      	adds	r3, #1
 800a606:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a608:	4a4b      	ldr	r2, [pc, #300]	; (800a738 <xTaskIncrementTick+0x14c>)
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d120      	bne.n	800a656 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a614:	4b49      	ldr	r3, [pc, #292]	; (800a73c <xTaskIncrementTick+0x150>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00a      	beq.n	800a634 <xTaskIncrementTick+0x48>
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	603b      	str	r3, [r7, #0]
}
 800a630:	bf00      	nop
 800a632:	e7fe      	b.n	800a632 <xTaskIncrementTick+0x46>
 800a634:	4b41      	ldr	r3, [pc, #260]	; (800a73c <xTaskIncrementTick+0x150>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	60fb      	str	r3, [r7, #12]
 800a63a:	4b41      	ldr	r3, [pc, #260]	; (800a740 <xTaskIncrementTick+0x154>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a3f      	ldr	r2, [pc, #252]	; (800a73c <xTaskIncrementTick+0x150>)
 800a640:	6013      	str	r3, [r2, #0]
 800a642:	4a3f      	ldr	r2, [pc, #252]	; (800a740 <xTaskIncrementTick+0x154>)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6013      	str	r3, [r2, #0]
 800a648:	4b3e      	ldr	r3, [pc, #248]	; (800a744 <xTaskIncrementTick+0x158>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	3301      	adds	r3, #1
 800a64e:	4a3d      	ldr	r2, [pc, #244]	; (800a744 <xTaskIncrementTick+0x158>)
 800a650:	6013      	str	r3, [r2, #0]
 800a652:	f000 fadb 	bl	800ac0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a656:	4b3c      	ldr	r3, [pc, #240]	; (800a748 <xTaskIncrementTick+0x15c>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	693a      	ldr	r2, [r7, #16]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d349      	bcc.n	800a6f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a660:	4b36      	ldr	r3, [pc, #216]	; (800a73c <xTaskIncrementTick+0x150>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d104      	bne.n	800a674 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a66a:	4b37      	ldr	r3, [pc, #220]	; (800a748 <xTaskIncrementTick+0x15c>)
 800a66c:	f04f 32ff 	mov.w	r2, #4294967295
 800a670:	601a      	str	r2, [r3, #0]
					break;
 800a672:	e03f      	b.n	800a6f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a674:	4b31      	ldr	r3, [pc, #196]	; (800a73c <xTaskIncrementTick+0x150>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a684:	693a      	ldr	r2, [r7, #16]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d203      	bcs.n	800a694 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a68c:	4a2e      	ldr	r2, [pc, #184]	; (800a748 <xTaskIncrementTick+0x15c>)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a692:	e02f      	b.n	800a6f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	3304      	adds	r3, #4
 800a698:	4618      	mov	r0, r3
 800a69a:	f7fe ff79 	bl	8009590 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d004      	beq.n	800a6b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	3318      	adds	r3, #24
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fe ff70 	bl	8009590 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6b4:	4b25      	ldr	r3, [pc, #148]	; (800a74c <xTaskIncrementTick+0x160>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d903      	bls.n	800a6c4 <xTaskIncrementTick+0xd8>
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c0:	4a22      	ldr	r2, [pc, #136]	; (800a74c <xTaskIncrementTick+0x160>)
 800a6c2:	6013      	str	r3, [r2, #0]
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	4413      	add	r3, r2
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	4a1f      	ldr	r2, [pc, #124]	; (800a750 <xTaskIncrementTick+0x164>)
 800a6d2:	441a      	add	r2, r3
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	3304      	adds	r3, #4
 800a6d8:	4619      	mov	r1, r3
 800a6da:	4610      	mov	r0, r2
 800a6dc:	f7fe fefb 	bl	80094d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e4:	4b1b      	ldr	r3, [pc, #108]	; (800a754 <xTaskIncrementTick+0x168>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d3b8      	bcc.n	800a660 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6f2:	e7b5      	b.n	800a660 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a6f4:	4b17      	ldr	r3, [pc, #92]	; (800a754 <xTaskIncrementTick+0x168>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6fa:	4915      	ldr	r1, [pc, #84]	; (800a750 <xTaskIncrementTick+0x164>)
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4413      	add	r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	440b      	add	r3, r1
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d901      	bls.n	800a710 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a70c:	2301      	movs	r3, #1
 800a70e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a710:	4b11      	ldr	r3, [pc, #68]	; (800a758 <xTaskIncrementTick+0x16c>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d007      	beq.n	800a728 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a718:	2301      	movs	r3, #1
 800a71a:	617b      	str	r3, [r7, #20]
 800a71c:	e004      	b.n	800a728 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a71e:	4b0f      	ldr	r3, [pc, #60]	; (800a75c <xTaskIncrementTick+0x170>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	3301      	adds	r3, #1
 800a724:	4a0d      	ldr	r2, [pc, #52]	; (800a75c <xTaskIncrementTick+0x170>)
 800a726:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a728:	697b      	ldr	r3, [r7, #20]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3718      	adds	r7, #24
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	20001700 	.word	0x20001700
 800a738:	200016dc 	.word	0x200016dc
 800a73c:	20001690 	.word	0x20001690
 800a740:	20001694 	.word	0x20001694
 800a744:	200016f0 	.word	0x200016f0
 800a748:	200016f8 	.word	0x200016f8
 800a74c:	200016e0 	.word	0x200016e0
 800a750:	20001208 	.word	0x20001208
 800a754:	20001204 	.word	0x20001204
 800a758:	200016ec 	.word	0x200016ec
 800a75c:	200016e8 	.word	0x200016e8

0800a760 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a760:	b480      	push	{r7}
 800a762:	b085      	sub	sp, #20
 800a764:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a766:	4b2a      	ldr	r3, [pc, #168]	; (800a810 <vTaskSwitchContext+0xb0>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d003      	beq.n	800a776 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a76e:	4b29      	ldr	r3, [pc, #164]	; (800a814 <vTaskSwitchContext+0xb4>)
 800a770:	2201      	movs	r2, #1
 800a772:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a774:	e046      	b.n	800a804 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a776:	4b27      	ldr	r3, [pc, #156]	; (800a814 <vTaskSwitchContext+0xb4>)
 800a778:	2200      	movs	r2, #0
 800a77a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a77c:	4b26      	ldr	r3, [pc, #152]	; (800a818 <vTaskSwitchContext+0xb8>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	60fb      	str	r3, [r7, #12]
 800a782:	e010      	b.n	800a7a6 <vTaskSwitchContext+0x46>
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10a      	bne.n	800a7a0 <vTaskSwitchContext+0x40>
	__asm volatile
 800a78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78e:	f383 8811 	msr	BASEPRI, r3
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	f3bf 8f4f 	dsb	sy
 800a79a:	607b      	str	r3, [r7, #4]
}
 800a79c:	bf00      	nop
 800a79e:	e7fe      	b.n	800a79e <vTaskSwitchContext+0x3e>
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	3b01      	subs	r3, #1
 800a7a4:	60fb      	str	r3, [r7, #12]
 800a7a6:	491d      	ldr	r1, [pc, #116]	; (800a81c <vTaskSwitchContext+0xbc>)
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	4413      	add	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	440b      	add	r3, r1
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d0e4      	beq.n	800a784 <vTaskSwitchContext+0x24>
 800a7ba:	68fa      	ldr	r2, [r7, #12]
 800a7bc:	4613      	mov	r3, r2
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	4413      	add	r3, r2
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	4a15      	ldr	r2, [pc, #84]	; (800a81c <vTaskSwitchContext+0xbc>)
 800a7c6:	4413      	add	r3, r2
 800a7c8:	60bb      	str	r3, [r7, #8]
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	685a      	ldr	r2, [r3, #4]
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	605a      	str	r2, [r3, #4]
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	685a      	ldr	r2, [r3, #4]
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	3308      	adds	r3, #8
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d104      	bne.n	800a7ea <vTaskSwitchContext+0x8a>
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	685a      	ldr	r2, [r3, #4]
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	605a      	str	r2, [r3, #4]
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	4a0b      	ldr	r2, [pc, #44]	; (800a820 <vTaskSwitchContext+0xc0>)
 800a7f2:	6013      	str	r3, [r2, #0]
 800a7f4:	4a08      	ldr	r2, [pc, #32]	; (800a818 <vTaskSwitchContext+0xb8>)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a7fa:	4b09      	ldr	r3, [pc, #36]	; (800a820 <vTaskSwitchContext+0xc0>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	3354      	adds	r3, #84	; 0x54
 800a800:	4a08      	ldr	r2, [pc, #32]	; (800a824 <vTaskSwitchContext+0xc4>)
 800a802:	6013      	str	r3, [r2, #0]
}
 800a804:	bf00      	nop
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr
 800a810:	20001700 	.word	0x20001700
 800a814:	200016ec 	.word	0x200016ec
 800a818:	200016e0 	.word	0x200016e0
 800a81c:	20001208 	.word	0x20001208
 800a820:	20001204 	.word	0x20001204
 800a824:	200000bc 	.word	0x200000bc

0800a828 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10a      	bne.n	800a84e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83c:	f383 8811 	msr	BASEPRI, r3
 800a840:	f3bf 8f6f 	isb	sy
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	60fb      	str	r3, [r7, #12]
}
 800a84a:	bf00      	nop
 800a84c:	e7fe      	b.n	800a84c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a84e:	4b07      	ldr	r3, [pc, #28]	; (800a86c <vTaskPlaceOnEventList+0x44>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3318      	adds	r3, #24
 800a854:	4619      	mov	r1, r3
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f7fe fe61 	bl	800951e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a85c:	2101      	movs	r1, #1
 800a85e:	6838      	ldr	r0, [r7, #0]
 800a860:	f000 fa80 	bl	800ad64 <prvAddCurrentTaskToDelayedList>
}
 800a864:	bf00      	nop
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	20001204 	.word	0x20001204

0800a870 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10a      	bne.n	800a898 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a886:	f383 8811 	msr	BASEPRI, r3
 800a88a:	f3bf 8f6f 	isb	sy
 800a88e:	f3bf 8f4f 	dsb	sy
 800a892:	617b      	str	r3, [r7, #20]
}
 800a894:	bf00      	nop
 800a896:	e7fe      	b.n	800a896 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a898:	4b0a      	ldr	r3, [pc, #40]	; (800a8c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	3318      	adds	r3, #24
 800a89e:	4619      	mov	r1, r3
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f7fe fe18 	bl	80094d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d002      	beq.n	800a8b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a8ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a8b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a8b2:	6879      	ldr	r1, [r7, #4]
 800a8b4:	68b8      	ldr	r0, [r7, #8]
 800a8b6:	f000 fa55 	bl	800ad64 <prvAddCurrentTaskToDelayedList>
	}
 800a8ba:	bf00      	nop
 800a8bc:	3718      	adds	r7, #24
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	20001204 	.word	0x20001204

0800a8c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d10a      	bne.n	800a8f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	60fb      	str	r3, [r7, #12]
}
 800a8f0:	bf00      	nop
 800a8f2:	e7fe      	b.n	800a8f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	3318      	adds	r3, #24
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7fe fe49 	bl	8009590 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8fe:	4b1e      	ldr	r3, [pc, #120]	; (800a978 <xTaskRemoveFromEventList+0xb0>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d11d      	bne.n	800a942 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	3304      	adds	r3, #4
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fe fe40 	bl	8009590 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a914:	4b19      	ldr	r3, [pc, #100]	; (800a97c <xTaskRemoveFromEventList+0xb4>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d903      	bls.n	800a924 <xTaskRemoveFromEventList+0x5c>
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a920:	4a16      	ldr	r2, [pc, #88]	; (800a97c <xTaskRemoveFromEventList+0xb4>)
 800a922:	6013      	str	r3, [r2, #0]
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a928:	4613      	mov	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4413      	add	r3, r2
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	4a13      	ldr	r2, [pc, #76]	; (800a980 <xTaskRemoveFromEventList+0xb8>)
 800a932:	441a      	add	r2, r3
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	3304      	adds	r3, #4
 800a938:	4619      	mov	r1, r3
 800a93a:	4610      	mov	r0, r2
 800a93c:	f7fe fdcb 	bl	80094d6 <vListInsertEnd>
 800a940:	e005      	b.n	800a94e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	3318      	adds	r3, #24
 800a946:	4619      	mov	r1, r3
 800a948:	480e      	ldr	r0, [pc, #56]	; (800a984 <xTaskRemoveFromEventList+0xbc>)
 800a94a:	f7fe fdc4 	bl	80094d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a952:	4b0d      	ldr	r3, [pc, #52]	; (800a988 <xTaskRemoveFromEventList+0xc0>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a958:	429a      	cmp	r2, r3
 800a95a:	d905      	bls.n	800a968 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a95c:	2301      	movs	r3, #1
 800a95e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a960:	4b0a      	ldr	r3, [pc, #40]	; (800a98c <xTaskRemoveFromEventList+0xc4>)
 800a962:	2201      	movs	r2, #1
 800a964:	601a      	str	r2, [r3, #0]
 800a966:	e001      	b.n	800a96c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a968:	2300      	movs	r3, #0
 800a96a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a96c:	697b      	ldr	r3, [r7, #20]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3718      	adds	r7, #24
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	20001700 	.word	0x20001700
 800a97c:	200016e0 	.word	0x200016e0
 800a980:	20001208 	.word	0x20001208
 800a984:	20001698 	.word	0x20001698
 800a988:	20001204 	.word	0x20001204
 800a98c:	200016ec 	.word	0x200016ec

0800a990 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a998:	4b06      	ldr	r3, [pc, #24]	; (800a9b4 <vTaskInternalSetTimeOutState+0x24>)
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a9a0:	4b05      	ldr	r3, [pc, #20]	; (800a9b8 <vTaskInternalSetTimeOutState+0x28>)
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	605a      	str	r2, [r3, #4]
}
 800a9a8:	bf00      	nop
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr
 800a9b4:	200016f0 	.word	0x200016f0
 800a9b8:	200016dc 	.word	0x200016dc

0800a9bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b088      	sub	sp, #32
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10a      	bne.n	800a9e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d0:	f383 8811 	msr	BASEPRI, r3
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	f3bf 8f4f 	dsb	sy
 800a9dc:	613b      	str	r3, [r7, #16]
}
 800a9de:	bf00      	nop
 800a9e0:	e7fe      	b.n	800a9e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10a      	bne.n	800a9fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ec:	f383 8811 	msr	BASEPRI, r3
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	60fb      	str	r3, [r7, #12]
}
 800a9fa:	bf00      	nop
 800a9fc:	e7fe      	b.n	800a9fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a9fe:	f000 fe81 	bl	800b704 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aa02:	4b1d      	ldr	r3, [pc, #116]	; (800aa78 <xTaskCheckForTimeOut+0xbc>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	69ba      	ldr	r2, [r7, #24]
 800aa0e:	1ad3      	subs	r3, r2, r3
 800aa10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1a:	d102      	bne.n	800aa22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	61fb      	str	r3, [r7, #28]
 800aa20:	e023      	b.n	800aa6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	4b15      	ldr	r3, [pc, #84]	; (800aa7c <xTaskCheckForTimeOut+0xc0>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d007      	beq.n	800aa3e <xTaskCheckForTimeOut+0x82>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	69ba      	ldr	r2, [r7, #24]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d302      	bcc.n	800aa3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	61fb      	str	r3, [r7, #28]
 800aa3c:	e015      	b.n	800aa6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	697a      	ldr	r2, [r7, #20]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d20b      	bcs.n	800aa60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	1ad2      	subs	r2, r2, r3
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f7ff ff9b 	bl	800a990 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	61fb      	str	r3, [r7, #28]
 800aa5e:	e004      	b.n	800aa6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	2200      	movs	r2, #0
 800aa64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aa66:	2301      	movs	r3, #1
 800aa68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aa6a:	f000 fe7b 	bl	800b764 <vPortExitCritical>

	return xReturn;
 800aa6e:	69fb      	ldr	r3, [r7, #28]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3720      	adds	r7, #32
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	200016dc 	.word	0x200016dc
 800aa7c:	200016f0 	.word	0x200016f0

0800aa80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa80:	b480      	push	{r7}
 800aa82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa84:	4b03      	ldr	r3, [pc, #12]	; (800aa94 <vTaskMissedYield+0x14>)
 800aa86:	2201      	movs	r2, #1
 800aa88:	601a      	str	r2, [r3, #0]
}
 800aa8a:	bf00      	nop
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr
 800aa94:	200016ec 	.word	0x200016ec

0800aa98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aaa0:	f000 f852 	bl	800ab48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aaa4:	4b06      	ldr	r3, [pc, #24]	; (800aac0 <prvIdleTask+0x28>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d9f9      	bls.n	800aaa0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aaac:	4b05      	ldr	r3, [pc, #20]	; (800aac4 <prvIdleTask+0x2c>)
 800aaae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aab2:	601a      	str	r2, [r3, #0]
 800aab4:	f3bf 8f4f 	dsb	sy
 800aab8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aabc:	e7f0      	b.n	800aaa0 <prvIdleTask+0x8>
 800aabe:	bf00      	nop
 800aac0:	20001208 	.word	0x20001208
 800aac4:	e000ed04 	.word	0xe000ed04

0800aac8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aace:	2300      	movs	r3, #0
 800aad0:	607b      	str	r3, [r7, #4]
 800aad2:	e00c      	b.n	800aaee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	4613      	mov	r3, r2
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	4413      	add	r3, r2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	4a12      	ldr	r2, [pc, #72]	; (800ab28 <prvInitialiseTaskLists+0x60>)
 800aae0:	4413      	add	r3, r2
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fe fcca 	bl	800947c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	3301      	adds	r3, #1
 800aaec:	607b      	str	r3, [r7, #4]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2b37      	cmp	r3, #55	; 0x37
 800aaf2:	d9ef      	bls.n	800aad4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aaf4:	480d      	ldr	r0, [pc, #52]	; (800ab2c <prvInitialiseTaskLists+0x64>)
 800aaf6:	f7fe fcc1 	bl	800947c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aafa:	480d      	ldr	r0, [pc, #52]	; (800ab30 <prvInitialiseTaskLists+0x68>)
 800aafc:	f7fe fcbe 	bl	800947c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ab00:	480c      	ldr	r0, [pc, #48]	; (800ab34 <prvInitialiseTaskLists+0x6c>)
 800ab02:	f7fe fcbb 	bl	800947c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ab06:	480c      	ldr	r0, [pc, #48]	; (800ab38 <prvInitialiseTaskLists+0x70>)
 800ab08:	f7fe fcb8 	bl	800947c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ab0c:	480b      	ldr	r0, [pc, #44]	; (800ab3c <prvInitialiseTaskLists+0x74>)
 800ab0e:	f7fe fcb5 	bl	800947c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ab12:	4b0b      	ldr	r3, [pc, #44]	; (800ab40 <prvInitialiseTaskLists+0x78>)
 800ab14:	4a05      	ldr	r2, [pc, #20]	; (800ab2c <prvInitialiseTaskLists+0x64>)
 800ab16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ab18:	4b0a      	ldr	r3, [pc, #40]	; (800ab44 <prvInitialiseTaskLists+0x7c>)
 800ab1a:	4a05      	ldr	r2, [pc, #20]	; (800ab30 <prvInitialiseTaskLists+0x68>)
 800ab1c:	601a      	str	r2, [r3, #0]
}
 800ab1e:	bf00      	nop
 800ab20:	3708      	adds	r7, #8
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	20001208 	.word	0x20001208
 800ab2c:	20001668 	.word	0x20001668
 800ab30:	2000167c 	.word	0x2000167c
 800ab34:	20001698 	.word	0x20001698
 800ab38:	200016ac 	.word	0x200016ac
 800ab3c:	200016c4 	.word	0x200016c4
 800ab40:	20001690 	.word	0x20001690
 800ab44:	20001694 	.word	0x20001694

0800ab48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab4e:	e019      	b.n	800ab84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ab50:	f000 fdd8 	bl	800b704 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab54:	4b10      	ldr	r3, [pc, #64]	; (800ab98 <prvCheckTasksWaitingTermination+0x50>)
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	3304      	adds	r3, #4
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fe fd15 	bl	8009590 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ab66:	4b0d      	ldr	r3, [pc, #52]	; (800ab9c <prvCheckTasksWaitingTermination+0x54>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	4a0b      	ldr	r2, [pc, #44]	; (800ab9c <prvCheckTasksWaitingTermination+0x54>)
 800ab6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ab70:	4b0b      	ldr	r3, [pc, #44]	; (800aba0 <prvCheckTasksWaitingTermination+0x58>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	3b01      	subs	r3, #1
 800ab76:	4a0a      	ldr	r2, [pc, #40]	; (800aba0 <prvCheckTasksWaitingTermination+0x58>)
 800ab78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ab7a:	f000 fdf3 	bl	800b764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f810 	bl	800aba4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab84:	4b06      	ldr	r3, [pc, #24]	; (800aba0 <prvCheckTasksWaitingTermination+0x58>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1e1      	bne.n	800ab50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ab8c:	bf00      	nop
 800ab8e:	bf00      	nop
 800ab90:	3708      	adds	r7, #8
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	200016ac 	.word	0x200016ac
 800ab9c:	200016d8 	.word	0x200016d8
 800aba0:	200016c0 	.word	0x200016c0

0800aba4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	3354      	adds	r3, #84	; 0x54
 800abb0:	4618      	mov	r0, r3
 800abb2:	f001 f903 	bl	800bdbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d108      	bne.n	800abd2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 ff8b 	bl	800bae0 <vPortFree>
				vPortFree( pxTCB );
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 ff88 	bl	800bae0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800abd0:	e018      	b.n	800ac04 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d103      	bne.n	800abe4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 ff7f 	bl	800bae0 <vPortFree>
	}
 800abe2:	e00f      	b.n	800ac04 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800abea:	2b02      	cmp	r3, #2
 800abec:	d00a      	beq.n	800ac04 <prvDeleteTCB+0x60>
	__asm volatile
 800abee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	60fb      	str	r3, [r7, #12]
}
 800ac00:	bf00      	nop
 800ac02:	e7fe      	b.n	800ac02 <prvDeleteTCB+0x5e>
	}
 800ac04:	bf00      	nop
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac12:	4b0c      	ldr	r3, [pc, #48]	; (800ac44 <prvResetNextTaskUnblockTime+0x38>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d104      	bne.n	800ac26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ac1c:	4b0a      	ldr	r3, [pc, #40]	; (800ac48 <prvResetNextTaskUnblockTime+0x3c>)
 800ac1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ac24:	e008      	b.n	800ac38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac26:	4b07      	ldr	r3, [pc, #28]	; (800ac44 <prvResetNextTaskUnblockTime+0x38>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	4a04      	ldr	r2, [pc, #16]	; (800ac48 <prvResetNextTaskUnblockTime+0x3c>)
 800ac36:	6013      	str	r3, [r2, #0]
}
 800ac38:	bf00      	nop
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	20001690 	.word	0x20001690
 800ac48:	200016f8 	.word	0x200016f8

0800ac4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ac52:	4b0b      	ldr	r3, [pc, #44]	; (800ac80 <xTaskGetSchedulerState+0x34>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d102      	bne.n	800ac60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	607b      	str	r3, [r7, #4]
 800ac5e:	e008      	b.n	800ac72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac60:	4b08      	ldr	r3, [pc, #32]	; (800ac84 <xTaskGetSchedulerState+0x38>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d102      	bne.n	800ac6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ac68:	2302      	movs	r3, #2
 800ac6a:	607b      	str	r3, [r7, #4]
 800ac6c:	e001      	b.n	800ac72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ac72:	687b      	ldr	r3, [r7, #4]
	}
 800ac74:	4618      	mov	r0, r3
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	200016e4 	.word	0x200016e4
 800ac84:	20001700 	.word	0x20001700

0800ac88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b086      	sub	sp, #24
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac94:	2300      	movs	r3, #0
 800ac96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d056      	beq.n	800ad4c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac9e:	4b2e      	ldr	r3, [pc, #184]	; (800ad58 <xTaskPriorityDisinherit+0xd0>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	693a      	ldr	r2, [r7, #16]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d00a      	beq.n	800acbe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	60fb      	str	r3, [r7, #12]
}
 800acba:	bf00      	nop
 800acbc:	e7fe      	b.n	800acbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d10a      	bne.n	800acdc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800acc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acca:	f383 8811 	msr	BASEPRI, r3
 800acce:	f3bf 8f6f 	isb	sy
 800acd2:	f3bf 8f4f 	dsb	sy
 800acd6:	60bb      	str	r3, [r7, #8]
}
 800acd8:	bf00      	nop
 800acda:	e7fe      	b.n	800acda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ace0:	1e5a      	subs	r2, r3, #1
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acee:	429a      	cmp	r2, r3
 800acf0:	d02c      	beq.n	800ad4c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d128      	bne.n	800ad4c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	3304      	adds	r3, #4
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7fe fc46 	bl	8009590 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad1c:	4b0f      	ldr	r3, [pc, #60]	; (800ad5c <xTaskPriorityDisinherit+0xd4>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d903      	bls.n	800ad2c <xTaskPriorityDisinherit+0xa4>
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad28:	4a0c      	ldr	r2, [pc, #48]	; (800ad5c <xTaskPriorityDisinherit+0xd4>)
 800ad2a:	6013      	str	r3, [r2, #0]
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad30:	4613      	mov	r3, r2
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	4413      	add	r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4a09      	ldr	r2, [pc, #36]	; (800ad60 <xTaskPriorityDisinherit+0xd8>)
 800ad3a:	441a      	add	r2, r3
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	3304      	adds	r3, #4
 800ad40:	4619      	mov	r1, r3
 800ad42:	4610      	mov	r0, r2
 800ad44:	f7fe fbc7 	bl	80094d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad4c:	697b      	ldr	r3, [r7, #20]
	}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3718      	adds	r7, #24
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	20001204 	.word	0x20001204
 800ad5c:	200016e0 	.word	0x200016e0
 800ad60:	20001208 	.word	0x20001208

0800ad64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad6e:	4b21      	ldr	r3, [pc, #132]	; (800adf4 <prvAddCurrentTaskToDelayedList+0x90>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad74:	4b20      	ldr	r3, [pc, #128]	; (800adf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	3304      	adds	r3, #4
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fe fc08 	bl	8009590 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad86:	d10a      	bne.n	800ad9e <prvAddCurrentTaskToDelayedList+0x3a>
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d007      	beq.n	800ad9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad8e:	4b1a      	ldr	r3, [pc, #104]	; (800adf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	3304      	adds	r3, #4
 800ad94:	4619      	mov	r1, r3
 800ad96:	4819      	ldr	r0, [pc, #100]	; (800adfc <prvAddCurrentTaskToDelayedList+0x98>)
 800ad98:	f7fe fb9d 	bl	80094d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad9c:	e026      	b.n	800adec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4413      	add	r3, r2
 800ada4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ada6:	4b14      	ldr	r3, [pc, #80]	; (800adf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	68ba      	ldr	r2, [r7, #8]
 800adac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800adae:	68ba      	ldr	r2, [r7, #8]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d209      	bcs.n	800adca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adb6:	4b12      	ldr	r3, [pc, #72]	; (800ae00 <prvAddCurrentTaskToDelayedList+0x9c>)
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	4b0f      	ldr	r3, [pc, #60]	; (800adf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	3304      	adds	r3, #4
 800adc0:	4619      	mov	r1, r3
 800adc2:	4610      	mov	r0, r2
 800adc4:	f7fe fbab 	bl	800951e <vListInsert>
}
 800adc8:	e010      	b.n	800adec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adca:	4b0e      	ldr	r3, [pc, #56]	; (800ae04 <prvAddCurrentTaskToDelayedList+0xa0>)
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	4b0a      	ldr	r3, [pc, #40]	; (800adf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	3304      	adds	r3, #4
 800add4:	4619      	mov	r1, r3
 800add6:	4610      	mov	r0, r2
 800add8:	f7fe fba1 	bl	800951e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800addc:	4b0a      	ldr	r3, [pc, #40]	; (800ae08 <prvAddCurrentTaskToDelayedList+0xa4>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68ba      	ldr	r2, [r7, #8]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d202      	bcs.n	800adec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ade6:	4a08      	ldr	r2, [pc, #32]	; (800ae08 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	6013      	str	r3, [r2, #0]
}
 800adec:	bf00      	nop
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	200016dc 	.word	0x200016dc
 800adf8:	20001204 	.word	0x20001204
 800adfc:	200016c4 	.word	0x200016c4
 800ae00:	20001694 	.word	0x20001694
 800ae04:	20001690 	.word	0x20001690
 800ae08:	200016f8 	.word	0x200016f8

0800ae0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b08a      	sub	sp, #40	; 0x28
 800ae10:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ae12:	2300      	movs	r3, #0
 800ae14:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ae16:	f000 fb07 	bl	800b428 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ae1a:	4b1c      	ldr	r3, [pc, #112]	; (800ae8c <xTimerCreateTimerTask+0x80>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d021      	beq.n	800ae66 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ae22:	2300      	movs	r3, #0
 800ae24:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ae26:	2300      	movs	r3, #0
 800ae28:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ae2a:	1d3a      	adds	r2, r7, #4
 800ae2c:	f107 0108 	add.w	r1, r7, #8
 800ae30:	f107 030c 	add.w	r3, r7, #12
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7fe fb07 	bl	8009448 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ae3a:	6879      	ldr	r1, [r7, #4]
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	9202      	str	r2, [sp, #8]
 800ae42:	9301      	str	r3, [sp, #4]
 800ae44:	2302      	movs	r3, #2
 800ae46:	9300      	str	r3, [sp, #0]
 800ae48:	2300      	movs	r3, #0
 800ae4a:	460a      	mov	r2, r1
 800ae4c:	4910      	ldr	r1, [pc, #64]	; (800ae90 <xTimerCreateTimerTask+0x84>)
 800ae4e:	4811      	ldr	r0, [pc, #68]	; (800ae94 <xTimerCreateTimerTask+0x88>)
 800ae50:	f7ff f8b4 	bl	8009fbc <xTaskCreateStatic>
 800ae54:	4603      	mov	r3, r0
 800ae56:	4a10      	ldr	r2, [pc, #64]	; (800ae98 <xTimerCreateTimerTask+0x8c>)
 800ae58:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae5a:	4b0f      	ldr	r3, [pc, #60]	; (800ae98 <xTimerCreateTimerTask+0x8c>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d001      	beq.n	800ae66 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae62:	2301      	movs	r3, #1
 800ae64:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d10a      	bne.n	800ae82 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ae6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae70:	f383 8811 	msr	BASEPRI, r3
 800ae74:	f3bf 8f6f 	isb	sy
 800ae78:	f3bf 8f4f 	dsb	sy
 800ae7c:	613b      	str	r3, [r7, #16]
}
 800ae7e:	bf00      	nop
 800ae80:	e7fe      	b.n	800ae80 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ae82:	697b      	ldr	r3, [r7, #20]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3718      	adds	r7, #24
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	20001734 	.word	0x20001734
 800ae90:	0800d0c0 	.word	0x0800d0c0
 800ae94:	0800afd1 	.word	0x0800afd1
 800ae98:	20001738 	.word	0x20001738

0800ae9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b08a      	sub	sp, #40	; 0x28
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
 800aea8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d10a      	bne.n	800aeca <xTimerGenericCommand+0x2e>
	__asm volatile
 800aeb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb8:	f383 8811 	msr	BASEPRI, r3
 800aebc:	f3bf 8f6f 	isb	sy
 800aec0:	f3bf 8f4f 	dsb	sy
 800aec4:	623b      	str	r3, [r7, #32]
}
 800aec6:	bf00      	nop
 800aec8:	e7fe      	b.n	800aec8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aeca:	4b1a      	ldr	r3, [pc, #104]	; (800af34 <xTimerGenericCommand+0x98>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d02a      	beq.n	800af28 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	2b05      	cmp	r3, #5
 800aee2:	dc18      	bgt.n	800af16 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aee4:	f7ff feb2 	bl	800ac4c <xTaskGetSchedulerState>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d109      	bne.n	800af02 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aeee:	4b11      	ldr	r3, [pc, #68]	; (800af34 <xTimerGenericCommand+0x98>)
 800aef0:	6818      	ldr	r0, [r3, #0]
 800aef2:	f107 0110 	add.w	r1, r7, #16
 800aef6:	2300      	movs	r3, #0
 800aef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aefa:	f7fe fc77 	bl	80097ec <xQueueGenericSend>
 800aefe:	6278      	str	r0, [r7, #36]	; 0x24
 800af00:	e012      	b.n	800af28 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800af02:	4b0c      	ldr	r3, [pc, #48]	; (800af34 <xTimerGenericCommand+0x98>)
 800af04:	6818      	ldr	r0, [r3, #0]
 800af06:	f107 0110 	add.w	r1, r7, #16
 800af0a:	2300      	movs	r3, #0
 800af0c:	2200      	movs	r2, #0
 800af0e:	f7fe fc6d 	bl	80097ec <xQueueGenericSend>
 800af12:	6278      	str	r0, [r7, #36]	; 0x24
 800af14:	e008      	b.n	800af28 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800af16:	4b07      	ldr	r3, [pc, #28]	; (800af34 <xTimerGenericCommand+0x98>)
 800af18:	6818      	ldr	r0, [r3, #0]
 800af1a:	f107 0110 	add.w	r1, r7, #16
 800af1e:	2300      	movs	r3, #0
 800af20:	683a      	ldr	r2, [r7, #0]
 800af22:	f7fe fd61 	bl	80099e8 <xQueueGenericSendFromISR>
 800af26:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800af28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3728      	adds	r7, #40	; 0x28
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	20001734 	.word	0x20001734

0800af38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b088      	sub	sp, #32
 800af3c:	af02      	add	r7, sp, #8
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af42:	4b22      	ldr	r3, [pc, #136]	; (800afcc <prvProcessExpiredTimer+0x94>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	68db      	ldr	r3, [r3, #12]
 800af4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	3304      	adds	r3, #4
 800af50:	4618      	mov	r0, r3
 800af52:	f7fe fb1d 	bl	8009590 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af5c:	f003 0304 	and.w	r3, r3, #4
 800af60:	2b00      	cmp	r3, #0
 800af62:	d022      	beq.n	800afaa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	699a      	ldr	r2, [r3, #24]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	18d1      	adds	r1, r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	683a      	ldr	r2, [r7, #0]
 800af70:	6978      	ldr	r0, [r7, #20]
 800af72:	f000 f8d1 	bl	800b118 <prvInsertTimerInActiveList>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d01f      	beq.n	800afbc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af7c:	2300      	movs	r3, #0
 800af7e:	9300      	str	r3, [sp, #0]
 800af80:	2300      	movs	r3, #0
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	2100      	movs	r1, #0
 800af86:	6978      	ldr	r0, [r7, #20]
 800af88:	f7ff ff88 	bl	800ae9c <xTimerGenericCommand>
 800af8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d113      	bne.n	800afbc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800af94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af98:	f383 8811 	msr	BASEPRI, r3
 800af9c:	f3bf 8f6f 	isb	sy
 800afa0:	f3bf 8f4f 	dsb	sy
 800afa4:	60fb      	str	r3, [r7, #12]
}
 800afa6:	bf00      	nop
 800afa8:	e7fe      	b.n	800afa8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afb0:	f023 0301 	bic.w	r3, r3, #1
 800afb4:	b2da      	uxtb	r2, r3
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	6a1b      	ldr	r3, [r3, #32]
 800afc0:	6978      	ldr	r0, [r7, #20]
 800afc2:	4798      	blx	r3
}
 800afc4:	bf00      	nop
 800afc6:	3718      	adds	r7, #24
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	2000172c 	.word	0x2000172c

0800afd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afd8:	f107 0308 	add.w	r3, r7, #8
 800afdc:	4618      	mov	r0, r3
 800afde:	f000 f857 	bl	800b090 <prvGetNextExpireTime>
 800afe2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	4619      	mov	r1, r3
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f000 f803 	bl	800aff4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800afee:	f000 f8d5 	bl	800b19c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aff2:	e7f1      	b.n	800afd8 <prvTimerTask+0x8>

0800aff4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800affe:	f7ff fa39 	bl	800a474 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b002:	f107 0308 	add.w	r3, r7, #8
 800b006:	4618      	mov	r0, r3
 800b008:	f000 f866 	bl	800b0d8 <prvSampleTimeNow>
 800b00c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d130      	bne.n	800b076 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d10a      	bne.n	800b030 <prvProcessTimerOrBlockTask+0x3c>
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d806      	bhi.n	800b030 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b022:	f7ff fa35 	bl	800a490 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b026:	68f9      	ldr	r1, [r7, #12]
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f7ff ff85 	bl	800af38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b02e:	e024      	b.n	800b07a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d008      	beq.n	800b048 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b036:	4b13      	ldr	r3, [pc, #76]	; (800b084 <prvProcessTimerOrBlockTask+0x90>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d101      	bne.n	800b044 <prvProcessTimerOrBlockTask+0x50>
 800b040:	2301      	movs	r3, #1
 800b042:	e000      	b.n	800b046 <prvProcessTimerOrBlockTask+0x52>
 800b044:	2300      	movs	r3, #0
 800b046:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b048:	4b0f      	ldr	r3, [pc, #60]	; (800b088 <prvProcessTimerOrBlockTask+0x94>)
 800b04a:	6818      	ldr	r0, [r3, #0]
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	1ad3      	subs	r3, r2, r3
 800b052:	683a      	ldr	r2, [r7, #0]
 800b054:	4619      	mov	r1, r3
 800b056:	f7fe ff7d 	bl	8009f54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b05a:	f7ff fa19 	bl	800a490 <xTaskResumeAll>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10a      	bne.n	800b07a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b064:	4b09      	ldr	r3, [pc, #36]	; (800b08c <prvProcessTimerOrBlockTask+0x98>)
 800b066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b06a:	601a      	str	r2, [r3, #0]
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	f3bf 8f6f 	isb	sy
}
 800b074:	e001      	b.n	800b07a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b076:	f7ff fa0b 	bl	800a490 <xTaskResumeAll>
}
 800b07a:	bf00      	nop
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	20001730 	.word	0x20001730
 800b088:	20001734 	.word	0x20001734
 800b08c:	e000ed04 	.word	0xe000ed04

0800b090 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b090:	b480      	push	{r7}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b098:	4b0e      	ldr	r3, [pc, #56]	; (800b0d4 <prvGetNextExpireTime+0x44>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d101      	bne.n	800b0a6 <prvGetNextExpireTime+0x16>
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	e000      	b.n	800b0a8 <prvGetNextExpireTime+0x18>
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d105      	bne.n	800b0c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0b4:	4b07      	ldr	r3, [pc, #28]	; (800b0d4 <prvGetNextExpireTime+0x44>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	60fb      	str	r3, [r7, #12]
 800b0be:	e001      	b.n	800b0c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3714      	adds	r7, #20
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop
 800b0d4:	2000172c 	.word	0x2000172c

0800b0d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b0e0:	f7ff fa74 	bl	800a5cc <xTaskGetTickCount>
 800b0e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b0e6:	4b0b      	ldr	r3, [pc, #44]	; (800b114 <prvSampleTimeNow+0x3c>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	68fa      	ldr	r2, [r7, #12]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d205      	bcs.n	800b0fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b0f0:	f000 f936 	bl	800b360 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	601a      	str	r2, [r3, #0]
 800b0fa:	e002      	b.n	800b102 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b102:	4a04      	ldr	r2, [pc, #16]	; (800b114 <prvSampleTimeNow+0x3c>)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b108:	68fb      	ldr	r3, [r7, #12]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3710      	adds	r7, #16
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	2000173c 	.word	0x2000173c

0800b118 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b086      	sub	sp, #24
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	607a      	str	r2, [r7, #4]
 800b124:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b126:	2300      	movs	r3, #0
 800b128:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	68ba      	ldr	r2, [r7, #8]
 800b12e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b136:	68ba      	ldr	r2, [r7, #8]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d812      	bhi.n	800b164 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	1ad2      	subs	r2, r2, r3
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	699b      	ldr	r3, [r3, #24]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d302      	bcc.n	800b152 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b14c:	2301      	movs	r3, #1
 800b14e:	617b      	str	r3, [r7, #20]
 800b150:	e01b      	b.n	800b18a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b152:	4b10      	ldr	r3, [pc, #64]	; (800b194 <prvInsertTimerInActiveList+0x7c>)
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	3304      	adds	r3, #4
 800b15a:	4619      	mov	r1, r3
 800b15c:	4610      	mov	r0, r2
 800b15e:	f7fe f9de 	bl	800951e <vListInsert>
 800b162:	e012      	b.n	800b18a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d206      	bcs.n	800b17a <prvInsertTimerInActiveList+0x62>
 800b16c:	68ba      	ldr	r2, [r7, #8]
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	429a      	cmp	r2, r3
 800b172:	d302      	bcc.n	800b17a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b174:	2301      	movs	r3, #1
 800b176:	617b      	str	r3, [r7, #20]
 800b178:	e007      	b.n	800b18a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b17a:	4b07      	ldr	r3, [pc, #28]	; (800b198 <prvInsertTimerInActiveList+0x80>)
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	3304      	adds	r3, #4
 800b182:	4619      	mov	r1, r3
 800b184:	4610      	mov	r0, r2
 800b186:	f7fe f9ca 	bl	800951e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b18a:	697b      	ldr	r3, [r7, #20]
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3718      	adds	r7, #24
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	20001730 	.word	0x20001730
 800b198:	2000172c 	.word	0x2000172c

0800b19c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b08e      	sub	sp, #56	; 0x38
 800b1a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1a2:	e0ca      	b.n	800b33a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	da18      	bge.n	800b1dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b1aa:	1d3b      	adds	r3, r7, #4
 800b1ac:	3304      	adds	r3, #4
 800b1ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d10a      	bne.n	800b1cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ba:	f383 8811 	msr	BASEPRI, r3
 800b1be:	f3bf 8f6f 	isb	sy
 800b1c2:	f3bf 8f4f 	dsb	sy
 800b1c6:	61fb      	str	r3, [r7, #28]
}
 800b1c8:	bf00      	nop
 800b1ca:	e7fe      	b.n	800b1ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1d2:	6850      	ldr	r0, [r2, #4]
 800b1d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1d6:	6892      	ldr	r2, [r2, #8]
 800b1d8:	4611      	mov	r1, r2
 800b1da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f2c0 80aa 	blt.w	800b338 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ea:	695b      	ldr	r3, [r3, #20]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d004      	beq.n	800b1fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f2:	3304      	adds	r3, #4
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7fe f9cb 	bl	8009590 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1fa:	463b      	mov	r3, r7
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7ff ff6b 	bl	800b0d8 <prvSampleTimeNow>
 800b202:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2b09      	cmp	r3, #9
 800b208:	f200 8097 	bhi.w	800b33a <prvProcessReceivedCommands+0x19e>
 800b20c:	a201      	add	r2, pc, #4	; (adr r2, 800b214 <prvProcessReceivedCommands+0x78>)
 800b20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b212:	bf00      	nop
 800b214:	0800b23d 	.word	0x0800b23d
 800b218:	0800b23d 	.word	0x0800b23d
 800b21c:	0800b23d 	.word	0x0800b23d
 800b220:	0800b2b1 	.word	0x0800b2b1
 800b224:	0800b2c5 	.word	0x0800b2c5
 800b228:	0800b30f 	.word	0x0800b30f
 800b22c:	0800b23d 	.word	0x0800b23d
 800b230:	0800b23d 	.word	0x0800b23d
 800b234:	0800b2b1 	.word	0x0800b2b1
 800b238:	0800b2c5 	.word	0x0800b2c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b242:	f043 0301 	orr.w	r3, r3, #1
 800b246:	b2da      	uxtb	r2, r3
 800b248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b24e:	68ba      	ldr	r2, [r7, #8]
 800b250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b252:	699b      	ldr	r3, [r3, #24]
 800b254:	18d1      	adds	r1, r2, r3
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b25a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b25c:	f7ff ff5c 	bl	800b118 <prvInsertTimerInActiveList>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d069      	beq.n	800b33a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b268:	6a1b      	ldr	r3, [r3, #32]
 800b26a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b26c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b274:	f003 0304 	and.w	r3, r3, #4
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d05e      	beq.n	800b33a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b27c:	68ba      	ldr	r2, [r7, #8]
 800b27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b280:	699b      	ldr	r3, [r3, #24]
 800b282:	441a      	add	r2, r3
 800b284:	2300      	movs	r3, #0
 800b286:	9300      	str	r3, [sp, #0]
 800b288:	2300      	movs	r3, #0
 800b28a:	2100      	movs	r1, #0
 800b28c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b28e:	f7ff fe05 	bl	800ae9c <xTimerGenericCommand>
 800b292:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b294:	6a3b      	ldr	r3, [r7, #32]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d14f      	bne.n	800b33a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29e:	f383 8811 	msr	BASEPRI, r3
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	61bb      	str	r3, [r7, #24]
}
 800b2ac:	bf00      	nop
 800b2ae:	e7fe      	b.n	800b2ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2b6:	f023 0301 	bic.w	r3, r3, #1
 800b2ba:	b2da      	uxtb	r2, r3
 800b2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b2c2:	e03a      	b.n	800b33a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2ca:	f043 0301 	orr.w	r3, r3, #1
 800b2ce:	b2da      	uxtb	r2, r3
 800b2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b2d6:	68ba      	ldr	r2, [r7, #8]
 800b2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2de:	699b      	ldr	r3, [r3, #24]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d10a      	bne.n	800b2fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e8:	f383 8811 	msr	BASEPRI, r3
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	f3bf 8f4f 	dsb	sy
 800b2f4:	617b      	str	r3, [r7, #20]
}
 800b2f6:	bf00      	nop
 800b2f8:	e7fe      	b.n	800b2f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fc:	699a      	ldr	r2, [r3, #24]
 800b2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b300:	18d1      	adds	r1, r2, r3
 800b302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b308:	f7ff ff06 	bl	800b118 <prvInsertTimerInActiveList>
					break;
 800b30c:	e015      	b.n	800b33a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b310:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b314:	f003 0302 	and.w	r3, r3, #2
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d103      	bne.n	800b324 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b31c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b31e:	f000 fbdf 	bl	800bae0 <vPortFree>
 800b322:	e00a      	b.n	800b33a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b326:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b32a:	f023 0301 	bic.w	r3, r3, #1
 800b32e:	b2da      	uxtb	r2, r3
 800b330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b336:	e000      	b.n	800b33a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b338:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b33a:	4b08      	ldr	r3, [pc, #32]	; (800b35c <prvProcessReceivedCommands+0x1c0>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	1d39      	adds	r1, r7, #4
 800b340:	2200      	movs	r2, #0
 800b342:	4618      	mov	r0, r3
 800b344:	f7fe fbec 	bl	8009b20 <xQueueReceive>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f47f af2a 	bne.w	800b1a4 <prvProcessReceivedCommands+0x8>
	}
}
 800b350:	bf00      	nop
 800b352:	bf00      	nop
 800b354:	3730      	adds	r7, #48	; 0x30
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	20001734 	.word	0x20001734

0800b360 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b088      	sub	sp, #32
 800b364:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b366:	e048      	b.n	800b3fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b368:	4b2d      	ldr	r3, [pc, #180]	; (800b420 <prvSwitchTimerLists+0xc0>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68db      	ldr	r3, [r3, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b372:	4b2b      	ldr	r3, [pc, #172]	; (800b420 <prvSwitchTimerLists+0xc0>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	3304      	adds	r3, #4
 800b380:	4618      	mov	r0, r3
 800b382:	f7fe f905 	bl	8009590 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6a1b      	ldr	r3, [r3, #32]
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b394:	f003 0304 	and.w	r3, r3, #4
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d02e      	beq.n	800b3fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	699b      	ldr	r3, [r3, #24]
 800b3a0:	693a      	ldr	r2, [r7, #16]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b3a6:	68ba      	ldr	r2, [r7, #8]
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d90e      	bls.n	800b3cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	68fa      	ldr	r2, [r7, #12]
 800b3b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b3ba:	4b19      	ldr	r3, [pc, #100]	; (800b420 <prvSwitchTimerLists+0xc0>)
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	3304      	adds	r3, #4
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	f7fe f8aa 	bl	800951e <vListInsert>
 800b3ca:	e016      	b.n	800b3fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	693a      	ldr	r2, [r7, #16]
 800b3d4:	2100      	movs	r1, #0
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f7ff fd60 	bl	800ae9c <xTimerGenericCommand>
 800b3dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d10a      	bne.n	800b3fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e8:	f383 8811 	msr	BASEPRI, r3
 800b3ec:	f3bf 8f6f 	isb	sy
 800b3f0:	f3bf 8f4f 	dsb	sy
 800b3f4:	603b      	str	r3, [r7, #0]
}
 800b3f6:	bf00      	nop
 800b3f8:	e7fe      	b.n	800b3f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3fa:	4b09      	ldr	r3, [pc, #36]	; (800b420 <prvSwitchTimerLists+0xc0>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d1b1      	bne.n	800b368 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b404:	4b06      	ldr	r3, [pc, #24]	; (800b420 <prvSwitchTimerLists+0xc0>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b40a:	4b06      	ldr	r3, [pc, #24]	; (800b424 <prvSwitchTimerLists+0xc4>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a04      	ldr	r2, [pc, #16]	; (800b420 <prvSwitchTimerLists+0xc0>)
 800b410:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b412:	4a04      	ldr	r2, [pc, #16]	; (800b424 <prvSwitchTimerLists+0xc4>)
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	6013      	str	r3, [r2, #0]
}
 800b418:	bf00      	nop
 800b41a:	3718      	adds	r7, #24
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	2000172c 	.word	0x2000172c
 800b424:	20001730 	.word	0x20001730

0800b428 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b42e:	f000 f969 	bl	800b704 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b432:	4b15      	ldr	r3, [pc, #84]	; (800b488 <prvCheckForValidListAndQueue+0x60>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d120      	bne.n	800b47c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b43a:	4814      	ldr	r0, [pc, #80]	; (800b48c <prvCheckForValidListAndQueue+0x64>)
 800b43c:	f7fe f81e 	bl	800947c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b440:	4813      	ldr	r0, [pc, #76]	; (800b490 <prvCheckForValidListAndQueue+0x68>)
 800b442:	f7fe f81b 	bl	800947c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b446:	4b13      	ldr	r3, [pc, #76]	; (800b494 <prvCheckForValidListAndQueue+0x6c>)
 800b448:	4a10      	ldr	r2, [pc, #64]	; (800b48c <prvCheckForValidListAndQueue+0x64>)
 800b44a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b44c:	4b12      	ldr	r3, [pc, #72]	; (800b498 <prvCheckForValidListAndQueue+0x70>)
 800b44e:	4a10      	ldr	r2, [pc, #64]	; (800b490 <prvCheckForValidListAndQueue+0x68>)
 800b450:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b452:	2300      	movs	r3, #0
 800b454:	9300      	str	r3, [sp, #0]
 800b456:	4b11      	ldr	r3, [pc, #68]	; (800b49c <prvCheckForValidListAndQueue+0x74>)
 800b458:	4a11      	ldr	r2, [pc, #68]	; (800b4a0 <prvCheckForValidListAndQueue+0x78>)
 800b45a:	2110      	movs	r1, #16
 800b45c:	200a      	movs	r0, #10
 800b45e:	f7fe f929 	bl	80096b4 <xQueueGenericCreateStatic>
 800b462:	4603      	mov	r3, r0
 800b464:	4a08      	ldr	r2, [pc, #32]	; (800b488 <prvCheckForValidListAndQueue+0x60>)
 800b466:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b468:	4b07      	ldr	r3, [pc, #28]	; (800b488 <prvCheckForValidListAndQueue+0x60>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d005      	beq.n	800b47c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b470:	4b05      	ldr	r3, [pc, #20]	; (800b488 <prvCheckForValidListAndQueue+0x60>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	490b      	ldr	r1, [pc, #44]	; (800b4a4 <prvCheckForValidListAndQueue+0x7c>)
 800b476:	4618      	mov	r0, r3
 800b478:	f7fe fd42 	bl	8009f00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b47c:	f000 f972 	bl	800b764 <vPortExitCritical>
}
 800b480:	bf00      	nop
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	20001734 	.word	0x20001734
 800b48c:	20001704 	.word	0x20001704
 800b490:	20001718 	.word	0x20001718
 800b494:	2000172c 	.word	0x2000172c
 800b498:	20001730 	.word	0x20001730
 800b49c:	200017e0 	.word	0x200017e0
 800b4a0:	20001740 	.word	0x20001740
 800b4a4:	0800d0c8 	.word	0x0800d0c8

0800b4a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b085      	sub	sp, #20
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	3b04      	subs	r3, #4
 800b4b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b4c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	3b04      	subs	r3, #4
 800b4c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	f023 0201 	bic.w	r2, r3, #1
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	3b04      	subs	r3, #4
 800b4d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4d8:	4a0c      	ldr	r2, [pc, #48]	; (800b50c <pxPortInitialiseStack+0x64>)
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	3b14      	subs	r3, #20
 800b4e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	3b04      	subs	r3, #4
 800b4ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f06f 0202 	mvn.w	r2, #2
 800b4f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	3b20      	subs	r3, #32
 800b4fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3714      	adds	r7, #20
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr
 800b50c:	0800b511 	.word	0x0800b511

0800b510 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b510:	b480      	push	{r7}
 800b512:	b085      	sub	sp, #20
 800b514:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b516:	2300      	movs	r3, #0
 800b518:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b51a:	4b12      	ldr	r3, [pc, #72]	; (800b564 <prvTaskExitError+0x54>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b522:	d00a      	beq.n	800b53a <prvTaskExitError+0x2a>
	__asm volatile
 800b524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	60fb      	str	r3, [r7, #12]
}
 800b536:	bf00      	nop
 800b538:	e7fe      	b.n	800b538 <prvTaskExitError+0x28>
	__asm volatile
 800b53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	60bb      	str	r3, [r7, #8]
}
 800b54c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b54e:	bf00      	nop
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d0fc      	beq.n	800b550 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b556:	bf00      	nop
 800b558:	bf00      	nop
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr
 800b564:	200000b8 	.word	0x200000b8
	...

0800b570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b570:	4b07      	ldr	r3, [pc, #28]	; (800b590 <pxCurrentTCBConst2>)
 800b572:	6819      	ldr	r1, [r3, #0]
 800b574:	6808      	ldr	r0, [r1, #0]
 800b576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b57a:	f380 8809 	msr	PSP, r0
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	f04f 0000 	mov.w	r0, #0
 800b586:	f380 8811 	msr	BASEPRI, r0
 800b58a:	4770      	bx	lr
 800b58c:	f3af 8000 	nop.w

0800b590 <pxCurrentTCBConst2>:
 800b590:	20001204 	.word	0x20001204
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b594:	bf00      	nop
 800b596:	bf00      	nop

0800b598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b598:	4808      	ldr	r0, [pc, #32]	; (800b5bc <prvPortStartFirstTask+0x24>)
 800b59a:	6800      	ldr	r0, [r0, #0]
 800b59c:	6800      	ldr	r0, [r0, #0]
 800b59e:	f380 8808 	msr	MSP, r0
 800b5a2:	f04f 0000 	mov.w	r0, #0
 800b5a6:	f380 8814 	msr	CONTROL, r0
 800b5aa:	b662      	cpsie	i
 800b5ac:	b661      	cpsie	f
 800b5ae:	f3bf 8f4f 	dsb	sy
 800b5b2:	f3bf 8f6f 	isb	sy
 800b5b6:	df00      	svc	0
 800b5b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b5ba:	bf00      	nop
 800b5bc:	e000ed08 	.word	0xe000ed08

0800b5c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b5c6:	4b46      	ldr	r3, [pc, #280]	; (800b6e0 <xPortStartScheduler+0x120>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a46      	ldr	r2, [pc, #280]	; (800b6e4 <xPortStartScheduler+0x124>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d10a      	bne.n	800b5e6 <xPortStartScheduler+0x26>
	__asm volatile
 800b5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d4:	f383 8811 	msr	BASEPRI, r3
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	f3bf 8f4f 	dsb	sy
 800b5e0:	613b      	str	r3, [r7, #16]
}
 800b5e2:	bf00      	nop
 800b5e4:	e7fe      	b.n	800b5e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b5e6:	4b3e      	ldr	r3, [pc, #248]	; (800b6e0 <xPortStartScheduler+0x120>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4a3f      	ldr	r2, [pc, #252]	; (800b6e8 <xPortStartScheduler+0x128>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d10a      	bne.n	800b606 <xPortStartScheduler+0x46>
	__asm volatile
 800b5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	60fb      	str	r3, [r7, #12]
}
 800b602:	bf00      	nop
 800b604:	e7fe      	b.n	800b604 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b606:	4b39      	ldr	r3, [pc, #228]	; (800b6ec <xPortStartScheduler+0x12c>)
 800b608:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	22ff      	movs	r2, #255	; 0xff
 800b616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b620:	78fb      	ldrb	r3, [r7, #3]
 800b622:	b2db      	uxtb	r3, r3
 800b624:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b628:	b2da      	uxtb	r2, r3
 800b62a:	4b31      	ldr	r3, [pc, #196]	; (800b6f0 <xPortStartScheduler+0x130>)
 800b62c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b62e:	4b31      	ldr	r3, [pc, #196]	; (800b6f4 <xPortStartScheduler+0x134>)
 800b630:	2207      	movs	r2, #7
 800b632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b634:	e009      	b.n	800b64a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b636:	4b2f      	ldr	r3, [pc, #188]	; (800b6f4 <xPortStartScheduler+0x134>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	3b01      	subs	r3, #1
 800b63c:	4a2d      	ldr	r2, [pc, #180]	; (800b6f4 <xPortStartScheduler+0x134>)
 800b63e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b640:	78fb      	ldrb	r3, [r7, #3]
 800b642:	b2db      	uxtb	r3, r3
 800b644:	005b      	lsls	r3, r3, #1
 800b646:	b2db      	uxtb	r3, r3
 800b648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b64a:	78fb      	ldrb	r3, [r7, #3]
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b652:	2b80      	cmp	r3, #128	; 0x80
 800b654:	d0ef      	beq.n	800b636 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b656:	4b27      	ldr	r3, [pc, #156]	; (800b6f4 <xPortStartScheduler+0x134>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f1c3 0307 	rsb	r3, r3, #7
 800b65e:	2b04      	cmp	r3, #4
 800b660:	d00a      	beq.n	800b678 <xPortStartScheduler+0xb8>
	__asm volatile
 800b662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b666:	f383 8811 	msr	BASEPRI, r3
 800b66a:	f3bf 8f6f 	isb	sy
 800b66e:	f3bf 8f4f 	dsb	sy
 800b672:	60bb      	str	r3, [r7, #8]
}
 800b674:	bf00      	nop
 800b676:	e7fe      	b.n	800b676 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b678:	4b1e      	ldr	r3, [pc, #120]	; (800b6f4 <xPortStartScheduler+0x134>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	021b      	lsls	r3, r3, #8
 800b67e:	4a1d      	ldr	r2, [pc, #116]	; (800b6f4 <xPortStartScheduler+0x134>)
 800b680:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b682:	4b1c      	ldr	r3, [pc, #112]	; (800b6f4 <xPortStartScheduler+0x134>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b68a:	4a1a      	ldr	r2, [pc, #104]	; (800b6f4 <xPortStartScheduler+0x134>)
 800b68c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	b2da      	uxtb	r2, r3
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b696:	4b18      	ldr	r3, [pc, #96]	; (800b6f8 <xPortStartScheduler+0x138>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a17      	ldr	r2, [pc, #92]	; (800b6f8 <xPortStartScheduler+0x138>)
 800b69c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b6a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b6a2:	4b15      	ldr	r3, [pc, #84]	; (800b6f8 <xPortStartScheduler+0x138>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4a14      	ldr	r2, [pc, #80]	; (800b6f8 <xPortStartScheduler+0x138>)
 800b6a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b6ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b6ae:	f000 f8dd 	bl	800b86c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b6b2:	4b12      	ldr	r3, [pc, #72]	; (800b6fc <xPortStartScheduler+0x13c>)
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b6b8:	f000 f8fc 	bl	800b8b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b6bc:	4b10      	ldr	r3, [pc, #64]	; (800b700 <xPortStartScheduler+0x140>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a0f      	ldr	r2, [pc, #60]	; (800b700 <xPortStartScheduler+0x140>)
 800b6c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b6c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b6c8:	f7ff ff66 	bl	800b598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b6cc:	f7ff f848 	bl	800a760 <vTaskSwitchContext>
	prvTaskExitError();
 800b6d0:	f7ff ff1e 	bl	800b510 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3718      	adds	r7, #24
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	e000ed00 	.word	0xe000ed00
 800b6e4:	410fc271 	.word	0x410fc271
 800b6e8:	410fc270 	.word	0x410fc270
 800b6ec:	e000e400 	.word	0xe000e400
 800b6f0:	20001830 	.word	0x20001830
 800b6f4:	20001834 	.word	0x20001834
 800b6f8:	e000ed20 	.word	0xe000ed20
 800b6fc:	200000b8 	.word	0x200000b8
 800b700:	e000ef34 	.word	0xe000ef34

0800b704 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
	__asm volatile
 800b70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70e:	f383 8811 	msr	BASEPRI, r3
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	607b      	str	r3, [r7, #4]
}
 800b71c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b71e:	4b0f      	ldr	r3, [pc, #60]	; (800b75c <vPortEnterCritical+0x58>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	3301      	adds	r3, #1
 800b724:	4a0d      	ldr	r2, [pc, #52]	; (800b75c <vPortEnterCritical+0x58>)
 800b726:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b728:	4b0c      	ldr	r3, [pc, #48]	; (800b75c <vPortEnterCritical+0x58>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d10f      	bne.n	800b750 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b730:	4b0b      	ldr	r3, [pc, #44]	; (800b760 <vPortEnterCritical+0x5c>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	b2db      	uxtb	r3, r3
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00a      	beq.n	800b750 <vPortEnterCritical+0x4c>
	__asm volatile
 800b73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73e:	f383 8811 	msr	BASEPRI, r3
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	f3bf 8f4f 	dsb	sy
 800b74a:	603b      	str	r3, [r7, #0]
}
 800b74c:	bf00      	nop
 800b74e:	e7fe      	b.n	800b74e <vPortEnterCritical+0x4a>
	}
}
 800b750:	bf00      	nop
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr
 800b75c:	200000b8 	.word	0x200000b8
 800b760:	e000ed04 	.word	0xe000ed04

0800b764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b76a:	4b12      	ldr	r3, [pc, #72]	; (800b7b4 <vPortExitCritical+0x50>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10a      	bne.n	800b788 <vPortExitCritical+0x24>
	__asm volatile
 800b772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b776:	f383 8811 	msr	BASEPRI, r3
 800b77a:	f3bf 8f6f 	isb	sy
 800b77e:	f3bf 8f4f 	dsb	sy
 800b782:	607b      	str	r3, [r7, #4]
}
 800b784:	bf00      	nop
 800b786:	e7fe      	b.n	800b786 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b788:	4b0a      	ldr	r3, [pc, #40]	; (800b7b4 <vPortExitCritical+0x50>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	3b01      	subs	r3, #1
 800b78e:	4a09      	ldr	r2, [pc, #36]	; (800b7b4 <vPortExitCritical+0x50>)
 800b790:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b792:	4b08      	ldr	r3, [pc, #32]	; (800b7b4 <vPortExitCritical+0x50>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d105      	bne.n	800b7a6 <vPortExitCritical+0x42>
 800b79a:	2300      	movs	r3, #0
 800b79c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	f383 8811 	msr	BASEPRI, r3
}
 800b7a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b7a6:	bf00      	nop
 800b7a8:	370c      	adds	r7, #12
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop
 800b7b4:	200000b8 	.word	0x200000b8
	...

0800b7c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b7c0:	f3ef 8009 	mrs	r0, PSP
 800b7c4:	f3bf 8f6f 	isb	sy
 800b7c8:	4b15      	ldr	r3, [pc, #84]	; (800b820 <pxCurrentTCBConst>)
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	f01e 0f10 	tst.w	lr, #16
 800b7d0:	bf08      	it	eq
 800b7d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b7d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7da:	6010      	str	r0, [r2, #0]
 800b7dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b7e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b7e4:	f380 8811 	msr	BASEPRI, r0
 800b7e8:	f3bf 8f4f 	dsb	sy
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f7fe ffb6 	bl	800a760 <vTaskSwitchContext>
 800b7f4:	f04f 0000 	mov.w	r0, #0
 800b7f8:	f380 8811 	msr	BASEPRI, r0
 800b7fc:	bc09      	pop	{r0, r3}
 800b7fe:	6819      	ldr	r1, [r3, #0]
 800b800:	6808      	ldr	r0, [r1, #0]
 800b802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b806:	f01e 0f10 	tst.w	lr, #16
 800b80a:	bf08      	it	eq
 800b80c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b810:	f380 8809 	msr	PSP, r0
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	4770      	bx	lr
 800b81a:	bf00      	nop
 800b81c:	f3af 8000 	nop.w

0800b820 <pxCurrentTCBConst>:
 800b820:	20001204 	.word	0x20001204
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b824:	bf00      	nop
 800b826:	bf00      	nop

0800b828 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
	__asm volatile
 800b82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b832:	f383 8811 	msr	BASEPRI, r3
 800b836:	f3bf 8f6f 	isb	sy
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	607b      	str	r3, [r7, #4]
}
 800b840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b842:	f7fe fed3 	bl	800a5ec <xTaskIncrementTick>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d003      	beq.n	800b854 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b84c:	4b06      	ldr	r3, [pc, #24]	; (800b868 <xPortSysTickHandler+0x40>)
 800b84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b852:	601a      	str	r2, [r3, #0]
 800b854:	2300      	movs	r3, #0
 800b856:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	f383 8811 	msr	BASEPRI, r3
}
 800b85e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b860:	bf00      	nop
 800b862:	3708      	adds	r7, #8
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	e000ed04 	.word	0xe000ed04

0800b86c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b86c:	b480      	push	{r7}
 800b86e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b870:	4b0b      	ldr	r3, [pc, #44]	; (800b8a0 <vPortSetupTimerInterrupt+0x34>)
 800b872:	2200      	movs	r2, #0
 800b874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b876:	4b0b      	ldr	r3, [pc, #44]	; (800b8a4 <vPortSetupTimerInterrupt+0x38>)
 800b878:	2200      	movs	r2, #0
 800b87a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b87c:	4b0a      	ldr	r3, [pc, #40]	; (800b8a8 <vPortSetupTimerInterrupt+0x3c>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a0a      	ldr	r2, [pc, #40]	; (800b8ac <vPortSetupTimerInterrupt+0x40>)
 800b882:	fba2 2303 	umull	r2, r3, r2, r3
 800b886:	099b      	lsrs	r3, r3, #6
 800b888:	4a09      	ldr	r2, [pc, #36]	; (800b8b0 <vPortSetupTimerInterrupt+0x44>)
 800b88a:	3b01      	subs	r3, #1
 800b88c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b88e:	4b04      	ldr	r3, [pc, #16]	; (800b8a0 <vPortSetupTimerInterrupt+0x34>)
 800b890:	2207      	movs	r2, #7
 800b892:	601a      	str	r2, [r3, #0]
}
 800b894:	bf00      	nop
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	e000e010 	.word	0xe000e010
 800b8a4:	e000e018 	.word	0xe000e018
 800b8a8:	200000ac 	.word	0x200000ac
 800b8ac:	10624dd3 	.word	0x10624dd3
 800b8b0:	e000e014 	.word	0xe000e014

0800b8b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b8b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b8c4 <vPortEnableVFP+0x10>
 800b8b8:	6801      	ldr	r1, [r0, #0]
 800b8ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b8be:	6001      	str	r1, [r0, #0]
 800b8c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b8c2:	bf00      	nop
 800b8c4:	e000ed88 	.word	0xe000ed88

0800b8c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b8ce:	f3ef 8305 	mrs	r3, IPSR
 800b8d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2b0f      	cmp	r3, #15
 800b8d8:	d914      	bls.n	800b904 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b8da:	4a17      	ldr	r2, [pc, #92]	; (800b938 <vPortValidateInterruptPriority+0x70>)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	4413      	add	r3, r2
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b8e4:	4b15      	ldr	r3, [pc, #84]	; (800b93c <vPortValidateInterruptPriority+0x74>)
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	7afa      	ldrb	r2, [r7, #11]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d20a      	bcs.n	800b904 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	607b      	str	r3, [r7, #4]
}
 800b900:	bf00      	nop
 800b902:	e7fe      	b.n	800b902 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b904:	4b0e      	ldr	r3, [pc, #56]	; (800b940 <vPortValidateInterruptPriority+0x78>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b90c:	4b0d      	ldr	r3, [pc, #52]	; (800b944 <vPortValidateInterruptPriority+0x7c>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	429a      	cmp	r2, r3
 800b912:	d90a      	bls.n	800b92a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b918:	f383 8811 	msr	BASEPRI, r3
 800b91c:	f3bf 8f6f 	isb	sy
 800b920:	f3bf 8f4f 	dsb	sy
 800b924:	603b      	str	r3, [r7, #0]
}
 800b926:	bf00      	nop
 800b928:	e7fe      	b.n	800b928 <vPortValidateInterruptPriority+0x60>
	}
 800b92a:	bf00      	nop
 800b92c:	3714      	adds	r7, #20
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop
 800b938:	e000e3f0 	.word	0xe000e3f0
 800b93c:	20001830 	.word	0x20001830
 800b940:	e000ed0c 	.word	0xe000ed0c
 800b944:	20001834 	.word	0x20001834

0800b948 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b08a      	sub	sp, #40	; 0x28
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b950:	2300      	movs	r3, #0
 800b952:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b954:	f7fe fd8e 	bl	800a474 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b958:	4b5b      	ldr	r3, [pc, #364]	; (800bac8 <pvPortMalloc+0x180>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d101      	bne.n	800b964 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b960:	f000 f920 	bl	800bba4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b964:	4b59      	ldr	r3, [pc, #356]	; (800bacc <pvPortMalloc+0x184>)
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4013      	ands	r3, r2
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f040 8093 	bne.w	800ba98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d01d      	beq.n	800b9b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b978:	2208      	movs	r2, #8
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	4413      	add	r3, r2
 800b97e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f003 0307 	and.w	r3, r3, #7
 800b986:	2b00      	cmp	r3, #0
 800b988:	d014      	beq.n	800b9b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f023 0307 	bic.w	r3, r3, #7
 800b990:	3308      	adds	r3, #8
 800b992:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f003 0307 	and.w	r3, r3, #7
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00a      	beq.n	800b9b4 <pvPortMalloc+0x6c>
	__asm volatile
 800b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a2:	f383 8811 	msr	BASEPRI, r3
 800b9a6:	f3bf 8f6f 	isb	sy
 800b9aa:	f3bf 8f4f 	dsb	sy
 800b9ae:	617b      	str	r3, [r7, #20]
}
 800b9b0:	bf00      	nop
 800b9b2:	e7fe      	b.n	800b9b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d06e      	beq.n	800ba98 <pvPortMalloc+0x150>
 800b9ba:	4b45      	ldr	r3, [pc, #276]	; (800bad0 <pvPortMalloc+0x188>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d869      	bhi.n	800ba98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b9c4:	4b43      	ldr	r3, [pc, #268]	; (800bad4 <pvPortMalloc+0x18c>)
 800b9c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b9c8:	4b42      	ldr	r3, [pc, #264]	; (800bad4 <pvPortMalloc+0x18c>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9ce:	e004      	b.n	800b9da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d903      	bls.n	800b9ec <pvPortMalloc+0xa4>
 800b9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d1f1      	bne.n	800b9d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b9ec:	4b36      	ldr	r3, [pc, #216]	; (800bac8 <pvPortMalloc+0x180>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d050      	beq.n	800ba98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b9f6:	6a3b      	ldr	r3, [r7, #32]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2208      	movs	r2, #8
 800b9fc:	4413      	add	r3, r2
 800b9fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ba00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	6a3b      	ldr	r3, [r7, #32]
 800ba06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ba08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0a:	685a      	ldr	r2, [r3, #4]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	1ad2      	subs	r2, r2, r3
 800ba10:	2308      	movs	r3, #8
 800ba12:	005b      	lsls	r3, r3, #1
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d91f      	bls.n	800ba58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ba18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	f003 0307 	and.w	r3, r3, #7
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00a      	beq.n	800ba40 <pvPortMalloc+0xf8>
	__asm volatile
 800ba2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2e:	f383 8811 	msr	BASEPRI, r3
 800ba32:	f3bf 8f6f 	isb	sy
 800ba36:	f3bf 8f4f 	dsb	sy
 800ba3a:	613b      	str	r3, [r7, #16]
}
 800ba3c:	bf00      	nop
 800ba3e:	e7fe      	b.n	800ba3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba42:	685a      	ldr	r2, [r3, #4]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	1ad2      	subs	r2, r2, r3
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba52:	69b8      	ldr	r0, [r7, #24]
 800ba54:	f000 f908 	bl	800bc68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba58:	4b1d      	ldr	r3, [pc, #116]	; (800bad0 <pvPortMalloc+0x188>)
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	1ad3      	subs	r3, r2, r3
 800ba62:	4a1b      	ldr	r2, [pc, #108]	; (800bad0 <pvPortMalloc+0x188>)
 800ba64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba66:	4b1a      	ldr	r3, [pc, #104]	; (800bad0 <pvPortMalloc+0x188>)
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	4b1b      	ldr	r3, [pc, #108]	; (800bad8 <pvPortMalloc+0x190>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d203      	bcs.n	800ba7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba72:	4b17      	ldr	r3, [pc, #92]	; (800bad0 <pvPortMalloc+0x188>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a18      	ldr	r2, [pc, #96]	; (800bad8 <pvPortMalloc+0x190>)
 800ba78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7c:	685a      	ldr	r2, [r3, #4]
 800ba7e:	4b13      	ldr	r3, [pc, #76]	; (800bacc <pvPortMalloc+0x184>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	431a      	orrs	r2, r3
 800ba84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ba8e:	4b13      	ldr	r3, [pc, #76]	; (800badc <pvPortMalloc+0x194>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	3301      	adds	r3, #1
 800ba94:	4a11      	ldr	r2, [pc, #68]	; (800badc <pvPortMalloc+0x194>)
 800ba96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba98:	f7fe fcfa 	bl	800a490 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba9c:	69fb      	ldr	r3, [r7, #28]
 800ba9e:	f003 0307 	and.w	r3, r3, #7
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00a      	beq.n	800babc <pvPortMalloc+0x174>
	__asm volatile
 800baa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baaa:	f383 8811 	msr	BASEPRI, r3
 800baae:	f3bf 8f6f 	isb	sy
 800bab2:	f3bf 8f4f 	dsb	sy
 800bab6:	60fb      	str	r3, [r7, #12]
}
 800bab8:	bf00      	nop
 800baba:	e7fe      	b.n	800baba <pvPortMalloc+0x172>
	return pvReturn;
 800babc:	69fb      	ldr	r3, [r7, #28]
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3728      	adds	r7, #40	; 0x28
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	20005440 	.word	0x20005440
 800bacc:	20005454 	.word	0x20005454
 800bad0:	20005444 	.word	0x20005444
 800bad4:	20005438 	.word	0x20005438
 800bad8:	20005448 	.word	0x20005448
 800badc:	2000544c 	.word	0x2000544c

0800bae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b086      	sub	sp, #24
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d04d      	beq.n	800bb8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800baf2:	2308      	movs	r3, #8
 800baf4:	425b      	negs	r3, r3
 800baf6:	697a      	ldr	r2, [r7, #20]
 800baf8:	4413      	add	r3, r2
 800bafa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	685a      	ldr	r2, [r3, #4]
 800bb04:	4b24      	ldr	r3, [pc, #144]	; (800bb98 <vPortFree+0xb8>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4013      	ands	r3, r2
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d10a      	bne.n	800bb24 <vPortFree+0x44>
	__asm volatile
 800bb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb12:	f383 8811 	msr	BASEPRI, r3
 800bb16:	f3bf 8f6f 	isb	sy
 800bb1a:	f3bf 8f4f 	dsb	sy
 800bb1e:	60fb      	str	r3, [r7, #12]
}
 800bb20:	bf00      	nop
 800bb22:	e7fe      	b.n	800bb22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d00a      	beq.n	800bb42 <vPortFree+0x62>
	__asm volatile
 800bb2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb30:	f383 8811 	msr	BASEPRI, r3
 800bb34:	f3bf 8f6f 	isb	sy
 800bb38:	f3bf 8f4f 	dsb	sy
 800bb3c:	60bb      	str	r3, [r7, #8]
}
 800bb3e:	bf00      	nop
 800bb40:	e7fe      	b.n	800bb40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	685a      	ldr	r2, [r3, #4]
 800bb46:	4b14      	ldr	r3, [pc, #80]	; (800bb98 <vPortFree+0xb8>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4013      	ands	r3, r2
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d01e      	beq.n	800bb8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d11a      	bne.n	800bb8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	685a      	ldr	r2, [r3, #4]
 800bb5c:	4b0e      	ldr	r3, [pc, #56]	; (800bb98 <vPortFree+0xb8>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	43db      	mvns	r3, r3
 800bb62:	401a      	ands	r2, r3
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb68:	f7fe fc84 	bl	800a474 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	685a      	ldr	r2, [r3, #4]
 800bb70:	4b0a      	ldr	r3, [pc, #40]	; (800bb9c <vPortFree+0xbc>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4413      	add	r3, r2
 800bb76:	4a09      	ldr	r2, [pc, #36]	; (800bb9c <vPortFree+0xbc>)
 800bb78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb7a:	6938      	ldr	r0, [r7, #16]
 800bb7c:	f000 f874 	bl	800bc68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bb80:	4b07      	ldr	r3, [pc, #28]	; (800bba0 <vPortFree+0xc0>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	3301      	adds	r3, #1
 800bb86:	4a06      	ldr	r2, [pc, #24]	; (800bba0 <vPortFree+0xc0>)
 800bb88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bb8a:	f7fe fc81 	bl	800a490 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb8e:	bf00      	nop
 800bb90:	3718      	adds	r7, #24
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	20005454 	.word	0x20005454
 800bb9c:	20005444 	.word	0x20005444
 800bba0:	20005450 	.word	0x20005450

0800bba4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bba4:	b480      	push	{r7}
 800bba6:	b085      	sub	sp, #20
 800bba8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bbaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bbae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bbb0:	4b27      	ldr	r3, [pc, #156]	; (800bc50 <prvHeapInit+0xac>)
 800bbb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f003 0307 	and.w	r3, r3, #7
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d00c      	beq.n	800bbd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	3307      	adds	r3, #7
 800bbc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f023 0307 	bic.w	r3, r3, #7
 800bbca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bbcc:	68ba      	ldr	r2, [r7, #8]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	1ad3      	subs	r3, r2, r3
 800bbd2:	4a1f      	ldr	r2, [pc, #124]	; (800bc50 <prvHeapInit+0xac>)
 800bbd4:	4413      	add	r3, r2
 800bbd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bbdc:	4a1d      	ldr	r2, [pc, #116]	; (800bc54 <prvHeapInit+0xb0>)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bbe2:	4b1c      	ldr	r3, [pc, #112]	; (800bc54 <prvHeapInit+0xb0>)
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	68ba      	ldr	r2, [r7, #8]
 800bbec:	4413      	add	r3, r2
 800bbee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bbf0:	2208      	movs	r2, #8
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	1a9b      	subs	r3, r3, r2
 800bbf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f023 0307 	bic.w	r3, r3, #7
 800bbfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	4a15      	ldr	r2, [pc, #84]	; (800bc58 <prvHeapInit+0xb4>)
 800bc04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bc06:	4b14      	ldr	r3, [pc, #80]	; (800bc58 <prvHeapInit+0xb4>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bc0e:	4b12      	ldr	r3, [pc, #72]	; (800bc58 <prvHeapInit+0xb4>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	2200      	movs	r2, #0
 800bc14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	1ad2      	subs	r2, r2, r3
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc24:	4b0c      	ldr	r3, [pc, #48]	; (800bc58 <prvHeapInit+0xb4>)
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	4a0a      	ldr	r2, [pc, #40]	; (800bc5c <prvHeapInit+0xb8>)
 800bc32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	4a09      	ldr	r2, [pc, #36]	; (800bc60 <prvHeapInit+0xbc>)
 800bc3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc3c:	4b09      	ldr	r3, [pc, #36]	; (800bc64 <prvHeapInit+0xc0>)
 800bc3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc42:	601a      	str	r2, [r3, #0]
}
 800bc44:	bf00      	nop
 800bc46:	3714      	adds	r7, #20
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr
 800bc50:	20001838 	.word	0x20001838
 800bc54:	20005438 	.word	0x20005438
 800bc58:	20005440 	.word	0x20005440
 800bc5c:	20005448 	.word	0x20005448
 800bc60:	20005444 	.word	0x20005444
 800bc64:	20005454 	.word	0x20005454

0800bc68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b085      	sub	sp, #20
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc70:	4b28      	ldr	r3, [pc, #160]	; (800bd14 <prvInsertBlockIntoFreeList+0xac>)
 800bc72:	60fb      	str	r3, [r7, #12]
 800bc74:	e002      	b.n	800bc7c <prvInsertBlockIntoFreeList+0x14>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	60fb      	str	r3, [r7, #12]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d8f7      	bhi.n	800bc76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	68ba      	ldr	r2, [r7, #8]
 800bc90:	4413      	add	r3, r2
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d108      	bne.n	800bcaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	685a      	ldr	r2, [r3, #4]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	441a      	add	r2, r3
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	68ba      	ldr	r2, [r7, #8]
 800bcb4:	441a      	add	r2, r3
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d118      	bne.n	800bcf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	4b15      	ldr	r3, [pc, #84]	; (800bd18 <prvInsertBlockIntoFreeList+0xb0>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d00d      	beq.n	800bce6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	685a      	ldr	r2, [r3, #4]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	441a      	add	r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	601a      	str	r2, [r3, #0]
 800bce4:	e008      	b.n	800bcf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bce6:	4b0c      	ldr	r3, [pc, #48]	; (800bd18 <prvInsertBlockIntoFreeList+0xb0>)
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	601a      	str	r2, [r3, #0]
 800bcee:	e003      	b.n	800bcf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681a      	ldr	r2, [r3, #0]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bcf8:	68fa      	ldr	r2, [r7, #12]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d002      	beq.n	800bd06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd06:	bf00      	nop
 800bd08:	3714      	adds	r7, #20
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop
 800bd14:	20005438 	.word	0x20005438
 800bd18:	20005440 	.word	0x20005440

0800bd1c <__errno>:
 800bd1c:	4b01      	ldr	r3, [pc, #4]	; (800bd24 <__errno+0x8>)
 800bd1e:	6818      	ldr	r0, [r3, #0]
 800bd20:	4770      	bx	lr
 800bd22:	bf00      	nop
 800bd24:	200000bc 	.word	0x200000bc

0800bd28 <__libc_init_array>:
 800bd28:	b570      	push	{r4, r5, r6, lr}
 800bd2a:	4d0d      	ldr	r5, [pc, #52]	; (800bd60 <__libc_init_array+0x38>)
 800bd2c:	4c0d      	ldr	r4, [pc, #52]	; (800bd64 <__libc_init_array+0x3c>)
 800bd2e:	1b64      	subs	r4, r4, r5
 800bd30:	10a4      	asrs	r4, r4, #2
 800bd32:	2600      	movs	r6, #0
 800bd34:	42a6      	cmp	r6, r4
 800bd36:	d109      	bne.n	800bd4c <__libc_init_array+0x24>
 800bd38:	4d0b      	ldr	r5, [pc, #44]	; (800bd68 <__libc_init_array+0x40>)
 800bd3a:	4c0c      	ldr	r4, [pc, #48]	; (800bd6c <__libc_init_array+0x44>)
 800bd3c:	f001 f9aa 	bl	800d094 <_init>
 800bd40:	1b64      	subs	r4, r4, r5
 800bd42:	10a4      	asrs	r4, r4, #2
 800bd44:	2600      	movs	r6, #0
 800bd46:	42a6      	cmp	r6, r4
 800bd48:	d105      	bne.n	800bd56 <__libc_init_array+0x2e>
 800bd4a:	bd70      	pop	{r4, r5, r6, pc}
 800bd4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd50:	4798      	blx	r3
 800bd52:	3601      	adds	r6, #1
 800bd54:	e7ee      	b.n	800bd34 <__libc_init_array+0xc>
 800bd56:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd5a:	4798      	blx	r3
 800bd5c:	3601      	adds	r6, #1
 800bd5e:	e7f2      	b.n	800bd46 <__libc_init_array+0x1e>
 800bd60:	0800d8fc 	.word	0x0800d8fc
 800bd64:	0800d8fc 	.word	0x0800d8fc
 800bd68:	0800d8fc 	.word	0x0800d8fc
 800bd6c:	0800d900 	.word	0x0800d900

0800bd70 <__retarget_lock_acquire_recursive>:
 800bd70:	4770      	bx	lr

0800bd72 <__retarget_lock_release_recursive>:
 800bd72:	4770      	bx	lr

0800bd74 <memcpy>:
 800bd74:	440a      	add	r2, r1
 800bd76:	4291      	cmp	r1, r2
 800bd78:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd7c:	d100      	bne.n	800bd80 <memcpy+0xc>
 800bd7e:	4770      	bx	lr
 800bd80:	b510      	push	{r4, lr}
 800bd82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd8a:	4291      	cmp	r1, r2
 800bd8c:	d1f9      	bne.n	800bd82 <memcpy+0xe>
 800bd8e:	bd10      	pop	{r4, pc}

0800bd90 <memset>:
 800bd90:	4402      	add	r2, r0
 800bd92:	4603      	mov	r3, r0
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d100      	bne.n	800bd9a <memset+0xa>
 800bd98:	4770      	bx	lr
 800bd9a:	f803 1b01 	strb.w	r1, [r3], #1
 800bd9e:	e7f9      	b.n	800bd94 <memset+0x4>

0800bda0 <cleanup_glue>:
 800bda0:	b538      	push	{r3, r4, r5, lr}
 800bda2:	460c      	mov	r4, r1
 800bda4:	6809      	ldr	r1, [r1, #0]
 800bda6:	4605      	mov	r5, r0
 800bda8:	b109      	cbz	r1, 800bdae <cleanup_glue+0xe>
 800bdaa:	f7ff fff9 	bl	800bda0 <cleanup_glue>
 800bdae:	4621      	mov	r1, r4
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdb6:	f000 b869 	b.w	800be8c <_free_r>
	...

0800bdbc <_reclaim_reent>:
 800bdbc:	4b2c      	ldr	r3, [pc, #176]	; (800be70 <_reclaim_reent+0xb4>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4283      	cmp	r3, r0
 800bdc2:	b570      	push	{r4, r5, r6, lr}
 800bdc4:	4604      	mov	r4, r0
 800bdc6:	d051      	beq.n	800be6c <_reclaim_reent+0xb0>
 800bdc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bdca:	b143      	cbz	r3, 800bdde <_reclaim_reent+0x22>
 800bdcc:	68db      	ldr	r3, [r3, #12]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d14a      	bne.n	800be68 <_reclaim_reent+0xac>
 800bdd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdd4:	6819      	ldr	r1, [r3, #0]
 800bdd6:	b111      	cbz	r1, 800bdde <_reclaim_reent+0x22>
 800bdd8:	4620      	mov	r0, r4
 800bdda:	f000 f857 	bl	800be8c <_free_r>
 800bdde:	6961      	ldr	r1, [r4, #20]
 800bde0:	b111      	cbz	r1, 800bde8 <_reclaim_reent+0x2c>
 800bde2:	4620      	mov	r0, r4
 800bde4:	f000 f852 	bl	800be8c <_free_r>
 800bde8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bdea:	b111      	cbz	r1, 800bdf2 <_reclaim_reent+0x36>
 800bdec:	4620      	mov	r0, r4
 800bdee:	f000 f84d 	bl	800be8c <_free_r>
 800bdf2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bdf4:	b111      	cbz	r1, 800bdfc <_reclaim_reent+0x40>
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	f000 f848 	bl	800be8c <_free_r>
 800bdfc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bdfe:	b111      	cbz	r1, 800be06 <_reclaim_reent+0x4a>
 800be00:	4620      	mov	r0, r4
 800be02:	f000 f843 	bl	800be8c <_free_r>
 800be06:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800be08:	b111      	cbz	r1, 800be10 <_reclaim_reent+0x54>
 800be0a:	4620      	mov	r0, r4
 800be0c:	f000 f83e 	bl	800be8c <_free_r>
 800be10:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800be12:	b111      	cbz	r1, 800be1a <_reclaim_reent+0x5e>
 800be14:	4620      	mov	r0, r4
 800be16:	f000 f839 	bl	800be8c <_free_r>
 800be1a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800be1c:	b111      	cbz	r1, 800be24 <_reclaim_reent+0x68>
 800be1e:	4620      	mov	r0, r4
 800be20:	f000 f834 	bl	800be8c <_free_r>
 800be24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be26:	b111      	cbz	r1, 800be2e <_reclaim_reent+0x72>
 800be28:	4620      	mov	r0, r4
 800be2a:	f000 f82f 	bl	800be8c <_free_r>
 800be2e:	69a3      	ldr	r3, [r4, #24]
 800be30:	b1e3      	cbz	r3, 800be6c <_reclaim_reent+0xb0>
 800be32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800be34:	4620      	mov	r0, r4
 800be36:	4798      	blx	r3
 800be38:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800be3a:	b1b9      	cbz	r1, 800be6c <_reclaim_reent+0xb0>
 800be3c:	4620      	mov	r0, r4
 800be3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be42:	f7ff bfad 	b.w	800bda0 <cleanup_glue>
 800be46:	5949      	ldr	r1, [r1, r5]
 800be48:	b941      	cbnz	r1, 800be5c <_reclaim_reent+0xa0>
 800be4a:	3504      	adds	r5, #4
 800be4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be4e:	2d80      	cmp	r5, #128	; 0x80
 800be50:	68d9      	ldr	r1, [r3, #12]
 800be52:	d1f8      	bne.n	800be46 <_reclaim_reent+0x8a>
 800be54:	4620      	mov	r0, r4
 800be56:	f000 f819 	bl	800be8c <_free_r>
 800be5a:	e7ba      	b.n	800bdd2 <_reclaim_reent+0x16>
 800be5c:	680e      	ldr	r6, [r1, #0]
 800be5e:	4620      	mov	r0, r4
 800be60:	f000 f814 	bl	800be8c <_free_r>
 800be64:	4631      	mov	r1, r6
 800be66:	e7ef      	b.n	800be48 <_reclaim_reent+0x8c>
 800be68:	2500      	movs	r5, #0
 800be6a:	e7ef      	b.n	800be4c <_reclaim_reent+0x90>
 800be6c:	bd70      	pop	{r4, r5, r6, pc}
 800be6e:	bf00      	nop
 800be70:	200000bc 	.word	0x200000bc

0800be74 <__malloc_lock>:
 800be74:	4801      	ldr	r0, [pc, #4]	; (800be7c <__malloc_lock+0x8>)
 800be76:	f7ff bf7b 	b.w	800bd70 <__retarget_lock_acquire_recursive>
 800be7a:	bf00      	nop
 800be7c:	20005458 	.word	0x20005458

0800be80 <__malloc_unlock>:
 800be80:	4801      	ldr	r0, [pc, #4]	; (800be88 <__malloc_unlock+0x8>)
 800be82:	f7ff bf76 	b.w	800bd72 <__retarget_lock_release_recursive>
 800be86:	bf00      	nop
 800be88:	20005458 	.word	0x20005458

0800be8c <_free_r>:
 800be8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be8e:	2900      	cmp	r1, #0
 800be90:	d044      	beq.n	800bf1c <_free_r+0x90>
 800be92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be96:	9001      	str	r0, [sp, #4]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	f1a1 0404 	sub.w	r4, r1, #4
 800be9e:	bfb8      	it	lt
 800bea0:	18e4      	addlt	r4, r4, r3
 800bea2:	f7ff ffe7 	bl	800be74 <__malloc_lock>
 800bea6:	4a1e      	ldr	r2, [pc, #120]	; (800bf20 <_free_r+0x94>)
 800bea8:	9801      	ldr	r0, [sp, #4]
 800beaa:	6813      	ldr	r3, [r2, #0]
 800beac:	b933      	cbnz	r3, 800bebc <_free_r+0x30>
 800beae:	6063      	str	r3, [r4, #4]
 800beb0:	6014      	str	r4, [r2, #0]
 800beb2:	b003      	add	sp, #12
 800beb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800beb8:	f7ff bfe2 	b.w	800be80 <__malloc_unlock>
 800bebc:	42a3      	cmp	r3, r4
 800bebe:	d908      	bls.n	800bed2 <_free_r+0x46>
 800bec0:	6825      	ldr	r5, [r4, #0]
 800bec2:	1961      	adds	r1, r4, r5
 800bec4:	428b      	cmp	r3, r1
 800bec6:	bf01      	itttt	eq
 800bec8:	6819      	ldreq	r1, [r3, #0]
 800beca:	685b      	ldreq	r3, [r3, #4]
 800becc:	1949      	addeq	r1, r1, r5
 800bece:	6021      	streq	r1, [r4, #0]
 800bed0:	e7ed      	b.n	800beae <_free_r+0x22>
 800bed2:	461a      	mov	r2, r3
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	b10b      	cbz	r3, 800bedc <_free_r+0x50>
 800bed8:	42a3      	cmp	r3, r4
 800beda:	d9fa      	bls.n	800bed2 <_free_r+0x46>
 800bedc:	6811      	ldr	r1, [r2, #0]
 800bede:	1855      	adds	r5, r2, r1
 800bee0:	42a5      	cmp	r5, r4
 800bee2:	d10b      	bne.n	800befc <_free_r+0x70>
 800bee4:	6824      	ldr	r4, [r4, #0]
 800bee6:	4421      	add	r1, r4
 800bee8:	1854      	adds	r4, r2, r1
 800beea:	42a3      	cmp	r3, r4
 800beec:	6011      	str	r1, [r2, #0]
 800beee:	d1e0      	bne.n	800beb2 <_free_r+0x26>
 800bef0:	681c      	ldr	r4, [r3, #0]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	6053      	str	r3, [r2, #4]
 800bef6:	4421      	add	r1, r4
 800bef8:	6011      	str	r1, [r2, #0]
 800befa:	e7da      	b.n	800beb2 <_free_r+0x26>
 800befc:	d902      	bls.n	800bf04 <_free_r+0x78>
 800befe:	230c      	movs	r3, #12
 800bf00:	6003      	str	r3, [r0, #0]
 800bf02:	e7d6      	b.n	800beb2 <_free_r+0x26>
 800bf04:	6825      	ldr	r5, [r4, #0]
 800bf06:	1961      	adds	r1, r4, r5
 800bf08:	428b      	cmp	r3, r1
 800bf0a:	bf04      	itt	eq
 800bf0c:	6819      	ldreq	r1, [r3, #0]
 800bf0e:	685b      	ldreq	r3, [r3, #4]
 800bf10:	6063      	str	r3, [r4, #4]
 800bf12:	bf04      	itt	eq
 800bf14:	1949      	addeq	r1, r1, r5
 800bf16:	6021      	streq	r1, [r4, #0]
 800bf18:	6054      	str	r4, [r2, #4]
 800bf1a:	e7ca      	b.n	800beb2 <_free_r+0x26>
 800bf1c:	b003      	add	sp, #12
 800bf1e:	bd30      	pop	{r4, r5, pc}
 800bf20:	2000545c 	.word	0x2000545c

0800bf24 <cosf>:
 800bf24:	ee10 3a10 	vmov	r3, s0
 800bf28:	b507      	push	{r0, r1, r2, lr}
 800bf2a:	4a1e      	ldr	r2, [pc, #120]	; (800bfa4 <cosf+0x80>)
 800bf2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf30:	4293      	cmp	r3, r2
 800bf32:	dc06      	bgt.n	800bf42 <cosf+0x1e>
 800bf34:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800bfa8 <cosf+0x84>
 800bf38:	b003      	add	sp, #12
 800bf3a:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf3e:	f000 bbfb 	b.w	800c738 <__kernel_cosf>
 800bf42:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bf46:	db04      	blt.n	800bf52 <cosf+0x2e>
 800bf48:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bf4c:	b003      	add	sp, #12
 800bf4e:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf52:	4668      	mov	r0, sp
 800bf54:	f000 fab0 	bl	800c4b8 <__ieee754_rem_pio2f>
 800bf58:	f000 0003 	and.w	r0, r0, #3
 800bf5c:	2801      	cmp	r0, #1
 800bf5e:	d009      	beq.n	800bf74 <cosf+0x50>
 800bf60:	2802      	cmp	r0, #2
 800bf62:	d010      	beq.n	800bf86 <cosf+0x62>
 800bf64:	b9b0      	cbnz	r0, 800bf94 <cosf+0x70>
 800bf66:	eddd 0a01 	vldr	s1, [sp, #4]
 800bf6a:	ed9d 0a00 	vldr	s0, [sp]
 800bf6e:	f000 fbe3 	bl	800c738 <__kernel_cosf>
 800bf72:	e7eb      	b.n	800bf4c <cosf+0x28>
 800bf74:	eddd 0a01 	vldr	s1, [sp, #4]
 800bf78:	ed9d 0a00 	vldr	s0, [sp]
 800bf7c:	f000 feb2 	bl	800cce4 <__kernel_sinf>
 800bf80:	eeb1 0a40 	vneg.f32	s0, s0
 800bf84:	e7e2      	b.n	800bf4c <cosf+0x28>
 800bf86:	eddd 0a01 	vldr	s1, [sp, #4]
 800bf8a:	ed9d 0a00 	vldr	s0, [sp]
 800bf8e:	f000 fbd3 	bl	800c738 <__kernel_cosf>
 800bf92:	e7f5      	b.n	800bf80 <cosf+0x5c>
 800bf94:	eddd 0a01 	vldr	s1, [sp, #4]
 800bf98:	ed9d 0a00 	vldr	s0, [sp]
 800bf9c:	2001      	movs	r0, #1
 800bf9e:	f000 fea1 	bl	800cce4 <__kernel_sinf>
 800bfa2:	e7d3      	b.n	800bf4c <cosf+0x28>
 800bfa4:	3f490fd8 	.word	0x3f490fd8
 800bfa8:	00000000 	.word	0x00000000

0800bfac <sinf>:
 800bfac:	ee10 3a10 	vmov	r3, s0
 800bfb0:	b507      	push	{r0, r1, r2, lr}
 800bfb2:	4a1f      	ldr	r2, [pc, #124]	; (800c030 <sinf+0x84>)
 800bfb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	dc07      	bgt.n	800bfcc <sinf+0x20>
 800bfbc:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800c034 <sinf+0x88>
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	b003      	add	sp, #12
 800bfc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfc8:	f000 be8c 	b.w	800cce4 <__kernel_sinf>
 800bfcc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bfd0:	db04      	blt.n	800bfdc <sinf+0x30>
 800bfd2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bfd6:	b003      	add	sp, #12
 800bfd8:	f85d fb04 	ldr.w	pc, [sp], #4
 800bfdc:	4668      	mov	r0, sp
 800bfde:	f000 fa6b 	bl	800c4b8 <__ieee754_rem_pio2f>
 800bfe2:	f000 0003 	and.w	r0, r0, #3
 800bfe6:	2801      	cmp	r0, #1
 800bfe8:	d00a      	beq.n	800c000 <sinf+0x54>
 800bfea:	2802      	cmp	r0, #2
 800bfec:	d00f      	beq.n	800c00e <sinf+0x62>
 800bfee:	b9c0      	cbnz	r0, 800c022 <sinf+0x76>
 800bff0:	eddd 0a01 	vldr	s1, [sp, #4]
 800bff4:	ed9d 0a00 	vldr	s0, [sp]
 800bff8:	2001      	movs	r0, #1
 800bffa:	f000 fe73 	bl	800cce4 <__kernel_sinf>
 800bffe:	e7ea      	b.n	800bfd6 <sinf+0x2a>
 800c000:	eddd 0a01 	vldr	s1, [sp, #4]
 800c004:	ed9d 0a00 	vldr	s0, [sp]
 800c008:	f000 fb96 	bl	800c738 <__kernel_cosf>
 800c00c:	e7e3      	b.n	800bfd6 <sinf+0x2a>
 800c00e:	eddd 0a01 	vldr	s1, [sp, #4]
 800c012:	ed9d 0a00 	vldr	s0, [sp]
 800c016:	2001      	movs	r0, #1
 800c018:	f000 fe64 	bl	800cce4 <__kernel_sinf>
 800c01c:	eeb1 0a40 	vneg.f32	s0, s0
 800c020:	e7d9      	b.n	800bfd6 <sinf+0x2a>
 800c022:	eddd 0a01 	vldr	s1, [sp, #4]
 800c026:	ed9d 0a00 	vldr	s0, [sp]
 800c02a:	f000 fb85 	bl	800c738 <__kernel_cosf>
 800c02e:	e7f5      	b.n	800c01c <sinf+0x70>
 800c030:	3f490fd8 	.word	0x3f490fd8
 800c034:	00000000 	.word	0x00000000

0800c038 <sqrt>:
 800c038:	b538      	push	{r3, r4, r5, lr}
 800c03a:	ed2d 8b02 	vpush	{d8}
 800c03e:	ec55 4b10 	vmov	r4, r5, d0
 800c042:	f000 f865 	bl	800c110 <__ieee754_sqrt>
 800c046:	4622      	mov	r2, r4
 800c048:	462b      	mov	r3, r5
 800c04a:	4620      	mov	r0, r4
 800c04c:	4629      	mov	r1, r5
 800c04e:	eeb0 8a40 	vmov.f32	s16, s0
 800c052:	eef0 8a60 	vmov.f32	s17, s1
 800c056:	f7f4 fd19 	bl	8000a8c <__aeabi_dcmpun>
 800c05a:	b990      	cbnz	r0, 800c082 <sqrt+0x4a>
 800c05c:	2200      	movs	r2, #0
 800c05e:	2300      	movs	r3, #0
 800c060:	4620      	mov	r0, r4
 800c062:	4629      	mov	r1, r5
 800c064:	f7f4 fcea 	bl	8000a3c <__aeabi_dcmplt>
 800c068:	b158      	cbz	r0, 800c082 <sqrt+0x4a>
 800c06a:	f7ff fe57 	bl	800bd1c <__errno>
 800c06e:	2321      	movs	r3, #33	; 0x21
 800c070:	6003      	str	r3, [r0, #0]
 800c072:	2200      	movs	r2, #0
 800c074:	2300      	movs	r3, #0
 800c076:	4610      	mov	r0, r2
 800c078:	4619      	mov	r1, r3
 800c07a:	f7f4 fb97 	bl	80007ac <__aeabi_ddiv>
 800c07e:	ec41 0b18 	vmov	d8, r0, r1
 800c082:	eeb0 0a48 	vmov.f32	s0, s16
 800c086:	eef0 0a68 	vmov.f32	s1, s17
 800c08a:	ecbd 8b02 	vpop	{d8}
 800c08e:	bd38      	pop	{r3, r4, r5, pc}

0800c090 <atan2f>:
 800c090:	f000 b8f0 	b.w	800c274 <__ieee754_atan2f>

0800c094 <fmodf>:
 800c094:	b508      	push	{r3, lr}
 800c096:	ed2d 8b02 	vpush	{d8}
 800c09a:	eef0 8a40 	vmov.f32	s17, s0
 800c09e:	eeb0 8a60 	vmov.f32	s16, s1
 800c0a2:	f000 f987 	bl	800c3b4 <__ieee754_fmodf>
 800c0a6:	eef4 8a48 	vcmp.f32	s17, s16
 800c0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0ae:	d60c      	bvs.n	800c0ca <fmodf+0x36>
 800c0b0:	eddf 8a07 	vldr	s17, [pc, #28]	; 800c0d0 <fmodf+0x3c>
 800c0b4:	eeb4 8a68 	vcmp.f32	s16, s17
 800c0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0bc:	d105      	bne.n	800c0ca <fmodf+0x36>
 800c0be:	f7ff fe2d 	bl	800bd1c <__errno>
 800c0c2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c0c6:	2321      	movs	r3, #33	; 0x21
 800c0c8:	6003      	str	r3, [r0, #0]
 800c0ca:	ecbd 8b02 	vpop	{d8}
 800c0ce:	bd08      	pop	{r3, pc}
 800c0d0:	00000000 	.word	0x00000000

0800c0d4 <sqrtf>:
 800c0d4:	b508      	push	{r3, lr}
 800c0d6:	ed2d 8b02 	vpush	{d8}
 800c0da:	eeb0 8a40 	vmov.f32	s16, s0
 800c0de:	f000 fb27 	bl	800c730 <__ieee754_sqrtf>
 800c0e2:	eeb4 8a48 	vcmp.f32	s16, s16
 800c0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0ea:	d60c      	bvs.n	800c106 <sqrtf+0x32>
 800c0ec:	eddf 8a07 	vldr	s17, [pc, #28]	; 800c10c <sqrtf+0x38>
 800c0f0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0f8:	d505      	bpl.n	800c106 <sqrtf+0x32>
 800c0fa:	f7ff fe0f 	bl	800bd1c <__errno>
 800c0fe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c102:	2321      	movs	r3, #33	; 0x21
 800c104:	6003      	str	r3, [r0, #0]
 800c106:	ecbd 8b02 	vpop	{d8}
 800c10a:	bd08      	pop	{r3, pc}
 800c10c:	00000000 	.word	0x00000000

0800c110 <__ieee754_sqrt>:
 800c110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c114:	ec55 4b10 	vmov	r4, r5, d0
 800c118:	4e55      	ldr	r6, [pc, #340]	; (800c270 <__ieee754_sqrt+0x160>)
 800c11a:	43ae      	bics	r6, r5
 800c11c:	ee10 0a10 	vmov	r0, s0
 800c120:	ee10 3a10 	vmov	r3, s0
 800c124:	462a      	mov	r2, r5
 800c126:	4629      	mov	r1, r5
 800c128:	d110      	bne.n	800c14c <__ieee754_sqrt+0x3c>
 800c12a:	ee10 2a10 	vmov	r2, s0
 800c12e:	462b      	mov	r3, r5
 800c130:	f7f4 fa12 	bl	8000558 <__aeabi_dmul>
 800c134:	4602      	mov	r2, r0
 800c136:	460b      	mov	r3, r1
 800c138:	4620      	mov	r0, r4
 800c13a:	4629      	mov	r1, r5
 800c13c:	f7f4 f856 	bl	80001ec <__adddf3>
 800c140:	4604      	mov	r4, r0
 800c142:	460d      	mov	r5, r1
 800c144:	ec45 4b10 	vmov	d0, r4, r5
 800c148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c14c:	2d00      	cmp	r5, #0
 800c14e:	dc10      	bgt.n	800c172 <__ieee754_sqrt+0x62>
 800c150:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c154:	4330      	orrs	r0, r6
 800c156:	d0f5      	beq.n	800c144 <__ieee754_sqrt+0x34>
 800c158:	b15d      	cbz	r5, 800c172 <__ieee754_sqrt+0x62>
 800c15a:	ee10 2a10 	vmov	r2, s0
 800c15e:	462b      	mov	r3, r5
 800c160:	ee10 0a10 	vmov	r0, s0
 800c164:	f7f4 f840 	bl	80001e8 <__aeabi_dsub>
 800c168:	4602      	mov	r2, r0
 800c16a:	460b      	mov	r3, r1
 800c16c:	f7f4 fb1e 	bl	80007ac <__aeabi_ddiv>
 800c170:	e7e6      	b.n	800c140 <__ieee754_sqrt+0x30>
 800c172:	1512      	asrs	r2, r2, #20
 800c174:	d074      	beq.n	800c260 <__ieee754_sqrt+0x150>
 800c176:	07d4      	lsls	r4, r2, #31
 800c178:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c17c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c180:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c184:	bf5e      	ittt	pl
 800c186:	0fda      	lsrpl	r2, r3, #31
 800c188:	005b      	lslpl	r3, r3, #1
 800c18a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c18e:	2400      	movs	r4, #0
 800c190:	0fda      	lsrs	r2, r3, #31
 800c192:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c196:	107f      	asrs	r7, r7, #1
 800c198:	005b      	lsls	r3, r3, #1
 800c19a:	2516      	movs	r5, #22
 800c19c:	4620      	mov	r0, r4
 800c19e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c1a2:	1886      	adds	r6, r0, r2
 800c1a4:	428e      	cmp	r6, r1
 800c1a6:	bfde      	ittt	le
 800c1a8:	1b89      	suble	r1, r1, r6
 800c1aa:	18b0      	addle	r0, r6, r2
 800c1ac:	18a4      	addle	r4, r4, r2
 800c1ae:	0049      	lsls	r1, r1, #1
 800c1b0:	3d01      	subs	r5, #1
 800c1b2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c1b6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c1ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c1be:	d1f0      	bne.n	800c1a2 <__ieee754_sqrt+0x92>
 800c1c0:	462a      	mov	r2, r5
 800c1c2:	f04f 0e20 	mov.w	lr, #32
 800c1c6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c1ca:	4281      	cmp	r1, r0
 800c1cc:	eb06 0c05 	add.w	ip, r6, r5
 800c1d0:	dc02      	bgt.n	800c1d8 <__ieee754_sqrt+0xc8>
 800c1d2:	d113      	bne.n	800c1fc <__ieee754_sqrt+0xec>
 800c1d4:	459c      	cmp	ip, r3
 800c1d6:	d811      	bhi.n	800c1fc <__ieee754_sqrt+0xec>
 800c1d8:	f1bc 0f00 	cmp.w	ip, #0
 800c1dc:	eb0c 0506 	add.w	r5, ip, r6
 800c1e0:	da43      	bge.n	800c26a <__ieee754_sqrt+0x15a>
 800c1e2:	2d00      	cmp	r5, #0
 800c1e4:	db41      	blt.n	800c26a <__ieee754_sqrt+0x15a>
 800c1e6:	f100 0801 	add.w	r8, r0, #1
 800c1ea:	1a09      	subs	r1, r1, r0
 800c1ec:	459c      	cmp	ip, r3
 800c1ee:	bf88      	it	hi
 800c1f0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c1f4:	eba3 030c 	sub.w	r3, r3, ip
 800c1f8:	4432      	add	r2, r6
 800c1fa:	4640      	mov	r0, r8
 800c1fc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c200:	f1be 0e01 	subs.w	lr, lr, #1
 800c204:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c208:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c20c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c210:	d1db      	bne.n	800c1ca <__ieee754_sqrt+0xba>
 800c212:	430b      	orrs	r3, r1
 800c214:	d006      	beq.n	800c224 <__ieee754_sqrt+0x114>
 800c216:	1c50      	adds	r0, r2, #1
 800c218:	bf13      	iteet	ne
 800c21a:	3201      	addne	r2, #1
 800c21c:	3401      	addeq	r4, #1
 800c21e:	4672      	moveq	r2, lr
 800c220:	f022 0201 	bicne.w	r2, r2, #1
 800c224:	1063      	asrs	r3, r4, #1
 800c226:	0852      	lsrs	r2, r2, #1
 800c228:	07e1      	lsls	r1, r4, #31
 800c22a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c22e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c232:	bf48      	it	mi
 800c234:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c238:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c23c:	4614      	mov	r4, r2
 800c23e:	e781      	b.n	800c144 <__ieee754_sqrt+0x34>
 800c240:	0ad9      	lsrs	r1, r3, #11
 800c242:	3815      	subs	r0, #21
 800c244:	055b      	lsls	r3, r3, #21
 800c246:	2900      	cmp	r1, #0
 800c248:	d0fa      	beq.n	800c240 <__ieee754_sqrt+0x130>
 800c24a:	02cd      	lsls	r5, r1, #11
 800c24c:	d50a      	bpl.n	800c264 <__ieee754_sqrt+0x154>
 800c24e:	f1c2 0420 	rsb	r4, r2, #32
 800c252:	fa23 f404 	lsr.w	r4, r3, r4
 800c256:	1e55      	subs	r5, r2, #1
 800c258:	4093      	lsls	r3, r2
 800c25a:	4321      	orrs	r1, r4
 800c25c:	1b42      	subs	r2, r0, r5
 800c25e:	e78a      	b.n	800c176 <__ieee754_sqrt+0x66>
 800c260:	4610      	mov	r0, r2
 800c262:	e7f0      	b.n	800c246 <__ieee754_sqrt+0x136>
 800c264:	0049      	lsls	r1, r1, #1
 800c266:	3201      	adds	r2, #1
 800c268:	e7ef      	b.n	800c24a <__ieee754_sqrt+0x13a>
 800c26a:	4680      	mov	r8, r0
 800c26c:	e7bd      	b.n	800c1ea <__ieee754_sqrt+0xda>
 800c26e:	bf00      	nop
 800c270:	7ff00000 	.word	0x7ff00000

0800c274 <__ieee754_atan2f>:
 800c274:	ee10 2a90 	vmov	r2, s1
 800c278:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800c27c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c280:	b510      	push	{r4, lr}
 800c282:	eef0 7a40 	vmov.f32	s15, s0
 800c286:	dc06      	bgt.n	800c296 <__ieee754_atan2f+0x22>
 800c288:	ee10 0a10 	vmov	r0, s0
 800c28c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800c290:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c294:	dd04      	ble.n	800c2a0 <__ieee754_atan2f+0x2c>
 800c296:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c29a:	eeb0 0a67 	vmov.f32	s0, s15
 800c29e:	bd10      	pop	{r4, pc}
 800c2a0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800c2a4:	d103      	bne.n	800c2ae <__ieee754_atan2f+0x3a>
 800c2a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2aa:	f000 bd63 	b.w	800cd74 <atanf>
 800c2ae:	1794      	asrs	r4, r2, #30
 800c2b0:	f004 0402 	and.w	r4, r4, #2
 800c2b4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c2b8:	b943      	cbnz	r3, 800c2cc <__ieee754_atan2f+0x58>
 800c2ba:	2c02      	cmp	r4, #2
 800c2bc:	d05e      	beq.n	800c37c <__ieee754_atan2f+0x108>
 800c2be:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800c390 <__ieee754_atan2f+0x11c>
 800c2c2:	2c03      	cmp	r4, #3
 800c2c4:	bf08      	it	eq
 800c2c6:	eef0 7a47 	vmoveq.f32	s15, s14
 800c2ca:	e7e6      	b.n	800c29a <__ieee754_atan2f+0x26>
 800c2cc:	b941      	cbnz	r1, 800c2e0 <__ieee754_atan2f+0x6c>
 800c2ce:	eddf 7a31 	vldr	s15, [pc, #196]	; 800c394 <__ieee754_atan2f+0x120>
 800c2d2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800c398 <__ieee754_atan2f+0x124>
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	bfb8      	it	lt
 800c2da:	eef0 7a40 	vmovlt.f32	s15, s0
 800c2de:	e7dc      	b.n	800c29a <__ieee754_atan2f+0x26>
 800c2e0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c2e4:	d110      	bne.n	800c308 <__ieee754_atan2f+0x94>
 800c2e6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c2ea:	f104 34ff 	add.w	r4, r4, #4294967295
 800c2ee:	d107      	bne.n	800c300 <__ieee754_atan2f+0x8c>
 800c2f0:	2c02      	cmp	r4, #2
 800c2f2:	d846      	bhi.n	800c382 <__ieee754_atan2f+0x10e>
 800c2f4:	4b29      	ldr	r3, [pc, #164]	; (800c39c <__ieee754_atan2f+0x128>)
 800c2f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c2fa:	edd4 7a00 	vldr	s15, [r4]
 800c2fe:	e7cc      	b.n	800c29a <__ieee754_atan2f+0x26>
 800c300:	2c02      	cmp	r4, #2
 800c302:	d841      	bhi.n	800c388 <__ieee754_atan2f+0x114>
 800c304:	4b26      	ldr	r3, [pc, #152]	; (800c3a0 <__ieee754_atan2f+0x12c>)
 800c306:	e7f6      	b.n	800c2f6 <__ieee754_atan2f+0x82>
 800c308:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c30c:	d0df      	beq.n	800c2ce <__ieee754_atan2f+0x5a>
 800c30e:	1a5b      	subs	r3, r3, r1
 800c310:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800c314:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c318:	da1a      	bge.n	800c350 <__ieee754_atan2f+0xdc>
 800c31a:	2a00      	cmp	r2, #0
 800c31c:	da01      	bge.n	800c322 <__ieee754_atan2f+0xae>
 800c31e:	313c      	adds	r1, #60	; 0x3c
 800c320:	db19      	blt.n	800c356 <__ieee754_atan2f+0xe2>
 800c322:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c326:	f000 fdf9 	bl	800cf1c <fabsf>
 800c32a:	f000 fd23 	bl	800cd74 <atanf>
 800c32e:	eef0 7a40 	vmov.f32	s15, s0
 800c332:	2c01      	cmp	r4, #1
 800c334:	d012      	beq.n	800c35c <__ieee754_atan2f+0xe8>
 800c336:	2c02      	cmp	r4, #2
 800c338:	d017      	beq.n	800c36a <__ieee754_atan2f+0xf6>
 800c33a:	2c00      	cmp	r4, #0
 800c33c:	d0ad      	beq.n	800c29a <__ieee754_atan2f+0x26>
 800c33e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800c3a4 <__ieee754_atan2f+0x130>
 800c342:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c346:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800c3a8 <__ieee754_atan2f+0x134>
 800c34a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c34e:	e7a4      	b.n	800c29a <__ieee754_atan2f+0x26>
 800c350:	eddf 7a10 	vldr	s15, [pc, #64]	; 800c394 <__ieee754_atan2f+0x120>
 800c354:	e7ed      	b.n	800c332 <__ieee754_atan2f+0xbe>
 800c356:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c3ac <__ieee754_atan2f+0x138>
 800c35a:	e7ea      	b.n	800c332 <__ieee754_atan2f+0xbe>
 800c35c:	ee17 3a90 	vmov	r3, s15
 800c360:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c364:	ee07 3a90 	vmov	s15, r3
 800c368:	e797      	b.n	800c29a <__ieee754_atan2f+0x26>
 800c36a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800c3a4 <__ieee754_atan2f+0x130>
 800c36e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c372:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800c3a8 <__ieee754_atan2f+0x134>
 800c376:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c37a:	e78e      	b.n	800c29a <__ieee754_atan2f+0x26>
 800c37c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800c3a8 <__ieee754_atan2f+0x134>
 800c380:	e78b      	b.n	800c29a <__ieee754_atan2f+0x26>
 800c382:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800c3b0 <__ieee754_atan2f+0x13c>
 800c386:	e788      	b.n	800c29a <__ieee754_atan2f+0x26>
 800c388:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c3ac <__ieee754_atan2f+0x138>
 800c38c:	e785      	b.n	800c29a <__ieee754_atan2f+0x26>
 800c38e:	bf00      	nop
 800c390:	c0490fdb 	.word	0xc0490fdb
 800c394:	3fc90fdb 	.word	0x3fc90fdb
 800c398:	bfc90fdb 	.word	0xbfc90fdb
 800c39c:	0800d4e4 	.word	0x0800d4e4
 800c3a0:	0800d4f0 	.word	0x0800d4f0
 800c3a4:	33bbbd2e 	.word	0x33bbbd2e
 800c3a8:	40490fdb 	.word	0x40490fdb
 800c3ac:	00000000 	.word	0x00000000
 800c3b0:	3f490fdb 	.word	0x3f490fdb

0800c3b4 <__ieee754_fmodf>:
 800c3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3b6:	ee10 5a90 	vmov	r5, s1
 800c3ba:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800c3be:	d009      	beq.n	800c3d4 <__ieee754_fmodf+0x20>
 800c3c0:	ee10 2a10 	vmov	r2, s0
 800c3c4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800c3c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c3cc:	da02      	bge.n	800c3d4 <__ieee754_fmodf+0x20>
 800c3ce:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c3d2:	dd04      	ble.n	800c3de <__ieee754_fmodf+0x2a>
 800c3d4:	ee60 0a20 	vmul.f32	s1, s0, s1
 800c3d8:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800c3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3de:	42a3      	cmp	r3, r4
 800c3e0:	dbfc      	blt.n	800c3dc <__ieee754_fmodf+0x28>
 800c3e2:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800c3e6:	d105      	bne.n	800c3f4 <__ieee754_fmodf+0x40>
 800c3e8:	4b32      	ldr	r3, [pc, #200]	; (800c4b4 <__ieee754_fmodf+0x100>)
 800c3ea:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800c3ee:	ed93 0a00 	vldr	s0, [r3]
 800c3f2:	e7f3      	b.n	800c3dc <__ieee754_fmodf+0x28>
 800c3f4:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800c3f8:	d13f      	bne.n	800c47a <__ieee754_fmodf+0xc6>
 800c3fa:	0219      	lsls	r1, r3, #8
 800c3fc:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800c400:	2900      	cmp	r1, #0
 800c402:	dc37      	bgt.n	800c474 <__ieee754_fmodf+0xc0>
 800c404:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800c408:	d13d      	bne.n	800c486 <__ieee754_fmodf+0xd2>
 800c40a:	0227      	lsls	r7, r4, #8
 800c40c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800c410:	2f00      	cmp	r7, #0
 800c412:	da35      	bge.n	800c480 <__ieee754_fmodf+0xcc>
 800c414:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800c418:	bfbb      	ittet	lt
 800c41a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800c41e:	1a12      	sublt	r2, r2, r0
 800c420:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800c424:	4093      	lsllt	r3, r2
 800c426:	bfa8      	it	ge
 800c428:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800c42c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800c430:	bfb5      	itete	lt
 800c432:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800c436:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800c43a:	1a52      	sublt	r2, r2, r1
 800c43c:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 800c440:	bfb8      	it	lt
 800c442:	4094      	lsllt	r4, r2
 800c444:	1a40      	subs	r0, r0, r1
 800c446:	1b1a      	subs	r2, r3, r4
 800c448:	bb00      	cbnz	r0, 800c48c <__ieee754_fmodf+0xd8>
 800c44a:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800c44e:	bf38      	it	cc
 800c450:	4613      	movcc	r3, r2
 800c452:	2b00      	cmp	r3, #0
 800c454:	d0c8      	beq.n	800c3e8 <__ieee754_fmodf+0x34>
 800c456:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c45a:	db1f      	blt.n	800c49c <__ieee754_fmodf+0xe8>
 800c45c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800c460:	db1f      	blt.n	800c4a2 <__ieee754_fmodf+0xee>
 800c462:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800c466:	317f      	adds	r1, #127	; 0x7f
 800c468:	4333      	orrs	r3, r6
 800c46a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800c46e:	ee00 3a10 	vmov	s0, r3
 800c472:	e7b3      	b.n	800c3dc <__ieee754_fmodf+0x28>
 800c474:	3801      	subs	r0, #1
 800c476:	0049      	lsls	r1, r1, #1
 800c478:	e7c2      	b.n	800c400 <__ieee754_fmodf+0x4c>
 800c47a:	15d8      	asrs	r0, r3, #23
 800c47c:	387f      	subs	r0, #127	; 0x7f
 800c47e:	e7c1      	b.n	800c404 <__ieee754_fmodf+0x50>
 800c480:	3901      	subs	r1, #1
 800c482:	007f      	lsls	r7, r7, #1
 800c484:	e7c4      	b.n	800c410 <__ieee754_fmodf+0x5c>
 800c486:	15e1      	asrs	r1, r4, #23
 800c488:	397f      	subs	r1, #127	; 0x7f
 800c48a:	e7c3      	b.n	800c414 <__ieee754_fmodf+0x60>
 800c48c:	2a00      	cmp	r2, #0
 800c48e:	da02      	bge.n	800c496 <__ieee754_fmodf+0xe2>
 800c490:	005b      	lsls	r3, r3, #1
 800c492:	3801      	subs	r0, #1
 800c494:	e7d7      	b.n	800c446 <__ieee754_fmodf+0x92>
 800c496:	d0a7      	beq.n	800c3e8 <__ieee754_fmodf+0x34>
 800c498:	0053      	lsls	r3, r2, #1
 800c49a:	e7fa      	b.n	800c492 <__ieee754_fmodf+0xde>
 800c49c:	005b      	lsls	r3, r3, #1
 800c49e:	3901      	subs	r1, #1
 800c4a0:	e7d9      	b.n	800c456 <__ieee754_fmodf+0xa2>
 800c4a2:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800c4a6:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800c4aa:	3182      	adds	r1, #130	; 0x82
 800c4ac:	410b      	asrs	r3, r1
 800c4ae:	4333      	orrs	r3, r6
 800c4b0:	e7dd      	b.n	800c46e <__ieee754_fmodf+0xba>
 800c4b2:	bf00      	nop
 800c4b4:	0800d4fc 	.word	0x0800d4fc

0800c4b8 <__ieee754_rem_pio2f>:
 800c4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4ba:	ee10 6a10 	vmov	r6, s0
 800c4be:	4b8e      	ldr	r3, [pc, #568]	; (800c6f8 <__ieee754_rem_pio2f+0x240>)
 800c4c0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800c4c4:	429d      	cmp	r5, r3
 800c4c6:	b087      	sub	sp, #28
 800c4c8:	eef0 7a40 	vmov.f32	s15, s0
 800c4cc:	4604      	mov	r4, r0
 800c4ce:	dc05      	bgt.n	800c4dc <__ieee754_rem_pio2f+0x24>
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	ed80 0a00 	vstr	s0, [r0]
 800c4d6:	6043      	str	r3, [r0, #4]
 800c4d8:	2000      	movs	r0, #0
 800c4da:	e01a      	b.n	800c512 <__ieee754_rem_pio2f+0x5a>
 800c4dc:	4b87      	ldr	r3, [pc, #540]	; (800c6fc <__ieee754_rem_pio2f+0x244>)
 800c4de:	429d      	cmp	r5, r3
 800c4e0:	dc46      	bgt.n	800c570 <__ieee754_rem_pio2f+0xb8>
 800c4e2:	2e00      	cmp	r6, #0
 800c4e4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800c700 <__ieee754_rem_pio2f+0x248>
 800c4e8:	4b86      	ldr	r3, [pc, #536]	; (800c704 <__ieee754_rem_pio2f+0x24c>)
 800c4ea:	f025 050f 	bic.w	r5, r5, #15
 800c4ee:	dd1f      	ble.n	800c530 <__ieee754_rem_pio2f+0x78>
 800c4f0:	429d      	cmp	r5, r3
 800c4f2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c4f6:	d00e      	beq.n	800c516 <__ieee754_rem_pio2f+0x5e>
 800c4f8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800c708 <__ieee754_rem_pio2f+0x250>
 800c4fc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800c500:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c504:	ed80 0a00 	vstr	s0, [r0]
 800c508:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c50c:	2001      	movs	r0, #1
 800c50e:	edc4 7a01 	vstr	s15, [r4, #4]
 800c512:	b007      	add	sp, #28
 800c514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c516:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800c70c <__ieee754_rem_pio2f+0x254>
 800c51a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800c710 <__ieee754_rem_pio2f+0x258>
 800c51e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c522:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c526:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c52a:	edc0 6a00 	vstr	s13, [r0]
 800c52e:	e7eb      	b.n	800c508 <__ieee754_rem_pio2f+0x50>
 800c530:	429d      	cmp	r5, r3
 800c532:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c536:	d00e      	beq.n	800c556 <__ieee754_rem_pio2f+0x9e>
 800c538:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800c708 <__ieee754_rem_pio2f+0x250>
 800c53c:	ee37 0a87 	vadd.f32	s0, s15, s14
 800c540:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c544:	ed80 0a00 	vstr	s0, [r0]
 800c548:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c54c:	f04f 30ff 	mov.w	r0, #4294967295
 800c550:	edc4 7a01 	vstr	s15, [r4, #4]
 800c554:	e7dd      	b.n	800c512 <__ieee754_rem_pio2f+0x5a>
 800c556:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800c70c <__ieee754_rem_pio2f+0x254>
 800c55a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800c710 <__ieee754_rem_pio2f+0x258>
 800c55e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c562:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c566:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c56a:	edc0 6a00 	vstr	s13, [r0]
 800c56e:	e7eb      	b.n	800c548 <__ieee754_rem_pio2f+0x90>
 800c570:	4b68      	ldr	r3, [pc, #416]	; (800c714 <__ieee754_rem_pio2f+0x25c>)
 800c572:	429d      	cmp	r5, r3
 800c574:	dc72      	bgt.n	800c65c <__ieee754_rem_pio2f+0x1a4>
 800c576:	f000 fcd1 	bl	800cf1c <fabsf>
 800c57a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800c718 <__ieee754_rem_pio2f+0x260>
 800c57e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c582:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c58a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c58e:	ee17 0a90 	vmov	r0, s15
 800c592:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c700 <__ieee754_rem_pio2f+0x248>
 800c596:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c59a:	281f      	cmp	r0, #31
 800c59c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800c708 <__ieee754_rem_pio2f+0x250>
 800c5a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5a4:	eeb1 6a47 	vneg.f32	s12, s14
 800c5a8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c5ac:	ee16 2a90 	vmov	r2, s13
 800c5b0:	dc1c      	bgt.n	800c5ec <__ieee754_rem_pio2f+0x134>
 800c5b2:	495a      	ldr	r1, [pc, #360]	; (800c71c <__ieee754_rem_pio2f+0x264>)
 800c5b4:	1e47      	subs	r7, r0, #1
 800c5b6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800c5ba:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800c5be:	428b      	cmp	r3, r1
 800c5c0:	d014      	beq.n	800c5ec <__ieee754_rem_pio2f+0x134>
 800c5c2:	6022      	str	r2, [r4, #0]
 800c5c4:	ed94 7a00 	vldr	s14, [r4]
 800c5c8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c5cc:	2e00      	cmp	r6, #0
 800c5ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c5d2:	ed84 0a01 	vstr	s0, [r4, #4]
 800c5d6:	da9c      	bge.n	800c512 <__ieee754_rem_pio2f+0x5a>
 800c5d8:	eeb1 7a47 	vneg.f32	s14, s14
 800c5dc:	eeb1 0a40 	vneg.f32	s0, s0
 800c5e0:	ed84 7a00 	vstr	s14, [r4]
 800c5e4:	ed84 0a01 	vstr	s0, [r4, #4]
 800c5e8:	4240      	negs	r0, r0
 800c5ea:	e792      	b.n	800c512 <__ieee754_rem_pio2f+0x5a>
 800c5ec:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c5f0:	15eb      	asrs	r3, r5, #23
 800c5f2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800c5f6:	2d08      	cmp	r5, #8
 800c5f8:	dde3      	ble.n	800c5c2 <__ieee754_rem_pio2f+0x10a>
 800c5fa:	eddf 7a44 	vldr	s15, [pc, #272]	; 800c70c <__ieee754_rem_pio2f+0x254>
 800c5fe:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c710 <__ieee754_rem_pio2f+0x258>
 800c602:	eef0 6a40 	vmov.f32	s13, s0
 800c606:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c60a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800c60e:	eea6 0a27 	vfma.f32	s0, s12, s15
 800c612:	eef0 7a40 	vmov.f32	s15, s0
 800c616:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c61a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c61e:	ee15 2a90 	vmov	r2, s11
 800c622:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c626:	1a5b      	subs	r3, r3, r1
 800c628:	2b19      	cmp	r3, #25
 800c62a:	dc04      	bgt.n	800c636 <__ieee754_rem_pio2f+0x17e>
 800c62c:	edc4 5a00 	vstr	s11, [r4]
 800c630:	eeb0 0a66 	vmov.f32	s0, s13
 800c634:	e7c6      	b.n	800c5c4 <__ieee754_rem_pio2f+0x10c>
 800c636:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800c720 <__ieee754_rem_pio2f+0x268>
 800c63a:	eeb0 0a66 	vmov.f32	s0, s13
 800c63e:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c642:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c646:	eddf 6a37 	vldr	s13, [pc, #220]	; 800c724 <__ieee754_rem_pio2f+0x26c>
 800c64a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c64e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c652:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c656:	ed84 7a00 	vstr	s14, [r4]
 800c65a:	e7b3      	b.n	800c5c4 <__ieee754_rem_pio2f+0x10c>
 800c65c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c660:	db06      	blt.n	800c670 <__ieee754_rem_pio2f+0x1b8>
 800c662:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c666:	edc0 7a01 	vstr	s15, [r0, #4]
 800c66a:	edc0 7a00 	vstr	s15, [r0]
 800c66e:	e733      	b.n	800c4d8 <__ieee754_rem_pio2f+0x20>
 800c670:	15ea      	asrs	r2, r5, #23
 800c672:	3a86      	subs	r2, #134	; 0x86
 800c674:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c678:	ee07 3a90 	vmov	s15, r3
 800c67c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c680:	eddf 6a29 	vldr	s13, [pc, #164]	; 800c728 <__ieee754_rem_pio2f+0x270>
 800c684:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c688:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c68c:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c690:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c694:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c698:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c69c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6a0:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c6a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c6a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6b0:	edcd 7a05 	vstr	s15, [sp, #20]
 800c6b4:	d11e      	bne.n	800c6f4 <__ieee754_rem_pio2f+0x23c>
 800c6b6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6be:	bf14      	ite	ne
 800c6c0:	2302      	movne	r3, #2
 800c6c2:	2301      	moveq	r3, #1
 800c6c4:	4919      	ldr	r1, [pc, #100]	; (800c72c <__ieee754_rem_pio2f+0x274>)
 800c6c6:	9101      	str	r1, [sp, #4]
 800c6c8:	2102      	movs	r1, #2
 800c6ca:	9100      	str	r1, [sp, #0]
 800c6cc:	a803      	add	r0, sp, #12
 800c6ce:	4621      	mov	r1, r4
 800c6d0:	f000 f892 	bl	800c7f8 <__kernel_rem_pio2f>
 800c6d4:	2e00      	cmp	r6, #0
 800c6d6:	f6bf af1c 	bge.w	800c512 <__ieee754_rem_pio2f+0x5a>
 800c6da:	edd4 7a00 	vldr	s15, [r4]
 800c6de:	eef1 7a67 	vneg.f32	s15, s15
 800c6e2:	edc4 7a00 	vstr	s15, [r4]
 800c6e6:	edd4 7a01 	vldr	s15, [r4, #4]
 800c6ea:	eef1 7a67 	vneg.f32	s15, s15
 800c6ee:	edc4 7a01 	vstr	s15, [r4, #4]
 800c6f2:	e779      	b.n	800c5e8 <__ieee754_rem_pio2f+0x130>
 800c6f4:	2303      	movs	r3, #3
 800c6f6:	e7e5      	b.n	800c6c4 <__ieee754_rem_pio2f+0x20c>
 800c6f8:	3f490fd8 	.word	0x3f490fd8
 800c6fc:	4016cbe3 	.word	0x4016cbe3
 800c700:	3fc90f80 	.word	0x3fc90f80
 800c704:	3fc90fd0 	.word	0x3fc90fd0
 800c708:	37354443 	.word	0x37354443
 800c70c:	37354400 	.word	0x37354400
 800c710:	2e85a308 	.word	0x2e85a308
 800c714:	43490f80 	.word	0x43490f80
 800c718:	3f22f984 	.word	0x3f22f984
 800c71c:	0800d504 	.word	0x0800d504
 800c720:	2e85a300 	.word	0x2e85a300
 800c724:	248d3132 	.word	0x248d3132
 800c728:	43800000 	.word	0x43800000
 800c72c:	0800d584 	.word	0x0800d584

0800c730 <__ieee754_sqrtf>:
 800c730:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c734:	4770      	bx	lr
	...

0800c738 <__kernel_cosf>:
 800c738:	ee10 3a10 	vmov	r3, s0
 800c73c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c740:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c744:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c748:	da05      	bge.n	800c756 <__kernel_cosf+0x1e>
 800c74a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c74e:	ee17 2a90 	vmov	r2, s15
 800c752:	2a00      	cmp	r2, #0
 800c754:	d03d      	beq.n	800c7d2 <__kernel_cosf+0x9a>
 800c756:	ee60 5a00 	vmul.f32	s11, s0, s0
 800c75a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c7d8 <__kernel_cosf+0xa0>
 800c75e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c7dc <__kernel_cosf+0xa4>
 800c762:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800c7e0 <__kernel_cosf+0xa8>
 800c766:	4a1f      	ldr	r2, [pc, #124]	; (800c7e4 <__kernel_cosf+0xac>)
 800c768:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c76c:	4293      	cmp	r3, r2
 800c76e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800c7e8 <__kernel_cosf+0xb0>
 800c772:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c776:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800c7ec <__kernel_cosf+0xb4>
 800c77a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c77e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800c7f0 <__kernel_cosf+0xb8>
 800c782:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c786:	eeb0 7a66 	vmov.f32	s14, s13
 800c78a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c78e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c792:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800c796:	ee67 6a25 	vmul.f32	s13, s14, s11
 800c79a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800c79e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c7a2:	dc04      	bgt.n	800c7ae <__kernel_cosf+0x76>
 800c7a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c7a8:	ee36 0a47 	vsub.f32	s0, s12, s14
 800c7ac:	4770      	bx	lr
 800c7ae:	4a11      	ldr	r2, [pc, #68]	; (800c7f4 <__kernel_cosf+0xbc>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	bfda      	itte	le
 800c7b4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800c7b8:	ee06 3a90 	vmovle	s13, r3
 800c7bc:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800c7c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c7c4:	ee36 0a66 	vsub.f32	s0, s12, s13
 800c7c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c7cc:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c7d0:	4770      	bx	lr
 800c7d2:	eeb0 0a46 	vmov.f32	s0, s12
 800c7d6:	4770      	bx	lr
 800c7d8:	ad47d74e 	.word	0xad47d74e
 800c7dc:	310f74f6 	.word	0x310f74f6
 800c7e0:	3d2aaaab 	.word	0x3d2aaaab
 800c7e4:	3e999999 	.word	0x3e999999
 800c7e8:	b493f27c 	.word	0xb493f27c
 800c7ec:	37d00d01 	.word	0x37d00d01
 800c7f0:	bab60b61 	.word	0xbab60b61
 800c7f4:	3f480000 	.word	0x3f480000

0800c7f8 <__kernel_rem_pio2f>:
 800c7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7fc:	ed2d 8b04 	vpush	{d8-d9}
 800c800:	b0d9      	sub	sp, #356	; 0x164
 800c802:	4688      	mov	r8, r1
 800c804:	9002      	str	r0, [sp, #8]
 800c806:	49bb      	ldr	r1, [pc, #748]	; (800caf4 <__kernel_rem_pio2f+0x2fc>)
 800c808:	9866      	ldr	r0, [sp, #408]	; 0x198
 800c80a:	9301      	str	r3, [sp, #4]
 800c80c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800c810:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800c814:	1e59      	subs	r1, r3, #1
 800c816:	1d13      	adds	r3, r2, #4
 800c818:	db27      	blt.n	800c86a <__kernel_rem_pio2f+0x72>
 800c81a:	f1b2 0b03 	subs.w	fp, r2, #3
 800c81e:	bf48      	it	mi
 800c820:	f102 0b04 	addmi.w	fp, r2, #4
 800c824:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800c828:	1c45      	adds	r5, r0, #1
 800c82a:	00ec      	lsls	r4, r5, #3
 800c82c:	1a47      	subs	r7, r0, r1
 800c82e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800cb04 <__kernel_rem_pio2f+0x30c>
 800c832:	9403      	str	r4, [sp, #12]
 800c834:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800c838:	eb0a 0c01 	add.w	ip, sl, r1
 800c83c:	ae1c      	add	r6, sp, #112	; 0x70
 800c83e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800c842:	2400      	movs	r4, #0
 800c844:	4564      	cmp	r4, ip
 800c846:	dd12      	ble.n	800c86e <__kernel_rem_pio2f+0x76>
 800c848:	9b01      	ldr	r3, [sp, #4]
 800c84a:	ac1c      	add	r4, sp, #112	; 0x70
 800c84c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800c850:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800c854:	f04f 0c00 	mov.w	ip, #0
 800c858:	45d4      	cmp	ip, sl
 800c85a:	dc27      	bgt.n	800c8ac <__kernel_rem_pio2f+0xb4>
 800c85c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c860:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800cb04 <__kernel_rem_pio2f+0x30c>
 800c864:	4627      	mov	r7, r4
 800c866:	2600      	movs	r6, #0
 800c868:	e016      	b.n	800c898 <__kernel_rem_pio2f+0xa0>
 800c86a:	2000      	movs	r0, #0
 800c86c:	e7dc      	b.n	800c828 <__kernel_rem_pio2f+0x30>
 800c86e:	42e7      	cmn	r7, r4
 800c870:	bf5d      	ittte	pl
 800c872:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800c876:	ee07 3a90 	vmovpl	s15, r3
 800c87a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c87e:	eef0 7a47 	vmovmi.f32	s15, s14
 800c882:	ece6 7a01 	vstmia	r6!, {s15}
 800c886:	3401      	adds	r4, #1
 800c888:	e7dc      	b.n	800c844 <__kernel_rem_pio2f+0x4c>
 800c88a:	ecf9 6a01 	vldmia	r9!, {s13}
 800c88e:	ed97 7a00 	vldr	s14, [r7]
 800c892:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c896:	3601      	adds	r6, #1
 800c898:	428e      	cmp	r6, r1
 800c89a:	f1a7 0704 	sub.w	r7, r7, #4
 800c89e:	ddf4      	ble.n	800c88a <__kernel_rem_pio2f+0x92>
 800c8a0:	eceb 7a01 	vstmia	fp!, {s15}
 800c8a4:	f10c 0c01 	add.w	ip, ip, #1
 800c8a8:	3404      	adds	r4, #4
 800c8aa:	e7d5      	b.n	800c858 <__kernel_rem_pio2f+0x60>
 800c8ac:	ab08      	add	r3, sp, #32
 800c8ae:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800c8b2:	eddf 8a93 	vldr	s17, [pc, #588]	; 800cb00 <__kernel_rem_pio2f+0x308>
 800c8b6:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800cafc <__kernel_rem_pio2f+0x304>
 800c8ba:	9304      	str	r3, [sp, #16]
 800c8bc:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800c8c0:	4656      	mov	r6, sl
 800c8c2:	00b3      	lsls	r3, r6, #2
 800c8c4:	9305      	str	r3, [sp, #20]
 800c8c6:	ab58      	add	r3, sp, #352	; 0x160
 800c8c8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800c8cc:	ac08      	add	r4, sp, #32
 800c8ce:	ab44      	add	r3, sp, #272	; 0x110
 800c8d0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800c8d4:	46a4      	mov	ip, r4
 800c8d6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800c8da:	4637      	mov	r7, r6
 800c8dc:	2f00      	cmp	r7, #0
 800c8de:	f1a0 0004 	sub.w	r0, r0, #4
 800c8e2:	dc4f      	bgt.n	800c984 <__kernel_rem_pio2f+0x18c>
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800c8ea:	f000 fb61 	bl	800cfb0 <scalbnf>
 800c8ee:	eeb0 8a40 	vmov.f32	s16, s0
 800c8f2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800c8f6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c8fa:	f000 fb17 	bl	800cf2c <floorf>
 800c8fe:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800c902:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c906:	2d00      	cmp	r5, #0
 800c908:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800c90c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c910:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800c914:	ee17 9a90 	vmov	r9, s15
 800c918:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c91c:	dd44      	ble.n	800c9a8 <__kernel_rem_pio2f+0x1b0>
 800c91e:	f106 3cff 	add.w	ip, r6, #4294967295
 800c922:	ab08      	add	r3, sp, #32
 800c924:	f1c5 0e08 	rsb	lr, r5, #8
 800c928:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800c92c:	fa47 f00e 	asr.w	r0, r7, lr
 800c930:	4481      	add	r9, r0
 800c932:	fa00 f00e 	lsl.w	r0, r0, lr
 800c936:	1a3f      	subs	r7, r7, r0
 800c938:	f1c5 0007 	rsb	r0, r5, #7
 800c93c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800c940:	4107      	asrs	r7, r0
 800c942:	2f00      	cmp	r7, #0
 800c944:	dd3f      	ble.n	800c9c6 <__kernel_rem_pio2f+0x1ce>
 800c946:	f04f 0e00 	mov.w	lr, #0
 800c94a:	f109 0901 	add.w	r9, r9, #1
 800c94e:	4673      	mov	r3, lr
 800c950:	4576      	cmp	r6, lr
 800c952:	dc6b      	bgt.n	800ca2c <__kernel_rem_pio2f+0x234>
 800c954:	2d00      	cmp	r5, #0
 800c956:	dd04      	ble.n	800c962 <__kernel_rem_pio2f+0x16a>
 800c958:	2d01      	cmp	r5, #1
 800c95a:	d078      	beq.n	800ca4e <__kernel_rem_pio2f+0x256>
 800c95c:	2d02      	cmp	r5, #2
 800c95e:	f000 8081 	beq.w	800ca64 <__kernel_rem_pio2f+0x26c>
 800c962:	2f02      	cmp	r7, #2
 800c964:	d12f      	bne.n	800c9c6 <__kernel_rem_pio2f+0x1ce>
 800c966:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c96a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c96e:	b353      	cbz	r3, 800c9c6 <__kernel_rem_pio2f+0x1ce>
 800c970:	4628      	mov	r0, r5
 800c972:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800c976:	f000 fb1b 	bl	800cfb0 <scalbnf>
 800c97a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800c97e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c982:	e020      	b.n	800c9c6 <__kernel_rem_pio2f+0x1ce>
 800c984:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c988:	3f01      	subs	r7, #1
 800c98a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c98e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c992:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c996:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c99a:	ecac 0a01 	vstmia	ip!, {s0}
 800c99e:	ed90 0a00 	vldr	s0, [r0]
 800c9a2:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c9a6:	e799      	b.n	800c8dc <__kernel_rem_pio2f+0xe4>
 800c9a8:	d105      	bne.n	800c9b6 <__kernel_rem_pio2f+0x1be>
 800c9aa:	1e70      	subs	r0, r6, #1
 800c9ac:	ab08      	add	r3, sp, #32
 800c9ae:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800c9b2:	11ff      	asrs	r7, r7, #7
 800c9b4:	e7c5      	b.n	800c942 <__kernel_rem_pio2f+0x14a>
 800c9b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c9ba:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c9be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9c2:	da31      	bge.n	800ca28 <__kernel_rem_pio2f+0x230>
 800c9c4:	2700      	movs	r7, #0
 800c9c6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9ce:	f040 809b 	bne.w	800cb08 <__kernel_rem_pio2f+0x310>
 800c9d2:	1e74      	subs	r4, r6, #1
 800c9d4:	46a4      	mov	ip, r4
 800c9d6:	2000      	movs	r0, #0
 800c9d8:	45d4      	cmp	ip, sl
 800c9da:	da4a      	bge.n	800ca72 <__kernel_rem_pio2f+0x27a>
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	d07a      	beq.n	800cad6 <__kernel_rem_pio2f+0x2de>
 800c9e0:	ab08      	add	r3, sp, #32
 800c9e2:	3d08      	subs	r5, #8
 800c9e4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	f000 8081 	beq.w	800caf0 <__kernel_rem_pio2f+0x2f8>
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c9f4:	00a5      	lsls	r5, r4, #2
 800c9f6:	f000 fadb 	bl	800cfb0 <scalbnf>
 800c9fa:	aa44      	add	r2, sp, #272	; 0x110
 800c9fc:	1d2b      	adds	r3, r5, #4
 800c9fe:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800cb00 <__kernel_rem_pio2f+0x308>
 800ca02:	18d1      	adds	r1, r2, r3
 800ca04:	4622      	mov	r2, r4
 800ca06:	2a00      	cmp	r2, #0
 800ca08:	f280 80ae 	bge.w	800cb68 <__kernel_rem_pio2f+0x370>
 800ca0c:	4622      	mov	r2, r4
 800ca0e:	2a00      	cmp	r2, #0
 800ca10:	f2c0 80cc 	blt.w	800cbac <__kernel_rem_pio2f+0x3b4>
 800ca14:	a944      	add	r1, sp, #272	; 0x110
 800ca16:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800ca1a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800caf8 <__kernel_rem_pio2f+0x300>
 800ca1e:	eddf 7a39 	vldr	s15, [pc, #228]	; 800cb04 <__kernel_rem_pio2f+0x30c>
 800ca22:	2000      	movs	r0, #0
 800ca24:	1aa1      	subs	r1, r4, r2
 800ca26:	e0b6      	b.n	800cb96 <__kernel_rem_pio2f+0x39e>
 800ca28:	2702      	movs	r7, #2
 800ca2a:	e78c      	b.n	800c946 <__kernel_rem_pio2f+0x14e>
 800ca2c:	6820      	ldr	r0, [r4, #0]
 800ca2e:	b94b      	cbnz	r3, 800ca44 <__kernel_rem_pio2f+0x24c>
 800ca30:	b118      	cbz	r0, 800ca3a <__kernel_rem_pio2f+0x242>
 800ca32:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800ca36:	6020      	str	r0, [r4, #0]
 800ca38:	2001      	movs	r0, #1
 800ca3a:	f10e 0e01 	add.w	lr, lr, #1
 800ca3e:	3404      	adds	r4, #4
 800ca40:	4603      	mov	r3, r0
 800ca42:	e785      	b.n	800c950 <__kernel_rem_pio2f+0x158>
 800ca44:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800ca48:	6020      	str	r0, [r4, #0]
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	e7f5      	b.n	800ca3a <__kernel_rem_pio2f+0x242>
 800ca4e:	1e74      	subs	r4, r6, #1
 800ca50:	a808      	add	r0, sp, #32
 800ca52:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800ca56:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800ca5a:	f10d 0c20 	add.w	ip, sp, #32
 800ca5e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800ca62:	e77e      	b.n	800c962 <__kernel_rem_pio2f+0x16a>
 800ca64:	1e74      	subs	r4, r6, #1
 800ca66:	a808      	add	r0, sp, #32
 800ca68:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800ca6c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800ca70:	e7f3      	b.n	800ca5a <__kernel_rem_pio2f+0x262>
 800ca72:	ab08      	add	r3, sp, #32
 800ca74:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800ca78:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ca7c:	4318      	orrs	r0, r3
 800ca7e:	e7ab      	b.n	800c9d8 <__kernel_rem_pio2f+0x1e0>
 800ca80:	f10c 0c01 	add.w	ip, ip, #1
 800ca84:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800ca88:	2c00      	cmp	r4, #0
 800ca8a:	d0f9      	beq.n	800ca80 <__kernel_rem_pio2f+0x288>
 800ca8c:	9b05      	ldr	r3, [sp, #20]
 800ca8e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800ca92:	eb0d 0003 	add.w	r0, sp, r3
 800ca96:	9b01      	ldr	r3, [sp, #4]
 800ca98:	18f4      	adds	r4, r6, r3
 800ca9a:	ab1c      	add	r3, sp, #112	; 0x70
 800ca9c:	1c77      	adds	r7, r6, #1
 800ca9e:	384c      	subs	r0, #76	; 0x4c
 800caa0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800caa4:	4466      	add	r6, ip
 800caa6:	42be      	cmp	r6, r7
 800caa8:	f6ff af0b 	blt.w	800c8c2 <__kernel_rem_pio2f+0xca>
 800caac:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800cab0:	f8dd e008 	ldr.w	lr, [sp, #8]
 800cab4:	ee07 3a90 	vmov	s15, r3
 800cab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cabc:	f04f 0c00 	mov.w	ip, #0
 800cac0:	ece4 7a01 	vstmia	r4!, {s15}
 800cac4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800cb04 <__kernel_rem_pio2f+0x30c>
 800cac8:	46a1      	mov	r9, r4
 800caca:	458c      	cmp	ip, r1
 800cacc:	dd07      	ble.n	800cade <__kernel_rem_pio2f+0x2e6>
 800cace:	ece0 7a01 	vstmia	r0!, {s15}
 800cad2:	3701      	adds	r7, #1
 800cad4:	e7e7      	b.n	800caa6 <__kernel_rem_pio2f+0x2ae>
 800cad6:	9804      	ldr	r0, [sp, #16]
 800cad8:	f04f 0c01 	mov.w	ip, #1
 800cadc:	e7d2      	b.n	800ca84 <__kernel_rem_pio2f+0x28c>
 800cade:	ecfe 6a01 	vldmia	lr!, {s13}
 800cae2:	ed39 7a01 	vldmdb	r9!, {s14}
 800cae6:	f10c 0c01 	add.w	ip, ip, #1
 800caea:	eee6 7a87 	vfma.f32	s15, s13, s14
 800caee:	e7ec      	b.n	800caca <__kernel_rem_pio2f+0x2d2>
 800caf0:	3c01      	subs	r4, #1
 800caf2:	e775      	b.n	800c9e0 <__kernel_rem_pio2f+0x1e8>
 800caf4:	0800d8c8 	.word	0x0800d8c8
 800caf8:	0800d89c 	.word	0x0800d89c
 800cafc:	43800000 	.word	0x43800000
 800cb00:	3b800000 	.word	0x3b800000
 800cb04:	00000000 	.word	0x00000000
 800cb08:	9b03      	ldr	r3, [sp, #12]
 800cb0a:	eeb0 0a48 	vmov.f32	s0, s16
 800cb0e:	1a98      	subs	r0, r3, r2
 800cb10:	f000 fa4e 	bl	800cfb0 <scalbnf>
 800cb14:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800cafc <__kernel_rem_pio2f+0x304>
 800cb18:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800cb1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb20:	db19      	blt.n	800cb56 <__kernel_rem_pio2f+0x35e>
 800cb22:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800cb00 <__kernel_rem_pio2f+0x308>
 800cb26:	ee60 7a27 	vmul.f32	s15, s0, s15
 800cb2a:	aa08      	add	r2, sp, #32
 800cb2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb30:	1c74      	adds	r4, r6, #1
 800cb32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb36:	3508      	adds	r5, #8
 800cb38:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800cb3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb40:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cb44:	ee10 3a10 	vmov	r3, s0
 800cb48:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800cb4c:	ee17 3a90 	vmov	r3, s15
 800cb50:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800cb54:	e74b      	b.n	800c9ee <__kernel_rem_pio2f+0x1f6>
 800cb56:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cb5a:	aa08      	add	r2, sp, #32
 800cb5c:	ee10 3a10 	vmov	r3, s0
 800cb60:	4634      	mov	r4, r6
 800cb62:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800cb66:	e742      	b.n	800c9ee <__kernel_rem_pio2f+0x1f6>
 800cb68:	a808      	add	r0, sp, #32
 800cb6a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800cb6e:	9001      	str	r0, [sp, #4]
 800cb70:	ee07 0a90 	vmov	s15, r0
 800cb74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb78:	3a01      	subs	r2, #1
 800cb7a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800cb7e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800cb82:	ed61 7a01 	vstmdb	r1!, {s15}
 800cb86:	e73e      	b.n	800ca06 <__kernel_rem_pio2f+0x20e>
 800cb88:	ecfc 6a01 	vldmia	ip!, {s13}
 800cb8c:	ecb6 7a01 	vldmia	r6!, {s14}
 800cb90:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cb94:	3001      	adds	r0, #1
 800cb96:	4550      	cmp	r0, sl
 800cb98:	dc01      	bgt.n	800cb9e <__kernel_rem_pio2f+0x3a6>
 800cb9a:	4288      	cmp	r0, r1
 800cb9c:	ddf4      	ble.n	800cb88 <__kernel_rem_pio2f+0x390>
 800cb9e:	a858      	add	r0, sp, #352	; 0x160
 800cba0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cba4:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800cba8:	3a01      	subs	r2, #1
 800cbaa:	e730      	b.n	800ca0e <__kernel_rem_pio2f+0x216>
 800cbac:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800cbae:	2a02      	cmp	r2, #2
 800cbb0:	dc09      	bgt.n	800cbc6 <__kernel_rem_pio2f+0x3ce>
 800cbb2:	2a00      	cmp	r2, #0
 800cbb4:	dc2a      	bgt.n	800cc0c <__kernel_rem_pio2f+0x414>
 800cbb6:	d043      	beq.n	800cc40 <__kernel_rem_pio2f+0x448>
 800cbb8:	f009 0007 	and.w	r0, r9, #7
 800cbbc:	b059      	add	sp, #356	; 0x164
 800cbbe:	ecbd 8b04 	vpop	{d8-d9}
 800cbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800cbc8:	2b03      	cmp	r3, #3
 800cbca:	d1f5      	bne.n	800cbb8 <__kernel_rem_pio2f+0x3c0>
 800cbcc:	ab30      	add	r3, sp, #192	; 0xc0
 800cbce:	442b      	add	r3, r5
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	2800      	cmp	r0, #0
 800cbd8:	f1a1 0104 	sub.w	r1, r1, #4
 800cbdc:	dc51      	bgt.n	800cc82 <__kernel_rem_pio2f+0x48a>
 800cbde:	4621      	mov	r1, r4
 800cbe0:	2901      	cmp	r1, #1
 800cbe2:	f1a2 0204 	sub.w	r2, r2, #4
 800cbe6:	dc5c      	bgt.n	800cca2 <__kernel_rem_pio2f+0x4aa>
 800cbe8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800cb04 <__kernel_rem_pio2f+0x30c>
 800cbec:	3304      	adds	r3, #4
 800cbee:	2c01      	cmp	r4, #1
 800cbf0:	dc67      	bgt.n	800ccc2 <__kernel_rem_pio2f+0x4ca>
 800cbf2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800cbf6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800cbfa:	2f00      	cmp	r7, #0
 800cbfc:	d167      	bne.n	800ccce <__kernel_rem_pio2f+0x4d6>
 800cbfe:	edc8 6a00 	vstr	s13, [r8]
 800cc02:	ed88 7a01 	vstr	s14, [r8, #4]
 800cc06:	edc8 7a02 	vstr	s15, [r8, #8]
 800cc0a:	e7d5      	b.n	800cbb8 <__kernel_rem_pio2f+0x3c0>
 800cc0c:	aa30      	add	r2, sp, #192	; 0xc0
 800cc0e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800cb04 <__kernel_rem_pio2f+0x30c>
 800cc12:	4413      	add	r3, r2
 800cc14:	4622      	mov	r2, r4
 800cc16:	2a00      	cmp	r2, #0
 800cc18:	da24      	bge.n	800cc64 <__kernel_rem_pio2f+0x46c>
 800cc1a:	b34f      	cbz	r7, 800cc70 <__kernel_rem_pio2f+0x478>
 800cc1c:	eef1 7a47 	vneg.f32	s15, s14
 800cc20:	edc8 7a00 	vstr	s15, [r8]
 800cc24:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800cc28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc2c:	aa31      	add	r2, sp, #196	; 0xc4
 800cc2e:	2301      	movs	r3, #1
 800cc30:	429c      	cmp	r4, r3
 800cc32:	da20      	bge.n	800cc76 <__kernel_rem_pio2f+0x47e>
 800cc34:	b10f      	cbz	r7, 800cc3a <__kernel_rem_pio2f+0x442>
 800cc36:	eef1 7a67 	vneg.f32	s15, s15
 800cc3a:	edc8 7a01 	vstr	s15, [r8, #4]
 800cc3e:	e7bb      	b.n	800cbb8 <__kernel_rem_pio2f+0x3c0>
 800cc40:	aa30      	add	r2, sp, #192	; 0xc0
 800cc42:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800cb04 <__kernel_rem_pio2f+0x30c>
 800cc46:	4413      	add	r3, r2
 800cc48:	2c00      	cmp	r4, #0
 800cc4a:	da05      	bge.n	800cc58 <__kernel_rem_pio2f+0x460>
 800cc4c:	b10f      	cbz	r7, 800cc52 <__kernel_rem_pio2f+0x45a>
 800cc4e:	eef1 7a67 	vneg.f32	s15, s15
 800cc52:	edc8 7a00 	vstr	s15, [r8]
 800cc56:	e7af      	b.n	800cbb8 <__kernel_rem_pio2f+0x3c0>
 800cc58:	ed33 7a01 	vldmdb	r3!, {s14}
 800cc5c:	3c01      	subs	r4, #1
 800cc5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc62:	e7f1      	b.n	800cc48 <__kernel_rem_pio2f+0x450>
 800cc64:	ed73 7a01 	vldmdb	r3!, {s15}
 800cc68:	3a01      	subs	r2, #1
 800cc6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cc6e:	e7d2      	b.n	800cc16 <__kernel_rem_pio2f+0x41e>
 800cc70:	eef0 7a47 	vmov.f32	s15, s14
 800cc74:	e7d4      	b.n	800cc20 <__kernel_rem_pio2f+0x428>
 800cc76:	ecb2 7a01 	vldmia	r2!, {s14}
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc80:	e7d6      	b.n	800cc30 <__kernel_rem_pio2f+0x438>
 800cc82:	edd1 7a00 	vldr	s15, [r1]
 800cc86:	edd1 6a01 	vldr	s13, [r1, #4]
 800cc8a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cc8e:	3801      	subs	r0, #1
 800cc90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc94:	ed81 7a00 	vstr	s14, [r1]
 800cc98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc9c:	edc1 7a01 	vstr	s15, [r1, #4]
 800cca0:	e799      	b.n	800cbd6 <__kernel_rem_pio2f+0x3de>
 800cca2:	edd2 7a00 	vldr	s15, [r2]
 800cca6:	edd2 6a01 	vldr	s13, [r2, #4]
 800ccaa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ccae:	3901      	subs	r1, #1
 800ccb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ccb4:	ed82 7a00 	vstr	s14, [r2]
 800ccb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccbc:	edc2 7a01 	vstr	s15, [r2, #4]
 800ccc0:	e78e      	b.n	800cbe0 <__kernel_rem_pio2f+0x3e8>
 800ccc2:	ed33 7a01 	vldmdb	r3!, {s14}
 800ccc6:	3c01      	subs	r4, #1
 800ccc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cccc:	e78f      	b.n	800cbee <__kernel_rem_pio2f+0x3f6>
 800ccce:	eef1 6a66 	vneg.f32	s13, s13
 800ccd2:	eeb1 7a47 	vneg.f32	s14, s14
 800ccd6:	edc8 6a00 	vstr	s13, [r8]
 800ccda:	ed88 7a01 	vstr	s14, [r8, #4]
 800ccde:	eef1 7a67 	vneg.f32	s15, s15
 800cce2:	e790      	b.n	800cc06 <__kernel_rem_pio2f+0x40e>

0800cce4 <__kernel_sinf>:
 800cce4:	ee10 3a10 	vmov	r3, s0
 800cce8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ccec:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ccf0:	da04      	bge.n	800ccfc <__kernel_sinf+0x18>
 800ccf2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ccf6:	ee17 3a90 	vmov	r3, s15
 800ccfa:	b35b      	cbz	r3, 800cd54 <__kernel_sinf+0x70>
 800ccfc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cd00:	eddf 7a15 	vldr	s15, [pc, #84]	; 800cd58 <__kernel_sinf+0x74>
 800cd04:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800cd5c <__kernel_sinf+0x78>
 800cd08:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cd0c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800cd60 <__kernel_sinf+0x7c>
 800cd10:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cd14:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800cd64 <__kernel_sinf+0x80>
 800cd18:	eea7 6a87 	vfma.f32	s12, s15, s14
 800cd1c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800cd68 <__kernel_sinf+0x84>
 800cd20:	ee60 6a07 	vmul.f32	s13, s0, s14
 800cd24:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cd28:	b930      	cbnz	r0, 800cd38 <__kernel_sinf+0x54>
 800cd2a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800cd6c <__kernel_sinf+0x88>
 800cd2e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cd32:	eea6 0a26 	vfma.f32	s0, s12, s13
 800cd36:	4770      	bx	lr
 800cd38:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800cd3c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800cd40:	eee0 7a86 	vfma.f32	s15, s1, s12
 800cd44:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800cd48:	eddf 7a09 	vldr	s15, [pc, #36]	; 800cd70 <__kernel_sinf+0x8c>
 800cd4c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800cd50:	ee30 0a60 	vsub.f32	s0, s0, s1
 800cd54:	4770      	bx	lr
 800cd56:	bf00      	nop
 800cd58:	2f2ec9d3 	.word	0x2f2ec9d3
 800cd5c:	b2d72f34 	.word	0xb2d72f34
 800cd60:	3638ef1b 	.word	0x3638ef1b
 800cd64:	b9500d01 	.word	0xb9500d01
 800cd68:	3c088889 	.word	0x3c088889
 800cd6c:	be2aaaab 	.word	0xbe2aaaab
 800cd70:	3e2aaaab 	.word	0x3e2aaaab

0800cd74 <atanf>:
 800cd74:	b538      	push	{r3, r4, r5, lr}
 800cd76:	ee10 5a10 	vmov	r5, s0
 800cd7a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800cd7e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800cd82:	eef0 7a40 	vmov.f32	s15, s0
 800cd86:	db10      	blt.n	800cdaa <atanf+0x36>
 800cd88:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800cd8c:	dd04      	ble.n	800cd98 <atanf+0x24>
 800cd8e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800cd92:	eeb0 0a67 	vmov.f32	s0, s15
 800cd96:	bd38      	pop	{r3, r4, r5, pc}
 800cd98:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ced0 <atanf+0x15c>
 800cd9c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800ced4 <atanf+0x160>
 800cda0:	2d00      	cmp	r5, #0
 800cda2:	bfd8      	it	le
 800cda4:	eef0 7a40 	vmovle.f32	s15, s0
 800cda8:	e7f3      	b.n	800cd92 <atanf+0x1e>
 800cdaa:	4b4b      	ldr	r3, [pc, #300]	; (800ced8 <atanf+0x164>)
 800cdac:	429c      	cmp	r4, r3
 800cdae:	dc10      	bgt.n	800cdd2 <atanf+0x5e>
 800cdb0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800cdb4:	da0a      	bge.n	800cdcc <atanf+0x58>
 800cdb6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800cedc <atanf+0x168>
 800cdba:	ee30 7a07 	vadd.f32	s14, s0, s14
 800cdbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdc2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800cdc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdca:	dce2      	bgt.n	800cd92 <atanf+0x1e>
 800cdcc:	f04f 33ff 	mov.w	r3, #4294967295
 800cdd0:	e013      	b.n	800cdfa <atanf+0x86>
 800cdd2:	f000 f8a3 	bl	800cf1c <fabsf>
 800cdd6:	4b42      	ldr	r3, [pc, #264]	; (800cee0 <atanf+0x16c>)
 800cdd8:	429c      	cmp	r4, r3
 800cdda:	dc4f      	bgt.n	800ce7c <atanf+0x108>
 800cddc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800cde0:	429c      	cmp	r4, r3
 800cde2:	dc41      	bgt.n	800ce68 <atanf+0xf4>
 800cde4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800cde8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800cdec:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cdf6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cdfa:	1c5a      	adds	r2, r3, #1
 800cdfc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ce00:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800cee4 <atanf+0x170>
 800ce04:	eddf 5a38 	vldr	s11, [pc, #224]	; 800cee8 <atanf+0x174>
 800ce08:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800ceec <atanf+0x178>
 800ce0c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ce10:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ce14:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800cef0 <atanf+0x17c>
 800ce18:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ce1c:	eddf 5a35 	vldr	s11, [pc, #212]	; 800cef4 <atanf+0x180>
 800ce20:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ce24:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800cef8 <atanf+0x184>
 800ce28:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ce2c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cefc <atanf+0x188>
 800ce30:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ce34:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800cf00 <atanf+0x18c>
 800ce38:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ce3c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800cf04 <atanf+0x190>
 800ce40:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ce44:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800cf08 <atanf+0x194>
 800ce48:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ce4c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800cf0c <atanf+0x198>
 800ce50:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ce54:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ce58:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ce5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ce60:	d121      	bne.n	800cea6 <atanf+0x132>
 800ce62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce66:	e794      	b.n	800cd92 <atanf+0x1e>
 800ce68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ce6c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ce70:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ce74:	2301      	movs	r3, #1
 800ce76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ce7a:	e7be      	b.n	800cdfa <atanf+0x86>
 800ce7c:	4b24      	ldr	r3, [pc, #144]	; (800cf10 <atanf+0x19c>)
 800ce7e:	429c      	cmp	r4, r3
 800ce80:	dc0b      	bgt.n	800ce9a <atanf+0x126>
 800ce82:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ce86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce8a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ce8e:	2302      	movs	r3, #2
 800ce90:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ce94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce98:	e7af      	b.n	800cdfa <atanf+0x86>
 800ce9a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ce9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cea2:	2303      	movs	r3, #3
 800cea4:	e7a9      	b.n	800cdfa <atanf+0x86>
 800cea6:	4a1b      	ldr	r2, [pc, #108]	; (800cf14 <atanf+0x1a0>)
 800cea8:	491b      	ldr	r1, [pc, #108]	; (800cf18 <atanf+0x1a4>)
 800ceaa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ceae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ceb2:	ed93 0a00 	vldr	s0, [r3]
 800ceb6:	ee37 7a40 	vsub.f32	s14, s14, s0
 800ceba:	ed92 0a00 	vldr	s0, [r2]
 800cebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cec2:	2d00      	cmp	r5, #0
 800cec4:	ee70 7a67 	vsub.f32	s15, s0, s15
 800cec8:	bfb8      	it	lt
 800ceca:	eef1 7a67 	vneglt.f32	s15, s15
 800cece:	e760      	b.n	800cd92 <atanf+0x1e>
 800ced0:	3fc90fdb 	.word	0x3fc90fdb
 800ced4:	bfc90fdb 	.word	0xbfc90fdb
 800ced8:	3edfffff 	.word	0x3edfffff
 800cedc:	7149f2ca 	.word	0x7149f2ca
 800cee0:	3f97ffff 	.word	0x3f97ffff
 800cee4:	3c8569d7 	.word	0x3c8569d7
 800cee8:	3d4bda59 	.word	0x3d4bda59
 800ceec:	bd6ef16b 	.word	0xbd6ef16b
 800cef0:	3d886b35 	.word	0x3d886b35
 800cef4:	3dba2e6e 	.word	0x3dba2e6e
 800cef8:	3e124925 	.word	0x3e124925
 800cefc:	3eaaaaab 	.word	0x3eaaaaab
 800cf00:	bd15a221 	.word	0xbd15a221
 800cf04:	bd9d8795 	.word	0xbd9d8795
 800cf08:	bde38e38 	.word	0xbde38e38
 800cf0c:	be4ccccd 	.word	0xbe4ccccd
 800cf10:	401bffff 	.word	0x401bffff
 800cf14:	0800d8d4 	.word	0x0800d8d4
 800cf18:	0800d8e4 	.word	0x0800d8e4

0800cf1c <fabsf>:
 800cf1c:	ee10 3a10 	vmov	r3, s0
 800cf20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf24:	ee00 3a10 	vmov	s0, r3
 800cf28:	4770      	bx	lr
	...

0800cf2c <floorf>:
 800cf2c:	ee10 3a10 	vmov	r3, s0
 800cf30:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cf34:	3a7f      	subs	r2, #127	; 0x7f
 800cf36:	2a16      	cmp	r2, #22
 800cf38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cf3c:	dc2a      	bgt.n	800cf94 <floorf+0x68>
 800cf3e:	2a00      	cmp	r2, #0
 800cf40:	da11      	bge.n	800cf66 <floorf+0x3a>
 800cf42:	eddf 7a18 	vldr	s15, [pc, #96]	; 800cfa4 <floorf+0x78>
 800cf46:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cf4a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cf4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf52:	dd05      	ble.n	800cf60 <floorf+0x34>
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	da23      	bge.n	800cfa0 <floorf+0x74>
 800cf58:	4a13      	ldr	r2, [pc, #76]	; (800cfa8 <floorf+0x7c>)
 800cf5a:	2900      	cmp	r1, #0
 800cf5c:	bf18      	it	ne
 800cf5e:	4613      	movne	r3, r2
 800cf60:	ee00 3a10 	vmov	s0, r3
 800cf64:	4770      	bx	lr
 800cf66:	4911      	ldr	r1, [pc, #68]	; (800cfac <floorf+0x80>)
 800cf68:	4111      	asrs	r1, r2
 800cf6a:	420b      	tst	r3, r1
 800cf6c:	d0fa      	beq.n	800cf64 <floorf+0x38>
 800cf6e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800cfa4 <floorf+0x78>
 800cf72:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cf76:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cf7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf7e:	ddef      	ble.n	800cf60 <floorf+0x34>
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	bfbe      	ittt	lt
 800cf84:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800cf88:	fa40 f202 	asrlt.w	r2, r0, r2
 800cf8c:	189b      	addlt	r3, r3, r2
 800cf8e:	ea23 0301 	bic.w	r3, r3, r1
 800cf92:	e7e5      	b.n	800cf60 <floorf+0x34>
 800cf94:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800cf98:	d3e4      	bcc.n	800cf64 <floorf+0x38>
 800cf9a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cf9e:	4770      	bx	lr
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	e7dd      	b.n	800cf60 <floorf+0x34>
 800cfa4:	7149f2ca 	.word	0x7149f2ca
 800cfa8:	bf800000 	.word	0xbf800000
 800cfac:	007fffff 	.word	0x007fffff

0800cfb0 <scalbnf>:
 800cfb0:	ee10 3a10 	vmov	r3, s0
 800cfb4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800cfb8:	d025      	beq.n	800d006 <scalbnf+0x56>
 800cfba:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800cfbe:	d302      	bcc.n	800cfc6 <scalbnf+0x16>
 800cfc0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cfc4:	4770      	bx	lr
 800cfc6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800cfca:	d122      	bne.n	800d012 <scalbnf+0x62>
 800cfcc:	4b2a      	ldr	r3, [pc, #168]	; (800d078 <scalbnf+0xc8>)
 800cfce:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d07c <scalbnf+0xcc>
 800cfd2:	4298      	cmp	r0, r3
 800cfd4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cfd8:	db16      	blt.n	800d008 <scalbnf+0x58>
 800cfda:	ee10 3a10 	vmov	r3, s0
 800cfde:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cfe2:	3a19      	subs	r2, #25
 800cfe4:	4402      	add	r2, r0
 800cfe6:	2afe      	cmp	r2, #254	; 0xfe
 800cfe8:	dd15      	ble.n	800d016 <scalbnf+0x66>
 800cfea:	ee10 3a10 	vmov	r3, s0
 800cfee:	eddf 7a24 	vldr	s15, [pc, #144]	; 800d080 <scalbnf+0xd0>
 800cff2:	eddf 6a24 	vldr	s13, [pc, #144]	; 800d084 <scalbnf+0xd4>
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	eeb0 7a67 	vmov.f32	s14, s15
 800cffc:	bfb8      	it	lt
 800cffe:	eef0 7a66 	vmovlt.f32	s15, s13
 800d002:	ee27 0a27 	vmul.f32	s0, s14, s15
 800d006:	4770      	bx	lr
 800d008:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d088 <scalbnf+0xd8>
 800d00c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d010:	4770      	bx	lr
 800d012:	0dd2      	lsrs	r2, r2, #23
 800d014:	e7e6      	b.n	800cfe4 <scalbnf+0x34>
 800d016:	2a00      	cmp	r2, #0
 800d018:	dd06      	ble.n	800d028 <scalbnf+0x78>
 800d01a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d01e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d022:	ee00 3a10 	vmov	s0, r3
 800d026:	4770      	bx	lr
 800d028:	f112 0f16 	cmn.w	r2, #22
 800d02c:	da1a      	bge.n	800d064 <scalbnf+0xb4>
 800d02e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d032:	4298      	cmp	r0, r3
 800d034:	ee10 3a10 	vmov	r3, s0
 800d038:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d03c:	dd0a      	ble.n	800d054 <scalbnf+0xa4>
 800d03e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800d080 <scalbnf+0xd0>
 800d042:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800d084 <scalbnf+0xd4>
 800d046:	eef0 7a40 	vmov.f32	s15, s0
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	bf18      	it	ne
 800d04e:	eeb0 0a47 	vmovne.f32	s0, s14
 800d052:	e7db      	b.n	800d00c <scalbnf+0x5c>
 800d054:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800d088 <scalbnf+0xd8>
 800d058:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d08c <scalbnf+0xdc>
 800d05c:	eef0 7a40 	vmov.f32	s15, s0
 800d060:	2b00      	cmp	r3, #0
 800d062:	e7f3      	b.n	800d04c <scalbnf+0x9c>
 800d064:	3219      	adds	r2, #25
 800d066:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d06a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d06e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d090 <scalbnf+0xe0>
 800d072:	ee07 3a10 	vmov	s14, r3
 800d076:	e7c4      	b.n	800d002 <scalbnf+0x52>
 800d078:	ffff3cb0 	.word	0xffff3cb0
 800d07c:	4c000000 	.word	0x4c000000
 800d080:	7149f2ca 	.word	0x7149f2ca
 800d084:	f149f2ca 	.word	0xf149f2ca
 800d088:	0da24260 	.word	0x0da24260
 800d08c:	8da24260 	.word	0x8da24260
 800d090:	33000000 	.word	0x33000000

0800d094 <_init>:
 800d094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d096:	bf00      	nop
 800d098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d09a:	bc08      	pop	{r3}
 800d09c:	469e      	mov	lr, r3
 800d09e:	4770      	bx	lr

0800d0a0 <_fini>:
 800d0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a2:	bf00      	nop
 800d0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0a6:	bc08      	pop	{r3}
 800d0a8:	469e      	mov	lr, r3
 800d0aa:	4770      	bx	lr
